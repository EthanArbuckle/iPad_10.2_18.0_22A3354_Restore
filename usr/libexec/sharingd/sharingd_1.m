uint64_t sub_100225AA0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100225AB4(a1, a2);
  return a1;
}

uint64_t sub_100225AB4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    ((void (*)(void))swift_release)();
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100225AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  id v17[2];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100221EDC(0, &qword_1007B5250, SFAirDropTransferItem_ptr);
  v4 = sub_10022DD44(&qword_1007B5258, &qword_1007B5250, SFAirDropTransferItem_ptr);
  v5 = (void *)Set.init(minimumCapacity:)(v2, v3, v4);
  v6 = 0;
  v17[1] = v5;
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v11)
      goto LABEL_23;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_23;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_23;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 3;
          if (v14 + 3 >= v11)
            goto LABEL_23;
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    sub_10045D9F0((Swift::Int *)v17, *(id *)(*(_QWORD *)(a1 + 56) + 8 * v13));

  }
  v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_23;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_100225CAC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void (*v73)(_BYTE *, uint64_t);
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  Swift::String v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(_BYTE *, uint64_t);
  _BYTE v98[24];
  int v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  id v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[2];

  v112 = a2;
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v120 = *(_QWORD *)(v4 - 8);
  v121 = v4;
  __chkstk_darwin(v4);
  v122 = &v98[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100008384((uint64_t *)&unk_1007B5200);
  __chkstk_darwin(v6);
  v117 = &v98[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for URL(0);
  v118 = *(_QWORD *)(v8 - 8);
  v119 = v8;
  __chkstk_darwin(v8);
  v116 = &v98[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v128 = sub_100008384(&qword_1007B5538);
  v10 = __chkstk_darwin(v128);
  v11 = __chkstk_darwin(v10);
  v125 = &v98[-v12];
  v13 = __chkstk_darwin(v11);
  v15 = &v98[-v14];
  v16 = __chkstk_darwin(v13);
  v113 = &v98[-v17];
  v18 = __chkstk_darwin(v16);
  v114 = &v98[-v19];
  v20 = __chkstk_darwin(v18);
  v22 = &v98[-v21];
  __chkstk_darwin(v20);
  v24 = &v98[-v23];
  v127 = type metadata accessor for UTType(0);
  v129 = *(_QWORD *)(v127 - 8);
  v25 = __chkstk_darwin(v127);
  v26 = __chkstk_darwin(v25);
  v123 = &v98[-v27];
  v28 = __chkstk_darwin(v26);
  v115 = &v98[-v29];
  v30 = __chkstk_darwin(v28);
  v124 = &v98[-v31];
  v32 = __chkstk_darwin(v30);
  v34 = &v98[-v33];
  __chkstk_darwin(v32);
  v126 = &v98[-v35];
  if (!kSFOperationFileNameKey)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  NSDictionary.sf_value<A>(_:as:file:line:)(v130, kSFOperationFileNameKey, &type metadata for String, 0xD000000000000070, 0x8000000100611CB0, 116, &type metadata for String);
  if (v2)
  {

    return;
  }
  v110 = v22;
  v109 = v15;
  v111 = a1;
  if (!kSFOperationFileTypeKey)
    goto LABEL_29;
  v37 = v130[0];
  v36 = v130[1];
  NSDictionary.sf_value<A>(_:as:file:line:)(v130, kSFOperationFileTypeKey, &type metadata for String, 0xD000000000000070, 0x8000000100611CB0, 117, &type metadata for String);
  v107 = v37;
  v108 = v36;
  if (!kSFOperationFileBomPathKey)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v38 = v130[0];
  v39 = (void *)v130[1];
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(v130, kSFOperationFileBomPathKey, &type metadata for String, 0xD000000000000070, 0x8000000100611CB0, 119, &type metadata for String);
  v105 = v38;
  v41 = v130[0];
  v40 = v130[1];
  if (!v130[1])
    v41 = 4271950;
  v104 = v41;
  if (!v130[1])
    v40 = 0xE300000000000000;
  v106 = v40;
  if (!kSFOperationFileIsDirectoryKey)
    goto LABEL_31;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(v130, kSFOperationFileIsDirectoryKey, &type metadata for Bool, 0xD000000000000070, 0x8000000100611CB0, 120, &type metadata for Bool);
  v103 = v39;
  if (!kSFOperationConvertMediaFormatsKey)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return;
  }
  v42 = LOBYTE(v130[0]);
  v102 = 0x8000000100611CB0;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(v130, kSFOperationConvertMediaFormatsKey, &type metadata for Bool, 0xD000000000000070, 0x8000000100611CB0, 121, &type metadata for Bool);
  v100 = v42;
  v99 = LOBYTE(v130[0]);
  v43 = v103;
  swift_bridgeObjectRetain(v103);
  UTType.init(_:)(v105, v43);
  v130[0] = 0;
  v130[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v130[1]);
  HIWORD(v130[1]) = -4864;
  v44._countAndFlagsBits = v105;
  v44._object = v43;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 96;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v101 = v130[1];
  Optional.tryUnwrap(_:file:line:)(v130[0], v130[1], 0xD000000000000070, v102, 125, v128);
  v102 = 0;
  sub_10000D0F0((uint64_t)v24, &qword_1007B5538);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v101);
  v46 = v129;
  v47 = *(_BYTE **)(v129 + 32);
  v48 = v126;
  v49 = v127;
  v50 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v47)(v126, v34, v127);
  if ((UTType.isDynamic.getter(v50) & 1) != 0)
  {
    v125 = v47;
    v51 = v117;
    v52 = v118;
    v53 = v119;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v117, 1, 1, v119);
    v54 = v122;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v120 + 104))(v122, enum case for URL.DirectoryHint.inferFromPath(_:), v121);
    v55 = v108;
    swift_bridgeObjectRetain(v108);
    v56 = v116;
    v57 = URL.init(filePath:directoryHint:relativeTo:)(v107, v55, v54, v51);
    v58 = URL.pathExtension.getter(v57);
    v60 = v59;
    (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v56, v53);
    v61 = swift_bridgeObjectRetain(v60);
    v62 = v123;
    static UTType.data.getter(v61);
    v63 = (uint64_t)v110;
    UTType.init(filenameExtension:conformingTo:)(v58, v60, v62);
    v130[0] = 0;
    v130[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(v130[1]);
    v130[0] = 0xD00000000000001BLL;
    v130[1] = 0x8000000100611E60;
    v64._countAndFlagsBits = v58;
    v64._object = v60;
    String.append(_:)(v64);
    swift_bridgeObjectRelease(v60);
    v65 = v130[1];
    v66 = v115;
    v67 = v102;
    Optional.tryUnwrap(_:file:line:)(v130[0], v130[1], 0xD000000000000070, 0x8000000100611CB0, 133, v128);
    v68 = v67;
    if (v67)
    {
      swift_bridgeObjectRelease(v106);
      swift_bridgeObjectRelease(v55);

      swift_bridgeObjectRelease(v65);
      sub_10000D0F0(v63, &qword_1007B5538);
      (*(void (**)(_BYTE *, uint64_t))(v129 + 8))(v48, v127);
      return;
    }
    sub_10000D0F0(v63, &qword_1007B5538);
    swift_bridgeObjectRelease(v65);
    v69 = v124;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v125)(v124, v66, v127);
    v70 = v107;
  }
  else
  {
    v69 = v124;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(v124, v48, v49);
    v70 = v107;
    v68 = v102;
  }
  v71 = v108;
  if (!kSFOperationtFileSubTypeKey)
    goto LABEL_33;
  v72 = v111;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(v130, kSFOperationtFileSubTypeKey, &type metadata for String, 0xD000000000000070, 0x8000000100611CB0, 140, &type metadata for String);
  if (v68)
  {
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v71);

    v73 = *(void (**)(_BYTE *, uint64_t))(v129 + 8);
    v74 = v127;
    v73(v69, v127);
    v73(v126, v74);
  }
  else
  {
    v75 = (void *)v130[1];
    v76 = v127;
    if (v130[1])
    {
      v77 = v130[0];
      swift_bridgeObjectRetain(v130[1]);
      v78 = (uint64_t)v109;
      UTType.init(_:)(v77, v75);
      v130[0] = 0;
      v130[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease(v130[1]);
      HIWORD(v130[1]) = -4864;
      v79._countAndFlagsBits = v77;
      v79._object = v75;
      String.append(_:)(v79);
      swift_bridgeObjectRelease(v75);
      v80._countAndFlagsBits = 96;
      v80._object = (void *)0xE100000000000000;
      String.append(_:)(v80);
      v81 = v130[1];
      v82 = v113;
      Optional.tryUnwrap(_:file:line:)(v130[0], v130[1], 0xD000000000000070, 0x8000000100611CB0, 141, v128);
      sub_10000D0F0(v78, &qword_1007B5538);
      swift_bridgeObjectRelease(v81);
      v83 = v129;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v82, 0, 1, v76);
      v84 = (uint64_t)v82;
      v85 = v114;
      sub_10022E718(v84, (uint64_t)v114, &qword_1007B5538);
      v70 = v107;
    }
    else
    {
      v83 = v129;
      v85 = v114;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v129 + 56))(v114, 1, 1, v127);
    }
    v86 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v83 + 48))(v85, 1, v76);
    v87 = v123;
    v88 = v100;
    v89 = v99;
    if ((_DWORD)v86)
    {
      v90 = 0;
      v91 = 0;
    }
    else
    {
      v92 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 16))(v123, v85, v76);
      v90 = UTType.identifier.getter(v92);
      v91 = v93;
      v86 = (*(uint64_t (**)(_BYTE *, uint64_t))(v83 + 8))(v87, v76);
    }
    v94 = v124;
    v95 = UTType.identifier.getter(v86);
    SFAirDropReceive.AskRequest.ItemInfo.init(convertMediaFormats:fileBomPath:fileIsDirectory:fileName:fileSubType:fileType:)(v89 & 1, v104, v106, v88 & 1, v70, v108, v90, v91, v95, v96);

    v97 = *(void (**)(_BYTE *, uint64_t))(v129 + 8);
    v97(v94, v76);
    v97(v126, v76);
    sub_10000D0F0((uint64_t)v114, &qword_1007B5538);
  }
}

unint64_t sub_100226BE4()
{
  unint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  _QWORD *v30;
  char v31;
  char v32;
  _OWORD v34[2];
  __int128 v35;
  void *v36;
  _QWORD v37[5];

  v0 = sub_10021E5F8((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v35 = kSFOperationConvertMediaFormatsKey;
  v1 = kSFOperationConvertMediaFormatsKey;
  v2 = sub_100008384(&qword_1007B5510);
  v3 = sub_10022E644();
  v4 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  v5 = SFAirDropReceive.AskRequest.ItemInfo.convertMediaFormats.getter(v4);
  v36 = &type metadata for Bool;
  LOBYTE(v35) = v5 & 1;
  sub_10022138C(&v35, v34);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10046B4A8(v34, (uint64_t)v37, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease((const char *)0x8000000000000000);
  sub_10022E6C0((uint64_t)v37);
  *(_QWORD *)&v35 = kSFOperationFileNameKey;
  v7 = kSFOperationFileNameKey;
  v8 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  v9 = SFAirDropReceive.AskRequest.ItemInfo.fileName.getter(v8);
  v36 = &type metadata for String;
  *(_QWORD *)&v35 = v9;
  *((_QWORD *)&v35 + 1) = v10;
  sub_10022138C(&v35, v34);
  v11 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10046B4A8(v34, (uint64_t)v37, v11);
  swift_bridgeObjectRelease((const char *)0x8000000000000000);
  sub_10022E6C0((uint64_t)v37);
  *(_QWORD *)&v35 = kSFOperationFileTypeKey;
  v12 = kSFOperationFileTypeKey;
  v13 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  v14 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v13);
  v36 = &type metadata for String;
  *(_QWORD *)&v35 = v14;
  *((_QWORD *)&v35 + 1) = v15;
  sub_10022138C(&v35, v34);
  v16 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10046B4A8(v34, (uint64_t)v37, v16);
  swift_bridgeObjectRelease((const char *)0x8000000000000000);
  v17 = sub_10022E6C0((uint64_t)v37);
  v18 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v17);
  if (v19)
  {
    v20 = v18;
    v21 = v19;
    *(_QWORD *)&v35 = kSFOperationtFileSubTypeKey;
    v22 = kSFOperationtFileSubTypeKey;
    AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
    v36 = &type metadata for String;
    *(_QWORD *)&v35 = v20;
    *((_QWORD *)&v35 + 1) = v21;
    sub_10022138C(&v35, v34);
    v23 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_10046B4A8(v34, (uint64_t)v37, v23);
    swift_bridgeObjectRelease((const char *)0x8000000000000000);
    sub_10022E6C0((uint64_t)v37);
  }
  *(_QWORD *)&v35 = kSFOperationFileBomPathKey;
  v24 = kSFOperationFileBomPathKey;
  v25 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  v26 = SFAirDropReceive.AskRequest.ItemInfo.fileBomPath.getter(v25);
  v36 = &type metadata for String;
  *(_QWORD *)&v35 = v26;
  *((_QWORD *)&v35 + 1) = v27;
  sub_10022138C(&v35, v34);
  v28 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10046B4A8(v34, (uint64_t)v37, v28);
  swift_bridgeObjectRelease((const char *)0x8000000000000000);
  sub_10022E6C0((uint64_t)v37);
  *(_QWORD *)&v35 = kSFOperationFileIsDirectoryKey;
  v29 = kSFOperationFileIsDirectoryKey;
  v30 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  v31 = SFAirDropReceive.AskRequest.ItemInfo.fileIsDirectory.getter(v30);
  v36 = &type metadata for Bool;
  LOBYTE(v35) = v31 & 1;
  sub_10022138C(&v35, v34);
  v32 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10046B4A8(v34, (uint64_t)v37, v32);
  swift_bridgeObjectRelease((const char *)0x8000000000000000);
  sub_10022E6C0((uint64_t)v37);
  return v0;
}

_QWORD *SFAirDropTransferMetaData.init(transfer:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  void (*v40)(char *, const char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  __n128 v56;
  const char *v57;
  __n128 v58;
  const char *v59;
  const char *v60;
  __n128 v61;
  const char *v62;
  const char *v63;
  __n128 v64;
  const char *v65;
  const char *v66;
  __n128 v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  NSString v74;
  __n128 v75;
  uint64_t v76;
  void *v77;
  void *v78;
  const char *v79;
  const char *v80;
  NSString v81;
  const char *v82;
  Class isa;
  Class v84;
  double v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  int *v98;
  uint64_t v99;
  int *v100;
  char *v101;
  double v102;
  double v103;
  uint64_t v104;
  NSString v105;
  uint64_t v106;
  void *v107;
  void *v108;
  NSString v109;
  Class v110;
  Class v111;
  uint64_t v112;
  id v113;
  id v114;
  id v115;
  id v116;
  Class v117;
  NSString v118;
  NSString v119;
  NSString v120;
  NSString v121;
  NSString v122;
  NSString v123;
  NSString v124;
  NSString v125;
  int v126;
  const char *v127;
  const char *v128;
  Class v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  const char *v136;

  v2 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v3 = *(_QWORD **)(v2 - 8);
  v134 = v2;
  v135 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v133 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v112 - v10;
  v12 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  SFAirDropReceive.Transfer.state.getter(v14);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v18 = sub_100008384(&qword_1007B5280);
    v17 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
LABEL_3:
    v19 = SFAirDropReceive.Transfer.askRequest.getter(v17);
    v20 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    v21 = (const char *)sub_100229040((uint64_t)v20);
    swift_bridgeObjectRelease(v20);
    goto LABEL_13;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v23 = sub_100008384(&qword_1007B5298);
    v21 = *(const char **)&v16[*(int *)(v23 + 48)];
    v24 = &v16[*(int *)(v23 + 80)];
    v25 = type metadata accessor for SFAirDrop.DeclineAction(0);
LABEL_10:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
LABEL_11:
    v28 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
LABEL_12:
    v22 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v16, v28);
    goto LABEL_13;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:)
    || (_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v26 = sub_100008384(&qword_1007B5290);
    v21 = *(const char **)&v16[*(int *)(v26 + 48)];
    v27 = *(int *)(v26 + 64);
LABEL_9:
    v24 = &v16[v27];
    v25 = sub_100008384(&qword_1007B5280);
    goto LABEL_10;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v21 = *(const char **)&v16[*(int *)(sub_100008384(&qword_1007B5288) + 48)];
    goto LABEL_11;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v98 = (int *)sub_100008384((uint64_t *)&unk_1007BB640);
    v21 = *(const char **)&v16[v98[12]];
    swift_bridgeObjectRelease(*(const char **)&v16[v98[16]]);
    v27 = v98[20];
    goto LABEL_9;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v99 = sub_100008384((uint64_t *)&unk_1007B5270);
    v21 = *(const char **)&v16[*(int *)(v99 + 48)];
    swift_bridgeObjectRelease(*(const char **)&v16[*(int *)(v99 + 64)]);
    goto LABEL_11;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    v100 = (int *)sub_100008384((uint64_t *)&unk_1007BCFB0);
    v101 = &v16[v100[12]];
    *(_QWORD *)&v102 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v16[v100[16] + 8]).n128_u64[0];
    v21 = *(const char **)&v16[v100[20]];
    *(_QWORD *)&v103 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v16[v100[24]], v102).n128_u64[0];
    swift_bridgeObjectRelease(*(const char **)&v16[v100[28]], v103);
    v104 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v104 - 8) + 8))(v101, v104);
    v28 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
    goto LABEL_12;
  }
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.created(_:))
    goto LABEL_3;
  v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v21 = (const char *)_swiftEmptyArrayStorage;
LABEL_13:
  v130 = v7;
  v131 = v6;
  v29 = SFAirDropReceive.Transfer.askRequest.getter(v22);
  v30 = (const char *)SFAirDropReceive.AskRequest.files.getter(v29);
  sub_10022D528((uint64_t)v30, (uint64_t)v21);
  v128 = v31;
  *(_QWORD *)&v32 = swift_bridgeObjectRelease(v30).n128_u64[0];
  swift_bridgeObjectRelease(v21, v32);
  v34 = SFAirDropReceive.AskRequest.files.getter(v33);
  v35 = (const char *)v34;
  v36 = *(_QWORD *)(v34 + 16);
  v132 = a1;
  if (v36)
  {
    v136 = (const char *)_swiftEmptyArrayStorage;
    sub_100229868(0, v36, 0);
    v37 = (*((unsigned __int8 *)v135 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v135 + 80);
    v127 = v35;
    v38 = &v35[v37];
    v39 = v135[9];
    v40 = (void (*)(char *, const char *, uint64_t))v135[2];
    do
    {
      v41 = v134;
      v40(v5, v38, v134);
      v42 = sub_100226BE4();
      ((void (*)(char *, uint64_t))v135[1])(v5, v41);
      v43 = v136;
      if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) == 0)
      {
        sub_100229868(0, *((_QWORD *)v43 + 2) + 1, 1);
        v43 = v136;
      }
      v45 = *((_QWORD *)v43 + 2);
      v44 = *((_QWORD *)v43 + 3);
      if (v45 >= v44 >> 1)
      {
        sub_100229868(v44 > 1, v45 + 1, 1);
        v43 = v136;
      }
      *((_QWORD *)v43 + 2) = v45 + 1;
      *(_QWORD *)&v43[8 * v45 + 32] = v42;
      v38 += v39;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease(v127);
  }
  else
  {
    swift_bridgeObjectRelease((const char *)v34);
    v43 = (const char *)_swiftEmptyArrayStorage;
  }
  LODWORD(v135) = SFAirDropReceive.AskRequest.canAutoAccept.getter(v46);
  LODWORD(v134) = SFAirDropReceive.Transfer.didAutoAccept.getter();
  v47 = SFAirDropReceive.AskRequest.verifiableIdentity.getter();
  LODWORD(v127) = v47;
  v126 = SFAirDropReceive.AskRequest.senderIsMe.getter(v47);
  v48 = SFAirDropReceive.AskRequest.contactIdentifier.getter();
  if (v49)
  {
    v50 = v49;
    v125 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
  }
  else
  {
    v125 = 0;
  }
  SFAirDropReceive.AskRequest.senderBundleID.getter(v48);
  v52 = v51;
  v124 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  SFAirDropReceive.AskRequest.senderComputerName.getter(v53);
  v55 = v54;
  v123 = String._bridgeToObjectiveC()();
  v56 = swift_bridgeObjectRelease(v55);
  SFAirDropReceive.AskRequest.senderEmail.getter(v56);
  if (v57)
  {
    v59 = v57;
    v121 = String._bridgeToObjectiveC()();
    v58 = swift_bridgeObjectRelease(v59);
  }
  else
  {
    v121 = 0;
  }
  SFAirDropReceive.AskRequest.senderEmailHash.getter(v58);
  if (v60)
  {
    v62 = v60;
    v120 = String._bridgeToObjectiveC()();
    v61 = swift_bridgeObjectRelease(v62);
  }
  else
  {
    v120 = 0;
  }
  SFAirDropReceive.AskRequest.senderCompositeName.getter(v61);
  if (v63)
  {
    v65 = v63;
    v118 = String._bridgeToObjectiveC()();
    v64 = swift_bridgeObjectRelease(v65);
  }
  else
  {
    v118 = 0;
  }
  SFAirDropReceive.AskRequest.senderFirstName.getter(v64);
  if (v66)
  {
    v68 = v66;
    v122 = String._bridgeToObjectiveC()();
    v67 = swift_bridgeObjectRelease(v68);
  }
  else
  {
    v122 = 0;
  }
  v69 = SFAirDropReceive.AskRequest.senderLastName.getter(v67);
  if (v70)
  {
    v71 = v70;
    v119 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v71);
  }
  else
  {
    v119 = 0;
  }
  SFAirDropReceive.AskRequest.senderID.getter(v69);
  v73 = v72;
  v74 = String._bridgeToObjectiveC()();
  v75 = swift_bridgeObjectRelease(v73);
  v76 = SFAirDropReceive.AskRequest.senderIcon.getter(v75);
  v77 = (void *)SFAirDropReceive.AskRequest.smallPreviewImage.getter();
  v78 = (void *)SFAirDropReceive.AskRequest.previewImage.getter();
  SFAirDropReceive.AskRequest.itemsDescription.getter(v78);
  if (v79)
  {
    v80 = v79;
    v81 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v80);
  }
  else
  {
    v81 = 0;
  }
  v113 = v81;
  v116 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v129));
  sub_100221EDC(0, &qword_1007B5250, SFAirDropTransferItem_ptr);
  sub_10022DD44(&qword_1007B5258, &qword_1007B5250, SFAirDropTransferItem_ptr);
  v82 = v128;
  isa = Set._bridgeToObjectiveC()().super.isa;
  v117 = isa;
  swift_bridgeObjectRelease(v82);
  sub_100008384((uint64_t *)&unk_1007B5260);
  v84 = Array._bridgeToObjectiveC()().super.isa;
  v129 = v84;
  *(_QWORD *)&v85 = swift_bridgeObjectRelease(v43).n128_u64[0];
  v110 = isa;
  v111 = v84;
  v109 = v81;
  v115 = v78;
  v108 = v78;
  v114 = v77;
  v106 = v76;
  v107 = v77;
  v86 = (void *)v76;
  v87 = v74;
  v105 = v74;
  v88 = v119;
  v89 = v122;
  v90 = v118;
  v91 = v120;
  v92 = v121;
  v93 = v123;
  v94 = v124;
  v95 = v125;
  v135 = objc_msgSend(v116, "initWithTransferTypes:canAutoAccept:didAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:items:rawFiles:", 2, v135 & 1, v134 & 1, v127 & 1, v126 & 1, v125, v85, v124, v123, v121, v120, v118, v122, v119, v105,
           v106,
           v107,
           v108,
           v109,
           0,
           v110,
           v111);

  v96 = type metadata accessor for SFAirDropReceive.Transfer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 8))(v132, v96);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v133, v131);
  return v135;
}

void sub_100227838(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, uint64_t a6)
{
  const char **v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  double v18;
  NSString v19;
  NSString v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  const char *v23;
  double v24;
  void *v25;
  _QWORD v26[3];
  _QWORD v27[2];

  v11 = (const char **)(a6 + 16);
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
  v12._countAndFlagsBits = 47;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v27[0] = a3;
  v27[1] = a4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v27, &type metadata for String, &protocol witness table for String);
  swift_beginAccess(v11, v26, 32, 0);
  v13 = *(_QWORD *)(a6 + 16);
  if (*(_QWORD *)(v13 + 16) && (v14 = sub_10045C200(0, 0xE000000000000000), (v15 & 1) != 0))
  {
    v16 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_endAccess(v26);
    v17 = v16;
    objc_msgSend(v17, "incrementCount", swift_bridgeObjectRelease((const char *)0xE000000000000000).n128_f64[0]);

  }
  else
  {
    swift_endAccess(v26);
    *(_QWORD *)&v18 = swift_bridgeObjectRetain(a4).n128_u64[0];
    swift_bridgeObjectRetain(a2, v18);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4)
    {
      v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a4);
    }
    else
    {
      v20 = 0;
    }
    v21 = objc_msgSend(objc_allocWithZone((Class)SFAirDropTransferItem), "initWithType:subtype:isFile:", v19, v20, a5 & 1);

    swift_beginAccess(v11, v26, 33, 0);
    if (v21)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      v27[0] = *v11;
      *v11 = (const char *)0x8000000000000000;
      sub_10046B5E0((uint64_t)v21, 0, (const char *)0xE000000000000000, isUniquelyReferenced_nonNull_native);
      v23 = *v11;
      *v11 = (const char *)v27[0];
      *(_QWORD *)&v24 = swift_bridgeObjectRelease((const char *)0xE000000000000000).n128_u64[0];
      swift_bridgeObjectRelease(v23, v24);
    }
    else
    {
      v25 = (void *)sub_100269C8C(0, 0xE000000000000000);
      swift_bridgeObjectRelease((const char *)0xE000000000000000);

    }
    swift_endAccess(v26);
  }
}

uint64_t sub_100227A54(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B5318, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

_QWORD *sub_100227A68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B54A0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10022CAB0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100227B74(_QWORD *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100228840(a1, a2, a3, a4, &qword_1007B5300, (uint64_t *)&unk_1007B5260);
}

_QWORD *sub_100227B88(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B52E0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10022DD84(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100227C94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, (uint64_t *)&unk_1007B52A0, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.NearbySharingAssertion);
}

uint64_t sub_100227CA8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008384(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10022E390(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100227EB4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100227EC0(a1, a2, a3, a4, &qword_1007B52C0);
}

_QWORD *sub_100227EC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100008384(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10022CE98(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100227FB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B52F0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10022DE90(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002280C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B5500, (uint64_t (*)(_QWORD))&type metadata accessor for SFSandboxTokenURLPair);
}

uint64_t sub_1002280D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002284D8(a1, a2, a3, a4, &qword_1007B52B0, &qword_1007B52B8);
}

uint64_t sub_1002280E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B5498, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

_QWORD *sub_1002280FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B52D8);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10022CE98(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002281F4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, &qword_1007B5350, &qword_1007B5358);
}

_QWORD *sub_100228208(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, &qword_1007B53A8, &qword_1007B53B0);
}

_QWORD *sub_10022821C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100008384(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10022E288(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100228348(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, &qword_1007B53B8, (uint64_t *)&unk_1007B53C0);
}

uint64_t sub_10022835C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B5340, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

_QWORD *sub_100228370(_QWORD *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384((uint64_t *)&unk_1007B5330);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != (_QWORD *)a4 || (unint64_t)v13 >= a4 + 32 + v8)
          memmove(v13, (const void *)(a4 + 32), v8);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10022CE98(0, v8, (char *)v13, a4);
LABEL_22:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100228468(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B52F8, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
}

_QWORD *sub_10022847C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100227EC0(a1, a2, a3, a4, &qword_1007B54D0);
}

_QWORD *sub_100228488(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, &qword_1007B53E0, &qword_1007B53E8);
}

_QWORD *sub_10022849C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, &qword_1007B5380, &qword_1007B5388);
}

_QWORD *sub_1002284B0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, &qword_1007B5370, &qword_1007B5378);
}

uint64_t sub_1002284C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002284D8(a1, a2, a3, a4, &qword_1007B5320, &qword_1007B5328);
}

uint64_t sub_1002284D8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008384(a5);
  v14 = *(_QWORD *)(sub_100008384(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100008384(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10022E07C(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease((const char *)a4);
  return (uint64_t)v18;
}

uint64_t sub_1002286E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B54F0, (uint64_t (*)(_QWORD))&type metadata accessor for SFSecurityScopedURL);
}

uint64_t sub_1002286F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B54C0, type metadata accessor for SDTempPairingEndpoint);
}

_QWORD *sub_10022870C(_QWORD *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B86E0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != (_QWORD *)a4 || (unint64_t)v14 >= a4 + 32 + 16 * v8)
          memmove(v14, (const void *)(a4 + 32), 16 * v8);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_10022CF7C(0, v8, (unint64_t)v14, a4);
LABEL_24:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100228818(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B54A8, type metadata accessor for SDAirDropService.TransferPresenterClient);
}

_QWORD *sub_10022882C(_QWORD *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100228840(a1, a2, a3, a4, &qword_1007B5440, &qword_1007B5448);
}

_QWORD *sub_100228840(_QWORD *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a4 + 24);
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = *(_QWORD *)(a4 + 16);
    if (v10 <= v11)
      v12 = *(_QWORD *)(a4 + 16);
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100008384(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != (_QWORD *)a4 || (unint64_t)v17 >= a4 + 32 + 8 * v11)
          memmove(v17, (const void *)(a4 + 32), 8 * v11);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_10022DF78(0, v11, (unint64_t)v17, a4, a6);
LABEL_24:
    swift_bridgeObjectRelease((const char *)a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100228958(_QWORD *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B5418);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != (_QWORD *)a4 || (unint64_t)v13 >= a4 + 32 + 72 * v8)
          memmove(v13, (const void *)(a4 + 32), 72 * v8);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10022E194(0, v8, (unint64_t)v13, a4);
LABEL_22:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100228A7C(_QWORD *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008384(&qword_1007B5460);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != (_QWORD *)a4 || (unint64_t)v14 >= a4 + 32 + 32 * v8)
          memmove(v14, (const void *)(a4 + 32), 32 * v8);
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    sub_10022D06C(0, v8, (unint64_t)v14, a4);
LABEL_24:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100228B88(_QWORD *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100228840(a1, a2, a3, a4, &qword_1007B5480, &qword_1007B5488);
}

_QWORD *sub_100228B9C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, (uint64_t *)&unk_1007B5360, (uint64_t *)&unk_1007BB690);
}

uint64_t sub_100228BB0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100227CA8(a1, a2, a3, a4, &qword_1007B53F0, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_100228BC4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10022821C(a1, a2, a3, a4, (uint64_t *)&unk_1007B53D0, (uint64_t *)&unk_1007BB680);
}

uint64_t sub_100228BD8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100228CA8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10022E77C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10022E77C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10022E75C(v12);
  return v7;
}

uint64_t sub_100228CA8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100228E60(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100228E60(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10045BFDC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100228EF4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100228EF4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_100228EF4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B52C0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100229040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008384(&qword_1007B5318);
  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain((const char *)a1);
      v11 = sub_10022BAD0(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_10022E5B4(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100229138(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100008384(&qword_1007B5390);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_100345754((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_10022922C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008384(&qword_1007B5390);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_10022BE20(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10022E5B4(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100229314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008384(&qword_1007B5498);
  v4 = *(_QWORD *)(type metadata accessor for SDAirDropDiscoveredEndpoint(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_10022C018(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10022E5B4(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t **sub_10022942C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.count.getter(a1);
  if (!v2)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_100008384(&qword_1007B5390);
    v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_10022C2A0(&v9, v4 + 4, v2, v1);
  result = (uint64_t **)sub_10022E5B4(v9);
  if (v7 == (uint64_t *)v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_100229524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008384(&qword_1007B54B8);
  v4 = *(_QWORD *)(sub_100008384(&qword_1007B54B0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007B54B0) - 8) + 80);
      sub_10022C5A8(&v15, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v12;
      v14 = v15;
      swift_bridgeObjectRetain((const char *)a1);
      sub_10022E5B4(v14);
      if (v13 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10022965C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008384(&qword_1007B54A0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_10022C8B4((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain((const char *)a1);
  sub_10022E5B4(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100229740(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1)
    return _swiftEmptyArrayStorage;
  v5 = (uint64_t)result;
  if (v3 <= 0)
  {
    v7 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = sub_100008384(&qword_1007B5410);
    v7 = (_QWORD *)swift_allocObject(v6, 8 * v3 + 32, 7);
    v8 = j__malloc_size(v7);
    v9 = v8 - 32;
    if (v8 < 32)
      v9 = v8 - 25;
    v7[2] = v3;
    v7[3] = 2 * (v9 >> 3);
  }
  result = (_QWORD *)sub_10022BA44((uint64_t)&v10, (uint64_t)(v7 + 4), v3, v5, a2);
  if (result == (_QWORD *)v3)
    return v7;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_100229810(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5318, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_10022983C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B52F8, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
  *v3 = result;
  return result;
}

uint64_t sub_100229868(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100229DD0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5300, (uint64_t *)&unk_1007B5260);
  *v3 = result;
  return result;
}

uint64_t sub_100229894(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100229C64(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1002298B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100229DD0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5308, &qword_1007B5310);
  *v3 = result;
  return result;
}

uint64_t sub_1002298DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100229F5C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1002298F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022A100(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229914(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5500, (uint64_t (*)(_QWORD))&type metadata accessor for SFSandboxTokenURLPair);
  *v3 = result;
  return result;
}

uint64_t sub_100229940(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022A25C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10022995C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022A3C4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100229978(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B8A0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B53E0, &qword_1007B53E8);
  *v3 = result;
  return result;
}

uint64_t sub_1002299A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B8A0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5350, &qword_1007B5358);
  *v3 = result;
  return result;
}

uint64_t sub_1002299D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5340, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_1002299FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5348, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer);
  *v3 = result;
  return result;
}

uint64_t sub_100229A28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022A54C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229A44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B54F0, (uint64_t (*)(_QWORD))&type metadata accessor for SFSecurityScopedURL);
  *v3 = result;
  return result;
}

uint64_t sub_100229A70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B54C0, type metadata accessor for SDTempPairingEndpoint);
  *v3 = result;
  return result;
}

uint64_t sub_100229A9C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022A6C8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229AB8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022AA18(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229AD4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022AB74(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229AF0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B5498, type metadata accessor for SDAirDropDiscoveredEndpoint);
  *v3 = result;
  return result;
}

uint64_t sub_100229B1C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022ACCC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100229B38(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022AE68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229B54(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022AFE4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229B70(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022B140(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229B8C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022B2A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229BA8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022B400(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229BC4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10022B558(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100229BE0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B8A0(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1007B5360, (uint64_t *)&unk_1007BB690);
  *v3 = result;
  return result;
}

uint64_t sub_100229C0C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B6C0(a1, a2, a3, (_QWORD *)*v3, &qword_1007B53F0, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_100229C38(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10022B8A0(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1007B53D0, (uint64_t *)&unk_1007BB680);
  *v3 = result;
  return result;
}

uint64_t sub_100229C64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007C43F0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100229DD0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100008384(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_100008384(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100229F5C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B52C8);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100008384(&qword_1007B52D0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022A100(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5508);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022A25C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B54A0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022A3C4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B54D8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100008384(&qword_1007B54E0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022A54C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B54F8);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 88 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022A6C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B54C8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022A830(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100008384(&qword_1007B54B8);
  v11 = *(_QWORD *)(sub_100008384(&qword_1007B54B0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100008384(&qword_1007B54B0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022AA18(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5420);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022AB74(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5428);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022ACCC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5430);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = v11 + 4;
  v14 = a4 + 4;
  v15 = 7 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v11 + 4, a4 + 4, v15 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_100008384(&qword_1007B5438);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022AE68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5418);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 72 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022AFE4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5468);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022B140(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5460);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022B2A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5458);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 4 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022B400(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B5450);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022B558(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008384(&qword_1007B86E0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022B6C0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008384(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022B8A0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100008384(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100008384(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10022BA44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if (!a2)
  {
    v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
LABEL_14:
    v8 = a4;
LABEL_15:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v5 = 0;
  v6 = a4;
  while (1)
  {
    v7 = v6 == a5;
    if (v6 != a5)
      break;
    v8 = 0;
LABEL_8:
    *(_QWORD *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5)
      goto LABEL_15;
    ++v5;
    v9 = v6 == a5;
    v6 = v8;
    if (v9)
    {
      v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10022BAD0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_100008384((uint64_t *)&unk_1007B5200);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_10000D0F0((uint64_t)v10, (uint64_t *)&unk_1007B5200);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_10022BE20(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10022C018(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 32);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_10022E534(*(_QWORD *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_10022E5BC((uint64_t)v12, (uint64_t)v15);
    result = sub_10022E5BC((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t *sub_10022C2A0(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD v35[5];

  v4 = a4;
  v6 = a2;
  v31 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_100221EDC(0, &qword_1007B5398, SFAutoUnlockDevice_ptr);
    v10 = sub_10022DD44((unint64_t *)&qword_1007B53A0, &qword_1007B5398, SFAutoUnlockDevice_ptr);
    result = Set.Iterator.init(_cocoa:)(v35, v8, v9, v10);
    v4 = v35[0];
    v11 = v35[1];
    v12 = v35[2];
    v13 = v35[3];
    v14 = v35[4];
    if (v6)
      goto LABEL_6;
LABEL_39:
    v15 = 0;
    goto LABEL_41;
  }
  v13 = 0;
  v26 = -1 << *(_BYTE *)(a4 + 32);
  v11 = a4 + 56;
  v12 = ~v26;
  v27 = -v26;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v14 = v28 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v15 = 0;
LABEL_41:
    v29 = v31;
LABEL_44:
    *v29 = v4;
    v29[1] = v11;
    v29[2] = v12;
    v29[3] = v13;
    v29[4] = v14;
    return (uint64_t *)v15;
  }
  if (a3 < 0)
    goto LABEL_51;
  v15 = 0;
  v32 = (unint64_t)(v12 + 64) >> 6;
  v30 = v12;
  while (1)
  {
    if (v4 < 0)
    {
      v22 = __CocoaSet.Iterator.next()(result);
      if (!v22)
        goto LABEL_43;
      v23 = v22;
      v33 = v22;
      v24 = sub_100221EDC(0, &qword_1007B5398, SFAutoUnlockDevice_ptr);
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
      v18 = v34;
      result = (uint64_t *)swift_unknownObjectRelease(v23);
      if (!v18)
        goto LABEL_43;
      goto LABEL_11;
    }
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_10;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v19 >= v32)
    {
      v14 = 0;
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v11 + 8 * v19);
    if (v20)
      goto LABEL_26;
    v21 = v13 + 2;
    if (v13 + 2 >= v32)
    {
      v14 = 0;
      ++v13;
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      if (v13 + 3 >= v32)
        goto LABEL_47;
      v20 = *(_QWORD *)(v11 + 8 * (v13 + 3));
      if (v20)
      {
        v19 = v13 + 3;
        goto LABEL_26;
      }
      v21 = v13 + 4;
      if (v13 + 4 >= v32)
      {
        v14 = 0;
        v13 += 3;
        goto LABEL_43;
      }
      v20 = *(_QWORD *)(v11 + 8 * v21);
      if (!v20)
      {
        v19 = v13 + 5;
        if (v13 + 5 >= v32)
        {
LABEL_47:
          v14 = 0;
          v13 = v21;
          goto LABEL_43;
        }
        v20 = *(_QWORD *)(v11 + 8 * v19);
        if (!v20)
        {
          v25 = v13 + 6;
          while (v32 != v25)
          {
            v20 = *(_QWORD *)(v11 + 8 * v25++);
            if (v20)
            {
              v19 = v25 - 1;
              goto LABEL_26;
            }
          }
          v14 = 0;
          v13 = v32 - 1;
          goto LABEL_43;
        }
        goto LABEL_26;
      }
    }
    v19 = v21;
LABEL_26:
    v14 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    v18 = result;
    if (!result)
      goto LABEL_43;
LABEL_11:
    ++v15;
    *v6++ = v18;
    if (v15 == a3)
    {
      v15 = a3;
LABEL_43:
      v12 = v30;
      v29 = v31;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_10022C5A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_100008384(&qword_1007B54B0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v42 = a4;
  v16 = *(_QWORD *)(a4 + 64);
  v15 = a4 + 64;
  v14 = v16;
  v38 = v15;
  v17 = -1 << *(_BYTE *)(v15 - 32);
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
LABEL_38:
    v32 = v38;
    *a1 = v42;
    a1[1] = v32;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return;
  }
  if (!a3)
  {
    v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
    goto LABEL_40;
  v35 = -1 << *(_BYTE *)(v15 - 32);
  v36 = a1;
  v20 = 0;
  v21 = 0;
  v37 = (unint64_t)(63 - v17) >> 6;
  v34 = v37 - 1;
  v39 = a3;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v23 = v22 | (v20 << 6);
  while (1)
  {
    ++v21;
    v27 = *(_QWORD *)(v42 + 56);
    v28 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v23);
    v29 = *v28;
    v30 = (const char *)v28[1];
    v31 = type metadata accessor for Date(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(&v11[*(int *)(v41 + 48)], v27 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v23, v31);
    *(_QWORD *)v11 = v29;
    *((_QWORD *)v11 + 1) = v30;
    sub_10022E718((uint64_t)v11, (uint64_t)v13, &qword_1007B54B0);
    sub_10022E718((uint64_t)v13, a2, &qword_1007B54B0);
    if (v21 == v39)
    {
      swift_bridgeObjectRetain(v30);
LABEL_37:
      v17 = v35;
      a1 = v36;
      goto LABEL_38;
    }
    a2 += *(_QWORD *)(v40 + 72);
    swift_bridgeObjectRetain(v30);
    if (v19)
      goto LABEL_8;
LABEL_9:
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v24 >= v37)
      goto LABEL_33;
    v25 = *(_QWORD *)(v38 + 8 * v24);
    if (!v25)
    {
      v20 += 2;
      if (v24 + 1 >= v37)
      {
        v19 = 0;
        v20 = v24;
        goto LABEL_37;
      }
      v25 = *(_QWORD *)(v38 + 8 * v20);
      if (v25)
        goto LABEL_14;
      v26 = v24 + 2;
      if (v24 + 2 >= v37)
        goto LABEL_33;
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (!v25)
      {
        v20 = v24 + 3;
        if (v24 + 3 >= v37)
        {
          v19 = 0;
          v20 = v24 + 2;
          goto LABEL_37;
        }
        v25 = *(_QWORD *)(v38 + 8 * v20);
        if (v25)
        {
LABEL_14:
          v24 = v20;
          goto LABEL_18;
        }
        v26 = v24 + 4;
        if (v24 + 4 >= v37)
        {
LABEL_33:
          v19 = 0;
          goto LABEL_37;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v24 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_41;
            if (v24 >= v37)
            {
              v19 = 0;
              v20 = v34;
              goto LABEL_37;
            }
            v25 = *(_QWORD *)(v38 + 8 * v24);
            ++v26;
            if (v25)
              goto LABEL_18;
          }
        }
      }
      v24 = v26;
    }
LABEL_18:
    v19 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v20 = v24;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t sub_10022C8B4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10022CAB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10022CBA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100008384((uint64_t *)&unk_1007B5200);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100220D78(&qword_1007B5528, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_10045D794((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_10022CD70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100220D78(&qword_1007B5530, v10, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_10045D538((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

char *sub_10022CE98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10022CF7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10022D06C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10022D15C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  const char **v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  double v10;
  double v11;
  uint64_t v12[4];
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_10022E600();
  result = Set.init(minimumCapacity:)(v2, &type metadata for SDHashStoreContact, v3);
  v13 = result;
  if (v2)
  {
    v5 = (const char **)(a1 + 56);
    do
    {
      v6 = (uint64_t)*(v5 - 3);
      v7 = *(v5 - 2);
      v8 = (uint64_t)*(v5 - 1);
      v9 = *v5;
      *(_QWORD *)&v10 = swift_bridgeObjectRetain(v7).n128_u64[0];
      swift_bridgeObjectRetain(v9, v10);
      sub_10045F278(v12, v6, v7, v8, v9);
      *(_QWORD *)&v11 = swift_bridgeObjectRelease((const char *)v12[1]).n128_u64[0];
      swift_bridgeObjectRelease((const char *)v12[3], v11);
      v5 += 4;
      --v2;
    }
    while (v2);
    return v13;
  }
  return result;
}

uint64_t sub_10022D214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100220D78(&qword_1007B5490, v10, (uint64_t)&unk_1005D1058);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v16 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10022E534(v13, (uint64_t)v6);
      sub_10045DA0C((uint64_t)v8, (uint64_t)v6);
      sub_10022E578((uint64_t)v8);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_10022D31C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  const char **v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (const char **)(a1 + 40);
    do
    {
      v5 = (uint64_t)*(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10045DF5C(v7, v5, (uint64_t)v6);
      swift_bridgeObjectRelease((const char *)v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_10022D3B0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  id v13[2];

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease((const char *)a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_100221EDC(0, (unint64_t *)&qword_1007B5470, CNContact_ptr);
  v5 = sub_10022DD44((unint64_t *)&qword_1007BD660, (unint64_t *)&qword_1007B5470, CNContact_ptr);
  v13[1] = (id)Set.init(minimumCapacity:)(v3, v4, v5);
  if (!v2)
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease((const char *)a1);
  if (v6)
  {
LABEL_10:
    if (v6 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_10045F49C((Swift::Int *)v13, v9);

      }
    }
    else
    {
      v10 = (void **)(a1 + 32);
      do
      {
        v11 = *v10++;
        sub_10045F49C((Swift::Int *)v13, v11);

        --v6;
      }
      while (v6);
    }
  }
}

void sub_10022D528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  char *v38;
  __n128 v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void *v44;
  id v45;
  NSURL *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  NSURL *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  __n128 v80;
  void (*v81)(char *, uint64_t, __n128);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  char *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  __n128 v94;
  void (*v95)(char *, uint64_t, __n128);
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  const char *v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  __n128 v104;
  uint64_t v105;
  const char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void (*v116)(char *, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118[4];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v108 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v107 = (char *)&v102 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v102 - v10;
  v12 = sub_100008384((uint64_t *)&unk_1007B5200);
  v13 = __chkstk_darwin(v12);
  v110 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v109 = (char *)&v102 - v16;
  v17 = __chkstk_darwin(v15);
  v112 = (uint64_t)&v102 - v18;
  __chkstk_darwin(v17);
  v111 = (char *)&v102 - v19;
  v20 = swift_allocObject(&unk_10071DE58, 24, 7);
  v117 = v20;
  *(_QWORD *)(v20 + 16) = sub_10021E738((uint64_t)_swiftEmptyArrayStorage);
  v105 = v20 + 16;
  v21 = *(_QWORD *)(a1 + 16);
  v113 = v5;
  if (v21)
  {
    v22 = v11;
    v23 = *(_QWORD *)(type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0) - 8);
    v24 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v25 = *(_QWORD *)(v23 + 72);
    swift_bridgeObjectRetain((const char *)a1);
    do
    {
      v27 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v26);
      v29 = v28;
      v30 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v27);
      v32 = v31;
      sub_100227838(v27, v29, v30, v31, 1, v117);
      *(_QWORD *)&v33 = swift_bridgeObjectRelease(v29).n128_u64[0];
      *(_QWORD *)&v34 = swift_bridgeObjectRelease(v32, v33).n128_u64[0];
      v24 += v25;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease((const char *)a1, v34);
    v5 = v113;
    v11 = v22;
  }
  v35 = *(_QWORD *)(a2 + 16);
  v106 = (const char *)a2;
  if (v35)
  {
    v36 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v114 = *(_QWORD *)(v5 + 72);
    v116 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v37 = swift_bridgeObjectRetain((const char *)a2);
    v37.n128_u64[0] = 136315138;
    v104 = v37;
    v103 = (char *)&type metadata for Any + 8;
    v38 = v111;
    v115 = v11;
    while (1)
    {
      v116(v38, v36, v4);
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v40(v38, 0, 1, v4);
      v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      if (v41(v38, 1, v4) == 1)
        goto LABEL_43;
      v42 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
      v43 = v42(v11, v38, v4);
      if ((URL.isFileURL.getter(v43) & 1) == 0)
        break;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
LABEL_8:
      v36 += v114;
      if (!--v35)
        goto LABEL_42;
    }
    v44 = (void *)objc_opt_self(LSApplicationWorkspace);
    v45 = objc_msgSend(v44, "defaultWorkspace");
    if (!v45)
      goto LABEL_45;
    v47 = v45;
    URL._bridgeToObjectiveC()(v46);
    v49 = v48;
    v50 = objc_msgSend(v47, "applicationsAvailableForOpeningURL:", v48);

    v5 = v113;
    if (!v50)
      goto LABEL_25;
    v52 = sub_100221EDC(0, (unint64_t *)&qword_1007B5520, LSApplicationProxy_ptr);
    v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, v52);

    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0)
        v61 = v53;
      else
        v61 = v53 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain((const char *)v53);
      v62 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease((const char *)v53);
      if (v62)
      {
LABEL_15:
        if ((v53 & 0xC000000000000001) != 0)
        {
          v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v53);
        }
        else
        {
          if (!*(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            return;
          }
          v54 = *(id *)(v53 + 32);
        }
        v55 = v54;
        v56 = objc_msgSend(v54, "bundleIdentifier", swift_bridgeObjectRelease((const char *)v53).n128_f64[0]);

        if (v56)
        {
          v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          v59 = v58;

          sub_100227838(v57, v59, 0, 0, 0, v117);
          v60 = swift_bridgeObjectRelease(v59);
          v11 = v115;
          (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v115, v4, v60);
LABEL_39:
          v38 = v111;
          goto LABEL_8;
        }
LABEL_25:
        v63 = objc_msgSend(v44, "defaultWorkspace", v51);
        if (!v63)
          goto LABEL_46;
        v65 = v63;
        URL._bridgeToObjectiveC()(v64);
        v67 = v66;
        v68 = objc_msgSend(v65, "URLOverrideForURL:", v66);

        if (v68)
        {
          v69 = v109;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v68);

          v70 = 0;
        }
        else
        {
          v70 = 1;
          v69 = v109;
        }
        v71 = (uint64_t)v110;
        v40(v69, v70, 1, v4);
        v72 = (uint64_t)v69;
        v73 = v112;
        sub_10022E718(v72, v112, (uint64_t *)&unk_1007B5200);
        sub_100221F28(v73, v71, (uint64_t *)&unk_1007B5200);
        v74 = v41((char *)v71, 1, v4);
        v11 = v115;
        if (v74 == 1)
        {
          sub_10000D0F0(v71, (uint64_t *)&unk_1007B5200);
        }
        else
        {
          v75 = v107;
          v76 = v42(v107, (char *)v71, v4);
          v77 = URL.scheme.getter(v76);
          if (v78)
          {
            v79 = v78;
            sub_100227838(v77, v78, 0, 0, 0, v117);
            v80 = swift_bridgeObjectRelease(v79);
            v81 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
            v81(v75, v4, v80);
            sub_10000D0F0(v112, (uint64_t *)&unk_1007B5200);
            ((void (*)(char *, uint64_t))v81)(v11, v4);
            goto LABEL_39;
          }
          (*(void (**)(char *, uint64_t))(v5 + 8))(v75, v4);
        }
        v82 = v108;
        if (qword_1007B3CF8 != -1)
          swift_once(&qword_1007B3CF8, sub_100223308);
        v83 = type metadata accessor for Logger(0);
        sub_100221DF8(v83, (uint64_t)qword_1007B51E0);
        v84 = ((uint64_t (*)(char *, char *, uint64_t))v116)(v82, v11, v4);
        v85 = Logger.logObject.getter(v84);
        v86 = v11;
        v87 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v85, v87))
        {
          v88 = swift_slowAlloc(12, -1);
          v89 = swift_slowAlloc(32, -1);
          v118[0] = v89;
          *(_DWORD *)v88 = v104.n128_u32[0];
          v90 = sub_100220D78((unint64_t *)&qword_1007B5518, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v91 = dispatch thunk of CustomStringConvertible.description.getter(v4, v90);
          v93 = (const char *)v92;
          *(_QWORD *)(v88 + 4) = sub_100228BD8(v91, v92, v118);
          v94 = swift_bridgeObjectRelease(v93);
          v95 = *(void (**)(char *, uint64_t, __n128))(v113 + 8);
          v95(v82, v4, v94);
          _os_log_impl((void *)&_mh_execute_header, v85, v87, "Failed to create item SFAirDropTransferItem from url. {url: %s}", (uint8_t *)v88, 0xCu);
          swift_arrayDestroy(v89, 1, v103);
          swift_slowDealloc(v89, -1, -1);
          v96 = v88;
          v5 = v113;
          swift_slowDealloc(v96, -1, -1);

          sub_10000D0F0(v112, (uint64_t *)&unk_1007B5200);
          v11 = v115;
          ((void (*)(char *, uint64_t))v95)(v115, v4);
        }
        else
        {

          v97 = *(void (**)(char *, uint64_t))(v5 + 8);
          v97(v82, v4);
          sub_10000D0F0(v112, (uint64_t *)&unk_1007B5200);
          v97(v86, v4);
          v11 = v86;
        }
        goto LABEL_39;
      }
    }
    else if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_15;
    }
    *(_QWORD *)&v51 = swift_bridgeObjectRelease((const char *)v53).n128_u64[0];
    goto LABEL_25;
  }
  v98 = (const char *)a2;
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v39 = swift_bridgeObjectRetain(v98);
  v38 = v111;
LABEL_42:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v40)(v38, 1, 1, v4, v39);
LABEL_43:
  swift_bridgeObjectRelease(v106);
  *(_QWORD *)&v99 = swift_beginAccess(v105, v118, 0, 0).n128_u64[0];
  v100 = v117;
  swift_bridgeObjectRetain(*(const char **)(v117 + 16), v99);
  sub_100225AF8(v101);
  swift_release(v100);
}

uint64_t sub_10022DD44(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100221EDC(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022DD84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100008384(&qword_1007B52E8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_10022DE90(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10022DF78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_100008384(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10022E07C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_100008384(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10022E194(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10022E288(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100008384(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10022E390(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10022E4A8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10022E4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B53F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022E534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022E578(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022E5B4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10022E5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10022E600()
{
  unint64_t result;

  result = qword_1007B54E8;
  if (!qword_1007B54E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SDHashStoreContact, &type metadata for SDHashStoreContact);
    atomic_store(result, (unint64_t *)&qword_1007B54E8);
  }
  return result;
}

unint64_t sub_10022E644()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B5AB0;
  if (!qword_1007B5AB0)
  {
    v1 = sub_10021FF9C(&qword_1007B5510);
    sub_100220D78(&qword_1007B4E50, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1007B5AB0);
  }
  return result;
}

uint64_t sub_10022E6C0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10022E6F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10022E718(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008384(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10022E75C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10022E77C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for SDAirDropiOSItemDestinationAlert()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary32SDAirDropiOSItemDestinationAlert);
}

uint64_t type metadata accessor for SDAirDropItemDestinationAlertFactory()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary36SDAirDropItemDestinationAlertFactory);
}

uint64_t type metadata accessor for SDAirDropUnsupportedItemDestinationAlert()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary40SDAirDropUnsupportedItemDestinationAlert);
}

uint64_t sub_10022E818(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[12] = a1;
  v2 = sub_100008384(&qword_1007B5280);
  v1[13] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[14] = v3;
  v1[15] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SFItemDestinationAlertViewModel(0);
  v1[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[17] = v5;
  v1[18] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFItemDestinationAlertSettings(0);
  v1[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[20] = v7;
  v1[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B5720);
  v1[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[23] = v9;
  v1[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022E8F8, 0, 0);
}

uint64_t sub_10022E8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  char isUniquelyReferenced_nonNull_native;
  double v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  SFAirDrop.PermissionRequest.style.getter(*(_QWORD *)(v0 + 104));
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 176);
  if (v4 == enum case for SFAirDrop.PermissionRequest.Style.alert<A>(_:))
  {
    v9 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t))(v5 + 96))(v6, v7);
    *(_QWORD *)&v15 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v6 + 8)).n128_u64[0];
    *(_QWORD *)&v16 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v6 + 24), v15).n128_u64[0];
    swift_bridgeObjectRelease(*(const char **)(v6 + 32), v16);
    v17 = v6 + *(int *)(sub_100008384(&qword_1007B5728) + 80);
    v18 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    v19 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 104);
    v20 = v19(v8, enum case for SFItemDestinationAlertSettings.reply(_:), v10);
    v21 = SFItemDestinationAlertSettings.rawValue.getter(v20);
    v22 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v22(v8, v10);
    v23 = v19(v8, enum case for SFItemDestinationAlertSettings.chosenActionID(_:), v10);
    v24 = SFItemDestinationAlertSettings.rawValue.getter(v23);
    v22(v8, v10);
    v25 = sub_10021E744((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    SFItemDestinationAlertViewModel.init(permissionRequest:)(v11);
    v53 = v21;
    v26 = *(_QWORD *)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 128);
    v28 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    v29 = JSONEncoder.init()();
    v30 = sub_100220D78(&qword_1007B5730, (uint64_t (*)(uint64_t))&type metadata accessor for SFItemDestinationAlertViewModel, (uint64_t)&protocol conformance descriptor for SFItemDestinationAlertViewModel);
    v31 = dispatch thunk of JSONEncoder.encode<A>(_:)(v26, v27, v30);
    *(_QWORD *)(v0 + 200) = v31;
    *(_QWORD *)(v0 + 208) = v32;
    v40 = v31;
    v41 = v32;
    v42 = swift_release(v29);
    v43 = static SFItemDestinationAlertSettings.viewModel.getter(v42);
    v45 = v44;
    *(_QWORD *)(v0 + 40) = &type metadata for Data;
    *(_QWORD *)(v0 + 16) = v40;
    *(_QWORD *)(v0 + 24) = v41;
    sub_10022138C((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
    sub_10022E4A8(v40, v41);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    sub_10046B5EC((_OWORD *)(v0 + 48), v43, v45, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v0 + 216) = v25;
    *(_QWORD *)&v47 = swift_bridgeObjectRelease((const char *)0x8000000000000000).n128_u64[0];
    swift_bridgeObjectRelease(v45, v47);
    v48 = objc_msgSend(objc_allocWithZone((Class)sub_100008384(&qword_1007B5738)), "init");
    *(_QWORD *)(v0 + 224) = v48;
    v49 = swift_task_alloc(96);
    *(_QWORD *)(v0 + 232) = v49;
    *(_QWORD *)(v49 + 16) = v48;
    *(_QWORD *)(v49 + 24) = v24;
    *(_OWORD *)(v49 + 32) = xmmword_1005CEE80;
    *(_QWORD *)(v49 + 48) = 0x8000000100612040;
    *(_QWORD *)(v49 + 56) = 0xD000000000000025;
    *(_QWORD *)(v49 + 64) = 0x8000000100612010;
    *(_QWORD *)(v49 + 72) = v25;
    *(_QWORD *)(v49 + 80) = v53;
    *(_QWORD *)(v49 + 88) = 0;
    v50 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 240) = v50;
    v51 = sub_100008384(&qword_1007B54E0);
    *v50 = v0;
    v50[1] = sub_10022ED4C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 80, 0, 0, 0xD00000000000006ALL, 0x8000000100612060, sub_10022EF10, v49, v51);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v0 + 192), v7);
    v33 = type metadata accessor for SFAirDropReceive.Failure(0);
    v34 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v33, v34, 0, 0);
    v36 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, enum case for SFAirDropReceive.Failure.moveToAppFailed(_:), v33);
    swift_willThrow(v36);
    v37 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 144);
    v39 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10022ED4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  void *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10022EE60;
  }
  else
  {
    v6 = *(void **)(v2 + 224);
    v5 = *(_QWORD *)(v2 + 232);
    swift_bridgeObjectRelease(*(const char **)(v2 + 216));

    swift_task_dealloc(v5);
    *(_OWORD *)(v2 + 256) = *(_OWORD *)(v2 + 80);
    v4 = sub_10022EDD8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10022EDD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  sub_100225AB4(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
}

uint64_t sub_10022EE60()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease(*(const char **)(v0 + 216));

  swift_task_dealloc(v1);
  sub_100225AB4(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10022EF10(uint64_t a1)
{
  _QWORD *v1;
  double result;

  *(_QWORD *)&result = sub_100525D50(a1, (_QWORD *)v1[2], (void *)v1[3], (void *)v1[4], v1[5], (const char *)v1[6], (_QWORD *)v1[7], (const char *)v1[8], v1[9], v1[10], v1[11]).n128_u64[0];
  return result;
}

uint64_t sub_10022EF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B5740);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B5740);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Int sub_10022EFDC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10022F020()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10022F048()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10022F088@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10023225C(*a1);
  *a2 = result;
  return result;
}

void sub_10022F0B0(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

id sub_10022F0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  Class isa;
  id v61;
  uint64_t v62;
  Swift::Int v63;
  Class v64;
  _QWORD *v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  id v70;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  objc_class *ObjectType;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  _QWORD *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  objc_super v93;
  uint64_t v94[2];

  v4 = v3;
  v74 = a3;
  v80 = a2;
  v81 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v5 = sub_100008384(&qword_1007B5800);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  __chkstk_darwin(v5);
  v75 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v88 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v84 = (char *)&v72 - v12;
  __chkstk_darwin(v11);
  v91 = (char *)&v72 - v13;
  v14 = sub_100008384((uint64_t *)&unk_1007B5200);
  v15 = __chkstk_darwin(v14);
  v85 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v72 - v17;
  v90 = (_QWORD *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v19 = *(v90 - 1);
  __chkstk_darwin(v90);
  v89 = (id *)((char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  v73 = v4 + 56;
  swift_unknownObjectWeakInit(v4 + 56, 0);
  v87 = (void (*)(char *, uint64_t, uint64_t))sub_100221EDC(0, (unint64_t *)&unk_1007B5850, OS_dispatch_queue_serial_ptr);
  v27 = swift_retain(v4);
  static DispatchQoS.userInitiated.getter(v27);
  v94[0] = (uint64_t)_swiftEmptyArrayStorage;
  v28 = sub_100220D78((unint64_t *)&unk_1007B5A20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  v29 = sub_100008384((uint64_t *)&unk_1007B5860);
  v30 = sub_100232F9C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v94, v29, v30, v21, v28);
  v31 = v89;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v19 + 104))(v89, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v90);
  v32 = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x8000000100612280, v26, v23, v31, 0);
  *(_QWORD *)(v4 + 72) = v32;
  v33 = v81;
  *(_QWORD *)(v4 + 16) = v81;
  v79 = (_QWORD *)v4;
  *(_QWORD *)(v4 + 48) = 0x100000;
  v34 = objc_allocWithZone((Class)SDAirDropFileZipper);
  swift_bridgeObjectRetain(v33);
  v72 = objc_msgSend(v34, "initWithQueue:boundStreamSize:", v32, 0x100000);
  v35 = *(_QWORD *)(v33 + 16);
  if (v35)
  {
    v82 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v36 = v33 + v82;
    v37 = *(_QWORD *)(v8 + 72);
    v87 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain(v33);
    v89 = _swiftEmptyArrayStorage;
    v38 = (uint64_t)v85;
    v86 = v18;
    v83 = v8;
    while (1)
    {
      v87(v18, v36, v7);
      v90 = *(_QWORD **)(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v90)(v18, 0, 1, v7);
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (v39(v18, 1, v7) == 1)
        break;
      v40 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v40(v91, v18, v7);
      URL.realPathURL()(v38);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v91, v7);
      if (v39((char *)v38, 1, v7) == 1)
      {
        sub_100232FE8(v38);
        v18 = v86;
      }
      else
      {
        v41 = v38;
        v42 = v84;
        v40(v84, (char *)v41, v7);
        v40(v88, v42, v7);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
        v18 = v86;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          v44 = (unint64_t)v89;
        else
          v44 = sub_100227A54(0, v89[2] + 1, 1, (unint64_t)v89);
        v46 = *(_QWORD *)(v44 + 16);
        v45 = *(_QWORD *)(v44 + 24);
        if (v46 >= v45 >> 1)
          v44 = sub_100227A54(v45 > 1, v46 + 1, 1, v44);
        v47 = v82;
        v8 = v83;
        *(_QWORD *)(v44 + 16) = v46 + 1;
        v89 = (_QWORD *)v44;
        v40((char *)(v44 + v47 + v46 * v37), v88, v7);
        v38 = (uint64_t)v85;
      }
      v36 += v37;
      if (!--v35)
        goto LABEL_14;
    }
  }
  else
  {
    v90 = *(_QWORD **)(v8 + 56);
    swift_bridgeObjectRetain(v33);
    v89 = _swiftEmptyArrayStorage;
LABEL_14:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v90)(v18, 1, 1, v7);
  }
  swift_bridgeObjectRelease_n(v81, 2);
  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v48 = type metadata accessor for Logger(0);
  sub_100221DF8(v48, (uint64_t)qword_1007B5740);
  v49 = v89;
  v50 = swift_bridgeObjectRetain_n(v89, 2);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v94[0] = v54;
    *(_DWORD *)v53 = 136315138;
    v55 = swift_bridgeObjectRetain(v49);
    v56 = Array.description.getter(v55, v7);
    v58 = v57;
    swift_bridgeObjectRelease(v49);
    v92 = sub_100228BD8(v56, v58, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v53 + 4);
    swift_bridgeObjectRelease_n(v49, 2);
    swift_bridgeObjectRelease(v58);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Passing real URLS to zipper %s", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v49, 2);
  }
  v59 = sub_10038D4E0((uint64_t)v49);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v59);
  v61 = v72;
  objc_msgSend(v72, "setSourceFiles:", isa);

  v62 = sub_10022CBA0((uint64_t)v49);
  swift_bridgeObjectRelease(v49);
  v63 = sub_10022F9A0(v62);
  swift_bridgeObjectRelease(v62);
  v64 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v63);
  objc_msgSend(v61, "setSkipReadableCheckFiles:", v64);

  objc_msgSend(v61, "setDisableAdaptiveCompressionForZipping:", 0);
  objc_msgSend(v61, "setShouldExtractMediaFromPhotosBundles:", 1);
  v65 = v79;
  v66 = v80;
  v79[3] = v61;
  v65[8] = v74;
  swift_unknownObjectWeakAssign(v73, v66);
  v67 = v61;
  v68 = v75;
  SFProgressContinuation.init(_:initialProgress:file:line:)(0xD000000000000012, 0x80000001006122C0, v69, 0xD000000000000066, 0x8000000100612210, 69, (char *)&type metadata for () + 8, &type metadata for Int);
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))((uint64_t)v65 + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v68, v77);
  swift_release(v65);
  v93.receiver = v65;
  v93.super_class = ObjectType;
  v70 = objc_msgSendSuper2(&v93, "init");
  objc_msgSend(v67, "setDelegate:", v70);

  swift_unknownObjectRelease(v66);
  return v70;
}

Swift::Int sub_10022F9A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v34 - v7;
  v37 = a1;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100008384((uint64_t *)&unk_1007B5870);
    v10 = (_QWORD *)static _SetStorage.allocate(capacity:)(v9);
  }
  else
  {
    v10 = &_swiftEmptySetSingleton;
  }
  v11 = *(_QWORD *)(v37 + 56);
  v36 = v37 + 56;
  v12 = -1 << *(_BYTE *)(v37 + 32);
  if (-v12 < 64)
    v13 = ~(-1 << -(char)v12);
  else
    v13 = -1;
  v14 = v13 & v11;
  v34 = -1 << *(_BYTE *)(v37 + 32);
  v35 = (unint64_t)(63 - v12) >> 6;
  v15 = (char *)(v10 + 7);
  swift_bridgeObjectRetain(v37);
  result = swift_retain(v10);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v22 = v21 | (v17 << 6);
      goto LABEL_28;
    }
    v23 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v23 >= v35)
      goto LABEL_37;
    v24 = *(_QWORD *)(v36 + 8 * v23);
    v25 = v17 + 1;
    if (!v24)
    {
      v25 = v17 + 2;
      if (v17 + 2 >= v35)
        goto LABEL_37;
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (!v24)
      {
        v25 = v17 + 3;
        if (v17 + 3 >= v35)
          goto LABEL_37;
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          v25 = v17 + 4;
          if (v17 + 4 >= v35)
            goto LABEL_37;
          v24 = *(_QWORD *)(v36 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_27:
    v14 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    v17 = v25;
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v3 + 72) * v22, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    swift_dynamicCast(v41, v6, v2, &type metadata for AnyHashable, 7);
    v38 = v41[0];
    v39 = v41[1];
    v40 = v42;
    result = AnyHashable._rawHashValue(seed:)(v10[5]);
    v27 = -1 << *((_BYTE *)v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)&v15[8 * (v28 >> 6)]) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)&v15[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)&v15[8 * v29];
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)&v15[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v18;
    v19 = v10[6] + 40 * v18;
    v20 = v39;
    *(_OWORD *)v19 = v38;
    *(_OWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 32) = v40;
    ++v10[2];
  }
  v26 = v17 + 5;
  if (v17 + 5 >= v35)
  {
LABEL_37:
    swift_release(v10);
    sub_10022E5B4(v37);
    return (Swift::Int)v10;
  }
  v24 = *(_QWORD *)(v36 + 8 * v26);
  if (v24)
  {
    v25 = v17 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v35)
      goto LABEL_37;
    v24 = *(_QWORD *)(v36 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10022FD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100220D78(&qword_1007B5808, type metadata accessor for SDAirDropSendCompressionAdapter, (uint64_t)&unk_1005CF108);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  return swift_task_switch(sub_10022FDA0, v4, v5);
}

uint64_t sub_10022FDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B5740);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping Send Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  objc_msgSend(*(id *)(v6 + 24), "stop");
  v7 = *(void **)(v6 + 32);
  if (v7)
  {
    v8 = v7;
    if (objc_msgSend(v8, "streamStatus") != (id)6)
    {
      objc_msgSend(v8, "close");

      v8 = *(id *)(v6 + 32);
      *(_QWORD *)(v6 + 32) = 0;
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022FED4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[4] = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100220D78(&qword_1007B5808, type metadata accessor for SDAirDropSendCompressionAdapter, (uint64_t)&unk_1005CF108);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  v1[5] = v4;
  v1[6] = v5;
  return swift_task_switch(sub_10022FF7C, v4, v5);
}

uint64_t sub_10022FF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t (*v11)(void);
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  BOOL v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Strong;
  uint64_t v44;
  _QWORD *v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, char);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  __int128 v61;

  v1 = *(_QWORD *)(v0 + 32);
  if (!*(_BYTE *)(v1 + 41))
  {
    if (qword_1007B3D00 != -1)
      goto LABEL_48;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    if (qword_1007B3D00 != -1)
      swift_once(&qword_1007B3D00, sub_10022EF4C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100221DF8(v2, (uint64_t)qword_1007B5740);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Adapter already sending compressed data";
      goto LABEL_10;
    }
  }
  else
  {
    v13 = *(void **)(v1 + 32);
    *(_QWORD *)(v0 + 56) = v13;
    if (!v13)
    {
      v39 = type metadata accessor for SFAirDropSend.Failure(0);
      v40 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
      swift_allocError(v39, v40, 0, 0);
      v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, enum case for SFAirDropSend.Failure.streamError(_:), v39);
      swift_willThrow(v42);
      v11 = *(uint64_t (**)(void))(v0 + 8);
      return v11();
    }
    *(_BYTE *)(v1 + 40) = 1;
    v14 = qword_1007B3D00;
    v15 = v13;
    if (v14 != -1)
      swift_once(&qword_1007B3D00, sub_10022EF4C);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100221DF8(v16, (uint64_t)qword_1007B5740);
    *(_QWORD *)(v0 + 64) = v17;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Send compression adapter compressing data", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    *(_QWORD *)(v0 + 72) = swift_slowAlloc(0x100000, -1);
    objc_msgSend(v15, "open");
    v21 = 0;
    *(_QWORD *)&v22 = 134217984;
    v61 = v22;
    while (1)
    {
      if ((objc_msgSend(*(id *)(v0 + 56), "hasBytesAvailable", v61) & 1) == 0)
      {
        v24 = *(_QWORD *)(v0 + 32);
        if (*(_BYTE *)(v24 + 41) == 3)
          goto LABEL_36;
      }
      v25 = (size_t)objc_msgSend(*(id *)(v0 + 56), "read:maxLength:", *(_QWORD *)(v0 + 72), 0x100000);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(12, -1);
        *(_DWORD *)v28 = v61;
        *(_QWORD *)(v28 + 4) = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Reading compressed data %ld", (uint8_t *)v28, 0xCu);
        swift_slowDealloc(v28, -1, -1);
      }

      if ((uint64_t)v25 <= 0)
      {
        v24 = *(_QWORD *)(v0 + 32);
LABEL_36:
        Strong = swift_unknownObjectWeakLoadStrong(v24 + 56, v23);
        *(_QWORD *)(v0 + 128) = Strong;
        if (Strong)
        {
          v44 = dword_1007B7E20;
          v45 = (_QWORD *)swift_task_alloc(unk_1007B7E24);
          *(_QWORD *)(v0 + 136) = v45;
          *v45 = v0;
          v45[1] = sub_100230B74;
          v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B7E20 + v44);
          v47 = 0;
          v48 = 0xC000000000000000;
          v49 = v21;
          v50 = 1;
          return v46(v47, v48, v49, v50);
        }
        v53 = Logger.logObject.getter(0);
        v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Finished reading compressed data", v55, 2u);
          swift_slowDealloc(v55, -1, -1);
        }
        v56 = *(_QWORD *)(v0 + 32);

        v57 = *(void **)(v56 + 32);
        if (v57)
        {
          v58 = v57;
          if (objc_msgSend(v58, "streamStatus") != (id)6)
          {
            v6 = *(uint8_t **)(v0 + 72);
            v4 = *(NSObject **)(v0 + 56);
            v59 = *(_QWORD *)(v0 + 32);
            objc_msgSend(v58, "close");

            v60 = *(void **)(v59 + 32);
            *(_QWORD *)(v59 + 32) = 0;

            goto LABEL_11;
          }

        }
        v10 = *(uint8_t **)(v0 + 72);
        v4 = *(NSObject **)(v0 + 56);
        goto LABEL_12;
      }
      v29 = __OFADD__(v21, v25);
      v21 += v25;
      *(_QWORD *)(v0 + 80) = v21;
      if (v29)
        break;
      v30 = *(const void **)(v0 + 72);
      if (v25 <= 0xE)
      {
        *(_QWORD *)(v0 + 22) = 0;
        *(_QWORD *)(v0 + 16) = 0;
        *(_BYTE *)(v0 + 30) = v25;
        memcpy((void *)(v0 + 16), v30, v25);
        v35 = *(_QWORD *)(v0 + 16);
        v36 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
      }
      else
      {
        v31 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
        v32 = __DataStorage.init(bytes:length:)(v30, v25);
        v34 = v32;
        if (v25 >= 0x7FFFFFFF)
        {
          v37 = type metadata accessor for Data.RangeReference(0);
          v35 = swift_allocObject(v37, 32, 7);
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 24) = v25;
          v36 = v34 | 0x8000000000000000;
        }
        else
        {
          v35 = v25 << 32;
          v36 = v32 | 0x4000000000000000;
        }
      }
      *(_QWORD *)(v0 + 88) = v35;
      *(_QWORD *)(v0 + 96) = v36;
      v38 = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + 56, v33);
      *(_QWORD *)(v0 + 104) = v38;
      if (v38)
      {
        v51 = dword_1007B7E20;
        v52 = (_QWORD *)swift_task_alloc(unk_1007B7E24);
        *(_QWORD *)(v0 + 112) = v52;
        *v52 = v0;
        v52[1] = sub_100230630;
        v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B7E20 + v51);
        v47 = v35;
        v48 = v36;
        v49 = v21;
        v50 = 0;
        return v46(v47, v48, v49, v50);
      }
      sub_100225AB4(v35, v36);
    }
    __break(1u);
LABEL_48:
    swift_once(&qword_1007B3D00, sub_10022EF4C);
LABEL_8:
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100221DF8(v8, (uint64_t)qword_1007B5740);
    v4 = Logger.logObject.getter(v9);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Zipper not ready to send compressed data";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
LABEL_11:
      v10 = v6;
LABEL_12:
      swift_slowDealloc(v10, -1, -1);
    }
  }

  v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100230630()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_100230AF8;
  }
  else
  {
    swift_unknownObjectRelease(v2[13]);
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_1002306E8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1002306E8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  BOOL v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, char);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  __int128 v40;

  sub_100225AB4(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)&v2 = 134217984;
  v40 = v2;
  while (1)
  {
    if ((objc_msgSend(*(id *)(v0 + 56), "hasBytesAvailable", v40) & 1) == 0)
    {
      v4 = *(_QWORD *)(v0 + 32);
      if (*(_BYTE *)(v4 + 41) == 3)
        goto LABEL_16;
    }
    v5 = (size_t)objc_msgSend(*(id *)(v0 + 56), "read:maxLength:", *(_QWORD *)(v0 + 72), 0x100000);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = v40;
      *(_QWORD *)(v8 + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Reading compressed data %ld", (uint8_t *)v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }

    if ((uint64_t)v5 <= 0)
      break;
    v9 = __OFADD__(v1, v5);
    v1 += v5;
    *(_QWORD *)(v0 + 80) = v1;
    if (v9)
      __break(1u);
    v10 = *(const void **)(v0 + 72);
    if (v5 <= 0xE)
    {
      *(_QWORD *)(v0 + 22) = 0;
      *(_QWORD *)(v0 + 16) = 0;
      *(_BYTE *)(v0 + 30) = v5;
      memcpy((void *)(v0 + 16), v10, v5);
      v15 = *(_QWORD *)(v0 + 16);
      v16 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
    }
    else
    {
      v11 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      v12 = __DataStorage.init(bytes:length:)(v10, v5);
      v14 = v12;
      if (v5 >= 0x7FFFFFFF)
      {
        v17 = type metadata accessor for Data.RangeReference(0);
        v15 = swift_allocObject(v17, 32, 7);
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 24) = v5;
        v16 = v14 | 0x8000000000000000;
      }
      else
      {
        v15 = v5 << 32;
        v16 = v12 | 0x4000000000000000;
      }
    }
    *(_QWORD *)(v0 + 88) = v15;
    *(_QWORD *)(v0 + 96) = v16;
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + 56, v13);
    *(_QWORD *)(v0 + 104) = Strong;
    if (Strong)
    {
      v27 = dword_1007B7E20;
      v28 = (_QWORD *)swift_task_alloc(unk_1007B7E24);
      *(_QWORD *)(v0 + 112) = v28;
      *v28 = v0;
      v28[1] = sub_100230630;
      v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B7E20 + v27);
      v23 = v15;
      v24 = v16;
      v25 = v1;
      v26 = 0;
      return v22(v23, v24, v25, v26);
    }
    sub_100225AB4(v15, v16);
  }
  v4 = *(_QWORD *)(v0 + 32);
LABEL_16:
  v19 = swift_unknownObjectWeakLoadStrong(v4 + 56, v3);
  *(_QWORD *)(v0 + 128) = v19;
  if (v19)
  {
    v20 = dword_1007B7E20;
    v21 = (_QWORD *)swift_task_alloc(unk_1007B7E24);
    *(_QWORD *)(v0 + 136) = v21;
    *v21 = v0;
    v21[1] = sub_100230B74;
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B7E20 + v20);
    v23 = 0;
    v24 = 0xC000000000000000;
    v25 = v1;
    v26 = 1;
    return v22(v23, v24, v25, v26);
  }
  v30 = Logger.logObject.getter(0);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Finished reading compressed data", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }
  v33 = *(_QWORD *)(v0 + 32);

  v34 = *(void **)(v33 + 32);
  if (v34)
  {
    v35 = v34;
    if (objc_msgSend(v35, "streamStatus") != (id)6)
    {
      v36 = *(_QWORD *)(v0 + 72);
      v37 = *(void **)(v0 + 56);
      v38 = *(_QWORD *)(v0 + 32);
      objc_msgSend(v35, "close");

      v39 = *(void **)(v38 + 32);
      *(_QWORD *)(v38 + 32) = 0;

      goto LABEL_27;
    }

  }
  v36 = *(_QWORD *)(v0 + 72);
  v37 = *(void **)(v0 + 56);
LABEL_27:
  swift_slowDealloc(v36, -1, -1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100230AF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void **)(v0 + 56);
  sub_100225AB4(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));

  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100230B74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_100230D7C;
  }
  else
  {
    swift_unknownObjectRelease(v2[16]);
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_100230C2C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100230C2C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Finished reading compressed data", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 32);

  v5 = *(void **)(v4 + 32);
  if (v5)
  {
    v6 = v5;
    if (objc_msgSend(v6, "streamStatus") != (id)6)
    {
      v7 = *(_QWORD *)(v0 + 72);
      v8 = *(void **)(v0 + 56);
      v9 = *(_QWORD *)(v0 + 32);
      objc_msgSend(v6, "close");

      v10 = *(void **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;

      goto LABEL_8;
    }

  }
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(void **)(v0 + 56);
LABEL_8:
  swift_slowDealloc(v7, -1, -1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100230D7C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 128));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100230DE4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[4] = a1;
  v2[5] = v1;
  ObjectType = swift_getObjectType(v1);
  v4 = sub_100008384(&qword_1007B5800);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100220D78(&qword_1007B5808, type metadata accessor for SDAirDropSendCompressionAdapter, (uint64_t)&unk_1005CF108);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
  v2[9] = v7;
  v2[10] = v8;
  return swift_task_switch(sub_100230E84, v7, v8);
}

uint64_t sub_100230E84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t Strong;
  id v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);

  v1 = v0[5];
  *(_BYTE *)(v1 + 41) = 1;
  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v2 = v0[5];
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007B5740);
  v4 = swift_retain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[5];
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    v0[3] = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 4);
    swift_release(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Zipper State Update: %ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release(v0[5]);
  }

  Strong = swift_unknownObjectWeakLoadStrong(v0[5] + 56, v10);
  v0[11] = Strong;
  if (Strong)
  {
    v12 = objc_msgSend(*(id *)(v0[5] + 24), "zipCompressionType");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    v15 = sub_10023226C();
    v17 = v16;
    swift_bridgeObjectRelease(v14);
    v0[12] = v17;
    v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1007B7E40 + dword_1007B7E40);
    v18 = (_QWORD *)swift_task_alloc(unk_1007B7E44);
    v0[13] = v18;
    *v18 = v0;
    v18[1] = sub_100231100;
    return v25(v0[4], (uint64_t)v15, v17);
  }
  else
  {
    v21 = v0[7];
    v20 = v0[8];
    v22 = v0[6];
    v23 = v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v22);
    v0[2] = v23;
    SFProgressContinuation.finish(with:)(v0 + 2, v22);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v24 = (_QWORD *)swift_task_alloc(dword_1007B5814);
    v0[15] = v24;
    *v24 = v0;
    v24[1] = sub_100231250;
    return sub_10022FED4();
  }
}

uint64_t sub_100231100()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[9];
    v5 = v2[10];
    v6 = sub_10023120C;
  }
  else
  {
    v7 = v2[11];
    swift_bridgeObjectRelease(v2[12]);
    swift_unknownObjectRelease(v7);
    v4 = v2[9];
    v5 = v2[10];
    v6 = sub_100231174;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100231174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v4 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v3);
  v0[2] = v4;
  SFProgressContinuation.finish(with:)(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B5814);
  v0[15] = v5;
  *v5 = v0;
  v5[1] = sub_100231250;
  return sub_10022FED4();
}

uint64_t sub_10023120C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_unknownObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231250()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10023129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  ObjectType = swift_getObjectType(v3);
  v6 = type metadata accessor for SFAirDrop.Progress(0);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[9] = v7;
  v4[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B5830);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B5800);
  v4[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[15] = v11;
  v4[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100220D78(&qword_1007B5808, type metadata accessor for SDAirDropSendCompressionAdapter, (uint64_t)&unk_1005CF108);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
  v4[17] = v13;
  v4[18] = v14;
  return swift_task_switch(sub_100231394, v13, v14);
}

uint64_t sub_100231394()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[15];
  v1 = v0[16];
  v3 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[7] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v3);
  SFProgressContinuation.task.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[19] = v4;
  *v4 = v0;
  v4[1] = sub_100231444;
  return SFProgressTask.finalValue.getter(v0 + 2, v0[11]);
}

uint64_t sub_100231444()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  v5 = *(_QWORD *)(*v1 + 96);
  v4 = *(_QWORD *)(*v1 + 104);
  v6 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_100231754;
  else
    v7 = sub_1002314CC;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1002314CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v1 + 41) = 2;
  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = type metadata accessor for Logger(0);
  sub_100221DF8(v4, (uint64_t)qword_1007B5740);
  v5 = swift_retain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 56);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    *(_QWORD *)(v0 + 24) = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4);
    swift_release(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Zipper State Update: %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 56));
  }

  v12 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v11 + 8) = v2;
  *(_BYTE *)(v11 + 16) = 0;
  *(_OWORD *)(v11 + 24) = v14;
  (*(void (**)(void))(v12 + 104))();
  Strong = swift_unknownObjectWeakLoadStrong(v13 + 56, v15);
  if (Strong)
  {
    v17 = Strong;
    sub_1002A2A2C(*(_QWORD *)(v0 + 80));
    swift_unknownObjectRelease(v17);
  }
  v18 = (_QWORD *)swift_task_alloc(dword_1007B5814);
  *(_QWORD *)(v0 + 168) = v18;
  *v18 = v0;
  v18[1] = sub_10023168C;
  return sub_10022FED4();
}

uint64_t sub_10023168C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002317A8;
  else
    v4 = sub_1002316EC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1002316EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v3, *(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100231754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002317A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023180C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  ObjectType = swift_getObjectType(v1);
  v4 = sub_100220D78(&qword_1007B5808, type metadata accessor for SDAirDropSendCompressionAdapter, (uint64_t)&unk_1005CF108);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v4);
  return swift_task_switch(sub_100231880, v5, v6);
}

uint64_t sub_100231880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t *v29;

  v1 = *(_QWORD *)(v0 + 40);
  *(_BYTE *)(v1 + 41) = 3;
  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007B5740);
  v4 = swift_retain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 40);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 24) = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4);
    swift_release(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Zipper State Update: %ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 40));
  }

  v11 = *(_QWORD *)(v0 + 32);
  if (v11)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 32));
    swift_errorRetain(v11);
    v12 = swift_errorRetain(v11);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      swift_errorRetain(v11);
      v16 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(_QWORD *)(v0 + 16) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4);
      *v29 = v16;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Compression failed with error: %@", v15, 0xCu);
      v17 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v29, 1, v17);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }
    v23 = *(_QWORD *)(v0 + 40);

    v25 = *(void **)(v23 + 32);
    if (v25)
    {
      v26 = v25;
      if (objc_msgSend(v26, "streamStatus") != (id)6)
      {
        objc_msgSend(v26, "close");

        v26 = *(id *)(v23 + 32);
        *(_QWORD *)(v23 + 32) = 0;
      }

    }
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 40) + 56, v24);
    if (Strong)
    {
      v28 = Strong;
      sub_1002A2CFC(v11);
      swift_errorRelease(v11);
      swift_unknownObjectRelease(v28);
    }
    else
    {
      swift_errorRelease(v11);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = Logger.logObject.getter(v10);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Compression finished", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = (_QWORD *)swift_task_alloc(dword_1007B5814);
    *(_QWORD *)(v0 + 48) = v21;
    *v21 = v0;
    v21[1] = sub_100231C44;
    return sub_10022FED4();
  }
}

uint64_t sub_100231C44()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100231C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1007B57FC);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10000D098;
  return sub_100230DE4(a5);
}

uint64_t sub_100231CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(dword_1007B582C);
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = sub_10000D12C;
  return sub_10023129C(a5, a6, a7);
}

uint64_t sub_100231D4C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1007B583C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000D098;
  return sub_10023180C(0);
}

uint64_t sub_100231D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1007B583C);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10000D098;
  return sub_10023180C(a5);
}

uint64_t sub_100231E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  sub_100232F78(v0 + 56);
  v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation;
  v2 = sub_100008384(&qword_1007B5800);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)((swift_isaMask & *(_QWORD *)v0) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v0) + 0x34));
}

uint64_t sub_100231F14()
{
  return type metadata accessor for SDAirDropSendCompressionAdapter(0);
}

uint64_t type metadata accessor for SDAirDropSendCompressionAdapter(uint64_t a1)
{
  uint64_t result;

  result = qword_1007B5788;
  if (!qword_1007B5788)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropSendCompressionAdapter);
  return result;
}

void sub_100231F58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = "\b";
  v4[3] = &unk_1005CF018;
  v4[4] = &unk_1005CF030;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = &unk_1005CF048;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100232018();
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

void sub_100232018()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1007B5798)
  {
    v0 = type metadata accessor for SFProgressContinuation(0, (char *)&type metadata for () + 8, &type metadata for Int);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1007B5798);
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for SDAirDropSendCompressionAdapter.State(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SDAirDropSendCompressionAdapter.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SDAirDropSendCompressionAdapter.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100232160 + 4 * byte_1005CEF65[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100232194 + 4 * byte_1005CEF60[v4]))();
}

uint64_t sub_100232194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10023219C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002321A4);
  return result;
}

uint64_t sub_1002321B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002321B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002321BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002321C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002321D0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1002321DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropSendCompressionAdapter.State()
{
  return &type metadata for SDAirDropSendCompressionAdapter.State;
}

unint64_t sub_1002321F8()
{
  unint64_t result;

  result = qword_1007B57A0;
  if (!qword_1007B57A0)
  {
    result = swift_getWitnessTable(&unk_1005CF0E0, &type metadata for SDAirDropSendCompressionAdapter.State);
    atomic_store(result, (unint64_t *)&qword_1007B57A0);
  }
  return result;
}

uint64_t sub_10023223C()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

unint64_t sub_10023225C(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

const __CFString *sub_10023226C()
{
  NSString v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;
  const __CFString *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __CFString *v15;
  uint64_t v16;

  v0 = String._bridgeToObjectiveC()();
  if (CFSTR("pkzip"))
  {
    type metadata accessor for CFString(0);
    v2 = v1;
    v3 = sub_100220D78(&qword_1007B5820, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA64);
    v4 = CFSTR("pkzip");
    LOBYTE(v2) = static _CFObject.== infix(_:_:)(v4, v0, v2, v3);

    if ((v2 & 1) != 0)
    {
      result = CFSTR("application/zip");
      if (CFSTR("application/zip"))
        goto LABEL_14;
      __break(1u);
    }
  }
  if (CFSTR("gzip"))
  {
    type metadata accessor for CFString(0);
    v7 = v6;
    v8 = sub_100220D78(&qword_1007B5820, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA64);
    v9 = v0;
    v10 = CFSTR("gzip");
    LOBYTE(v7) = static _CFObject.== infix(_:_:)(v10, v9, v7, v8);

    if ((v7 & 1) != 0)
    {
      result = CFSTR("application/x-cpio");
      if (CFSTR("application/x-cpio"))
        goto LABEL_14;
      __break(1u);
    }
  }
  if (CFSTR("dvzip"))
  {
    type metadata accessor for CFString(0);
    v12 = v11;
    v13 = sub_100220D78(&qword_1007B5820, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA64);
    v14 = v0;
    v15 = CFSTR("dvzip");
    LOBYTE(v12) = static _CFObject.== infix(_:_:)(v15, v14, v12, v13);

    if ((v12 & 1) != 0)
    {
      result = CFSTR("application/x-dvzip");
      if (!CFSTR("application/x-dvzip"))
      {
        __break(1u);
        goto LABEL_13;
      }
LABEL_14:
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (const __CFString *)v16;
    }
  }
LABEL_13:
  result = CFSTR("application/x-cpio");
  if (CFSTR("application/x-cpio"))
    goto LABEL_14;
  __break(1u);
  return result;
}

void sub_10023243C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v6 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v9 = type metadata accessor for Logger(0);
  sub_100221DF8(v9, (uint64_t)qword_1007B5740);
  v10 = swift_unknownObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v40 = a1;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v41 = v3;
    v15 = v14;
    v42[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v44 = a2;
    swift_unknownObjectRetain(a2);
    v16 = String.init<A>(describing:)(&v44, (char *)&type metadata for Swift.AnyObject + 8);
    v18 = v17;
    v44 = sub_100228BD8(v16, v17, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v13 + 4);
    v19 = v18;
    a1 = v40;
    swift_bridgeObjectRelease(v19);
    swift_unknownObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Zipper Update: %s", v13, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v20 = v15;
    v3 = v41;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(a2, 2);
  }

  switch(a1)
  {
    case 5:
      ObjectType = swift_getObjectType(a2);
      v42[0] = a2;
      v21 = sub_100221EDC(0, (unint64_t *)&unk_1007B5230, NSDictionary_ptr);
      swift_unknownObjectRetain(a2);
      tryCast<A>(_:as:description:file:line:)(&v44, v42, v21, 0, 0, 0xD000000000000066, 0x8000000100612210, 177, v21);
      sub_10022E75C(v42);
      if (!kSFOperationTotalBytesKey)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x100232CF4);
      }
      v22 = (void *)v44;
      NSDictionary.sf_value<A>(_:as:file:line:)(v42, kSFOperationTotalBytesKey, &type metadata for Int, 0xD000000000000066, 0x8000000100612210, 178, &type metadata for Int);
      v33 = v42[0];
      v34 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v8, 1, 1, v34);
      v35 = (_QWORD *)swift_allocObject(&unk_10071DFB0, 48, 7);
      v35[2] = 0;
      v35[3] = 0;
      v35[4] = v3;
      v35[5] = v33;
      swift_retain(v3);
      v36 = &unk_1007B57F0;
      break;
    case 7:
      ObjectType = swift_getObjectType(a2);
      v42[0] = a2;
      v23 = sub_100221EDC(0, (unint64_t *)&unk_1007B5230, NSDictionary_ptr);
      swift_unknownObjectRetain(a2);
      tryCast<A>(_:as:description:file:line:)(&v44, v42, v23, 0, 0, 0xD000000000000066, 0x8000000100612210, 187, v23);
      sub_10022E75C(v42);
      if (!kSFOperationBytesCopiedKey)
        goto LABEL_18;
      v22 = (void *)v44;
      NSDictionary.sf_value<A>(_:as:file:line:)(v42, kSFOperationBytesCopiedKey, &type metadata for Int, 0xD000000000000066, 0x8000000100612210, 188, &type metadata for Int);
      if (!kSFOperationFilesCopiedKey)
        goto LABEL_19;
      v24 = v42[0];
      NSDictionary.sf_value<A>(_:as:file:line:)(v42, kSFOperationFilesCopiedKey, &type metadata for Int, 0xD000000000000066, 0x8000000100612210, 189, &type metadata for Int);
      if (!kSFOperationTimeRemainingKey)
        goto LABEL_20;
      v25 = v42[0];
      NSDictionary.sf_value<A>(_:as:file:line:)(v42, kSFOperationTimeRemainingKey, &type metadata for Int, 0xD000000000000066, 0x8000000100612210, 190, &type metadata for Int);
      v38 = v42[0];
      v39 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v8, 1, 1, v39);
      v35 = (_QWORD *)swift_allocObject(&unk_10071DF88, 64, 7);
      v35[2] = 0;
      v35[3] = 0;
      v35[4] = v3;
      v35[5] = v25;
      v35[6] = v24;
      v35[7] = v38;
      swift_retain(v3);
      v36 = &unk_1007B57E0;
      break;
    case 9:
      v26 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 1, 1, v26);
      v27 = (_QWORD *)swift_allocObject(&unk_10071DF60, 40, 7);
      v27[2] = 0;
      v27[3] = 0;
      v27[4] = v3;
      swift_retain(v3);
      v28 = &unk_1007B57D0;
      goto LABEL_15;
    case 10:
      ObjectType = swift_getObjectType(a2);
      v42[0] = a2;
      v29 = sub_100221EDC(0, &qword_1007B57B0, NSError_ptr);
      swift_unknownObjectRetain(a2);
      tryCast<A>(_:as:description:file:line:)(&v44, v42, v29, 0, 0, 0xD000000000000066, 0x8000000100612210, 203, v29);
      sub_10022E75C(v42);
      v30 = v44;
      v31 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
      v27 = (_QWORD *)swift_allocObject(&unk_10071DF38, 48, 7);
      v27[2] = 0;
      v27[3] = 0;
      v27[4] = v3;
      v27[5] = v30;
      swift_retain(v3);
      v28 = &unk_1007B57C0;
LABEL_15:
      v32 = sub_100252AF4((uint64_t)v8, (uint64_t)v28, (uint64_t)v27);
      swift_release(v32);
      return;
    default:
      return;
  }
  v37 = sub_100252AF4((uint64_t)v8, (uint64_t)v36, (uint64_t)v35);
  swift_release(v37);

}

uint64_t sub_100232D0C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100232D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1007B57BC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  v4 = (_QWORD *)swift_task_alloc(dword_1007B583C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10000D098;
  return sub_10023180C(v2);
}

uint64_t sub_100232DB8()
{
  return sub_100232EC8(40);
}

uint64_t sub_100232DC0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1007B57CC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000D098;
  v2 = (_QWORD *)swift_task_alloc(dword_1007B583C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10000D098;
  return sub_10023180C(0);
}

uint64_t sub_100232E2C()
{
  return sub_100232EC8(64);
}

uint64_t sub_100232E34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[5];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_1007B57DC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000D12C;
  v6 = (_QWORD *)swift_task_alloc(dword_1007B582C);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_10000D12C;
  return sub_10023129C(v2, v4, v3);
}

uint64_t sub_100232EC0()
{
  return sub_100232EC8(48);
}

uint64_t sub_100232EC8(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100232F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1007B57EC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  v4 = (_QWORD *)swift_task_alloc(dword_1007B57FC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10000D098;
  return sub_100230DE4(v2);
}

uint64_t sub_100232F78(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t sub_100232F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B5A30;
  if (!qword_1007B5A30)
  {
    v1 = sub_10021FF9C((uint64_t *)&unk_1007B5860);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1007B5A30);
  }
  return result;
}

uint64_t sub_100232FE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008384((uint64_t *)&unk_1007B5200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100233028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B5880);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B5880);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

char *sub_1002330B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  id v35;
  id v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  __n128 v60;
  uint64_t v61;
  objc_class *v62;
  id v63;
  const char *v64;
  Class isa;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  objc_class *ObjectType;
  uint64_t v88;
  uint64_t v89;
  id v90;
  _QWORD aBlock[5];
  uint64_t v92;
  objc_super v93;
  _OWORD v94[5];
  __int16 v95;
  uint64_t v96;

  v9 = v7;
  v84 = a7;
  v96 = a6;
  v83 = a5;
  v89 = a3;
  v90 = a4;
  v81 = a2;
  v88 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v7);
  v86 = sub_100008384((uint64_t *)&unk_1007B5A10);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v82 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0);
  __chkstk_darwin(v12);
  v77 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v74 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider];
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_QWORD *)v16 + 4) = 0;
  v17 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination];
  v18 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_adapterBufferSize] = 3145728;
  v20 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate];
  *((_QWORD *)v20 + 1) = 0;
  swift_unknownObjectWeakInit(v20, 0);
  v21 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveServiceDelegate];
  *((_QWORD *)v21 + 1) = 0;
  swift_unknownObjectWeakInit(v21, 0);
  v76 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_queue;
  v75 = sub_100221EDC(0, (unint64_t *)&unk_1007B5850, OS_dispatch_queue_serial_ptr);
  v22 = swift_retain(v9);
  static DispatchQoS.userInitiated.getter(v22);
  v23 = (const char *)_swiftEmptyArrayStorage;
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_100220D78((unint64_t *)&unk_1007B5A20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  v25 = sub_100008384((uint64_t *)&unk_1007B5860);
  v26 = sub_100232F9C();
  v27 = v77;
  v28 = v25;
  v29 = v88;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v26, v12, v24);
  v30 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v80);
  v31 = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000034, 0x8000000100612520, v74, v27, v30, 0);
  *(_QWORD *)&v9[v76] = v31;
  sub_10023A858(v29, (uint64_t)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_askRequest]);
  v32 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID];
  v33 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v33 - 8);
  v34 = *(void (**)(char *, uint64_t))(v79 + 16);
  v80 = v33;
  v34(v32, v89);
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalReceivedBytes] = 0;
  v35 = objc_allocWithZone((Class)SDAirDropFileZipper);
  v36 = objc_msgSend(v35, "initWithQueue:boundStreamSize:", v31, v81);
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper] = v36;
  *((_QWORD *)v20 + 1) = v83;
  swift_unknownObjectWeakAssign(v20, v90);
  *((_QWORD *)v21 + 1) = v84;
  swift_unknownObjectWeakAssign(v21, v96);
  v37 = v82;
  SFProgressContinuation.init(_:initialProgress:file:line:)(0xD000000000000014, 0x8000000100612560, v38, 0xD000000000000069, 0x8000000100612580, 67, (char *)&type metadata for () + 8, &type metadata for Bool);
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation], v37, v86);
  swift_release(v9);
  v93.receiver = v9;
  v93.super_class = ObjectType;
  v39 = (char *)objc_msgSendSuper2(&v93, "init");
  v40 = &v39[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  v41 = *(_QWORD *)&v39[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  v42 = v39;
  swift_unknownObjectRelease(v41);
  ObjectType = (objc_class *)OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper;
  v43 = *(void **)&v42[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper];
  v44 = _s10AskRequestVMa(0);
  v45 = v43;
  v46 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "setSenderName:", v46);

  v47 = *(int *)(v44 + 48);
  v48 = *(_QWORD *)(v29 + v47);
  if (v48 && (v49 = *(_QWORD *)(v48 + 16)) != 0)
  {
    swift_bridgeObjectRetain_n(*(_QWORD *)(v29 + v47), 2);
    v50 = 32;
    while (1)
    {
      v51 = *(_OWORD *)(v48 + v50 + 16);
      v94[0] = *(_OWORD *)(v48 + v50);
      v94[1] = v51;
      v52 = *(_OWORD *)(v48 + v50 + 32);
      v53 = *(_OWORD *)(v48 + v50 + 48);
      v54 = *(_OWORD *)(v48 + v50 + 64);
      v95 = *(_WORD *)(v48 + v50 + 80);
      v94[3] = v53;
      v94[4] = v54;
      v94[2] = v52;
      sub_10023A904(v94);
      sub_10052A178();
      if (v8)
        break;
      v56 = v55;
      sub_10023A958(v94);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
        v23 = (const char *)sub_100227B74(0, *((_QWORD *)v23 + 2) + 1, 1, (uint64_t)v23);
      v58 = *((_QWORD *)v23 + 2);
      v57 = *((_QWORD *)v23 + 3);
      if (v58 >= v57 >> 1)
        v23 = (const char *)sub_100227B74((_QWORD *)(v57 > 1), v58 + 1, 1, (uint64_t)v23);
      *((_QWORD *)v23 + 2) = v58 + 1;
      *(_QWORD *)&v23[8 * v58 + 32] = v56;
      v50 += 88;
      if (!--v49)
      {
        swift_bridgeObjectRelease_n(v48, 2);
        v29 = v88;
        goto LABEL_12;
      }
    }
    sub_10023A958(v94);

    swift_unknownObjectRelease(v96);
    *(_QWORD *)&v59 = swift_bridgeObjectRelease(v23).n128_u64[0];
    v60 = swift_bridgeObjectRelease((const char *)v48, v59);
    (*(void (**)(uint64_t, uint64_t, __n128))(v79 + 8))(v89, v80, v60);
    swift_bridgeObjectRelease((const char *)v48);
    v29 = v88;
  }
  else
  {
LABEL_12:
    v61 = v89;
    if (*((_QWORD *)v23 + 2))
    {
      v62 = ObjectType;
      v63 = *(id *)((char *)ObjectType + (_QWORD)v42);
      v64 = (const char *)sub_10038D654((uint64_t)v23);
      swift_bridgeObjectRelease(v23);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v64);
      v66 = swift_allocObject(&unk_10071E090, 24, 7);
      swift_weakInit(v66 + 16, v42);
      aBlock[4] = sub_10023A8C0;
      v92 = v66;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100233DC0;
      aBlock[3] = &unk_10071E0A8;
      v67 = _Block_copy(aBlock);
      swift_release(v92);
      objc_msgSend(v63, "setPlaceholderFiles:withCreationCompletionHandler:", isa, v67);
      _Block_release(v67);

      objc_msgSend(*(id *)((char *)v62 + (_QWORD)v42), "setDelegate:", v42);
    }
    else
    {

      swift_bridgeObjectRelease(v23);
      v68 = type metadata accessor for SFAirDropReceive.Failure(0);
      v69 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      swift_allocError(v68, v69, 0, 0);
      v71 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v70, enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:), v68);
      swift_willThrow(v71);
    }

    swift_unknownObjectRelease(v96);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v61, v80);
  }
  sub_10023A8C8(v29);
  return v42;
}

uint64_t sub_100233930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t result;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 16;
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v8 = type metadata accessor for Logger(0);
  sub_100221DF8(v8, (uint64_t)qword_1007B5880);
  v9 = swift_bridgeObjectRetain((const char *)a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    v21 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);
    swift_bridgeObjectRelease((const char *)a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Created %ld placeholder files", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease((const char *)a1);
  }
  swift_beginAccess(v7, &v21, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v14 = result;
    v15 = (const char *)sub_100233B64(a1);
    if (v15)
      v16 = v15;
    else
      v16 = (const char *)_swiftEmptyArrayStorage;
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
    v18 = (_QWORD *)swift_allocObject(&unk_10071E0E0, 48, 7);
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v14;
    v18[5] = v16;
    swift_retain(v14);
    swift_bridgeObjectRetain(v16);
    v19 = sub_100252EE0((uint64_t)v6, (uint64_t)&unk_1007B5A48, (uint64_t)v18);
    swift_bridgeObjectRelease(v16);
    swift_release(v14);
    return swift_release(v19);
  }
  return result;
}

_QWORD *sub_100233B64(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  const char *v10;
  _BYTE v11[32];
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  sub_1002298B0(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_10022E77C(i, (uint64_t)v11);
      v5 = sub_100008384(&qword_1007B5310);
      if (!swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v5, 6))
        break;
      v6 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1002298B0(0, v3[2] + 1, 1);
        v3 = v12;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_1002298B0(v7 > 1, v8 + 1, 1);
        v3 = v12;
      }
      v3[2] = v8 + 1;
      v3[v8 + 4] = v6;
      if (!--v2)
        return v3;
    }
    v10 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  return v3;
}

_QWORD *sub_100233CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  _BYTE v11[32];
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v12;
  for (i = a1 + 32; ; i += 32)
  {
    sub_10022E77C(i, (uint64_t)v11);
    v4 = sub_100221EDC(0, &qword_1007B5A58, _CDInteraction_ptr);
    v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6);
    if (!(_DWORD)v5)
      break;
    v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2)
      return v12;
  }
  v10 = 0;
  swift_release(v12);

  return 0;
}

uint64_t sub_100233DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, (char *)&type metadata for Any + 8);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100233E1C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v3 + 344) = a2;
  *(_QWORD *)(v3 + 216) = a1;
  *(_QWORD *)(v3 + 224) = v2;
  ObjectType = swift_getObjectType(v2);
  v5 = sub_100008384((uint64_t *)&unk_1007B5200);
  *(_QWORD *)(v3 + 232) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 240) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 248) = v7;
  *(_QWORD *)(v3 + 256) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v8);
  *(_QWORD *)(v3 + 264) = v9;
  *(_QWORD *)(v3 + 272) = v10;
  return swift_task_switch(sub_100233F14, v9, v10);
}

uint64_t sub_100233F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;

  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B5880);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting Receive Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 224);

  v7 = (_QWORD *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream, v0 + 176, 0, 0);
  if (*v7)
    goto LABEL_7;
  v8 = (_QWORD *)(*(_QWORD *)(v0 + 224)
                + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(v8, v0 + 56, 0, 0);
  if (*v8)
    goto LABEL_7;
  v15 = (void *)objc_opt_self(NSStream);
  swift_beginAccess(v7, v0 + 80, 33, 0);
  *(_QWORD *)(v0 + 200) = *v7;
  *(_QWORD *)&v16 = swift_beginAccess(v8, v0 + 128, 33, 0).n128_u64[0];
  *(_QWORD *)(v0 + 208) = *v8;
  objc_msgSend(v15, "getBoundStreamsWithBufferSize:inputStream:outputStream:", 3145728, v0 + 200, v0 + 208, v16);
  v17 = *(void **)(v0 + 208);
  v18 = (void *)*v8;
  *v8 = v17;
  swift_endAccess(v0 + 128);
  v19 = *(void **)(v0 + 200);
  v20 = (void *)*v7;
  *v7 = v19;
  swift_endAccess(v0 + 80);
  v21 = v17;
  v22 = v19;

  v23 = (void *)*v7;
  *(_QWORD *)(v0 + 280) = *v7;
  if (!v23 || (v24 = (void *)*v8, *(_QWORD *)(v0 + 288) = *v8, !v24))
  {
LABEL_7:
    v9 = type metadata accessor for SFAirDropReceive.Failure(0);
    v10 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v9, v10, 0, 0);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for SFAirDropReceive.Failure.streamError(_:), v9);
    swift_willThrow(v12);
    v13 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 256));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = qword_1007B3D98;
    v26 = v23;
    v27 = v24;
    if (v25 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    return swift_task_switch(sub_100234244, static AirDropActor.shared, 0);
  }
}

uint64_t sub_100234244()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for SDAirDropDownloadDestinationProvideriOS();
  v2 = swift_allocObject(v1, 16, 7);
  v0[5] = v1;
  v0[6] = &off_10071D6A0;
  v0[2] = v2;
  return swift_task_switch(sub_1002342C8, v0[33], v0[34]);
}

uint64_t sub_1002342C8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[28] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  swift_beginAccess(v1, v0 + 13, 33, 0);
  sub_10023A084((uint64_t)(v0 + 2), v1, &qword_1007B59A8);
  swift_endAccess(v0 + 13);
  v2 = (_QWORD *)swift_task_alloc(dword_1007B59BC);
  v0[37] = v2;
  *v2 = v0;
  v2[1] = sub_100234394;
  return sub_1002348D4(v0[32]);
}

uint64_t sub_100234394()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002347B4;
  else
    v4 = sub_100234440;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272));
}

uint64_t sub_100234440()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[31];
  v3 = v0[29];
  v2 = v0[30];
  v5 = v0[27];
  v4 = v0[28];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 16))(v3, v0[32], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  v6 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination, v0 + 19, 33, 0);
  sub_10023A084(v3, v6, (uint64_t *)&unk_1007B5200);
  swift_endAccess(v0 + 19);
  v7 = _s13UploadRequestVMa(0);
  v0[39] = v7;
  v8 = *(_QWORD *)(v5 + *(int *)(v7 + 20));
  v0[40] = v8;
  v9 = (_QWORD *)swift_task_alloc(dword_1007B59C4);
  v0[41] = v9;
  *v9 = v0;
  v9[1] = sub_100234564;
  return sub_100234C8C(v0[32], v8);
}

uint64_t sub_100234564()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100234834;
  else
    v4 = sub_100234610;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272));
}

uint64_t sub_100234610()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSURL *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  Class isa;
  const char *v12;
  const char *v13;
  NSString v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(void **)(v0 + 280);
  v3 = *(void **)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 232);
  v5 = *(unsigned __int8 *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 216);
  v6 = *(NSURL **)(v0 + 224);
  *(Class *)((char *)&v6->super.isa
           + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) = *(Class *)(v0 + 320);
  v8 = *(Class *)((char *)&v6->super.isa + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper);
  URL._bridgeToObjectiveC()(v6);
  v10 = v9;
  objc_msgSend(v8, "setDestination:", v9);

  objc_msgSend(v8, "setReadStream:", v2);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v8, "setTotalBytes:", isa);

  sub_10023A50C(*(_QWORD *)(v7 + *(int *)(v1 + 24)), *(const char **)(v7 + *(int *)(v1 + 24) + 8));
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setUnzipCompressionType:", v14, swift_bridgeObjectRelease(v13).n128_f64[0]);

  objc_msgSend(v8, "setShouldExtractMediaFromPhotosBundles:", v5);
  objc_msgSend(v3, "open");
  objc_msgSend(v8, "unzip");

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v4, v17);
  swift_task_dealloc(v4);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002347B4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 280);

  v2 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100234834()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002348D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[5] = a1;
  v2[6] = v1;
  ObjectType = swift_getObjectType(v1);
  v4 = sub_100008384((uint64_t *)&unk_1007B5200);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
  v2[8] = v6;
  v2[9] = v7;
  return swift_task_switch(sub_10023496C, v6, v7);
}

uint64_t sub_10023496C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 48)
                + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = v1[3];
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 48);
    sub_10023A834(v1, v2);
    v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID;
    v5 = (_QWORD *)swift_task_alloc(dword_1007B43C4);
    *(_QWORD *)(v0 + 80) = v5;
    *v5 = v0;
    v5[1] = sub_100234AD0;
    return sub_10021DDA8(*(_QWORD *)(v0 + 56), v4);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 56);
    v8 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
    sub_10000D0F0(*(_QWORD *)(v0 + 56), (uint64_t *)&unk_1007B5200);
    v9 = type metadata accessor for SFAirDropSend.Failure(0);
    v10 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v9, v10, 0, 0);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:), v9);
    swift_willThrow(v12);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100234AD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100234C58;
  else
    v4 = sub_100234B30;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_100234B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 56);
  if (v4 == 1)
  {
    sub_10000D0F0(*(_QWORD *)(v0 + 56), (uint64_t *)&unk_1007B5200);
    v6 = type metadata accessor for SFAirDropSend.Failure(0);
    v7 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v6, v7, 0, 0);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:), v6);
    swift_willThrow(v9);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56), v2);
    swift_task_dealloc(v5);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100234C58()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100234C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  ObjectType = swift_getObjectType(v2);
  v5 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
  return swift_task_switch(sub_100234D04, v6, v7);
}

uint64_t sub_100234D04()
{
  uint64_t v0;
  NSURL *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint32_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v1 = *(NSURL **)(v0 + 56);
  if ((uint64_t)v1 < 1)
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100221DF8(v11, (uint64_t)qword_1007B5880);
    v7 = Logger.logObject.getter(v12);
    v8 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_14;
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    v10 = "UPLOAD invalid total bytes";
LABEL_12:
    v13 = v7;
    v14 = v8;
    v15 = v9;
    v16 = 2;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v10, v15, v16);
    swift_slowDealloc(v9, -1, -1);
LABEL_14:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v4 = sub_100195EB8(v2, 0);

  if (!v4
    || (v36 = 0,
        v37 = 1,
        static Int64._conditionallyBridgeFromObjectiveC(_:result:)(v4, &v36),
        v4,
        (v37 & 1) != 0))
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100221DF8(v5, (uint64_t)qword_1007B5880);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_14;
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    v10 = "Unable to get available storage";
    goto LABEL_12;
  }
  v18 = v36;
  if (v36 >= *(_QWORD *)(v0 + 56))
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100221DF8(v31, (uint64_t)qword_1007B5880);
    v7 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v33))
      goto LABEL_14;
    v34 = *(_QWORD *)(v0 + 56);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 16) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4);
    v10 = "Sufficient storage to receive %ld";
    v13 = v7;
    v14 = v33;
    v15 = v9;
    v16 = 12;
    goto LABEL_13;
  }
  v35 = v0 + 32;
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100221DF8(v19, (uint64_t)qword_1007B5880);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = *(_QWORD *)(v0 + 56);
    v24 = swift_slowAlloc(22, -1);
    *(_DWORD *)v24 = 134218240;
    *(_QWORD *)(v0 + 32) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v0 + 40, v24 + 4);
    *(_WORD *)(v24 + 12) = 2048;
    *(_QWORD *)(v0 + 40) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v24 + 14);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Insufficient storage %lld to receive %ld", (uint8_t *)v24, 0x16u);
    swift_slowDealloc(v24, -1, -1);
  }

  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = *(_QWORD *)(v0 + 56);
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v29 = 134217984;
    *(_QWORD *)(v0 + 24) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v35, v29 + 4);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Attempting cache purge to receive %ld", v29, 0xCu);
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = (_QWORD *)swift_task_alloc(dword_1007B59D4);
  *(_QWORD *)(v0 + 72) = v30;
  *v30 = v0;
  v30[1] = sub_100235188;
  return sub_100236B24(*(_QWORD *)(v0 + 56));
}

uint64_t sub_100235188()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1002351D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[13] = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  v1[14] = v4;
  v1[15] = v5;
  return swift_task_switch(sub_100235244, v4, v5);
}

uint64_t sub_100235244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B5880);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping Receive Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 104);

  objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper), "stop");
  v7 = (_QWORD *)swift_task_alloc(dword_1007B59A4);
  *(_QWORD *)(v0 + 128) = v7;
  *v7 = v0;
  v7[1] = sub_10023535C;
  return sub_100235714();
}

uint64_t sub_10023535C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  return swift_task_switch(sub_1002353A8, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_1002353A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 104);
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  *(_QWORD *)(v0 + 136) = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  v3 = v1 + v2;
  swift_beginAccess(v1 + v2, v0 + 56, 0, 0);
  if (*(_QWORD *)(v3 + 24))
  {
    if (qword_1007B3D98 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    return swift_task_switch(sub_100235530, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 104);
    v6 = v5 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
    v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
    *(_QWORD *)(v0 + 144) = v7;
    if (v7)
    {
      v8 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType(v7);
      v10 = *(int **)(v8 + 24);
      v11 = v10[1];
      v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
      swift_unknownObjectRetain(v7);
      v12 = (_QWORD *)swift_task_alloc(v11);
      *(_QWORD *)(v0 + 152) = v12;
      *v12 = v0;
      v12[1] = sub_10023563C;
      return v14(ObjectType, v8);
    }
    else
    {
      v13 = v5 + *(_QWORD *)(v0 + 136);
      *(_OWORD *)(v0 + 32) = 0u;
      *(_QWORD *)(v0 + 48) = 0;
      *(_OWORD *)(v0 + 16) = 0u;
      swift_beginAccess(v13, v0 + 80, 33, 0);
      sub_10023A084(v0 + 16, v13, &qword_1007B59A8);
      swift_endAccess(v0 + 80);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100235530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 104);
  v2 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
  *(_QWORD *)(v0 + 144) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType(v3);
    v6 = *(int **)(v4 + 24);
    v7 = v6[1];
    v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    swift_unknownObjectRetain(v3);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 152) = v8;
    *v8 = v0;
    v8[1] = sub_10023563C;
    return v11(ObjectType, v4);
  }
  else
  {
    v10 = v1 + *(_QWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 32) = 0u;
    *(_QWORD *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    swift_beginAccess(v10, v0 + 80, 33, 0);
    sub_10023A084(v0 + 16, v10, &qword_1007B59A8);
    swift_endAccess(v0 + 80);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10023563C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_100235690, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_100235690()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104) + *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_beginAccess(v1, v0 + 80, 33, 0);
  sub_10023A084(v0 + 16, v1, &qword_1007B59A8);
  swift_endAccess(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100235714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 64) = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  return swift_task_switch(sub_100235788, v4, v5);
}

uint64_t sub_100235788()
{
  uint64_t v0;
  id *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v1 = (id *)(*(_QWORD *)(v0 + 64)
            + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(v1, v0 + 16, 1, 0);
  if (*v1)
  {
    v2 = *v1;
    if (objc_msgSend(v2, "streamStatus") != (id)6 && objc_msgSend(v2, "streamStatus") != (id)7)
    {
      if (qword_1007B3D08 != -1)
        swift_once(&qword_1007B3D08, sub_100233028);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_100221DF8(v3, (uint64_t)qword_1007B5880);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Closing output stream", v7, 2u);
        swift_slowDealloc(v7, -1, -1);
      }

      objc_msgSend(v2, "close");
      v2 = *v1;
      *v1 = 0;
    }

  }
  v8 = (id *)(*(_QWORD *)(v0 + 64)
            + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess(v8, v0 + 40, 1, 0);
  if (*v8)
  {
    v9 = *v8;
    if (objc_msgSend(v9, "streamStatus") != (id)6 && objc_msgSend(v9, "streamStatus") != (id)7)
    {
      if (qword_1007B3D08 != -1)
        swift_once(&qword_1007B3D08, sub_100233028);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_100221DF8(v10, (uint64_t)qword_1007B5880);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Closing input stream", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

      objc_msgSend(v9, "close");
      v9 = *v8;
      *v8 = 0;
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100235A18(uint64_t a1, uint64_t a2)
{
  id *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char v16;
  _BYTE v17[24];

  v2 = (id *)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream, v17, 0, 0);
  if (!*v2)
    goto LABEL_4;
  v3 = *v2;
  if (objc_msgSend(v3, "streamStatus") == (id)6)
  {

LABEL_4:
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100221DF8(v4, (uint64_t)qword_1007B5880);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Output stream closed", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v16 = 0;
    v9 = sub_100008384(&qword_1007B5B00);
    CheckedContinuation.resume(returning:)(&v16, v9);
    return;
  }
  if ((objc_msgSend(v3, "hasSpaceAvailable") & 1) == 0)
  {
    do
    {
      if (objc_msgSend(v3, "streamStatus") == (id)6)
        break;
      if (qword_1007B3D08 != -1)
        swift_once(&qword_1007B3D08, sub_100233028);
      v11 = type metadata accessor for Logger(0);
      v12 = sub_100221DF8(v11, (uint64_t)qword_1007B5880);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Buffer has no space, waiting for zipper to take bytes", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
      }

    }
    while (!objc_msgSend(v3, "hasSpaceAvailable"));
  }
  v16 = 1;
  v10 = sub_100008384(&qword_1007B5B00);
  CheckedContinuation.resume(returning:)(&v16, v10);

}

uint64_t sub_100235C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  ObjectType = swift_getObjectType(v2);
  v5 = type metadata accessor for POSIXError(0);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v3[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v3[14] = v7;
  v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
  v3[15] = v8;
  v3[16] = v9;
  return swift_task_switch(sub_100235D34, v8, v9);
}

uint64_t sub_100235D34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 80)
                 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 136) = *v1;
  if (v2)
    __asm { BR              X11 }
  v3 = type metadata accessor for SFAirDropReceive.Failure(0);
  v4 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v3, v4, 0, 0);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, enum case for SFAirDropReceive.Failure.streamError(_:), v3);
  swift_willThrow(v6);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236130()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (v3 == *(unsigned __int8 *)(v2 + 78))
  {
    v8 = *(_QWORD *)(v2 + 112);
    v9 = *(_QWORD *)(v2 + 80);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v2 + 176) = v10;
    *v10 = v2;
    v10[1] = sub_100236574;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 196, v9, v8, 0xD000000000000014, 0x8000000100612650, sub_10023B434, *(_QWORD *)(v2 + 80), &type metadata for Bool);
  }
  if (!v5)
  {
    v7 = *(unsigned __int8 *)(v2 + 78);
    goto LABEL_9;
  }
  if (v5 != 1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    v13 = *(_QWORD *)(*(_QWORD *)v4 + 24);
    v7 = v13 - v12;
    if (!__OFSUB__(v13, v12))
      goto LABEL_9;
LABEL_16:
    __break(1u);
    JUMPOUT(0x100236444);
  }
  v6 = v4[1];
  if (__OFSUB__(v6, *v4))
  {
    __break(1u);
    goto LABEL_16;
  }
  v7 = v6 - *v4;
LABEL_9:
  if (v7 < v3)
  {
    __break(1u);
    JUMPOUT(0x10023642CLL);
  }
  v14 = Data.subdata(in:)(v3, v7, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
  v16 = v15;
  *(_QWORD *)(v2 + 144) = v14;
  *(_QWORD *)(v2 + 152) = v15;
  sub_10022E4A8(v14, v15);
  v17 = sub_10022E4A8(v14, v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v25 = v1;
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v20 = 136315138;
    sub_10022E4A8(v14, v16);
    v21 = Data.description.getter(v14, v16);
    v23 = v22;
    sub_100225AB4(v14, v16);
    *v0 = sub_100228BD8(v21, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v25, v20 + 4);
    swift_bridgeObjectRelease(v23);
    sub_100225AB4(v14, v16);
    sub_100225AB4(v14, v16);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Wrote remaining %s to output stream", v20, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_100225AB4(v14, v16);
    sub_100225AB4(v14, v16);
  }

  v24 = (_QWORD *)swift_task_alloc(dword_1007B5AE4);
  *(_QWORD *)(v2 + 160) = v24;
  *v24 = v2;
  v24[1] = sub_100236474;
  return sub_100235C90(v14, v16);
}

uint64_t sub_100236474()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100236650;
  else
    v4 = sub_1002364D4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_1002364D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_100225AB4(v0[18], v0[19]);
  v1 = v0[14];
  v2 = v0[10];
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[22] = v3;
  *v3 = v0;
  v3[1] = sub_100236574;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)((char *)v0 + 196, v2, v1, 0xD000000000000014, 0x8000000100612650, sub_10023B434, v0[10], &type metadata for Bool);
}

uint64_t sub_100236574()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100236614;
  else
    v4 = sub_1002365D4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_1002365D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236614()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236650()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  sub_100225AB4(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236694()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[8] = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  v1[9] = v4;
  v1[10] = v5;
  return swift_task_switch(sub_100236708, v4, v5);
}

uint64_t sub_100236708()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void **v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;

  v1 = (void **)(*(_QWORD *)(v0 + 64)
               + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(v1, v0 + 16, 1, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 88) = *v1;
  if (!v2)
    goto LABEL_6;
  v3 = (void **)(*(_QWORD *)(v0 + 64)
               + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess(v3, v0 + 40, 0, 0);
  v4 = *v3;
  *(_QWORD *)(v0 + 96) = v4;
  if (!v4)
    goto LABEL_6;
  v5 = v2;
  v6 = v4;
  if (objc_msgSend(v5, "streamStatus") == (id)6 || objc_msgSend(v5, "streamStatus") == (id)7)
  {

LABEL_6:
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100221DF8(v7, (uint64_t)qword_1007B5880);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Streams not ready for close", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
LABEL_10:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((objc_msgSend(v6, "hasBytesAvailable") & 1) == 0)
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100221DF8(v19, (uint64_t)qword_1007B5880);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Closing output stream", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    objc_msgSend(v5, "close");
    v9 = *v1;
    *v1 = 0;
    goto LABEL_10;
  }
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100221DF8(v13, (uint64_t)qword_1007B5880);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Still bytes present on input stream", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = (_QWORD *)swift_task_alloc(dword_1007B5AFC);
  *(_QWORD *)(v0 + 104) = v18;
  *v18 = v0;
  v18[1] = sub_100236A54;
  return sub_100236694();
}

uint64_t sub_100236A54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100236AEC;
  else
    v4 = sub_100236AB4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_100236AB4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 88);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236AEC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 88);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100236B24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[28] = a1;
  v2[29] = v1;
  ObjectType = swift_getObjectType(v1);
  v4 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v2[30] = v4;
  v5 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v4);
  v2[31] = v5;
  v2[32] = v6;
  return swift_task_switch(sub_100236B9C, v5, v6);
}

uint64_t sub_100236B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  NSNumber v7;
  const char *v8;
  Class v9;
  __n128 v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;

  v1 = sub_100008384(&qword_1007B59D8);
  inited = swift_initStackObject(v1, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1005CF140;
  *(_QWORD *)(inited + 32) = String._bridgeToObjectiveC()();
  v3 = sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
  v4 = NSString.init(stringLiteral:)("/", 1, 2);
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 40) = v4;
  *(_QWORD *)(inited + 72) = String._bridgeToObjectiveC()();
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v6 = sub_100221EDC(0, (unint64_t *)&qword_1007BD000, NSNumber_ptr);
  *(_QWORD *)(inited + 104) = v6;
  *(_QWORD *)(inited + 80) = isa;
  *(_QWORD *)(inited + 112) = String._bridgeToObjectiveC()();
  v7.super.super.isa = Int32._bridgeToObjectiveC()().super.super.isa;
  *(_QWORD *)(inited + 144) = v6;
  *(NSNumber *)(inited + 120) = v7;
  v8 = (const char *)sub_10021E878(inited);
  *(_QWORD *)(v0 + 200) = v8;
  sub_10023A6F8();
  swift_bridgeObjectRetain(v8);
  v9 = Dictionary._bridgeToObjectiveC()().super.isa;
  v10 = swift_bridgeObjectRelease(v8);
  v11 = (void *)CacheDeleteCopyPurgeableSpaceWithInfo(v9, v10);

  v43 = 0;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v11, &v43, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v12 = v43;
  if (v43)
  {
    if (!*(_QWORD *)(v43 + 16))
      goto LABEL_7;
  }
  else
  {
    v12 = sub_10021E744((uint64_t)_swiftEmptyArrayStorage);
    if (!*(_QWORD *)(v12 + 16))
      goto LABEL_7;
  }
  v13 = sub_10045C200(0xD000000000000013, 0x8000000100612490);
  if ((v14 & 1) != 0)
  {
    sub_10022E77C(*(_QWORD *)(v12 + 56) + 32 * v13, v0 + 168);
    goto LABEL_8;
  }
LABEL_7:
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
LABEL_8:
  swift_bridgeObjectRelease((const char *)v12);
  if (!*(_QWORD *)(v0 + 192))
  {
    sub_10000D0F0(v0 + 168, (uint64_t *)&unk_1007B6890);
    goto LABEL_18;
  }
  if ((swift_dynamicCast(v0 + 208, v0 + 168, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_18:
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100221DF8(v28, (uint64_t)qword_1007B5880);
    v24 = Logger.logObject.getter(v29);
    v25 = static os_log_type_t.error.getter(v24);
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_23;
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    v27 = "Insufficient storage, nothing to purge";
    goto LABEL_22;
  }
  v15 = *(_QWORD *)(v0 + 208);
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100221DF8(v16, (uint64_t)qword_1007B5880);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v20 = 134217984;
    *(_QWORD *)(v0 + 216) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v20 + 4);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Purgeable bytes %ld", v20, 0xCu);
    swift_slowDealloc(v20, -1, -1);
  }
  v21 = *(_QWORD *)(v0 + 224);

  v23 = Logger.logObject.getter(v22);
  v24 = v23;
  if (v15 < v21)
  {
    v25 = static os_log_type_t.error.getter(v23);
    if (!os_log_type_enabled(v24, v25))
    {
LABEL_23:

      v30 = type metadata accessor for SFAirDropReceive.Failure(0);
      v31 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      swift_allocError(v30, v31, 0, 0);
      v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, enum case for SFAirDropReceive.Failure.insufficientStorage(_:), v30);
      swift_willThrow(v33);
      v34 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 200));
      return (*(uint64_t (**)(__n128))(v0 + 8))(v34);
    }
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    v27 = "Insufficient storage, not enough purgeable bytes";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
    swift_slowDealloc(v26, -1, -1);
    goto LABEL_23;
  }
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v36, "Starting cache purge", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }
  v39 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 240);
  v40 = *(_QWORD *)(v0 + 224);

  v41 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 264) = v41;
  *(_QWORD *)(v41 + 16) = v0 + 200;
  *(_QWORD *)(v41 + 24) = v40;
  v42 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 272) = v42;
  *v42 = v0;
  v42[1] = sub_100237164;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v42, v39, v38, 0xD000000000000020, 0x80000001006124D0, sub_10023A750, v41, (char *)&type metadata for () + 8);
}

uint64_t sub_100237164()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[31];
    v5 = v2[32];
    v6 = sub_100237204;
  }
  else
  {
    swift_task_dealloc(v2[33]);
    v4 = v2[31];
    v5 = v2[32];
    v6 = sub_1002371D0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1002371D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100237204()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100237240(uint64_t a1, const char **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  Class isa;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v6 = sub_100008384((uint64_t *)&unk_1007B5A00);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
  sub_10023A6F8();
  swift_bridgeObjectRetain(v10);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v12 = swift_bridgeObjectRelease(v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, v6, v12);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_10071E040, v15 + 8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16 + v14, v9, v6);
  *(_QWORD *)(v16 + v15) = a3;
  aBlock[4] = sub_10023A7C8;
  v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002377A0;
  aBlock[3] = &unk_10071E058;
  v17 = _Block_copy(aBlock);
  swift_release(v19);
  CacheDeletePurgeAsync(isa, v17);
  _Block_release(v17);

}

uint64_t sub_1002373DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint32_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  *(_QWORD *)&v34 = 0;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v34, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v4 = v34;
  if ((_QWORD)v34)
  {
    if (!*(_QWORD *)(v34 + 16))
      goto LABEL_13;
  }
  else
  {
    v4 = sub_10021E744((uint64_t)_swiftEmptyArrayStorage);
    if (!*(_QWORD *)(v4 + 16))
    {
LABEL_13:
      v34 = 0u;
      v35 = 0u;
      swift_bridgeObjectRelease((const char *)v4);
      goto LABEL_14;
    }
  }
  v5 = sub_10045C200(0xD000000000000013, 0x8000000100612490);
  if ((v6 & 1) == 0)
    goto LABEL_13;
  sub_10022E77C(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v34);
  swift_bridgeObjectRelease((const char *)v4);
  if (!*((_QWORD *)&v35 + 1))
  {
LABEL_14:
    sub_10000D0F0((uint64_t)&v34, (uint64_t *)&unk_1007B6890);
    goto LABEL_15;
  }
  if ((swift_dynamicCast(&v33, &v34, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_15:
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100221DF8(v18, (uint64_t)qword_1007B5880);
    v10 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.error.getter(v10);
    if (!os_log_type_enabled(v10, v20))
      goto LABEL_20;
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    v13 = "Insufficient storage, did not purge";
    v14 = v10;
    v15 = v20;
    v16 = v12;
    v17 = 2;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, v16, v17);
    swift_slowDealloc(v12, -1, -1);
LABEL_20:

    v21 = type metadata accessor for SFAirDropReceive.Failure(0);
    v22 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    v23 = swift_allocError(v21, v22, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for SFAirDropReceive.Failure.insufficientStorage(_:), v21);
    *(_QWORD *)&v34 = v23;
    v25 = sub_100008384((uint64_t *)&unk_1007B5A00);
    return CheckedContinuation.resume(throwing:)(&v34, v25);
  }
  v7 = v33;
  if (v33 < a3)
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100221DF8(v8, (uint64_t)qword_1007B5880);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (!os_log_type_enabled(v10, v11))
      goto LABEL_20;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    *(_QWORD *)&v34 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 8, v12 + 4);
    v13 = "Insufficient storage, not enough purgeable space %ld";
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = 12;
    goto LABEL_19;
  }
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100221DF8(v27, (uint64_t)qword_1007B5880);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Purge cache successful, sufficient storage", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = sub_100008384((uint64_t *)&unk_1007B5A00);
  return CheckedContinuation.resume(returning:)(v32, v32);
}

void sub_1002377A0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_1002377F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  v6 = sub_100008384((uint64_t *)&unk_1007B5200);
  v7 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  v5[8] = v7;
  v5[9] = v8;
  v9 = type metadata accessor for SDAirDropReceiveCompressionAdapter(0);
  v10 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_100237898, v11, v12);
}

uint64_t sub_100237898()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  v1 = v0[6];
  v2 = (uint64_t *)(v1 + v0[9]);
  v3 = *v2;
  v0[10] = *v2;
  if (!v3)
    return swift_task_switch(sub_10023B43C, 0, 0);
  v4 = v0[8];
  v5 = v2[1];
  ObjectType = swift_getObjectType(v3);
  v7 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination;
  swift_unknownObjectRetain(v3);
  swift_beginAccess(v7, v0 + 2, 0, 0);
  sub_100221F28(v7, v4, (uint64_t *)&unk_1007B5200);
  v8 = *(int **)(v5 + 8);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[11] = v9;
  *v9 = v0;
  v9[1] = sub_1002379A8;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v11)(v0[8], v0[7], ObjectType, v5);
}

uint64_t sub_1002379A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_unknownObjectRelease(v1);
  sub_10000D0F0(v2, (uint64_t *)&unk_1007B5200);
  return swift_task_switch(sub_100237A18, 0, 0);
}

uint64_t sub_100237A18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 80) == 0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100237A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  ObjectType = swift_getObjectType(v3);
  v6 = sub_100008384(&qword_1007B5B10);
  v4[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[7] = v7;
  v4[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384((uint64_t *)&unk_1007B5A10);
  v4[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[10] = v9;
  v4[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v4[12] = v11;
  v4[13] = v12;
  return swift_task_switch(sub_100237B2C, v11, v12);
}

uint64_t sub_100237B2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation, v3);
  SFProgressContinuation.task.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[14] = v4;
  *v4 = v0;
  v4[1] = sub_100237BDC;
  return SFProgressTask.finalValue.getter(v0 + 28, v0[6]);
}

uint64_t sub_100237BDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 56);
  v4 = *(_QWORD *)(*v1 + 64);
  v6 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1002386C0;
  else
    v7 = sub_100237C64;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_100237C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int *v31;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  *(_QWORD *)(v2 + 128) = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + v4, a2);
  *(_QWORD *)(v2 + 136) = Strong;
  if (Strong)
  {
    v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1007C4AA0 + dword_1007C4AA0);
    v6 = (_QWORD *)swift_task_alloc(unk_1007C4AA4);
    *(_QWORD *)(v2 + 144) = v6;
    *v6 = v2;
    v6[1] = sub_100237F68;
    return v30(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 40);
    v9 = v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
    v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
    *(_QWORD *)(v2 + 160) = v10;
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 8);
      ObjectType = swift_getObjectType(v10);
      v13 = *(_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes);
      v14 = *(int **)(v11 + 16);
      v15 = v14[1];
      v31 = (int *)((char *)v14 + *v14);
      swift_unknownObjectRetain(v10);
      v16 = (_QWORD *)swift_task_alloc(v15);
      *(_QWORD *)(v2 + 168) = v16;
      *v16 = v2;
      v16[1] = sub_1002382A4;
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v31)(*(_QWORD *)(v2 + 24), v13, ObjectType, v11);
    }
    else if (*(_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != *(_QWORD *)(v2 + 24)
           || *(_QWORD *)(v2 + 16) < 1)
    {
      v18 = *(_QWORD *)(v2 + 64);
      swift_task_dealloc(*(_QWORD *)(v2 + 88));
      swift_task_dealloc(v18);
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
    else
    {
      if (qword_1007B3D08 != -1)
        swift_once(&qword_1007B3D08, sub_100233028);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100221DF8(v19, (uint64_t)qword_1007B5880);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Received all expected bytes, closing streams after ASK response", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }
      v24 = *(_QWORD *)(v2 + 128);
      v25 = *(_QWORD *)(v2 + 40);

      v27 = swift_unknownObjectWeakLoadStrong(v25 + v24, v26);
      *(_QWORD *)(v2 + 176) = v27;
      if (v27)
      {
        if (qword_1007B3D98 != -1)
          swift_once(&qword_1007B3D98, sub_1002ACAEC);
        *(_QWORD *)(v2 + 184) = static AirDropActor.shared;
        v28 = (_QWORD *)swift_task_alloc(dword_1007C4A9C);
        *(_QWORD *)(v2 + 192) = v28;
        *v28 = v2;
        v28[1] = sub_1002384D4;
        return sub_100511A64(*(_QWORD *)(v2 + 40));
      }
      else
      {
        v29 = (_QWORD *)swift_task_alloc(dword_1007B5AFC);
        *(_QWORD *)(v2 + 208) = v29;
        *v29 = v2;
        v29[1] = sub_1002385D4;
        return sub_100236694();
      }
    }
  }
}

uint64_t sub_100237F68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 96);
    v5 = *(_QWORD *)(v2 + 104);
    v6 = sub_10023825C;
  }
  else
  {

    v4 = *(_QWORD *)(v2 + 96);
    v5 = *(_QWORD *)(v2 + 104);
    v6 = sub_100237FD4;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100237FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
  *(_QWORD *)(v0 + 160) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType(v3);
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes);
    v7 = *(int **)(v4 + 16);
    v8 = v7[1];
    v24 = (int *)((char *)v7 + *v7);
    swift_unknownObjectRetain(v3);
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 168) = v9;
    *v9 = v0;
    v9[1] = sub_1002382A4;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v24)(*(_QWORD *)(v0 + 24), v6, ObjectType, v4);
  }
  else if (*(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != *(_QWORD *)(v0 + 24)
         || *(_QWORD *)(v0 + 16) < 1)
  {
    v12 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100221DF8(v13, (uint64_t)qword_1007B5880);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received all expected bytes, closing streams after ASK response", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 40);

    Strong = swift_unknownObjectWeakLoadStrong(v19 + v18, v20);
    *(_QWORD *)(v0 + 176) = Strong;
    if (Strong)
    {
      if (qword_1007B3D98 != -1)
        swift_once(&qword_1007B3D98, sub_1002ACAEC);
      *(_QWORD *)(v0 + 184) = static AirDropActor.shared;
      v22 = (_QWORD *)swift_task_alloc(dword_1007C4A9C);
      *(_QWORD *)(v0 + 192) = v22;
      *v22 = v0;
      v22[1] = sub_1002384D4;
      return sub_100511A64(*(_QWORD *)(v0 + 40));
    }
    else
    {
      v23 = (_QWORD *)swift_task_alloc(dword_1007B5AFC);
      *(_QWORD *)(v0 + 208) = v23;
      *v23 = v0;
      v23[1] = sub_1002385D4;
      return sub_100236694();
    }
  }
}

uint64_t sub_10023825C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002382A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_1002382F8, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_1002382F8()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  _QWORD *v13;
  _QWORD *v14;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40)
                 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != *(_QWORD *)(v0 + 24)
    || *(_QWORD *)(v0 + 16) < 1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100221DF8(v4, (uint64_t)qword_1007B5880);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received all expected bytes, closing streams after ASK response", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 40);

    Strong = swift_unknownObjectWeakLoadStrong(v10 + v9, v11);
    *(_QWORD *)(v0 + 176) = Strong;
    if (Strong)
    {
      if (qword_1007B3D98 != -1)
        swift_once(&qword_1007B3D98, sub_1002ACAEC);
      *(_QWORD *)(v0 + 184) = static AirDropActor.shared;
      v13 = (_QWORD *)swift_task_alloc(dword_1007C4A9C);
      *(_QWORD *)(v0 + 192) = v13;
      *v13 = v0;
      v13[1] = sub_1002384D4;
      return sub_100511A64(*(_QWORD *)(v0 + 40));
    }
    else
    {
      v14 = (_QWORD *)swift_task_alloc(dword_1007B5AFC);
      *(_QWORD *)(v0 + 208) = v14;
      *v14 = v0;
      v14[1] = sub_1002385D4;
      return sub_100236694();
    }
  }
}

uint64_t sub_1002384D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_10023858C;
  }
  else
  {
    v4 = v2[23];
    v6 = sub_10023853C;
    v5 = 0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10023853C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1007B5AFC);
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = sub_1002385D4;
  return sub_100236694();
}

uint64_t sub_10023858C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002385D4()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 208);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[11];
    v6 = v2[8];
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc(dword_1007B59A4);
    v2[27] = v8;
    *v8 = v4;
    v8[1] = sub_100238664;
    return sub_100235714();
  }
}

uint64_t sub_100238664()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 216));
  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1002386C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100238700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  ObjectType = swift_getObjectType(v2);
  v5 = sub_100008384(&qword_1007B5B20);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v3[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v3[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[14] = v8;
  v3[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v9);
  v3[16] = v10;
  v3[17] = v11;
  return swift_task_switch(sub_1002387CC, v10, v11);
}

uint64_t sub_1002387CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t **v6;
  uint64_t **v8;

  v3 = v2[9];
  v4 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  v2[18] = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + v4, a2);
  v2[19] = Strong;
  if (Strong)
  {
    if (qword_1007B3D98 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v2[20] = static AirDropActor.shared;
    v6 = (uint64_t **)swift_task_alloc(dword_1007C4A9C);
    v2[21] = (uint64_t)v6;
    *v6 = v2;
    v6[1] = (uint64_t *)sub_1002388A8;
    return sub_100511A64(v2[9]);
  }
  else
  {
    v8 = (uint64_t **)swift_task_alloc(dword_1007B5AFC);
    v2[23] = (uint64_t)v8;
    *v8 = v2;
    v8[1] = (uint64_t *)sub_1002389A8;
    return sub_100236694();
  }
}

uint64_t sub_1002388A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[16];
    v5 = v2[17];
    v6 = sub_100238960;
  }
  else
  {
    v4 = v2[20];
    v6 = sub_100238910;
    v5 = 0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100238910()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1007B5AFC);
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = sub_1002389A8;
  return sub_100236694();
}

uint64_t sub_100238960()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002389A8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 184);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[15];
    v6 = v2[12];
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc(dword_1007B59A4);
    v2[24] = v8;
    *v8 = v4;
    v8[1] = sub_100238A38;
    return sub_100235714();
  }
}

uint64_t sub_100238A38()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));
  return swift_task_switch(sub_100238A84, *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
}

uint64_t sub_100238A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, _QWORD);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t Strong;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  _QWORD *v55;

  v2 = v0 + 56;
  v1 = *(_QWORD *)(v0 + 56);
  v3 = v0 + 16;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 112);
    v55 = _swiftEmptyArrayStorage;
    sub_100229810(0, v4, 0);
    v5 = _swiftEmptyArrayStorage;
    v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v8 = v1 + v7;
    v9 = *(_QWORD *)(v6 + 72);
    v10 = *(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 16);
    do
    {
      v10(*(_QWORD *)(v0 + 120), v8, *(_QWORD *)(v0 + 104));
      v55 = v5;
      v12 = v5[2];
      v11 = v5[3];
      if (v12 >= v11 >> 1)
      {
        sub_100229810(v11 > 1, v12 + 1, 1);
        v5 = v55;
      }
      v13 = *(_QWORD *)(v0 + 120);
      v14 = *(_QWORD *)(v0 + 104);
      v5[2] = v12 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))((char *)v5 + v7 + v12 * v9, v13, v14);
      v8 += v9;
      --v4;
    }
    while (v4);
    v3 = v0 + 16;
    v2 = v0 + 56;
  }
  *(_QWORD *)(v0 + 200) = v5;
  v15 = *(_QWORD *)(v0 + 72)
      + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  swift_beginAccess(v15, v3, 0, 0);
  if (*(_QWORD *)(v15 + 24))
  {
    if (qword_1007B3D98 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    return swift_task_switch(sub_10023902C, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  }
  v17 = (uint64_t *)(v2 - 8);
  v18 = *(_QWORD *)(v0 + 64);
  if (!v18)
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v28 = *(_QWORD *)(v0 + 200);
    v29 = type metadata accessor for Logger(0);
    sub_100221DF8(v29, (uint64_t)qword_1007B5880);
    v30 = swift_bridgeObjectRetain_n(v28, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 200);
    if (v33)
    {
      v53 = v2 - 16;
      v35 = *(_QWORD *)(v0 + 104);
      v51 = v17;
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (_QWORD *)swift_slowAlloc(32, -1);
      v55 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = swift_bridgeObjectRetain(v34);
      v39 = Array.description.getter(v38, v35);
      v41 = v40;
      swift_bridgeObjectRelease(v34);
      *(_QWORD *)(v0 + 40) = sub_100228BD8(v39, v41, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v51, v36 + 4);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease_n(v34, 2);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Decompression succeeded %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
    }

    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 144), v47);
    *(_QWORD *)(v0 + 240) = Strong;
    if (Strong)
    {
      v54 = (uint64_t (*)(uint64_t))((char *)&dword_1007C4AA8 + dword_1007C4AA8);
      v49 = (_QWORD *)swift_task_alloc(unk_1007C4AAC);
      *(_QWORD *)(v0 + 248) = v49;
      *v49 = v0;
      v49[1] = sub_10023967C;
      return v54(*(_QWORD *)(v0 + 200));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
    goto LABEL_30;
  }
  v19 = *(_QWORD *)(v0 + 200);
  swift_errorRetain(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(v19);
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v20 = type metadata accessor for Logger(0);
  sub_100221DF8(v20, (uint64_t)qword_1007B5880);
  swift_errorRetain(v18);
  v21 = swift_errorRetain(v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = v2;
    v25 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 138412290;
    swift_errorRetain(v18);
    v26 = _swift_stdlib_bridgeErrorToNSError(v18);
    *v17 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, v52, v24 + 4);
    *v25 = v26;
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Decompression failed %@", v24, 0xCu);
    v27 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v25, 1, v27);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }
  v42 = *(_QWORD *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 72);

  v45 = swift_unknownObjectWeakLoadStrong(v43 + v42, v44);
  *(_QWORD *)(v0 + 208) = v45;
  if (!v45)
  {
    swift_errorRelease(v18);
LABEL_30:
    v50 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v46 = static AirDropActor.shared;
  *(_QWORD *)(v0 + 216) = static AirDropActor.shared;
  return swift_task_switch(sub_10023949C, v46, 0);
}

uint64_t sub_10023902C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t Strong;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
  {
    if (qword_1007B3D08 != -1)
      swift_once(&qword_1007B3D08, sub_100233028);
    v11 = *(_QWORD *)(v0 + 200);
    v12 = type metadata accessor for Logger(0);
    sub_100221DF8(v12, (uint64_t)qword_1007B5880);
    v13 = swift_bridgeObjectRetain_n(v11, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 200);
    if (v16)
    {
      v18 = *(_QWORD *)(v0 + 104);
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v36 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = swift_bridgeObjectRetain(v17);
      v22 = Array.description.getter(v21, v18);
      v24 = v23;
      swift_bridgeObjectRelease(v17);
      *(_QWORD *)(v0 + 40) = sub_100228BD8(v22, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 4);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease_n(v17, 2);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Decompression succeeded %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
    }

    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 144), v31);
    *(_QWORD *)(v0 + 240) = Strong;
    if (Strong)
    {
      v35 = (uint64_t (*)(uint64_t))((char *)&dword_1007C4AA8 + dword_1007C4AA8);
      v33 = (_QWORD *)swift_task_alloc(unk_1007C4AAC);
      *(_QWORD *)(v0 + 248) = v33;
      *v33 = v0;
      v33[1] = sub_10023967C;
      return v35(*(_QWORD *)(v0 + 200));
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
    goto LABEL_20;
  }
  v2 = *(_QWORD *)(v0 + 200);
  swift_errorRetain(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(v2);
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007B5880);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 4);
    *v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Decompression failed %@", v7, 0xCu);
    v10 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v25 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 72);

  v28 = swift_unknownObjectWeakLoadStrong(v26 + v25, v27);
  *(_QWORD *)(v0 + 208) = v28;
  if (!v28)
  {
    swift_errorRelease(v1);
LABEL_20:
    v34 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v29 = static AirDropActor.shared;
  *(_QWORD *)(v0 + 216) = static AirDropActor.shared;
  return swift_task_switch(sub_10023949C, v29, 0);
}

uint64_t sub_10023949C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t **v10;

  v1 = v0[26];
  v3 = v0[11];
  v2 = v0[12];
  v4 = v0[10];
  v5 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation, v4);
  SFProgressContinuation.fail(with:)(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate, v6);
  v0[28] = Strong;
  v8 = (void *)v0[26];
  if (Strong)
  {
    v9 = (uint64_t)v8 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    v10 = (uint64_t **)swift_task_alloc(dword_1007B9B9C);
    v0[29] = (uint64_t)v10;
    *v10 = v0;
    v10[1] = (uint64_t *)sub_10023959C;
    return sub_1002DE698(v9, v0[8]);
  }
  else
  {

    return swift_task_switch(sub_100239634, v0[16], v0[17]);
  }
}

uint64_t sub_10023959C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 216);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1002395FC, v2, 0);
}

uint64_t sub_1002395FC()
{
  uint64_t v0;

  return swift_task_switch(sub_100239634, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t sub_100239634()
{
  uint64_t v0;
  uint64_t v1;

  swift_errorRelease(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023967C()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *v0;
  v2 = *(void **)(*v0 + 240);
  v3 = *(_QWORD *)(*v0 + 200);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 248));

  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + 96);
  swift_task_dealloc(*(_QWORD *)(v1 + 120));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t URL.quarantine()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100239724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[2] = a4;
  ObjectType = swift_getObjectType(a4);
  v6 = sub_100008384((uint64_t *)&unk_1007B5A10);
  v4[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[4] = v7;
  v4[5] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100220D78(&qword_1007B5998, type metadata accessor for SDAirDropReceiveCompressionAdapter, (uint64_t)&unk_1005CF218);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v8);
  v4[6] = v9;
  v4[7] = v10;
  return swift_task_switch(sub_1002397C8, v9, v10);
}

uint64_t sub_1002397C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation, v3);
  *(_BYTE *)(v0 + 96) = 1;
  SFProgressContinuation.finish(with:)(v0 + 96, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate, v5);
  *(_QWORD *)(v0 + 64) = Strong;
  if (Strong)
  {
    if (qword_1007B3D98 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    *(_QWORD *)(v0 + 72) = static AirDropActor.shared;
    v7 = (_QWORD *)swift_task_alloc(dword_1007C4A94);
    *(_QWORD *)(v0 + 80) = v7;
    *v7 = v0;
    v7[1] = sub_1002398E8;
    return sub_10051030C(*(_QWORD *)(v0 + 16));
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002398E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10023998C;
  }
  else
  {
    v4 = v2[9];
    v6 = sub_100239950;
    v5 = 0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100239950()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023998C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002399CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(dword_1007B5B0C);
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = sub_10000D12C;
  return sub_100237A5C(a5, a6, a7);
}

uint64_t sub_100239A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100239A50, 0, 0);
}

uint64_t sub_100239A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = type metadata accessor for SFAirDropReceive.Failure(0);
  v2 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  v3 = swift_allocError(v1, v2, 0, 0);
  *(_QWORD *)(v0 + 24) = v3;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v4, enum case for SFAirDropReceive.Failure.incompleteTransfer(_:), v1);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B5B1C);
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = sub_100239B0C;
  return sub_100238700((uint64_t)_swiftEmptyArrayStorage, v3);
}

uint64_t sub_100239B0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100239B80, 0, 0);
  swift_errorRelease(*(_QWORD *)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100239B80()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100239BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1007B5B1C);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10000D098;
  return sub_100238700(a5, 0);
}

uint64_t sub_100239C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1007B5B1C);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10000D098;
  return sub_100238700((uint64_t)_swiftEmptyArrayStorage, a5);
}

uint64_t sub_100239D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10023A8C8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_askRequest);
  v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  sub_10000D0F0(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider, &qword_1007B59A8);
  sub_10000D0F0(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination, (uint64_t *)&unk_1007B5200);
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter));

  sub_100232F78(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate);
  sub_100232F78(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveServiceDelegate);

  v3 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation;
  v4 = sub_100008384((uint64_t *)&unk_1007B5A10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_100239E28()
{
  _QWORD *v0;

  sub_100239D08();
  return swift_deallocClassInstance(v0, *(unsigned int *)((swift_isaMask & *v0) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v0) + 0x34));
}

uint64_t sub_100239E5C()
{
  return type metadata accessor for SDAirDropReceiveCompressionAdapter(0);
}

uint64_t type metadata accessor for SDAirDropReceiveCompressionAdapter(uint64_t a1)
{
  uint64_t result;

  result = qword_1007B5970;
  if (!qword_1007B5970)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropReceiveCompressionAdapter);
  return result;
}

void sub_100239EA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[15];

  v2 = _s10AskRequestVMa(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v10[3] = "(";
      sub_100239FA8(319);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v10[5] = &unk_1005CF1D0;
        v10[6] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[7] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[8] = &unk_1005CF1E8;
        v10[9] = &unk_1005CF1E8;
        v10[10] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[11] = &unk_1005CF200;
        v10[12] = &unk_1005CF200;
        v10[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
        sub_100239FFC();
        if (v9 <= 0x3F)
        {
          v10[14] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 15, v10, a1 + 80);
        }
      }
    }
  }
}

void sub_100239FA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1007B5980)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1007B5980);
  }
}

void sub_100239FFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1007B5988)
  {
    v0 = type metadata accessor for SFProgressContinuation(0, (char *)&type metadata for () + 8, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, &qword_1007B5988);
  }
}

uint64_t sub_10023A05C()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t sub_10023A084(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008384(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_10023A0C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B5AF0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100221F28(v7, (uint64_t)&v16, &qword_1007B4B10);
    v8 = v16;
    v9 = v17;
    result = sub_10023A1FC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10022138C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10023A1FC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_10023A260(a1, a2, v4);
}

unint64_t sub_10023A260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_10023A3A4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_10023A420()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_100008384(&qword_1007B52C0);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10022E4A8(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_100225AB4(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x10023A4F4);
    }
  }
  return v4;
}

const __CFString *sub_10023A50C(uint64_t a1, const char *a2)
{
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  const __CFString *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;

  v4 = String._bridgeToObjectiveC()();
  if (CFSTR("application/zip"))
  {
    type metadata accessor for CFString(0);
    v6 = v5;
    v7 = sub_100220D78(&qword_1007B5820, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA64);
    v8 = CFSTR("application/zip");
    LOBYTE(v6) = static _CFObject.== infix(_:_:)(v8, v4, v6, v7);

    if ((v6 & 1) != 0)
    {
      result = CFSTR("pkzip");
      if (CFSTR("pkzip"))
      {
        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("pkzip"));
LABEL_14:

        return (const __CFString *)a1;
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  if (CFSTR("application/x-cpio"))
  {
    type metadata accessor for CFString(0);
    v11 = v10;
    v12 = sub_100220D78(&qword_1007B5820, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA64);
    v13 = v4;
    v14 = CFSTR("application/x-cpio");
    LOBYTE(v11) = static _CFObject.== infix(_:_:)(v14, v13, v11, v12);

    if ((v11 & 1) != 0)
    {
      result = CFSTR("gzip");
      if (CFSTR("gzip"))
        goto LABEL_12;
      __break(1u);
    }
  }
  if (!CFSTR("application/x-dvzip"))
    goto LABEL_13;
  type metadata accessor for CFString(0);
  v16 = v15;
  v17 = sub_100220D78(&qword_1007B5820, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA64);
  v13 = v4;
  v18 = CFSTR("application/x-dvzip");
  LOBYTE(v16) = static _CFObject.== infix(_:_:)(v18, v13, v16, v17);

  if ((v16 & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRetain(a2);
    goto LABEL_14;
  }
  result = CFSTR("dvzip");
  if (CFSTR("dvzip"))
  {
LABEL_12:
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (const __CFString *)a1;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t sub_10023A6F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B59F0;
  if (!qword_1007B59F0)
  {
    v1 = sub_100221EDC(255, (unint64_t *)&unk_1007B59E0, NSString_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1007B59F0);
  }
  return result;
}

void sub_10023A750(uint64_t a1)
{
  uint64_t v1;

  sub_100237240(a1, *(const char ***)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10023A758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100008384((uint64_t *)&unk_1007B5A00);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10023A7C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B5A00) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1002373DC(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10023A81C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10023A82C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10023A834(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10023A858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10AskRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10023A89C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10023A8C0(uint64_t a1)
{
  uint64_t v1;

  return sub_100233930(a1, v1);
}

uint64_t sub_10023A8C8(uint64_t a1)
{
  uint64_t v2;

  v2 = _s10AskRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10023A904(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_10023A958(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[9];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10023A9AC()
{
  return sub_10023B270((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10023A9B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1007B5A44);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D12C;
  return sub_1002377F0(a1, v4, v5, v7, v6);
}

void sub_10023AA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  id v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62[5];
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  v6 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D08 != -1)
    swift_once(&qword_1007B3D08, sub_100233028);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100221DF8(v9, (uint64_t)qword_1007B5880);
  v11 = swift_unknownObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v60 = v10;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v61 = v8;
    v62[0] = v15;
    v16 = v15;
    *(_DWORD *)v14 = 136315138;
    v63 = a2;
    swift_unknownObjectRetain(a2);
    v17 = String.init<A>(describing:)(&v63, (char *)&type metadata for Swift.AnyObject + 8);
    v19 = v18;
    v63 = sub_100228BD8(v17, v18, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v14 + 4);
    swift_bridgeObjectRelease(v19);
    swift_unknownObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Zipper Update: %s", v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v20 = v16;
    v8 = v61;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(a2, 2);
  }

  switch(a1)
  {
    case 5:
      v21 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
      v22 = (_QWORD *)swift_allocObject(&unk_10071E1A8, 40, 7);
      v22[2] = 0;
      v22[3] = 0;
      v22[4] = v3;
      swift_retain(v3);
      v23 = &unk_1007B5AD8;
      goto LABEL_31;
    case 7:
      v62[0] = a2;
      swift_unknownObjectRetain(a2);
      v24 = sub_100008384((uint64_t *)&unk_1007B5AA0);
      v25 = swift_dynamicCast(&v63, v62, (char *)&type metadata for Swift.AnyObject + 8, v24, 6);
      if ((v25 & 1) == 0)
        goto LABEL_24;
      v26 = v63;
      v63 = kSFOperationFilesCopiedKey;
      v27 = kSFOperationFilesCopiedKey;
      v28 = sub_100008384(&qword_1007B5510);
      v29 = sub_10022E644();
      AnyHashable.init<A>(_:)(v62, &v63, v28, v29);
      if (!*(_QWORD *)(v26 + 16)
        || (v30 = sub_10045C1D0((uint64_t)v62), (v31 & 1) == 0)
        || (v32 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v30),
            sub_10022E6C0((uint64_t)v62),
            v63 = kSFOperationBytesCopiedKey,
            v33 = kSFOperationBytesCopiedKey,
            AnyHashable.init<A>(_:)(v62, &v63, v28, v29),
            !*(_QWORD *)(v26 + 16))
        || (v34 = sub_10045C1D0((uint64_t)v62), (v35 & 1) == 0))
      {
        sub_10022E6C0((uint64_t)v62);
        v25 = swift_bridgeObjectRelease(v26);
LABEL_24:
        v52 = Logger.logObject.getter(v25);
        v53 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v53))
        {
          v54 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v54 = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unknown progress info", v54, 2u);
          swift_slowDealloc(v54, -1, -1);
        }

        return;
      }
      v36 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v34);
      sub_10022E6C0((uint64_t)v62);
      v63 = kSFOperationTimeRemainingKey;
      v37 = kSFOperationTimeRemainingKey;
      AnyHashable.init<A>(_:)(v62, &v63, v28, v29);
      if (!*(_QWORD *)(v26 + 16) || (v38 = sub_10045C1D0((uint64_t)v62), (v39 & 1) == 0))
      {
        swift_bridgeObjectRelease(v26);
        v25 = sub_10022E6C0((uint64_t)v62);
        goto LABEL_24;
      }
      v40 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v38);
      swift_bridgeObjectRelease(v26);
      sub_10022E6C0((uint64_t)v62);
      v41 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v8, 1, 1, v41);
      v22 = (_QWORD *)swift_allocObject(&unk_10071E180, 64, 7);
      v22[2] = 0;
      v22[3] = 0;
      v22[4] = v3;
      v22[5] = v32;
      v22[6] = v36;
      v22[7] = v40;
      swift_retain(v3);
      v23 = &unk_1007B5AC8;
LABEL_31:
      v59 = sub_100252AF4((uint64_t)v8, (uint64_t)v23, (uint64_t)v22);
      swift_release(v59);
      return;
    case 9:
      v62[0] = a2;
      swift_unknownObjectRetain(a2);
      v42 = sub_100008384((uint64_t *)&unk_1007B6820);
      v43 = swift_dynamicCast(&v63, v62, (char *)&type metadata for Swift.AnyObject + 8, v42, 6);
      if ((v43 & 1) == 0)
        goto LABEL_28;
      v44 = v63;
      if (*(_QWORD *)(v63 + 16))
      {
        v45 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v8, 1, 1, v45);
        v22 = (_QWORD *)swift_allocObject(&unk_10071E158, 48, 7);
        v22[2] = 0;
        v22[3] = 0;
        v22[4] = v3;
        v22[5] = v44;
        swift_retain(v3);
        v23 = &unk_1007B5A98;
      }
      else
      {
        v43 = swift_bridgeObjectRelease(v63);
LABEL_28:
        v55 = Logger.logObject.getter(v43);
        v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid completed URLs", v57, 2u);
          swift_slowDealloc(v57, -1, -1);
        }

        v58 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v8, 1, 1, v58);
        v22 = (_QWORD *)swift_allocObject(&unk_10071E130, 40, 7);
        v22[2] = 0;
        v22[3] = 0;
        v22[4] = v3;
        swift_retain(v3);
        v23 = &unk_1007B5A88;
      }
      goto LABEL_31;
    case 10:
      v62[0] = a2;
      swift_unknownObjectRetain(a2);
      v46 = sub_100008384(&qword_1007B5A60);
      if (swift_dynamicCast(&v63, v62, (char *)&type metadata for Swift.AnyObject + 8, v46, 6))
      {
        v47 = v63;
      }
      else
      {
        v48 = type metadata accessor for SFAirDropReceive.Failure(0);
        v49 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        v47 = swift_allocError(v48, v49, 0, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, enum case for SFAirDropReceive.Failure.incompleteTransfer(_:), v48);
      }
      v51 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v8, 1, 1, v51);
      v22 = (_QWORD *)swift_allocObject(&unk_10071E108, 48, 7);
      v22[2] = 0;
      v22[3] = 0;
      v22[4] = v3;
      v22[5] = v47;
      swift_retain(v3);
      v23 = &unk_1007B5A70;
      goto LABEL_31;
    default:
      return;
  }
}

uint64_t sub_10023B16C()
{
  return sub_10023B270((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10023B178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1007B5A6C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  v4 = (_QWORD *)swift_task_alloc(dword_1007B5B1C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10000D098;
  return sub_100238700((uint64_t)_swiftEmptyArrayStorage, v2);
}

uint64_t sub_10023B1FC()
{
  return sub_100232EC8(40);
}

uint64_t sub_10023B204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1007B5A84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  v3[2] = v2;
  return swift_task_switch(sub_100239A50, 0, 0);
}

uint64_t sub_10023B264()
{
  return sub_10023B270((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10023B270(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_unknownObjectRelease(v1[2]);
  swift_release(v1[4]);
  a1(v1[5]);
  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_10023B2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1007B5A94);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  v4 = (_QWORD *)swift_task_alloc(dword_1007B5B1C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10000D098;
  return sub_100238700(v2, 0);
}

uint64_t sub_10023B32C()
{
  return sub_100232EC8(64);
}

uint64_t sub_10023B334()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[5];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc(dword_1007B5AC4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000D12C;
  v6 = (_QWORD *)swift_task_alloc(dword_1007B5B0C);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_10000D12C;
  return sub_100237A5C(v2, v4, v3);
}

uint64_t sub_10023B3C0()
{
  return sub_100232EC8(40);
}

uint64_t sub_10023B3C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B5AD4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_100239724(a1, v4, v5, v6);
}

void sub_10023B434(uint64_t a1)
{
  uint64_t v1;

  sub_100235A18(a1, v1);
}

id sub_10023B448()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = *(int *)(_s15MacApprovePhoneV18InitialLockContextVMa(0) + 48);
  v2 = *(void **)(v0 + v1);
  if (v2)
  {
    v3 = *(id *)(v0 + v1);
LABEL_5:
    v5 = v2;
    return v3;
  }
  result = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationApprovePrompt), "init");
  if (result)
  {
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10023B4B4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100008384(&qword_1007B5B28);
  v1 = swift_allocObject(v0, 272, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1005CF240;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v1 + 56) = &type metadata for SDAuthentication.Operation.CheckRemoteDeviceOSVersionIsSupported;
  *(_QWORD *)(v1 + 64) = &off_1007BAEE0;
  *(_QWORD *)(v1 + 96) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(_QWORD *)(v1 + 104) = &off_1007BAEA0;
  *(_QWORD *)(v1 + 136) = &type metadata for SDAuthentication.Operation.CheckACMTokenExists;
  *(_QWORD *)(v1 + 144) = &off_1007BAD80;
  *(_QWORD *)(v1 + 176) = &type metadata for SDAuthentication.Operation.RecordRemoteDevice;
  *(_QWORD *)(v1 + 184) = &off_1007BAEC0;
  *(_QWORD *)(v1 + 216) = &type metadata for SDAuthentication.Operation.IncludeApproveMetadataInMessage;
  *(_QWORD *)(v1 + 224) = &off_1007BAD60;
  *(_QWORD *)(v1 + 256) = &type metadata for SDAuthentication.Operation.SendApprovePromptMessage;
  *(_QWORD *)(v1 + 264) = &off_1007BAD40;
  return v1;
}

uint64_t sub_10023B598(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  int *v104;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a3[6];
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v104 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v104[7];
    v80 = (void *)(a1 + v79);
    v81 = (char *)a2 + v79;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    if (v17(v81, 1, v15))
    {
      v82 = sub_100008384(&qword_1007C4330);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v80, v81, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v80, 0, 1, v15);
    }
    v83 = v104[8];
    v84 = v104[9];
    v85 = (_QWORD *)(a1 + v83);
    v86 = (uint64_t *)((char *)a2 + v83);
    v87 = v86[1];
    *v85 = *v86;
    v85[1] = v87;
    v88 = (_QWORD *)(a1 + v84);
    v89 = (uint64_t *)((char *)a2 + v84);
    v90 = *v89;
    v91 = v89[1];
    v92 = v104[10];
    v93 = v104[11];
    v94 = *((_BYTE *)a2 + v92);
    *v88 = v90;
    v88[1] = v91;
    *(_BYTE *)(a1 + v92) = v94;
    v95 = a1 + v93;
    v96 = (uint64_t *)((char *)a2 + v93);
    v97 = *(uint64_t *)((char *)a2 + v93 + 8);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v91);
    if (v97 >> 60 == 15)
    {
      *(_OWORD *)v95 = *(_OWORD *)v96;
    }
    else
    {
      v98 = *v96;
      sub_10022E4A8(*v96, v97);
      *(_QWORD *)v95 = v98;
      *(_QWORD *)(v95 + 8) = v97;
    }
    v99 = v104[12];
    v100 = v104[13];
    v101 = *(void **)((char *)a2 + v99);
    *(_QWORD *)(a1 + v99) = v101;
    *(_BYTE *)(a1 + v100) = *((_BYTE *)a2 + v100);
    v102 = v101;
  }
  return a1;
}

void sub_10023BD80(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  v22 = (char *)a1 + a2[7];
  if (!v8(v22, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));
  v23 = (_QWORD *)((char *)a1 + a2[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_100225AB4(*v23, v24);

}

uint64_t sub_10023C0BC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  int *v103;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v103 = a3;
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = v103[7];
  v79 = (void *)(a1 + v78);
  v80 = (char *)a2 + v78;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  if (v16(v80, 1, v14))
  {
    v81 = sub_100008384(&qword_1007C4330);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v79, v80, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v79, 0, 1, v14);
  }
  v82 = v103[8];
  v83 = v103[9];
  v84 = (_QWORD *)(a1 + v82);
  v85 = (uint64_t *)((char *)a2 + v82);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = (_QWORD *)(a1 + v83);
  v88 = (uint64_t *)((char *)a2 + v83);
  v89 = *v88;
  v90 = v88[1];
  v91 = v103[10];
  v92 = v103[11];
  v93 = *((_BYTE *)a2 + v91);
  *v87 = v89;
  v87[1] = v90;
  *(_BYTE *)(a1 + v91) = v93;
  v94 = a1 + v92;
  v95 = (uint64_t *)((char *)a2 + v92);
  v96 = *(uint64_t *)((char *)a2 + v92 + 8);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  if (v96 >> 60 == 15)
  {
    *(_OWORD *)v94 = *(_OWORD *)v95;
  }
  else
  {
    v97 = *v95;
    sub_10022E4A8(*v95, v96);
    *(_QWORD *)v94 = v97;
    *(_QWORD *)(v94 + 8) = v96;
  }
  v98 = v103[12];
  v99 = v103[13];
  v100 = *(void **)((char *)a2 + v98);
  *(_QWORD *)(a1 + v98) = v100;
  *(_BYTE *)(a1 + v99) = *((_BYTE *)a2 + v99);
  v101 = v100;
  return a1;
}

char *sub_10023C880(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  int *v134;
  _QWORD *v135;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490((_QWORD *)a1 + 1, v7);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v134 = a3;
  v135 = a2;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v134[7];
  v106 = &a1[v105];
  v107 = (char *)v135 + v105;
  v108 = v14(&a1[v105], 1, v12);
  v109 = v14(v107, 1, v12);
  if (v108)
  {
    if (!v109)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v106, v107, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v106, 0, 1, v12);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v106, v12);
LABEL_84:
    v110 = sub_100008384(&qword_1007C4330);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v106, v107, v12);
LABEL_85:
  v111 = v134[8];
  v112 = &a1[v111];
  v113 = (_QWORD *)((char *)v135 + v111);
  *(_QWORD *)v112 = *v113;
  v114 = v113[1];
  v115 = *((_QWORD *)v112 + 1);
  *((_QWORD *)v112 + 1) = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  v116 = v134[9];
  v117 = &a1[v116];
  v118 = (_QWORD *)((char *)v135 + v116);
  *(_QWORD *)v117 = *v118;
  v119 = v118[1];
  v120 = *((_QWORD *)v117 + 1);
  *((_QWORD *)v117 + 1) = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  a1[v134[10]] = *((_BYTE *)v135 + v134[10]);
  v121 = v134[11];
  v122 = (uint64_t *)&a1[v121];
  v123 = (_QWORD *)((char *)v135 + v121);
  v124 = *(_QWORD *)((char *)v135 + v121 + 8);
  if (*(_QWORD *)&a1[v121 + 8] >> 60 != 15)
  {
    if (v124 >> 60 != 15)
    {
      v126 = *v123;
      sub_10022E4A8(*v123, v124);
      v127 = *v122;
      v128 = v122[1];
      *v122 = v126;
      v122[1] = v124;
      sub_100225AB4(v127, v128);
      goto LABEL_92;
    }
    sub_10023D5F8((uint64_t)v122);
    goto LABEL_90;
  }
  if (v124 >> 60 == 15)
  {
LABEL_90:
    *(_OWORD *)v122 = *(_OWORD *)v123;
    goto LABEL_92;
  }
  v125 = *v123;
  sub_10022E4A8(*v123, v124);
  *v122 = v125;
  v122[1] = v124;
LABEL_92:
  v129 = v134[12];
  v130 = *(void **)&a1[v129];
  v131 = *(void **)((char *)v135 + v129);
  *(_QWORD *)&a1[v129] = v131;
  v132 = v131;

  a1[v134[13]] = *((_BYTE *)v135 + v134[13]);
  return a1;
}

_QWORD *sub_10023D490(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10023D5F8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_10023D62C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v73;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v73 = a3;
  if (v11(v8, 1, v9))
  {
    v12 = sub_100008384(&qword_1007C4330);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v14 = v13[5];
  v15 = &v7[v14];
  v16 = &v8[v14];
  if (v11(&v8[v14], 1, v9))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  v18 = v13[6];
  v19 = &v7[v18];
  v20 = &v8[v18];
  if (v11(&v8[v18], 1, v9))
  {
    v21 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  v22 = v13[7];
  v23 = &v7[v22];
  v24 = &v8[v22];
  if (v11(&v8[v22], 1, v9))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  v26 = v13[8];
  v27 = &v7[v26];
  v28 = &v8[v26];
  if (v11(&v8[v26], 1, v9))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  v30 = v13[9];
  v31 = &v7[v30];
  v32 = &v8[v30];
  if (v11(&v8[v30], 1, v9))
  {
    v33 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
  }
  v34 = v13[10];
  v35 = &v7[v34];
  v36 = &v8[v34];
  if (v11(&v8[v34], 1, v9))
  {
    v37 = sub_100008384(&qword_1007C4330);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
  }
  v38 = v13[11];
  v39 = &v7[v38];
  v40 = &v8[v38];
  if (v11(&v8[v38], 1, v9))
  {
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
  }
  v42 = v13[12];
  v43 = &v7[v42];
  v44 = &v8[v42];
  if (v11(&v8[v42], 1, v9))
  {
    v45 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
  }
  v7[v13[13]] = v8[v13[13]];
  v46 = v13[14];
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v11(&v8[v46], 1, v9))
  {
    v49 = sub_100008384(&qword_1007C4330);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
  }
  v50 = v13[15];
  v51 = &v7[v50];
  v52 = &v8[v50];
  if (v11(&v8[v50], 1, v9))
  {
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
  }
  v54 = v13[16];
  v55 = &v7[v54];
  v56 = &v8[v54];
  if (v11(&v8[v54], 1, v9))
  {
    v57 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
  }
  v58 = v13[17];
  v59 = &v7[v58];
  v60 = &v8[v58];
  if (v11(&v8[v58], 1, v9))
  {
    v61 = sub_100008384(&qword_1007C4330);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
  }
  v62 = v13[18];
  v63 = &v7[v62];
  v64 = &v8[v62];
  *(_DWORD *)v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  v65 = v73[7];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  if (v11((char *)(a2 + v65), 1, v9))
  {
    v68 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v66, v67, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v66, 0, 1, v9);
  }
  v69 = v73[9];
  *(_OWORD *)(a1 + v73[8]) = *(_OWORD *)(a2 + v73[8]);
  *(_OWORD *)(a1 + v69) = *(_OWORD *)(a2 + v69);
  v70 = v73[11];
  *(_BYTE *)(a1 + v73[10]) = *(_BYTE *)(a2 + v73[10]);
  *(_OWORD *)(a1 + v70) = *(_OWORD *)(a2 + v70);
  v71 = v73[13];
  *(_QWORD *)(a1 + v73[12]) = *(_QWORD *)(a2 + v73[12]);
  *(_BYTE *)(a1 + v71) = *(_BYTE *)(a2 + v71);
  return a1;
}

uint64_t *sub_10023DD6C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  int *v131;
  uint64_t *v132;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v131 = a3;
  v132 = a2;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v131[7];
  v105 = (char *)a1 + v104;
  v106 = (char *)v132 + v104;
  v107 = v12((char *)a1 + v104, 1, v10);
  v108 = v12(v106, 1, v10);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v105, v106, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v105, 0, 1, v10);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v108)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v105, v10);
LABEL_84:
    v109 = sub_100008384(&qword_1007C4330);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v105, v106, v10);
LABEL_85:
  v110 = v131[8];
  v111 = (uint64_t *)((char *)a1 + v110);
  v112 = (uint64_t *)((char *)v132 + v110);
  v114 = *v112;
  v113 = v112[1];
  v115 = v111[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease(v115);
  v116 = v131[9];
  v117 = (uint64_t *)((char *)a1 + v116);
  v118 = (uint64_t *)((char *)v132 + v116);
  v120 = *v118;
  v119 = v118[1];
  v121 = v117[1];
  *v117 = v120;
  v117[1] = v119;
  swift_bridgeObjectRelease(v121);
  v122 = v131[11];
  *((_BYTE *)a1 + v131[10]) = *((_BYTE *)v132 + v131[10]);
  v123 = (uint64_t *)((char *)a1 + v122);
  v124 = (uint64_t *)((char *)v132 + v122);
  v125 = *(uint64_t *)((char *)a1 + v122 + 8);
  if (v125 >> 60 != 15)
  {
    v126 = v124[1];
    if (v126 >> 60 != 15)
    {
      v127 = *v123;
      *v123 = *v124;
      v123[1] = v126;
      sub_100225AB4(v127, v125);
      goto LABEL_90;
    }
    sub_10023D5F8((uint64_t)v123);
  }
  *(_OWORD *)v123 = *(_OWORD *)v124;
LABEL_90:
  v128 = v131[12];
  v129 = *(void **)((char *)a1 + v128);
  *(uint64_t *)((char *)a1 + v128) = *(uint64_t *)((char *)v132 + v128);

  *((_BYTE *)a1 + v131[13]) = *((_BYTE *)v132 + v131[13]);
  return a1;
}

uint64_t sub_10023E908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023E914);
}

uint64_t sub_10023E914(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100008384(&qword_1007C4330);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10023E9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023E9C4);
}

char *sub_10023E9C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100008384(&qword_1007C4330);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t _s15MacApprovePhoneV18InitialLockContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5B88, (uint64_t)&_s15MacApprovePhoneV18InitialLockContextVMn);
}

void sub_10023EA78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = "(";
  v2 = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10023EB48(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1005CF2E0;
      v6[5] = &unk_1005CF2E0;
      v6[6] = &unk_1005CF2F8;
      v6[7] = &unk_1005CF310;
      v6[8] = &unk_1005CF328;
      v6[9] = &unk_1005CF340;
      swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
    }
  }
}

void sub_10023EB48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1007BC3D0)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1007BC3D0);
  }
}

uint64_t sub_10023EB9C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    v9 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0);
    v10 = v9[6];
    v11 = v4 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    *(_QWORD *)(v4 + v9[7]) = *(uint64_t *)((char *)a2 + v9[7]);
    *(_BYTE *)(v4 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    v14 = a3[5];
    v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)(v4 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    v16 = a3[6];
    v17 = a3[7];
    v18 = *(uint64_t *)((char *)a2 + v16);
    *(_QWORD *)(v4 + v16) = v18;
    v19 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)(v4 + v17) = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t sub_10023ECD4(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;

  sub_10022E75C(a1);
  sub_10022E75C(a1 + 5);
  v4 = (char *)a1 + *(int *)(type metadata accessor for SDAuthenticationCommonOperationInput(0) + 24);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10022E75C((_QWORD *)((char *)a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7]));
}

uint64_t sub_10023ED54(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  v8 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v9 = v8[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  *(_BYTE *)(a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  v13 = a3[5];
  v14 = *(_OWORD *)(a2 + v13 + 24);
  *(_OWORD *)(a1 + v13 + 24) = v14;
  (**(void (***)(void))(v14 - 8))();
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

_QWORD *sub_10023EE58(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10023D490(a1, a2);
  sub_10023D490(a1 + 5, a2 + 5);
  v6 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  sub_10023D490((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]));
  v11 = a3[6];
  v12 = *(_QWORD *)((char *)a2 + v11);
  v13 = *(_QWORD *)((char *)a1 + v11);
  *(_QWORD *)((char *)a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a2 + v14);
  v16 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_10023EF38(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  v12 = a3[5];
  v13 = a3[6];
  v14 = a1 + v12;
  v15 = a2 + v12;
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10023F018(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_10022E75C((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_10022E75C((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v8 = v7[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)(a1 + v7[7]) = *(_QWORD *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  v12 = a3[5];
  v13 = a1 + v12;
  v14 = a2 + v12;
  sub_10022E75C((_QWORD *)(a1 + v12));
  v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  v16 = a3[6];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t sub_10023F120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10023F12C);
}

uint64_t sub_10023F12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10023F1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10023F1B8);
}

uint64_t sub_10023F1B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t _s15MacApprovePhoneV4FlowVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5C38, (uint64_t)&_s15MacApprovePhoneV4FlowVMn);
}

uint64_t sub_10023F248(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for SDAuthenticationCommonOperationInput(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10023F2C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v6 = a1;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain(v4);
    if (v12(v9, 1, v10))
    {
      v13 = sub_100008384(&qword_1007C4330);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v15 = v14[5];
    v16 = &v8[v15];
    v17 = &v9[v15];
    if (v12(&v9[v15], 1, v10))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    v19 = v14[6];
    v20 = &v8[v19];
    v21 = &v9[v19];
    if (v12(&v9[v19], 1, v10))
    {
      v22 = sub_100008384(&qword_1007C4330);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v20, v21, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
    }
    v23 = v14[7];
    v24 = &v8[v23];
    v25 = &v9[v23];
    if (v12(&v9[v23], 1, v10))
    {
      v26 = sub_100008384(&qword_1007C4330);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
    }
    v27 = v14[8];
    v28 = &v8[v27];
    v29 = &v9[v27];
    if (v12(&v9[v27], 1, v10))
    {
      v30 = sub_100008384(&qword_1007C4330);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v28, v29, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v28, 0, 1, v10);
    }
    v31 = v14[9];
    v32 = &v8[v31];
    v33 = &v9[v31];
    if (v12(&v9[v31], 1, v10))
    {
      v34 = sub_100008384(&qword_1007C4330);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v32, v33, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v32, 0, 1, v10);
    }
    v35 = v14[10];
    v36 = &v8[v35];
    v37 = &v9[v35];
    if (v12(&v9[v35], 1, v10))
    {
      v38 = sub_100008384(&qword_1007C4330);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
    }
    v39 = v14[11];
    v40 = &v8[v39];
    v41 = &v9[v39];
    if (v12(&v9[v39], 1, v10))
    {
      v42 = sub_100008384(&qword_1007C4330);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v40, v41, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v40, 0, 1, v10);
    }
    v43 = v14[12];
    v44 = &v8[v43];
    v45 = &v9[v43];
    if (v12(&v9[v43], 1, v10))
    {
      v46 = sub_100008384(&qword_1007C4330);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v44, v45, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v44, 0, 1, v10);
    }
    v8[v14[13]] = v9[v14[13]];
    v47 = v14[14];
    v48 = &v8[v47];
    v49 = &v9[v47];
    if (v12(&v9[v47], 1, v10))
    {
      v50 = sub_100008384(&qword_1007C4330);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
    }
    v51 = v14[15];
    v52 = &v8[v51];
    v53 = &v9[v51];
    if (v12(&v9[v51], 1, v10))
    {
      v54 = sub_100008384(&qword_1007C4330);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v52, v53, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v52, 0, 1, v10);
    }
    v55 = v14[16];
    v56 = &v8[v55];
    v57 = &v9[v55];
    if (v12(&v9[v55], 1, v10))
    {
      v58 = sub_100008384(&qword_1007C4330);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v56, v57, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v56, 0, 1, v10);
    }
    v59 = v14[17];
    v60 = &v8[v59];
    v61 = &v9[v59];
    if (v12(&v9[v59], 1, v10))
    {
      v62 = sub_100008384(&qword_1007C4330);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
    }
    v63 = v14[18];
    v64 = &v8[v63];
    v65 = &v9[v63];
    *(_DWORD *)v64 = *(_DWORD *)v65;
    v64[4] = v65[4];
    v8[v14[19]] = v9[v14[19]];
    v66 = v14[20];
    v67 = &v8[v66];
    v68 = &v9[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v14[21];
    v71 = &v8[v70];
    v72 = &v9[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *(int *)(a3 + 24);
    v75 = (char *)v6 + v74;
    v76 = (char *)a2 + v74;
    v77 = *(_OWORD *)((char *)a2 + v74 + 24);
    *(_OWORD *)((char *)v6 + v74 + 24) = v77;
    v78 = v77;
    v79 = **(void (***)(char *, char *, uint64_t))(v77 - 8);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    v79(v75, v76, v78);
  }
  return v6;
}

uint64_t sub_10023F9BC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  int *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v9 = &v4[v8[5]];
  if (!v7(v9, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v10 = &v4[v8[6]];
  if (!v7(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v11 = &v4[v8[7]];
  if (!v7(v11, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v12 = &v4[v8[8]];
  if (!v7(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v13 = &v4[v8[9]];
  if (!v7(v13, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  v14 = &v4[v8[10]];
  if (!v7(v14, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  v15 = &v4[v8[11]];
  if (!v7(v15, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v16 = &v4[v8[12]];
  if (!v7(v16, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  v17 = &v4[v8[14]];
  if (!v7(v17, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  v18 = &v4[v8[15]];
  if (!v7(v18, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  v19 = &v4[v8[16]];
  if (!v7(v19, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  v20 = &v4[v8[17]];
  if (!v7(v20, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[21] + 8]);
  return sub_10022E75C((_QWORD *)((char *)a1 + *(int *)(a2 + 24)));
}

uint64_t *sub_10023FC80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);

  v5 = *a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v5);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100008384(&qword_1007C4330);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v14 = v13[5];
  v15 = &v7[v14];
  v16 = &v8[v14];
  if (v11(&v8[v14], 1, v9))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  v18 = v13[6];
  v19 = &v7[v18];
  v20 = &v8[v18];
  if (v11(&v8[v18], 1, v9))
  {
    v21 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  v22 = v13[7];
  v23 = &v7[v22];
  v24 = &v8[v22];
  if (v11(&v8[v22], 1, v9))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  v26 = v13[8];
  v27 = &v7[v26];
  v28 = &v8[v26];
  if (v11(&v8[v26], 1, v9))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  v30 = v13[9];
  v31 = &v7[v30];
  v32 = &v8[v30];
  if (v11(&v8[v30], 1, v9))
  {
    v33 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v32, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
  }
  v34 = v13[10];
  v35 = &v7[v34];
  v36 = &v8[v34];
  if (v11(&v8[v34], 1, v9))
  {
    v37 = sub_100008384(&qword_1007C4330);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
  }
  v38 = v13[11];
  v39 = &v7[v38];
  v40 = &v8[v38];
  if (v11(&v8[v38], 1, v9))
  {
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v40, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
  }
  v42 = v13[12];
  v43 = &v7[v42];
  v44 = &v8[v42];
  if (v11(&v8[v42], 1, v9))
  {
    v45 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
  }
  v7[v13[13]] = v8[v13[13]];
  v46 = v13[14];
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v11(&v8[v46], 1, v9))
  {
    v49 = sub_100008384(&qword_1007C4330);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
  }
  v50 = v13[15];
  v51 = &v7[v50];
  v52 = &v8[v50];
  if (v11(&v8[v50], 1, v9))
  {
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v52, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
  }
  v54 = v13[16];
  v55 = &v7[v54];
  v56 = &v8[v54];
  if (v11(&v8[v54], 1, v9))
  {
    v57 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v55, v56, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
  }
  v58 = v13[17];
  v59 = &v7[v58];
  v60 = &v8[v58];
  if (v11(&v8[v58], 1, v9))
  {
    v61 = sub_100008384(&qword_1007C4330);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
  }
  v62 = v13[18];
  v63 = &v7[v62];
  v64 = &v8[v62];
  *(_DWORD *)v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  v65 = v13[20];
  v66 = &v7[v65];
  v67 = &v8[v65];
  v68 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *((_QWORD *)v66 + 1) = v68;
  v69 = v13[21];
  v70 = &v7[v69];
  v71 = &v8[v69];
  v72 = *((_QWORD *)v71 + 1);
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *((_QWORD *)v70 + 1) = v72;
  v73 = *(int *)(a3 + 24);
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = *(_OWORD *)(v75 + 24);
  *(_OWORD *)((char *)a1 + v73 + 24) = v76;
  v77 = v76;
  v78 = **(void (***)(char *, char *, uint64_t))(v76 - 8);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  v78(v74, v75, v77);
  return a1;
}

uint64_t *sub_10024034C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t *v106;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v105 = a3;
  v106 = a2;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v18 = v17[5];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = v13(&v9[v18], 1, v11);
  v22 = v13(v20, 1, v11);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_12:
    v23 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v19, v20, v11);
LABEL_13:
  v24 = v17[6];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v27 = v13(&v9[v24], 1, v11);
  v28 = v13(v26, 1, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v25, v26, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
LABEL_18:
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v25, v26, v11);
LABEL_19:
  v30 = v17[7];
  v31 = &v9[v30];
  v32 = &v10[v30];
  v33 = v13(&v9[v30], 1, v11);
  v34 = v13(v32, 1, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v32, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v31, 0, 1, v11);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
LABEL_24:
    v35 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v31, v32, v11);
LABEL_25:
  v36 = v17[8];
  v37 = &v9[v36];
  v38 = &v10[v36];
  v39 = v13(&v9[v36], 1, v11);
  v40 = v13(v38, 1, v11);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v37, 0, 1, v11);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v11);
LABEL_30:
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v37, v38, v11);
LABEL_31:
  v42 = v17[9];
  v43 = &v9[v42];
  v44 = &v10[v42];
  v45 = v13(&v9[v42], 1, v11);
  v46 = v13(v44, 1, v11);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v43, v44, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v43, 0, 1, v11);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v43, v11);
LABEL_36:
    v47 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v43, v44, v11);
LABEL_37:
  v48 = v17[10];
  v49 = &v9[v48];
  v50 = &v10[v48];
  v51 = v13(&v9[v48], 1, v11);
  v52 = v13(v50, 1, v11);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v50, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v49, 0, 1, v11);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
LABEL_42:
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v49, v50, v11);
LABEL_43:
  v54 = v17[11];
  v55 = &v9[v54];
  v56 = &v10[v54];
  v57 = v13(&v9[v54], 1, v11);
  v58 = v13(v56, 1, v11);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v55, v56, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v55, 0, 1, v11);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v55, v11);
LABEL_48:
    v59 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v55, v56, v11);
LABEL_49:
  v60 = v17[12];
  v61 = &v9[v60];
  v62 = &v10[v60];
  v63 = v13(&v9[v60], 1, v11);
  v64 = v13(v62, 1, v11);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v61, v62, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v61, 0, 1, v11);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v61, v11);
LABEL_54:
    v65 = sub_100008384(&qword_1007C4330);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v61, v62, v11);
LABEL_55:
  v9[v17[13]] = v10[v17[13]];
  v66 = v17[14];
  v67 = &v9[v66];
  v68 = &v10[v66];
  v69 = v13(&v9[v66], 1, v11);
  v70 = v13(v68, 1, v11);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v67, v68, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v67, 0, 1, v11);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v11);
LABEL_60:
    v71 = sub_100008384(&qword_1007C4330);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v67, v68, v11);
LABEL_61:
  v72 = v17[15];
  v73 = &v9[v72];
  v74 = &v10[v72];
  v75 = v13(&v9[v72], 1, v11);
  v76 = v13(v74, 1, v11);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v73, v74, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v73, 0, 1, v11);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v11);
LABEL_66:
    v77 = sub_100008384(&qword_1007C4330);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v73, v74, v11);
LABEL_67:
  v78 = v17[16];
  v79 = &v9[v78];
  v80 = &v10[v78];
  v81 = v13(&v9[v78], 1, v11);
  v82 = v13(v80, 1, v11);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v79, v80, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v79, 0, 1, v11);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v79, v11);
LABEL_72:
    v83 = sub_100008384(&qword_1007C4330);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v79, v80, v11);
LABEL_73:
  v84 = v17[17];
  v85 = &v9[v84];
  v86 = &v10[v84];
  v87 = v13(&v9[v84], 1, v11);
  v88 = v13(v86, 1, v11);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v85, v86, v11);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v85, v11);
    goto LABEL_78;
  }
  if (v88)
  {
LABEL_78:
    v89 = sub_100008384(&qword_1007C4330);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v85, v86, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v85, 0, 1, v11);
LABEL_79:
  v90 = v17[18];
  v91 = &v9[v90];
  v92 = &v10[v90];
  v93 = *(_DWORD *)v92;
  v91[4] = v92[4];
  *(_DWORD *)v91 = v93;
  v9[v17[19]] = v10[v17[19]];
  v94 = v17[20];
  v95 = &v9[v94];
  v96 = &v10[v94];
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v97 = *((_QWORD *)v96 + 1);
  v98 = *((_QWORD *)v95 + 1);
  *((_QWORD *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  v99 = v17[21];
  v100 = &v9[v99];
  v101 = &v10[v99];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v102 = *((_QWORD *)v101 + 1);
  v103 = *((_QWORD *)v100 + 1);
  *((_QWORD *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  sub_10023D490((uint64_t *)((char *)a1 + *(int *)(v105 + 24)), (uint64_t *)((char *)v106 + *(int *)(v105 + 24)));
  return a1;
}

_QWORD *sub_100240D9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = *(int *)(a3 + 24);
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v67 = *((_OWORD *)v66 + 1);
  *(_OWORD *)v65 = *(_OWORD *)v66;
  *((_OWORD *)v65 + 1) = v67;
  *((_QWORD *)v65 + 4) = *((_QWORD *)v66 + 4);
  return a1;
}

uint64_t *sub_100241430(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  uint64_t v109;
  uint64_t *v110;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v109 = a3;
  v110 = a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = *(int *)(v109 + 24);
  v105 = (char *)a1 + v104;
  v106 = (char *)v110 + v104;
  sub_10022E75C((uint64_t *)((char *)a1 + v104));
  v107 = *((_OWORD *)v106 + 1);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *((_OWORD *)v105 + 1) = v107;
  *((_QWORD *)v105 + 4) = *((_QWORD *)v106 + 4);
  return a1;
}

uint64_t sub_100241E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100241E78);
}

uint64_t sub_100241E78(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100241EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100241F00);
}

char *sub_100241F00(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t _s15MacApprovePhoneV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5CD0, (uint64_t)&_s15MacApprovePhoneV17InitialKeyContextVMn);
}

uint64_t sub_100241F88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "(";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100242008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  sub_100244404(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t (*sub_100242044())()
{
  return LongHash.storage.getter;
}

uint64_t sub_100242058(uint64_t a1, uint64_t a2)
{
  return sub_1002429A0(a1, a2, (uint64_t (*)(void))sub_10023B448);
}

uint64_t sub_100242074(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t sub_100242080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100244418(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_1002420A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100244384(v2 + *(int *)(a1 + 20), a2, type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t (*sub_1002420C8())()
{
  return LongHash.storage.getter;
}

id sub_1002420DC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  id result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  Swift::String v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF250;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(_QWORD *)(v7 + 64) = &off_1007BAEA0;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.RequestUserApproval;
  *(_QWORD *)(v7 + 104) = &off_1007BB2A0;
  *a3 = v7;
  if (objc_msgSend(a1, "hasBundleID")
    && objc_msgSend(a1, "hasAppName")
    && objc_msgSend(a1, "hasBiometricOnly"))
  {
    v8 = _s15MacApprovePhoneV17InitialKeyContextVMa(0);
    sub_100244418(a2 + *(int *)(v8 + 24), (uint64_t)(a3 + 1));
    v9 = a2 + *(int *)(v8 + 20);
    v10 = (int *)_s15MacApprovePhoneV26HandleApprovePromptContextVMa(0);
    sub_100244384(v9, (uint64_t)a3 + v10[6], type metadata accessor for SDAuthenticationSessionMetrics);
    result = objc_msgSend(a1, "bundleID");
    if (result)
    {
      v12 = result;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v15 = v14;

      v16 = (uint64_t *)((char *)a3 + v10[7]);
      *v16 = v13;
      v16[1] = v15;
      result = objc_msgSend(a1, "appName");
      if (result)
      {
        v17 = result;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
        v20 = v19;

        v21 = (uint64_t *)((char *)a3 + v10[8]);
        *v21 = v18;
        v21[1] = v20;
        LOBYTE(v17) = objc_msgSend(a1, "biometricOnly");

        result = (id)sub_1002443C8(a2, _s15MacApprovePhoneV17InitialKeyContextVMa);
        *((_BYTE *)a3 + v10[9]) = (_BYTE)v17;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    _StringGuts.grow(_:)(55);
    v22._object = (void *)0x8000000100612870;
    v22._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v22);
    v23 = objc_msgSend(a1, "description");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v26);
    v28 = sub_100244304();
    v29 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v28, 0, 0);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 16) = 0xE000000000000000;
    swift_willThrow(v29);

    sub_1002443C8(a2, _s15MacApprovePhoneV17InitialKeyContextVMa);
    return (id)swift_bridgeObjectRelease(*a3);
  }
  return result;
}

uint64_t sub_1002423B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100244418(v1 + 8, a1);
}

uint64_t sub_1002423CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100244384(v2 + *(int *)(a1 + 24), a2, type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t sub_1002423F4()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_1002423FC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B5B28);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1005CF250;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v12 + 56) = &type metadata for SDAuthentication.Operation.UseApprovalACMTokenForIncludingFirstAKSTokenInMessage;
  *(_QWORD *)(v12 + 64) = &off_1007BB280;
  *(_QWORD *)(v12 + 96) = &type metadata for SDAuthentication.Operation.SendRequestMessage;
  *(_QWORD *)(v12 + 104) = &off_1007BAE20;
  *a4 = v12;
  *((_OWORD *)a4 + 3) = xmmword_1005CF260;
  v13 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0);
  v14 = *(int *)(v13 + 32);
  *(uint64_t *)((char *)a4 + v14) = 0;
  *((_BYTE *)a4 + *(int *)(v13 + 36)) = 0;
  if (a2 >> 60 == 15)
  {
    v15 = sub_100244304();
    v16 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v15, 0, 0);
    *(_DWORD *)v17 = 30;
    *(_QWORD *)(v17 + 8) = 0xD00000000000001CLL;
    *(_QWORD *)(v17 + 16) = 0x80000001006128B0;
    swift_willThrow(v16);
    sub_1002443C8(a3, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    swift_bridgeObjectRelease(*a4);
    sub_100225AA0(a4[6], a4[7]);

  }
  else
  {
    v18 = v13;
    sub_100244418(a3 + 8, (uint64_t)(a4 + 1));
    a4[6] = a1;
    a4[7] = a2;
    v19 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa(0);
    sub_100244384(a3 + *(int *)(v19 + 24), (uint64_t)v10, type metadata accessor for SDAuthenticationSessionMetrics);
    sub_1002443C8(a3, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    sub_100221DB4((uint64_t)v10, (uint64_t)a4 + *(int *)(v18 + 28), type metadata accessor for SDAuthenticationSessionMetrics);
  }
}

uint64_t sub_100242600()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_100244404(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

id sub_100242630()
{
  return sub_100242A68(_s15MacApprovePhoneV24HandleUserApprovalResultVMa, (Class *)off_1007112C0);
}

uint64_t sub_100242654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100244384(v2 + *(int *)(a1 + 28), a2, type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t (*sub_10024267C())()
{
  return LongHash.storage.getter;
}

uint64_t sub_100242690(uint64_t a1, uint64_t a2)
{
  return sub_100242FA0(a1, a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa, (Class *)off_1007112C0);
}

id sub_1002426B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = *(int *)(_s15MacApprovePhoneV20HandleRequestContextVMa(0) + 36);
  v2 = *(void **)(v0 + v1);
  if (v2)
  {
    v3 = *(id *)(v0 + v1);
LABEL_5:
    v5 = v2;
    return v3;
  }
  result = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationResponse), "init");
  if (result)
  {
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100242720(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF250;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.UseApproveTokenForIncludingFirstAKSTokenInMessage;
  *(_QWORD *)(v7 + 64) = &off_1007BB260;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.SendResponseMessage;
  *(_QWORD *)(v7 + 104) = &off_1007BB240;
  *a3 = v7;
  v8 = (int *)_s15MacApprovePhoneV20HandleRequestContextVMa(0);
  v9 = (char *)a3 + v8[7];
  *(_OWORD *)v9 = xmmword_1005CF260;
  v10 = v8[9];
  *(uint64_t *)((char *)a3 + v10) = 0;
  *((_BYTE *)a3 + v8[10]) = 1;
  if (objc_msgSend(a1, "hasAksToken"))
  {
    sub_100244418(a2 + 8, (uint64_t)(a3 + 1));
    v11 = _s15MacApprovePhoneV18InitialLockContextVMa(0);
    sub_100244384(a2 + *(int *)(v11 + 24), (uint64_t)a3 + v8[6], type metadata accessor for SDAuthenticationSessionMetrics);
    v12 = (uint64_t *)(a2 + *(int *)(v11 + 44));
    v13 = *v12;
    v14 = v12[1];
    *(_QWORD *)v9 = *v12;
    *((_QWORD *)v9 + 1) = v14;
    sub_100244404(v13, v14);
    v15 = objc_msgSend(a1, "aksToken");
    if (v15)
    {
      v16 = v15;
      v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      sub_1002443C8(a2, _s15MacApprovePhoneV18InitialLockContextVMa);
      v20 = (uint64_t *)((char *)a3 + v8[8]);
      *v20 = v17;
      v20[1] = v19;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v21 = sub_100244304();
    v22 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v21, 0, 0);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = 0xD000000000000028;
    *(_QWORD *)(v23 + 16) = 0x80000001006128D0;
    swift_willThrow(v22);

    sub_1002443C8(a2, _s15MacApprovePhoneV18InitialLockContextVMa);
    swift_bridgeObjectRelease(*a3);
    sub_100225AA0(*(_QWORD *)v9, *((_QWORD *)v9 + 1));

  }
}

uint64_t sub_10024293C(uint64_t a1, uint64_t a2)
{
  return sub_100242F20(a1, a2, (void (*)(_QWORD, _QWORD))sub_100244404);
}

uint64_t sub_100242948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 32);
  v3 = *(_QWORD *)v2;
  sub_10022E4A8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_100242984(uint64_t a1, uint64_t a2)
{
  return sub_1002429A0(a1, a2, (uint64_t (*)(void))sub_1002426B4);
}

uint64_t sub_1002429A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (void *)a3();
  v4 = objc_msgSend(v3, "data");

  if (v4)
  {
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

    return v5;
  }
  else
  {
    v7 = sub_100244304();
    v8 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v7, 0, 0);
    *(_DWORD *)v9 = 10;
    *(_QWORD *)(v9 + 8) = 0xD00000000000001ALL;
    *(_QWORD *)(v9 + 16) = 0x8000000100612970;
    return swift_willThrow(v8);
  }
}

uint64_t sub_100242A5C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

id sub_100242A68(uint64_t (*a1)(_QWORD), Class *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  id result;
  id v8;

  v4 = *(int *)(a1(0) + 32);
  v5 = *(void **)(v2 + v4);
  if (v5)
  {
    v6 = *(id *)(v2 + v4);
LABEL_5:
    v8 = v5;
    return v6;
  }
  result = objc_msgSend(objc_allocWithZone(*a2), "init");
  if (result)
  {
    *(_QWORD *)(v2 + v4) = result;
    v6 = result;
    v5 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100242AE0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF250;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.IncludeNextAKSTokenInMessage;
  *(_QWORD *)(v7 + 64) = &off_1007BB220;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.SendTokenMessage;
  *(_QWORD *)(v7 + 104) = &off_1007BB200;
  *a3 = v7;
  v8 = (int *)_s15MacApprovePhoneV21HandleResponseContextVMa(0);
  v9 = v8[8];
  *(uint64_t *)((char *)a3 + v9) = 0;
  *((_BYTE *)a3 + v8[9]) = 7;
  if (objc_msgSend(a1, "hasAksToken"))
  {
    sub_100244418(a2 + 8, (uint64_t)(a3 + 1));
    v10 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0);
    sub_100244384(a2 + *(int *)(v10 + 28), (uint64_t)a3 + v8[6], type metadata accessor for SDAuthenticationSessionMetrics);
    v11 = objc_msgSend(a1, "aksToken");
    if (v11)
    {
      v12 = v11;
      v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      sub_1002443C8(a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      v16 = (uint64_t *)((char *)a3 + v8[7]);
      *v16 = v13;
      v16[1] = v15;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v17 = sub_100244304();
    v18 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v17, 0, 0);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0xD000000000000029;
    *(_QWORD *)(v19 + 16) = 0x8000000100612900;
    swift_willThrow(v18);

    sub_1002443C8(a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
    swift_bridgeObjectRelease(*a3);

  }
}

uint64_t sub_100242CCC(uint64_t a1, uint64_t a2)
{
  return sub_100242F20(a1, a2, (void (*)(_QWORD, _QWORD))sub_10022E4A8);
}

id sub_100242CD8()
{
  return sub_100242A68(_s15MacApprovePhoneV21HandleResponseContextVMa, (Class *)off_1007112D0);
}

uint64_t sub_100242CFC(uint64_t a1, uint64_t a2)
{
  return sub_100242FA0(a1, a2, _s15MacApprovePhoneV21HandleResponseContextVMa, (Class *)off_1007112D0);
}

void sub_100242D20(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 152, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF140;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.ConsumeAKSToken;
  *(_QWORD *)(v7 + 64) = &off_1007BB1E0;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(_QWORD *)(v7 + 104) = &off_1007BB1C0;
  *(_QWORD *)(v7 + 136) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(_QWORD *)(v7 + 144) = &off_1007BB1A0;
  *a3 = v7;
  v8 = (int *)_s15MacApprovePhoneV18HandleTokenContextVMa(0);
  v9 = v8[8];
  *(uint64_t *)((char *)a3 + v9) = 0;
  *((_BYTE *)a3 + v8[9]) = 2;
  if (objc_msgSend(a1, "hasAksToken"))
  {
    sub_100244418(a2 + 8, (uint64_t)(a3 + 1));
    v10 = _s15MacApprovePhoneV20HandleRequestContextVMa(0);
    sub_100244384(a2 + *(int *)(v10 + 24), (uint64_t)a3 + v8[6], type metadata accessor for SDAuthenticationSessionMetrics);
    v11 = objc_msgSend(a1, "aksToken");
    if (v11)
    {
      v12 = v11;
      v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      sub_1002443C8(a2, _s15MacApprovePhoneV20HandleRequestContextVMa);
      v16 = (uint64_t *)((char *)a3 + v8[7]);
      *v16 = v13;
      v16[1] = v15;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v17 = sub_100244304();
    v18 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v17, 0, 0);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0xD000000000000019;
    *(_QWORD *)(v19 + 16) = 0x8000000100612930;
    swift_willThrow(v18);

    sub_1002443C8(a2, _s15MacApprovePhoneV20HandleRequestContextVMa);
    swift_bridgeObjectRelease(*a3);

  }
}

uint64_t sub_100242F20(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v3 + *(int *)(a1 + 28));
  v5 = *v4;
  a3(*v4, v4[1]);
  return v5;
}

id sub_100242F58()
{
  return sub_100242A68(_s15MacApprovePhoneV18HandleTokenContextVMa, (Class *)off_1007112A8);
}

uint64_t sub_100242F7C(uint64_t a1, uint64_t a2)
{
  return sub_100242FA0(a1, a2, _s15MacApprovePhoneV18HandleTokenContextVMa, (Class *)off_1007112A8);
}

uint64_t sub_100242FA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), Class *a4)
{
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100242A68(a3, a4);
  v5 = objc_msgSend(v4, "data");

  if (v5)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

    return v6;
  }
  else
  {
    v8 = sub_100244304();
    v9 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v8, 0, 0);
    *(_DWORD *)v10 = 10;
    *(_QWORD *)(v10 + 8) = 0xD00000000000001ALL;
    *(_QWORD *)(v10 + 16) = 0x8000000100612970;
    return swift_willThrow(v9);
  }
}

uint64_t sub_100243064(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_100243070@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF250;
  if (qword_1007B3D10 != -1)
    swift_once(&qword_1007B3D10, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(_QWORD *)(v7 + 64) = &off_1007BB180;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(_QWORD *)(v7 + 104) = &off_1007BB1A0;
  *a3 = v7;
  if ((objc_msgSend(a1, "hasSuccess") & 1) != 0)
  {
    sub_100244418(a2 + 8, (uint64_t)(a3 + 1));
    v8 = a2 + *(int *)(_s15MacApprovePhoneV21HandleResponseContextVMa(0) + 24);
    v9 = _s15MacApprovePhoneV25HandleConfirmationContextVMa(0);
    sub_100244384(v8, (uint64_t)a3 + *(int *)(v9 + 24), type metadata accessor for SDAuthenticationSessionMetrics);
    LOBYTE(v8) = objc_msgSend(a1, "success");

    result = sub_1002443C8(a2, _s15MacApprovePhoneV21HandleResponseContextVMa);
    *((_BYTE *)a3 + *(int *)(v9 + 28)) = v8;
  }
  else
  {
    v11 = sub_100244304();
    v12 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v11, 0, 0);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0xD000000000000016;
    *(_QWORD *)(v13 + 16) = 0x8000000100612950;
    swift_willThrow(v12);

    sub_1002443C8(a2, _s15MacApprovePhoneV21HandleResponseContextVMa);
    return swift_bridgeObjectRelease(*a3);
  }
  return result;
}

uint64_t sub_100243224(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

void sub_100243230(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  int v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  id v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  void (*v98)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  void (*v122)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t (*v128)(uint64_t);
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[2];
  char v174[8];
  uint64_t v175;

  v175 = a2;
  v169 = a3;
  v140 = _s15MacApprovePhoneV25HandleConfirmationContextVMa(0);
  __chkstk_darwin(v140);
  v144 = (uint64_t *)((char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100008384(&qword_1007B5D10);
  __chkstk_darwin(v5);
  v149 = (char *)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = _s15MacApprovePhoneV18HandleTokenContextVMa(0);
  __chkstk_darwin(v141);
  v148 = (uint64_t *)((char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100008384(&qword_1007B5D18);
  __chkstk_darwin(v8);
  v155 = (char *)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = _s15MacApprovePhoneV21HandleResponseContextVMa(0);
  v147 = *(_QWORD *)(v150 - 8);
  v10 = __chkstk_darwin(v150);
  v142 = (uint64_t)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v143 = (uint64_t)&v140 - v13;
  __chkstk_darwin(v12);
  v154 = (uint64_t *)((char *)&v140 - v14);
  v15 = sub_100008384(&qword_1007B5D20);
  __chkstk_darwin(v15);
  v161 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = _s15MacApprovePhoneV20HandleRequestContextVMa(0);
  v153 = *(_QWORD *)(v156 - 8);
  v17 = __chkstk_darwin(v156);
  v145 = (uint64_t)&v140 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v146 = (uint64_t)&v140 - v20;
  __chkstk_darwin(v19);
  v160 = (uint64_t *)((char *)&v140 - v21);
  v22 = sub_100008384(&qword_1007B5D28);
  __chkstk_darwin(v22);
  v168 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = _s15MacApprovePhoneV18InitialLockContextVMa(0);
  v166 = *(_QWORD *)(v24 - 8);
  v167 = v24;
  v25 = __chkstk_darwin(v24);
  v158 = (uint64_t)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v159 = (uint64_t)&v140 - v27;
  v162 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0);
  v157 = *(_QWORD *)(v162 - 8);
  v28 = __chkstk_darwin(v162);
  v151 = (uint64_t)&v140 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v152 = (uint64_t)&v140 - v31;
  __chkstk_darwin(v30);
  v165 = (uint64_t *)((char *)&v140 - v32);
  v33 = sub_100008384(&qword_1007B5D30);
  __chkstk_darwin(v33);
  v35 = (char *)&v140 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa(0);
  v36 = *(_QWORD *)(v171 - 8);
  v37 = __chkstk_darwin(v171);
  v163 = (uint64_t)&v140 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v164 = (uint64_t)&v140 - v40;
  __chkstk_darwin(v39);
  v170 = (uint64_t *)((char *)&v140 - v41);
  v42 = sub_100008384(&qword_1007B5D38);
  __chkstk_darwin(v42);
  v44 = (char *)&v140 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = _s15MacApprovePhoneV17InitialKeyContextVMa(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = __chkstk_darwin(v45);
  v49 = (char *)&v140 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v51 = (char *)&v140 - v50;
  v52 = a1;
  sub_100244418(a1, (uint64_t)v174);
  v53 = sub_100008384(&qword_1007B5D40);
  v54 = sub_100221EDC(0, &qword_1007B5D48, off_1007112A0);
  if (swift_dynamicCast(v173, v174, v53, v54, 6))
  {
    v55 = (void *)v173[0];
    sub_100244418(v175, (uint64_t)v174);
    v56 = sub_100008384(&qword_1007B5D70);
    v57 = swift_dynamicCast(v44, v174, v56, v45, 6);
    v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
    if (v57)
    {
      v58(v44, 0, 1, v45);
      sub_100221DB4((uint64_t)v44, (uint64_t)v51, _s15MacApprovePhoneV17InitialKeyContextVMa);
      sub_100244384((uint64_t)v51, (uint64_t)v49, _s15MacApprovePhoneV17InitialKeyContextVMa);
      v59 = v55;
      v60 = v170;
      v61 = v172;
      sub_1002420DC(v59, (uint64_t)v49, v170);
      if (!v61)
      {
        v102 = v169;
        v169[3] = v171;
        v102[4] = &off_10071E738;
        v103 = sub_100244348(v102);
        sub_100221DB4((uint64_t)v60, (uint64_t)v103, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);

        sub_1002443C8((uint64_t)v51, _s15MacApprovePhoneV17InitialKeyContextVMa);
        return;
      }
      v62 = _s15MacApprovePhoneV17InitialKeyContextVMa;
      v63 = (uint64_t)v51;
      goto LABEL_34;
    }
    v58(v44, 1, 1, v45);
    sub_10000D0F0((uint64_t)v44, &qword_1007B5D38);
    v75 = sub_100244304();
    v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v75, 0, 0);
    *(_DWORD *)v77 = 10;
    v78 = 0xD000000000000046;
    v79 = "Invalid previous context as InitialKeyContext, message may be replayed";
LABEL_10:
    *(_QWORD *)(v77 + 8) = v78;
    *(_QWORD *)(v77 + 16) = (unint64_t)(v79 - 32) | 0x8000000000000000;
    swift_willThrow(v76);

    return;
  }
  v64 = v175;
  sub_100244418(v52, (uint64_t)v174);
  if (swift_dynamicCast(v173, v174, v53, &type metadata for SDAuthenticationApproveResult, 6))
  {
    v66 = v173[0];
    v65 = v173[1];
    sub_100244418(v64, (uint64_t)v174);
    v67 = sub_100008384(&qword_1007B5D70);
    v68 = v171;
    v69 = swift_dynamicCast(v35, v174, v67, v171, 6);
    v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
    if (v69)
    {
      v70(v35, 0, 1, v68);
      v71 = v164;
      sub_100221DB4((uint64_t)v35, v164, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
      v72 = v163;
      sub_100244384(v71, v163, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
      sub_100244404(v66, v65);
      v73 = v165;
      v74 = v172;
      sub_1002423FC(v66, v65, v72, v165);
      if (!v74)
      {
        v114 = v169;
        v169[3] = v162;
        v114[4] = &off_10071E748;
        v115 = sub_100244348(v114);
        sub_100221DB4((uint64_t)v73, (uint64_t)v115, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
        sub_100225AA0(v66, v65);
        sub_1002443C8(v71, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
        return;
      }
      sub_1002443C8(v71, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    }
    else
    {
      v70(v35, 1, 1, v68);
      sub_10000D0F0((uint64_t)v35, &qword_1007B5D30);
      v90 = sub_100244304();
      v91 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v90, 0, 0);
      *(_DWORD *)v92 = 10;
      *(_QWORD *)(v92 + 8) = 0xD00000000000004FLL;
      *(_QWORD *)(v92 + 16) = 0x80000001006127D0;
      swift_willThrow(v91);
    }
    sub_100225AA0(v66, v65);
    return;
  }
  sub_100244418(v52, (uint64_t)v174);
  v80 = sub_100221EDC(0, &qword_1007B5D50, off_1007112C0);
  if (!swift_dynamicCast(v173, v174, v53, v80, 6))
  {
    sub_100244418(v52, (uint64_t)v174);
    v93 = sub_100221EDC(0, &qword_1007B5D58, off_1007112C8);
    if (swift_dynamicCast(v173, v174, v53, v93, 6))
    {
      v55 = (void *)v173[0];
      sub_100244418(v64, (uint64_t)v174);
      v94 = sub_100008384(&qword_1007B5D70);
      v96 = (uint64_t)v161;
      v95 = v162;
      v97 = swift_dynamicCast(v161, v174, v94, v162, 6);
      v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
      if (!v97)
      {
        v98(v96, 1, 1, v95);
        sub_10000D0F0(v96, &qword_1007B5D20);
        v116 = sub_100244304();
        v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v116, 0, 0);
        *(_DWORD *)v77 = 10;
        v78 = 0xD00000000000004DLL;
        v79 = "Invalid previous context as HandleUserApprovalResult, message may be replayed";
        goto LABEL_10;
      }
      v98(v96, 0, 1, v95);
      v86 = v152;
      sub_100221DB4(v96, v152, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      v99 = v151;
      sub_100244384(v86, v151, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      v59 = v55;
      v100 = v154;
      v101 = v172;
      sub_100242AE0(v59, v99, v154);
      if (v101)
      {
        v62 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa;
        goto LABEL_33;
      }
      v133 = v169;
      v169[3] = v150;
      v133[4] = &off_10071E768;
      v134 = sub_100244348(v133);
      sub_100221DB4((uint64_t)v100, (uint64_t)v134, _s15MacApprovePhoneV21HandleResponseContextVMa);

      v128 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa;
    }
    else
    {
      sub_100244418(v52, (uint64_t)v174);
      v105 = sub_100221EDC(0, &qword_1007B5D60, off_1007112D0);
      if (swift_dynamicCast(v173, v174, v53, v105, 6))
      {
        v55 = (void *)v173[0];
        sub_100244418(v64, (uint64_t)v174);
        v106 = sub_100008384(&qword_1007B5D70);
        v107 = (uint64_t)v155;
        v108 = v156;
        v109 = swift_dynamicCast(v155, v174, v106, v156, 6);
        v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56);
        if (!v109)
        {
          v110(v107, 1, 1, v108);
          sub_10000D0F0(v107, &qword_1007B5D18);
          v129 = sub_100244304();
          v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v129, 0, 0);
          *(_DWORD *)v77 = 10;
          v78 = 0xD000000000000049;
          v79 = "Invalid previous context as HandleRequestContext, message may be replayed";
          goto LABEL_10;
        }
        v110(v107, 0, 1, v108);
        v86 = v146;
        sub_100221DB4(v107, v146, _s15MacApprovePhoneV20HandleRequestContextVMa);
        v111 = v145;
        sub_100244384(v86, v145, _s15MacApprovePhoneV20HandleRequestContextVMa);
        v59 = v55;
        v112 = v148;
        v113 = v172;
        sub_100242D20(v59, v111, v148);
        if (v113)
        {
          v62 = _s15MacApprovePhoneV20HandleRequestContextVMa;
          goto LABEL_33;
        }
        v136 = v169;
        v169[3] = v141;
        v136[4] = &off_10071E778;
        v137 = sub_100244348(v136);
        sub_100221DB4((uint64_t)v112, (uint64_t)v137, _s15MacApprovePhoneV18HandleTokenContextVMa);

        v128 = _s15MacApprovePhoneV20HandleRequestContextVMa;
      }
      else
      {
        sub_100244418(v52, (uint64_t)v174);
        v117 = sub_100221EDC(0, &qword_1007B5D68, off_1007112A8);
        if (!swift_dynamicCast(v173, v174, v53, v117, 6))
        {
          v130 = sub_100244304();
          v131 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v130, 0, 0);
          *(_DWORD *)v132 = 10;
          *(_QWORD *)(v132 + 8) = 0xD00000000000001FLL;
          *(_QWORD *)(v132 + 16) = 0x8000000100612670;
          swift_willThrow(v131);
          return;
        }
        v55 = (void *)v173[0];
        sub_100244418(v64, (uint64_t)v174);
        v118 = sub_100008384(&qword_1007B5D70);
        v119 = (uint64_t)v149;
        v120 = v150;
        v121 = swift_dynamicCast(v149, v174, v118, v150, 6);
        v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56);
        if (!v121)
        {
          v122(v119, 1, 1, v120);
          sub_10000D0F0(v119, &qword_1007B5D10);
          v135 = sub_100244304();
          v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v135, 0, 0);
          *(_DWORD *)v77 = 10;
          v78 = 0xD00000000000004ALL;
          v79 = "Invalid previous context as HandleResponseContext, message may be replayed";
          goto LABEL_10;
        }
        v122(v119, 0, 1, v120);
        v86 = v143;
        sub_100221DB4(v119, v143, _s15MacApprovePhoneV21HandleResponseContextVMa);
        v123 = v142;
        sub_100244384(v86, v142, _s15MacApprovePhoneV21HandleResponseContextVMa);
        v59 = v55;
        v124 = v144;
        v125 = v172;
        sub_100243070(v59, v123, v144);
        if (v125)
        {
          v62 = _s15MacApprovePhoneV21HandleResponseContextVMa;
          goto LABEL_33;
        }
        v138 = v169;
        v169[3] = v140;
        v138[4] = &off_10071E788;
        v139 = sub_100244348(v138);
        sub_100221DB4((uint64_t)v124, (uint64_t)v139, _s15MacApprovePhoneV25HandleConfirmationContextVMa);

        v128 = _s15MacApprovePhoneV21HandleResponseContextVMa;
      }
    }
LABEL_43:
    sub_1002443C8(v86, v128);
    return;
  }
  v55 = (void *)v173[0];
  sub_100244418(v64, (uint64_t)v174);
  v81 = sub_100008384(&qword_1007B5D70);
  v82 = v167;
  v83 = (uint64_t)v168;
  v84 = swift_dynamicCast(v168, v174, v81, v167, 6);
  v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56);
  if (!v84)
  {
    v85(v83, 1, 1, v82);
    sub_10000D0F0(v83, &qword_1007B5D28);
    v104 = sub_100244304();
    v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v104, 0, 0);
    *(_DWORD *)v77 = 10;
    v78 = 0xD000000000000047;
    v79 = "Invalid previous context as InitialLockContext, message may be replayed";
    goto LABEL_10;
  }
  v85(v83, 0, 1, v82);
  v86 = v159;
  sub_100221DB4(v83, v159, _s15MacApprovePhoneV18InitialLockContextVMa);
  v87 = v158;
  sub_100244384(v86, v158, _s15MacApprovePhoneV18InitialLockContextVMa);
  v59 = v55;
  v88 = v160;
  v89 = v172;
  sub_100242720(v59, v87, v160);
  if (!v89)
  {
    v126 = v169;
    v169[3] = v156;
    v126[4] = &off_10071E758;
    v127 = sub_100244348(v126);
    sub_100221DB4((uint64_t)v88, (uint64_t)v127, _s15MacApprovePhoneV20HandleRequestContextVMa);

    v128 = _s15MacApprovePhoneV18InitialLockContextVMa;
    goto LABEL_43;
  }
  v62 = _s15MacApprovePhoneV18InitialLockContextVMa;
LABEL_33:
  v63 = v86;
LABEL_34:
  sub_1002443C8(v63, v62);

}

uint64_t sub_100244200@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100244384(v1, a1, type metadata accessor for SDAuthenticationCommonOperationInput);
}

uint64_t sub_100244224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100244418(v2 + *(int *)(a1 + 20), a2);
}

void sub_100244244(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_100243230(a1, a2, a3);
}

uint64_t _s15MacApprovePhoneV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B60F8, (uint64_t)&_s15MacApprovePhoneV25HandleConfirmationContextVMn);
}

uint64_t _s15MacApprovePhoneV18HandleTokenContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5FB8, (uint64_t)&_s15MacApprovePhoneV18HandleTokenContextVMn);
}

uint64_t _s15MacApprovePhoneV21HandleResponseContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B6058, (uint64_t)&_s15MacApprovePhoneV21HandleResponseContextVMn);
}

uint64_t _s15MacApprovePhoneV20HandleRequestContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5F10, (uint64_t)&_s15MacApprovePhoneV20HandleRequestContextVMn);
}

uint64_t _s15MacApprovePhoneV24HandleUserApprovalResultVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5E70, (uint64_t)&_s15MacApprovePhoneV24HandleUserApprovalResultVMn);
}

uint64_t _s15MacApprovePhoneV26HandleApprovePromptContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B5DD0, (uint64_t)&_s15MacApprovePhoneV26HandleApprovePromptContextVMn);
}

uint64_t sub_1002442D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_100244304()
{
  unint64_t result;

  result = qword_1007BCFF0;
  if (!qword_1007BCFF0)
  {
    result = swift_getWitnessTable(&unk_1005D7BE0, &type metadata for SFAuthenticationErrorMessage);
    atomic_store(result, (unint64_t *)&qword_1007BCFF0);
  }
  return result;
}

_QWORD *sub_100244348(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100244384(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002443C8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100244404(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10022E4A8(result, a2);
  return result;
}

uint64_t sub_100244418(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10024445C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  int *v88;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a3[6];
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v88 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v88[7];
    v80 = v88[8];
    v81 = (_QWORD *)(a1 + v79);
    v82 = (uint64_t *)((char *)a2 + v79);
    v83 = v82[1];
    *v81 = *v82;
    v81[1] = v83;
    v84 = (_QWORD *)(a1 + v80);
    v85 = (uint64_t *)((char *)a2 + v80);
    v86 = v85[1];
    *v84 = *v85;
    v84[1] = v86;
    *(_BYTE *)(a1 + v88[9]) = *((_BYTE *)a2 + v88[9]);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v86);
  }
  return a1;
}

uint64_t sub_100244B88(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
}

uint64_t sub_100244E6C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  int *v87;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v87 = a3;
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = v87[7];
  v79 = v87[8];
  v80 = (_QWORD *)(a1 + v78);
  v81 = (uint64_t *)((char *)a2 + v78);
  v82 = v81[1];
  *v80 = *v81;
  v80[1] = v82;
  v83 = (_QWORD *)(a1 + v79);
  v84 = (uint64_t *)((char *)a2 + v79);
  v85 = v84[1];
  *v83 = *v84;
  v83[1] = v85;
  *(_BYTE *)(a1 + v87[9]) = *((_BYTE *)a2 + v87[9]);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v85);
  return a1;
}

_QWORD *sub_100245574(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int *v116;
  _QWORD *v117;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490(a1 + 1, v7);
  v116 = a3;
  v117 = a2;
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }
  if (v89)
  {
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v116[7];
  v106 = (_QWORD *)((char *)a1 + v105);
  v107 = (_QWORD *)((char *)v117 + v105);
  *v106 = *v107;
  v108 = v107[1];
  v109 = v106[1];
  v106[1] = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = v116[8];
  v111 = (_QWORD *)((char *)a1 + v110);
  v112 = (_QWORD *)((char *)v117 + v110);
  *v111 = *v112;
  v113 = v112[1];
  v114 = v111[1];
  v111[1] = v113;
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRelease(v114);
  *((_BYTE *)a1 + v116[9]) = *((_BYTE *)v117 + v116[9]);
  return a1;
}

uint64_t sub_10024602C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a3[6];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t *sub_1002466DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v117;
  uint64_t *v118;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v117 = a3;
  v118 = a2;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v117[7];
  v105 = (uint64_t *)((char *)a1 + v104);
  v106 = (uint64_t *)((char *)v118 + v104);
  v108 = *v106;
  v107 = v106[1];
  v109 = v105[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease(v109);
  v110 = v117[8];
  v111 = (uint64_t *)((char *)a1 + v110);
  v112 = (uint64_t *)((char *)v118 + v110);
  v114 = *v112;
  v113 = v112[1];
  v115 = v111[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease(v115);
  *((_BYTE *)a1 + v117[9]) = *((_BYTE *)v118 + v117[9]);
  return a1;
}

uint64_t sub_100247158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100247164);
}

uint64_t sub_100247168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100247174);
}

uint64_t sub_100247178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10024FCEC(a1, a2, a3, (uint64_t)&unk_1005CF480, (uint64_t)&unk_1005CF480, (uint64_t)&unk_1005CF498);
}

uint64_t sub_100247190(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v87;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a2 + 6;
    v13 = a2[7];
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
    }
    else
    {
      v14 = *v12;
      sub_10022E4A8(*v12, a2[7]);
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v13;
    }
    v15 = *(int *)(a3 + 28);
    v16 = (char *)(a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    v87 = a3;
    if (v20(v17, 1, v18))
    {
      v21 = sub_100008384(&qword_1007C4330);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v22 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v23 = v22[5];
    v24 = &v16[v23];
    v25 = &v17[v23];
    if (v20(&v17[v23], 1, v18))
    {
      v26 = sub_100008384(&qword_1007C4330);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v25, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v18);
    }
    v27 = v22[6];
    v28 = &v16[v27];
    v29 = &v17[v27];
    if (v20(&v17[v27], 1, v18))
    {
      v30 = sub_100008384(&qword_1007C4330);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v28, v29, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v28, 0, 1, v18);
    }
    v31 = v22[7];
    v32 = &v16[v31];
    v33 = &v17[v31];
    if (v20(&v17[v31], 1, v18))
    {
      v34 = sub_100008384(&qword_1007C4330);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v32, v33, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v32, 0, 1, v18);
    }
    v35 = v22[8];
    v36 = &v16[v35];
    v37 = &v17[v35];
    if (v20(&v17[v35], 1, v18))
    {
      v38 = sub_100008384(&qword_1007C4330);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v36, v37, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v36, 0, 1, v18);
    }
    v39 = v22[9];
    v40 = &v16[v39];
    v41 = &v17[v39];
    if (v20(&v17[v39], 1, v18))
    {
      v42 = sub_100008384(&qword_1007C4330);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v40, v41, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v40, 0, 1, v18);
    }
    v43 = v22[10];
    v44 = &v16[v43];
    v45 = &v17[v43];
    if (v20(&v17[v43], 1, v18))
    {
      v46 = sub_100008384(&qword_1007C4330);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v44, v45, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v44, 0, 1, v18);
    }
    v47 = v22[11];
    v48 = &v16[v47];
    v49 = &v17[v47];
    if (v20(&v17[v47], 1, v18))
    {
      v50 = sub_100008384(&qword_1007C4330);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v18);
    }
    v51 = v22[12];
    v52 = &v16[v51];
    v53 = &v17[v51];
    if (v20(&v17[v51], 1, v18))
    {
      v54 = sub_100008384(&qword_1007C4330);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v52, v53, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v52, 0, 1, v18);
    }
    v16[v22[13]] = v17[v22[13]];
    v55 = v22[14];
    v56 = &v16[v55];
    v57 = &v17[v55];
    if (v20(&v17[v55], 1, v18))
    {
      v58 = sub_100008384(&qword_1007C4330);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v56, v57, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v56, 0, 1, v18);
    }
    v59 = v22[15];
    v60 = &v16[v59];
    v61 = &v17[v59];
    if (v20(&v17[v59], 1, v18))
    {
      v62 = sub_100008384(&qword_1007C4330);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v60, v61, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v60, 0, 1, v18);
    }
    v63 = v22[16];
    v64 = &v16[v63];
    v65 = &v17[v63];
    if (v20(&v17[v63], 1, v18))
    {
      v66 = sub_100008384(&qword_1007C4330);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v64, v65, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v64, 0, 1, v18);
    }
    v67 = v22[17];
    v68 = &v16[v67];
    v69 = &v17[v67];
    if (v20(&v17[v67], 1, v18))
    {
      v70 = sub_100008384(&qword_1007C4330);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v68, v69, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v68, 0, 1, v18);
    }
    v71 = v22[18];
    v72 = &v16[v71];
    v73 = &v17[v71];
    *(_DWORD *)v72 = *(_DWORD *)v73;
    v72[4] = v73[4];
    v16[v22[19]] = v17[v22[19]];
    v74 = v22[20];
    v75 = &v16[v74];
    v76 = &v17[v74];
    v77 = *((_QWORD *)v76 + 1);
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *((_QWORD *)v75 + 1) = v77;
    v78 = v22[21];
    v79 = &v16[v78];
    v80 = &v17[v78];
    v81 = *((_QWORD *)v80 + 1);
    *(_QWORD *)v79 = *(_QWORD *)v80;
    *((_QWORD *)v79 + 1) = v81;
    v82 = *(int *)(v87 + 32);
    v83 = *(int *)(v87 + 36);
    v84 = *(void **)((char *)a2 + v82);
    *(_QWORD *)(a1 + v82) = v84;
    *(_BYTE *)(a1 + v83) = *((_BYTE *)a2 + v83);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v81);
    v85 = v84;
  }
  return a1;
}

void sub_1002478CC(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(a1 + 1);
  v4 = a1[7];
  if (v4 >> 60 != 15)
    sub_100225AB4(a1[6], v4);
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);

}

uint64_t sub_100247BB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v86;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v11 = a2 + 6;
  v12 = a2[7];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_10022E4A8(*v11, a2[7]);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v12;
  }
  v14 = *(int *)(a3 + 28);
  v15 = (char *)(a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v86 = a3;
  if (v19(v16, 1, v17))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v21 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v22 = v21[5];
  v23 = &v15[v22];
  v24 = &v16[v22];
  if (v19(&v16[v22], 1, v17))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v24, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
  }
  v26 = v21[6];
  v27 = &v15[v26];
  v28 = &v16[v26];
  if (v19(&v16[v26], 1, v17))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v28, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
  }
  v30 = v21[7];
  v31 = &v15[v30];
  v32 = &v16[v30];
  if (v19(&v16[v30], 1, v17))
  {
    v33 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v31, v32, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v31, 0, 1, v17);
  }
  v34 = v21[8];
  v35 = &v15[v34];
  v36 = &v16[v34];
  if (v19(&v16[v34], 1, v17))
  {
    v37 = sub_100008384(&qword_1007C4330);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v35, v36, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v35, 0, 1, v17);
  }
  v38 = v21[9];
  v39 = &v15[v38];
  v40 = &v16[v38];
  if (v19(&v16[v38], 1, v17))
  {
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v39, v40, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v39, 0, 1, v17);
  }
  v42 = v21[10];
  v43 = &v15[v42];
  v44 = &v16[v42];
  if (v19(&v16[v42], 1, v17))
  {
    v45 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v43, v44, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v43, 0, 1, v17);
  }
  v46 = v21[11];
  v47 = &v15[v46];
  v48 = &v16[v46];
  if (v19(&v16[v46], 1, v17))
  {
    v49 = sub_100008384(&qword_1007C4330);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v47, v48, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v47, 0, 1, v17);
  }
  v50 = v21[12];
  v51 = &v15[v50];
  v52 = &v16[v50];
  if (v19(&v16[v50], 1, v17))
  {
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v51, v52, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v51, 0, 1, v17);
  }
  v15[v21[13]] = v16[v21[13]];
  v54 = v21[14];
  v55 = &v15[v54];
  v56 = &v16[v54];
  if (v19(&v16[v54], 1, v17))
  {
    v57 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v55, v56, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v55, 0, 1, v17);
  }
  v58 = v21[15];
  v59 = &v15[v58];
  v60 = &v16[v58];
  if (v19(&v16[v58], 1, v17))
  {
    v61 = sub_100008384(&qword_1007C4330);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v59, v60, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v17);
  }
  v62 = v21[16];
  v63 = &v15[v62];
  v64 = &v16[v62];
  if (v19(&v16[v62], 1, v17))
  {
    v65 = sub_100008384(&qword_1007C4330);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v63, v64, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v63, 0, 1, v17);
  }
  v66 = v21[17];
  v67 = &v15[v66];
  v68 = &v16[v66];
  if (v19(&v16[v66], 1, v17))
  {
    v69 = sub_100008384(&qword_1007C4330);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v67, v68, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v67, 0, 1, v17);
  }
  v70 = v21[18];
  v71 = &v15[v70];
  v72 = &v16[v70];
  *(_DWORD *)v71 = *(_DWORD *)v72;
  v71[4] = v72[4];
  v15[v21[19]] = v16[v21[19]];
  v73 = v21[20];
  v74 = &v15[v73];
  v75 = &v16[v73];
  v76 = *((_QWORD *)v75 + 1);
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = v76;
  v77 = v21[21];
  v78 = &v15[v77];
  v79 = &v16[v77];
  v80 = *((_QWORD *)v79 + 1);
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *((_QWORD *)v78 + 1) = v80;
  v81 = *(int *)(v86 + 32);
  v82 = *(int *)(v86 + 36);
  v83 = *(void **)((char *)a2 + v81);
  *(_QWORD *)(a1 + v81) = v83;
  *(_BYTE *)(a1 + v82) = *((_BYTE *)a2 + v82);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v80);
  v84 = v83;
  return a1;
}

_QWORD *sub_1002482C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  int v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  id v113;
  uint64_t v115;
  _QWORD *v116;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_10023D490(a1 + 1, a2 + 1);
  v8 = a2 + 6;
  v9 = a2[7];
  if (a1[7] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_10022E4A8(*v8, a2[7]);
      a1[6] = v10;
      a1[7] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_10023D5F8((uint64_t)(a1 + 6));
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_10022E4A8(*v8, a2[7]);
  v12 = a1[6];
  v13 = a1[7];
  a1[6] = v11;
  a1[7] = v9;
  sub_100225AB4(v12, v13);
LABEL_8:
  v115 = a3;
  v116 = a2;
  v14 = *(int *)(a3 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_13:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_14:
  v23 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v24 = v23[5];
  v25 = &v15[v24];
  v26 = &v16[v24];
  v27 = v19(&v15[v24], 1, v17);
  v28 = v19(v26, 1, v17);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v26, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v25, 0, 1, v17);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
LABEL_19:
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v25, v26, v17);
LABEL_20:
  v30 = v23[6];
  v31 = &v15[v30];
  v32 = &v16[v30];
  v33 = v19(&v15[v30], 1, v17);
  v34 = v19(v32, 1, v17);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v31, v32, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v31, 0, 1, v17);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v31, v17);
LABEL_25:
    v35 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v31, v32, v17);
LABEL_26:
  v36 = v23[7];
  v37 = &v15[v36];
  v38 = &v16[v36];
  v39 = v19(&v15[v36], 1, v17);
  v40 = v19(v38, 1, v17);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v37, v38, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v37, 0, 1, v17);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v37, v17);
LABEL_31:
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v37, v38, v17);
LABEL_32:
  v42 = v23[8];
  v43 = &v15[v42];
  v44 = &v16[v42];
  v45 = v19(&v15[v42], 1, v17);
  v46 = v19(v44, 1, v17);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v43, v44, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v43, 0, 1, v17);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v43, v17);
LABEL_37:
    v47 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v43, v44, v17);
LABEL_38:
  v48 = v23[9];
  v49 = &v15[v48];
  v50 = &v16[v48];
  v51 = v19(&v15[v48], 1, v17);
  v52 = v19(v50, 1, v17);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v49, v50, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v49, 0, 1, v17);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v49, v17);
LABEL_43:
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v49, v50, v17);
LABEL_44:
  v54 = v23[10];
  v55 = &v15[v54];
  v56 = &v16[v54];
  v57 = v19(&v15[v54], 1, v17);
  v58 = v19(v56, 1, v17);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v55, v56, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v55, 0, 1, v17);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v55, v17);
LABEL_49:
    v59 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v55, v56, v17);
LABEL_50:
  v60 = v23[11];
  v61 = &v15[v60];
  v62 = &v16[v60];
  v63 = v19(&v15[v60], 1, v17);
  v64 = v19(v62, 1, v17);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v61, v62, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v61, 0, 1, v17);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v61, v17);
LABEL_55:
    v65 = sub_100008384(&qword_1007C4330);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v61, v62, v17);
LABEL_56:
  v66 = v23[12];
  v67 = &v15[v66];
  v68 = &v16[v66];
  v69 = v19(&v15[v66], 1, v17);
  v70 = v19(v68, 1, v17);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v67, v68, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v67, 0, 1, v17);
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v67, v17);
LABEL_61:
    v71 = sub_100008384(&qword_1007C4330);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v67, v68, v17);
LABEL_62:
  v15[v23[13]] = v16[v23[13]];
  v72 = v23[14];
  v73 = &v15[v72];
  v74 = &v16[v72];
  v75 = v19(&v15[v72], 1, v17);
  v76 = v19(v74, 1, v17);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v73, v74, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v73, 0, 1, v17);
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v73, v17);
LABEL_67:
    v77 = sub_100008384(&qword_1007C4330);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_68;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v73, v74, v17);
LABEL_68:
  v78 = v23[15];
  v79 = &v15[v78];
  v80 = &v16[v78];
  v81 = v19(&v15[v78], 1, v17);
  v82 = v19(v80, 1, v17);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v79, v80, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v79, 0, 1, v17);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v79, v17);
LABEL_73:
    v83 = sub_100008384(&qword_1007C4330);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v79, v80, v17);
LABEL_74:
  v84 = v23[16];
  v85 = &v15[v84];
  v86 = &v16[v84];
  v87 = v19(&v15[v84], 1, v17);
  v88 = v19(v86, 1, v17);
  if (v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v85, v86, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v85, 0, 1, v17);
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v85, v17);
LABEL_79:
    v89 = sub_100008384(&qword_1007C4330);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_80;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v85, v86, v17);
LABEL_80:
  v90 = v23[17];
  v91 = &v15[v90];
  v92 = &v16[v90];
  v93 = v19(&v15[v90], 1, v17);
  v94 = v19(v92, 1, v17);
  if (!v93)
  {
    if (!v94)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v91, v92, v17);
      goto LABEL_86;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v91, v17);
    goto LABEL_85;
  }
  if (v94)
  {
LABEL_85:
    v95 = sub_100008384(&qword_1007C4330);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_86;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v91, v92, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v91, 0, 1, v17);
LABEL_86:
  v96 = v23[18];
  v97 = &v15[v96];
  v98 = &v16[v96];
  v99 = *(_DWORD *)v98;
  v97[4] = v98[4];
  *(_DWORD *)v97 = v99;
  v15[v23[19]] = v16[v23[19]];
  v100 = v23[20];
  v101 = &v15[v100];
  v102 = &v16[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v23[21];
  v106 = &v15[v105];
  v107 = &v16[v105];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v108 = *((_QWORD *)v107 + 1);
  v109 = *((_QWORD *)v106 + 1);
  *((_QWORD *)v106 + 1) = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  v110 = *(int *)(v115 + 32);
  v111 = *(void **)((char *)a1 + v110);
  v112 = *(void **)((char *)v116 + v110);
  *(_QWORD *)((char *)a1 + v110) = v112;
  v113 = v112;

  *((_BYTE *)a1 + *(int *)(v115 + 36)) = *((_BYTE *)v116 + *(int *)(v115 + 36));
  return a1;
}

uint64_t sub_100248DB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = a3[7];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  return a1;
}

uint64_t *sub_10024945C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v111;
  uint64_t *v112;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v7 = a2 + 6;
  v8 = a1[7];
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = a2[7];
  if (v9 >> 60 == 15)
  {
    sub_10023D5F8((uint64_t)(a1 + 6));
LABEL_4:
    *((_OWORD *)a1 + 3) = *v7;
    goto LABEL_6;
  }
  v10 = a1[6];
  a1[6] = *(_QWORD *)v7;
  a1[7] = v9;
  sub_100225AB4(v10, v8);
LABEL_6:
  v111 = a3;
  v112 = a2;
  v11 = *(int *)(a3 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_11:
    v19 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_12:
  v20 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v21 = v20[5];
  v22 = &v12[v21];
  v23 = &v13[v21];
  v24 = v16(&v12[v21], 1, v14);
  v25 = v16(v23, 1, v14);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v23, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, v14);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
LABEL_17:
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v22, v23, v14);
LABEL_18:
  v27 = v20[6];
  v28 = &v12[v27];
  v29 = &v13[v27];
  v30 = v16(&v12[v27], 1, v14);
  v31 = v16(v29, 1, v14);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v28, v29, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v14);
LABEL_23:
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v28, v29, v14);
LABEL_24:
  v33 = v20[7];
  v34 = &v12[v33];
  v35 = &v13[v33];
  v36 = v16(&v12[v33], 1, v14);
  v37 = v16(v35, 1, v14);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v34, v35, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v34, 0, 1, v14);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v34, v14);
LABEL_29:
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v34, v35, v14);
LABEL_30:
  v39 = v20[8];
  v40 = &v12[v39];
  v41 = &v13[v39];
  v42 = v16(&v12[v39], 1, v14);
  v43 = v16(v41, 1, v14);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v40, v41, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v40, v14);
LABEL_35:
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v40, v41, v14);
LABEL_36:
  v45 = v20[9];
  v46 = &v12[v45];
  v47 = &v13[v45];
  v48 = v16(&v12[v45], 1, v14);
  v49 = v16(v47, 1, v14);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v46, v47, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v46, 0, 1, v14);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v46, v14);
LABEL_41:
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v46, v47, v14);
LABEL_42:
  v51 = v20[10];
  v52 = &v12[v51];
  v53 = &v13[v51];
  v54 = v16(&v12[v51], 1, v14);
  v55 = v16(v53, 1, v14);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v52, v53, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v52, v14);
LABEL_47:
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v52, v53, v14);
LABEL_48:
  v57 = v20[11];
  v58 = &v12[v57];
  v59 = &v13[v57];
  v60 = v16(&v12[v57], 1, v14);
  v61 = v16(v59, 1, v14);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v58, v59, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v58, 0, 1, v14);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v58, v14);
LABEL_53:
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v58, v59, v14);
LABEL_54:
  v63 = v20[12];
  v64 = &v12[v63];
  v65 = &v13[v63];
  v66 = v16(&v12[v63], 1, v14);
  v67 = v16(v65, 1, v14);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v64, v65, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v64, v14);
LABEL_59:
    v68 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v64, v65, v14);
LABEL_60:
  v12[v20[13]] = v13[v20[13]];
  v69 = v20[14];
  v70 = &v12[v69];
  v71 = &v13[v69];
  v72 = v16(&v12[v69], 1, v14);
  v73 = v16(v71, 1, v14);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v70, v71, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v70, 0, 1, v14);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v70, v14);
LABEL_65:
    v74 = sub_100008384(&qword_1007C4330);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v70, v71, v14);
LABEL_66:
  v75 = v20[15];
  v76 = &v12[v75];
  v77 = &v13[v75];
  v78 = v16(&v12[v75], 1, v14);
  v79 = v16(v77, 1, v14);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v76, v77, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v76, 0, 1, v14);
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v76, v14);
LABEL_71:
    v80 = sub_100008384(&qword_1007C4330);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_72;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v76, v77, v14);
LABEL_72:
  v81 = v20[16];
  v82 = &v12[v81];
  v83 = &v13[v81];
  v84 = v16(&v12[v81], 1, v14);
  v85 = v16(v83, 1, v14);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v82, v83, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v82, 0, 1, v14);
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v82, v14);
LABEL_77:
    v86 = sub_100008384(&qword_1007C4330);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_78;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v82, v83, v14);
LABEL_78:
  v87 = v20[17];
  v88 = &v12[v87];
  v89 = &v13[v87];
  v90 = v16(&v12[v87], 1, v14);
  v91 = v16(v89, 1, v14);
  if (!v90)
  {
    if (!v91)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v88, v89, v14);
      goto LABEL_84;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v88, v14);
    goto LABEL_83;
  }
  if (v91)
  {
LABEL_83:
    v92 = sub_100008384(&qword_1007C4330);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v88, v89, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v88, 0, 1, v14);
LABEL_84:
  v93 = v20[18];
  v94 = &v12[v93];
  v95 = &v13[v93];
  *(_DWORD *)v94 = *(_DWORD *)v95;
  v94[4] = v95[4];
  v12[v20[19]] = v13[v20[19]];
  v96 = v20[20];
  v97 = &v12[v96];
  v98 = &v13[v96];
  v100 = *(_QWORD *)v98;
  v99 = *((_QWORD *)v98 + 1);
  v101 = *((_QWORD *)v97 + 1);
  *(_QWORD *)v97 = v100;
  *((_QWORD *)v97 + 1) = v99;
  swift_bridgeObjectRelease(v101);
  v102 = v20[21];
  v103 = &v12[v102];
  v104 = &v13[v102];
  v106 = *(_QWORD *)v104;
  v105 = *((_QWORD *)v104 + 1);
  v107 = *((_QWORD *)v103 + 1);
  *(_QWORD *)v103 = v106;
  *((_QWORD *)v103 + 1) = v105;
  swift_bridgeObjectRelease(v107);
  v108 = *(int *)(v111 + 32);
  v109 = *(void **)((char *)a1 + v108);
  *(uint64_t *)((char *)a1 + v108) = *(uint64_t *)((char *)v112 + v108);

  *((_BYTE *)a1 + *(int *)(v111 + 36)) = *((_BYTE *)v112 + *(int *)(v111 + 36));
  return a1;
}

uint64_t sub_100249F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100249F0C);
}

uint64_t sub_100249F0C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_100249F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100249F94);
}

char *sub_100249F94(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10024A008(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  v4[2] = &unk_1005CF310;
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1005CF328;
    v4[5] = &unk_1005CF340;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10024A0A8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  int *v94;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a3[6];
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v94 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v94[7];
    v80 = a1 + v79;
    v81 = (uint64_t *)((char *)a2 + v79);
    v82 = *(uint64_t *)((char *)a2 + v79 + 8);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    if (v82 >> 60 == 15)
    {
      *(_OWORD *)v80 = *(_OWORD *)v81;
    }
    else
    {
      v83 = *v81;
      sub_10022E4A8(*v81, v82);
      *(_QWORD *)v80 = v83;
      *(_QWORD *)(v80 + 8) = v82;
    }
    v84 = v94[8];
    v85 = (uint64_t *)(a1 + v84);
    v86 = (uint64_t *)((char *)a2 + v84);
    v87 = *v86;
    v88 = v86[1];
    sub_10022E4A8(*v86, v88);
    *v85 = v87;
    v85[1] = v88;
    v89 = v94[9];
    v90 = v94[10];
    v91 = *(void **)((char *)a2 + v89);
    *(_QWORD *)(a1 + v89) = v91;
    *(_BYTE *)(a1 + v90) = *((_BYTE *)a2 + v90);
    v92 = v91;
  }
  return a1;
}

void sub_10024A808(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  v22 = (_QWORD *)((char *)a1 + a2[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_100225AB4(*v22, v23);
  sub_100225AB4(*(_QWORD *)((char *)a1 + a2[8]), *(_QWORD *)((char *)a1 + a2[8] + 8));

}

uint64_t sub_10024AB08(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  int *v93;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v93 = a3;
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = v93[7];
  v79 = a1 + v78;
  v80 = (uint64_t *)((char *)a2 + v78);
  v81 = *(uint64_t *)((char *)a2 + v78 + 8);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  if (v81 >> 60 == 15)
  {
    *(_OWORD *)v79 = *(_OWORD *)v80;
  }
  else
  {
    v82 = *v80;
    sub_10022E4A8(*v80, v81);
    *(_QWORD *)v79 = v82;
    *(_QWORD *)(v79 + 8) = v81;
  }
  v83 = v93[8];
  v84 = (uint64_t *)(a1 + v83);
  v85 = (uint64_t *)((char *)a2 + v83);
  v86 = *v85;
  v87 = v85[1];
  sub_10022E4A8(*v85, v87);
  *v84 = v86;
  v84[1] = v87;
  v88 = v93[9];
  v89 = v93[10];
  v90 = *(void **)((char *)a2 + v88);
  *(_QWORD *)(a1 + v88) = v90;
  *(_BYTE *)(a1 + v89) = *((_BYTE *)a2 + v89);
  v91 = v90;
  return a1;
}

_QWORD *sub_10024B244(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  id v123;
  int *v125;
  _QWORD *v126;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490(a1 + 1, v7);
  v125 = a3;
  v126 = a2;
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v125[7];
  v106 = (_QWORD *)((char *)a1 + v105);
  v107 = (_QWORD *)((char *)v126 + v105);
  v108 = *(_QWORD *)((char *)v126 + v105 + 8);
  if (*(_QWORD *)((char *)a1 + v105 + 8) >> 60 != 15)
  {
    if (v108 >> 60 != 15)
    {
      v110 = *v107;
      sub_10022E4A8(*v107, v108);
      v111 = *v106;
      v112 = v106[1];
      *v106 = v110;
      v106[1] = v108;
      sub_100225AB4(v111, v112);
      goto LABEL_86;
    }
    sub_10023D5F8((uint64_t)v106);
    goto LABEL_84;
  }
  if (v108 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)v106 = *(_OWORD *)v107;
    goto LABEL_86;
  }
  v109 = *v107;
  sub_10022E4A8(*v107, v108);
  *v106 = v109;
  v106[1] = v108;
LABEL_86:
  v113 = v125[8];
  v114 = (_QWORD *)((char *)a1 + v113);
  v115 = (_QWORD *)((char *)v126 + v113);
  v116 = *v115;
  v117 = v115[1];
  sub_10022E4A8(*v115, v117);
  v118 = *v114;
  v119 = v114[1];
  *v114 = v116;
  v114[1] = v117;
  sub_100225AB4(v118, v119);
  v120 = v125[9];
  v121 = *(void **)((char *)a1 + v120);
  v122 = *(void **)((char *)v126 + v120);
  *(_QWORD *)((char *)a1 + v120) = v122;
  v123 = v122;

  *((_BYTE *)a1 + v125[10]) = *((_BYTE *)v126 + v125[10]);
  return a1;
}

uint64_t sub_10024BD64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a3[6];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  v65 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v65) = *(_BYTE *)(a2 + v65);
  return a1;
}

uint64_t *sub_10024C41C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  int *v116;
  uint64_t *v117;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v116 = a3;
  v117 = a2;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v116[7];
  v105 = (uint64_t *)((char *)a1 + v104);
  v106 = (uint64_t *)((char *)v117 + v104);
  v107 = *(uint64_t *)((char *)a1 + v104 + 8);
  if (v107 >> 60 != 15)
  {
    v108 = v106[1];
    if (v108 >> 60 != 15)
    {
      v109 = *v105;
      *v105 = *v106;
      v105[1] = v108;
      sub_100225AB4(v109, v107);
      goto LABEL_84;
    }
    sub_10023D5F8((uint64_t)v105);
  }
  *(_OWORD *)v105 = *(_OWORD *)v106;
LABEL_84:
  v110 = v116[8];
  v111 = *(uint64_t *)((char *)a1 + v110);
  v112 = *(uint64_t *)((char *)a1 + v110 + 8);
  *(_OWORD *)((char *)a1 + v110) = *(_OWORD *)((char *)v117 + v110);
  sub_100225AB4(v111, v112);
  v113 = v116[9];
  v114 = *(void **)((char *)a1 + v113);
  *(uint64_t *)((char *)a1 + v113) = *(uint64_t *)((char *)v117 + v113);

  *((_BYTE *)a1 + v116[10]) = *((_BYTE *)v117 + v116[10]);
  return a1;
}

uint64_t sub_10024CEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024CEE8);
}

uint64_t sub_10024CEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024CEF8);
}

uint64_t sub_10024CEFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1005CF310;
    v4[4] = &unk_1005CF4E8;
    v4[5] = &unk_1005CF328;
    v4[6] = &unk_1005CF340;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10024CFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024CFC8);
}

uint64_t sub_10024CFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024CFD8);
}

uint64_t sub_10024CFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10024FCEC(a1, a2, a3, (uint64_t)&unk_1005CF4E8, (uint64_t)&unk_1005CF328, (uint64_t)&unk_1005CF340);
}

ValueMetadata *_s15MacApprovePhoneVMa()
{
  return &_s15MacApprovePhoneVN;
}

uint64_t sub_10024D008(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  int *v89;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a3[6];
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v89 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v89[7];
    v80 = (uint64_t *)(a1 + v79);
    v81 = (uint64_t *)((char *)a2 + v79);
    v82 = *v81;
    v83 = v81[1];
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    sub_10022E4A8(v82, v83);
    *v80 = v82;
    v80[1] = v83;
    v84 = v89[8];
    v85 = v89[9];
    v86 = *(void **)((char *)a2 + v84);
    *(_QWORD *)(a1 + v84) = v86;
    *(_BYTE *)(a1 + v85) = *((_BYTE *)a2 + v85);
    v87 = v86;
  }
  return a1;
}

void sub_10024D72C(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  sub_100225AB4(*(_QWORD *)((char *)a1 + a2[7]), *(_QWORD *)((char *)a1 + a2[7] + 8));

}

uint64_t sub_10024DA0C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  int *v88;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v88 = a3;
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = v88[7];
  v79 = (uint64_t *)(a1 + v78);
  v80 = (uint64_t *)((char *)a2 + v78);
  v81 = *v80;
  v82 = v80[1];
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  sub_10022E4A8(v81, v82);
  *v79 = v81;
  v79[1] = v82;
  v83 = v88[8];
  v84 = v88[9];
  v85 = *(void **)((char *)a2 + v83);
  *(_QWORD *)(a1 + v83) = v85;
  *(_BYTE *)(a1 + v84) = *((_BYTE *)a2 + v84);
  v86 = v85;
  return a1;
}

_QWORD *sub_10024E10C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  id v115;
  int *v117;
  _QWORD *v118;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490(a1 + 1, v7);
  v117 = a3;
  v118 = a2;
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }
  if (v89)
  {
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v117[7];
  v106 = (_QWORD *)((char *)a1 + v105);
  v107 = (_QWORD *)((char *)v118 + v105);
  v108 = *v107;
  v109 = v107[1];
  sub_10022E4A8(*v107, v109);
  v110 = *v106;
  v111 = v106[1];
  *v106 = v108;
  v106[1] = v109;
  sub_100225AB4(v110, v111);
  v112 = v117[8];
  v113 = *(void **)((char *)a1 + v112);
  v114 = *(void **)((char *)v118 + v112);
  *(_QWORD *)((char *)a1 + v112) = v114;
  v115 = v114;

  *((_BYTE *)a1 + v117[9]) = *((_BYTE *)v118 + v117[9]);
  return a1;
}

uint64_t sub_10024EBAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a3[6];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t *sub_10024F25C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  int *v110;
  uint64_t *v111;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v110 = a3;
  v111 = a2;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v110[7];
  v105 = *(uint64_t *)((char *)a1 + v104);
  v106 = *(uint64_t *)((char *)a1 + v104 + 8);
  *(_OWORD *)((char *)a1 + v104) = *(_OWORD *)((char *)v111 + v104);
  sub_100225AB4(v105, v106);
  v107 = v110[8];
  v108 = *(void **)((char *)a1 + v107);
  *(uint64_t *)((char *)a1 + v107) = *(uint64_t *)((char *)v111 + v107);

  *((_BYTE *)a1 + v110[9]) = *((_BYTE *)v111 + v110[9]);
  return a1;
}

uint64_t sub_10024FCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10024FCD8);
}

uint64_t sub_10024FCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10024FCE8);
}

uint64_t sub_10024FCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v11;
  _QWORD v12[6];

  v12[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v12[1] = "(";
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v11 <= 0x3F)
  {
    v12[2] = *(_QWORD *)(result - 8) + 64;
    v12[3] = a4;
    v12[4] = a5;
    v12[5] = a6;
    swift_initStructMetadata(a1, 256, 6, v12, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10024FD84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v80;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v80 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    *(_BYTE *)(a1 + *(int *)(v80 + 28)) = *((_BYTE *)a2 + *(int *)(v80 + 28));
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
  }
  return a1;
}

uint64_t sub_10025047C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  return swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
}

uint64_t sub_100250738(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v79;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v79 = a3;
  v11 = *(int *)(a3 + 24);
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  *(_BYTE *)(a1 + *(int *)(v79 + 28)) = *((_BYTE *)a2 + *(int *)(v79 + 28));
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  return a1;
}

_QWORD *sub_100250E0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  _QWORD *v107;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490(a1 + 1, v7);
  v106 = a3;
  v107 = a2;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }
  if (v89)
  {
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  *((_BYTE *)a1 + *(int *)(v106 + 28)) = *((_BYTE *)v107 + *(int *)(v106 + 28));
  return a1;
}

uint64_t sub_10025186C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 24);
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_100251F08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t *v106;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v105 = a3;
  v106 = a2;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  *((_BYTE *)a1 + *(int *)(v105 + 28)) = *((_BYTE *)v106 + *(int *)(v105 + 28));
  return a1;
}

uint64_t sub_10025294C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100252958);
}

uint64_t sub_10025295C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1002529D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002529E4);
}

char *sub_1002529E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100252A5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1005CF498;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100252AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100252D90(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

uint64_t sub_100252B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100252C50(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.ItemDestination);
}

uint64_t sub_100252B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000D0F0(a1, &qword_1007B68A0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_100008384(&qword_1007B6440);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_100252C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100252C50(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.ContactRequest);
}

uint64_t sub_100252C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_10000D0F0(a1, &qword_1007B68A0);
    v10 = 7168;
    v11 = *(_QWORD *)(a3 + 16);
    if (v11)
    {
LABEL_3:
      v12 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v11);
      swift_unknownObjectRetain(v11);
      v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
      v16 = v15;
      swift_unknownObjectRelease(v11);
      goto LABEL_6;
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v10 = v17 | 0x1C00;
    v11 = *(_QWORD *)(a3 + 16);
    if (v11)
      goto LABEL_3;
  }
  v14 = 0;
  v16 = 0;
LABEL_6:
  v18 = a4(0);
  if (v16 | v14)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v14;
    v21[3] = v16;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v10, v19, v18, a2, a3);
}

uint64_t sub_100252D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100252D90(a1, a2, a3, (uint64_t)&type metadata for Bool);
}

uint64_t sub_100252D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  _QWORD v20[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_10000D0F0(a1, &qword_1007B68A0);
    v10 = 7168;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
    {
LABEL_6:
      v17 = 0;
      return swift_task_create(v10, v17, a4, a2, a3);
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v10 = v18 | 0x1C00;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
      goto LABEL_6;
  }
  v12 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v11);
  swift_unknownObjectRetain(v11);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
  v16 = v15;
  swift_unknownObjectRelease(v11);
  if (!(v16 | v14))
    goto LABEL_6;
  v20[0] = 0;
  v20[1] = 0;
  v17 = v20;
  v20[2] = v14;
  v20[3] = v16;
  return swift_task_create(v10, v17, a4, a2, a3);
}

uint64_t sub_100252EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100253050(a1, a2, a3, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);
}

uint64_t sub_100252EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000D0F0(a1, &qword_1007B68A0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10071EB40, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_100008384(&qword_1007B6440);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_1007B6588, v16);
}

uint64_t sub_100253034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100253050(a1, a2, a3, (uint64_t)&unk_10071ED20, (uint64_t)&type metadata for Bool, (uint64_t)&unk_1007B6638);
}

uint64_t sub_100253050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];

  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v12) == 1)
  {
    sub_10000D0F0(a1, &qword_1007B68A0);
    v14 = 7168;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      v16 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    v14 = v21 | 0x1C00;
    v15 = *(_QWORD *)(a3 + 16);
    if (v15)
      goto LABEL_3;
  }
  v18 = 0;
  v20 = 0;
LABEL_6:
  v22 = swift_allocObject(a4, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  if (v20 | v18)
  {
    v25[0] = 0;
    v25[1] = 0;
    v23 = v25;
    v25[2] = v18;
    v25[3] = v20;
  }
  else
  {
    v23 = 0;
  }
  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t sub_1002531A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B6140);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B6140);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

NSString sub_100253230()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1007D7F70 = (uint64_t)result;
  return result;
}

NSString sub_100253264()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1007D7F78 = (uint64_t)result;
  return result;
}

NSString sub_100253298()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1007D7F80 = (uint64_t)result;
  return result;
}

uint64_t sub_1002532CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  _BYTE v21[24];

  v1 = sub_100008384((uint64_t *)&unk_1007B6400);
  __chkstk_darwin(v1);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for SDNearFieldTap(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v6);
  v11 = &v21[-v10 - 8];
  __chkstk_darwin(v9);
  v13 = &v21[-v12 - 8];
  v14 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
  swift_beginAccess(v14, v21, 0, 0);
  sub_100221F28(v14, (uint64_t)v3, (uint64_t *)&unk_1007B6400);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000D0F0((uint64_t)v3, (uint64_t *)&unk_1007B6400);
  }
  else
  {
    sub_100221DB4((uint64_t)v3, (uint64_t)v13, type metadata accessor for SDNearFieldTap);
    result = (uint64_t)objc_msgSend((id)objc_opt_self(SDStatusMonitor), "sharedMonitor");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v16 = (void *)result;
    v17 = objc_msgSend((id)result, "deviceKeyBagLocked");

    sub_100221DB4((uint64_t)v13, (uint64_t)v11, type metadata accessor for SDNearFieldTap);
    if (v17)
    {
      v18 = v11[*(int *)(v4 + 48)];
      sub_100221DB4((uint64_t)v11, (uint64_t)v8, type metadata accessor for SDNearFieldTap);
      if (v18 == 1)
      {
        sub_1002443C8((uint64_t)v8, type metadata accessor for SDNearFieldTap);
        return 1;
      }
      v19 = *(_QWORD *)&v8[*(int *)(v4 + 24) + 8];
      swift_bridgeObjectRetain(v19);
      sub_1002443C8((uint64_t)v8, type metadata accessor for SDNearFieldTap);
      if (v19)
      {
        swift_bridgeObjectRelease(v19);
        return 1;
      }
    }
    else
    {
      sub_1002443C8((uint64_t)v11, type metadata accessor for SDNearFieldTap);
    }
  }
  return 0;
}

uint64_t sub_100253504()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v2 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(v2);
  return swift_release(KeyPath);
}

void (*sub_100253568(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_1005CF960);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1002535E0;
}

void sub_1002535E0(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

void sub_10025362C()
{
  char *v0;
  const void *v1;
  void *v2;
  uint64_t v3;
  void *ObjCClassFromMetadata;
  id v5;
  id v6;
  __CFNotificationCenter *v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  uint64_t v13;
  int out_token;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter];
  objc_msgSend(v2, "addObserver:selector:name:object:", v1, "keyBagLockStateChangeWithNotification:", CFSTR("com.apple.sharingd.KeyBagLockStatusChanged"), 0);
  objc_msgSend(v2, "addObserver:selector:name:object:", v1, "handleAirDropAllowedChanged", CFSTR("com.apple.sharingd.AirDropAllowedChanged"), 0);
  objc_msgSend(v2, "addObserver:selector:name:object:", v1, "handleWifiStateChanged", CFSTR("com.apple.sharingd.WirelessPowerChanged"), 0);
  objc_msgSend(v2, "addObserver:selector:name:object:", v1, "screenStateChangedWithNotification:", CFSTR("com.apple.sharingd.ScreenStateChanged"), 0);
  objc_msgSend(v2, "addObserver:selector:name:object:", v1, "handleSystemUIChanged", CFSTR("com.apple.sharingd.SystemUIChanged"), 0);
  v3 = sub_100221EDC(0, &qword_1007B6650, NSDistributedNotificationCenter_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v3);
  v5 = objc_msgSend(ObjCClassFromMetadata, "defaultCenter");
  if (qword_1007B3D28 != -1)
    swift_once(&qword_1007B3D28, sub_100253264);
  objc_msgSend(v5, "addObserver:selector:name:object:", v1, "handleProximityAppleIDSignInStarted", qword_1007D7F78, 0);

  v6 = objc_msgSend(ObjCClassFromMetadata, "defaultCenter");
  if (qword_1007B3D30 != -1)
    swift_once(&qword_1007B3D30, sub_100253298);
  objc_msgSend(v6, "addObserver:selector:name:object:", v1, "handleProximityAppleIDSignInCompleted", qword_1007D7F80, 0);

  v7 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v7, v1, (CFNotificationCallback)sub_10025E9FC, BYSetupAssistantExitedDarwinNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  out_token = 0;
  v8 = (const char *)objc_msgSend(objc_retainAutorelease(SFNotificationAirDropNearbySharingChanged), "UTF8String");
  sub_100221EDC(0, (unint64_t *)&qword_1007B42D0, OS_dispatch_queue_ptr);
  v9 = static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_10071E988, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  v12[4] = sub_10026EF10;
  v13 = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100366D0C;
  v12[3] = &unk_10071ED38;
  v11 = _Block_copy(v12);
  swift_release(v13);
  notify_register_dispatch(v8, &out_token, v9, v11);
  _Block_release(v11);

}

id sub_10025396C()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  __CFNotificationCenter *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter], "removeObserver:", v0);
  v2 = sub_100221EDC(0, &qword_1007B6650, NSDistributedNotificationCenter_ptr);
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "defaultCenter");
  objc_msgSend(v3, "removeObserver:", v0);

  v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v4, v0);

  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

uint64_t sub_100253BDC()
{
  return type metadata accessor for SDAirDropNearFieldService(0);
}

uint64_t type metadata accessor for SDAirDropNearFieldService(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007B61F8, (uint64_t)&nominal type descriptor for SDAirDropNearFieldService);
}

void sub_100253BF8(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t KeyPath;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  char *v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  char *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  char *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  void (*v118)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161[4];

  v2 = v1;
  v4 = sub_100008384((uint64_t *)&unk_1007B6220);
  v5 = __chkstk_darwin(v4);
  v142 = (uint64_t)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v141 = (char *)&v138 - v8;
  v9 = __chkstk_darwin(v7);
  v152 = (uint64_t)&v138 - v10;
  __chkstk_darwin(v9);
  v154 = (char *)&v138 - v11;
  v12 = type metadata accessor for UUID(0);
  v156 = *(_QWORD *)(v12 - 8);
  v157 = v12;
  v13 = __chkstk_darwin(v12);
  v144 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v138 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v138 - v19;
  v21 = __chkstk_darwin(v18);
  v148 = (char *)&v138 - v22;
  v23 = __chkstk_darwin(v21);
  v146 = (char *)&v138 - v24;
  v25 = __chkstk_darwin(v23);
  v151 = (char *)&v138 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v138 - v27;
  v29 = sub_100008384(&qword_1007B7280);
  v30 = __chkstk_darwin(v29);
  v145 = (uint64_t)&v138 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v153 = (char *)&v138 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v138 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v138 - v37;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_100221DF8(v39, (uint64_t)qword_1007B6140);
  v147 = a1;
  v41 = sub_100221F28(a1, (uint64_t)v38, &qword_1007B7280);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter();
  v44 = os_log_type_enabled(v42, v43);
  v143 = v20;
  v155 = v40;
  v140 = v17;
  if (v44)
  {
    v149 = v28;
    v150 = v2;
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v161[0] = v46;
    *(_DWORD *)v45 = 136315138;
    sub_100221F28((uint64_t)v38, (uint64_t)v36, &qword_1007B7280);
    v48 = v156;
    v47 = v157;
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48))(v36, 1, v157);
    if ((_DWORD)v49 == 1)
    {
      sub_10000D0F0((uint64_t)v36, &qword_1007B7280);
      v50 = 0xEA00000000004449;
      v51 = 0x20746E6572727563;
    }
    else
    {
      v51 = UUID.uuidString.getter(v49);
      v50 = v52;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v47);
    }
    v158 = sub_100228BD8(v51, v50, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v45 + 4);
    swift_bridgeObjectRelease(v50);
    sub_10000D0F0((uint64_t)v38, &qword_1007B7280);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "SDAirDropNearFieldService: requested end nearby sharing interaction:%s", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v28 = v149;
    v2 = v150;
  }
  else
  {
    sub_10000D0F0((uint64_t)v38, &qword_1007B7280);

  }
  v53 = (uint64_t)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
  swift_beginAccess(&v2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction], v161, 0, 0);
  v139 = v53;
  v54 = v53;
  v55 = v152;
  sub_100221F28(v54, v152, (uint64_t *)&unk_1007B6220);
  v56 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v55, 1, v56);
  v60 = v157;
  if (v59 == 1)
  {
    v61 = v56;
    v62 = v28;
    v63 = v57;
    v64 = v157;
    v65 = v55;
    KeyPath = swift_getKeyPath(&unk_1005CF938);
    v67 = swift_getKeyPath(&unk_1005CF960);
    v68 = v154;
    static Published.subscript.getter(v2, KeyPath, v67);
    swift_release(v67);
    v69 = (uint64_t)v68;
    swift_release(KeyPath);
    v70 = v65;
    v60 = v64;
    v57 = v63;
    v28 = v62;
    v56 = v61;
    sub_10000D0F0(v70, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    v69 = (uint64_t)v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v154, v55, v56);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v69, 0, 1, v56);
  }
  v71 = (uint64_t)v153;
  if (v58(v69, 1, v56) == 1)
  {
    sub_10000D0F0(v69, (uint64_t *)&unk_1007B6220);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 56))(v71, 1, 1, v60);
LABEL_15:
    v74 = sub_10000D0F0(v71, &qword_1007B7280);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "SDAirDropNearFieldService: ignoring request to end request nearby sharing interaction, no current interaction", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }

    return;
  }
  SFAirDrop.NearbySharingInteraction.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v69, v56);
  v72 = v156;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v156 + 56))(v71, 0, 1, v60);
  v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  if (v73(v71, 1, v60) == 1)
    goto LABEL_15;
  v150 = v2;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  v78(v28, v71, v60);
  v79 = v145;
  sub_100221F28(v147, v145, &qword_1007B7280);
  v80 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v81 = v146;
  v80(v146, v28, v60);
  if (v73(v79, 1, v60) == 1)
  {
    v82 = v81;
    v83 = (uint64_t)v151;
    v78(v151, (uint64_t)v82, v60);
    sub_10000D0F0(v79, &qword_1007B7280);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v81, v60);
    v83 = (uint64_t)v151;
    v78(v151, v79, v60);
  }
  v84 = static UUID.== infix(_:_:)(v28, v83);
  v85 = v148;
  if ((v84 & 1) != 0)
  {
    v149 = v28;
    v86 = ((uint64_t (*)(char *, uint64_t, uint64_t))v80)(v148, v83, v60);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter();
    v89 = os_log_type_enabled(v87, v88);
    v154 = (char *)v80;
    if (v89)
    {
      v90 = v85;
      v91 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = swift_slowAlloc(32, -1);
      v158 = v92;
      *(_DWORD *)v91 = 136315138;
      v93 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v157, v93);
      v96 = v95;
      v160 = sub_100228BD8(v94, v95, &v158);
      v60 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v91 + 4);
      swift_bridgeObjectRelease(v96);
      v97 = *(void (**)(char *, uint64_t))(v156 + 8);
      v97(v90, v60);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "SDAirDropNearFieldService: end nearby sharing interaction:%s", v91, 0xCu);
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      v98 = v92;
      v83 = (uint64_t)v151;
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v91, -1, -1);
    }
    else
    {
      v97 = *(void (**)(char *, uint64_t))(v156 + 8);
      v97(v85, v60);
    }

    v117 = v150;
    sub_1003BA418(v83);
    v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
    v119 = (uint64_t)v141;
    v118(v141, 1, 1, v56);
    v120 = v139;
    swift_beginAccess(v139, &v158, 33, 0);
    sub_10023A084(v119, v120, (uint64_t *)&unk_1007B6220);
    swift_endAccess(&v158);
    v118((char *)v119, 1, 1, v56);
    v121 = swift_getKeyPath(&unk_1005CF938);
    v122 = swift_getKeyPath(&unk_1005CF960);
    v123 = v142;
    sub_100221F28(v119, v142, (uint64_t *)&unk_1007B6220);
    v124 = v117;
    static Published.subscript.setter(v123, v124, v121, v122);
    sub_10000D0F0(v119, (uint64_t *)&unk_1007B6220);
    v125 = v143;
    v126 = ((uint64_t (*)(char *, uint64_t, uint64_t))v154)(v143, v83, v60);
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v127, v128))
    {
      v129 = (uint8_t *)swift_slowAlloc(12, -1);
      v130 = swift_slowAlloc(32, -1);
      v158 = v130;
      *(_DWORD *)v129 = 136315138;
      v131 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v132 = dispatch thunk of CustomStringConvertible.description.getter(v157, v131);
      v134 = v133;
      v160 = sub_100228BD8(v132, v133, &v158);
      v60 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v129 + 4);
      swift_bridgeObjectRelease(v134);
      v97(v125, v60);
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "SDAirDropNearFieldService: Removing all assertions for nearby sharing interaction:%s", v129, 0xCu);
      swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
      v135 = v130;
      v83 = (uint64_t)v151;
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v129, -1, -1);
    }
    else
    {
      v97(v125, v60);
    }

    swift_beginAccess(&v124[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID], &v158, 33, 0);
    v137 = sub_100269F88(v83);
    swift_endAccess(&v158);
    swift_bridgeObjectRelease(v137);
    sub_10025AE54();
    v116 = (char *)v83;
  }
  else
  {
    v99 = v140;
    v80(v140, (char *)v83, v60);
    v100 = v144;
    v101 = ((uint64_t (*)(char *, char *, uint64_t))v80)(v144, v28, v60);
    v102 = Logger.logObject.getter(v101);
    v103 = v28;
    v104 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v102, v104))
    {

      v136 = *(void (**)(char *, uint64_t))(v72 + 8);
      v136(v100, v60);
      v136(v99, v60);
      v136((char *)v83, v60);
      v136(v103, v60);
      return;
    }
    v105 = v72;
    v106 = swift_slowAlloc(22, -1);
    v155 = swift_slowAlloc(64, -1);
    v158 = v155;
    *(_DWORD *)v106 = 136315394;
    v107 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v149 = v103;
    v108 = dispatch thunk of CustomStringConvertible.description.getter(v60, v107);
    v110 = v109;
    v160 = sub_100228BD8(v108, v109, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v106 + 4);
    swift_bridgeObjectRelease(v110);
    v97 = *(void (**)(char *, uint64_t))(v105 + 8);
    v97(v99, v60);
    *(_WORD *)(v106 + 12) = 2080;
    v111 = v144;
    v112 = dispatch thunk of CustomStringConvertible.description.getter(v60, v107);
    v114 = v113;
    v160 = sub_100228BD8(v112, v113, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v106 + 14);
    swift_bridgeObjectRelease(v114);
    v97(v111, v60);
    _os_log_impl((void *)&_mh_execute_header, v102, v104, "SDAirDropNearFieldService: ignoring request to end nearby sharing interaction:%s currentID:%s", (uint8_t *)v106, 0x16u);
    v115 = v155;
    swift_arrayDestroy(v155, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v106, -1, -1);

    v116 = v151;
  }
  v97(v116, v60);
  v97(v149, v60);
}

void sub_10025498C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  os_log_type_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint8_t *v38;
  void (*v39)(_QWORD *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  int *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t *, _QWORD);
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = v3;
  v85 = a2;
  v86 = a1;
  v6 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v6);
  v78 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v73 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v74 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v76 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  __chkstk_darwin(v10);
  v75 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v80 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v68 - v19;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v21 = type metadata accessor for Logger(0);
  sub_100221DF8(v21, (uint64_t)qword_1007B6140);
  v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22 = v72(v20, a3, v12);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v84 = v13;
  if (v25)
  {
    v79 = v8;
    v26 = swift_slowAlloc(12, -1);
    v83 = v3;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v81 = v16;
    v29 = v28;
    v89 = v28;
    v82 = a3;
    *(_DWORD *)v27 = 136315138;
    v30 = sub_100220D78(&qword_1007B6558, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v12, v30);
    v33 = v32;
    v87 = sub_100228BD8(v31, v32, &v89);
    a3 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v27 + 4);
    swift_bridgeObjectRelease(v33);
    v34 = *(void (**)(char *, uint64_t))(v13 + 8);
    v8 = v79;
    v34(v20, v12);
    v35 = v24;
    v36 = v34;
    _os_log_impl((void *)&_mh_execute_header, v23, v35, "SDAirDropNearFieldService: connected… for interactionType:%s", v27, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    v37 = v29;
    v16 = v81;
    swift_slowDealloc(v37, -1, -1);
    v38 = v27;
    v4 = v83;
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t))(v13 + 8);
    v36(v20, v12);
  }

  v39 = sub_100253568(&v89);
  v41 = v40;
  v42 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48);
  v79 = v41;
  if (v43(v41, 1, v42))
  {
    ((void (*)(uint64_t *, _QWORD))v39)(&v89, 0);
  }
  else
  {
    v72(v80, a3, v12);
    v44 = (int *)type metadata accessor for SDNearFieldTap(0);
    v45 = v44[15];
    v81 = v16;
    v46 = v86;
    v72 = (uint64_t (*)(char *, uint64_t, uint64_t))v36;
    v48 = v73;
    v47 = v74;
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
    v49(v74, v86 + v45, v8);
    v71 = (void (*)(uint64_t *, _QWORD))v39;
    v50 = v78;
    v49(v78, v85, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v50, 0, 1, v8);
    v51 = v44[7];
    v52 = (uint64_t *)(v46 + v44[6]);
    v70 = *v52;
    v83 = v4;
    v53 = v52[1];
    v54 = *(_QWORD *)(v46 + v51 + 8);
    v73 = *(_QWORD *)(v46 + v51);
    v55 = v44[9];
    v56 = (uint64_t *)(v46 + v44[8]);
    v57 = v56[1];
    v69 = *v56;
    v82 = a3;
    v58 = *(_QWORD *)(v46 + v55);
    v59 = *(_QWORD *)(v46 + v55 + 8);
    LOBYTE(v44) = *(_BYTE *)(v46 + v44[12]);
    v16 = v81;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v57);
    v67 = (char)v44;
    v60 = v75;
    v61 = v54;
    v36 = (void (*)(char *, uint64_t))v72;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.init(type:transactionIdentifier:endpointIdentifier:contactIdentifier:deviceName:deviceModel:accountID:isSameAccount:)(v80, v47, v50, v70, v53, v73, v61, v69, v57, v58, v59, v67);
    (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v60, enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:), v77);
    SFAirDrop.NearbySharingInteraction.state.setter(v60);
    v71(&v89, 0);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v16, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:), v12);
  v62 = sub_100220D78(&qword_1007B6550, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v89, v12, v62);
  dispatch thunk of RawRepresentable.rawValue.getter(&v87, v12, v62);
  v63 = v90;
  v64 = v88;
  if (v89 == v87 && v90 == v88)
  {
    swift_bridgeObjectRelease_n(v90, 2);
    v36(v16, v12);
  }
  else
  {
    v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v89, v90, v87, v88, 0);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v64);
    v36(v16, v12);
    if ((v65 & 1) == 0)
      return;
  }
  v66 = type metadata accessor for SDNearFieldTap(0);
  sub_100254F8C(v85, (*(_BYTE *)(v86 + *(int *)(v66 + 44)) & 1) == 0, v86 + *(int *)(v66 + 60));
}

void sub_100254F8C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v51 = a3;
  v5 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v5);
  v53 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v47 - v15;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v17 = type metadata accessor for Logger(0);
  sub_100221DF8(v17, (uint64_t)qword_1007B6140);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v52 = a1;
  v49 = v18;
  v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v16, a1, v7);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  v22 = os_log_type_enabled(v20, v21);
  v54 = v8;
  if (v22)
  {
    v23 = swift_slowAlloc(18, -1);
    v24 = swift_slowAlloc(32, -1);
    v47 = v14;
    v25 = v24;
    v56 = v24;
    *(_DWORD *)v23 = 67109378;
    LODWORD(v55) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 4, v23 + 4);
    *(_WORD *)(v23 + 8) = 2080;
    v48 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
    v29 = v28;
    v55 = sub_100228BD8(v27, v28, &v56);
    v11 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v23 + 10);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v16, v7);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "SDAirDropNearFieldService: start NameDrop flow {isActive: %{BOOL}d endpointIdentifier: %s}", (uint8_t *)v23, 0x12u);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v30 = v25;
    v14 = v47;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }

  v31 = v52;
  if ((a2 & 1) != 0)
  {
    v32 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v53, 1, 1, v32);
    v33 = v31;
    v34 = v49;
    v49(v14, v33, v7);
    v34(v11, v51, v7);
    v35 = qword_1007B3D98;
    v36 = v50;
    v37 = v14;
    if (v35 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v38 = static AirDropActor.shared;
    v39 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v40 = v54;
    v41 = *(unsigned __int8 *)(v54 + 80);
    v42 = (v41 + 40) & ~v41;
    v43 = (v9 + v41 + v42) & ~v41;
    v44 = (char *)swift_allocObject(&unk_10071EB18, v43 + v9, v41 | 7);
    *((_QWORD *)v44 + 2) = v38;
    *((_QWORD *)v44 + 3) = v39;
    *((_QWORD *)v44 + 4) = v36;
    v45 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v45(&v44[v42], v37, v7);
    v45(&v44[v43], v11, v7);
    swift_retain(v38);
    v46 = sub_100253050(v53, (uint64_t)&unk_1007B6568, (uint64_t)v44, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);
    swift_release(v46);
  }
}

BOOL sub_1002553A4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v3)
    return 0;
  v4 = objc_msgSend(v3, "currentApplicationLabel");
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = type metadata accessor for SDNearFieldTap(0);
  v10 = (uint64_t *)(a1 + *(int *)(v9 + 40));
  v12 = *v10;
  v11 = v10[1];
  v20 = v12;
  v21 = v11;
  v18 = 0x746E6563656D6167;
  v19 = 0xEA00000000007265;
  v13 = sub_100221E10();
  if ((StringProtocol.contains<A>(_:)(&v18, &type metadata for String, &type metadata for String, v13, v13) & 1) != 0)
  {
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v20 = v6;
    v21 = v8;
    v18 = 0x746E6563656D6167;
    v19 = 0xEA00000000007265;
    v14 = StringProtocol.contains<A>(_:)(&v18, &type metadata for String, &type metadata for String, v13, v13);
    swift_bridgeObjectRelease(v8);
    if ((v14 & 1) == 0)
      return 0;
  }
  v15 = *(unsigned __int8 *)(a1 + *(int *)(v9 + 68));
  return v15 != 2 && (v15 & 1) == 0;
}

uint64_t sub_1002554E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char **v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  Swift::String v26;
  void *v27;
  Swift::Bool v28;
  Swift::String v29;
  void *object;
  Swift::Bool v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  result = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!result)
    return result;
  v5 = v1;
  v6 = &selRef_checkLocalLTK;
  v7 = objc_msgSend((id)result, "currentApplicationLabel");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = type metadata accessor for SDNearFieldTap(0);
    v13 = (uint64_t *)(a1 + *(int *)(v12 + 40));
    v15 = *v13;
    v14 = v13[1];
    v34 = v15;
    v35 = v14;
    v32 = 0x746E6563656D6167;
    v33 = 0xEA00000000007265;
    v16 = sub_100221E10();
    if ((StringProtocol.contains<A>(_:)(&v32, &type metadata for String, &type metadata for String, v16, v16) & 1) != 0)
    {
      swift_bridgeObjectRelease(v11);
      v6 = &selRef_checkLocalLTK;
    }
    else
    {
      v34 = v9;
      v35 = v11;
      v32 = 0x746E6563656D6167;
      v33 = 0xEA00000000007265;
      v17 = StringProtocol.contains<A>(_:)(&v32, &type metadata for String, &type metadata for String, v16, v16);
      swift_bridgeObjectRelease(v11);
      v6 = &selRef_checkLocalLTK;
      if ((v17 & 1) == 0)
        goto LABEL_10;
    }
    v18 = *(unsigned __int8 *)(a1 + *(int *)(v12 + 68));
    if (v18 != 2 && (v18 & 1) == 0)
      return 0;
  }
LABEL_10:
  result = *(_QWORD *)(v5 + v3);
  if (result)
  {
    result = (uint64_t)objc_msgSend((id)result, v6[268]);
    if (result)
    {
      v20 = (void *)result;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v23 = v22;

      v24 = (_QWORD *)(a1 + *(int *)(type metadata accessor for SDNearFieldTap(0) + 40));
      v25 = v24[1];
      if (*v24 == 0xD000000000000013 && v25 == 0x8000000100612D70
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, 0xD000000000000013, 0x8000000100612D70, 0) & 1) != 0
        || (type metadata accessor for SFAirDropClient(0),
            v26._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter(),
            v27 = v26._object,
            v28 = String.hasPrefix(_:)(v26),
            swift_bridgeObjectRelease(v27),
            v28))
      {
        if (v21 == 0xD000000000000013 && v23 == 0x8000000100612D70)
        {
          swift_bridgeObjectRelease(0x8000000100612D70);
          return 0;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, 0xD000000000000013, 0x8000000100612D70, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v23);
          return 0;
        }
        type metadata accessor for SFAirDropClient(0);
        v29._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter();
        object = v29._object;
        v31 = String.hasPrefix(_:)(v29);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(object);
        if (v31)
          return 0;
      }
      else
      {
        swift_bridgeObjectRelease(v23);
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_100255790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  Swift::Bool v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  Swift::Bool v17;
  uint64_t v20;

  v3 = type metadata accessor for SDNearFieldTap(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v6)
    return 0;
  v7 = objc_msgSend(v6, "currentApplicationLabel");
  if (!v7)
    return 0;
  v8 = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  type metadata accessor for SFAirDropClient(0);
  v11._countAndFlagsBits = ((uint64_t (*)(void))static SFAirDropClient.nearFieldApplicationLabel.getter)();
  object = v11._object;
  v13 = String.hasPrefix(_:)(v11);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v10);
  v14 = sub_100244384(a1, (uint64_t)v5, type metadata accessor for SDNearFieldTap);
  if (!v13)
  {
    v15._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter(v14);
    v16 = v15._object;
    v17 = String.hasPrefix(_:)(v15);
    swift_bridgeObjectRelease(v16);
    sub_1002443C8((uint64_t)v5, type metadata accessor for SDNearFieldTap);
    if (v17)
      return !sub_1002553A4(a1);
    return 0;
  }
  sub_1002443C8((uint64_t)v5, type metadata accessor for SDNearFieldTap);
  return !sub_1002553A4(a1);
}

uint64_t sub_1002558FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v3 = type metadata accessor for SDNearFieldTap(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (v6 && (v7 = objc_msgSend(v6, "currentApplicationLabel")) != 0)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    if (v9 == 0xD00000000000001BLL && v11 == 0x8000000100612EE0)
    {
      swift_bridgeObjectRelease(0x8000000100612EE0);
      sub_100244384(a1, (uint64_t)v5, type metadata accessor for SDNearFieldTap);
      v12 = 1;
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, 0xD00000000000001BLL, 0x8000000100612EE0, 0);
      swift_bridgeObjectRelease(v11);
      sub_100244384(a1, (uint64_t)v5, type metadata accessor for SDNearFieldTap);
      if ((v13 & 1) != 0
        || (v14 = &v5[*(int *)(v3 + 40)], v15 = *((_QWORD *)v14 + 1), *(_QWORD *)v14 == 0xD00000000000001BLL)
        && v15 == 0x8000000100612EE0)
      {
        v12 = 1;
      }
      else
      {
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v14, v15, 0xD00000000000001BLL, 0x8000000100612EE0, 0);
      }
    }
    sub_1002443C8((uint64_t)v5, type metadata accessor for SDNearFieldTap);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_100255A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for SDNearFieldTap(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B6598);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1002558FC(a1);
  sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v11 = (void *)static NSUserDefaults.airdrop.getter();
  SFAirDropUserDefaults.boopInteractionTypeOverride.getter();

  v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v9, v12);
  sub_10000D0F0((uint64_t)v9, &qword_1007B6598);
  if (sub_100255790(a1))
  {
    v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:);
  }
  else if ((v10 & 1) != 0)
  {
    v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:);
  }
  else if ((sub_1002554E8(a1) & 1) != 0)
  {
    v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:);
  }
  else if (sub_10026DE58(a1))
  {
    v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:);
  }
  else
  {
    v16 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 48));
    sub_100244384(a1, (uint64_t)v6, type metadata accessor for SDNearFieldTap);
    if (v16 == 1)
    {
      sub_1002443C8((uint64_t)v6, type metadata accessor for SDNearFieldTap);
    }
    else
    {
      v17 = *(_QWORD *)&v6[*(int *)(v4 + 24) + 8];
      sub_1002443C8((uint64_t)v6, type metadata accessor for SDNearFieldTap);
      if (!v17)
      {
        v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.unknown(_:);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(a2, *v14, v12);
      }
    }
    v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.share(_:);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(a2, *v14, v12);
}

uint64_t sub_100255CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  os_log_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[4];

  v101 = a1;
  v3 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.PollingType(0);
  v95 = *(_QWORD *)(v3 - 8);
  v96 = v3;
  v4 = __chkstk_darwin(v3);
  v93 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v94 = (char *)&v81 - v6;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v87 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v88 = (char *)&v81 - v11;
  v12 = sub_100008384((uint64_t *)&unk_1007B6450);
  __chkstk_darwin(v12);
  v91 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008384(&qword_1007B7280);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v86 = (char *)&v81 - v18;
  v19 = sub_100008384((uint64_t *)&unk_1007B6220);
  __chkstk_darwin(v19);
  v90 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SFClientIdentity(0);
  v98 = *(_QWORD *)(v21 - 8);
  v99 = v21;
  __chkstk_darwin(v21);
  v97 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v27 = type metadata accessor for Logger(0);
  sub_100221DF8(v27, (uint64_t)qword_1007B6140);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v101, v23);
  v89 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 16);
  v28 = v89(v97, a2, v99);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  v31 = v30;
  v32 = os_log_type_enabled(v29, v30);
  v92 = v17;
  if (v32)
  {
    v33 = swift_slowAlloc(22, -1);
    v84 = swift_slowAlloc(64, -1);
    v103[0] = v84;
    *(_DWORD *)v33 = 136315394;
    v85 = v8;
    v83 = v31;
    v82 = v29;
    v34 = ((uint64_t (*)(void))SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter)();
    v36 = v35;
    v102 = sub_100228BD8(v34, v35, v103);
    v8 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v33 + 4);
    swift_bridgeObjectRelease(v36);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    *(_WORD *)(v33 + 12) = 2080;
    v37 = sub_100220D78(&qword_1007B6490, (uint64_t (*)(uint64_t))&type metadata accessor for SFClientIdentity, (uint64_t)&protocol conformance descriptor for SFClientIdentity);
    v38 = v97;
    v39 = v99;
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v99, v37);
    v42 = v41;
    v102 = sub_100228BD8(v40, v41, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v33 + 14);
    swift_bridgeObjectRelease(v42);
    v43 = v98;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v38, v39);
    v44 = v82;
    _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "SDAirDropNearFieldService: start active nearby sharing discovery: %s for client: %s", (uint8_t *)v33, 0x16u);
    v45 = v84;
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v46 = v39;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    v43 = v98;
    v46 = v99;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);

  }
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v48 = swift_getKeyPath(&unk_1005CF960);
  v49 = (uint64_t)v90;
  static Published.subscript.getter(v100, KeyPath, v48);
  swift_release(KeyPath);
  swift_release(v48);
  v50 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  LODWORD(KeyPath) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v49, 1, v50);
  v51 = sub_10000D0F0(v49, (uint64_t *)&unk_1007B6220);
  if ((_DWORD)KeyPath != 1)
  {
    v52 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v86, 1, 1, v7);
    sub_100253BF8(v52);
    v51 = sub_10000D0F0(v52, &qword_1007B7280);
  }
  v53 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter(v51);
  v55 = v54;
  v56 = (uint64_t)v91;
  v89(v91, a2, v46);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v56, 0, 1, v46);
  swift_beginAccess(v100 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel, v103, 33, 0);
  sub_100394A00(v56, v53, v55);
  v57 = swift_endAccess(v103);
  v58 = (uint64_t)v92;
  SFClientIdentity.connectionID.getter(v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v58, 1, v7) == 1)
  {
    v59 = sub_10000D0F0(v58, &qword_1007B7280);
  }
  else
  {
    v60 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v88, v58, v7);
    v61 = (uint64_t)v87;
    v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v87, v60, v7);
    v63 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter(v62);
    v65 = v64;
    v66 = (uint64_t *)(v100
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID);
    swift_beginAccess(v100 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID, v103, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v66);
    v102 = *v66;
    *v66 = 0x8000000000000000;
    sub_10046BB80(v63, v65, v61, isUniquelyReferenced_nonNull_native);
    v68 = *v66;
    *v66 = v102;
    swift_bridgeObjectRelease(v68);
    v69 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v69(v61, v7);
    swift_endAccess(v103);
    v59 = ((uint64_t (*)(char *, uint64_t))v69)(v60, v7);
  }
  v70 = v94;
  SFAirDrop.NearbySharingDiscovery.Request.pollingType.getter(v59);
  v71 = v95;
  v72 = v96;
  v73 = v93;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v93, v70, v96);
  v74 = (*(uint64_t (**)(char *, uint64_t))(v71 + 88))(v73, v72);
  if (v74 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.automatic(_:))
  {
    v75 = 0;
LABEL_17:
    v76 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v70, v96);
    v77 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter(v76);
    v79 = v78;
    sub_1002564B8(v75, v77, v78, 1);
    return swift_bridgeObjectRelease(v79);
  }
  if (v74 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.passive(_:))
  {
    v75 = 1;
    goto LABEL_17;
  }
  if (v74 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.full(_:))
  {
    v75 = 2;
    goto LABEL_17;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x8000000100612DD0, "DaemoniOSLibrary/SDAirDropNearFieldService.swift", 48, 2, 35, 0);
  __break(1u);
  return result;
}

void sub_1002564B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  __SecKey *v52;
  uint64_t v53;
  __SecIdentity *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  Class *v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t aBlock[5];
  _QWORD *v122;

  v115 = a4;
  v119 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v110 = *(_QWORD *)(v7 - 8);
  v111 = v7;
  __chkstk_darwin(v7);
  v109 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v107 = *(_QWORD *)(v9 - 8);
  v108 = v9;
  __chkstk_darwin(v9);
  v106 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B63F8);
  __chkstk_darwin(v11);
  v101 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v14 = *(_QWORD *)(v13 - 8);
  v112 = v13;
  v113 = v14;
  v15 = __chkstk_darwin(v13);
  v104 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v102 = (uint64_t)&v100 - v18;
  v19 = __chkstk_darwin(v17);
  v116 = (char *)&v100 - v20;
  v103 = v21;
  __chkstk_darwin(v19);
  v117 = (char *)&v100 - v22;
  v23 = type metadata accessor for SFClientAccessLevel(0);
  v100 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v100 - v27;
  v29 = sub_100008384((uint64_t *)&unk_1007B6450);
  __chkstk_darwin(v29);
  v31 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for SFClientIdentity(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = v4;
  v36 = (uint64_t *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel);
  swift_beginAccess(v36, aBlock, 32, 0);
  v37 = *v36;
  v38 = *(_QWORD *)(v37 + 16);
  v114 = a3;
  v105 = a2;
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v31, 1, 1, v32);
LABEL_7:
    sub_10000D0F0((uint64_t)v31, (uint64_t *)&unk_1007B6450);
    swift_endAccess(aBlock);
    v42 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(a3);
  v39 = sub_10045C200(a2, a3);
  if ((v40 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, *(_QWORD *)(v37 + 56) + *(_QWORD *)(v33 + 72) * v39, v32);
    v41 = 0;
  }
  else
  {
    v41 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v31, v41, 1, v32);
  swift_bridgeObjectRelease(v114);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
    goto LABEL_7;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v35, v31, v32);
  v43 = swift_endAccess(aBlock);
  v44 = SFClientIdentity.accessLevel.getter(v43);
  static SFClientAccessLevel.allowRestrictedBoop.getter(v44);
  v45 = sub_100220D78((unint64_t *)&unk_1007B6460, (uint64_t (*)(uint64_t))&type metadata accessor for SFClientAccessLevel, (uint64_t)&protocol conformance descriptor for SFClientAccessLevel);
  v42 = dispatch thunk of SetAlgebra.isSuperset(of:)(v26, v23, v45);
  v46 = *(void (**)(char *, uint64_t))(v100 + 8);
  v46(v26, v23);
  v46(v28, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
LABEL_9:
  v47 = (uint64_t)v116;
  v48 = (uint64_t)v117;
  v49 = v118;
  if ((sub_100259060(v119, v115 & 1, v42 & 1) & 1) == 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v76 = type metadata accessor for Logger(0);
    v77 = sub_100221DF8(v76, (uint64_t)qword_1007B6140);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79))
      goto LABEL_24;
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    v81 = "SDAirDropNearFieldService: Near field Controller is not available.";
    goto LABEL_23;
  }
  sub_10026DFD8();
  v50 = *(void **)(v49 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v50)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v82 = type metadata accessor for Logger(0);
    v83 = sub_100221DF8(v82, (uint64_t)qword_1007B6140);
    v78 = Logger.logObject.getter(v83);
    v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79))
      goto LABEL_24;
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    v81 = "SDAirDropNearFieldService: missing Near field Controller, will not start polling";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v78, v79, v81, v80, 2u);
    swift_slowDealloc(v80, -1, -1);
LABEL_24:

    return;
  }
  v51 = v50;
  UUID.init()(v51);
  v52 = sub_10016AB8C((void *)kSecAttrKeyTypeECSECPrimeRandom, 256);
  v53 = v112;
  *(_QWORD *)(v48 + *(int *)(v112 + 20)) = v52;
  v54 = sub_10016AD80(v52);
  v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v57 = v56;

  v58 = (uint64_t *)(v48 + *(int *)(v53 + 24));
  *v58 = v55;
  v58[1] = v57;
  v59 = v101;
  sub_100244384(v48, v101, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v113 + 56))(v59, 0, 1, v53);
  v60 = v49 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
  swift_beginAccess(v49 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload, aBlock, 33, 0);
  sub_10023A084(v59, v60, &qword_1007B63F8);
  swift_endAccess(aBlock);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v61 = type metadata accessor for Logger(0);
  sub_100221DF8(v61, (uint64_t)qword_1007B6140);
  sub_100244384(v48, v47, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  v62 = v102;
  v63 = sub_100244384(v48, v102, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(22, -1);
    v67 = (Class *)swift_slowAlloc(8, -1);
    v116 = (char *)swift_slowAlloc(32, -1);
    aBlock[0] = (uint64_t)v116;
    *(_DWORD *)v66 = 138412546;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v120 = isa;
    v117 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, aBlock, v66 + 4);
    *v67 = isa;
    sub_1002443C8(v47, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    *(_WORD *)(v66 + 12) = 2080;
    v69 = type metadata accessor for UUID(0);
    v70 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v71 = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
    v73 = v72;
    v120 = (_QWORD *)sub_100228BD8(v71, v72, aBlock);
    v51 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, aBlock, v66 + 14);
    swift_bridgeObjectRelease(v73);
    sub_1002443C8(v62, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "SDAirDropNearFieldService: Starting to poll with public key: %@ listener ID: %s", (uint8_t *)v66, 0x16u);
    v74 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v67, 1, v74);
    swift_slowDealloc(v67, -1, -1);
    v75 = v116;
    swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v66, -1, -1);
  }
  else
  {
    sub_1002443C8(v47, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    sub_1002443C8(v62, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  }

  v84 = v114;
  v85 = v105;
  v86 = v104;
  sub_100244384(v48, v104, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  v87 = *(unsigned __int8 *)(v113 + 80);
  v88 = (v87 + 48) & ~v87;
  v89 = (_QWORD *)swift_allocObject(&unk_10071E9D8, v88 + v103, v87 | 7);
  v90 = v119;
  v89[2] = v51;
  v89[3] = v90;
  v89[4] = v85;
  v89[5] = v84;
  sub_100221DB4(v86, (uint64_t)v89 + v88, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  aBlock[4] = (uint64_t)sub_10026E280;
  v122 = v89;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10025BBB4;
  aBlock[3] = (uint64_t)&unk_10071E9F0;
  v91 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v84);
  v92 = v51;
  v93 = v106;
  static DispatchQoS.unspecified.getter();
  v120 = _swiftEmptyArrayStorage;
  v94 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v95 = sub_100008384((uint64_t *)&unk_1007B6410);
  v96 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  v97 = v109;
  v98 = v95;
  v99 = v111;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v120, v98, v96, v111, v94);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v93, v97, v91);
  _Block_release(v91);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v97, v99);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v93, v108);
  sub_1002443C8(v48, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  swift_release(v122);
}

uint64_t sub_100256F20(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  int v44;
  uint64_t result;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t i;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  uint64_t v107;
  int v108;
  char *v109;
  uint64_t v110;
  uint8_t *v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(_QWORD, _QWORD, _QWORD);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126[3];

  v117 = a1;
  v115 = sub_100008384(&qword_1007B6470);
  __chkstk_darwin(v115);
  v2 = (char *)&v96 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for SFAirDrop.NearbySharingAssertion(0);
  v120 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v124 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384(&qword_1007B6478);
  v5 = __chkstk_darwin(v4);
  v100 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v104 = (char *)&v96 - v7;
  v8 = sub_100008384(&qword_1007B7280);
  v9 = __chkstk_darwin(v8);
  v116 = (uint64_t)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v122 = (uint64_t)&v96 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v96 - v14;
  __chkstk_darwin(v13);
  v17 = (uint64_t)&v96 - v16;
  v121 = type metadata accessor for UUID(0);
  v110 = *(_QWORD *)(v121 - 8);
  v18 = __chkstk_darwin(v121);
  v109 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v96 - v20;
  v22 = type metadata accessor for SFClientIdentity(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v114 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v96 - v26;
  if (qword_1007B3D18 != -1)
    goto LABEL_53;
  while (1)
  {
    v28 = type metadata accessor for Logger(0);
    sub_100221DF8(v28, (uint64_t)qword_1007B6140);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v27, v117, v22);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      LODWORD(v119) = v32;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v118 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc(32, -1);
      v126[0] = (uint64_t)v118;
      v111 = v33;
      *(_DWORD *)v33 = 136315138;
      v113 = (void (*)(char *, uint64_t))(v33 + 4);
      v34 = sub_100220D78(&qword_1007B6490, (uint64_t (*)(uint64_t))&type metadata accessor for SFClientIdentity, (uint64_t)&protocol conformance descriptor for SFClientIdentity);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v22, v34);
      v37 = v36;
      v125 = sub_100228BD8(v35, v36, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v113);
      swift_bridgeObjectRelease(v37);
      v113 = *(void (**)(char *, uint64_t))(v23 + 8);
      v113(v27, v22);
      v38 = v111;
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v119, "SDAirDropNearFieldService: Requested stop active nearby sharing discovery for client: %s", v111, 0xCu);
      v39 = v118;
      swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      v113 = *(void (**)(char *, uint64_t))(v23 + 8);
      v113(v27, v22);
    }

    SFClientIdentity.connectionID.getter(v40);
    v41 = v110;
    v42 = *(uint8_t **)(v110 + 48);
    v43 = v121;
    v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42)(v17, 1, v121);
    v23 = (uint64_t)v104;
    if (v44 == 1)
      return sub_10000D0F0(v17, &qword_1007B7280);
    v106 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
    v106(v21, v17, v43);
    v46 = (uint64_t *)(v107
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID);
    swift_beginAccess(v107 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID, v126, 32, 0);
    v47 = *v46;
    if (*(_QWORD *)(*v46 + 16) && (v48 = sub_10045C2DC((uint64_t)v21), (v49 & 1) != 0))
    {
      v50 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 16 * v48);
      v51 = *v50;
      v52 = v50[1];
      swift_endAccess(v126);
      swift_bridgeObjectRetain(v52);
      sub_100257A44(v51, v52);
      swift_bridgeObjectRelease(v52);
      swift_beginAccess(v46, v126, 33, 0);
      sub_10026A258((uint64_t)v21);
      v54 = v53;
      swift_endAccess(v126);
      swift_bridgeObjectRelease(v54);
    }
    else
    {
      swift_endAccess(v126);
    }
    v27 = v100;
    v55 = (uint64_t *)(v107
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess(v107 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID, v126, 0, 0);
    v56 = *v55;
    v57 = *(_QWORD *)(*v55 + 64);
    v98 = *v55 + 64;
    v58 = 1 << *(_BYTE *)(v56 + 32);
    v59 = -1;
    if (v58 < 64)
      v59 = ~(-1 << v58);
    v60 = v59 & v57;
    v99 = (unint64_t)(v58 + 63) >> 6;
    v97 = v99 - 1;
    v101 = v56;
    result = swift_bridgeObjectRetain(v56);
    v17 = 0;
    v111 = v42;
    v112 = v21;
LABEL_16:
    if (v60)
    {
      v105 = (v60 - 1) & v60;
      v61 = __clz(__rbit64(v60)) | (v17 << 6);
      goto LABEL_18;
    }
    v66 = v17 + 1;
    if (!__OFADD__(v17, 1))
      break;
    __break(1u);
LABEL_53:
    swift_once(&qword_1007B3D18, sub_1002531A0);
  }
  if (v66 >= v99)
    goto LABEL_36;
  v67 = *(_QWORD *)(v98 + 8 * v66);
  if (v67)
    goto LABEL_22;
  v68 = v17 + 2;
  ++v17;
  if (v66 + 1 >= v99)
    goto LABEL_36;
  v67 = *(_QWORD *)(v98 + 8 * v68);
  if (v67)
  {
LABEL_25:
    v66 = v68;
    goto LABEL_22;
  }
  v17 = v66 + 1;
  if (v66 + 2 >= v99)
    goto LABEL_36;
  v67 = *(_QWORD *)(v98 + 8 * (v66 + 2));
  if (v67)
  {
    v66 += 2;
LABEL_22:
    v105 = (v67 - 1) & v67;
    v61 = __clz(__rbit64(v67)) + (v66 << 6);
    v17 = v66;
LABEL_18:
    v62 = v101;
    (*(void (**)(char *, unint64_t, uint64_t))(v110 + 16))(v27, *(_QWORD *)(v101 + 48) + *(_QWORD *)(v110 + 72) * v61, v121);
    v63 = *(_QWORD *)(v62 + 56);
    v64 = sub_100008384((uint64_t *)&unk_1007B6480);
    v65 = *(_QWORD *)(v63 + 8 * v61);
    *(_QWORD *)&v27[*(int *)(v64 + 48)] = v65;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v27, 0, 1, v64);
    swift_bridgeObjectRetain(v65);
    v23 = (uint64_t)v104;
    goto LABEL_37;
  }
  v68 = v66 + 3;
  v17 = v66 + 2;
  if (v66 + 3 >= v99)
    goto LABEL_36;
  v67 = *(_QWORD *)(v98 + 8 * v68);
  if (v67)
    goto LABEL_25;
  while (1)
  {
    v66 = v68 + 1;
    if (__OFADD__(v68, 1))
      break;
    if (v66 >= v99)
    {
      v17 = v97;
LABEL_36:
      v69 = sub_100008384((uint64_t *)&unk_1007B6480);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v27, 1, 1, v69);
      v105 = 0;
LABEL_37:
      sub_10026E2B4((uint64_t)v27, v23);
      v70 = sub_100008384((uint64_t *)&unk_1007B6480);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v23, 1, v70) == 1)
      {
        swift_release(v101);
        return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v21, v121);
      }
      v71 = *(_QWORD *)(v23 + *(int *)(v70 + 48));
      v72 = *(_QWORD *)(v71 + 16);
      if (v72)
      {
        v103 = v17;
        v73 = (*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
        v102 = v71;
        v74 = v71 + v73;
        v75 = *(_QWORD *)(v120 + 72);
        v118 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v120 + 16);
        v119 = v75;
        for (i = v118(v124, v71 + v73, v123); ; i = v118(v124, v74, v123))
        {
          v77 = v114;
          v78 = SFAirDrop.NearbySharingAssertion.client.getter(i);
          SFClientIdentity.connectionID.getter(v78);
          v79 = v22;
          v80 = ((uint64_t (*)(char *, uint64_t))v113)(v77, v22);
          v81 = (uint64_t)v15;
          v82 = v122;
          SFClientIdentity.connectionID.getter(v80);
          v83 = (uint64_t)&v2[*(int *)(v115 + 48)];
          sub_100221F28(v81, (uint64_t)v2, &qword_1007B7280);
          sub_100221F28(v82, v83, &qword_1007B7280);
          v84 = v121;
          v85 = v111;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v111)(v2, 1, v121) == 1)
            break;
          sub_100221F28((uint64_t)v2, v116, &qword_1007B7280);
          v88 = v84;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v85)(v83, 1, v84) == 1)
          {
            sub_10000D0F0(v122, &qword_1007B7280);
            v15 = (char *)v81;
            sub_10000D0F0(v81, &qword_1007B7280);
            (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v116, v84);
            v22 = v79;
LABEL_41:
            sub_10000D0F0((uint64_t)v2, &qword_1007B6470);
            v21 = v112;
            goto LABEL_42;
          }
          v89 = v109;
          v106(v109, v83, v88);
          v90 = sub_100220D78((unint64_t *)&unk_1007B7300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v91 = v116;
          v108 = dispatch thunk of static Equatable.== infix(_:_:)(v116, v89, v88, v90);
          v92 = (uint64_t)v2;
          v93 = v88;
          v94 = *(void (**)(char *, uint64_t))(v110 + 8);
          v94(v89, v93);
          sub_10000D0F0(v122, &qword_1007B7280);
          sub_10000D0F0(v81, &qword_1007B7280);
          v94((char *)v91, v93);
          v15 = (char *)v81;
          v2 = (char *)v92;
          v87 = sub_10000D0F0(v92, &qword_1007B7280);
          v21 = v112;
          v22 = v79;
          if ((v108 & 1) != 0)
            goto LABEL_49;
LABEL_42:
          (*(void (**)(char *, uint64_t))(v120 + 8))(v124, v123);
          v74 += v119;
          if (!--v72)
          {
            swift_bridgeObjectRelease(v102);
            v27 = v100;
            v17 = v103;
            goto LABEL_15;
          }
        }
        sub_10000D0F0(v82, &qword_1007B7280);
        sub_10000D0F0(v81, &qword_1007B7280);
        v86 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v85)(v83, 1, v84);
        v15 = (char *)v81;
        v22 = v79;
        if (v86 != 1)
          goto LABEL_41;
        v87 = sub_10000D0F0((uint64_t)v2, &qword_1007B7280);
        v21 = v112;
LABEL_49:
        v95 = (uint64_t)v109;
        SFAirDrop.NearbySharingAssertion.id.getter(v87);
        sub_10025829C(v95);
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v95, v121);
        goto LABEL_42;
      }
      swift_bridgeObjectRelease(v71);
LABEL_15:
      v23 = (uint64_t)v104;
      result = (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v104, v121);
      v60 = v105;
      goto LABEL_16;
    }
    v67 = *(_QWORD *)(v98 + 8 * v66);
    ++v68;
    if (v67)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

void sub_100257A44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50[3];

  v3 = v2;
  v47 = a1;
  v5 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v5);
  v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384((uint64_t *)&unk_1007B6450);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v10 = type metadata accessor for Logger(0);
  sub_100221DF8(v10, (uint64_t)qword_1007B6140);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v50[0] = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v48 = sub_100228BD8(v47, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v14 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SDAirDropNearFieldService: Requested stop active nearby sharing discovery: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v16 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v16)
  {
    v30 = swift_bridgeObjectRetain_n(a2, 2);
    v17 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v17, v31))
    {

      swift_bridgeObjectRelease_n(a2, 2);
      return;
    }
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v50[0] = v33;
    *(_DWORD *)v32 = 136315138;
    swift_bridgeObjectRetain(a2);
    v48 = sub_100228BD8(v47, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v32 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v31, "SDAirDropNearFieldService: Near field controller not start. Fail to stop active nearby sharing discovery for: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
    goto LABEL_24;
  }
  v17 = v16;
  v18 = -[NSObject currentApplicationLabel](v17, "currentApplicationLabel");
  if (!v18)
  {
    v34 = swift_bridgeObjectRetain_n(a2, 2);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v50[0] = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain(a2);
      v48 = sub_100228BD8(v47, a2, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "SDAirDropNearFieldService: missing current application label. Ignore request to to stop active nearby sharing discovery for: %s", (uint8_t *)v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      v39 = v38;
LABEL_18:
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v37, -1, -1);

LABEL_24:
      return;
    }

LABEL_23:
    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_24;
  }
  v19 = v18;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;

  v23 = type metadata accessor for SFClientIdentity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 1, 1, v23);
  swift_beginAccess(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel, v50, 33, 0);
  swift_bridgeObjectRetain(v22);
  sub_100394A00((uint64_t)v9, v20, v22);
  swift_endAccess(v50);
  if ((v20 != v47 || v22 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v47, a2, 0) & 1) == 0)
  {
    v50[0] = v20;
    v50[1] = v22;
    v48 = v47;
    v49 = a2;
    v24 = sub_100221E10();
    if ((StringProtocol.contains<A>(_:)(&v48, &type metadata for String, &type metadata for String, v24, v24) & 1) == 0)
    {
      swift_bridgeObjectRetain_n(a2, 2);
      v42 = swift_bridgeObjectRetain(v22);
      v35 = Logger.logObject.getter(v42);
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v43))
      {
        v37 = swift_slowAlloc(22, -1);
        v44 = swift_slowAlloc(64, -1);
        v50[0] = v44;
        *(_DWORD *)v37 = 136315394;
        swift_bridgeObjectRetain(a2);
        v48 = sub_100228BD8(v47, a2, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v37 + 12) = 2080;
        swift_bridgeObjectRetain(v22);
        v48 = sub_100228BD8(v20, v22, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 14);
        swift_bridgeObjectRelease_n(v22, 3);
        _os_log_impl((void *)&_mh_execute_header, v35, v43, "SDAirDropNearFieldService: stop nearby sharing discovery for application label: %s failed because active application label is not matching: %s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        v39 = v44;
        goto LABEL_18;
      }

      swift_bridgeObjectRelease_n(v22, 2);
      goto LABEL_23;
    }
  }
  sub_1002564B8(*(_QWORD *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  v25 = swift_bridgeObjectRetain(v22);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v50[0] = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain(v22);
    v48 = sub_100228BD8(v20, v22, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 4);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "SDAirDropNearFieldService: stop active nearby sharing discovery: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
  v40 = (uint64_t)v46;
  v41 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  sub_100253BF8(v40);

  sub_10000D0F0(v40, &qword_1007B7280);
}

void sub_10025829C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, _QWORD *);
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (**v46)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void (**v64)(uint64_t, uint64_t, uint64_t, char *);
  unint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  void (**v129)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[3];
  uint64_t v137;
  uint64_t v138;

  v2 = v1;
  v133 = a1;
  v3 = sub_100008384((uint64_t *)&unk_1007B63E0);
  __chkstk_darwin(v3);
  v126 = (uint64_t)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = (_QWORD *)type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v5 = *(v132 - 1);
  __chkstk_darwin(v132);
  v128 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384((uint64_t *)&unk_1007B6220);
  __chkstk_darwin(v7);
  v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B7280);
  v11 = __chkstk_darwin(v10);
  v125 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v131 = (char *)&v119 - v13;
  v134 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v134 - 8);
  v14 = __chkstk_darwin(v134);
  v129 = (void (**)(uint64_t, uint64_t, uint64_t, char *))((char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __chkstk_darwin(v14);
  v127 = (char *)&v119 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v119 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v119 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v119 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v119 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v119 - v30;
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v33 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v2, KeyPath, v33);
  swift_release(KeyPath);
  v34 = v33;
  v35 = v132;
  swift_release(v34);
  v36 = v5;
  if (!(*(unsigned int (**)(char *, uint64_t, _QWORD *))(v5 + 48))(v9, 1, v35))
  {
    v120 = v26;
    v121 = v23;
    v122 = v20;
    v123 = v2;
    v124 = v31;
    v40 = *(void (**)(char *, char *, _QWORD *))(v5 + 16);
    v41 = v128;
    v40(v128, v9, v35);
    v42 = sub_10000D0F0((uint64_t)v9, (uint64_t *)&unk_1007B6220);
    v37 = (uint64_t)v131;
    SFAirDrop.NearbySharingInteraction.id.getter(v42);
    (*(void (**)(char *, _QWORD *))(v36 + 8))(v41, v35);
    v38 = v130;
    v43 = *(char **)(v130 + 56);
    v39 = v134;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v43)(v37, 0, 1, v134);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v37, 1, v39) == 1)
      goto LABEL_4;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v124, v37, v39);
    v57 = (uint64_t *)(v123
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess(v123 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID, v136, 32, 0);
    v58 = *v57;
    v59 = v133;
    if (*(_QWORD *)(*v57 + 16) && (v60 = sub_10045C2DC((uint64_t)v124), (v61 & 1) != 0))
    {
      v137 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v60);
      v62 = v137;
      swift_endAccess(v136);
      v63 = *(_QWORD *)(v62 + 16);
      if (v63)
      {
        v119 = v57;
        v128 = v43;
        v131 = (char *)type metadata accessor for SFAirDrop.NearbySharingAssertion(0);
        v132 = (_QWORD *)v62;
        v64 = (void (**)(uint64_t, uint64_t, uint64_t, char *))*((_QWORD *)v131 - 1);
        v65 = v62 + ((*((unsigned __int8 *)v64 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v64 + 80));
        v129 = v64;
        v66 = v64[9];
        v67 = swift_bridgeObjectRetain_n(v62, 2);
        v68 = 0;
        while (1)
        {
          SFAirDrop.NearbySharingAssertion.id.getter(v67);
          v69 = static UUID.== infix(_:_:)(v29, v59);
          v70 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
          v67 = v70(v29, v134);
          if ((v69 & 1) != 0)
            break;
          ++v68;
          v65 += (unint64_t)v66;
          if (v63 == v68)
          {
            swift_bridgeObjectRelease(v132);
            v39 = v134;
            goto LABEL_18;
          }
        }
        swift_bridgeObjectRelease(v132);
        if (qword_1007B3D18 != -1)
          swift_once(&qword_1007B3D18, sub_1002531A0);
        v83 = type metadata accessor for Logger(0);
        v84 = sub_100221DF8(v83, (uint64_t)qword_1007B6140);
        v85 = v120;
        v86 = v134;
        v132 = *(_QWORD **)(v38 + 16);
        v87 = ((uint64_t (*)(char *, uint64_t, uint64_t))v132)(v120, v59, v134);
        v130 = v84;
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc(12, -1);
          v91 = swift_slowAlloc(32, -1);
          v136[0] = v91;
          *(_DWORD *)v90 = 136315138;
          v127 = (char *)(v90 + 4);
          v92 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v93 = dispatch thunk of CustomStringConvertible.description.getter(v86, v92);
          v95 = v94;
          v135 = sub_100228BD8(v93, v94, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v127);
          swift_bridgeObjectRelease(v95);
          v70(v85, v86);
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "SDAirDropNearFieldService: Releasing assertion:%s", v90, 0xCu);
          swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1, -1);
          v96 = v90;
          v59 = v133;
          swift_slowDealloc(v96, -1, -1);
        }
        else
        {
          v70(v85, v86);
        }

        v97 = (uint64_t)v124;
        v98 = v126;
        v99 = v121;
        if (v137)
        {
          sub_100268A5C(v68, v126);
          v100 = 0;
        }
        else
        {
          v100 = 1;
        }
        v101 = v122;
        v129[7](v98, v100, 1, v131);
        sub_10000D0F0(v98, (uint64_t *)&unk_1007B63E0);
        if (v137 && !*(_QWORD *)(v137 + 16))
        {
          v102 = (uint64_t (*)(char *, uint64_t, uint64_t))v132;
          ((void (*)(char *, uint64_t, uint64_t))v132)(v99, v59, v86);
          v103 = v102(v101, v97, v86);
          v104 = Logger.logObject.getter(v103);
          v105 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v104, v105))
          {
            v106 = swift_slowAlloc(22, -1);
            v133 = swift_slowAlloc(64, -1);
            v136[0] = v133;
            *(_DWORD *)v106 = 136315394;
            v107 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v108 = dispatch thunk of CustomStringConvertible.description.getter(v86, v107);
            v110 = v109;
            v135 = sub_100228BD8(v108, v109, v136);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v106 + 4);
            swift_bridgeObjectRelease(v110);
            v70(v99, v134);
            *(_WORD *)(v106 + 12) = 2080;
            v111 = v122;
            v112 = v107;
            v97 = (uint64_t)v124;
            v113 = dispatch thunk of CustomStringConvertible.description.getter(v134, v112);
            v115 = v114;
            v135 = sub_100228BD8(v113, v114, v136);
            v86 = v134;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v106 + 14);
            swift_bridgeObjectRelease(v115);
            v70(v111, v86);
            _os_log_impl((void *)&_mh_execute_header, v104, v105, "SDAirDropNearFieldService: No more assertions:%s for nearby sharing interaction:%s", (uint8_t *)v106, 0x16u);
            v116 = v133;
            swift_arrayDestroy(v133, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v116, -1, -1);
            swift_slowDealloc(v106, -1, -1);
          }
          else
          {
            v70(v99, v86);
            v70(v101, v86);
          }

          v117 = (uint64_t)v125;
          swift_beginAccess(v119, v136, 33, 0);
          v118 = sub_100269F88(v97);
          swift_endAccess(v136);
          swift_bridgeObjectRelease(v118);
          ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v117, v97, v86);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v128)(v117, 0, 1, v86);
          sub_100253BF8(v117);
          sub_10000D0F0(v117, &qword_1007B7280);
        }
        v70((char *)v97, v86);
        goto LABEL_24;
      }
      swift_bridgeObjectRetain(v62);
    }
    else
    {
      v137 = 0;
      swift_endAccess(v136);
    }
LABEL_18:
    v71 = v127;
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v72 = type metadata accessor for Logger(0);
    sub_100221DF8(v72, (uint64_t)qword_1007B6140);
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 16))(v71, v59, v39);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = swift_slowAlloc(32, -1);
      v136[0] = v77;
      *(_DWORD *)v76 = 136315138;
      v78 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v39, v78);
      v81 = v80;
      v135 = sub_100228BD8(v79, v80, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v76 + 4);
      swift_bridgeObjectRelease(v81);
      v82 = *(void (**)(char *, uint64_t))(v38 + 8);
      v82(v71, v39);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "SDAirDropNearFieldService: Failed to release nearby sharing assertion %s because we don't have any active assertions for it.", v76, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);

    }
    else
    {

      v82 = *(void (**)(char *, uint64_t))(v38 + 8);
      v82(v71, v39);
    }
    v82(v124, v39);
LABEL_24:
    swift_bridgeObjectRelease(v137);
    return;
  }
  sub_10000D0F0((uint64_t)v9, (uint64_t *)&unk_1007B6220);
  v38 = v130;
  v37 = (uint64_t)v131;
  v39 = v134;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v131, 1, 1, v134);
LABEL_4:
  sub_10000D0F0(v37, &qword_1007B7280);
  v44 = v133;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v45 = type metadata accessor for Logger(0);
  sub_100221DF8(v45, (uint64_t)qword_1007B6140);
  v46 = v129;
  v47 = (*(uint64_t (**)(void (**)(uint64_t, uint64_t, uint64_t, char *), uint64_t, uint64_t))(v38 + 16))(v129, v44, v39);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = v38;
    v52 = swift_slowAlloc(32, -1);
    v136[0] = v52;
    *(_DWORD *)v50 = 136315138;
    v53 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v39, v53);
    v56 = v55;
    v137 = sub_100228BD8(v54, v55, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v50 + 4);
    swift_bridgeObjectRelease(v56);
    (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, char *), uint64_t))(v51 + 8))(v46, v39);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "SDAirDropNearFieldService: Failed to release assertion:%s because there is no active nearby sharing interaction", v50, 0xCu);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, char *), uint64_t))(v38 + 8))(v46, v39);
  }

}

void sub_100258EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v1 = v0;
  v2 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100221DF8(v5, (uint64_t)qword_1007B6140);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: stop", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  sub_100253BF8((uint64_t)v4);
  sub_10000D0F0((uint64_t)v4, &qword_1007B7280);
  sub_1002597AC(1);
  v11 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

}

uint64_t sub_100259060(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  const char *v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = v3;
  sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v8 = (void *)static NSUserDefaults.airdrop.getter();
  v9 = SFAirDropUserDefaults.nearFieldSharingEnabled.getter();

  if ((v9 & 1) == 0 && a1 != 2)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100221DF8(v10, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - feature disabled";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1, -1);
LABEL_18:

    return 0;
  }
  v16 = (void *)static NSUserDefaults.airdrop.getter();
  v17 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v17 & 1) == 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100221DF8(v21, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v22);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - BoopToAction feature flag disabled";
    goto LABEL_17;
  }
  v18 = *(void **)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus);
  if ((objc_msgSend(v18, "isClarityBoardEnabled") & 1) != 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100221DF8(v19, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v20);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - ClarityBoard Enabled";
    goto LABEL_17;
  }
  if ((a2 & 1) == 0 && objc_msgSend(v18, "lowPowerModeEnabled"))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100221DF8(v24, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v25);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - Low power mode enabled";
    goto LABEL_17;
  }
  if ((a3 & 1) == 0 && (objc_msgSend(v18, "isAirDropAllowed") & 1) == 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100221DF8(v30, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v31);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - AirDrop is restricted";
    goto LABEL_17;
  }
  if ((SFStoreDemoMode() & 1) != 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100221DF8(v26, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v27);
    v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - Store Demo Mode Enabled";
    goto LABEL_17;
  }
  if (!objc_msgSend(v18, "screenOn"))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100221DF8(v32, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v33);
    v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - screen is off";
    goto LABEL_17;
  }
  if (!objc_msgSend(v18, "wirelessEnabled"))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100221DF8(v34, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v35);
    v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - wifi is off";
    goto LABEL_17;
  }
  if ((BYSetupAssistantNeedsToRun() & 1) != 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100221DF8(v28, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v29);
    v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - device in Buddy";
    goto LABEL_17;
  }
  if ((objc_msgSend(v18, "systemUIFlags") & 0x80000) != 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100221DF8(v36, (uint64_t)qword_1007B6140);
    v12 = Logger.logObject.getter(v37);
    v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13))
      goto LABEL_18;
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - Buddy is visible";
    goto LABEL_17;
  }
  return 1;
}

void sub_100259718(void *a1, uint64_t a2)
{
  Class isa;
  Class v5;
  id v6;

  v6 = String._bridgeToObjectiveC()();
  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "startPolling:applicationLabel:pkData:bonjourListenerUUID:", a2, v6, isa, v5);

}

uint64_t sub_1002597AC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (v12)
  {
    v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue);
    v13 = swift_allocObject(&unk_10071EA28, 25, 7);
    *(_QWORD *)(v13 + 16) = v12;
    *(_BYTE *)(v13 + 24) = a1 & 1;
    aBlock[4] = sub_10026E360;
    v24 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025BBB4;
    aBlock[3] = &unk_10071EA40;
    v14 = _Block_copy(aBlock);
    v20 = v12;
    static DispatchQoS.unspecified.getter(v20);
    v22 = _swiftEmptyArrayStorage;
    v15 = v4;
    v16 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v17 = sub_100008384((uint64_t *)&unk_1007B6410);
    v18 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v3, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return swift_release(v24);
  }
  return result;
}

uint64_t sub_1002599C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = v4;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100221DF8(v10, (uint64_t)qword_1007B6140);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SDAirDropNearFieldService: start", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  if ((a2 & 1) != 0)
    a1 = *(_QWORD *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType);
  if (a4)
    v15 = a4;
  else
    v15 = 0x8000000100612D70;
  if (a4)
    v16 = a3;
  else
    v16 = 0xD000000000000013;
  swift_bridgeObjectRetain(a4);
  sub_1002564B8(a1, v16, v15, 0);
  return swift_bridgeObjectRelease(v15);
}

void sub_100259B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v1 = v0;
  v2 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100221DF8(v5, (uint64_t)qword_1007B6140);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: restart", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SDAirDropNearFieldService: stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
  sub_100253BF8((uint64_t)v4);
  sub_10000D0F0((uint64_t)v4, &qword_1007B7280);
  sub_1002597AC(1);
  v15 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService: start", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  sub_1002564B8(*(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
}

void sub_100259D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint8_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint8_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  Class v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Class v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t KeyPath;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  double v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  uint64_t v123;
  char *v124;
  void (*v125)(char *, uint64_t);
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  Class isa;
  NSObject *v143;
  _QWORD *v144;
  uint64_t aBlock[5];
  uint64_t v146;

  v0 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v0);
  v141 = (char *)&v120 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for SFPlatform(0);
  v138 = *(_QWORD *)(v2 - 8);
  v139 = v2;
  __chkstk_darwin(v2);
  v135 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DispatchTime(0);
  v137 = *(_QWORD *)(v140 - 8);
  v4 = __chkstk_darwin(v140);
  v134 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v136 = (char *)&v120 - v6;
  v131 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v131);
  v132 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384((uint64_t *)&unk_1007B6220);
  v9 = __chkstk_darwin(v8);
  v126 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v128 = (char *)&v120 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v130 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v125 = (void (*)(char *, uint64_t))((char *)&v120 - v17);
  v18 = __chkstk_darwin(v16);
  v124 = (char *)&v120 - v19;
  v129 = v20;
  __chkstk_darwin(v18);
  v22 = (char *)&v120 - v21;
  v23 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v23);
  v25 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  isa = v30[-1].isa;
  v143 = v30;
  __chkstk_darwin(v30);
  v32 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v34 = (void *)static NSUserDefaults.airdrop.getter(v33);
  v35 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v35 & 1) != 0)
  {
    SFAirDrop.NearbySharingInteraction.PresenceContext.init()();
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:), v26);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v25, 1, 1, v12);
    v36 = SFAirDrop.NearbySharingInteraction.init(state:id:)(v29, v25);
    SFAirDrop.NearbySharingInteraction.id.getter(v36);
    v37 = objc_msgSend((id)objc_opt_self(SDStatusMonitor), "sharedMonitor");
    if (v37)
    {
      v38 = v37;
      v39 = v12;
      v40 = v32;
      v41 = v13;
      v42 = objc_msgSend(v37, "deviceKeyBagLocked");

      v122 = v22;
      v127 = v32;
      v123 = v12;
      if (v42)
      {
        if (qword_1007B3D18 != -1)
          swift_once(&qword_1007B3D18, sub_1002531A0);
        v43 = type metadata accessor for Logger(0);
        sub_100221DF8(v43, (uint64_t)qword_1007B6140);
        v44 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
        v45 = v124;
        v121 = v44;
        v46 = ((uint64_t (*)(char *, char *, uint64_t))v44)(v124, v22, v12);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          aBlock[0] = v50;
          *(_DWORD *)v49 = 136315138;
          v51 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v52 = dispatch thunk of CustomStringConvertible.description.getter(v12, v51);
          v54 = v53;
          v144 = (_QWORD *)sub_100228BD8(v52, v53, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, aBlock, v49 + 4);
          swift_bridgeObjectRelease(v54);
          v55 = v41;
          v56 = v12;
          v125 = *(void (**)(char *, uint64_t))(v41 + 8);
          v125(v45, v12);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "SDAirDropNearFieldService: begin \"pending\" nearby sharing interaction:%s", v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);
        }
        else
        {
          v55 = v41;
          v56 = v12;
          v125 = *(void (**)(char *, uint64_t))(v41 + 8);
          v125(v45, v12);
        }

        v76 = v130;
        v77 = v129;
        v78 = (uint64_t)v128;
        v80 = isa;
        v79 = v143;
        (*((void (**)(char *, char *, NSObject *))isa + 2))(v128, v127, v143);
        (*((void (**)(uint64_t, _QWORD, uint64_t, NSObject *))v80 + 7))(v78, 0, 1, v79);
        v81 = v133;
        v82 = &v133[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
        swift_beginAccess(&v133[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction], aBlock, 33, 0);
        sub_10023A084(v78, (uint64_t)v82, (uint64_t *)&unk_1007B6220);
        swift_endAccess(aBlock);
        v84 = v140;
        v83 = (uint64_t)v141;
        v85 = v56;
        v86 = v139;
      }
      else
      {
        if (qword_1007B3D18 != -1)
          swift_once(&qword_1007B3D18, sub_1002531A0);
        v61 = type metadata accessor for Logger(0);
        sub_100221DF8(v61, (uint64_t)qword_1007B6140);
        v62 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
        v63 = (char *)v125;
        v64 = v62((char *)v125, v22, v39);
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.default.getter();
        v67 = os_log_type_enabled(v65, v66);
        v121 = (void (*)(char *, char *, uint64_t))v62;
        if (v67)
        {
          v68 = (uint8_t *)swift_slowAlloc(12, -1);
          v69 = v63;
          v70 = swift_slowAlloc(32, -1);
          aBlock[0] = v70;
          *(_DWORD *)v68 = 136315138;
          v71 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v72 = dispatch thunk of CustomStringConvertible.description.getter(v39, v71);
          v74 = v73;
          v144 = (_QWORD *)sub_100228BD8(v72, v73, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, aBlock, v68 + 4);
          swift_bridgeObjectRelease(v74);
          v55 = v13;
          v125 = *(void (**)(char *, uint64_t))(v13 + 8);
          v125(v69, v39);
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "SDAirDropNearFieldService: begin nearby sharing interaction:%s", v68, 0xCu);
          swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          v75 = v68;
          v40 = v127;
          swift_slowDealloc(v75, -1, -1);
        }
        else
        {
          v55 = v13;
          v125 = *(void (**)(char *, uint64_t))(v13 + 8);
          v125(v63, v39);
        }

        v83 = (uint64_t)v141;
        v87 = isa;
        v86 = v139;
        v88 = (uint64_t)v126;
        v89 = (uint64_t)v128;
        v90 = v143;
        (*((void (**)(char *, char *, NSObject *))isa + 2))(v128, v40, v143);
        (*((void (**)(uint64_t, _QWORD, uint64_t, NSObject *))v87 + 7))(v89, 0, 1, v90);
        KeyPath = swift_getKeyPath(&unk_1005CF938);
        v92 = swift_getKeyPath(&unk_1005CF960);
        sub_100221F28(v89, v88, (uint64_t *)&unk_1007B6220);
        v81 = v133;
        static Published.subscript.setter(v88, v133, KeyPath, v92);
        sub_10000D0F0(v89, (uint64_t *)&unk_1007B6220);
        v84 = v140;
        v76 = v130;
        v77 = v129;
        v85 = v123;
      }
      sub_10025AA50();
      v93 = (uint64_t)v122;
      v121(v76, v122, v85);
      v94 = *(unsigned __int8 *)(v55 + 80);
      v95 = (v94 + 24) & ~v94;
      v96 = swift_allocObject(&unk_10071EB68, v95 + v77, v94 | 7);
      *(_QWORD *)(v96 + 16) = v81;
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v96 + v95, v76, v85);
      aBlock[4] = (uint64_t)sub_10026EACC;
      v146 = v96;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10025BBB4;
      aBlock[3] = (uint64_t)&unk_10071EB80;
      v97 = _Block_copy(aBlock);
      v144 = _swiftEmptyArrayStorage;
      v98 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v99 = (char *)v81;
      v100 = sub_100008384((uint64_t *)&unk_1007B6410);
      v101 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
      v102 = v132;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v144, v100, v101, v131, v98);
      v103 = type metadata accessor for DispatchWorkItem(0);
      swift_allocObject(v103, *(unsigned int *)(v103 + 48), *(unsigned __int16 *)(v103 + 52));
      v104 = DispatchWorkItem.init(flags:block:)(v102, v97);
      v105 = swift_release(v146);
      v106 = v134;
      v107 = static DispatchTime.now()(v105);
      v108 = v135;
      static SFPlatform.watchOS.getter(v107);
      LOBYTE(v98) = static SFPlatform.isPlatform(_:)(v108);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v108, v86);
      v109 = 1.5;
      if ((v98 & 1) != 0)
        v109 = 2.5;
      v110 = v136;
      + infix(_:_:)(v106, v109);
      v111 = *(void (**)(char *, uint64_t))(v137 + 8);
      v111(v106, v84);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v110, v104);
      v111(v110, v84);
      v112 = *(_QWORD *)&v99[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem];
      *(_QWORD *)&v99[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem] = v104;
      swift_retain(v104);
      swift_release(v112);
      sub_100267C10(v93);
      v113 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v83, 1, 1, v113);
      v114 = qword_1007B3D98;
      v115 = v99;
      if (v114 != -1)
        swift_once(&qword_1007B3D98, sub_1002ACAEC);
      v116 = static AirDropActor.shared;
      v117 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
      v118 = (_QWORD *)swift_allocObject(&unk_10071EBB8, 40, 7);
      v118[2] = v116;
      v118[3] = v117;
      v118[4] = v115;
      swift_retain(v116);
      v119 = sub_100252D90(v83, (uint64_t)&unk_1007B65B0, (uint64_t)v118, (uint64_t)&type metadata for () + 8);
      swift_release(v104);
      swift_release(v119);
      v125((char *)v93, v123);
      (*((void (**)(char *, NSObject *))isa + 1))(v127, v143);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_100221DF8(v57, (uint64_t)qword_1007B6140);
    v143 = Logger.logObject.getter(v58);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v143, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v143, v59, "SDAirDropNearFieldService: Boop To Action is disabled on beginNearbySharingInteraction", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

  }
}

uint64_t sub_10025AA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t);
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47[3];
  char v48[24];

  v1 = v0;
  v2 = sub_100008384(&qword_1007B7280);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v41 - v6;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  v15 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID, v48, 0, 0);
  sub_100221F28(v15, (uint64_t)v7, &qword_1007B7280);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_10000D0F0((uint64_t)v7, &qword_1007B7280);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v45 = v5;
  v17 = type metadata accessor for Logger(0);
  sub_100221DF8(v17, (uint64_t)qword_1007B6140);
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v47[0] = v44;
    v43 = v21;
    *(_DWORD *)v21 = 136315138;
    v42 = v21 + 4;
    v22 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
    v25 = v24;
    v46 = sub_100228BD8(v23, v24, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v42);
    swift_bridgeObjectRelease(v25);
    v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v12, v8);
    v27 = v43;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "SDAirDropNearFieldService finish existing AirDrop connection for transaction:%s", v43, 0xCu);
    v28 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v12, v8);
  }

  v29 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem;
  v30 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem);
  if (v30)
  {
    v31 = swift_retain(*(_QWORD *)(v1
                                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem));
    dispatch thunk of DispatchWorkItem.cancel()(v31);
    swift_release(v30);
    v32 = *(_QWORD *)(v1 + v29);
  }
  else
  {
    v32 = 0;
  }
  *(_QWORD *)(v1 + v29) = 0;
  swift_release(v32);
  v33 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate, v34);
  if (Strong)
  {
    v37 = Strong;
    sub_10039873C((uint64_t)v14);
    swift_unknownObjectRelease(v37);
  }
  v38 = swift_unknownObjectWeakLoadStrong(v33, v36);
  if (v38)
  {
    v39 = v38;
    sub_1002DC904((uint64_t)v14);
    swift_unknownObjectRelease(v39);
  }
  v26(v14, v8);
  v40 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v45, 1, 1, v8);
  swift_beginAccess(v15, v47, 33, 0);
  sub_10023A084(v40, v15, &qword_1007B7280);
  return swift_endAccess(v47);
}

void sub_10025AE54()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  __SecKey *v50;
  __SecIdentity *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  Class isa;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  id v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  os_log_t v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  void **aBlock;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  void *v115;
  void *v116;
  uint64_t v117;
  char v118[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v104 = *(_QWORD *)(v2 - 8);
  v105 = v2;
  __chkstk_darwin(v2);
  v103 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384(&qword_1007B63F8);
  __chkstk_darwin(v4);
  v99 = (void **)((char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v110 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v108 = *(_QWORD *)(v110 - 8);
  v6 = *(_QWORD *)(v108 + 64);
  v7 = __chkstk_darwin(v110);
  v97 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v101 = (uint64_t)&v92 - v9;
  v10 = __chkstk_darwin(v8);
  v100 = (uint64_t)&v92 - v11;
  __chkstk_darwin(v10);
  v109 = (uint64_t)&v92 - v12;
  v13 = sub_100008384((uint64_t *)&unk_1007B6400);
  __chkstk_darwin(v13);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchTime(0);
  v95 = *(_QWORD **)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v92 - v20;
  v107 = type metadata accessor for DispatchWorkItemFlags(0);
  v102 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v106 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v23);
  v25 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v26 = type metadata accessor for Logger(0);
  v98 = (os_log_t)sub_100221DF8(v26, (uint64_t)qword_1007B6140);
  v27 = Logger.logObject.getter(v98);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "SDAirDropNearFieldService: stop services.", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  swift_beginAccess(&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID], v118, 0, 0);
  sub_100221F28(v30, (uint64_t)v25, &qword_1007B7280);
  v31 = type metadata accessor for UUID(0);
  v32 = *(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 48);
  v96 = v31;
  LODWORD(v30) = v32(v25, 1);
  sub_10000D0F0((uint64_t)v25, &qword_1007B7280);
  if ((_DWORD)v30 != 1)
  {
    v33 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem;
    if (!*(_QWORD *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem])
    {
      if ((sub_1002532CC() & 1) != 0)
      {
        v34 = swift_allocObject(&unk_10071E938, 24, 7);
        *(_QWORD *)(v34 + 16) = v1;
        v116 = sub_10026A174;
        v117 = v34;
        aBlock = _NSConcreteStackBlock;
        v113 = 1107296256;
        v114 = sub_10025BBB4;
        v115 = &unk_10071E950;
        v94 = _Block_copy(&aBlock);
        v111 = _swiftEmptyArrayStorage;
        v93 = (_QWORD *)sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v1;
        v35 = sub_100008384((uint64_t *)&unk_1007B6410);
        v36 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
        v37 = v106;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v35, v36, v107, v93);
        v38 = type metadata accessor for DispatchWorkItem(0);
        swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
        v39 = DispatchWorkItem.init(flags:block:)(v37, v94);
        swift_release(v117);
        v40 = *(_QWORD *)&v1[v33];
        *(_QWORD *)&v1[v33] = v39;
        swift_retain(v39);
        v41 = swift_release(v40);
        static DispatchTime.now()(v41);
        + infix(_:_:)(v19, 45.0);
        v42 = (void (*)(char *, uint64_t))v95[1];
        v42(v19, v16);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v21, v39);
        swift_release(v39);
        v42(v21, v16);
      }
      else
      {
        sub_10025AA50();
      }
    }
  }
  v43 = type metadata accessor for SDNearFieldTap(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v15, 1, 1, v43);
  v44 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap];
  swift_beginAccess(&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap], &aBlock, 33, 0);
  sub_10023A084((uint64_t)v15, v44, (uint64_t *)&unk_1007B6400);
  swift_endAccess(&aBlock);
  v45 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController];
  v46 = v110;
  if (v45)
  {
    v47 = v45;
    v48 = objc_msgSend(v47, "currentTransaction");
    if (v48)
    {
      v94 = v47;
      v95 = v48;
      v49 = v109;
      UUID.init()(v48);
      v50 = sub_10016AB8C((void *)kSecAttrKeyTypeECSECPrimeRandom, 256);
      *(_QWORD *)(v49 + *(int *)(v46 + 20)) = v50;
      v51 = sub_10016AD80(v50);
      v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v55 = (uint64_t *)(v49 + *(int *)(v46 + 24));
      *v55 = v52;
      v55[1] = v54;
      v56 = (uint64_t)v99;
      sub_100244384(v49, (uint64_t)v99, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      v57 = v108;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v56, 0, 1, v46);
      v58 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload];
      swift_beginAccess(&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload], &aBlock, 33, 0);
      sub_10023A084(v56, v58, &qword_1007B63F8);
      swift_endAccess(&aBlock);
      v59 = v100;
      sub_100244384(v49, v100, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      v60 = v101;
      v61 = sub_100244384(v49, v101, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = swift_slowAlloc(22, -1);
        v93 = (_QWORD *)swift_slowAlloc(8, -1);
        v99 = (void **)swift_slowAlloc(32, -1);
        aBlock = v99;
        *(_DWORD *)v64 = 138412546;
        v98 = v62;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v111 = isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &aBlock, v64 + 4);
        v66 = v93;
        *v93 = isa;
        sub_1002443C8(v59, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        *(_WORD *)(v64 + 12) = 2080;
        v67 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v68 = dispatch thunk of CustomStringConvertible.description.getter(v96, v67);
        v70 = v69;
        v111 = (_QWORD *)sub_100228BD8(v68, v69, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &aBlock, v64 + 14);
        swift_bridgeObjectRelease(v70);
        sub_1002443C8(v60, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        v71 = v98;
        _os_log_impl((void *)&_mh_execute_header, v98, v63, "SDAirDropNearFieldService: Updating public key: %@ listener ID: %s", (uint8_t *)v64, 0x16u);
        v72 = sub_100008384(&qword_1007B4C30);
        swift_arrayDestroy(v66, 1, v72);
        swift_slowDealloc(v66, -1, -1);
        v73 = (uint64_t)v99;
        swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        v74 = v64;
        v57 = v108;
        swift_slowDealloc(v74, -1, -1);

      }
      else
      {
        sub_1002443C8(v59, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        sub_1002443C8(v60, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);

      }
      v75 = v97;
      v76 = v109;
      sub_100244384(v109, v97, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      v77 = *(unsigned __int8 *)(v57 + 80);
      v78 = (v77 + 32) & ~v77;
      v79 = swift_allocObject(&unk_10071E8E8, v78 + v6, v77 | 7);
      v80 = v94;
      v81 = v95;
      *(_QWORD *)(v79 + 16) = v94;
      *(_QWORD *)(v79 + 24) = v81;
      sub_100221DB4(v75, v79 + v78, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      v116 = sub_10026A108;
      v117 = v79;
      aBlock = _NSConcreteStackBlock;
      v113 = 1107296256;
      v114 = sub_10025BBB4;
      v115 = &unk_10071E900;
      v82 = _Block_copy(&aBlock);
      v83 = v80;
      v84 = swift_unknownObjectRetain(v81);
      v85 = v103;
      static DispatchQoS.unspecified.getter(v84);
      v111 = _swiftEmptyArrayStorage;
      v86 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v87 = sub_100008384((uint64_t *)&unk_1007B6410);
      v88 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
      v89 = v106;
      v90 = v87;
      v91 = v107;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v90, v88, v107, v86);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v85, v89, v82);
      _Block_release(v82);
      swift_unknownObjectRelease(v81);

      (*(void (**)(char *, uint64_t))(v102 + 8))(v89, v91);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v85, v105);
      sub_1002443C8(v76, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      swift_release(v117);
    }
    else
    {

    }
  }
}

uint64_t sub_10025B928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = swift_allocObject(&unk_10071E988, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, a1);
  v7 = swift_allocObject(&unk_10071E9B0, 32, 7);
  *(_QWORD *)(v7 + 16) = &unk_1007B6428;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = sub_100008384(&qword_1007B6440);
  v9 = static Task<>.noThrow(priority:operation:)(v4, &unk_1007B6438, v7, v8);
  swift_release(v7);
  swift_release(v9);
  return sub_10000D0F0((uint64_t)v4, &qword_1007B68A0);
}

uint64_t sub_10025BA3C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025BAA4, static AirDropActor.shared, 0);
}

uint64_t sub_10025BAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *Strong;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    sub_10025AA50();

  }
  return (*(uint64_t (**)(BOOL))(v0 + 8))(Strong == 0);
}

uint64_t sub_10025BB08(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10025BB60;
  return v5();
}

uint64_t sub_10025BB60(char a1)
{
  uint64_t *v1;
  _BYTE *v3;
  uint64_t v5;

  v3 = *(_BYTE **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  *v3 = a1 & 1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10025BBB4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_10025BBE0(void *a1, uint64_t a2)
{
  Class v4;
  Class isa;

  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "invalidateTransaction:updatedPkData:bonjourListenerUUID:", a2, isa, v4);

}

uint64_t sub_10025BC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[21] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v7);
  v3[23] = swift_task_alloc(v7);
  v3[24] = swift_task_alloc(v7);
  v8 = sub_100008384(&qword_1007B7280);
  v3[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v3[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[27] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v3[28] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v12);
  v3[30] = swift_task_alloc(v12);
  v3[31] = swift_task_alloc(v12);
  v3[32] = swift_task_alloc(v12);
  v3[33] = swift_task_alloc(v12);
  v3[34] = swift_task_alloc(v12);
  v3[35] = swift_task_alloc(v12);
  v13 = sub_100008384(&qword_1007B63F8);
  v3[36] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v3[37] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[38] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v3[39] = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[40] = swift_task_alloc(v17);
  v3[41] = swift_task_alloc(v17);
  v3[42] = swift_task_alloc(v17);
  v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v3[43] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[44] = v19;
  v3[45] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B6400) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[46] = swift_task_alloc(v20);
  v3[47] = swift_task_alloc(v20);
  v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v3[48] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[49] = v22;
  v3[50] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B6220) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[51] = swift_task_alloc(v23);
  v3[52] = swift_task_alloc(v23);
  v24 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v3[53] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v3[54] = v25;
  v3[55] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SDNearFieldTap(0);
  v3[56] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v3[57] = v27;
  v28 = *(_QWORD *)(v27 + 64);
  v3[58] = v28;
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[59] = swift_task_alloc(v29);
  v3[60] = swift_task_alloc(v29);
  v3[61] = swift_task_alloc(v29);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v30 = static AirDropActor.shared;
  v3[62] = static AirDropActor.shared;
  return swift_task_switch(sub_10025BF44, v30, 0);
}

uint64_t sub_10025BF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  id v81;
  NSString v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t Strong;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 504) = sub_100221DF8(v3, (uint64_t)qword_1007B6140);
  v4 = sub_100244384(v1, v2, type metadata accessor for SDNearFieldTap);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 488);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v114 = swift_slowAlloc(32, -1);
    v10 = v114;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_1003F17F0();
    v13 = v12;
    *(_QWORD *)(v0 + 120) = sub_100228BD8(v11, v12, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v9 + 4);
    swift_bridgeObjectRelease(v13);
    sub_1002443C8(v8, type metadata accessor for SDNearFieldTap);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: handle tap:%s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1002443C8(*(_QWORD *)(v0 + 488), type metadata accessor for SDNearFieldTap);
  }

  v14 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 144)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess(v17, v0 + 16, 0, 0);
  sub_100221F28(v17, v16, (uint64_t *)&unk_1007B6220);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v18(v16, 1, v14) == 1)
  {
    v19 = *(_QWORD *)(v0 + 408);
    v20 = *(_QWORD *)(v0 + 144);
    KeyPath = swift_getKeyPath(&unk_1005CF938);
    v22 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v20, KeyPath, v22);
    swift_release(v22);
    swift_release(KeyPath);
    sub_10000D0F0(v19, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 424);
    v24 = *(_QWORD *)(v0 + 432);
    v25 = *(_QWORD *)(v0 + 416);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 32))(v25, *(_QWORD *)(v0 + 408), v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v25, 0, 1, v23);
  }
  v26 = *(_QWORD *)(v0 + 416);
  v27 = *(_QWORD *)(v0 + 424);
  if (v18(v26, 1, v27) == 1)
  {
    v28 = sub_10000D0F0(v26, (uint64_t *)&unk_1007B6220);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "SDAirDropNearFieldService: handling tap while we don't have a current nearbySharingInteraction.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    goto LABEL_25;
  }
  v33 = *(_QWORD *)(v0 + 392);
  v32 = *(_QWORD *)(v0 + 400);
  v34 = *(_QWORD *)(v0 + 384);
  v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 432) + 32))(*(_QWORD *)(v0 + 440), v26, v27);
  v36 = SFAirDrop.NearbySharingInteraction.state.getter(v35);
  v37 = SFAirDrop.NearbySharingInteraction.State.isConnected.getter(v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  if ((v37 & 1) != 0)
  {
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40))
      goto LABEL_23;
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    v42 = "SDAirDropNearFieldService: nearbySharingInteraction is already connected.";
    goto LABEL_22;
  }
  v43 = *(_QWORD *)(v0 + 448);
  v44 = *(_QWORD *)(v0 + 456);
  v45 = *(_QWORD *)(v0 + 376);
  v46 = *(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
  swift_beginAccess(v46, v0 + 40, 0, 0);
  sub_100221F28(v46, v45, (uint64_t *)&unk_1007B6400);
  LODWORD(v43) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43);
  v47 = sub_10000D0F0(v45, (uint64_t *)&unk_1007B6400);
  if ((_DWORD)v43 != 1)
  {
    v39 = Logger.logObject.getter(v47);
    v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40))
      goto LABEL_23;
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    v42 = "SDAirDropNearFieldService: still handling previous tap.";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc(v41, -1, -1);
LABEL_23:
    v59 = *(_QWORD *)(v0 + 432);
    v58 = *(_QWORD *)(v0 + 440);
    v60 = *(_QWORD *)(v0 + 424);

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
LABEL_25:
    v61 = *(_QWORD *)(v0 + 480);
    v62 = *(_QWORD *)(v0 + 472);
    v63 = *(_QWORD *)(v0 + 440);
    v64 = *(_QWORD *)(v0 + 408);
    v65 = *(_QWORD *)(v0 + 416);
    v66 = *(_QWORD *)(v0 + 400);
    v68 = *(_QWORD *)(v0 + 368);
    v67 = *(_QWORD *)(v0 + 376);
    v69 = *(_QWORD *)(v0 + 360);
    v97 = *(_QWORD *)(v0 + 336);
    v98 = *(_QWORD *)(v0 + 328);
    v99 = *(_QWORD *)(v0 + 320);
    v100 = *(_QWORD *)(v0 + 288);
    v101 = *(_QWORD *)(v0 + 280);
    v102 = *(_QWORD *)(v0 + 272);
    v103 = *(_QWORD *)(v0 + 264);
    v104 = *(_QWORD *)(v0 + 256);
    v105 = *(_QWORD *)(v0 + 248);
    v106 = *(_QWORD *)(v0 + 240);
    v107 = *(_QWORD *)(v0 + 232);
    v108 = *(_QWORD *)(v0 + 200);
    v109 = *(_QWORD *)(v0 + 192);
    v110 = *(_QWORD *)(v0 + 184);
    v112 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v48 = *(_QWORD *)(v0 + 448);
  v49 = *(_QWORD *)(v0 + 128);
  if ((*(_BYTE *)(v49 + *(int *)(v48 + 72)) & 1) != 0)
  {
    v71 = Logger.logObject.getter(v49);
    v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "SDAirDropNearFieldService: tap application label not supported.", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }
    v74 = *(_QWORD *)(v0 + 144);

    v75 = *(void **)(v74 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v75)
    {
      v113 = *(_QWORD *)(v0 + 440);
      v76 = *(_QWORD *)(v0 + 424);
      v77 = *(_QWORD *)(v0 + 432);
      v78 = *(_QWORD *)(v0 + 352);
      v79 = *(_BYTE **)(v0 + 360);
      v80 = *(_QWORD *)(v0 + 344);
      v81 = v75;
      v82 = String._bridgeToObjectiveC()();
      v83 = objc_msgSend(v81, "supportsApplicationLabel:", v82);

      *v79 = v83 ^ 1;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v78 + 104))(v79, enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:), v80);
      sub_10025D378((uint64_t)v79);

      (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v79, v80);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v113, v76);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));
    }
    goto LABEL_25;
  }
  v50 = *(_QWORD *)(v0 + 456);
  v51 = *(_QWORD *)(v0 + 368);
  v52 = *(_QWORD *)(v0 + 304);
  v111 = *(_QWORD *)(v0 + 296);
  v53 = *(_QWORD *)(v0 + 288);
  v54 = *(_QWORD *)(v0 + 144);
  sub_100244384(v49, v51, type metadata accessor for SDNearFieldTap);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v48);
  swift_beginAccess(v46, v0 + 64, 33, 0);
  sub_10023A084(v51, v46, (uint64_t *)&unk_1007B6400);
  swift_endAccess(v0 + 64);
  v55 = v54 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
  swift_beginAccess(v54 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload, v0 + 88, 0, 0);
  sub_100221F28(v55, v53, &qword_1007B63F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v111) == 1)
  {
    v56 = *(_QWORD *)(v0 + 288);
    v57 = &qword_1007B63F8;
LABEL_34:
    v90 = sub_10000D0F0(v56, v57);
    v91 = Logger.logObject.getter(v90);
    v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "SDAirDropNearFieldService: Failed to get endpoint UUID from tap", v93, 2u);
      swift_slowDealloc(v93, -1, -1);
    }
    v95 = *(_QWORD *)(v0 + 432);
    v94 = *(_QWORD *)(v0 + 440);
    v96 = *(_QWORD *)(v0 + 424);

    sub_10025E018("SDAirDropNearFieldService: received unexpected Payload");
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    goto LABEL_25;
  }
  v84 = *(_QWORD *)(v0 + 144);
  sub_100221DB4(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 336), type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  Strong = swift_unknownObjectWeakLoadStrong(v84 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate, v85);
  *(_QWORD *)(v0 + 512) = Strong;
  if (!Strong)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 200), 1, 1, *(_QWORD *)(v0 + 208));
    v89 = *(_QWORD *)(v0 + 200);
    sub_1002443C8(*(_QWORD *)(v0 + 336), type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    v57 = &qword_1007B7280;
    v56 = v89;
    goto LABEL_34;
  }
  v87 = *(_QWORD *)(*(_QWORD *)(v0 + 336) + *(int *)(*(_QWORD *)(v0 + 296) + 20));
  *(_QWORD *)(v0 + 520) = v87;
  v88 = static AirDropActor.shared;
  *(_QWORD *)(v0 + 528) = static AirDropActor.shared;
  swift_unknownObjectRetain(v87);
  return swift_task_switch(sub_10025C8F8, v88, 0);
}

uint64_t sub_10025C8F8()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1007BD974);
  v0[67] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10025C960;
  return sub_10039803C(v0[25], v0[17], v0[65], v0[16]);
}

uint64_t sub_10025C960()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 536));
  return swift_task_switch(sub_10025C9B8, v1, 0);
}

uint64_t sub_10025C9B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[65];
  v2 = v0[62];
  swift_unknownObjectRelease(v0[64]);
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10025CA04, v2, 0);
}

uint64_t sub_10025CA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v3, 0, 1, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    v12 = *(_QWORD *)(v0 + 448);
    v13 = *(_QWORD *)(v0 + 128);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 32))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
    __asm { BR              X12 }
  }
  v4 = *(_QWORD *)(v0 + 200);
  sub_1002443C8(*(_QWORD *)(v0 + 336), type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  v5 = sub_10000D0F0(v4, &qword_1007B7280);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropNearFieldService: Failed to get endpoint UUID from tap", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 424);

  sub_10025E018("SDAirDropNearFieldService: received unexpected Payload");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v14 = *(_QWORD *)(v0 + 480);
  v15 = *(_QWORD *)(v0 + 472);
  v16 = *(_QWORD *)(v0 + 440);
  v17 = *(_QWORD *)(v0 + 408);
  v18 = *(_QWORD *)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 400);
  v21 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 360);
  v24 = *(_QWORD *)(v0 + 336);
  v25 = *(_QWORD *)(v0 + 328);
  v26 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 288);
  v28 = *(_QWORD *)(v0 + 280);
  v29 = *(_QWORD *)(v0 + 272);
  v30 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 248);
  v33 = *(_QWORD *)(v0 + 240);
  v34 = *(_QWORD *)(v0 + 232);
  v35 = *(_QWORD *)(v0 + 200);
  v36 = *(_QWORD *)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 184);
  v38 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025D378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint8_t *v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD v38[4];

  v2 = v1;
  v37 = a1;
  v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v7);
  v36 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v35 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100221DF8(v12, (uint64_t)qword_1007B6140);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v34 = v10;
    v17 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropNearFieldService: near field interruption", v16, 2u);
    v10 = v34;
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = sub_100253568(v38);
  v20 = v19;
  v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    v22 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v35, v37, v3);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v22, enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:), v9);
    SFAirDrop.NearbySharingInteraction.state.setter(v22);
  }
  ((void (*)(_QWORD *, _QWORD))v18)(v38, 0);
  v23 = type metadata accessor for TaskPriority(0);
  v24 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v36, 1, 1, v23);
  v25 = swift_allocObject(&unk_10071E988, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v3);
  v26 = qword_1007B3D98;
  swift_retain(v25);
  if (v26 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v27 = static AirDropActor.shared;
  v28 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v29 = *(unsigned __int8 *)(v4 + 80);
  v30 = (v29 + 40) & ~v29;
  v31 = (char *)swift_allocObject(&unk_10071EAF0, v30 + v5, v29 | 7);
  *((_QWORD *)v31 + 2) = v27;
  *((_QWORD *)v31 + 3) = v28;
  *((_QWORD *)v31 + 4) = v25;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v31[v30], v6, v3);
  swift_retain(v27);
  swift_release(v25);
  v32 = sub_100253050(v24, (uint64_t)&unk_1007B6540, (uint64_t)v31, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);
  return swift_release(v32);
}

void sub_10025D6E8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t Strong;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  void *v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[3];
  uint64_t v102;
  uint64_t v103;
  char v104[24];
  uint64_t v105;
  uint64_t v106;

  v93 = a6;
  v89 = a5;
  v90 = a4;
  v99 = a3;
  v8 = sub_100008384((uint64_t *)&unk_1007B6220);
  v9 = __chkstk_darwin(v8);
  v87 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v88 = (char *)&v85 - v12;
  __chkstk_darwin(v11);
  v97 = (char *)&v85 - v13;
  v92 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v95 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v86 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v15);
  v98 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for SDNearFieldTap(0);
  v18 = __chkstk_darwin(v17);
  v91 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v96 = (uint64_t)&v85 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v85 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v85 - v25;
  v27 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v17[10];
  v100 = a1;
  v32 = (_QWORD *)(a1 + v31);
  v33 = v32[1];
  if (*v32 == 0xD00000000000001BLL && v33 == 0x8000000100612EE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*v32, v33, 0xD00000000000001BLL, 0x8000000100612EE0, 0) & 1) != 0)
  {
    v34 = (uint64_t)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager];
    swift_beginAccess(&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager], v104, 0, 0);
    sub_100244418(v34, (uint64_t)v101);
    v35 = v17;
    v36 = v102;
    v37 = v103;
    sub_10023A834(v101, v102);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 80);
    v39 = v37;
    v17 = v35;
    v38(v100, v36, v39);
    sub_10022E75C(v101);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:), v27);
  v40 = sub_100220D78(&qword_1007B6548, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
  v41 = dispatch thunk of static Equatable.== infix(_:_:)(v99, v30, v27, v40);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  v42 = v100;
  sub_100244384(v100, (uint64_t)v26, type metadata accessor for SDNearFieldTap);
  if ((v41 & 1) != 0)
  {
    v43 = v26[v17[11]];
    sub_1002443C8((uint64_t)v26, type metadata accessor for SDNearFieldTap);
    if (v43 != 1)
      goto LABEL_16;
  }
  else
  {
    sub_1002443C8((uint64_t)v26, type metadata accessor for SDNearFieldTap);
  }
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v44 = type metadata accessor for Logger(0);
  sub_100221DF8(v44, (uint64_t)qword_1007B6140);
  v45 = sub_100244384(v42, (uint64_t)v24, type metadata accessor for SDNearFieldTap);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v101[0] = v49;
    *(_DWORD *)v48 = 136315138;
    v94 = a2;
    v50 = type metadata accessor for UUID(0);
    v51 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
    v54 = v53;
    v105 = sub_100228BD8(v52, v53, v101);
    a2 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v48 + 4);
    swift_bridgeObjectRelease(v54);
    sub_1002443C8((uint64_t)v24, type metadata accessor for SDNearFieldTap);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "SDAirDropNearFieldService: begin listening for incoming AirDrop connection for transaction:%s", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    v55 = v48;
    v42 = v100;
    swift_slowDealloc(v55, -1, -1);
  }
  else
  {
    sub_1002443C8((uint64_t)v24, type metadata accessor for SDNearFieldTap);
  }

  v56 = v42 + v17[15];
  v57 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (uint64_t)v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v98, v56, v57);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
  v60 = (uint64_t)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  swift_beginAccess(&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID], v101, 33, 0);
  sub_10023A084(v59, v60, &qword_1007B7280);
  swift_endAccess(v101);
  Strong = swift_unknownObjectWeakLoadStrong(&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate], v61);
  if (Strong)
  {
    v63 = Strong;
    v64 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
    sub_1002DC3F8(v56, v90, *(_QWORD *)(v90 + *(int *)(v64 + 20)), *(_QWORD *)(v42 + v17[13]), *(_QWORD *)(v42 + v17[13] + 8));
    swift_unknownObjectRelease(v63);
  }
LABEL_16:
  v65 = objc_msgSend((id)objc_opt_self(SDStatusMonitor), "sharedMonitor");
  v66 = (uint64_t)v97;
  if (v65)
  {
    v67 = v65;
    v68 = objc_msgSend(v65, "deviceKeyBagLocked");

    v69 = v96;
    sub_100244384(v42, v96, type metadata accessor for SDNearFieldTap);
    if (v68)
    {
      v70 = *(unsigned __int8 *)(v69 + v17[12]);
      v71 = v91;
      sub_100221DB4(v69, v91, type metadata accessor for SDNearFieldTap);
      if (v70 == 1)
      {
        sub_1002443C8(v71, type metadata accessor for SDNearFieldTap);
LABEL_26:
        v82 = type metadata accessor for UUID(0);
        v83 = *(_QWORD *)(v82 - 8);
        v84 = (uint64_t)v98;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v98, v89, v82);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v84, 0, 1, v82);
        sub_100253BF8(v84);
        sub_10000D0F0(v84, &qword_1007B7280);
        return;
      }
      v81 = *(_QWORD *)(v71 + v17[6] + 8);
      sub_1002443C8(v71, type metadata accessor for SDNearFieldTap);
      if (v81)
        goto LABEL_26;
    }
    else
    {
      sub_1002443C8(v69, type metadata accessor for SDNearFieldTap);
    }
    v72 = (uint64_t)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
    swift_beginAccess(&a2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction], v101, 0, 0);
    sub_100221F28(v72, v66, (uint64_t *)&unk_1007B6220);
    v73 = v92;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v66, 1, v92) == 1)
    {
      sub_10000D0F0(v66, (uint64_t *)&unk_1007B6220);
    }
    else
    {
      v74 = v95;
      v75 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v86, v66, v73);
      v76 = (uint64_t)v88;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v88, v75, v73);
      v94 = a2;
      v77 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56);
      v77(v76, 0, 1, v73);
      KeyPath = swift_getKeyPath(&unk_1005CF938);
      v79 = swift_getKeyPath(&unk_1005CF960);
      v80 = v87;
      sub_100221F28(v76, v87, (uint64_t *)&unk_1007B6220);
      static Published.subscript.setter(v80, v94, KeyPath, v79);
      sub_10000D0F0(v76, (uint64_t *)&unk_1007B6220);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v73);
      v77(v76, 1, 1, v73);
      swift_beginAccess(v72, &v105, 33, 0);
      sub_10023A084(v76, v72, (uint64_t *)&unk_1007B6220);
      swift_endAccess(&v105);
    }
    sub_10025498C(v42, v93, v99);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10025DFE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1)
    return sub_10025E018("SDAirDropNearFieldService: Failed to enforce single band mode");
  else
    return a3();
}

uint64_t sub_10025E018(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v3 = v1;
  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384((uint64_t *)&unk_1007B6220);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100221DF8(v14, (uint64_t)qword_1007B6140);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, a1, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v20 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v3, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
  {
    sub_10000D0F0((uint64_t)v10, (uint64_t *)&unk_1007B6220);
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    v22 = sub_10000D0F0((uint64_t)v10, (uint64_t *)&unk_1007B6220);
    SFAirDrop.NearbySharingInteraction.id.getter(v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v23 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 0, 1, v23);
  }
  sub_100253BF8((uint64_t)v13);
  return sub_10000D0F0((uint64_t)v13, &qword_1007B7280);
}

uint64_t sub_10025E2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[5] = a4;
  v5[6] = a5;
  v6 = type metadata accessor for ContinuousClock(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[14] = v11;
  v5[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008384((uint64_t *)&unk_1007B6220);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008384(&qword_1007B7280);
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v14 = static AirDropActor.shared;
  v5[18] = static AirDropActor.shared;
  return swift_task_switch(sub_10025E3E4, v14, 0);
}

uint64_t sub_10025E3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 152) = Strong;
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    KeyPath = swift_getKeyPath(&unk_1005CF938);
    v9 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v4, KeyPath, v9);
    swift_release(v9);
    swift_release(KeyPath);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
    v12 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 136);
    if (v10)
    {
      sub_10000D0F0(*(_QWORD *)(v0 + 128), (uint64_t *)&unk_1007B6220);
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 120);
      v16 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v14, *(_QWORD *)(v0 + 128), v16);
      v17 = sub_10000D0F0(v12, (uint64_t *)&unk_1007B6220);
      SFAirDrop.NearbySharingInteraction.id.getter(v17);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      v18 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 0, 1, v18);
    }
    v20 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v0 + 48), v21);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21);
    if ((_DWORD)v22 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
    {
      ContinuousClock.init()(v22);
      v31 = (char *)&dword_1007B6518 + dword_1007B6518;
      v23 = (_QWORD *)swift_task_alloc(unk_1007B651C);
      *(_QWORD *)(v0 + 160) = v23;
      *v23 = v0;
      v23[1] = sub_10025E674;
      return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))v31)(5000000000000000000, 0, 0, 0, 1);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    v25 = *(void **)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 136);
    sub_100253BF8(v26);

    sub_10000D0F0(v26, &qword_1007B7280);
  }
  v27 = *(_QWORD *)(v0 + 128);
  v28 = *(_QWORD *)(v0 + 120);
  v29 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E674()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 160));
  v3 = v2[18];
  v5 = v2[8];
  v4 = v2[9];
  v6 = v2[7];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = sub_10026F7E0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = sub_10025E718;
  }
  return swift_task_switch(v7, v3, 0);
}

uint64_t sub_10025E718()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  sub_100253BF8(v2);

  sub_10000D0F0(v2, &qword_1007B7280);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = sub_100008384(&qword_1007B6570);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v8 = static AirDropActor.shared;
  v6[6] = static AirDropActor.shared;
  return swift_task_switch(sub_10025E834, v8, 0);
}

uint64_t sub_10025E834()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:)
                                  + 1));
  v0[7] = v1;
  *v1 = v0;
  v1[1] = sub_10025E8B8;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:)(v0[5], _swiftEmptyArrayStorage, v0[3], 0, 0xF000000000000000, 0, 0, 1);
}

uint64_t sub_10025E8B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 56));
  v3 = *(_QWORD *)(v2 + 48);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_10025E990;
  }
  else
  {
    v4 = sub_10025E924;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10025E924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = sub_100008384(&qword_1007B6578);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_10000D0F0(v1, &qword_1007B6570);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = sub_100008384(&qword_1007B6578);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_10000D0F0(v1, &qword_1007B6570);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E9FC(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v9 = sub_100008384(&qword_1007B68A0);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v13 = type metadata accessor for TaskPriority(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
    v15 = a2;
    v14(v12, 1, 1, v13);
    v16 = qword_1007B3D98;
    v17 = a1;
    v18 = a3;
    v19 = a5;
    v20 = v15;
    if (v16 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v21 = static AirDropActor.shared;
    v22 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v23 = (_QWORD *)swift_allocObject(&unk_10071ED98, 40, 7);
    v23[2] = v21;
    v23[3] = v22;
    v23[4] = v20;
    swift_retain(v21);
    v24 = sub_100253050((uint64_t)v12, (uint64_t)&unk_1007B6670, (uint64_t)v23, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);

    return swift_release(v24);
  }
  return result;
}

uint64_t sub_10025EB94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];

  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v17, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2, v6);
  if (result)
  {
    v8 = (void *)result;
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
    v10 = qword_1007B3D98;
    v11 = v8;
    if (v10 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v12 = static AirDropActor.shared;
    v13 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v14 = (_QWORD *)swift_allocObject(&unk_10071ED70, 40, 7);
    v14[2] = v12;
    v14[3] = v13;
    v14[4] = v11;
    swift_retain(v12);
    v15 = sub_100253050((uint64_t)v5, (uint64_t)&unk_1007B6660, (uint64_t)v14, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);

    return swift_release(v15);
  }
  return result;
}

uint64_t sub_10025ED10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B7280);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025ED9C, static AirDropActor.shared, 0);
}

id sub_10025ED9C()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v1 = (void *)objc_opt_self(SDStatusMonitor);
  result = objc_msgSend(v1, "sharedMonitor");
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "deviceKeyBagLocked");

    if (v4)
    {
      if (qword_1007B3D18 != -1)
        swift_once(&qword_1007B3D18, sub_1002531A0);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_100221DF8(v5, (uint64_t)qword_1007B6140);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: device locked", v9, 2u);
        swift_slowDealloc(v9, -1, -1);
      }
      v10 = *(_QWORD *)(v0 + 24);

      v11 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
      sub_100253BF8(v10);
      sub_10000D0F0(v10, &qword_1007B7280);
      goto LABEL_10;
    }
    result = objc_msgSend(v1, "sharedMonitor");
    if (result)
    {
      v12 = result;
      objc_msgSend(result, "deviceUIUnlocked");

LABEL_10:
      swift_task_dealloc(*(_QWORD *)(v0 + 24));
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10025EF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B7280);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025EFDC, static AirDropActor.shared, 0);
}

uint64_t sub_10025EFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  if (objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus), "screenOn"))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100221DF8(v1, (uint64_t)qword_1007B6140);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService: switch Screen ON", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 16);

    sub_1002564B8(*(_QWORD *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100221DF8(v11, (uint64_t)qword_1007B6140);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SDAirDropNearFieldService: switch Screen OFF", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 24);

    v17 = type metadata accessor for UUID(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v18(v16, 1, 1, v17);
    sub_100253BF8(v16);
    v19 = sub_10000D0F0(v16, &qword_1007B7280);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SDAirDropNearFieldService: stop", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 16);
    v23 = *(_QWORD *)(v0 + 24);

    v18(v23, 1, 1, v17);
    sub_100253BF8(v23);
    sub_10000D0F0(v23, &qword_1007B7280);
    sub_1002597AC(1);
    v25 = *(void **)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(_QWORD *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025F340(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;

  v9 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Notification(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 1, 1, v16);
  v17 = qword_1007B3D98;
  v18 = a1;
  if (v17 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v19 = static AirDropActor.shared;
  v20 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v21 = (_QWORD *)swift_allocObject(a4, 40, 7);
  v21[2] = v19;
  v21[3] = v20;
  v21[4] = v18;
  swift_retain(v19);
  v22 = sub_100253050((uint64_t)v11, a5, (uint64_t)v21, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);
  swift_release(v22);

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10025F4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025F55C, static AirDropActor.shared, 0);
}

uint64_t sub_10025F55C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  char *v6;
  uint8_t *v7;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = *(void **)(v0 + 16);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007B6140);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(char **)(v0 + 16);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67109120;
    *(_DWORD *)(v0 + 24) = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus], "isAirDropAllowed");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 28, v7 + 4);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService airdrop allowed changed:%{BOOL}d - restarting", v7, 8u);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {

  }
  sub_100259B0C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025F6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B7280);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025F74C, static AirDropActor.shared, 0);
}

uint64_t sub_10025F74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  if (objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus), "wirelessEnabled"))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100221DF8(v1, (uint64_t)qword_1007B6140);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService wifi enabled, attempting to start", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 16);

    sub_1002564B8(*(_QWORD *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100221DF8(v11, (uint64_t)qword_1007B6140);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SDAirDropNearFieldService wifi disabled, stopping", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService: stop", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v21 = *(_QWORD *)(v0 + 16);
    v20 = *(_QWORD *)(v0 + 24);

    v22 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
    sub_100253BF8(v20);
    sub_10000D0F0(v20, &qword_1007B7280);
    sub_1002597AC(1);
    v23 = *(void **)(v21 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(_QWORD *)(v21 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025FA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B7280);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025FAF8, static AirDropActor.shared, 0);
}

uint64_t sub_10025FAF8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus), "systemUIFlags");
  v3 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if ((v2 & 0x80000) != 0)
  {
    if (v4)
    {
      if (qword_1007B3D18 != -1)
        swift_once(&qword_1007B3D18, sub_1002531A0);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_100221DF8(v15, (uint64_t)qword_1007B6140);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService Buddy visible, stopping", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "SDAirDropNearFieldService: stop", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }
      v24 = *(_QWORD *)(v0 + 24);

      v25 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
      sub_100253BF8(v24);
      sub_10000D0F0(v24, &qword_1007B7280);
      sub_1002597AC(1);
      v26 = *(void **)(v1 + v3);
      *(_QWORD *)(v1 + v3) = 0;

    }
  }
  else if (!v4)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100221DF8(v5, (uint64_t)qword_1007B6140);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService Buddy not visible, attempting to start", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SDAirDropNearFieldService: start", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 16);

    sub_1002564B8(*(_QWORD *)(v14 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025FE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10025FE8C, static AirDropActor.shared, 0);
}

uint64_t sub_10025FE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B6140);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService Buddy finished, attempting to start", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 16);

  sub_1002564B8(*(_QWORD *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100260018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B7280);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1002600A4, static AirDropActor.shared, 0);
}

uint64_t sub_1002600A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v1 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v2 = (void *)static NSUserDefaults.airdrop.getter(v1);
  v3 = SFAirDropUserDefaults.nearFieldSharingEnabled.getter();

  if ((v3 & 1) != 0)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100221DF8(v4, (uint64_t)qword_1007B6140);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropNearFieldService Nearby sharing enabled, attempting to start", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SDAirDropNearFieldService: start", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 16);

    sub_1002564B8(*(_QWORD *)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100221DF8(v14, (uint64_t)qword_1007B6140);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SDAirDropNearFieldService Nearby sharing disabled, stopping", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SDAirDropNearFieldService: stop", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 16);
    v23 = *(_QWORD *)(v0 + 24);

    v25 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v23, 1, 1, v25);
    sub_100253BF8(v23);
    sub_10000D0F0(v23, &qword_1007B7280);
    sub_1002597AC(1);
    v26 = *(void **)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(_QWORD *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002603C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B7280);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100260450, static AirDropActor.shared, 0);
}

uint64_t sub_100260450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B6140);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService Proximity Apple ID Sign In progress, stopping", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: stop", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v11 = *(_QWORD *)(v0 + 16);
  v10 = *(_QWORD *)(v0 + 24);

  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  sub_100253BF8(v10);
  sub_10000D0F0(v10, &qword_1007B7280);
  sub_1002597AC(1);
  v13 = *(void **)(v11 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100260610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100260678, static AirDropActor.shared, 0);
}

uint64_t sub_100260678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B6140);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService Proximity Apple ID Sign In Finished, starting", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 16);

  sub_1002564B8(*(_QWORD *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x8000000100612D70, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100260804(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v7 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = qword_1007B3D98;
  v12 = a1;
  if (v11 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v13 = static AirDropActor.shared;
  v14 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v15 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v15[2] = v13;
  v15[3] = v14;
  v15[4] = v12;
  swift_retain(v13);
  v16 = sub_100253050((uint64_t)v9, a4, (uint64_t)v15, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);
  swift_release(v16);

}

void sub_10026097C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[21];

  v12[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v12[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v12[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v12[3] = &unk_1005CF820;
  v12[4] = &unk_1005CF838;
  v12[5] = &unk_1005CF850;
  v12[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v12[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v12[8] = &unk_1005CF868;
  v12[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100260B1C(319, &qword_1007B6208, type metadata accessor for SDNearFieldTap);
  if (v3 <= 0x3F)
  {
    v12[10] = *(_QWORD *)(v2 - 8) + 64;
    sub_100260B1C(319, &qword_1007B6210, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    if (v5 <= 0x3F)
    {
      v12[11] = *(_QWORD *)(v4 - 8) + 64;
      v12[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
      sub_100260B7C(319);
      if (v7 <= 0x3F)
      {
        v12[13] = *(_QWORD *)(v6 - 8) + 64;
        sub_100260B1C(319, &qword_1007C32B0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction);
        if (v9 <= 0x3F)
        {
          v12[14] = *(_QWORD *)(v8 - 8) + 64;
          v12[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v12[16] = (char *)&value witness table for Builtin.NativeObject + 64;
          v12[17] = &unk_1005CF850;
          v12[18] = &unk_1005CF850;
          v12[19] = &unk_1005CF850;
          sub_100260B1C(319, (unint64_t *)&qword_1007B6230, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          if (v11 <= 0x3F)
          {
            v12[20] = *(_QWORD *)(v10 - 8) + 64;
            swift_updateClassMetadata2(a1, 256, 21, v12, a1 + 80);
          }
        }
      }
    }
  }
}

void sub_100260B1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B6390, (uint64_t)&nominal type descriptor for SDAirDropNearFieldService.LocalExchangePayload);
}

void sub_100260B7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1007B6218)
  {
    v2 = sub_10021FF9C((uint64_t *)&unk_1007B6220);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1007B6218);
  }
}

uint64_t sub_100260BD4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(*v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_100260C10()
{
  return sub_1002599C4(0, 1, 0, 0);
}

void sub_100260C40()
{
  sub_100258EF0();
}

void sub_100260C60(uint64_t a1)
{
  sub_100260C80(a1);
}

void sub_100260C80(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t KeyPath;
  uint64_t v41;
  NSObject *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint8_t *v51;
  void *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;

  v2 = v1;
  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384((uint64_t *)&unk_1007B6220);
  v8 = __chkstk_darwin(v7);
  v10 = ((char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (char *)&v51 - v11;
  v13 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v51 - v19;
  if (IsAppleInternalBuild(v18, v21))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v56 = v10;
    v22 = type metadata accessor for Logger(0);
    sub_100221DF8(v22, (uint64_t)qword_1007B6140);
    v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v55 = a1;
    v24 = v23(v20, a1, v13);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v54 = (void (*)(char *, char *, uint64_t))v23;
      v28 = (uint8_t *)v27;
      v29 = swift_slowAlloc(32, -1);
      v53 = v6;
      v30 = v29;
      v58 = v29;
      v52 = v2;
      *(_DWORD *)v28 = 136315138;
      v51 = v28 + 4;
      v54(v17, v20, v13);
      v31 = String.init<A>(describing:)(v17, v13);
      v33 = v32;
      v57 = sub_100228BD8(v31, v32, &v58);
      v2 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v51);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "SDAirDropNearFieldService: updating nearby sharing interaction with simulated state: %s", v28, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      v34 = v30;
      v6 = v53;
      swift_slowDealloc(v34, -1, -1);
      v35 = v28;
      v23 = (uint64_t (*)(char *, uint64_t, uint64_t))v54;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    }

    v23(v12, v55, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    KeyPath = swift_getKeyPath(&unk_1005CF938);
    v41 = swift_getKeyPath(&unk_1005CF960);
    v42 = v56;
    sub_100221F28((uint64_t)v12, (uint64_t)v56, (uint64_t *)&unk_1007B6220);
    v43 = v2;
    static Published.subscript.setter(v42, v43, KeyPath, v41);
    sub_10000D0F0((uint64_t)v12, (uint64_t *)&unk_1007B6220);
    v44 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v6, 1, 1, v44);
    v45 = qword_1007B3D98;
    v46 = v43;
    if (v45 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v47 = static AirDropActor.shared;
    v48 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v49 = (_QWORD *)swift_allocObject(&unk_10071ECF8, 40, 7);
    v49[2] = v47;
    v49[3] = v48;
    v49[4] = v46;
    swift_retain(v47);
    v50 = sub_100252D90((uint64_t)v6, (uint64_t)&unk_1007B6628, (uint64_t)v49, (uint64_t)&type metadata for () + 8);
    swift_release(v50);
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100221DF8(v36, (uint64_t)qword_1007B6140);
    v56 = Logger.logObject.getter(v37);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v38, "Ignoring simulated nearby sharing interaction since we are not on an internal build", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

  }
}

uint64_t sub_10026116C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007B6614);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D12C;
  return sub_1002611C0(a1);
}

uint64_t sub_1002611C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008384(&qword_1007B63F8);
  v2[14] = v5;
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v2[16] = v6;
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10026129C, static AirDropActor.shared, 0);
}

uint64_t sub_10026129C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  if (IsAppleInternalBuild(a1, a2))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100221DF8(v3, (uint64_t)qword_1007B6140);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService.at-a-distance: BEGIN", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v9 = v2[14];
    v8 = v2[15];
    v10 = v2[10];

    v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
    swift_beginAccess(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload, v2 + 2, 0, 0);
    sub_100221F28(v11, v8, &qword_1007B63F8);
    Optional.tryUnwrap(_:file:line:)(0xD00000000000001CLL, 0x8000000100612F70, 0xD000000000000060, 0x8000000100612E50, 990, v9);
    v21 = v2[10];
    sub_10000D0F0(v2[15], &qword_1007B63F8);
    v22 = *(void **)(v21 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v22 && (v23 = objc_msgSend(v22, "currentApplicationLabel")) != 0)
    {
      v24 = v23;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v27 = v26;

    }
    else
    {
      v25 = 0;
      v27 = 0;
    }
    v2[7] = v25;
    v2[8] = v27;
    v28 = sub_100008384(&qword_1007B54E0);
    Optional.tryUnwrap(_:file:line:)(0xD000000000000019, 0x8000000100612F90, 0xD000000000000060, 0x8000000100612E50, 991, v28);
    v29 = v2[17];
    v34 = v2[16];
    v43 = v2[15];
    v35 = v2[12];
    v36 = v2[13];
    v37 = v2[11];
    swift_bridgeObjectRelease(v27);
    v38 = v2[5];
    v39 = v2[6];
    v40 = (uint64_t *)(v29 + *(int *)(v34 + 24));
    v41 = *v40;
    v42 = v40[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v29, v37);
    sub_10022E4A8(v41, v42);
    SFAirDropClient.BoopAtADistance.ServerInfo.init(applicationLabel:publicKeyData:bonjourUUID:)(v38, v39, v41, v42, v36);
    sub_1002443C8(v29, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    swift_task_dealloc(v29);
    swift_task_dealloc(v43);
    swift_task_dealloc(v36);
    v32 = (uint64_t (*)(void))v2[1];
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100221DF8(v12, (uint64_t)qword_1007B6140);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropNearFieldService.at-a-distance: begin FAILED -- Not internal build", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = type metadata accessor for SFError(0);
    v18 = sub_100220D78(&qword_1007B64E8, (uint64_t (*)(uint64_t))&type metadata accessor for SFError, (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v17, v18, 0, 0);
    *v19 = 0xD000000000000037;
    v19[1] = 0x8000000100612E10;
    v19[2] = 0xD000000000000060;
    v19[3] = 0x8000000100612E50;
    v19[4] = 986;
    v20 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, enum case for SFError.notAvailable(_:), v17);
    swift_willThrow(v20);
    v30 = v2[15];
    v31 = v2[13];
    swift_task_dealloc(v2[17]);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v32 = (uint64_t (*)(void))v2[1];
  }
  return v32();
}

uint64_t sub_100261710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1007B64F4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return sub_100261770(a1, a2);
}

uint64_t sub_100261770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0);
  v3[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[13] = v7;
  v3[14] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SDNearFieldTap(0);
  v3[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContinuousClock(0);
  v3[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[17] = v10;
  v3[18] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0, v11);
  v3[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[20] = v13;
  v3[21] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008384(&qword_1007B68A0);
  v3[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v15 = static AirDropActor.shared;
  v3[23] = static AirDropActor.shared;
  return swift_task_switch(sub_1002618C4, v15, 0);
}

uint64_t sub_1002618C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  objc_class *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  if (IsAppleInternalBuild(a1, a2))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100221DF8(v3, (uint64_t)qword_1007B6140);
    *(_QWORD *)(v2 + 192) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService.at-a-distance: UPDATE", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v2 + 64);

    v9 = *(void **)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(_QWORD *)(v2 + 40) = v9;
    v10 = v9;
    v11 = sub_100008384(&qword_1007B64F8);
    Optional.tryUnwrap(_:file:line:)(0xD000000000000013, 0x8000000100612EC0, 0xD000000000000060, 0x8000000100612E50, 1003, v11);

    *(_QWORD *)(v2 + 200) = *(_QWORD *)(v2 + 32);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SDAirDropNearFieldService.at-a-distance: didDetectDeviceNearbyWithInitiatorRole", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    v16 = *(_QWORD *)(v2 + 168);
    v17 = *(_QWORD *)(v2 + 176);
    v18 = *(_QWORD *)(v2 + 152);
    v49 = *(_QWORD *)(v2 + 160);
    v19 = *(void **)(v2 + 64);
    v20 = *(_QWORD *)(v2 + 48);

    v21 = SFAirDropClient.BoopAtADistance.Transaction.isInitiator.getter();
    v22 = type metadata accessor for TaskPriority(0);
    *(_QWORD *)(v2 + 208) = v22;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
    *(_QWORD *)(v2 + 216) = v23;
    v23(v17, 1, 1, v22);
    v24 = static AirDropActor.shared;
    v25 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    *(_QWORD *)(v2 + 224) = v25;
    v26 = swift_allocObject(&unk_10071EA78, 48, 7);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = v25;
    *(_BYTE *)(v26 + 32) = v21 & 1;
    *(_QWORD *)(v26 + 40) = v19;
    v27 = v19;
    swift_retain(v24);
    v28 = sub_100253050(v17, (uint64_t)&unk_1007B6510, v26, (uint64_t)&unk_10071ECD0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1007B9C70);
    swift_release(v28);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
    *(_QWORD *)(v2 + 232) = v29;
    v29(v16, v20, v18);
    v30 = (objc_class *)type metadata accessor for SDBoopAtADistanceTransaction(0);
    v31 = (char *)objc_allocWithZone(v30);
    v29((uint64_t)&v31[OBJC_IVAR____TtC16DaemoniOSLibrary28SDBoopAtADistanceTransaction_inner], v16, v18);
    *(_QWORD *)(v2 + 16) = v31;
    *(_QWORD *)(v2 + 24) = v30;
    *(_QWORD *)(v2 + 240) = objc_msgSendSuper2((objc_super *)(v2 + 16), "init");
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v16, v18);
    ContinuousClock.init()(v32);
    v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
    v33 = (_QWORD *)swift_task_alloc(unk_1007B651C);
    *(_QWORD *)(v2 + 248) = v33;
    *v33 = v2;
    v33[1] = sub_100261E18;
    return v50(1000000000000000000, 0, 0, 0, 1);
  }
  else
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_100221DF8(v35, (uint64_t)qword_1007B6140);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "SDAirDropNearFieldService.at-a-distance: FAILED -- Not internal build", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    v40 = type metadata accessor for SFError(0);
    v41 = sub_100220D78(&qword_1007B64E8, (uint64_t (*)(uint64_t))&type metadata accessor for SFError, (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v40, v41, 0, 0);
    *v42 = 0xD000000000000037;
    v42[1] = 0x8000000100612E10;
    v42[2] = 0xD000000000000060;
    v42[3] = 0x8000000100612E50;
    v42[4] = 999;
    v43 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, enum case for SFError.notAvailable(_:), v40);
    swift_willThrow(v43);
    v44 = *(_QWORD *)(v2 + 168);
    v45 = *(_QWORD *)(v2 + 144);
    v47 = *(_QWORD *)(v2 + 112);
    v46 = *(_QWORD *)(v2 + 120);
    v48 = *(_QWORD *)(v2 + 88);
    swift_task_dealloc(*(_QWORD *)(v2 + 176));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_100261E18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v3);
  v4 = v2[23];
  (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
  if (v0)
    v5 = sub_100262088;
  else
    v5 = sub_100261E98;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100261E98(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService.at-a-distance: nearFieldController.didBegin", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = (void *)v1[30];
  v7 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v1[27];
  v6 = v1[28];
  v8 = v1[26];
  v9 = v1[22];
  v10 = v1[14];
  v27 = (void (*)(uint64_t, uint64_t, uint64_t))v1[29];
  v28 = v1[15];
  v24 = v1[13];
  v25 = v1[19];
  v26 = v1[12];
  v11 = (void *)v1[8];
  v22 = v1[21];
  v23 = v1[7];
  v12 = v1[6];

  v7(v9, 1, 1, v8);
  v13 = static AirDropActor.shared;
  v14 = (_QWORD *)swift_allocObject(&unk_10071EAA0, 48, 7);
  v14[2] = v13;
  v14[3] = v6;
  v14[4] = v5;
  v14[5] = v11;
  v15 = v5;
  v16 = v11;
  v17 = v15;
  swift_retain(v13);
  v18 = sub_100252D90(v9, (uint64_t)&unk_1007B6528, (uint64_t)v14, (uint64_t)&type metadata for () + 8);
  swift_release(v18);

  v27(v22, v12, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v10, v23, v26);
  v19 = sub_1003F0AD4(v22, v10, v28);
  SFAirDropClient.BoopAtADistance.Transaction.identifier.getter(v19);
  v20 = (_QWORD *)swift_task_alloc(dword_1007B6534);
  v1[33] = v20;
  *v20 = v1;
  v20[1] = sub_100262110;
  return sub_10025BC5C(v1[15], v1[11]);
}

uint64_t sub_100262088()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 200);

  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100262110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_100262188, v1, 0);
}

uint64_t sub_100262188()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);

  sub_1002443C8(v5, type metadata accessor for SDNearFieldTap);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10026222C()
{
  sub_10026224C();
}

void sub_10026224C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v2 = v0;
  v3 = sub_100008384(&qword_1007B7280);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (IsAppleInternalBuild(v4, v7))
  {
    v8 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v9)
    {
      v55 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController), "currentPreferredPollingType");
      v10 = *(void **)(v0 + v8);
      if (v10)
      {
        v11 = objc_msgSend(v10, "currentApplicationLabel");
        if (v11)
        {
          v12 = v11;
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
          v14 = v13;

LABEL_13:
          if (qword_1007B3D18 != -1)
            swift_once(&qword_1007B3D18, sub_1002531A0);
          v24 = type metadata accessor for Logger(0);
          v25 = sub_100221DF8(v24, (uint64_t)qword_1007B6140);
          v26 = swift_bridgeObjectRetain_n(v14, 2);
          v56 = v25;
          v27 = Logger.logObject.getter(v26);
          v28 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v27, v28))
          {
            v51 = v8;
            v52 = v6;
            v53 = v1;
            v50 = v9;
            v29 = swift_slowAlloc(22, -1);
            v49 = swift_slowAlloc(64, -1);
            v59 = v49;
            *(_DWORD *)v29 = 136315394;
            v57 = (uint64_t)v55;
            LOBYTE(v58) = v9 == 0;
            v30 = sub_100008384(&qword_1007B64E0);
            v31 = String.init<A>(describing:)(&v57, v30);
            v33 = v32;
            v57 = sub_100228BD8(v31, v32, &v59);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 4);
            swift_bridgeObjectRelease(v33);
            *(_WORD *)(v29 + 12) = 2080;
            v34 = v54;
            v35 = v14;
            if (!v14)
            {
              v34 = 0xD000000000000015;
              v57 = 0;
              v58 = 0xE000000000000000;
              _StringGuts.grow(_:)(17);
              swift_bridgeObjectRelease(v58);
              v35 = 0x8000000100612DF0;
            }
            swift_bridgeObjectRetain(v14);
            v57 = sub_100228BD8(v34, v35, &v59);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 14);
            swift_bridgeObjectRelease_n(v14, 2);
            swift_bridgeObjectRelease(v35);
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "SDAirDropNearFieldService.at-a-distance: Restaring Field Service polling {lastPollingType: %s, lastApplicationLabel: %s}", (uint8_t *)v29, 0x16u);
            v36 = v49;
            swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v36, -1, -1);
            swift_slowDealloc(v29, -1, -1);

            v6 = v52;
            v9 = v50;
            v8 = v51;
          }
          else
          {

            v37 = swift_bridgeObjectRelease_n(v14, 2);
          }
          v38 = Logger.logObject.getter(v37);
          v39 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = v9;
            v41 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "SDAirDropNearFieldService: stop", v41, 2u);
            v42 = v41;
            v9 = v40;
            swift_slowDealloc(v42, -1, -1);
          }

          v43 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v6, 1, 1, v43);
          sub_100253BF8((uint64_t)v6);
          sub_10000D0F0((uint64_t)v6, &qword_1007B7280);
          sub_1002597AC(1);
          v44 = *(void **)(v2 + v8);
          *(_QWORD *)(v2 + v8) = 0;

          sub_1002599C4((uint64_t)v55, v9 == 0, v54, v14);
          v45 = swift_bridgeObjectRelease(v14);
          v46 = Logger.logObject.getter(v45);
          v47 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v46, v47))
          {
            v48 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v48 = 0;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "SDAirDropNearFieldService.at-a-distance: END", v48, 2u);
            swift_slowDealloc(v48, -1, -1);
          }

          return;
        }
      }
    }
    else
    {
      v55 = 0;
    }
    v54 = 0;
    v14 = 0;
    goto LABEL_13;
  }
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100221DF8(v15, (uint64_t)qword_1007B6140);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService.at-a-distance: FAILED -- Not internal build", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = type metadata accessor for SFError(0);
  v21 = sub_100220D78(&qword_1007B64E8, (uint64_t (*)(uint64_t))&type metadata accessor for SFError, (uint64_t)&protocol conformance descriptor for SFError);
  swift_allocError(v20, v21, 0, 0);
  *v22 = 0xD000000000000037;
  v22[1] = 0x8000000100612E10;
  v22[2] = 0xD000000000000060;
  v22[3] = 0x8000000100612E50;
  v22[4] = 1022;
  v23 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for SFError.notAvailable(_:), v20);
  swift_willThrow(v23);
}

void sub_100262818(uint64_t a1)
{
  sub_100253BF8(a1);
}

uint64_t sub_100262838@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[24];

  v19 = a1;
  v2 = sub_100008384(&qword_1007B6498);
  __chkstk_darwin(v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100008384(&qword_1007B64A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100008384(&qword_1007B64A8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(*v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService__nearbySharingInteraction, v20, 33, 0);
  v13 = sub_100008384(&qword_1007B64B0);
  Published.projectedValue.getter(v13);
  swift_endAccess(v20);
  v14 = sub_100008384(&qword_1007B64B8);
  v15 = sub_10026E2FC(&qword_1007B64C0, &qword_1007B64A0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher.map<A>(_:)(sub_1002670F8, 0, v5, v14, v15);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  v16 = sub_10026E2FC(&qword_1007B64C8, &qword_1007B64A8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher<>.values.getter(v9, v16);
  v17 = sub_10026E2FC(&qword_1007B64D0, &qword_1007B6498, (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>);
  SFNoThrowAsyncSequence.init<A>(_:)(v4, v14, v2, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100262A44(uint64_t a1, uint64_t a2)
{
  return sub_100262A68(a1, a2) & 1;
}

uint64_t sub_100262A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];

  v3 = v2;
  v6 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v7 = (void *)static NSUserDefaults.airdrop.getter(v6);
  v8 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v8 & 1) != 0
    && (v9 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap,
        swift_beginAccess(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap, v16, 0, 0), v10 = type metadata accessor for SDNearFieldTap(0), !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))&& (v13 = (_QWORD *)(v9 + *(int *)(v10 + 24)), (v14 = v13[1]) != 0))
  {
    if (*v13 == a1 && v14 == a2)
      v11 = 1;
    else
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a1, a2, 0);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_100262B64(uint64_t a1)
{
  return sub_100262B88(a1) & 1;
}

uint64_t sub_100262B88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  char v15;
  _BYTE v18[24];

  v2 = v1;
  v4 = sub_100008384((uint64_t *)&unk_1007B6400);
  __chkstk_darwin(v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for SDNearFieldTap(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v12 = (void *)static NSUserDefaults.airdrop.getter(v11);
  v13 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v13 & 1) != 0)
  {
    v14 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
    swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap, v18, 0, 0);
    sub_100221F28(v14, (uint64_t)v6, (uint64_t *)&unk_1007B6400);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      sub_100221DB4((uint64_t)v6, (uint64_t)v10, type metadata accessor for SDNearFieldTap);
      v15 = sub_1003F0D40(a1);
      sub_1002443C8((uint64_t)v10, type metadata accessor for SDNearFieldTap);
      return v15 & 1;
    }
    sub_10000D0F0((uint64_t)v6, (uint64_t *)&unk_1007B6400);
  }
  v15 = 0;
  return v15 & 1;
}

uint64_t sub_100262D0C(uint64_t a1, uint64_t a2)
{
  return sub_100255CB8(a1, a2);
}

uint64_t sub_100262D2C(uint64_t a1)
{
  return sub_100256F20(a1);
}

void sub_100262D4C(uint64_t a1, unint64_t a2)
{
  sub_100257A44(a1, a2);
}

uint64_t sub_100262D6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100262D8C(a1, a2, a3);
}

uint64_t sub_100262D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t KeyPath;
  uint64_t v47;
  int v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  NSObject *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, unint64_t, _QWORD *);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  void (*v103)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  NSObject *v112;
  uint64_t v113;
  _QWORD *v115;
  char *v116;
  uint64_t (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t);
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  char *v143;
  char *v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  int v148;
  _BOOL4 v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  void (*v158)(char *, uint64_t);
  char *v159;
  uint64_t (*v160)(char *, _QWORD *);
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(char *, uint64_t);
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  os_log_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  char *v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  int v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  void (*v191)(char *, uint64_t, uint64_t);
  uint64_t v192;
  NSObject *v193;
  os_log_type_t v194;
  uint64_t v195;
  NSObject *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t (*v204)(char *, uint64_t);
  uint64_t v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(char *, uint64_t);
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  void (*v232)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  _QWORD *v237;
  NSObject *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  void (*v244)(char *, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  NSObject *v250;
  uint64_t v251;
  char v252[8];

  v228 = a2;
  v248 = a1;
  v245 = a3;
  v227 = type metadata accessor for SFClientIdentity(0);
  v231 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v226 = (char *)&v217 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v246 = v4;
  v247 = v5;
  v6 = __chkstk_darwin(v4);
  v244 = (void (*)(char *, uint64_t))((char *)&v217 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v233 = (char *)&v217 - v9;
  v10 = __chkstk_darwin(v8);
  v230 = (char *)&v217 - v11;
  v12 = __chkstk_darwin(v10);
  v224 = (char *)&v217 - v13;
  __chkstk_darwin(v12);
  v222 = (char *)&v217 - v14;
  v15 = sub_100008384((uint64_t *)&unk_1007B63E0);
  __chkstk_darwin(v15);
  v221 = (char *)&v217 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = (_QWORD *)type metadata accessor for SFAirDrop.NearbySharingAssertion(0);
  v241 = *(v237 - 1);
  v17 = __chkstk_darwin(v237);
  v229 = (char *)&v217 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v225 = (char *)&v217 - v20;
  v21 = __chkstk_darwin(v19);
  v235 = (char *)&v217 - v22;
  v23 = __chkstk_darwin(v21);
  v236 = (char *)&v217 - v24;
  __chkstk_darwin(v23);
  v223 = (char *)&v217 - v25;
  v26 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v242 = (unint64_t)&v217 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100008384((uint64_t *)&unk_1007B6220);
  v30 = __chkstk_darwin(v29);
  v239 = (uint64_t *)((char *)&v217 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v30);
  v33 = (char *)&v217 - v32;
  v34 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v34);
  v36 = (char *)&v217 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v217 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v39);
  v243 = (char *)&v217 - v43;
  __chkstk_darwin(v42);
  v45 = (char *)&v217 - v44;
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v47 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v249, KeyPath, v47);
  swift_release(KeyPath);
  swift_release(v47);
  v238 = *(NSObject **)(v27 + 48);
  v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v238)(v33, 1, v26);
  v240 = v26;
  v234 = v27;
  if (!v48)
  {
    v219 = v41;
    v220 = v45;
    v51 = v242;
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 16))(v242, v33, v26);
    v52 = sub_10000D0F0((uint64_t)v33, (uint64_t *)&unk_1007B6220);
    SFAirDrop.NearbySharingInteraction.id.getter(v52);
    (*(void (**)(unint64_t, uint64_t))(v27 + 8))(v51, v26);
    v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
    v49(v36, 0, 1, v37);
    v50 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
      goto LABEL_4;
    v76 = (uint64_t)v220;
    v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v220, v36, v37);
    v78 = v243;
    v55 = v248;
    SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v77);
    v79 = static UUID.== infix(_:_:)(v76, v78);
    v80 = *(void (**)(char *, uint64_t))(v38 + 8);
    v80(v78, v37);
    v54 = v246;
    if ((v79 & 1) == 0)
    {
      v80((char *)v76, v50);
      v53 = v247;
      goto LABEL_5;
    }
    v81 = (char *)v249
        + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID;
    swift_beginAccess((char *)v249+ OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID, &v250, 32, 0);
    v239 = (uint64_t *)v81;
    v240 = v50;
    v82 = *(_QWORD *)v81;
    v83 = *(_QWORD *)(*(_QWORD *)v81 + 16);
    v244 = v80;
    v232 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49;
    if (v83)
    {
      v84 = sub_10045C2DC(v76);
      v85 = v237;
      v86 = v231;
      if ((v87 & 1) != 0)
      {
        v88 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v84);
        swift_endAccess(&v250);
        v89 = *(_QWORD *)(v88 + 16);
        v218 = v38;
        if (v89)
        {
          v90 = v88 + ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
          v91 = *(_QWORD *)(v241 + 72);
          v92 = *(uint64_t (**)(char *, unint64_t, _QWORD *))(v241 + 16);
          swift_bridgeObjectRetain_n(v88, 3);
          v93 = v236;
          while (1)
          {
            v94 = v92(v93, v90, v85);
            v95 = SFAirDrop.NearbySharingAssertion.explanation.getter(v94);
            v97 = v96;
            v99 = ((uint64_t (*)(void))SFAirDrop.NearbySharingAssertionRequest.explanation.getter)();
            v100 = v98;
            if (v95 == v99 && v97 == v98)
            {
              v105 = v88;
              swift_bridgeObjectRelease(v88);
              swift_bridgeObjectRelease(v97);
              goto LABEL_46;
            }
            v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v99, v98, 0);
            swift_bridgeObjectRelease(v97);
            swift_bridgeObjectRelease(v100);
            if ((v101 & 1) != 0)
              break;
            v93 = v236;
            v85 = v237;
            (*(void (**)(char *, _QWORD *))(v241 + 8))(v236, v237);
            v90 += v91;
            if (!--v89)
            {
              swift_bridgeObjectRelease(v88);
              v102 = 1;
              v103 = v232;
              v54 = v246;
              v104 = v247;
              v105 = v88;
              v50 = v240;
              v106 = v241;
              v80 = v244;
              goto LABEL_43;
            }
          }
          v105 = v88;
          v97 = v88;
LABEL_46:
          v103 = v232;
          v54 = v246;
          swift_bridgeObjectRelease(v97);
          v106 = v241;
          v186 = v221;
          v85 = v237;
          (*(void (**)(char *, char *, _QWORD *))(v241 + 32))(v221, v236, v237);
          v102 = 0;
          v50 = v240;
          v104 = v247;
          v80 = v244;
        }
        else
        {
          swift_bridgeObjectRetain_n(v88, 2);
          v102 = 1;
          v103 = v232;
          v105 = v88;
          v106 = v241;
          v104 = v247;
LABEL_43:
          v186 = v221;
        }
        (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v106 + 56))(v186, v102, 1, v85);
        swift_bridgeObjectRelease(v105);
        v187 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v106 + 48))(v186, 1, v85);
        v188 = (uint64_t)v186;
        v189 = v224;
        if (v187 != 1)
        {
          v242 = v105;
          (*(void (**)(char *, uint64_t, _QWORD *))(v106 + 32))(v223, v188, v85);
          if (qword_1007B3D18 != -1)
            swift_once(&qword_1007B3D18, sub_1002531A0);
          v190 = type metadata accessor for Logger(0);
          sub_100221DF8(v190, (uint64_t)qword_1007B6140);
          v191 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
          v191(v222, v55, v54);
          v192 = ((uint64_t (*)(char *, uint64_t, uint64_t))v191)(v189, v55, v54);
          v193 = Logger.logObject.getter(v192);
          v194 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v193, v194))
          {
            v195 = swift_slowAlloc(22, -1);
            v196 = swift_slowAlloc(64, -1);
            v249 = v196;
            v250 = v196;
            *(_DWORD *)v195 = 136315394;
            v197 = v243;
            v198 = v222;
            SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v196);
            v199 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v200 = dispatch thunk of CustomStringConvertible.description.getter(v50, v199);
            v202 = v201;
            v244(v197, v50);
            v251 = sub_100228BD8(v200, v202, (uint64_t *)&v250);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v195 + 4);
            v203 = v202;
            v85 = v237;
            swift_bridgeObjectRelease(v203);
            v204 = *(uint64_t (**)(char *, uint64_t))(v247 + 8);
            v205 = v204(v198, v54);
            *(_WORD *)(v195 + 12) = 2080;
            v206 = v224;
            v207 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter(v205);
            v209 = v208;
            v251 = sub_100228BD8(v207, v208, (uint64_t *)&v250);
            v50 = v240;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v195 + 14);
            swift_bridgeObjectRelease(v209);
            v204(v206, v54);
            v210 = v220;
            _os_log_impl((void *)&_mh_execute_header, v193, v194, "SDAirDropNearFieldService: Existing matching assertion for nearby sharing interaction:%s explanation:%s", (uint8_t *)v195, 0x16u);
            v211 = v249;
            swift_arrayDestroy(v249, 2, (char *)&type metadata for Any + 8);
            v103 = v232;
            swift_slowDealloc(v211, -1, -1);
            v212 = v195;
            v80 = v244;
            swift_slowDealloc(v212, -1, -1);

            v214 = v245;
          }
          else
          {
            v215 = *(void (**)(char *, uint64_t))(v104 + 8);
            v215(v222, v54);
            v215(v189, v54);

            v214 = v245;
            v210 = v220;
          }
          v216 = v223;
          SFAirDrop.NearbySharingAssertion.id.getter(v213);
          (*(void (**)(char *, _QWORD *))(v241 + 8))(v216, v85);
          v80(v210, v50);
          v184 = v214;
          v185 = v50;
          goto LABEL_41;
        }
        sub_10000D0F0(v188, (uint64_t *)&unk_1007B63E0);
        v115 = (_QWORD *)v105;
        v86 = v231;
        v38 = v218;
        if (v105)
        {
LABEL_28:
          v116 = v243;
          v117 = *(uint64_t (**)(char *, char *, uint64_t))(v38 + 16);
          v118 = v117(v243, v220, v50);
          v119 = v115;
          v120 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter(v118);
          v122 = v121;
          v123 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
          v124 = v226;
          v123(v226, v228, v227);
          v125 = v235;
          v126 = v120;
          v127 = (unint64_t)v119;
          SFAirDrop.NearbySharingAssertion.init(nearbySharingInteractionID:explanation:client:)(v116, v126, v122, v124);
          v128 = v225;
          v238 = *(NSObject **)(v241 + 16);
          ((void (*)(char *, char *, _QWORD *))v238)(v225, v125, v85);
          if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0)
            v127 = sub_100227C94(0, *(_QWORD *)(v127 + 16) + 1, 1, v127);
          v129 = (uint64_t)v219;
          v131 = *(_QWORD *)(v127 + 16);
          v130 = *(_QWORD *)(v127 + 24);
          v242 = v127;
          v132 = v248;
          if (v131 >= v130 >> 1)
            v242 = sub_100227C94(v130 > 1, v131 + 1, 1, v242);
          v133 = v241;
          v134 = v242;
          *(_QWORD *)(v242 + 16) = v131 + 1;
          (*(void (**)(unint64_t, char *, _QWORD *))(v133 + 32))(v134+ ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80))+ *(_QWORD *)(v133 + 72) * v131, v128, v85);
          v117((char *)v129, v220, v50);
          v135 = v239;
          swift_beginAccess(v239, &v250, 33, 0);
          swift_bridgeObjectRetain(v134);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v135);
          v251 = *v135;
          *v135 = 0x8000000000000000;
          sub_10046BA24(v134, v129, isUniquelyReferenced_nonNull_native);
          v137 = *v135;
          *v135 = v251;
          swift_bridgeObjectRelease(v137);
          v244((char *)v129, v50);
          swift_endAccess(&v250);
          if (qword_1007B3D18 != -1)
            swift_once(&qword_1007B3D18, sub_1002531A0);
          v138 = type metadata accessor for Logger(0);
          sub_100221DF8(v138, (uint64_t)qword_1007B6140);
          v139 = v229;
          v140 = v235;
          ((void (*)(char *, char *, _QWORD *))v238)(v229, v235, v85);
          v141 = v247;
          v142 = *(void (**)(char *, uint64_t, uint64_t))(v247 + 16);
          v143 = v230;
          v142(v230, v132, v54);
          v144 = v233;
          v145 = ((uint64_t (*)(char *, uint64_t, uint64_t))v142)(v233, v132, v54);
          v146 = Logger.logObject.getter(v145);
          v147 = static os_log_type_t.default.getter();
          v148 = v147;
          v149 = os_log_type_enabled(v146, v147);
          v150 = v243;
          if (v149)
          {
            v151 = swift_slowAlloc(32, -1);
            v152 = swift_slowAlloc(96, -1);
            v248 = v152;
            v250 = v152;
            *(_DWORD *)v151 = 136315650;
            LODWORD(v239) = v148;
            SFAirDrop.NearbySharingAssertion.id.getter(v152);
            v153 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v154 = v240;
            v155 = dispatch thunk of CustomStringConvertible.description.getter(v240, v153);
            v157 = v156;
            v238 = v146;
            v158 = v244;
            v244(v150, v154);
            v251 = sub_100228BD8(v155, v157, (uint64_t *)&v250);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v151 + 4);
            swift_bridgeObjectRelease(v157);
            v159 = v139;
            v160 = *(uint64_t (**)(char *, _QWORD *))(v241 + 8);
            v161 = v160(v159, v237);
            *(_WORD *)(v151 + 12) = 2080;
            SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v161);
            v162 = dispatch thunk of CustomStringConvertible.description.getter(v154, v153);
            v164 = v163;
            v158(v150, v154);
            v251 = sub_100228BD8(v162, v164, (uint64_t *)&v250);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v151 + 14);
            swift_bridgeObjectRelease(v164);
            v165 = v246;
            v166 = *(uint64_t (**)(char *, uint64_t))(v247 + 8);
            v167 = v166(v143, v246);
            *(_WORD *)(v151 + 22) = 2080;
            v103 = v232;
            v168 = v233;
            v169 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter(v167);
            v171 = v170;
            v251 = sub_100228BD8(v169, v170, (uint64_t *)&v250);
            v85 = v237;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v151 + 24);
            swift_bridgeObjectRelease(v171);
            v166(v168, v165);
            v140 = v235;
            v172 = v238;
            _os_log_impl((void *)&_mh_execute_header, v238, (os_log_type_t)v239, "SDAirDropNearFieldService: Created new assertion:%s for nearby sharing interaction:%s with explanation:%s", (uint8_t *)v151, 0x20u);
            v173 = v248;
            swift_arrayDestroy(v248, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v173, -1, -1);
            swift_slowDealloc(v151, -1, -1);

            v174 = v245;
            v175 = v249;
          }
          else
          {
            v176 = v139;
            v160 = *(uint64_t (**)(char *, _QWORD *))(v241 + 8);
            v160(v176, v85);
            v177 = *(void (**)(char *, uint64_t))(v141 + 8);
            v177(v143, v54);
            v177(v144, v54);

            v174 = v245;
            v175 = v249;
            v103 = v232;
          }
          v178 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem;
          v179 = *(uint64_t *)((char *)&v175->isa
                            + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem);
          if (v179)
          {
            v180 = swift_retain(*(Class *)((char *)&v175->isa
                                         + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem));
            dispatch thunk of DispatchWorkItem.cancel()(v180);
            swift_release(v179);
            v181 = *(uint64_t *)((char *)&v175->isa + v178);
          }
          else
          {
            v181 = 0;
          }
          v182 = v240;
          *(Class *)((char *)&v175->isa + v178) = 0;
          v183 = swift_release(v181);
          SFAirDrop.NearbySharingAssertion.id.getter(v183);
          v160(v140, v85);
          v244(v220, v182);
          v184 = v174;
          v185 = v182;
LABEL_41:
          v103(v184, 0, 1, v185);
          return swift_bridgeObjectRelease(v242);
        }
      }
      else
      {
        swift_endAccess(&v250);
      }
    }
    else
    {
      swift_endAccess(&v250);
      v85 = v237;
      v86 = v231;
    }
    v115 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  sub_10000D0F0((uint64_t)v33, (uint64_t *)&unk_1007B6220);
  v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
  v49(v36, 1, 1, v37);
  v50 = v37;
LABEL_4:
  v54 = v246;
  v53 = v247;
  v55 = v248;
  sub_10000D0F0((uint64_t)v36, &qword_1007B7280);
LABEL_5:
  v56 = (char *)v244;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v57 = type metadata accessor for Logger(0);
  sub_100221DF8(v57, (uint64_t)qword_1007B6140);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v56, v55, v54);
  v58 = v249;
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, (os_log_type_t)v60))
  {
    LODWORD(v248) = v60;
    v249 = v59;
    v232 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49;
    v61 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v241 = v62;
    v250 = v62;
    *(_DWORD *)v61 = 136315394;
    v63 = v243;
    SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v62);
    v64 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v50, v64);
    v66 = v38;
    v68 = v67;
    v237 = *(_QWORD **)(v66 + 8);
    ((void (*)(char *, uint64_t))v237)(v63, v50);
    v251 = sub_100228BD8(v65, v68, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v61 + 4);
    swift_bridgeObjectRelease(v68);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v54);
    *(_WORD *)(v61 + 12) = 2080;
    v69 = swift_getKeyPath(&unk_1005CF938);
    v70 = swift_getKeyPath(&unk_1005CF960);
    v71 = (uint64_t)v239;
    static Published.subscript.getter(v58, v69, v70);
    swift_release(v69);
    swift_release(v70);
    v72 = v240;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v238)(v71, 1, v240))
    {
      sub_10000D0F0(v71, (uint64_t *)&unk_1007B6220);
      v73 = 0x8000000100612D40;
      v74 = 0xD000000000000027;
    }
    else
    {
      v107 = v234;
      v108 = v242;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v234 + 16))(v242, v71, v72);
      v109 = sub_10000D0F0(v71, (uint64_t *)&unk_1007B6220);
      SFAirDrop.NearbySharingInteraction.id.getter(v109);
      v110 = (*(uint64_t (**)(unint64_t, uint64_t))(v107 + 8))(v108, v72);
      v74 = UUID.uuidString.getter(v110);
      v73 = v111;
      ((void (*)(char *, uint64_t))v237)(v63, v50);
    }
    v75 = v245;
    v251 = sub_100228BD8(v74, v73, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v61 + 14);

    swift_bridgeObjectRelease(v73);
    v112 = v249;
    _os_log_impl((void *)&_mh_execute_header, v249, (os_log_type_t)v248, "SDAirDropNearFieldService: Request to take assertion for nearby sharing interaction:%s failed because it's not matching the current active interaction:%s", (uint8_t *)v61, 0x16u);
    v113 = v241;
    swift_arrayDestroy(v241, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1, -1);
    swift_slowDealloc(v61, -1, -1);

    v49 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v232;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v54);

    v75 = v245;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v75, 1, 1, v50);
}

void sub_100264120(uint64_t a1)
{
  sub_10025829C(a1);
}

uint64_t sub_100264140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5[10] = a4;
  v5[11] = a5;
  v6 = type metadata accessor for UUID(0);
  v5[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[13] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v8);
  v5[15] = swift_task_alloc(v8);
  v9 = sub_100008384((uint64_t *)&unk_1007B6220);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v5[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[18] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[19] = swift_task_alloc(v12);
  v5[20] = swift_task_alloc(v12);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v13 = static AirDropActor.shared;
  v5[21] = static AirDropActor.shared;
  return swift_task_switch(sub_100264240, v13, 0);
}

uint64_t sub_100264240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  __n128 v41;
  void (*v42)(uint64_t, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t type;
  NSObject *log;
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 80) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 176) = Strong;
  if (!Strong)
    goto LABEL_12;
  v4 = (char *)Strong;
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v9 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v4, KeyPath, v9);
  swift_release(v9);
  swift_release(KeyPath);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    v10 = *(_QWORD *)(v0 + 128);

    sub_10000D0F0(v10, (uint64_t *)&unk_1007B6220);
LABEL_12:
    v49 = *(_QWORD *)(v0 + 152);
    v51 = *(_QWORD *)(v0 + 120);
    v50 = *(_QWORD *)(v0 + 128);
    v52 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  SFAirDrop.NearbySharingInteraction.id.getter(v11);
  v12 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID];
  swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID], v0 + 40, 32, 0);
  v13 = *(_QWORD *)v12;
  if (!*(_QWORD *)(v13 + 16) || (v14 = sub_10045C2DC(*(_QWORD *)(v0 + 120)), (v15 & 1) == 0))
  {
    v43 = *(_QWORD *)(v0 + 160);
    v44 = *(_QWORD *)(v0 + 136);
    v45 = *(_QWORD *)(v0 + 144);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = *(_QWORD *)(v0 + 96);
    v48 = *(_QWORD *)(v0 + 104);
    swift_endAccess(v0 + 40);

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  swift_endAccess(v0 + 40);
  v20 = *(void (**)(uint64_t, uint64_t, __n128))(v18 + 8);
  v21 = swift_bridgeObjectRetain((const char *)v19);
  v20(v16, v17, v21);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = swift_bridgeObjectRelease((const char *)v19);
  if (!v22)
  {
    (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136), v23);

    goto LABEL_12;
  }
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v25 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 160);
  v26 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 144);
  v28 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 184) = sub_100221DF8(v28, (uint64_t)qword_1007B6140);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, v24, v26);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v33 = *(_QWORD *)(v0 + 152);
  if (v32)
  {
    v56 = *(_QWORD *)(v0 + 136);
    v34 = *(_QWORD *)(v0 + 112);
    log = v30;
    v35 = *(_QWORD *)(v0 + 96);
    type = v31;
    v55 = *(_QWORD *)(v0 + 144);
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v60 = v57;
    *(_DWORD *)v36 = 136315138;
    SFAirDrop.NearbySharingInteraction.id.getter(v57);
    v37 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v35, v37);
    v40 = v39;
    ((void (*)(uint64_t, uint64_t))v20)(v34, v35);
    *(_QWORD *)(v0 + 72) = sub_100228BD8(v38, (unint64_t)v40, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v36 + 4);
    v41 = swift_bridgeObjectRelease(v40);
    v42 = *(void (**)(uint64_t, uint64_t, __n128))(v55 + 8);
    v42(v33, v56, v41);
    _os_log_impl((void *)&_mh_execute_header, log, type, "SDAirDropNearFieldService relaunching AirDropUI after it crashed while nearby interaction %s was ongoing", v36, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    v42 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 144) + 8);
    ((void (*)(_QWORD, _QWORD))v42)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));

  }
  *(_QWORD *)(v0 + 192) = v42;
  v54 = (_QWORD *)swift_task_alloc(dword_1007BCD64);
  *(_QWORD *)(v0 + 200) = v54;
  *v54 = v0;
  v54[1] = sub_10026469C;
  return sub_1003739D4();
}

uint64_t sub_10026469C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100264778;
  else
    v4 = sub_100264700;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), 0);
}

uint64_t sub_100264700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100264778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 208);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 208);
    v6 = *(void **)(v0 + 176);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v5);
    v9 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 64) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 4);
    *v8 = v9;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService: Failed to launch AirDropUI process: %@", v7, 0xCu);
    v10 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v5 = *(_QWORD *)(v0 + 208);
    v11 = *(void **)(v0 + 176);

    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  swift_errorRelease(v5);
  (*(void (**)(_QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  v12 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1002649B8, static AirDropActor.shared, 0);
}

uint64_t sub_1002649B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007B6140);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v9 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *v19 = v9;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService: nearFieldController did invalidate with error:%@", v8, 0xCu);
    v10 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v19, 1, v10);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 24));
    swift_errorRelease(v7);
  }

  v11 = *(void **)(v0 + 32);
  v12 = objc_msgSend(v11, "currentPreferredPollingType");
  v13 = objc_msgSend(v11, "currentApplicationLabel");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v17 = 0x8000000100612D70;
    v15 = 0xD000000000000013;
  }
  sub_1002597AC(0);
  sub_1002564B8((uint64_t)v12, v15, v17, 0);
  swift_bridgeObjectRelease(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100264F08(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v5 + 48) = a5;
  *(_BYTE *)(v5 + 112) = a4;
  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  *(_QWORD *)(v5 + 56) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 72) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B6220) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 80) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 88) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 104) = swift_task_alloc(v8);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100264FE8, static AirDropActor.shared, 0);
}

uint64_t sub_100264FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B6140);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 112);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v45 = v7;
    if (v5)
      v8 = 0x6F74616974696E69;
    else
      v8 = 0x7265766965636572;
    if (v5)
      v9 = 0xEE00656C6F722072;
    else
      v9 = 0xED0000656C6F7220;
    *(_QWORD *)(v0 + 40) = sub_100228BD8(v8, v9, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService: did detect device nearby with %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 48)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess(v13, v0 + 16, 0, 0);
  sub_100221F28(v13, v10, (uint64_t *)&unk_1007B6220);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v15 = v14(v10, 1, v11);
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  if (v15 == 1)
  {
    v18 = *(_QWORD *)(v0 + 48);
    KeyPath = swift_getKeyPath(&unk_1005CF938);
    v20 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v18, KeyPath, v20);
    swift_release(v20);
    swift_release(KeyPath);
    sub_10000D0F0(v17, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v22 + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96), v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
  }
  v23 = *(_QWORD *)(v0 + 104);
  v24 = v14(v23, 1, *(_QWORD *)(v0 + 56));
  sub_10000D0F0(v23, (uint64_t *)&unk_1007B6220);
  if (v24 == 1)
    sub_100259D90();
  v25 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 56);
  sub_100221F28(v13, v25, (uint64_t *)&unk_1007B6220);
  v27 = v14(v25, 1, v26);
  v29 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 88);
  if (v27 == 1)
  {
    v30 = *(_QWORD *)(v0 + 48);
    v31 = swift_getKeyPath(&unk_1005CF938);
    v32 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v30, v31, v32);
    swift_release(v32);
    swift_release(v31);
    sub_10000D0F0(v29, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 56);
    v34 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v34 + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80), v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v28, 0, 1, v33);
  }
  v35 = *(_QWORD *)(v0 + 88);
  v36 = *(_QWORD *)(v0 + 56);
  if (v14(v35, 1, v36) == 1)
  {
    sub_10000D0F0(v35, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 64);
    v37 = *(_QWORD *)(v0 + 72);
    v39 = *(_BYTE *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v35, v36);
    SFAirDrop.NearbySharingInteraction.isInitiatorRoleExpected.setter((v39 & 1) == 0);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
  }
  v40 = *(_QWORD *)(v0 + 96);
  v42 = *(_QWORD *)(v0 + 80);
  v41 = *(_QWORD *)(v0 + 88);
  v43 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002655AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[18] = a4;
  v5[19] = a5;
  v6 = sub_100008384(&qword_1007B65A0);
  v5[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v5[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[22] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[23] = swift_task_alloc(v9);
  v5[24] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B6220) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[25] = swift_task_alloc(v10);
  v5[26] = swift_task_alloc(v10);
  v5[27] = swift_task_alloc(v10);
  v5[28] = swift_task_alloc(v10);
  v5[29] = swift_task_alloc(v10);
  v5[30] = swift_task_alloc(v10);
  v5[31] = swift_task_alloc(v10);
  v5[32] = swift_task_alloc(v10);
  v5[33] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v5[34] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[35] = v12;
  v5[36] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v13 = static AirDropActor.shared;
  v5[37] = static AirDropActor.shared;
  return swift_task_switch(sub_100265724, v13, 0);
}

uint64_t sub_100265724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t);
  uint64_t v96;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007B6140);
  v3 = swift_unknownObjectRetain_n(v1, 4);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v93 = (id *)(v0 + 144);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 288);
    v89 = *(_QWORD *)(v0 + 280);
    v7 = *(_QWORD *)(v0 + 272);
    v8 = *(void **)(v0 + 144);
    v9 = swift_slowAlloc(22, -1);
    v90 = swift_slowAlloc(64, -1);
    v96 = v90;
    *(_DWORD *)v9 = 136315394;
    v10 = objc_msgSend(v8, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v11 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v6, v7);
    *(_QWORD *)(v0 + 128) = sub_100228BD8(v12, v14, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 4);
    swift_bridgeObjectRelease(v14);
    swift_unknownObjectRelease_n(v8, 2);
    *(_WORD *)(v9 + 12) = 2080;
    v15 = objc_msgSend(v8, "isInitiator");
    v16 = v15 == 0;
    if (v15)
      v17 = 0x6F74616974696E69;
    else
      v17 = 0x7265766965636572;
    if (v16)
      v18 = 0xE800000000000000;
    else
      v18 = 0xE900000000000072;
    *(_QWORD *)(v0 + 136) = sub_100228BD8(v17, v18, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v93, v9 + 14);
    swift_bridgeObjectRelease(v18);
    swift_unknownObjectRelease_n(v8, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService: did begin transaction:%s as %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(*(_QWORD *)(v0 + 144), 4);
  }

  v19 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 152)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess(v20, v0 + 56, 0, 0);
  sub_100221F28(v20, v19, (uint64_t *)&unk_1007B6220);
  v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v26 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 264);
  if (v24 == 1)
  {
    v27 = *(_QWORD *)(v0 + 152);
    KeyPath = swift_getKeyPath(&unk_1005CF938);
    v29 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v27, KeyPath, v29);
    swift_release(v29);
    swift_release(KeyPath);
    sub_10000D0F0(v26, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v22 + 32))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 256), v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
  }
  v30 = *(_QWORD *)(v0 + 264);
  v31 = v23(v30, 1, v21);
  sub_10000D0F0(v30, (uint64_t *)&unk_1007B6220);
  if (v31 == 1)
    sub_100259D90();
  v32 = *(_QWORD *)(v0 + 152);
  v33 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem;
  v34 = *(_QWORD *)(v32
                  + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem);
  if (v34)
  {
    v35 = swift_retain(*(_QWORD *)(v32
                                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem));
    dispatch thunk of DispatchWorkItem.cancel()(v35);
    swift_release(v34);
    v36 = *(_QWORD *)(v32 + v33);
  }
  else
  {
    v36 = 0;
  }
  v37 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v32 + v33) = 0;
  swift_release(v36);
  sub_100221F28(v20, v37, (uint64_t *)&unk_1007B6220);
  v38 = v23(v37, 1, v21);
  v40 = *(_QWORD *)(v0 + 240);
  v39 = *(_QWORD *)(v0 + 248);
  if (v38 == 1)
  {
    v41 = *(_QWORD *)(v0 + 152);
    v42 = swift_getKeyPath(&unk_1005CF938);
    v43 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v41, v42, v43);
    swift_release(v43);
    swift_release(v42);
    sub_10000D0F0(v40, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v22 + 32))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 240), v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v39, 0, 1, v21);
  }
  v44 = *(_QWORD *)(v0 + 248);
  v45 = v23(v44, 1, v21);
  if ((_DWORD)v45 == 1)
  {
    sub_10000D0F0(v44, (uint64_t *)&unk_1007B6220);
LABEL_30:
    v62 = *(_QWORD *)(v0 + 256);
    v63 = *(_QWORD *)(v0 + 264);
    v65 = *(_QWORD *)(v0 + 240);
    v64 = *(_QWORD *)(v0 + 248);
    v67 = *(_QWORD *)(v0 + 224);
    v66 = *(_QWORD *)(v0 + 232);
    v69 = *(_QWORD *)(v0 + 208);
    v68 = *(_QWORD *)(v0 + 216);
    v70 = *(_QWORD *)(v0 + 200);
    v91 = *(_QWORD *)(v0 + 192);
    v92 = *(_QWORD *)(v0 + 184);
    v94 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v63);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v46 = *(_QWORD *)(v0 + 192);
  v47 = *(_QWORD *)(v0 + 168);
  v48 = *(_QWORD *)(v0 + 176);
  SFAirDrop.NearbySharingInteraction.state.getter(v45);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v44, v21);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 88))(v46, v47);
  v50 = enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  if (v49 != v50)
    goto LABEL_30;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "SDAirDropNearFieldService: connecting…", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }
  v55 = *(_QWORD *)(v0 + 224);

  sub_100221F28(v20, v55, (uint64_t *)&unk_1007B6220);
  v56 = v23(v55, 1, v21);
  v58 = *(_QWORD *)(v0 + 224);
  v57 = *(_QWORD *)(v0 + 232);
  if (v56 == 1)
  {
    v59 = *(_QWORD *)(v0 + 152);
    v60 = swift_getKeyPath(&unk_1005CF938);
    v61 = swift_getKeyPath(&unk_1005CF960);
    static Published.subscript.getter(v59, v60, v61);
    swift_release(v61);
    swift_release(v60);
    sub_10000D0F0(v58, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v22 + 32))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 224), v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v57, 0, 1, v21);
  }
  v72 = *(_QWORD *)(v0 + 232);
  if (!v23(v72, 1, v21))
  {
    v73 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(v73, enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:), *(_QWORD *)(v0 + 168));
    SFAirDrop.NearbySharingInteraction.state.setter(v73);
    v72 = *(_QWORD *)(v0 + 232);
  }
  if (!v23(v72, 1, v21))
  {
    v74 = *(_QWORD *)(v0 + 160);
    static ContinuousClock.Instant.now.getter();
    v75 = type metadata accessor for ContinuousClock.Instant(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 0, 1, v75);
    SFAirDrop.NearbySharingInteraction.connectionTime.setter(v74);
    v72 = *(_QWORD *)(v0 + 232);
  }
  if (!v23(v72, 1, v21))
    SFAirDrop.NearbySharingInteraction.isInitiator.setter(objc_msgSend(*v93, "isInitiator"));
  v76 = *(_QWORD *)(v0 + 216);
  sub_100221F28(v20, v76, (uint64_t *)&unk_1007B6220);
  v77 = v23(v76, 1, v21);
  sub_10000D0F0(v76, (uint64_t *)&unk_1007B6220);
  v78 = *(_QWORD *)(v0 + 232);
  if (v77 == 1)
  {
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v81 = *(void **)(v0 + 152);
    sub_100221F28(*(_QWORD *)(v0 + 232), v79, (uint64_t *)&unk_1007B6220);
    v82 = swift_getKeyPath(&unk_1005CF938);
    v83 = swift_getKeyPath(&unk_1005CF960);
    sub_100221F28(v79, v80, (uint64_t *)&unk_1007B6220);
    static Published.subscript.setter(v80, v81, v82, v83);
    sub_10000D0F0(v79, (uint64_t *)&unk_1007B6220);
  }
  else
  {
    swift_beginAccess(v20, v0 + 104, 33, 0);
    sub_10026EA80(v78, v20);
    swift_endAccess(v0 + 104);
  }
  v84 = *(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  swift_beginAccess(v84, v0 + 80, 0, 0);
  sub_100244418(v84, v0 + 16);
  v85 = *(_QWORD *)(v0 + 40);
  v86 = *(_QWORD *)(v0 + 48);
  sub_10023A834((_QWORD *)(v0 + 16), v85);
  v87 = *(int **)(v86 + 40);
  v95 = (uint64_t (*)(uint64_t, uint64_t))((char *)v87 + *v87);
  v88 = (_QWORD *)swift_task_alloc(v87[1]);
  *(_QWORD *)(v0 + 304) = v88;
  *v88 = v0;
  v88[1] = sub_1002660A0;
  return v95(v85, v86);
}

uint64_t sub_1002660A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002661F4;
  else
    v4 = sub_100266104;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 296), 0);
}

uint64_t sub_100266104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10022E75C((_QWORD *)(v0 + 16));
  sub_10000D0F0(*(_QWORD *)(v0 + 232), (uint64_t *)&unk_1007B6220);
  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002661F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 160);
  sub_10022E75C((_QWORD *)(v0 + 16));
  sub_10000D0F0(v6, (uint64_t *)&unk_1007B6220);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100266364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = type metadata accessor for SDNearFieldTap(0);
  v6[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B7280);
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v6[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[10] = v10;
  v6[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v11 = static AirDropActor.shared;
  v6[12] = static AirDropActor.shared;
  return swift_task_switch(sub_100266440, v11, 0);
}

uint64_t sub_100266440()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  unsigned __int8 v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v34;
  id v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char v42;
  id v43;
  id v44;
  id v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(void **)(v0 + 40);
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007B6140);
  swift_unknownObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v1);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 72);
    v8 = *(void **)(v0 + 32);
    v9 = *(void **)(v0 + 40);
    v47 = v8;
    v48 = *(_QWORD *)(v0 + 80);
    v10 = swift_slowAlloc(22, -1);
    v49 = (_QWORD *)swift_slowAlloc(8, -1);
    v50 = swift_slowAlloc(32, -1);
    v51 = v50;
    *(_DWORD *)v10 = 136315394;
    v11 = objc_msgSend(v8, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

    v12 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v6, v7);
    *(_QWORD *)(v0 + 16) = sub_100228BD8(v13, v15, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4);
    swift_bridgeObjectRelease(v15);
    swift_unknownObjectRelease_n(v47, 2);
    *(_WORD *)(v10 + 12) = 2112;
    *(_QWORD *)(v0 + 24) = v9;
    v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 14);
    *v49 = v9;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService: did receive tap event for transaction: %s : %@", (uint8_t *)v10, 0x16u);
    v17 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v49, 1, v17);
    swift_slowDealloc(v49, -1, -1);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v18 = *(void **)(v0 + 40);
    swift_unknownObjectRelease_n(*(_QWORD *)(v0 + 32), 2);

  }
  v19 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v20 = (void *)static NSUserDefaults.airdrop.getter(v19);
  v21 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v21 & 1) == 0)
    goto LABEL_9;
  v23 = objc_allocWithZone((Class)NSUserDefaults);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "initWithSuiteName:", v24);

  if (v25)
  {
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v25, "BOOLForKey:", v26);

    if ((v27 & 1) != 0)
    {
LABEL_9:
      v28 = Logger.logObject.getter(v22);
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "SDAirDropNearFieldService: Boop To Action is disabled on setSwiftTapEventHandler", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      goto LABEL_12;
    }
  }
  v34 = objc_msgSend(*(id *)(v0 + 40), "deviceModel");
  if (v34)
  {
    v35 = v34;
    v36 = objc_msgSend(v35, "hasPrefix:", CFSTR("Watch"));

    if (v36)
    {
      if (objc_msgSend(*(id *)(v0 + 40), "isSameAccount"))
      {
        v37 = *(_QWORD *)(v0 + 64);
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 56))(v37, 1, 1, *(_QWORD *)(v0 + 72));
        sub_100253BF8(v37);
        sub_10000D0F0(v37, &qword_1007B7280);
LABEL_12:
        v31 = *(_QWORD *)(v0 + 56);
        v32 = *(_QWORD *)(v0 + 64);
        swift_task_dealloc(*(_QWORD *)(v0 + 88));
        swift_task_dealloc(v32);
        swift_task_dealloc(v31);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
  }
  v38 = *(_QWORD *)(v0 + 88);
  v39 = *(_QWORD *)(v0 + 56);
  v40 = *(void **)(v0 + 32);
  v41 = *(void **)(v0 + 40);
  v42 = objc_msgSend(v40, "isInitiator") ^ 1;
  v43 = v41;
  v44 = objc_msgSend(v40, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

  sub_1003F07CC(v43, v42, v38, v39);
  v45 = objc_msgSend(v40, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

  v46 = (_QWORD *)swift_task_alloc(dword_1007B6534);
  *(_QWORD *)(v0 + 104) = v46;
  *v46 = v0;
  v46[1] = sub_1002669C0;
  return sub_10025BC5C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1002669C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_100266A34, v1, 0);
}

uint64_t sub_100266A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1002443C8(*(_QWORD *)(v0 + 56), type metadata accessor for SDNearFieldTap);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100266C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v5[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[9] = v9;
  v5[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100266CE4, static AirDropActor.shared, 0);
}

uint64_t sub_100266CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007B6140);
  v3 = swift_unknownObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(void **)(v0 + 24);
    v20 = v8;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v23 = v22;
    *(_DWORD *)v9 = 136315138;
    v10 = objc_msgSend(v8, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v11 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v6, v7);
    *(_QWORD *)(v0 + 16) = sub_100228BD8(v12, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4);
    swift_bridgeObjectRelease(v14);
    swift_unknownObjectRelease_n(v20, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService: did interrupt transaction:%s", v9, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  v15 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:), v18);
  sub_10025D378(v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002670F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  _QWORD *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384((uint64_t *)&unk_1007B6220);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100221F28(a1, (uint64_t)v10, (uint64_t *)&unk_1007B6220);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if ((_DWORD)result == 1)
  {
    v12 = _swiftEmptyArrayStorage;
  }
  else
  {
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v7, v10, v4);
    v14 = sub_100008384(&qword_1007B64D8);
    v15 = *(unsigned __int8 *)(v5 + 80);
    v16 = (v15 + 32) & ~v15;
    v12 = (_QWORD *)swift_allocObject(v14, v16 + *(_QWORD *)(v5 + 72), v15 | 7);
    *((_OWORD *)v12 + 1) = xmmword_1005CD2A0;
    result = ((uint64_t (*)(char *, char *, uint64_t))v13)((char *)v12 + v16, v7, v4);
  }
  *a2 = v12;
  return result;
}

uint64_t sub_100267240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 120) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  *(_QWORD *)(v4 + 128) = static AirDropActor.shared;
  return swift_task_switch(sub_1002672AC, v5, 0);
}

uint64_t sub_1002672AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = v0[15];
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  v0[17] = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  v3 = v1 + v2;
  swift_beginAccess(v1 + v2, v0 + 12, 0, 0);
  sub_100244418(v3, (uint64_t)(v0 + 2));
  v4 = v0[5];
  v5 = v0[6];
  sub_10023A834(v0 + 2, v4);
  v6 = *(int **)(v5 + 40);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_10026735C;
  return v9(v4, v5);
}

uint64_t sub_10026735C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10026F7C0;
  else
    v4 = sub_10026F7DC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_1002673C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = swift_allocObject(&unk_10071E988, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_10071EC80, v13 + v6, v12 | 7);
  *(_QWORD *)(v14 + 16) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v15 = swift_allocObject(&unk_10071ECA8, 32, 7);
  *(_QWORD *)(v15 + 16) = &unk_1007B65E0;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = static Task<>.noThrow(priority:operation:)(v9, &unk_1007B65E8, v15, (char *)&type metadata for () + 8);
  swift_release(v16);
  swift_release(v15);
  return sub_10000D0F0((uint64_t)v9, &qword_1007B68A0);
}

uint64_t sub_10026756C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[10] = a1;
  v2[11] = a2;
  v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFPlatform(0);
  v2[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[16] = v6;
  v2[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v2[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[19] = v8;
  v2[20] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v2[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[22] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v11);
  v2[24] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B6220) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v12);
  v2[26] = swift_task_alloc(v12);
  v13 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v2[27] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[28] = v14;
  v2[29] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1002676E0, static AirDropActor.shared, 0);
}

uint64_t sub_1002676E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t type;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 80) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 200);
    v8 = Strong + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
    swift_beginAccess(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction, v0 + 40, 0, 0);
    sub_100221F28(v8, v7, (uint64_t *)&unk_1007B6220);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v9(v7, 1, v5) == 1)
    {
      v10 = *(_QWORD *)(v0 + 200);
      KeyPath = swift_getKeyPath(&unk_1005CF938);
      v12 = swift_getKeyPath(&unk_1005CF960);
      static Published.subscript.getter(v4, KeyPath, v12);
      swift_release(v12);
      swift_release(KeyPath);
      sub_10000D0F0(v10, (uint64_t *)&unk_1007B6220);
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 216);
      v14 = *(_QWORD *)(v0 + 224);
      v15 = *(_QWORD *)(v0 + 208);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32))(v15, *(_QWORD *)(v0 + 200), v13);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v13);
    }
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 216);
    if (v9(v16, 1, v17) == 1)
    {

      sub_10000D0F0(v16, (uint64_t *)&unk_1007B6220);
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 168);
      v20 = *(_QWORD *)(v0 + 176);
      v21 = *(_QWORD *)(v0 + 88);
      v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 232), v16, v17);
      SFAirDrop.NearbySharingInteraction.id.getter(v22);
      v23 = static UUID.== infix(_:_:)(v18, v21);
      v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v18, v19);
      v25 = *(_QWORD *)(v0 + 232);
      if ((v23 & 1) != 0)
      {
        v27 = *(_QWORD *)(v0 + 152);
        v26 = *(_QWORD *)(v0 + 160);
        v28 = *(_QWORD *)(v0 + 144);
        SFAirDrop.NearbySharingInteraction.state.getter(v25);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 88))(v26, v28) == enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:))
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
          if (qword_1007B3D18 != -1)
            swift_once(&qword_1007B3D18, sub_1002531A0);
          v30 = *(_QWORD *)(v0 + 176);
          v29 = *(_QWORD *)(v0 + 184);
          v31 = *(_QWORD *)(v0 + 168);
          v32 = *(_QWORD *)(v0 + 88);
          v33 = type metadata accessor for Logger(0);
          sub_100221DF8(v33, (uint64_t)qword_1007B6140);
          v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
          v35 = Logger.logObject.getter(v34);
          v36 = static os_log_type_t.default.getter();
          v37 = os_log_type_enabled(v35, v36);
          v38 = *(_QWORD *)(v0 + 184);
          v39 = *(_QWORD *)(v0 + 168);
          if (v37)
          {
            v40 = *(_QWORD *)(v0 + 136);
            v67 = *(_QWORD *)(v0 + 128);
            v68 = *(_QWORD *)(v0 + 120);
            v41 = swift_slowAlloc(22, -1);
            v69 = swift_slowAlloc(32, -1);
            v70 = v69;
            *(_DWORD *)v41 = 136315394;
            v42 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v43 = dispatch thunk of CustomStringConvertible.description.getter(v39, v42);
            type = v36;
            v45 = v44;
            *(_QWORD *)(v0 + 64) = sub_100228BD8(v43, v44, &v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4);
            swift_bridgeObjectRelease(v45);
            v46 = ((uint64_t (*)(uint64_t, uint64_t))v24)(v38, v39);
            *(_WORD *)(v41 + 12) = 2048;
            static SFPlatform.watchOS.getter(v46);
            v47 = static SFPlatform.isPlatform(_:)(v40);
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v40, v68);
            v48 = 1.5;
            if ((v47 & 1) != 0)
              v48 = 2.5;
            *(double *)(v0 + 72) = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v41 + 14);
            _os_log_impl((void *)&_mh_execute_header, v35, type, "SDAirDropNearFieldService: did fire timer to cancel nearby sharing interaction:%s after ~%fs if stuck in presence detected state.", (uint8_t *)v41, 0x16u);
            swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v69, -1, -1);
            swift_slowDealloc(v41, -1, -1);

          }
          else
          {
            v24(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));

          }
          v53 = *(_QWORD *)(v0 + 224);
          v52 = *(_QWORD *)(v0 + 232);
          v54 = *(_QWORD *)(v0 + 216);
          v56 = *(_QWORD *)(v0 + 104);
          v55 = *(_QWORD *)(v0 + 112);
          v57 = *(_QWORD *)(v0 + 96);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104))(v55, enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:), v57);
          sub_10025D378(v55);

          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
        }
        else
        {
          v50 = *(_QWORD *)(v0 + 152);
          v49 = *(_QWORD *)(v0 + 160);
          v51 = *(_QWORD *)(v0 + 144);
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));

          (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
        }
      }
      else
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(v25, *(_QWORD *)(v0 + 216));

      }
    }
  }
  v58 = *(_QWORD *)(v0 + 200);
  v59 = *(_QWORD *)(v0 + 208);
  v61 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 192);
  v62 = *(_QWORD *)(v0 + 160);
  v63 = *(_QWORD *)(v0 + 136);
  v64 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v59);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100267C10(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t aBlock[5];
  uint64_t v61;

  v2 = v1;
  v58 = type metadata accessor for DispatchTime(0);
  v56 = *(_QWORD *)(v58 - 8);
  v4 = __chkstk_darwin(v58);
  v55 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v57 = (char *)&v48 - v6;
  v53 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v53);
  v54 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - v13;
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v15 = type metadata accessor for Logger(0);
  sub_100221DF8(v15, (uint64_t)qword_1007B6140);
  v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16 = v52(v14, a1, v8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v49 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v50 = a1;
    v22 = v21;
    aBlock[0] = v21;
    v51 = v1;
    *(_DWORD *)v20 = 136315138;
    v48 = v20 + 4;
    v23 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v8, v23);
    v26 = v25;
    v59 = (_QWORD *)sub_100228BD8(v24, v25, aBlock);
    v2 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, aBlock, v48);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService: start assertion timeout for nearby sharing interaction:%s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    a1 = v50;
    swift_slowDealloc(v27, -1, -1);
    v28 = v20;
    v12 = v49;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  v52(v12, a1, v8);
  v29 = *(unsigned __int8 *)(v9 + 80);
  v30 = (v29 + 24) & ~v29;
  v31 = swift_allocObject(&unk_10071EBE0, v30 + v10, v29 | 7);
  *(_QWORD *)(v31 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v31 + v30, v12, v8);
  aBlock[4] = (uint64_t)sub_10026EB4C;
  v61 = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10025BBB4;
  aBlock[3] = (uint64_t)&unk_10071EBF8;
  v32 = _Block_copy(aBlock);
  v59 = _swiftEmptyArrayStorage;
  v33 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = v2;
  v35 = sub_100008384((uint64_t *)&unk_1007B6410);
  v36 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  v37 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v35, v36, v53, v33);
  v38 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v39 = DispatchWorkItem.init(flags:block:)(v37, v32);
  swift_release(v61);
  sub_100221EDC(0, (unint64_t *)&qword_1007B42D0, OS_dispatch_queue_ptr);
  v40 = (void *)static OS_dispatch_queue.main.getter();
  v41 = v55;
  static DispatchTime.now()(v40);
  v42 = v57;
  + infix(_:_:)(v41, 5.0);
  v43 = *(void (**)(char *, uint64_t))(v56 + 8);
  v44 = v41;
  v45 = v58;
  v43(v44, v58);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v42, v39);

  v43(v42, v45);
  v46 = *(_QWORD *)&v34[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem];
  *(_QWORD *)&v34[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem] = v39;
  return swift_release(v46);
}

uint64_t sub_1002680C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 120) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  *(_QWORD *)(v4 + 128) = static AirDropActor.shared;
  return swift_task_switch(sub_100268134, v5, 0);
}

uint64_t sub_100268134()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = v0[15];
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  v0[17] = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  v3 = v1 + v2;
  swift_beginAccess(v1 + v2, v0 + 12, 0, 0);
  sub_100244418(v3, (uint64_t)(v0 + 2));
  v4 = v0[5];
  v5 = v0[6];
  sub_10023A834(v0 + 2, v4);
  v6 = *(int **)(v5 + 40);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_1002681E4;
  return v9(v4, v5);
}

uint64_t sub_1002681E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002682E4;
  else
    v4 = sub_100268248;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_100268248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120) + *(_QWORD *)(v0 + 136);
  sub_10022E75C((_QWORD *)(v0 + 16));
  sub_100244418(v1, v0 + 56);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  sub_10023A834((_QWORD *)(v0 + 56), v2);
  (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 64))(0xD000000000000023, 0x8000000100612F40, v2, v3);
  sub_10022E75C((_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002682E4()
{
  uint64_t v0;

  sub_10022E75C((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100268318(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_10071EC30, v12 + v6, v11 | 7);
  *(_QWORD *)(v13 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v14 = swift_allocObject(&unk_10071EC58, 32, 7);
  *(_QWORD *)(v14 + 16) = &unk_1007B65C8;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = a1;
  v16 = static Task<>.noThrow(priority:operation:)(v9, &unk_1007B65D0, v14, (char *)&type metadata for () + 8);
  swift_release(v16);
  swift_release(v14);
  return sub_10000D0F0((uint64_t)v9, &qword_1007B68A0);
}

uint64_t sub_1002684A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[6] = a1;
  v2[7] = a2;
  v3 = sub_100008384(&qword_1007B7280);
  v2[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[10] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v7 = sub_100008384((uint64_t *)&unk_1007B6220);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v2[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1002685B4, static AirDropActor.shared, 0);
}

uint64_t sub_1002685B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v6 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v1, KeyPath, v6);
  swift_release(v6);
  swift_release(KeyPath);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10000D0F0(*(_QWORD *)(v0 + 104), (uint64_t *)&unk_1007B6220);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  SFAirDrop.NearbySharingInteraction.id.getter(v11);
  v12 = static UUID.== infix(_:_:)(v7, v10);
  v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v7, v8);
  if ((v12 & 1) == 0)
  {
LABEL_7:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    goto LABEL_15;
  }
  v14 = (uint64_t *)(*(_QWORD *)(v0 + 48)
                  + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
  swift_beginAccess(v14, v0 + 16, 32, 0);
  v15 = *v14;
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_10045C2DC(*(_QWORD *)(v0 + 56)), (v17 & 1) != 0))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
    swift_endAccess(v0 + 16);
    if (*(_QWORD *)(v18 + 16))
      goto LABEL_7;
  }
  else
  {
    swift_endAccess(v0 + 16);
  }
  if (qword_1007B3D18 != -1)
    swift_once(&qword_1007B3D18, sub_1002531A0);
  v20 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 56);
  v23 = type metadata accessor for Logger(0);
  sub_100221DF8(v23, (uint64_t)qword_1007B6140);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v25 = v24(v19, v22, v21);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v29 = *(_QWORD *)(v0 + 88);
  v30 = *(_QWORD *)(v0 + 72);
  if (v28)
  {
    v49 = v24;
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v50 = v48;
    *(_DWORD *)v31 = 136315138;
    v32 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v30, v32);
    v35 = v34;
    *(_QWORD *)(v0 + 40) = sub_100228BD8(v33, v34, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 4);
    v36 = v35;
    v24 = v49;
    swift_bridgeObjectRelease(v36);
    v13(v29, v30);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "SDAirDropNearFieldService: did fire timer to cancel nearby sharing interaction:%s after 5 seconds if no clients took an assertion for it.", v31, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    v13(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v38 = *(_QWORD *)(v0 + 120);
  v37 = *(_QWORD *)(v0 + 128);
  v39 = *(_QWORD *)(v0 + 112);
  v40 = *(_QWORD *)(v0 + 72);
  v41 = *(_QWORD *)(v0 + 80);
  v42 = *(_QWORD *)(v0 + 64);
  v24(v42, *(_QWORD *)(v0 + 56), v40);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
  sub_100253BF8(v42);
  sub_10000D0F0(v42, &qword_1007B7280);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
LABEL_15:
  v43 = *(_QWORD *)(v0 + 96);
  v44 = *(_QWORD *)(v0 + 104);
  v45 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v44);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100268980(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = (_QWORD *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_10026D7C4(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  v10 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v10, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100268A5C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  char v15;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_10026D7D8(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = type metadata accessor for SFAirDrop.NearbySharingAssertion(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    v15 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront(v11);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

void *sub_100268B98@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100268BC0(a1, (uint64_t (*)(uint64_t))sub_10026D840, (void (*)(uint64_t, uint64_t))sub_10026EE60, a2);
}

void *sub_100268BAC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100268BC0(a1, (uint64_t (*)(uint64_t))sub_10026D82C, (void (*)(uint64_t, uint64_t))sub_10026EE60, a2);
}

void *sub_100268BC0@<X0>(unint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *result;
  char v13;

  v9 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
    v9 = a2(v9);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 <= a1)
  {
    __break(1u);
  }
  else
  {
    v11 = v10 - 1;
    a3(v9 + 40 * a1 + 32, a4);
    if ((uint64_t)(v11 - a1) >= 0)
    {
      result = memmove((void *)(v9 + 40 * a1 + 32), (const void *)(v9 + 40 * a1 + 72), 40 * (v11 - a1));
      *(_QWORD *)(v9 + 16) = v11;
      *v4 = v9;
      return result;
    }
  }
  v13 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100268CC0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_10026D868(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = type metadata accessor for SDAirDropService.TransferPresenterClient(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = sub_100221DB4(v11, a2, type metadata accessor for SDAirDropService.TransferPresenterClient);
  v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront(v11);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t sub_100268DFC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  char v13;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = sub_10026D87C(v3);
    *v1 = v3;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }
  v13 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100268EDC()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;

  _StringGuts.grow(_:)(56);
  v1._object = (void *)0x8000000100612FB0;
  v1._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v1);
  v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) + 24));
  v3 = *v2;
  v4 = v2[1];
  sub_10022E4A8(*v2, v4);
  v5._countAndFlagsBits = Data.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  sub_100225AB4(v3, v4);
  v7._countAndFlagsBits = 0x6E657473696C202CLL;
  v7._object = (void *)0xEF3A444955557265;
  String.append(_:)(v7);
  v8 = type metadata accessor for UUID(0);
  v9 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0;
}

id sub_10026905C(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v15;

  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v15 - v10;
  v12 = a1;
  a4();

  v13 = (void *)a5();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

id HeadphoneProxFeatureClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002691F0()
{
  return type metadata accessor for SDBoopAtADistanceTransaction(0);
}

uint64_t type metadata accessor for SDBoopAtADistanceTransaction(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007B6328, (uint64_t)&nominal type descriptor for SDBoopAtADistanceTransaction);
}

uint64_t sub_10026920C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(319, a2);
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v5, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_100269278(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (char *)a2 + v9;
    v13 = *(uint64_t *)((char *)a2 + v9);
    v14 = *((_QWORD *)v12 + 1);
    swift_unknownObjectRetain(v10);
    sub_10022E4A8(v13, v14);
    *v11 = v13;
    v11[1] = v14;
  }
  return a1;
}

uint64_t sub_100269320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  return sub_100225AB4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_100269374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (uint64_t *)(a1 + v8);
  v11 = *(_QWORD *)(a2 + v8);
  v12 = *(_QWORD *)(a2 + v8 + 8);
  swift_unknownObjectRetain(v9);
  sub_10022E4A8(v11, v12);
  *v10 = v11;
  v10[1] = v12;
  return a1;
}

uint64_t sub_1002693F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_10022E4A8(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  sub_100225AB4(v15, v16);
  return a1;
}

uint64_t sub_100269484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1002694E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_unknownObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = *(_QWORD *)(a1 + v9);
  v11 = *(_QWORD *)(a1 + v9 + 8);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  sub_100225AB4(v10, v11);
  return a1;
}

uint64_t sub_100269564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100269570);
}

uint64_t sub_100269570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1002695EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002695F8);
}

uint64_t sub_1002695F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100269670(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_1005CF8D0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1002696EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_100269790, 0, 0);
}

uint64_t sub_100269790()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100220D78((unint64_t *)&unk_1007B65F0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100220D78(&qword_1007C4370, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1002698A8;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1002698A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100269954, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100269954()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100269990(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v3 = swift_getKeyPath(&unk_1005CF960);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(v3);
  return swift_release(KeyPath);
}

uint64_t sub_1002699FC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100008384((uint64_t *)&unk_1007B6220);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100221F28(a1, (uint64_t)&v14 - v8, (uint64_t *)&unk_1007B6220);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1005CF938);
  v12 = swift_getKeyPath(&unk_1005CF960);
  sub_100221F28((uint64_t)v9, (uint64_t)v7, (uint64_t *)&unk_1007B6220);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_10000D0F0((uint64_t)v9, (uint64_t *)&unk_1007B6220);
}

uint64_t sub_100269AF4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100269B58;
  return v6(a1);
}

uint64_t sub_100269B58()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_100269BA4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  const char **v2;
  const char **v3;
  const char *v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  const char *v10;
  const char *v11;
  double result;
  const char *v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C1D0(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = (const char *)0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10046E1E8();
      v10 = v13;
    }
    sub_10022E6C0(*((_QWORD *)v10 + 6) + 40 * v7);
    sub_10022138C((_OWORD *)(*((_QWORD *)v10 + 7) + 32 * v7), a2);
    sub_10026B440(v7, (uint64_t)v10);
    v11 = *v3;
    *v3 = v10;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100269C8C(uint64_t a1, uint64_t a2)
{
  return sub_10026A3A0(a1, a2, (void (*)(void))sub_10046E3CC);
}

double sub_100269C98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  const char **v3;
  const char **v4;
  const char *v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  const char *v12;
  const char *v13;
  double result;
  const char *v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = (const char *)0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10046E3D8();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(const char **)(*((_QWORD *)v12 + 6) + 16 * v9 + 8));
    sub_10022138C((_OWORD *)(*((_QWORD *)v12 + 7) + 32 * v9), a3);
    sub_10026B608(v9, (uint64_t)v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100269D88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10045C244(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10046E5BC();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_10026C1F4(v5, v8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B6590, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_100269E84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10046E5D0();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10026D7AC((__int128 *)(*(_QWORD *)(v12 + 56) + 48 * v9), a3);
    sub_10026B7DC(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t sub_100269F7C(uint64_t a1)
{
  return sub_10026B168(a1, (void (*)(void))sub_10046E7B8);
}

uint64_t sub_100269F88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10045C2DC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10046E7C4();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_10026B9C4(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10026A060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_unknownObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  sub_100225AB4(*(_QWORD *)(v7 + *(int *)(v1 + 24)), *(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10026A108()
{
  uint64_t v0;

  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  sub_10025BBE0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10026A138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10026A148(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10026A150()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026A174()
{
  uint64_t v0;

  return sub_10025B928(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10026A17C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026A1A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1007B6424);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10022320C;
  return sub_10025BA3C(v0);
}

uint64_t sub_10026A1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B6434);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1007B6430 + dword_1007B6430))(a1, v4);
}

uint64_t sub_10026A258(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10045C2DC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10046E9F4();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v5);
  sub_10026BC64(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10026A344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10026AC20(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for SFClientIdentity, (void (*)(void))sub_10046EC64, a3);
}

uint64_t sub_10026A358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10026AAD4(a1, a2, type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (void (*)(void))sub_10046EC78, a3);
}

uint64_t sub_10026A36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10026A954(a1, (uint64_t (*)(_QWORD))&type metadata accessor for NWEndpoint, (void (*)(void))sub_10046EC8C, a2);
}

uint64_t sub_10026A380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10026A954(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer, (void (*)(void))sub_10046ECA8, a2);
}

uint64_t sub_10026A394(uint64_t a1, uint64_t a2)
{
  return sub_10026A3A0(a1, a2, (void (*)(void))sub_10046ECC4);
}

uint64_t sub_10026A3A0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  const char **v3;
  const char **v5;
  const char *v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v16;

  v5 = v3;
  v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  v9 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v12 = *v5;
  v16 = *v5;
  *v5 = (const char *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v12 = v16;
  }
  swift_bridgeObjectRelease(*(const char **)(*((_QWORD *)v12 + 6) + 16 * v9 + 8));
  v13 = *(_QWORD *)(*((_QWORD *)v12 + 7) + 8 * v9);
  sub_10026CB78(v9, (uint64_t)v12);
  v14 = *v5;
  *v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_10026A478(uint64_t a1)
{
  return sub_10026A484(a1, (void (*)(void))sub_10046EE74);
}

uint64_t sub_10026A484(uint64_t a1, void (*a2)(void))
{
  const char **v2;
  const char **v4;
  const char *v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v16;

  v4 = v2;
  v6 = *v4;
  swift_bridgeObjectRetain(*v4);
  v7 = sub_10045C2DC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v10 = *v4;
  v16 = *v4;
  *v4 = (const char *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v10 = v16;
  }
  v11 = *((_QWORD *)v10 + 6);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
  v13 = *(_QWORD *)(*((_QWORD *)v10 + 7) + 8 * v7);
  sub_10026C1F4(v7, (uint64_t)v10, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1007B6448, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = *v4;
  *v4 = v10;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_10026A584(uint64_t a1, uint64_t a2)
{
  return sub_10026B05C(a1, a2, (void (*)(void))sub_10046EE88);
}

uint64_t sub_10026A590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10026AAD4(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint, (void (*)(void))sub_10046EE94, a3);
}

uint64_t sub_10026A5A4(uint64_t a1, uint64_t a2)
{
  const char **v2;
  const char **v3;
  const char *v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = (const char *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10046F0E4();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(const char **)(*((_QWORD *)v10 + 6) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*((_QWORD *)v10 + 7) + 16 * v7);
  sub_10026C498(v7, (uint64_t)v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10026A688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char **v2;
  const char **v3;
  const char *v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  const char *v21;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C244(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v21 = *v3;
    *v3 = (const char *)0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10046F29C();
      v10 = v21;
    }
    v11 = *((_QWORD *)v10 + 6);
    v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *((_QWORD *)v10 + 7);
    v14 = sub_100008384(&qword_1007B6738);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(_QWORD *)(v15 + 72) * v7, v14);
    sub_10026C66C(v7, (uint64_t)v10);
    v16 = *v3;
    *v3 = v10;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a2, 0, 1, v14, v17);
  }
  else
  {
    v19 = sub_100008384(&qword_1007B6738);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19, v20);
  }
}

uint64_t sub_10026A7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C244(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10046F580();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100221DB4(v13 + *(_QWORD *)(v15 + 72) * v7, a2, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    sub_10026BF28(v7, v10, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B6590, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_10026A934(uint64_t a1)
{
  return sub_10026B168(a1, (void (*)(void))sub_10046F85C);
}

uint64_t sub_10026A940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10026A954(a1, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer, (void (*)(void))sub_10046FAA4, a2);
}

uint64_t sub_10026A954@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = sub_10045C244(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v14 = *v7;
    v23 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      v14 = v23;
    }
    v15 = *(_QWORD *)(v14 + 48);
    v16 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v11, v16);
    v17 = *(_QWORD *)(v14 + 56);
    v18 = a2(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a4, v17 + *(_QWORD *)(v19 + 72) * v11, v18);
    sub_10026BF28(v11, v14, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B6590, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier, a2);
    v20 = *v7;
    *v7 = v14;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a4, 0, 1, v18);
  }
  else
  {
    v22 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
  }
}

uint64_t sub_10026AAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10026AAD4(a1, a2, type metadata accessor for RegistrationState, (void (*)(void))sub_10046FF64, a3);
}

uint64_t sub_10026AAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v8 = v5;
  v12 = *v8;
  swift_bridgeObjectRetain(*v8);
  v13 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v14;
  swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v16 = *v8;
    v23 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v16 = v23;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v13 + 8));
    v17 = *(_QWORD *)(v16 + 56);
    v18 = a3(0);
    v19 = *(_QWORD *)(v18 - 8);
    sub_100221DB4(v17 + *(_QWORD *)(v19 + 72) * v13, a5, a3);
    sub_10026CF58(v13, v16, a3);
    v20 = *v8;
    *v8 = v16;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a5, 0, 1, v18);
  }
  else
  {
    v22 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a5, 1, 1, v22);
  }
}

uint64_t sub_10026AC0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10026AC20(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (void (*)(void))sub_10046FF78, a3);
}

uint64_t sub_10026AC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v8 = v5;
  v12 = *v8;
  swift_bridgeObjectRetain(*v8);
  v13 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v14;
  swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v16 = *v8;
    v23 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v16 = v23;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v13 + 8));
    v17 = *(_QWORD *)(v16 + 56);
    v18 = a3(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a5, v17 + *(_QWORD *)(v19 + 72) * v13, v18);
    sub_10026CF58(v13, v16, a3);
    v20 = *v8;
    *v8 = v16;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a5, 0, 1, v18);
  }
  else
  {
    v22 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a5, 1, 1, v22);
  }
}

uint64_t sub_10026AD5C(uint64_t a1, uint64_t a2)
{
  const char **v2;
  const char **v3;
  const char *v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = (const char *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1004701AC();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(const char **)(*((_QWORD *)v10 + 6) + 16 * v7 + 8));
  v11 = *(unsigned __int8 *)(*((_QWORD *)v10 + 7) + v7);
  sub_10026C9A4(v7, (uint64_t)v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10026AE28(uint64_t a1, uint64_t a2)
{
  return sub_10026A3A0(a1, a2, (void (*)(void))sub_100470354);
}

uint64_t sub_10026AE34(uint64_t a1, uint64_t a2)
{
  return sub_10026A3A0(a1, a2, (void (*)(void))sub_100470360);
}

uint64_t sub_10026AE40(uint64_t a1, uint64_t a2)
{
  const char **v2;
  const char **v3;
  const char *v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = (const char *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10047036C();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(const char **)(*((_QWORD *)v10 + 6) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*((_QWORD *)v10 + 7) + 8 * v7);
  sub_10026CB78(v7, (uint64_t)v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10026AF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char **v3;
  const char **v4;
  const char *v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  const char *v21;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10045C200(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v21 = *v4;
    *v4 = (const char *)0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100470520();
      v12 = v21;
    }
    swift_bridgeObjectRelease(*(const char **)(*((_QWORD *)v12 + 6) + 16 * v9 + 8));
    v13 = *((_QWORD *)v12 + 7);
    v14 = sub_100008384(&qword_1007B6640);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v13 + *(_QWORD *)(v15 + 72) * v9, v14);
    sub_10026CD4C(v9, (uint64_t)v12);
    v16 = *v4;
    *v4 = v12;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a3, 0, 1, v14, v17);
  }
  else
  {
    v19 = sub_100008384(&qword_1007B6640);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a3, 1, 1, v19, v20);
  }
}

uint64_t sub_10026B044(uint64_t a1, uint64_t a2)
{
  return sub_10026A3A0(a1, a2, (void (*)(void))sub_100470784);
}

uint64_t sub_10026B050(uint64_t a1, uint64_t a2)
{
  return sub_10026B05C(a1, a2, (void (*)(void))sub_100470938);
}

uint64_t sub_10026B05C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = v3;
  v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  v9 = sub_10045C200(a1, a2);
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v12 = *v5;
  v16 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v12 = v16;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v9);
  sub_10026CB78(v9, v12);
  v14 = *v5;
  *v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_10026B13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10026AC20(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for NWBrowser.Result, (void (*)(void))sub_100470AE8, a3);
}

uint64_t sub_10026B150(uint64_t a1, uint64_t a2)
{
  return sub_10026A3A0(a1, a2, (void (*)(void))sub_100470D58);
}

uint64_t sub_10026B15C(uint64_t a1)
{
  return sub_10026B168(a1, (void (*)(void))sub_1004710C0);
}

uint64_t sub_10026B168(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = v2;
  v6 = *v4;
  swift_bridgeObjectRetain(*v4);
  v7 = sub_10045C2DC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v10 = *v4;
  v16 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v10 = v16;
  }
  v11 = *(_QWORD *)(v10 + 48);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
  sub_10026BC64(v7, v10);
  v14 = *v4;
  *v4 = v10;
  swift_bridgeObjectRelease(v14);
  return v13;
}

double sub_10026B258@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10045C2DC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1004712FC();
      v10 = v15;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    sub_10026EE60((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v7), a2);
    sub_10026D348(v7, v10);
    v13 = *v3;
    *v3 = v10;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10026B35C(uint64_t a1)
{
  return sub_10026A484(a1, (void (*)(void))sub_100471704);
}

uint64_t sub_10026B368(uint64_t a1)
{
  const char **v1;
  const char **v2;
  const char *v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10045C2DC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = (const char *)0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100471940();
    v8 = v14;
  }
  v9 = *((_QWORD *)v8 + 6);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*((_QWORD *)v8 + 7) + 8 * v5);
  sub_10026B9C4(v5, (uint64_t)v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_10026B440(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_10026EFF8(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = sub_10022E6C0((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026B608(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026B7DC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = (__int128 *)(v19 + 48 * v3);
          v21 = (__int128 *)(v19 + 48 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= v21 + 3))
          {
            v9 = *v21;
            v10 = v21[2];
            v20[1] = v21[1];
            v20[2] = v10;
            *v20 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026B9C4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026BC64(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_OWORD *)(v26 + 16 * a1);
            v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026BF04(int64_t a1, uint64_t a2)
{
  return sub_10026BF28(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B6590, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer);
}

unint64_t sub_10026BF28(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  void (*v47)(char *, unint64_t, uint64_t);
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a6;
  v50 = a4;
  v51 = a5;
  v49 = a3;
  v8 = a3(0);
  v52 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v45 - v10;
  v12 = a2 + 64;
  v13 = -1 << *(_BYTE *)(a2 + 32);
  v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v15 = ~v13;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v48 = (result + 1) & v15;
      v16 = *(_QWORD *)(v52 + 72);
      v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      v17 = v15;
      do
      {
        v18 = v12;
        v19 = v16;
        v20 = v16 * v14;
        v47(v11, *(_QWORD *)(a2 + 48) + v16 * v14, v8);
        v21 = v17;
        v22 = *(_QWORD *)(a2 + 40);
        v23 = sub_100220D78(v50, v49, v51);
        v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        v25 = v24 & v21;
        v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            v28 = *(_QWORD *)(a2 + 48);
            v29 = v28 + v19 * a1;
            v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1, v8);
            }
            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront(v29);
            }
            v31 = *(_QWORD *)(a2 + 56);
            v32 = v46(0);
            v33 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72);
            v34 = v33 * a1;
            result = v31 + v33 * a1;
            v35 = v33 * v14;
            v36 = v31 + v33 * v14;
            v37 = v36 + v33;
            v38 = v34 < v35 || result >= v37;
            v12 = v18;
            if (v38)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v36, 1, v32);
              a1 = v14;
              v17 = v21;
            }
            else
            {
              a1 = v14;
              v17 = v21;
              if (v34 != v35)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        v12 = v18;
LABEL_5:
        v14 = (v14 + 1) & v17;
        v16 = v19;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v40 = *v39;
    v41 = (-1 << a1) - 1;
  }
  else
  {
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v41 = *v39;
    v40 = (-1 << a1) - 1;
  }
  *v39 = v41 & v40;
  v42 = *(_QWORD *)(a2 + 16);
  v43 = __OFSUB__(v42, 1);
  v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026C1F4(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  unint64_t v40;
  uint64_t (*v41)(uint64_t);
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a4;
  v43 = a5;
  v41 = a3;
  v7 = a3(0);
  v44 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v10 = (char *)&v39 - v9;
  v11 = a2 + 64;
  v12 = -1 << *(_BYTE *)(a2 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(a2 + 64 + 8 * (v13 >> 6))) != 0)
  {
    v14 = ~v12;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v12);
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v40 = (result + 1) & v14;
      v15 = *(_QWORD *)(v44 + 72);
      v39 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v16 = v14;
      do
      {
        v17 = v11;
        v18 = v15;
        v19 = v15 * v13;
        v20 = v16;
        v39(v10, *(_QWORD *)(a2 + 48) + v15 * v13, v7);
        v21 = *(_QWORD *)(a2 + 40);
        v22 = sub_100220D78(v42, v41, v43);
        v23 = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v7, v22);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v10, v7);
        v16 = v20;
        v24 = v23 & v20;
        if (a1 >= (uint64_t)v40)
        {
          if (v24 >= v40 && a1 >= (uint64_t)v24)
          {
LABEL_16:
            v27 = *(_QWORD *)(a2 + 48);
            v15 = v18;
            result = v27 + v18 * a1;
            v28 = v27 + v19;
            if (v18 * a1 < v19 || result >= v28 + v18)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v28, 1, v7);
              v16 = v20;
              v11 = v17;
            }
            else
            {
              v29 = v18 * a1 == v19;
              v11 = v17;
              if (!v29)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v16 = v20;
              }
            }
            v30 = *(_QWORD *)(a2 + 56);
            v31 = (_QWORD *)(v30 + 8 * a1);
            v32 = (_QWORD *)(v30 + 8 * v13);
            if (a1 != v13 || (a1 = v13, v31 >= v32 + 1))
            {
              *v31 = *v32;
              a1 = v13;
            }
            goto LABEL_5;
          }
        }
        else if (v24 >= v40 || a1 >= (uint64_t)v24)
        {
          goto LABEL_16;
        }
        v11 = v17;
        v15 = v18;
LABEL_5:
        v13 = (v13 + 1) & v16;
      }
      while (((*(_QWORD *)(v11 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    v33 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v34 = *v33;
    v35 = (-1 << a1) - 1;
  }
  else
  {
    v33 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v35 = *v33;
    v34 = (-1 << a1) - 1;
  }
  *v33 = v35 & v34;
  v36 = *(_QWORD *)(a2 + 16);
  v37 = __OFSUB__(v36, 1);
  v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026C48C(unint64_t a1, uint64_t a2)
{
  return sub_10026CF58(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

unint64_t sub_10026C498(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026C66C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v44 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v43 = (result + 1) & v11;
      v12 = *(_QWORD *)(v44 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v42(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100220D78(&qword_1007B6590, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v26 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = sub_100008384(&qword_1007B6738);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72);
            v30 = v29 * a1;
            result = v27 + v29 * a1;
            v31 = v29 * v10;
            v32 = v27 + v29 * v10;
            v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v32, 1, v28);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v30 != v31)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v35;
    v37 = (-1 << a1) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v35;
    v36 = (-1 << a1) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(a2 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026C944(int64_t a1, uint64_t a2)
{
  return sub_10026BF28(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B6590, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer);
}

unint64_t sub_10026C968(int64_t a1, uint64_t a2)
{
  return sub_10026BF28(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1007B6448, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t (*)(_QWORD))&type metadata accessor for SFNWInterfaceType);
}

unint64_t sub_10026C98C(unint64_t a1, uint64_t a2)
{
  return sub_10026CF58(a1, a2, type metadata accessor for RegistrationState);
}

unint64_t sub_10026C998(unint64_t a1, uint64_t a2)
{
  return sub_10026CF58(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

unint64_t sub_10026C9A4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_BYTE *)(v17 + v3);
          v19 = (_BYTE *)(v17 + v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026CB78(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10026CD4C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[9];

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      while (1)
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = (const char *)v10[1];
        Hasher.init(_seed:)(v33);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v33, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v14 < v9)
          goto LABEL_11;
LABEL_12:
        v15 = *(_QWORD *)(a2 + 48);
        v16 = (_OWORD *)(v15 + 16 * v3);
        v17 = (_OWORD *)(v15 + 16 * v6);
        if (v3 != v6 || v16 >= v17 + 1)
          *v16 = *v17;
        v18 = *(_QWORD *)(a2 + 56);
        v19 = sub_100008384(&qword_1007B6640);
        v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72);
        v21 = v20 * v3;
        v22 = v18 + v20 * v3;
        v23 = v20 * v6;
        v24 = v18 + v20 * v6;
        v25 = v24 + v20;
        if (v21 < v23 || v22 >= v25)
        {
          swift_arrayInitWithTakeFrontToBack(v22, v24, 1, v19);
        }
        else
        {
          v3 = v6;
          if (v21 == v23)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v22);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v14 < v9)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v14)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v28 = *v27;
    v29 = (-1 << v3) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10026CF58(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v7);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v31);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v31, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v15 < v10)
          goto LABEL_11;
LABEL_12:
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_OWORD *)(v16 + 16 * v4);
        v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v21 = v20 * v4;
        result = v19 + v20 * v4;
        v22 = v20 * v7;
        v23 = v19 + v20 * v7 + v20;
        if (v21 < v22 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v21 == v22)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v15 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v15)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v26 = *v25;
    v27 = (-1 << v4) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v5 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026D164(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        sub_10022E4A8(v10, v11);
        Data.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_100225AB4(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026D348(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v39 = (result + 1) & v11;
      v12 = *(_QWORD *)(v40 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v38(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 40 * a1;
            v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              v29 = *v28;
              v30 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v29;
              *(_OWORD *)(v27 + 16) = v30;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10026D5F4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v23);
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_10026D7AC(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

_QWORD *sub_10026D7C4(_QWORD *a1)
{
  return sub_100227B88(0, a1[2], 0, a1);
}

uint64_t sub_10026D7D8(unint64_t a1)
{
  return sub_100227C94(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_10026D7EC(_QWORD *a1)
{
  return sub_100227EB4(0, a1[2], 0, a1);
}

_QWORD *sub_10026D804(uint64_t a1)
{
  return sub_100228370(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_10026D818(_QWORD *a1)
{
  return sub_100228208(0, a1[2], 0, a1);
}

_QWORD *sub_10026D82C(_QWORD *a1)
{
  return sub_100228348(0, a1[2], 0, a1);
}

_QWORD *sub_10026D840(_QWORD *a1)
{
  return sub_10022849C(0, a1[2], 0, a1);
}

_QWORD *sub_10026D854(_QWORD *a1)
{
  return sub_1002284B0(0, a1[2], 0, a1);
}

uint64_t sub_10026D868(unint64_t a1)
{
  return sub_100228818(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10026D87C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_10026D8E4(uint64_t a1)
{
  return sub_100228958(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10026D8F8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10026D960;
  return v5(v2 + 32);
}

uint64_t sub_10026D960()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

char *sub_10026D9B0(void *a1, _QWORD *a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  objc_class *ObjectType;
  _BYTE v56[24];
  objc_super v57;

  v4 = v3;
  v50 = a1;
  v51 = a3;
  v49 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v5 = type metadata accessor for SFAirDropClient.Identifier(0);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  __chkstk_darwin(v5);
  v52 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100008384(&qword_1007B64B0);
  v7 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384((uint64_t *)&unk_1007B6220);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v47 - v14;
  *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType] = 0;
  v16 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate];
  *((_QWORD *)v16 + 1) = 0;
  swift_unknownObjectWeakInit(v16, 0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController] = 0;
  v17 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap];
  v18 = type metadata accessor for SDNearFieldTap(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload];
  v20 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService__nearbySharingInteraction];
  v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v15, 1, 1, v22);
  sub_100221F28((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_1007B6220);
  v24 = v4;
  Published.init(initialValue:)(v13, v10);
  sub_10000D0F0((uint64_t)v15, (uint64_t *)&unk_1007B6220);
  v25 = v49;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v9, v48);
  v23(&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction], 1, 1, v22);
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem] = 0;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem] = 0;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem] = 0;
  v26 = &v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  v27 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v29 = v50;
  v28 = v51;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue] = v50;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus] = v28;
  sub_100244418((uint64_t)v25, (uint64_t)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager]);
  v30 = (void *)objc_opt_self(NSNotificationCenter);
  v31 = v29;
  v32 = v28;
  v33 = objc_msgSend(v30, "defaultCenter");
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter] = v33;
  type metadata accessor for SFAirDropClient(0);
  v34 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for SFAirDropClient.Identifier.boop(_:), v54);
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropClient] = SFAirDropClient.__allocating_init(identifier:)(v34);
  if (objc_msgSend((id)objc_opt_self(SDRPNearFieldController), "isAvailable"))
  {
    v35 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
    v36 = (void *)static NSUserDefaults.airdrop.getter(v35);
    v37 = SFAirDropUserDefaults.nearFieldControllerEnabled.getter();

  }
  else
  {
    v37 = 0;
  }
  v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldControllerIsAvailable] = v37 & 1;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID] = &_swiftEmptyDictionarySingleton;
  v38 = type metadata accessor for SDAirDropAWDLSingleBandManager();
  v39 = swift_allocObject(v38, 24, 7);
  *(_QWORD *)(v39 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_singleBandManager] = v39;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v24[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel] = &_swiftEmptyDictionarySingleton;

  v57.receiver = v24;
  v57.super_class = ObjectType;
  v40 = (char *)objc_msgSendSuper2(&v57, "init");
  v41 = (uint64_t)&v40[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager];
  swift_beginAccess(&v40[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager], v56, 33, 0);
  v42 = *(_QWORD *)(v41 + 24);
  v43 = *(_QWORD *)(v41 + 32);
  sub_10026EEE8(v41, v42);
  v44 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v43 + 16);
  v45 = v40;
  v44(v40, &off_10071E820, v42, v43);
  swift_endAccess(v56);
  sub_10025362C();

  sub_10022E75C(v25);
  return v45;
}

BOOL sub_10026DE58(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  NSString v8;
  unsigned __int8 v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (int *)type metadata accessor for SDNearFieldTap(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_allocWithZone((Class)NSUserDefaults);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithSuiteName:", v6);

  if (v7)
  {
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "BOOLForKey:", v8);

    if ((v9 & 1) != 0)
      return 1;
  }
  if ((*(_BYTE *)(a1 + v2[12]) & 1) != 0)
    return 0;
  v11 = *(unsigned __int8 *)(a1 + v2[17]);
  if (v11 == 2)
    return 0;
  sub_100244384(a1, (uint64_t)v4, type metadata accessor for SDNearFieldTap);
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)&v4[v2[6] + 8];
    sub_1002443C8((uint64_t)v4, type metadata accessor for SDNearFieldTap);
    return v12 == 0;
  }
  else
  {
    sub_1002443C8((uint64_t)v4, type metadata accessor for SDNearFieldTap);
    return 1;
  }
}

void sub_10026DFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  NSObject *oslog;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldControllerIsAvailable) != 1)
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100221DF8(v3, (uint64_t)qword_1007B6140);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "SDAirDropNearFieldService nearFieldController is NOT available", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = oslog;
    goto LABEL_14;
  }
  v1 = v0;
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController))
  {
    if (qword_1007B3D18 != -1)
      swift_once(&qword_1007B3D18, sub_1002531A0);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100221DF8(v8, (uint64_t)qword_1007B6140);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SDAirDropNearFieldService nearFieldController is available", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = objc_msgSend(objc_allocWithZone((Class)SDRPNearFieldController), "initWithDispatchQueue:delegate:", *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue), v1);
    v7 = *(NSObject **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v13;
LABEL_14:

  }
}

uint64_t sub_10026E1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_unknownObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  sub_100225AB4(*(_QWORD *)(v7 + *(int *)(v1 + 24)), *(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10026E280()
{
  uint64_t v0;

  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  sub_100259718(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10026E2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B6478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026E2FC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10021FF9C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10026E33C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_10026E360()
{
  uint64_t v0;
  void *v1;
  int v2;
  id result;

  v1 = *(void **)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  result = objc_msgSend(v1, "stop");
  if (v2 == 1)
    return objc_msgSend(v1, "invalidate");
  return result;
}

uint64_t sub_10026E3B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_1007B6504);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_100264F08(a1, v4, v5, v6, v7);
}

uint64_t sub_10026E434(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1007B6524);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_1002655AC(a1, v4, v5, v7, v6);
}

uint64_t sub_10026E4AC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = (int *)type metadata accessor for SDNearFieldTap(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = v5;
  v30 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v6 = *(_QWORD *)(v30 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 8) & ~v7;
  v24 = v8;
  v25 = v6;
  v9 = *(_QWORD *)(v6 + 64);
  v28 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v10 = *(_QWORD *)(v28 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v27 = v3 | v7 | v11 | v16 | 7;
  v18 = (v12 + v13 + v16) & ~v16;
  v19 = (v17 + v16 + v18) & ~v16;
  v29 = v19 + v17;
  v20 = v0 + v4;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + v1[10] + 8));
  sub_100225AB4(*(_QWORD *)(v20 + v1[13]), *(_QWORD *)(v20 + v1[13] + 8));
  v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v22(v20 + v1[14], v14);
  v22(v20 + v1[15], v14);

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v0 + v24, v30);
  v22(v0 + v12, v14);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v12 + *(int *)(v28 + 20)));
  sub_100225AB4(*(_QWORD *)(v0 + v12 + *(int *)(v28 + 24)), *(_QWORD *)(v0 + v12 + *(int *)(v28 + 24) + 8));
  v22(v0 + v18, v14);
  v22(v0 + v19, v14);
  return swift_deallocObject(v0, v29, v27);
}

void sub_10026E6E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(type metadata accessor for SDNearFieldTap(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  sub_10025D6E8(v0 + v2, *(char **)(v0 + v3), v0 + v5, v0 + v8, v0 + ((v8 + v9 + v11) & ~v11), v0 + ((*(_QWORD *)(v10 + 64) + v11 + ((v8 + v9 + v11) & ~v11)) & ~v11));
}

uint64_t sub_10026E7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10026E834(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1007B653C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_10025E2B8(a1, v5, v6, v7, v8);
}

uint64_t sub_10026E8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10026E964(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = (uint64_t)v1 + v6;
  v11 = (uint64_t)v1 + ((*(_QWORD *)(v4 + 64) + v5 + v6) & ~v5);
  v12 = (_QWORD *)swift_task_alloc(dword_1007B6564);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10000D098;
  return sub_10025E7A0(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_10026EA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B6584);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1007B6580 + dword_1007B6580))(a1, v4);
}

uint64_t sub_10026EA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384((uint64_t *)&unk_1007B6220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026EACC()
{
  return sub_10026EB58(sub_1002673C0);
}

uint64_t sub_10026EADC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B65AC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1002680C8(a1, v4, v5, v6);
}

uint64_t sub_10026EB4C()
{
  return sub_10026EB58((uint64_t (*)(_QWORD, uint64_t))sub_100268318);
}

uint64_t sub_10026EB58(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_10026EB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10026EC10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B65C4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000D098;
  return sub_1002684A4(v3, v4);
}

uint64_t sub_10026EC7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007BE1EC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1007BE1E8 + dword_1007BE1E8))(a1, v4);
}

uint64_t sub_10026ECEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10026ED60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B65DC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10000D098;
  return sub_10026756C(v3, v4);
}

uint64_t sub_10026EDCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10026EDF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B6624);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_100267240(a1, v4, v5, v6);
}

uint64_t sub_10026EE60(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10026EE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B6634);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1007B6630 + dword_1007B6630))(a1, v4);
}

uint64_t sub_10026EEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10026EF10(uint64_t a1)
{
  uint64_t v1;

  return sub_10025EB94(a1, v1);
}

uint64_t sub_10026EF1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B665C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_100260018(a1, v4, v5, v6);
}

uint64_t sub_10026EF8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B666C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10025FE24(a1, v4, v5, v6);
}

uint64_t sub_10026EFF8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10026F038(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1007B667C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_100266C2C(a1, v4, v5, v7, v6);
}

uint64_t sub_10026F0B0()
{
  return sub_10026F374((void (*)(_QWORD))&_swift_unknownObjectRelease, 56);
}

uint64_t sub_10026F0C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1007B668C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D12C;
  return sub_100266364(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10026F140(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = qword_1007B3D98;
  swift_unknownObjectRetain(a1);
  v9 = a2;
  if (v8 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v10 = static AirDropActor.shared;
  v11 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v12 = (_QWORD *)swift_allocObject(&unk_10071EE10, 48, 7);
  v12[2] = v10;
  v12[3] = v11;
  v12[4] = a1;
  v12[5] = v9;
  swift_retain(v10);
  v13 = sub_100252D90((uint64_t)v6, (uint64_t)&unk_1007B6698, (uint64_t)v12, (uint64_t)&type metadata for () + 8);
  return swift_release(v13);
}

uint64_t sub_10026F284()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10026F2B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1007B6524);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D12C;
  return sub_1002655AC(a1, v4, v5, v7, v6);
}

uint64_t sub_10026F338()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10026F364()
{
  return sub_10026F374((void (*)(_QWORD))&_swift_errorRelease, 64);
}

uint64_t sub_10026F374(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16));
  a1(*(_QWORD *)(v2 + 32));

  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_10026F3C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1007B66B4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_10026494C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10026F458(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B66C4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_100260610(a1, v4, v5, v6);
}

uint64_t sub_10026F4C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B66D4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1002603C4(a1, v4, v5, v6);
}

uint64_t sub_10026F53C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B66EC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10025FA6C(a1, v4, v5, v6);
}

uint64_t sub_10026F5AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B66FC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10025F6C0(a1, v4, v5, v6);
}

uint64_t sub_10026F61C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B670C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10025F4F4(a1, v4, v5, v6);
}

uint64_t sub_10026F68C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B671C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10025EF50(a1, v4, v5, v6);
}

uint64_t sub_10026F6FC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10026F728(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B672C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10025ED10(a1, v4, v5, v6);
}

uint64_t sub_10026F7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B6740);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B6740);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10026F8DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_10071F010, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_100273030;
  v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10071F028;
  v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100008384((uint64_t *)&unk_1007B6410);
  v13 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_10026FAAC(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const char **v9;
  const char **v10;
  double v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  int64_t v34;
  const char **v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41[24];

  v40 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384(&qword_1007B6868);
  v5 = __chkstk_darwin(v4);
  v7 = (int64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (const char **)((char *)&v34 - v8);
  v10 = (const char **)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  *(_QWORD *)&v11 = swift_beginAccess(v10, v41, 1, 0).n128_u64[0];
  v12 = *v10;
  v14 = *v10 + 64;
  v13 = *v14;
  v35 = v10;
  v36 = v14;
  v15 = 1 << v12[32];
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v13;
  v37 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(v12, v11, v37 - 1);
  v18 = 0;
  v39 = (char *)&type metadata for () + 8;
  if (!v17)
    goto LABEL_8;
LABEL_6:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v21 = v20 | (v18 << 6);
  while (2)
  {
    v22 = *((_QWORD *)v12 + 7);
    v23 = (_QWORD *)(*((_QWORD *)v12 + 6) + 16 * v21);
    v24 = (const char *)v23[1];
    *v7 = *v23;
    v7[1] = v24;
    v25 = v22 + *(_QWORD *)(v38 + 72) * v21;
    v26 = sub_100008384((uint64_t *)&unk_1007B6870);
    sub_10027309C(v25, (uint64_t)v7 + *(int *)(v26 + 48));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v7, 0, 1, v26);
    swift_bridgeObjectRetain(v24);
    while (1)
    {
      sub_1002730E0((uint64_t)v7, (uint64_t)v9);
      v31 = sub_100008384((uint64_t *)&unk_1007B6870);
      if ((*(unsigned int (**)(const char **, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v9, 1, v31) == 1)
      {
        swift_release(v12);
        v32 = sub_10021E9A4((uint64_t)_swiftEmptyArrayStorage);
        v33 = *v35;
        *v35 = (const char *)v32;
        swift_bridgeObjectRelease(v33);
        return;
      }
      swift_bridgeObjectRelease(v9[1]);
      sub_100273128((uint64_t)v9 + *(int *)(v31 + 48), (uint64_t)v3);
      v19 = sub_100008384(&qword_1007B5B20);
      SFProgressContinuation.cancel(_:)(0, v19);
      Task.cancel()();
      sub_10027316C((uint64_t)v3);
      if (v17)
        goto LABEL_6;
LABEL_8:
      v27 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v27 < v37)
      {
        v28 = v36[v27];
        if (v28)
          goto LABEL_11;
        v29 = v18 + 2;
        ++v18;
        if (v27 + 1 < v37)
        {
          v28 = v36[v29];
          if (v28)
            goto LABEL_14;
          v18 = v27 + 1;
          if (v27 + 2 < v37)
          {
            v28 = v36[v27 + 2];
            if (v28)
            {
              v27 += 2;
              goto LABEL_11;
            }
            v29 = v27 + 3;
            v18 = v27 + 2;
            if (v27 + 3 < v37)
              break;
          }
        }
      }
LABEL_25:
      v30 = sub_100008384((uint64_t *)&unk_1007B6870);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v7, 1, 1, v30);
      v17 = 0;
    }
    v28 = v36[v29];
    if (v28)
    {
LABEL_14:
      v27 = v29;
LABEL_11:
      v17 = (v28 - 1) & v28;
      v21 = __clz(__rbit64(v28)) + (v27 << 6);
      v18 = v27;
      continue;
    }
    break;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v37)
    {
      v18 = v34;
      goto LABEL_25;
    }
    v28 = v36[v27];
    ++v29;
    if (v28)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_10026FE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD aBlock[5];
  uint64_t v52;

  v40 = a1;
  v41 = a2;
  v42 = a3;
  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v38 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v40, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a4, v9);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + v20 + 16) & ~v21;
  v23 = swift_allocObject(&unk_10071F1C8, v22 + v11, v17 | v21 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23 + v18, v16, v13);
  v24 = v38;
  v25 = v39;
  *(_QWORD *)(v23 + v19) = v39;
  v26 = (_QWORD *)(v23 + v20);
  v27 = v42;
  *v26 = v41;
  v26[1] = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v23 + v22, v12, v24);
  aBlock[4] = sub_100273844;
  v52 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10071F1E0;
  v28 = _Block_copy(aBlock);
  v29 = v25;
  v30 = swift_bridgeObjectRetain(v27);
  v31 = v43;
  static DispatchQoS.unspecified.getter(v30);
  v50 = _swiftEmptyArrayStorage;
  v32 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_100008384((uint64_t *)&unk_1007B6410);
  v34 = sub_100273050();
  v36 = v45;
  v35 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v33, v34, v46, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v36, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v48);
  return swift_release(v52);
}

uint64_t sub_10027014C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Strong;
  void *v19;
  NSString v20;
  NSURL *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  NSString v27;
  _QWORD v28[2];

  v28[1] = a4;
  v6 = type metadata accessor for SFAirDropReceive.AcceptContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    v16 = sub_100008384(&qword_1007B68D0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, &v13[*(int *)(v16 + 48)], v6);
    Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate, v17);
    if (Strong)
    {
      v19 = (void *)Strong;
      v20 = String._bridgeToObjectiveC()();
      URL._bridgeToObjectiveC()(v21);
      v23 = v22;
      objc_msgSend(v19, "alertManager:acceptingTransferWithRecordID:withDestinationURL:shouldExtractMediaFromPhotosBundlesForRecordID:", a2, v20, v22, SFAirDropReceive.AcceptContext.shouldExtractMedia.getter() & 1);
      swift_unknownObjectRelease(v19);

    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v24 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v13, v24);
  }
  if (v14 == enum case for SFAirDropReceive.AskResponse.decline(_:))
  {
    result = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate, v15);
    if (!result)
      return result;
    v26 = (void *)result;
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "alertManager:cancelingTransferWithRecordID:withFailureReason:", a2, v27, 0);
    goto LABEL_14;
  }
  if (v14 == enum case for SFAirDropReceive.AskResponse.error(_:))
  {
    result = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate, v15);
    if (!result)
      return result;
    v26 = (void *)result;
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "alertManager:cancelingTransferWithRecordID:withFailureReason:", a2, v27, 1);
    goto LABEL_14;
  }
  if (v14 != enum case for SFAirDropReceive.AskResponse.mixedTypes(_:))
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
    __break(1u);
    return result;
  }
  result = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate, v15);
  if (result)
  {
    v26 = (void *)result;
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "alertManager:cancelingTransferWithRecordID:withFailureReason:", a2, v27, 2);
LABEL_14:

    return swift_unknownObjectRelease(v26);
  }
  return result;
}

uint64_t sub_10027043C@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  NSDictionary v7;
  uint64_t v8;

  if (a2)
  {
    if (a3)
    {
      v5 = result;
      swift_bridgeObjectRetain(a2);
      v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      SFAirDropReceive.AskRequest.init(recordID:initialInfo:)(v5, a2, v7.super.isa, a4);
      v8 = type metadata accessor for SFAirDropReceive.AskRequest(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 0, 1, v8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10027079C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_queue];
  v14 = (_QWORD *)swift_allocObject(&unk_10071F150, 48, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = v3;
  v14[5] = a3;
  aBlock[4] = sub_1002735F4;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10071F168;
  v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v3);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100008384((uint64_t *)&unk_1007B6410);
  v18 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

Class sub_100270998(uint64_t a1, void *a2, char *a3, objc_class *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  Class result;
  uint64_t (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, char *, uint64_t);
  void (*v46)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  uint64_t (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  Class v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(char *, uint64_t);
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  void (*v73)(char *, char *);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  objc_class *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118[3];

  v113 = a4;
  v114 = a3;
  v110 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v102 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v7);
  v99 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for SFAirDrop.Progress(0);
  v95 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v96 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B5B20);
  v100 = *(_QWORD *)(v10 - 8);
  v101 = v10;
  __chkstk_darwin(v10);
  v103 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008384(&qword_1007BDAA0);
  v13 = __chkstk_darwin(v12);
  v98 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v107 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v93 - v15);
  v16 = sub_100008384((uint64_t *)&unk_1007B68A8);
  __chkstk_darwin(v16);
  v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v22 = __chkstk_darwin(v19);
  v105 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v94 = (char *)&v93 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v93 - v25;
  if (qword_1007B3D38 != -1)
    swift_once(&qword_1007B3D38, sub_10026F7E4);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100221DF8(v27, (uint64_t)qword_1007B6740);
  v29 = swift_bridgeObjectRetain_n(a2, 2);
  v106 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, v31);
  v111 = a1;
  if (v32)
  {
    v104 = v20;
    v112 = v26;
    v109 = v19;
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v115 = v34;
    *(_DWORD *)v33 = 136315138;
    v35 = (unint64_t)a2;
    if (!a2)
    {
      v117 = 0;
      v118[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v118[0]);
      a1 = 0xD000000000000015;
      v35 = 0x8000000100612DF0;
    }
    swift_bridgeObjectRetain(a2);
    v117 = sub_100228BD8(a1, v35, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v33 + 4);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Incoming transfer %s from senderNode", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v19 = v109;
    a1 = v111;
    v26 = v112;
    v20 = v104;
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

  }
  sub_10027043C(a1, a2, (uint64_t)v113, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    return (Class)sub_10000D0F0((uint64_t)v18, (uint64_t *)&unk_1007B68A8);
  v37 = *(uint64_t (**)(char *, char *, uint64_t))(v20 + 32);
  result = (Class)v37(v26, v18, v19);
  if (!a2)
  {
    __break(1u);
    goto LABEL_25;
  }
  v38 = &v114[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations];
  swift_beginAccess(&v114[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations], &v117, 32, 0);
  v39 = *(_QWORD *)v38;
  if (*(_QWORD *)(*(_QWORD *)v38 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v40 = sub_10045C200(a1, (uint64_t)a2);
    v41 = v20;
    if ((v42 & 1) != 0)
    {
      v43 = *(_QWORD *)(v39 + 56);
      v45 = v107;
      v44 = v108;
      sub_10027309C(v43 + *(_QWORD *)(v108 + 72) * v40, (uint64_t)v107);
      v46 = *(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v44 + 56);
      v47 = v45;
      v48 = 0;
    }
    else
    {
      v45 = v107;
      v44 = v108;
      v46 = *(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v108 + 56);
      v47 = v107;
      v48 = 1;
    }
    v49 = v110;
    v93 = v46;
    v46((void (*)(_QWORD, _QWORD, _QWORD))v47, v48, 1, v110);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v41 = v20;
    v45 = v107;
    v44 = v108;
    v49 = v110;
    v93 = *(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v108 + 56);
    v93((void (*)(_QWORD, _QWORD, _QWORD))v107, 1, 1, v110);
  }
  swift_endAccess(&v117);
  v50 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v44 + 48))(v45, 1, v49);
  sub_10000D0F0((uint64_t)v45, &qword_1007BDAA0);
  if (v50 == 1)
  {
    v109 = v19;
    result = v113;
    if (v113)
    {
      v112 = v26;
      result = Dictionary._bridgeToObjectiveC()().super.isa;
      v51 = kSFOperationReceiverClassroomDestination;
      if (kSFOperationReceiverClassroomDestination)
      {
        v52 = result;
        v53 = sub_100221EDC(0, (unint64_t *)&unk_1007B5240, NSURL_ptr);
        NSDictionary.sf_value<A>(_:as:file:line:)(&v117, v51, v53, 0xD000000000000067, 0x8000000100613240, 93, v53);
        v108 = v117;
        v67 = v96;
        v68 = v97;
        (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v96, enum case for SFAirDrop.Progress.notStarted(_:), v97);
        v69 = sub_100008384((uint64_t *)&unk_1007B6820);
        SFProgressContinuation.init(_:initialProgress:file:line:)(0x746E6576456B7361, 0xE800000000000000, v67, 0xD000000000000067, 0x8000000100613240, 97, v68, v69);
        v70 = type metadata accessor for TaskPriority(0);
        v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56);
        v113 = v52;
        v72 = (uint64_t)v99;
        v71(v99, 1, 1, v70);
        v104 = v41;
        v73 = *(void (**)(char *, char *))(v41 + 16);
        v74 = v94;
        v107 = v37;
        v75 = v109;
        v73(v94, v112);
        v76 = *(unsigned __int8 *)(v41 + 80);
        v77 = (v76 + 24) & ~v76;
        v78 = (v21 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
        v79 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8;
        v80 = swift_allocObject(&unk_10071F1A0, v79 + 8, v76 | 7);
        v81 = v114;
        *(_QWORD *)(v80 + 16) = v114;
        v107((char *)(v80 + v77), v74, v75);
        v82 = (uint64_t *)(v80 + v78);
        v83 = v111;
        *v82 = v111;
        v82[1] = (uint64_t)a2;
        v84 = (void *)v108;
        *(_QWORD *)(v80 + v79) = v108;
        swift_bridgeObjectRetain(a2);
        v85 = v81;
        v114 = v84;
        v86 = static Task<>.noThrow(priority:operation:)(v72, &unk_1007B68C0, v80, (char *)&type metadata for () + 8);
        swift_release(v80);
        sub_10000D0F0(v72, &qword_1007B68A0);
        v87 = v100;
        v88 = v101;
        v89 = (uint64_t)v102;
        v90 = v103;
        (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v102, v103, v101);
        v91 = v110;
        *(_QWORD *)(v89 + *(int *)(v110 + 20)) = v86;
        v92 = v98;
        sub_10027309C(v89, v98);
        v93((void (*)(_QWORD, _QWORD, _QWORD))v92, 0, 1, v91);
        swift_beginAccess(v38, &v117, 33, 0);
        swift_bridgeObjectRetain(a2);
        swift_retain(v86);
        sub_100394A24(v92, v83, (uint64_t)a2);
        swift_endAccess(&v117);

        swift_release(v86);
        sub_10027316C(v89);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v88);
        return (Class)(*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v112, v109);
      }
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  v54 = v105;
  v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 16))(v105, v26, v19);
  v56 = v26;
  v57 = Logger.logObject.getter(v55);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v112 = v56;
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    v117 = v60;
    *(_DWORD *)v59 = 136315138;
    v61 = sub_100220D78(&qword_1007B68C8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest);
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v19, v61);
    v64 = v63;
    v115 = sub_100228BD8(v62, v63, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v59 + 4);
    swift_bridgeObjectRelease(v64);
    v65 = *(void (**)(char *, uint64_t))(v41 + 8);
    v65(v54, v19);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Repeated ask requests for the same transfer. Dropping {askInfo: %s}", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

    return (Class)((uint64_t (*)(char *, uint64_t))v65)(v112, v19);
  }
  else
  {

    v66 = *(void (**)(char *, uint64_t))(v41 + 8);
    v66(v54, v19);
    return (Class)((uint64_t (*)(char *, uint64_t))v66)(v56, v19);
  }
}

uint64_t sub_10027143C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  v7 = type metadata accessor for URL(0);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  v6[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002714CC, 0, 0);
}

void sub_1002714CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[5];
  if (v1)
  {
    v2 = (uint64_t **)swift_task_alloc(dword_1007C090C);
    v0[13] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = (uint64_t *)sub_100271540;
    sub_100429FBC(v0[12], v0[2], v0[3], v0[4], v1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100271540()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100271594, 0, 0);
}

uint64_t sub_100271594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 48));
  sub_10026FE48(v1, v8, v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100271650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _BYTE v25[24];

  v6 = sub_100008384(&qword_1007BDAA0);
  __chkstk_darwin(v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a3)
  {
    v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
    swift_beginAccess(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations, v25, 32, 0);
    v14 = *v13;
    if (*(_QWORD *)(v14 + 16))
    {
      swift_bridgeObjectRetain(a3);
      v15 = sub_10045C200(a2, a3);
      if ((v16 & 1) != 0)
      {
        sub_10027309C(*(_QWORD *)(v14 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8);
        v17 = 0;
      }
      else
      {
        v17 = 1;
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v17, 1, v9);
      swift_bridgeObjectRelease(a3);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
      {
        sub_100273128((uint64_t)v8, (uint64_t)v12);
        swift_endAccess(v25);
        v23 = sub_100008384(&qword_1007B5B20);
        SFProgressContinuation.cancel(_:)(0, v23);
        Task.cancel()();
        sub_10027316C((uint64_t)v12);
        return;
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    sub_10000D0F0((uint64_t)v8, &qword_1007BDAA0);
    swift_endAccess(v25);
    if (qword_1007B3D38 != -1)
      swift_once(&qword_1007B3D38, sub_10026F7E4);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100221DF8(v18, (uint64_t)qword_1007B6740);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received progress event after continuation had been cleared. Dropping.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_100271910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  v6 = sub_100008384(&qword_1007B5B20);
  v32 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100008384(&qword_1007BDAA0);
  __chkstk_darwin(v9);
  v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a3)
  {
    v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
    swift_beginAccess(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations, v33, 32, 0);
    v17 = *v16;
    if (*(_QWORD *)(v17 + 16))
    {
      swift_bridgeObjectRetain(a3);
      v18 = sub_10045C200(a2, a3);
      if ((v19 & 1) != 0)
      {
        sub_10027309C(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v13 + 72) * v18, (uint64_t)v11);
        v20 = 0;
      }
      else
      {
        v20 = 1;
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v20, 1, v12);
      swift_bridgeObjectRelease(a3);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        sub_100273128((uint64_t)v11, (uint64_t)v15);
        swift_endAccess(v33);
        v26 = v32;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 16))(v8, v15, v6);
        v27 = type metadata accessor for SFAirDropReceive.Failure(0);
        v28 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        v29 = swift_allocError(v27, v28, 0, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v30, enum case for SFAirDropReceive.Failure.senderCancelled(_:), v27);
        SFProgressContinuation.fail(with:)(v29, v6);
        (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v8, v6);
        swift_errorRelease(v29);
        v31 = *(_QWORD *)&v15[*(int *)(v12 + 20)];
        swift_retain(v31);
        Task.cancel()();
        swift_release(v31);
        sub_10027316C((uint64_t)v15);
        return;
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }
    sub_10000D0F0((uint64_t)v11, &qword_1007BDAA0);
    swift_endAccess(v33);
    if (qword_1007B3D38 != -1)
      swift_once(&qword_1007B3D38, sub_10026F7E4);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100221DF8(v21, (uint64_t)qword_1007B6740);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Receive error event after continuation has been cleared. Dropping.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100271CAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;

  v12 = a4;
  if (!a3)
  {
    v14 = 0;
    v16 = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16 = v15;
  if (v12)
LABEL_3:
    v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
LABEL_4:
  v17 = a1;
  sub_1002731E8(v14, v16, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v12);

  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_100271D78(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t aBlock;
  _QWORD v37[4];
  _QWORD *v38;

  v4 = v3;
  v31 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D38 != -1)
    swift_once(&qword_1007B3D38, sub_10026F7E4);
  v13 = type metadata accessor for Logger(0);
  sub_100221DF8(v13, (uint64_t)qword_1007B6740);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v29 = v3;
    v30 = v7;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = a1;
    v19 = (_QWORD *)swift_slowAlloc(32, -1);
    v35 = v19;
    *(_DWORD *)v17 = 136315138;
    v28 = v18;
    v20 = a2;
    if (!a2)
    {
      aBlock = 0;
      v37[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v37[0]);
      v20 = 0x8000000100612DF0;
      v18 = 0xD000000000000015;
    }
    swift_bridgeObjectRetain(a2);
    aBlock = sub_100228BD8(v18, v20, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v37, v17 + 4);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "finishedEvent {recordID: %s}", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v4 = v29;
    v7 = v30;
    a1 = v28;
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

  }
  v21 = (_QWORD *)swift_allocObject(&unk_10071F060, 48, 7);
  v21[2] = v4;
  v21[3] = a1;
  v22 = v31;
  v21[4] = a2;
  v21[5] = v22;
  v37[3] = sub_1002731DC;
  v38 = v21;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v37[0] = 1107296256;
  v37[1] = sub_10025BBB4;
  v37[2] = &unk_10071F078;
  v23 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v4);
  v35 = _swiftEmptyArrayStorage;
  v24 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100008384((uint64_t *)&unk_1007B6410);
  v26 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v7, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  return swift_release(v38);
}

void sub_100272120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSDictionary v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v56 = (char *)&v51 - v13;
  v58 = type metadata accessor for NSFastEnumerationIterator(0);
  v54 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v59 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008384(&qword_1007BDAA0);
  __chkstk_darwin(v15);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  v18 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
    goto LABEL_34;
  v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations, &v62, 32, 0);
  v21 = *v20;
  if (!*(_QWORD *)(v21 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, v57);
LABEL_8:
    sub_10000D0F0((uint64_t)v17, &qword_1007BDAA0);
    swift_endAccess(&v62);
    if (qword_1007B3D38 != -1)
      swift_once(&qword_1007B3D38, sub_10026F7E4);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100221DF8(v26, (uint64_t)qword_1007B6740);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received finish after continuation had been cleared. Dropping.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return;
  }
  swift_bridgeObjectRetain(a3);
  v22 = sub_10045C200(a2, a3);
  if ((v23 & 1) != 0)
  {
    sub_10027309C(*(_QWORD *)(v21 + 56) + *(_QWORD *)(v18 + 72) * v22, (uint64_t)v17);
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v25 = v57;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v24, 1, v57);
  swift_bridgeObjectRelease(a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v25) == 1)
    goto LABEL_8;
  sub_100273128((uint64_t)v17, v55);
  swift_endAccess(&v62);
  if (!a4)
    goto LABEL_35;
  v31.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v32 = kSFOperationItemsKey;
  if (!kSFOperationItemsKey)
  {
LABEL_36:
    __break(1u);
    return;
  }
  isa = v31.super.isa;
  v34 = sub_100221EDC(0, &qword_1007B6880, NSArray_ptr);
  NSDictionary.sf_value<A>(_:as:file:line:)(&v62, v32, v34, 0xD000000000000067, 0x8000000100613240, 142, v34);

  v35 = (void *)v62;
  v36 = (uint64_t)objc_msgSend((id)v62, "count");
  v64 = _swiftEmptyArrayStorage;
  sub_100229810(0, v36 & ~(v36 >> 63), 0);
  v37 = v35;
  NSArray.makeIterator()();

  if (v36 < 0)
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v53 = v37;
  v52 = (unint64_t)"eClassroomHandler";
  if (v36)
  {
    v38 = sub_100220D78(&qword_1007B6888, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
    do
    {
      dispatch thunk of IteratorProtocol.next()(v58, v38);
      if (!v63)
        goto LABEL_33;
      tryCast<A>(_:as:description:file:line:)(v12, &v62, v8, 0, 0, 0xD000000000000067, 0x8000000100613240, 143, v8);
      sub_10022E75C(&v62);
      v39 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
      {
        sub_100229810(0, v39[2] + 1, 1);
        v39 = v64;
      }
      v41 = v39[2];
      v40 = v39[3];
      if (v41 >= v40 >> 1)
      {
        sub_100229810(v40 > 1, v41 + 1, 1);
        v39 = v64;
      }
      v39[2] = v41 + 1;
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v9 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v41, v12, v8);
      v64 = v39;
    }
    while (--v36);
  }
  v42 = sub_100220D78(&qword_1007B6888, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(v58, v42);
  v44 = v55;
  v43 = v56;
  if (v61)
  {
    v45 = v52 | 0x8000000000000000;
    do
    {
      sub_10022138C(&v60, &v62);
      tryCast<A>(_:as:description:file:line:)(v43, &v62, v8, 0, 0, 0xD000000000000067, v45, 143, v8);
      sub_10022E75C(&v62);
      v46 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
      {
        sub_100229810(0, v46[2] + 1, 1);
        v46 = v64;
      }
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_100229810(v47 > 1, v48 + 1, 1);
        v46 = v64;
      }
      v46[2] = v48 + 1;
      v43 = v56;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v46+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v48, v56, v8);
      v64 = v46;
      dispatch thunk of IteratorProtocol.next()(v58, v42);
    }
    while (v61);
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v58);
  sub_10000D0F0((uint64_t)&v60, (uint64_t *)&unk_1007B6890);
  v49 = v64;
  *(_QWORD *)&v62 = v64;
  v50 = sub_100008384(&qword_1007B5B20);
  SFProgressContinuation.finish(with:)(&v62, v50);

  sub_10027316C(v44);
  swift_release(v49);
}

uint64_t sub_100272A10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = a4;
  if (!a3)
  {
    v8 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v10 = v9;
  if (v6)
LABEL_3:
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
LABEL_4:
  v11 = a1;
  a5(v8, v10, v6);

  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(v10);
}

uint64_t type metadata accessor for SDAirDropReceiveClassroomHandler()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler);
}

uint64_t *sub_100272B70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100008384(&qword_1007B5B20);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_100272BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B5B20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100272C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100008384(&qword_1007B5B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_100272CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100008384(&qword_1007B5B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_100272D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100008384(&qword_1007B5B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100272D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100008384(&qword_1007B5B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100272DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100272DEC);
}

uint64_t sub_100272DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100008384(&qword_1007B5B20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100272E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100272E78);
}

uint64_t sub_100272E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008384(&qword_1007B5B20);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(uint64_t a1)
{
  uint64_t result;

  result = qword_1007B6808;
  if (!qword_1007B6808)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropReceiveClassroomHandler.Continuation);
  return result;
}

void sub_100272F30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100272FA4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100272FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1007B6818)
  {
    v2 = type metadata accessor for SFAirDrop.Progress(255);
    v3 = sub_10021FF9C((uint64_t *)&unk_1007B6820);
    v4 = type metadata accessor for SFProgressContinuation(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1007B6818);
  }
}

uint64_t sub_10027300C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100273030()
{
  uint64_t v0;

  sub_10026FAAC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100273038(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100273048(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100273050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B6860;
  if (!qword_1007B6860)
  {
    v1 = sub_10021FF9C((uint64_t *)&unk_1007B6410);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1007B6860);
  }
  return result;
}

uint64_t sub_10027309C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002730E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B6868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100273128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027316C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002731A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1002731DC()
{
  uint64_t *v0;

  sub_100272120(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1002731E8(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t aBlock;
  _QWORD v45[4];
  _QWORD *v46;

  v38 = a4;
  v39 = a5;
  v37 = a3;
  v8 = v6;
  v42 = a1;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v14 - 8);
  v41 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D38 != -1)
    swift_once(&qword_1007B3D38, sub_10026F7E4);
  v17 = type metadata accessor for Logger(0);
  sub_100221DF8(v17, (uint64_t)qword_1007B6740);
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v33 = a6;
    v34 = v6;
    v35 = v11;
    v36 = v10;
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = (_QWORD *)swift_slowAlloc(32, -1);
    v43 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = v42;
    v24 = a2;
    if (!a2)
    {
      aBlock = 0;
      v45[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v45[0]);
      v24 = 0x8000000100612DF0;
      v23 = 0xD000000000000015;
    }
    swift_bridgeObjectRetain(a2);
    aBlock = sub_100228BD8(v23, v24, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v45, v21 + 4);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(a2, 2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v37, v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v11 = v35;
    v10 = v36;
    a6 = v33;
    v8 = v34;
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

  }
  v25 = (_QWORD *)swift_allocObject(v38, 40, 7);
  v26 = v42;
  v25[2] = v8;
  v25[3] = v26;
  v25[4] = a2;
  v45[3] = v39;
  v46 = v25;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v45[0] = 1107296256;
  v45[1] = sub_10025BBB4;
  v45[2] = a6;
  v27 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v8);
  v43 = _swiftEmptyArrayStorage;
  v28 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_100008384((uint64_t *)&unk_1007B6410);
  v30 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v29, v30, v10, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v41);
  return swift_release(v46);
}

void sub_100273578()
{
  uint64_t *v0;

  sub_100271910(v0[2], v0[3], v0[4]);
}

uint64_t sub_100273588()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002735B4()
{
  uint64_t *v0;

  sub_100271650(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002735C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

Class sub_1002735F4()
{
  uint64_t v0;

  return sub_100270998(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(char **)(v0 + 32), *(objc_class **)(v0 + 40));
}

uint64_t sub_100273600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1002736A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for SFAirDropReceive.AskRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = v1 + v5;
  v10 = (uint64_t *)(v1 + v6);
  v11 = *v10;
  v12 = v10[1];
  v13 = *(_QWORD *)(v1 + v7);
  v14 = (_QWORD *)swift_task_alloc(dword_1007B68BC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10000D12C;
  return sub_10027143C(a1, v8, v9, v11, v12, v13);
}

uint64_t sub_10027375C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + v6 + 16) & ~v9;
  v13 = v10 + *(_QWORD *)(v8 + 64);
  v11 = v3 | v9 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  return swift_deallocObject(v0, v13, v11);
}

uint64_t sub_100273844()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for SFAirDropReceive.AskResponse(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for URL(0);
  return sub_10027014C(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1002738EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002741DC();
  v10 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1002742CC;
  v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10071F298;
  v11 = _Block_copy(aBlock);
  v12 = v19;
  swift_retain(v1);
  v13 = swift_release(v12);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_100274284();
  v15 = sub_100008384((uint64_t *)&unk_1007B6410);
  v16 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_100273AA0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1002741DC();
  *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v6 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (v1[2])
  {
    if (v1[3])
      goto LABEL_4;
  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)UINotificationFeedbackGenerator), "init");
    v8 = (void *)v1[2];
    v1[2] = v7;

    if (v1[3])
    {
LABEL_4:
      if (v1[4])
        return;
LABEL_8:
      v11 = objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "init");
      v12 = (void *)v1[4];
      v1[4] = v11;

      return;
    }
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "init");
  v10 = (void *)v1[3];
  v1[3] = v9;

  if (!v1[4])
    goto LABEL_8;
}

uint64_t sub_100273BF4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002741DC();
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = swift_allocObject(&unk_10071F230, 24, 7);
  swift_weakInit(v13 + 16, v2);
  v14 = swift_allocObject(&unk_10071F258, 25, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_BYTE *)(v14 + 24) = a1;
  aBlock[4] = sub_100274260;
  v22 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10071F270;
  v15 = _Block_copy(aBlock);
  v16 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100274284();
  v18 = sub_100008384((uint64_t *)&unk_1007B6410);
  v19 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_100273DE0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = (_QWORD *)Strong;
    if (qword_1007B3E40 != -1)
      swift_once(&qword_1007B3E40, sub_1002E9E0C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100221DF8(v6, (uint64_t)qword_1007D8190);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v25 = v11;
      *(_DWORD *)v10 = 136315138;
      LOBYTE(v24) = a2;
      v12 = String.init<A>(describing:)(&v24, &type metadata for SDAirDropHapticState);
      v14 = v13;
      v24 = sub_100228BD8(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Firing haptics for %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_100273AA0();
    v15 = v5[2];
    if (v15 && v5[3] && v5[4])
      __asm { BR              X12 }
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SDAirDropiOSHapticsManager's FeedbackGenerators are nil when trying to fire haptics", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
      swift_release(v5);

    }
    else
    {

      swift_release(v5);
    }
  }
  else
  {
    if (qword_1007B3E40 != -1)
      swift_once(&qword_1007B3E40, sub_1002E9E0C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100221DF8(v19, (uint64_t)qword_1007D8190);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "SDAirDropiOSHapticsManager is nil when trying to fire haptics", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
}

uint64_t sub_100274184()
{
  id *v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SDAirDropiOSHapticsManager()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary26SDAirDropiOSHapticsManager);
}

unint64_t sub_1002741DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B42D0;
  if (!qword_1007B42D0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1007B42D0);
  }
  return result;
}

uint64_t sub_100274218()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10027423C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100274260()
{
  uint64_t v0;

  sub_100273DE0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10027426C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10027427C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100274284()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B6850;
  if (!qword_1007B6850)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1007B6850);
  }
  return result;
}

uint64_t sub_1002742D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v6 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v2[16] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[17] = v7;
  v2[18] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B6C20);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[21] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v11);
  v2[23] = swift_task_alloc(v11);
  v12 = sub_100008384(&qword_1007B6BF0);
  v2[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v13 = static AirDropActor.shared;
  v2[25] = static AirDropActor.shared;
  return swift_task_switch(sub_100274424, v13, 0);
}

uint64_t sub_100274424()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[19];
  v2 = v0[11] + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess(v2, v0 + 7, 0, 0);
  sub_100244418(v2, (uint64_t)(v0 + 2));
  v3 = v0[5];
  v4 = v0[6];
  v5 = sub_10023A834(v0 + 2, v3);
  CurrentValueSubject.value.getter(v5);
  v6 = sub_100008384(&qword_1007B5B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v7 = (_QWORD *)swift_task_alloc(dword_1007C1CD4);
  v0[26] = v7;
  *v7 = v0;
  v7[1] = sub_10027452C;
  return sub_10047B9A8(v0[24], v0[23], v0[19], v3, v4);
}

uint64_t sub_10027452C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();

  v2 = *v1;
  v3 = (*v1)[26];
  (*v1)[27] = v0;
  swift_task_dealloc(v3);
  v4 = v2[25];
  v5 = v2[23];
  v6 = v2[20];
  v7 = v2[21];
  sub_10000D0F0(v2[19], &qword_1007B6C20);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (v0)
  {
    v8(v5, v6);
    v9 = sub_100274C18;
  }
  else
  {
    v2[28] = (uint64_t)v8;
    v8(v5, v6);
    v9 = sub_1002745DC;
  }
  return swift_task_switch(v9, v4, 0);
}

uint64_t sub_1002745DC()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (void (*)(uint64_t, uint64_t))v0[28];
  v2 = v0[24];
  v3 = v0[22];
  v4 = v0[20];
  v6 = v0[17];
  v5 = v0[18];
  v7 = v0[16];
  sub_10022E75C(v0 + 2);
  v8 = sub_100008384(&qword_1007B5280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v2, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:), v7);
  sub_10053D3FC(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  return swift_task_switch(sub_1002746B4, 0, 0);
}

uint64_t sub_1002746B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[24];
  v2 = swift_task_alloc(32);
  v0[29] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = swift_task_alloc(32);
  v0[30] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[31] = v4;
  *v4 = v0;
  v4[1] = sub_10027475C;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0[15], &unk_1007B6C28, v2, sub_1002786E0, v3, 0, 0, v0[12]);
}

uint64_t sub_10027475C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100274A74;
    v5 = 0;
  }
  else
  {
    v7 = v2[29];
    v6 = v2[30];
    v8 = v2[25];
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v4 = sub_1002747D8;
    v5 = v8;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1002747D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v3);
  v5 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v6 = dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v3, v5);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v1, v3);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 120);
  if ((v6 & 1) != 0)
  {
    v10 = *(_QWORD *)(v0 + 96);
    v11 = type metadata accessor for CancellationError(0);
    v12 = sub_100220D78(&qword_1007B6C38, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
    v13 = swift_allocError(v11, v12, 0, 0);
    v14 = CancellationError.init()();
    swift_willThrow(v14);
    v7(v9, v10);
    v15 = sub_10000D0F0(v8, &qword_1007B6BF0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Classroom AskRequest declined", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    swift_errorRelease(v13);

    v19 = (unsigned int *)&enum case for SFAirDropReceive.AskResponse.decline(_:);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 80);
    sub_100008384(&qword_1007B68D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v9, v20);
    SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)(0, 0, 0xF000000000000000);
    v7(v9, v20);
    sub_10000D0F0(v8, &qword_1007B6BF0);
    v19 = (unsigned int *)&enum case for SFAirDropReceive.AskResponse.accept(_:);
  }
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 192);
  v25 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 152);
  v29 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 120);
  v30 = *(_QWORD *)(v0 + 80);
  v31 = *v19;
  v32 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100274A74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[29];
  v2 = v0[25];
  swift_task_dealloc(v0[30]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100274ABC, v2, 0);
}

uint64_t sub_100274ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_10000D0F0(*(_QWORD *)(v0 + 192), &qword_1007B6BF0);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Classroom AskRequest declined", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  swift_errorRelease(v2);

  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = enum case for SFAirDropReceive.AskResponse.decline(_:);
  v15 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100274C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_10022E75C((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 216);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Classroom AskRequest declined", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  swift_errorRelease(v2);

  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = enum case for SFAirDropReceive.AskResponse.decline(_:);
  v15 = type metadata accessor for SFAirDropReceive.AskResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100274D6C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v6 + 368) = a5;
  *(_QWORD *)(v6 + 376) = v5;
  *(_QWORD *)(v6 + 352) = a3;
  *(_QWORD *)(v6 + 360) = a4;
  *(_BYTE *)(v6 + 737) = a2;
  *(_QWORD *)(v6 + 344) = a1;
  v7 = type metadata accessor for SFAirDropReceive.Failure(0);
  *(_QWORD *)(v6 + 384) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 392) = v8;
  *(_QWORD *)(v6 + 400) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384(&qword_1007B6BE8);
  *(_QWORD *)(v6 + 408) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 416) = v10;
  *(_QWORD *)(v6 + 424) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  *(_QWORD *)(v6 + 432) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 440) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 448) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 456) = swift_task_alloc(v13);
  v14 = sub_100008384(&qword_1007B6BF0);
  *(_QWORD *)(v6 + 464) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  *(_QWORD *)(v6 + 472) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v6 + 480) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 488) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 496) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 504) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 512) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 520) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 528) = swift_task_alloc(v17);
  *(_QWORD *)(v6 + 536) = swift_task_alloc(v17);
  v18 = type metadata accessor for SFAirDrop.TransferType(0);
  *(_QWORD *)(v6 + 544) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v6 + 552) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 560) = swift_task_alloc(v20);
  *(_QWORD *)(v6 + 568) = swift_task_alloc(v20);
  v21 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  *(_QWORD *)(v6 + 576) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v6 + 584) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 592) = swift_task_alloc(v23);
  *(_QWORD *)(v6 + 600) = swift_task_alloc(v23);
  v24 = type metadata accessor for SFAirDropReceive.Transfer(0);
  *(_QWORD *)(v6 + 608) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v6 + 616) = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 624) = swift_task_alloc(v26);
  *(_QWORD *)(v6 + 632) = swift_task_alloc(v26);
  *(_QWORD *)(v6 + 640) = swift_task_alloc(v26);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v27 = static AirDropActor.shared;
  *(_QWORD *)(v6 + 648) = static AirDropActor.shared;
  return swift_task_switch(sub_100274FBC, v27, 0);
}

uint64_t sub_100274FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  __n128 v48;
  void (*v49)(uint64_t, uint64_t, __n128);
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t DynamicType;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  const char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  __n128 v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  void (*v96)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  double v107;
  int v108;
  __n128 v109;
  uint64_t *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, __n128);
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  const char *v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  void (*v147)(uint64_t, uint64_t, __n128);
  uint64_t v148;
  uint64_t v149;
  char v150;
  __n128 v151;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t);
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t (*v189)(uint64_t, uint64_t);
  void (*v190)(uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  os_log_type_t typea[8];
  void (*type)(uint64_t, uint64_t, uint64_t);
  os_log_type_t typeb;
  os_log_type_t typec[8];
  uint64_t v201[2];

  v181 = v1 + 328;
  v186 = v1 + 320;
  v2 = *(_QWORD *)(v1 + 640);
  v3 = *(_QWORD *)(v1 + 616);
  v4 = *(_QWORD *)(v1 + 608);
  v5 = *(_QWORD *)(v1 + 600);
  v6 = *(_QWORD *)(v1 + 584);
  v7 = *(_QWORD *)(v1 + 576);
  v8 = *(_QWORD *)(v1 + 568);
  v9 = *(_QWORD *)(v1 + 552);
  *(_QWORD *)typea = *(_QWORD *)(v1 + 544);
  v10 = CurrentValueSubject.value.getter(a1);
  SFAirDropReceive.Transfer.askRequest.getter(v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 656) = v11;
  v189 = v11;
  v12 = v11(v2, v4);
  SFAirDropReceive.AskRequest.type.getter(v12);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v14 = v13(v5, v7);
  v15 = SFAirDrop.TransferType.isLinks.getter(v14);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  v17 = v16(v8, *(_QWORD *)typea);
  if ((v15 & 1) == 0)
  {
    v18 = *(_QWORD *)(v1 + 632);
    v19 = *(_QWORD *)(v1 + 608);
    v20 = *(_QWORD *)(v1 + 592);
    v21 = *(_QWORD *)(v1 + 576);
    v22 = *(_QWORD *)(v1 + 560);
    v23 = *(_QWORD *)(v1 + 544);
    v24 = CurrentValueSubject.value.getter(v17);
    SFAirDropReceive.Transfer.askRequest.getter(v24);
    v25 = v189(v18, v19);
    SFAirDropReceive.AskRequest.type.getter(v25);
    v26 = v13(v20, v21);
    v27 = SFAirDrop.TransferType.isFiles.getter(v26);
    v16(v22, v23);
    if ((v27 & 1) == 0)
    {
      v67 = swift_retain_n(*(_QWORD *)(v1 + 376), 2);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.default.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = *(_QWORD *)(v1 + 632);
        v71 = *(_QWORD *)(v1 + 592);
        v160 = *(_QWORD *)(v1 + 608);
        v162 = *(_QWORD *)(v1 + 576);
        v72 = *(_QWORD *)(v1 + 560);
        v166 = *(_QWORD *)(v1 + 544);
        v171 = *(_QWORD *)(v1 + 376);
        typeb = v69;
        v73 = (uint8_t *)swift_slowAlloc(12, -1);
        v176 = swift_slowAlloc(32, -1);
        v201[0] = v176;
        *(_DWORD *)v73 = 136315138;
        v74 = CurrentValueSubject.value.getter(v176);
        SFAirDropReceive.Transfer.askRequest.getter(v74);
        v75 = v189(v70, v160);
        SFAirDropReceive.AskRequest.type.getter(v75);
        v13(v71, v162);
        v76 = sub_100220D78((unint64_t *)&unk_1007C5E50, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v166, v76);
        v79 = v78;
        v16(v72, v166);
        *(_QWORD *)(v1 + 320) = sub_100228BD8(v77, (unint64_t)v79, v201);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, v181, v73 + 4);
        swift_bridgeObjectRelease(v79);
        swift_release_n(v171, 2);
        _os_log_impl((void *)&_mh_execute_header, v68, typeb, "Classroom Ask open/move SKIP. {type: %s}", v73, 0xCu);
        swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v176, -1, -1);
        swift_slowDealloc(v73, -1, -1);

        goto LABEL_22;
      }
      v119 = *(_QWORD *)(v1 + 376);

      v113 = v119;
LABEL_21:
      swift_release_n(v113, 2);
      goto LABEL_22;
    }
  }
  v28 = *(_QWORD *)(v1 + 376)
      + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess(v28, v1 + 216, 0, 0);
  sub_100244418(v28, v1 + 96);
  v29 = sub_100008384(&qword_1007C5E20);
  v30 = sub_100008384(&qword_1007B6BF8);
  if (!swift_dynamicCast(v1 + 16, v1 + 96, v29, v30, 6))
  {
    v51 = *(_QWORD *)(v1 + 376);
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_QWORD *)(v1 + 48) = 0;
    sub_10000D0F0(v1 + 16, &qword_1007B6C00);
    v52 = swift_retain_n(v51, 2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter(v53);
    v55 = os_log_type_enabled(v53, v54);
    v56 = *(_QWORD *)(v1 + 376);
    if (v55)
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v201[0] = v58;
      *(_DWORD *)v57 = 136315138;
      sub_100244418(v28, v1 + 136);
      v59 = *(_QWORD *)(v1 + 160);
      v60 = sub_10023A834((_QWORD *)(v1 + 136), v59);
      DynamicType = swift_getDynamicType(v60, v59, 1);
      v62 = *(_QWORD *)(v1 + 168);
      sub_10022E75C((_QWORD *)(v1 + 136));
      *(_QWORD *)(v1 + 288) = DynamicType;
      *(_QWORD *)(v1 + 296) = v62;
      v63 = sub_100008384(&qword_1007B6C08);
      v64 = String.init<A>(describing:)(v1 + 288, v63);
      v66 = (const char *)v65;
      *(_QWORD *)(v1 + 312) = sub_100228BD8(v64, v65, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 312, v186, v57 + 4);
      swift_bridgeObjectRelease(v66);
      swift_release_n(v56, 2);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Classroom Ask open/move SKIP. {handler: %s}", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

LABEL_22:
      v120 = *(const char **)(v1 + 360);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 480) + 16))(*(_QWORD *)(v1 + 344), *(_QWORD *)(v1 + 368), *(_QWORD *)(v1 + 472));
      swift_bridgeObjectRetain(v120);
      v164 = 0;
      v161 = *(_QWORD *)(v1 + 360);
LABEL_23:
      v121 = *(_QWORD *)(v1 + 632);
      v122 = *(_QWORD *)(v1 + 624);
      v123 = *(_QWORD *)(v1 + 600);
      v124 = *(_QWORD *)(v1 + 592);
      v125 = *(_QWORD *)(v1 + 568);
      v126 = *(_QWORD *)(v1 + 560);
      v127 = *(_QWORD *)(v1 + 536);
      v128 = *(_QWORD *)(v1 + 528);
      v129 = *(_QWORD *)(v1 + 520);
      v165 = *(_QWORD *)(v1 + 512);
      v168 = *(_QWORD *)(v1 + 504);
      v173 = *(_QWORD *)(v1 + 496);
      v179 = *(_QWORD *)(v1 + 488);
      v184 = *(_QWORD *)(v1 + 464);
      v188 = *(_QWORD *)(v1 + 456);
      v192 = *(_QWORD *)(v1 + 448);
      v195 = *(_QWORD *)(v1 + 424);
      *(_QWORD *)typec = *(_QWORD *)(v1 + 400);
      swift_task_dealloc(*(_QWORD *)(v1 + 640));
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v165);
      swift_task_dealloc(v168);
      swift_task_dealloc(v173);
      swift_task_dealloc(v179);
      swift_task_dealloc(v184);
      swift_task_dealloc(v188);
      swift_task_dealloc(v192);
      swift_task_dealloc(v195);
      swift_task_dealloc(*(_QWORD *)typec);
      return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(v164, v161);
    }

    v113 = v56;
    goto LABEL_21;
  }
  v175 = v1 + 336;
  v31 = *(_QWORD *)(v1 + 536);
  v32 = *(_QWORD *)(v1 + 472);
  v33 = *(_QWORD *)(v1 + 480);
  v34 = *(_QWORD *)(v1 + 368);
  v187 = (_QWORD *)(v1 + 56);
  sub_10026EE60((__int128 *)(v1 + 16), v1 + 56);
  *(_QWORD *)(v1 + 664) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  *(_QWORD *)(v1 + 672) = v35;
  v36 = v35(v31, v34, v32);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v1 + 536);
  type = (void (*)(uint64_t, uint64_t, uint64_t))v35;
  if (v39)
  {
    v41 = *(_QWORD *)(v1 + 528);
    v42 = *(_QWORD *)(v1 + 472);
    v170 = *(_QWORD *)(v1 + 480);
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v201[0] = v44;
    *(_DWORD *)v43 = 136315138;
    type(v41, v40, v42);
    v45 = String.init<A>(describing:)(v41, v42);
    v47 = (const char *)v46;
    *(_QWORD *)(v1 + 336) = sub_100228BD8(v45, v46, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v175, v1 + 344, v43 + 4);
    v48 = swift_bridgeObjectRelease(v47);
    v49 = *(void (**)(uint64_t, uint64_t, __n128))(v170 + 8);
    v49(v40, v42, v48);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Classroom Ask open/move START. {destination: %s}", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    v50 = v43;
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))type;
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {
    v80 = *(_QWORD *)(v1 + 472);
    v81 = *(_QWORD *)(v1 + 480);

    v49 = *(void (**)(uint64_t, uint64_t, __n128))(v81 + 8);
    ((void (*)(uint64_t, uint64_t))v49)(v40, v80);
  }
  *(_QWORD *)(v1 + 680) = v49;
  v82 = *(_BYTE *)(v1 + 737);
  v83 = v35(*(_QWORD *)(v1 + 520), *(_QWORD *)(v1 + 368), *(_QWORD *)(v1 + 472));
  if ((v82 & 1) == 0)
  {
    v114 = *(_QWORD *)(v1 + 624);
    v115 = *(_QWORD *)(v1 + 464);
    v178 = *(const char **)(v1 + 360);
    v183 = *(const char **)(v1 + 368);
    sub_100244418(v28, v1 + 176);
    v116 = *(_QWORD *)(v1 + 200);
    v117 = *(_QWORD *)(v1 + 208);
    v118 = sub_10023A834((_QWORD *)(v1 + 176), v116);
    CurrentValueSubject.value.getter(v118);
    sub_10047CEFC(v114, v178, 0, v183, v116, v117, v115);
    v196 = *(_QWORD *)(v1 + 632);
    v135 = *(_QWORD *)(v1 + 472);
    v136 = *(_QWORD *)(v1 + 456);
    v169 = *(_QWORD *)(v1 + 464);
    v174 = *(_QWORD *)(v1 + 440);
    v180 = *(_QWORD *)(v1 + 432);
    v185 = *(_QWORD *)(v1 + 608);
    v137 = *(_QWORD *)(v1 + 368);
    v138 = *(const char **)(v1 + 352);
    v139 = *(const char **)(v1 + 360);
    ((void (*)(_QWORD))v189)(*(_QWORD *)(v1 + 624));
    sub_10022E75C((_QWORD *)(v1 + 176));
    v140 = (int *)sub_100008384((uint64_t *)&unk_1007BB640);
    v141 = v140[12];
    v142 = v140[16];
    v143 = v136 + v140[20];
    type(v136, v137, v135);
    *(_QWORD *)(v136 + v141) = v138;
    *(_QWORD *)(v136 + v142) = v139;
    v144 = sub_100008384(&qword_1007B5280);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v143, v169, v144);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v174 + 104))(v136, enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:), v180);
    *(_QWORD *)&v145 = swift_bridgeObjectRetain(v138).n128_u64[0];
    swift_bridgeObjectRetain(v139, v145);
    sub_10053D3FC(v136, v196);
    v189(v196, v185);
    return swift_task_switch(sub_100276118, 0, 0);
  }
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.default.getter(v84);
  if (os_log_type_enabled(v84, v85))
  {
    v190 = *(void (**)(uint64_t, uint64_t))(v1 + 680);
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 672);
    v87 = *(_QWORD *)(v1 + 528);
    v88 = *(_QWORD *)(v1 + 520);
    v89 = *(_QWORD *)(v1 + 504);
    v90 = *(_QWORD *)(v1 + 472);
    v91 = (uint8_t *)swift_slowAlloc(12, -1);
    v193 = swift_slowAlloc(32, -1);
    v201[0] = v193;
    *(_DWORD *)v91 = 136315138;
    v92 = swift_beginAccess(v88, v1 + 264, 0, 0);
    v86(v87, v88, v90, v92);
    ((void (*)(uint64_t, uint64_t, uint64_t))v86)(v89, v87, v90);
    v93 = String.init<A>(describing:)(v89, v90);
    v95 = v94;
    v190(v87, v90);
    *(_QWORD *)(v1 + 328) = sub_100228BD8(v93, (unint64_t)v95, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v181, v175, v91 + 4);
    swift_bridgeObjectRelease(v95);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Classroom Ask open/move END - accepted {destination: %s}", v91, 0xCu);
    swift_arrayDestroy(v193, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v193, -1, -1);
    swift_slowDealloc(v91, -1, -1);
  }

  v96 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 672);
  v167 = *(_QWORD *)(v1 + 632);
  v172 = *(_QWORD *)(v1 + 608);
  v97 = *(_QWORD *)(v1 + 520);
  v177 = *(_QWORD *)(v1 + 496);
  v182 = *(void (**)(uint64_t, uint64_t))(v1 + 656);
  v98 = *(_QWORD *)(v1 + 472);
  v191 = *(_QWORD *)(v1 + 488);
  v194 = *(_QWORD *)(v1 + 480);
  v100 = *(_QWORD *)(v1 + 440);
  v99 = *(_QWORD *)(v1 + 448);
  v163 = *(_QWORD *)(v1 + 432);
  v101 = *(const char **)(v1 + 352);
  v102 = *(const char **)(v1 + 360);
  v103 = sub_100008384((uint64_t *)&unk_1007B5270);
  v104 = *(int *)(v103 + 48);
  v105 = *(int *)(v103 + 64);
  v106 = swift_beginAccess(v97, v1 + 240, 0, 0);
  v96(v99, v97, v98, v106);
  *(_QWORD *)(v99 + v104) = v101;
  *(_QWORD *)(v99 + v105) = v102;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v100 + 104))(v99, enum case for SFAirDropReceive.Transfer.State.opening(_:), v163);
  *(_QWORD *)&v107 = swift_bridgeObjectRetain(v101).n128_u64[0];
  swift_bridgeObjectRetain(v102, v107);
  sub_10053D3FC(v99, v167);
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v163);
  v182(v167, v172);
  ((void (*)(uint64_t, uint64_t, uint64_t))v96)(v177, v97, v98);
  ((void (*)(uint64_t, uint64_t, uint64_t))v96)(v191, v177, v98);
  v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v194 + 88))(v191, v98);
  if (v108 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
  {
    v110 = *(uint64_t **)(v1 + 488);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v1 + 480) + 96))(v110, *(_QWORD *)(v1 + 472));
    v111 = *v110;
    v112 = (const char *)v110[1];
    if (v111 == 0xD000000000000034 && v112 == (const char *)0x80000001006133A0)
    {
      v109 = swift_bridgeObjectRelease((const char *)0x80000001006133A0);
LABEL_25:
      (*(void (**)(_QWORD, _QWORD, __n128))(v1 + 680))(*(_QWORD *)(v1 + 496), *(_QWORD *)(v1 + 472), v109);
LABEL_26:
      v130 = *(void (**)(uint64_t, uint64_t, __n128))(v1 + 680);
      v131 = *(_QWORD *)(v1 + 520);
      v132 = *(_QWORD *)(v1 + 472);
      v133 = *(const char **)(v1 + 360);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 672))(*(_QWORD *)(v1 + 344), v131, v132);
      v134 = swift_bridgeObjectRetain(v133);
      v130(v131, v132, v134);
      sub_10022E75C(v187);
      v161 = *(_QWORD *)(v1 + 360);
      v164 = 1;
      goto LABEL_23;
    }
    v147 = *(void (**)(uint64_t, uint64_t, __n128))(v1 + 680);
    v148 = *(_QWORD *)(v1 + 496);
    v149 = *(_QWORD *)(v1 + 472);
    v150 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, 0xD000000000000034, 0x80000001006133A0, 0);
    v151 = swift_bridgeObjectRelease(v112);
    v147(v148, v149, v151);
    if ((v150 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    if (v108 == enum case for SFAirDropReceive.ItemDestination.noItem(_:))
      goto LABEL_25;
    v152 = *(void (**)(uint64_t, uint64_t))(v1 + 680);
    v153 = *(_QWORD *)(v1 + 496);
    v154 = *(_QWORD *)(v1 + 472);
    v152(*(_QWORD *)(v1 + 488), v154);
    v152(v153, v154);
  }
  v155 = *(_QWORD *)(v1 + 520);
  v156 = *(_QWORD *)(v1 + 360);
  v157 = *(_QWORD *)(v1 + 80);
  v158 = *(_QWORD *)(v1 + 88);
  sub_10023A834(v187, v157);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 8))(v156, v155, v157, v158);
  v159 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(_QWORD *)(v1 + 720) = v159;
  *v159 = v1;
  v159[1] = sub_100276CF4;
  return SFProgressTask.finalValue.getter(v1 + 736, *(_QWORD *)(v1 + 408));
}

uint64_t sub_100276118()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[58];
  v2 = swift_task_alloc(32);
  v0[86] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = swift_task_alloc(32);
  v0[87] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[88] = v4;
  *v4 = v0;
  v4[1] = sub_1002761C0;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0[64], &unk_1007B6C10, v2, sub_100278680, v3, 0, 0, v0[59]);
}

uint64_t sub_1002761C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 704);
  *(_QWORD *)(*(_QWORD *)v1 + 712) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10027684C;
    v5 = 0;
  }
  else
  {
    v6 = v2[87];
    v7 = v2[86];
    v8 = v2[81];
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v4 = sub_100276240;
    v5 = v8;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100276240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  __n128 v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  double v30;
  int v31;
  __n128 v32;
  uint64_t *v33;
  uint64_t v34;
  const char *v35;
  void (*v36)(uint64_t, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  char v39;
  __n128 v40;
  void (*v41)(uint64_t, uint64_t, __n128);
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;

  v82 = (_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 464);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
  sub_10000D0F0(v5, &qword_1007B6BF0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v1, v2, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v73 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 672);
    v10 = *(_QWORD *)(v0 + 528);
    v11 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 504);
    v13 = *(_QWORD *)(v0 + 472);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v76 = swift_slowAlloc(32, -1);
    v84 = v76;
    *(_DWORD *)v14 = 136315138;
    v15 = swift_beginAccess(v11, v0 + 264, 0, 0);
    v9(v10, v11, v13, v15);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v12, v10, v13);
    v16 = String.init<A>(describing:)(v12, v13);
    v18 = v17;
    v73(v10, v13);
    *(_QWORD *)(v0 + 328) = sub_100228BD8(v16, (unint64_t)v18, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v14 + 4);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Classroom Ask open/move END - accepted {destination: %s}", v14, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 672);
  v67 = *(_QWORD *)(v0 + 632);
  v69 = *(_QWORD *)(v0 + 608);
  v20 = *(_QWORD *)(v0 + 520);
  v71 = *(_QWORD *)(v0 + 496);
  v74 = *(void (**)(uint64_t, uint64_t))(v0 + 656);
  v21 = *(_QWORD *)(v0 + 472);
  v77 = *(_QWORD *)(v0 + 488);
  v79 = *(_QWORD *)(v0 + 480);
  v23 = *(_QWORD *)(v0 + 440);
  v22 = *(_QWORD *)(v0 + 448);
  v64 = *(_QWORD *)(v0 + 432);
  v24 = *(const char **)(v0 + 352);
  v25 = *(const char **)(v0 + 360);
  v26 = sub_100008384((uint64_t *)&unk_1007B5270);
  v27 = *(int *)(v26 + 48);
  v28 = *(int *)(v26 + 64);
  v29 = swift_beginAccess(v20, v0 + 240, 0, 0);
  v19(v22, v20, v21, v29);
  *(_QWORD *)(v22 + v27) = v24;
  *(_QWORD *)(v22 + v28) = v25;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, enum case for SFAirDropReceive.Transfer.State.opening(_:), v64);
  *(_QWORD *)&v30 = swift_bridgeObjectRetain(v24).n128_u64[0];
  swift_bridgeObjectRetain(v25, v30);
  sub_10053D3FC(v22, v67);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v64);
  v74(v67, v69);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v71, v20, v21);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v77, v71, v21);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 88))(v77, v21);
  if (v31 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
  {
    v33 = *(uint64_t **)(v0 + 488);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 480) + 96))(v33, *(_QWORD *)(v0 + 472));
    v34 = *v33;
    v35 = (const char *)v33[1];
    if (v34 == 0xD000000000000034 && v35 == (const char *)0x80000001006133A0)
    {
      v32 = swift_bridgeObjectRelease((const char *)0x80000001006133A0);
LABEL_8:
      (*(void (**)(_QWORD, _QWORD, __n128))(v0 + 680))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 472), v32);
LABEL_10:
      v41 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 680);
      v42 = *(_QWORD *)(v0 + 520);
      v43 = *(_QWORD *)(v0 + 472);
      v44 = *(const char **)(v0 + 360);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 672))(*(_QWORD *)(v0 + 344), v42, v43);
      v45 = swift_bridgeObjectRetain(v44);
      v41(v42, v43, v45);
      sub_10022E75C(v82);
      v83 = *(_QWORD *)(v0 + 360);
      v46 = *(_QWORD *)(v0 + 632);
      v47 = *(_QWORD *)(v0 + 624);
      v48 = *(_QWORD *)(v0 + 600);
      v49 = *(_QWORD *)(v0 + 592);
      v50 = *(_QWORD *)(v0 + 568);
      v51 = *(_QWORD *)(v0 + 560);
      v52 = *(_QWORD *)(v0 + 536);
      v53 = *(_QWORD *)(v0 + 528);
      v54 = *(_QWORD *)(v0 + 520);
      v65 = *(_QWORD *)(v0 + 512);
      v66 = *(_QWORD *)(v0 + 504);
      v68 = *(_QWORD *)(v0 + 496);
      v70 = *(_QWORD *)(v0 + 488);
      v72 = *(_QWORD *)(v0 + 464);
      v75 = *(_QWORD *)(v0 + 456);
      v78 = *(_QWORD *)(v0 + 448);
      v80 = *(_QWORD *)(v0 + 424);
      v81 = *(_QWORD *)(v0 + 400);
      swift_task_dealloc(*(_QWORD *)(v0 + 640));
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v70);
      swift_task_dealloc(v72);
      swift_task_dealloc(v75);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(1, v83);
    }
    v36 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 680);
    v37 = *(_QWORD *)(v0 + 496);
    v38 = *(_QWORD *)(v0 + 472);
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0xD000000000000034, 0x80000001006133A0, 0);
    v40 = swift_bridgeObjectRelease(v35);
    v36(v37, v38, v40);
    if ((v39 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v31 == enum case for SFAirDropReceive.ItemDestination.noItem(_:))
      goto LABEL_8;
    v56 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    v57 = *(_QWORD *)(v0 + 496);
    v58 = *(_QWORD *)(v0 + 472);
    v56(*(_QWORD *)(v0 + 488), v58);
    v56(v57, v58);
  }
  v59 = *(_QWORD *)(v0 + 520);
  v60 = *(_QWORD *)(v0 + 360);
  v61 = *(_QWORD *)(v0 + 80);
  v62 = *(_QWORD *)(v0 + 88);
  sub_10023A834(v82, v61);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8))(v60, v59, v61, v62);
  v63 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(_QWORD *)(v0 + 720) = v63;
  *v63 = v0;
  v63[1] = sub_100276CF4;
  return SFProgressTask.finalValue.getter(v0 + 736, *(_QWORD *)(v0 + 408));
}

uint64_t sub_10027684C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[86];
  v2 = v0[81];
  swift_task_dealloc(v0[87]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100276898, v2, 0);
}

uint64_t sub_100276898()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
  v2 = *(_QWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 472);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
  sub_10000D0F0(v4, &qword_1007B6BF0);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 712);
  v6 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 304) = v5;
  swift_errorRetain(v5);
  v8 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v6, v0 + 304, v8, v7, 0) & 1) != 0)
  {
    v9 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 88))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
    if (v9 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      v10 = swift_errorRelease(v5);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        v14 = "Classroom Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v11, v12, v14, v13, 2u);
        swift_slowDealloc(v13, -1, -1);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v9 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      v15 = swift_errorRelease(v5);
      v11 = Logger.logObject.getter(v15);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        v14 = "Classroom Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
      v17 = *(_QWORD *)(v0 + 472);
      v18 = *(_QWORD *)(v0 + 368);
      v19 = *(_QWORD *)(v0 + 344);

      v16(v19, v18, v17);
      swift_errorRelease(*(_QWORD *)(v0 + 304));
      sub_10022E75C((_QWORD *)(v0 + 56));
      v20 = *(_QWORD *)(v0 + 632);
      v21 = *(_QWORD *)(v0 + 624);
      v22 = *(_QWORD *)(v0 + 600);
      v23 = *(_QWORD *)(v0 + 592);
      v24 = *(_QWORD *)(v0 + 568);
      v25 = *(_QWORD *)(v0 + 560);
      v26 = *(_QWORD *)(v0 + 536);
      v27 = *(_QWORD *)(v0 + 528);
      v28 = *(_QWORD *)(v0 + 520);
      v40 = *(_QWORD *)(v0 + 512);
      v42 = *(_QWORD *)(v0 + 504);
      v44 = *(_QWORD *)(v0 + 496);
      v46 = *(_QWORD *)(v0 + 488);
      v48 = *(_QWORD *)(v0 + 464);
      v50 = *(_QWORD *)(v0 + 456);
      v52 = *(_QWORD *)(v0 + 448);
      v54 = *(_QWORD *)(v0 + 424);
      v56 = *(_QWORD *)(v0 + 400);
      swift_task_dealloc(*(_QWORD *)(v0 + 640));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      swift_task_dealloc(v46);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v52);
      swift_task_dealloc(v54);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(_QWORD, _QWORD *))(v0 + 8))(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
  }
  v30 = *(_QWORD *)(v0 + 640);
  v31 = *(_QWORD *)(v0 + 632);
  v32 = *(_QWORD *)(v0 + 624);
  v33 = *(_QWORD *)(v0 + 600);
  v34 = *(_QWORD *)(v0 + 592);
  v35 = *(_QWORD *)(v0 + 568);
  v36 = *(_QWORD *)(v0 + 560);
  v37 = *(_QWORD *)(v0 + 536);
  v38 = *(_QWORD *)(v0 + 528);
  v39 = *(_QWORD *)(v0 + 520);
  v41 = *(_QWORD *)(v0 + 512);
  v43 = *(_QWORD *)(v0 + 504);
  v45 = *(_QWORD *)(v0 + 496);
  v47 = *(_QWORD *)(v0 + 488);
  v49 = *(_QWORD *)(v0 + 464);
  v51 = *(_QWORD *)(v0 + 456);
  v53 = *(_QWORD *)(v0 + 448);
  v55 = *(_QWORD *)(v0 + 424);
  v57 = *(_QWORD *)(v0 + 400);
  swift_errorRelease(*(_QWORD *)(v0 + 304));
  sub_10022E75C((_QWORD *)(v0 + 56));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100276CF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 720);
  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc(v3);
  v4 = v2[81];
  (*(void (**)(_QWORD, _QWORD))(v2[52] + 8))(v2[53], v2[51]);
  if (v0)
    v5 = sub_100276F10;
  else
    v5 = sub_100276D74;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100276D74()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, __n128);
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v1 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 680);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = *(const char **)(v0 + 360);
  v26 = *(unsigned __int8 *)(v0 + 736);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 672))(*(_QWORD *)(v0 + 344), v2, v3);
  v5 = swift_bridgeObjectRetain(v4);
  v1(v2, v3, v5);
  sub_10022E75C((_QWORD *)(v0 + 56));
  v25 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 632);
  v7 = *(_QWORD *)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 600);
  v9 = *(_QWORD *)(v0 + 592);
  v10 = *(_QWORD *)(v0 + 568);
  v11 = *(_QWORD *)(v0 + 560);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 528);
  v14 = *(_QWORD *)(v0 + 520);
  v16 = *(_QWORD *)(v0 + 512);
  v17 = *(_QWORD *)(v0 + 504);
  v18 = *(_QWORD *)(v0 + 496);
  v19 = *(_QWORD *)(v0 + 488);
  v20 = *(_QWORD *)(v0 + 464);
  v21 = *(_QWORD *)(v0 + 456);
  v22 = *(_QWORD *)(v0 + 448);
  v23 = *(_QWORD *)(v0 + 424);
  v24 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(v26, v25);
}

uint64_t sub_100276F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  (*(void (**)(_QWORD, _QWORD))(v0 + 680))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 472));
  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 304) = v1;
  swift_errorRetain(v1);
  v4 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v2, v0 + 304, v4, v3, 0) & 1) != 0)
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 88))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
    if (v5 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      v6 = swift_errorRelease(v1);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v9 = 0;
        v10 = "Classroom Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
        swift_slowDealloc(v9, -1, -1);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v5 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      v11 = swift_errorRelease(v1);
      v7 = Logger.logObject.getter(v11);
      v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v9 = 0;
        v10 = "Classroom Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
      v13 = *(_QWORD *)(v0 + 472);
      v14 = *(_QWORD *)(v0 + 368);
      v15 = *(_QWORD *)(v0 + 344);

      v12(v15, v14, v13);
      swift_errorRelease(*(_QWORD *)(v0 + 304));
      sub_10022E75C((_QWORD *)(v0 + 56));
      v16 = *(_QWORD *)(v0 + 632);
      v17 = *(_QWORD *)(v0 + 624);
      v18 = *(_QWORD *)(v0 + 600);
      v19 = *(_QWORD *)(v0 + 592);
      v20 = *(_QWORD *)(v0 + 568);
      v21 = *(_QWORD *)(v0 + 560);
      v22 = *(_QWORD *)(v0 + 536);
      v23 = *(_QWORD *)(v0 + 528);
      v24 = *(_QWORD *)(v0 + 520);
      v36 = *(_QWORD *)(v0 + 512);
      v38 = *(_QWORD *)(v0 + 504);
      v40 = *(_QWORD *)(v0 + 496);
      v42 = *(_QWORD *)(v0 + 488);
      v44 = *(_QWORD *)(v0 + 464);
      v46 = *(_QWORD *)(v0 + 456);
      v48 = *(_QWORD *)(v0 + 448);
      v50 = *(_QWORD *)(v0 + 424);
      v52 = *(_QWORD *)(v0 + 400);
      swift_task_dealloc(*(_QWORD *)(v0 + 640));
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v36);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      swift_task_dealloc(v46);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(_QWORD, _QWORD *))(v0 + 8))(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
  }
  v26 = *(_QWORD *)(v0 + 640);
  v27 = *(_QWORD *)(v0 + 632);
  v28 = *(_QWORD *)(v0 + 624);
  v29 = *(_QWORD *)(v0 + 600);
  v30 = *(_QWORD *)(v0 + 592);
  v31 = *(_QWORD *)(v0 + 568);
  v32 = *(_QWORD *)(v0 + 560);
  v33 = *(_QWORD *)(v0 + 536);
  v34 = *(_QWORD *)(v0 + 528);
  v35 = *(_QWORD *)(v0 + 520);
  v37 = *(_QWORD *)(v0 + 512);
  v39 = *(_QWORD *)(v0 + 504);
  v41 = *(_QWORD *)(v0 + 496);
  v43 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 464);
  v47 = *(_QWORD *)(v0 + 456);
  v49 = *(_QWORD *)(v0 + 448);
  v51 = *(_QWORD *)(v0 + 424);
  v53 = *(_QWORD *)(v0 + 400);
  swift_errorRelease(*(_QWORD *)(v0 + 304));
  sub_10022E75C((_QWORD *)(v0 + 56));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100277344()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_recordID
                                             + 8));
}

uint64_t sub_100277374()
{
  uint64_t v0;

  v0 = sub_10053D2F0();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_recordID
                                      + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002773C8()
{
  return _s15ClassroomRunnerCMa(0);
}

uint64_t _s15ClassroomRunnerCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1007B69B0;
  if (!qword_1007B69B0)
    return swift_getSingletonMetadata(a1, &_s15ClassroomRunnerCMn);
  return result;
}

uint64_t sub_10027740C(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = &unk_1005CFA30;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 472);
}

uint64_t sub_100277458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for SFAirDropReceive.Failure(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v3[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384((uint64_t *)&unk_1007C5E40);
  v3[25] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v9);
  v3[27] = swift_task_alloc(v9);
  v10 = sub_100008384(&qword_1007B6BD0);
  v3[28] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v11);
  v3[30] = swift_task_alloc(v11);
  v12 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v3[31] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[32] = v13;
  v3[33] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v3[34] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[35] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v16);
  v3[37] = swift_task_alloc(v16);
  v17 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v3[38] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[39] = v18;
  v3[40] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v3[41] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[42] = v20;
  v3[43] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v3[44] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[45] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[46] = swift_task_alloc(v23);
  v3[47] = swift_task_alloc(v23);
  v24 = sub_100008384(&qword_1007B6BD8);
  v3[48] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v3[49] = v25;
  v3[50] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v26 = static AirDropActor.shared;
  v3[51] = static AirDropActor.shared;
  return swift_task_switch(sub_10027769C, v26, 0);
}

uint64_t sub_10027769C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t);
  void (*v28)(uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);

  v35 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 376);
  v45 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 344);
  v44 = *(_QWORD *)(v0 + 352);
  v31 = *(_QWORD *)(v0 + 336);
  v32 = *(_QWORD *)(v0 + 328);
  v40 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 304);
  v36 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 264);
  v42 = *(_QWORD *)(v0 + 256);
  v43 = *(_QWORD *)(v0 + 248);
  v39 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v37 = *(_QWORD *)(v0 + 184);
  v38 = *(_QWORD *)(v0 + 136);
  v5 = sub_100008384(&qword_1007B5B20);
  SFProgressContinuation.task.getter(v5);
  v6 = v4 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess(v4 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler, v0 + 96, 0, 0);
  sub_100244418(v6, v0 + 16);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = sub_10023A834((_QWORD *)(v0 + 16), v7);
  v10 = CurrentValueSubject.value.getter(v9);
  SFAirDropReceive.Transfer.askRequest.getter(v10);
  v46 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  *(_QWORD *)(v0 + 416) = v46;
  v46(v1, v44);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2, 1, v7, v8);
  v33 = v12;
  v34 = v11;
  *(_QWORD *)(v0 + 424) = v11;
  *(_QWORD *)(v0 + 432) = v12;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v2, v32);
  sub_10022E75C((_QWORD *)(v0 + 16));
  sub_100244418(v6, v0 + 56);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = sub_10023A834((_QWORD *)(v0 + 56), v13);
  CurrentValueSubject.value.getter(v15);
  v16 = type metadata accessor for SFAirDrop.Progress(0);
  *(_QWORD *)(v0 + 440) = v16;
  v17 = sub_100008384((uint64_t *)&unk_1007B6820);
  sub_10047CBAC(v1, 0x726566736E617274, (void *)0xEC000000676E6972, v35, v13, v16, v17, v14, v36);
  v46(v1, v44);
  v18 = sub_10022E75C((_QWORD *)(v0 + 56));
  static Date.now.getter(v18);
  v19 = (int *)sub_100008384(&qword_1007BB650);
  *(_QWORD *)(v0 + 448) = v19;
  v20 = v3 + v19[12];
  v21 = (uint64_t *)(v3 + v19[16]);
  v22 = v3 + v19[20];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  *(_QWORD *)(v0 + 456) = v23;
  v23(v3, v38, v39);
  v24 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104);
  *(_QWORD *)(v0 + 464) = v25;
  v25(v20, v24, v16);
  *v21 = v34;
  v21[1] = (uint64_t)v33;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  *(_QWORD *)(v0 + 472) = v26;
  v26(v22, v36, v41);
  *(_DWORD *)(v0 + 616) = enum case for SFAirDropReceive.Transfer.State.transferring(_:);
  v27 = *(void (**)(uint64_t))(v42 + 104);
  *(_QWORD *)(v0 + 480) = v27;
  v27(v3);
  swift_bridgeObjectRetain(v33);
  sub_10053D3FC(v3, v1);
  v28 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  *(_QWORD *)(v0 + 488) = v28;
  v28(v3, v43);
  v46(v1, v44);
  v29 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(_QWORD *)(v0 + 496) = v29;
  *v29 = v0;
  v29[1] = sub_100277A04;
  return SFProgressTask.finalValue.getter(v0 + 120, *(_QWORD *)(v0 + 384));
}

uint64_t sub_100277A04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 496);
  *(_QWORD *)(*v1 + 504) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 408);
    swift_bridgeObjectRelease(*(const char **)(v2 + 432));
    v5 = sub_1002782B8;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 408);
    v5 = sub_100277A78;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100277A78()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t);
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(const char **, _QWORD, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  unsigned int v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 480);
  v34 = *(_DWORD *)(v0 + 616);
  v32 = *(void (**)(const char **, _QWORD, uint64_t))(v0 + 464);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  v2 = *(int **)(v0 + 448);
  v1 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 456);
  v3 = *(_QWORD *)(v0 + 440);
  v31 = *(_QWORD *)(v0 + 432);
  v30 = *(_QWORD *)(v0 + 424);
  v40 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 416);
  v42 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  v4 = *(_QWORD *)(v0 + 376);
  v38 = *(_QWORD *)(v0 + 352);
  v28 = *(_QWORD *)(v0 + 304);
  v29 = *(_QWORD *)(v0 + 320);
  v45 = *(_QWORD *)(v0 + 296);
  v37 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(const char **)(v0 + 120);
  *(_QWORD *)(v0 + 512) = v8;
  v9 = (const char **)(v5 + v2[12]);
  v10 = (_QWORD *)(v5 + v2[16]);
  v11 = v5 + v2[20];
  v1(v5, *(_QWORD *)(v0 + 136), v7);
  *v9 = v8;
  v32(v9, enum case for SFAirDrop.Progress.completed(_:), v3);
  *v10 = v30;
  v10[1] = v31;
  v33(v11, v29, v28);
  v35(v5, v34, v6);
  v36 = (uint64_t)v8;
  swift_bridgeObjectRetain(v8);
  sub_10053D3FC(v5, v4);
  v42(v5, v6);
  v12 = v40(v4, v38);
  static Date.now.getter(v12);
  sub_100220D78((unint64_t *)&unk_1007BCEF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v45, v37);
  if ((result & 1) != 0)
  {
    v14 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 272);
    v16 = *(_QWORD **)(v0 + 280);
    v46 = *(_QWORD *)(v0 + 240);
    v43 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 216);
    v44 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 200);
    v39 = v19;
    v20 = v17 + *(int *)(v19 + 48);
    v21 = (void (*)(uint64_t, uint64_t, uint64_t))v16[2];
    v21(v17, *(_QWORD *)(v0 + 296), v15);
    v22 = (void (*)(uint64_t, uint64_t, uint64_t))v16[4];
    v41 = v20;
    v22(v20, v14, v15);
    v23 = v18 + *(int *)(v19 + 48);
    v21(v18, v17, v15);
    v21(v23, v20, v15);
    v22(v43, v18, v15);
    v24 = (void (*)(uint64_t, uint64_t))v16[1];
    *(_QWORD *)(v0 + 520) = v24;
    v24(v23, v15);
    v25 = v18 + *(int *)(v39 + 48);
    v22(v18, v17, v15);
    v22(v25, v41, v15);
    v22(v43 + *(int *)(v44 + 36), v25, v15);
    v24(v18, v15);
    v26 = sub_1002785E0(v43, v46);
    *(double *)(v0 + 528) = ClosedRange<>.interval.getter(v26);
    sub_10000D0F0(v46, &qword_1007B6BD0);
    v27 = (_QWORD *)swift_task_alloc(dword_1007C5B84);
    *(_QWORD *)(v0 + 536) = v27;
    *v27 = v0;
    v27[1] = sub_100277D78;
    return sub_10053DCB4(v36, *(_QWORD *)(v0 + 136));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100277D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v4 = *(_QWORD *)(*v2 + 536);
  v5 = *v2;
  *(_QWORD *)(v5 + 544) = a1;
  *(_QWORD *)(v5 + 552) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = *(_QWORD *)(v5 + 408);
    swift_bridgeObjectRelease(*(const char **)(v5 + 512));
    return swift_task_switch(sub_100278378, v6, 0);
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc(dword_1007B6BE4);
    *(_QWORD *)(v5 + 560) = v8;
    *v8 = v5;
    v8[1] = sub_100277E48;
    return sub_100274D6C(*(_QWORD *)(v5 + 192), 1, *(_QWORD *)(v5 + 512), a1, *(_QWORD *)(v5 + 136));
  }
}

uint64_t sub_100277E48(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v6;
  uint64_t *v7;
  const char *v8;
  uint64_t v9;
  double v10;
  uint64_t **v12;

  v6 = (*v3)[70];
  v7 = *v3;
  v7[71] = a2;
  v7[72] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v8 = (const char *)v7[64];
    v9 = v7[51];
    *(_QWORD *)&v10 = swift_bridgeObjectRelease((const char *)v7[68]).n128_u64[0];
    swift_bridgeObjectRelease(v8, v10);
    return swift_task_switch(sub_100278438, v9, 0);
  }
  else
  {
    v12 = (uint64_t **)swift_task_alloc(dword_1007C5B94);
    v7[73] = (uint64_t)v12;
    *v12 = v7;
    v12[1] = (uint64_t *)sub_100277F2C;
    return sub_100541C1C(v7[46], v7[64], v7[68], a2, 1, a1 & 1, v7[24], 0);
  }
}

uint64_t sub_100277F2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t (*v10)();
  double v11;
  double v12;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 584);
  *(_QWORD *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  v4 = *(const char **)(v2 + 568);
  v5 = *(const char **)(v2 + 544);
  v6 = *(const char **)(v2 + 512);
  if (v0)
  {
    v7 = *(_QWORD *)(v2 + 408);
    *(_QWORD *)&v8 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + 568)).n128_u64[0];
    *(_QWORD *)&v9 = swift_bridgeObjectRelease(v5, v8).n128_u64[0];
    swift_bridgeObjectRelease(v6, v9);
    v10 = sub_1002784F8;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 408);
    (*(void (**)(_QWORD, _QWORD))(v2 + 416))(*(_QWORD *)(v2 + 368), *(_QWORD *)(v2 + 352));
    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v4).n128_u64[0];
    *(_QWORD *)&v12 = swift_bridgeObjectRelease(v5, v11).n128_u64[0];
    swift_bridgeObjectRelease(v6, v12);
    v10 = sub_100277FF0;
  }
  return swift_task_switch(v10, v7, 0);
}

uint64_t sub_100277FF0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
  v3 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  v1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v10 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027812C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 416);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  v6 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v7 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v2(v3, v4);
  return swift_task_switch(sub_1002781C8, v1, 0);
}

uint64_t sub_1002781C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_errorRelease(*(_QWORD *)(v0 + 600));
  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 240);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002782B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  v2 = v0[49];
  v1 = v0[50];
  v3 = v0[48];
  v5 = v0[39];
  v4 = v0[40];
  v6 = v0[38];
  (*(void (**)(uint64_t, uint64_t))(v0[35] + 8))(v0[37], v0[34]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = v0[63];
  v0[75] = v7;
  swift_errorRetain(v7);
  SFAirDropReceive.Failure.init(_:)(v7);
  v8 = (uint64_t **)swift_task_alloc(dword_1007C5BA4);
  v0[76] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_10027812C;
  return sub_100542C10(v0[47], v0[21]);
}

uint64_t sub_100278378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 304);
  (*(void (**)(_QWORD, _QWORD))(v0 + 520))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 600) = v7;
  swift_errorRetain(v7);
  SFAirDropReceive.Failure.init(_:)(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1007C5BA4);
  *(_QWORD *)(v0 + 608) = v8;
  *v8 = v0;
  v8[1] = sub_10027812C;
  return sub_100542C10(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 168));
}

uint64_t sub_100278438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 304);
  (*(void (**)(_QWORD, _QWORD))(v0 + 520))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 576);
  *(_QWORD *)(v0 + 600) = v7;
  swift_errorRetain(v7);
  SFAirDropReceive.Failure.init(_:)(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1007C5BA4);
  *(_QWORD *)(v0 + 608) = v8;
  *v8 = v0;
  v8[1] = sub_10027812C;
  return sub_100542C10(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 168));
}

uint64_t sub_1002784F8()
{
  uint64_t *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;

  v1 = (void (*)(uint64_t, uint64_t))v0[65];
  v3 = v0[49];
  v2 = v0[50];
  v4 = v0[48];
  v6 = v0[39];
  v5 = v0[40];
  v8 = v0[37];
  v7 = v0[38];
  v9 = v0[34];
  (*(void (**)(uint64_t, uint64_t))(v0[23] + 8))(v0[24], v0[22]);
  v1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v10 = v0[74];
  v0[75] = v10;
  swift_errorRetain(v10);
  SFAirDropReceive.Failure.init(_:)(v10);
  v11 = (uint64_t **)swift_task_alloc(dword_1007C5BA4);
  v0[76] = (uint64_t)v11;
  *v11 = v0;
  v11[1] = (uint64_t *)sub_10027812C;
  return sub_100542C10(v0[47], v0[21]);
}

uint64_t sub_1002785E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B6BD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100278628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007C0404);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return sub_100422C68(a1, v4);
}

void sub_100278680()
{
  uint64_t v0;

  sub_100422E18(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100278688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007C0404);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D12C;
  return sub_100422C68(a1, v4);
}

uint64_t sub_1002786E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B6C40);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B6C40);
  if (qword_1007B3EC0 != -1)
    swift_once(&qword_1007B3EC0, sub_1002EA004);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100278774()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject **v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1007B3D40 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B3D40, sub_1002786E4);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_100221DF8(v7, (uint64_t)qword_1007B6C40);
  v8 = v0;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v21 = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4);
    *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAuthenticationAuthSession: Invalidating %@", v11, 0xCu);
    v14 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  v15 = *(uint64_t *)((char *)&v8->isa + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession);
  if (v15)
  {
    swift_retain(*(Class *)((char *)&v8->isa
                          + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession));
    sub_10036541C();
    swift_release(v15);
  }
  v16 = *(Class *)((char *)&v8->isa + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_wifiRequest);
  if (v16)
  {
    v17 = (void *)objc_opt_self(SDAutoUnlockWiFiManager);
    v18 = v16;
    v19 = objc_msgSend(v17, "sharedManager");
    objc_msgSend(v19, "cancelWiFiRequest:", v18);

  }
}

uint64_t sub_100278A14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession));

  return sub_100225AB4(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo), *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo + 8));
}

id sub_100278A54()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SDAuthenticationAuthSession(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100278AD4()
{
  return type metadata accessor for SDAuthenticationAuthSession(0);
}

uint64_t type metadata accessor for SDAuthenticationAuthSession(uint64_t a1)
{
  uint64_t result;

  result = qword_1007B6C80;
  if (!qword_1007B6C80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAuthenticationAuthSession);
  return result;
}

uint64_t sub_100278B18(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = "\b";
  v2[1] = "\b";
  v2[2] = &unk_1005CFA88;
  return swift_updateClassMetadata2(a1, 256, 3, v2, a1 + 264);
}

id sub_100278B64(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  char *v24;
  objc_class *v25;
  id v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  objc_super v31;

  v6 = v5;
  v30 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession;
  *(_QWORD *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_wifiRequest] = 0;
  if ((unint64_t)(a5 - 1) > 3)
  {
    v19 = *(_QWORD *)&v5[v15];
    *(_QWORD *)&v6[v15] = 0;
    v20 = v6;
  }
  else
  {
    v16 = type metadata accessor for SDAuthenticationRangingSession(0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v17 = v5;
    v18 = sub_100362188();
    v19 = *(_QWORD *)&v5[v15];
    *(_QWORD *)&v6[v15] = v18;
  }
  swift_release(v19);
  v21 = (uint64_t *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo];
  *v21 = a2;
  v21[1] = a3;
  sub_10022E4A8(a2, a3);

  v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v14, (uint64_t)a4, v11);
  v23 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((_QWORD *)v23 + 4) = 0;
  v24 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((_QWORD *)v24 + 4) = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue] = v30;
  v22(&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID], (uint64_t)v14, v11);
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] = a5;
  v25 = (objc_class *)type metadata accessor for SDAuthenticationSession(0);
  v31.receiver = v6;
  v31.super_class = v25;
  v26 = objc_msgSendSuper2(&v31, "init");
  v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v14, v11);
  v27(a4, v11);
  return v26;
}

uint64_t sub_100278D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B6C90);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B6C90);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100278DDC(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  Class isa;
  NSString v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;

  if (a1)
  {
    v2 = (void *)objc_opt_self(NSKeyedArchiver);
    v25 = 0;
    v3 = a1;
    v4 = objc_msgSend(v2, "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v25);
    v5 = v25;
    if (v4)
    {
      v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v8 = v7;

      v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      isa = Data._bridgeToObjectiveC()().super.isa;
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "setObject:forKey:", isa, v11);

      sub_100225AB4(v6, v8);
    }
    else
    {
      v13 = v5;
      v14 = _convertNSErrorToError(_:)(v5);

      swift_willThrow(v15);
      if (qword_1007B3D48 != -1)
        swift_once(&qword_1007B3D48, sub_100278D4C);
      v16 = type metadata accessor for Logger(0);
      sub_100221DF8(v16, (uint64_t)qword_1007B6C90);
      swift_errorRetain(v14);
      v17 = swift_errorRetain(v14);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v20 = 138412290;
        swift_errorRetain(v14);
        v22 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
        v25 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 4);
        *v21 = v22;
        swift_errorRelease(v14);
        swift_errorRelease(v14);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to persist current pseudonym with error: %@", v20, 0xCu);
        v23 = sub_100008384(&qword_1007B4C30);
        swift_arrayDestroy(v21, 1, v23);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v20, -1, -1);

        swift_errorRelease(v14);
      }
      else
      {

        swift_errorRelease(v14);
        swift_errorRelease(v14);
        swift_errorRelease(v14);

      }
    }
  }
  else
  {
    v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "removeObjectForKey:");

  }
}

uint64_t sub_100279178@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _OWORD v26[2];
  _OWORD v27[2];

  v2 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v2);
  v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "objectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v26, v7);
    swift_unknownObjectRelease(v7);
    sub_10022138C(v26, v27);
    sub_10022E77C((uint64_t)v27, (uint64_t)v26);
    v8 = type metadata accessor for Date(0);
    v9 = swift_dynamicCast(v4, v26, (char *)&type metadata for Any + 8, v8, 6);
    v10 = *(_QWORD *)(v8 - 8);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    if (v9)
    {
      v11((uint64_t)v4, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v8) != 1)
      {
        sub_10022E75C(v27);
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v8);
        v12 = a1;
        v13 = 0;
        return v11(v12, v13, 1, v8);
      }
    }
    else
    {
      v11((uint64_t)v4, 1, 1, v8);
    }
    sub_10000D0F0((uint64_t)v4, &qword_1007C4330);
    if (qword_1007B3D48 != -1)
      swift_once(&qword_1007B3D48, sub_100278D4C);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100221DF8(v21, (uint64_t)qword_1007B6C90);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No valid after first use date to load", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    sub_10022E75C(v27);
    v12 = a1;
    v13 = 1;
    return v11(v12, v13, 1, v8);
  }
  if (qword_1007B3D48 != -1)
    swift_once(&qword_1007B3D48, sub_100278D4C);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100221DF8(v14, (uint64_t)qword_1007B6C90);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "No after first expiration date to load", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

uint64_t sub_1002794E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  id v12;
  Class isa;
  NSString v14;
  uint64_t v15;

  v2 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10027ACA0(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000D0F0((uint64_t)v4, &qword_1007C4330);
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "removeObjectForKey:", v10);

    return sub_10000D0F0(a1, &qword_1007C4330);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    isa = Date._bridgeToObjectiveC()().super.isa;
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setObject:forKey:", isa, v14);

    sub_10000D0F0(a1, &qword_1007C4330);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_1002796D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  id v34;
  void *v35;
  Class isa;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  Class v43;
  NSString v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;

  v1 = a1;
  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease(a1);
    v45 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v59 = String._bridgeToObjectiveC()();
    objc_msgSend(v45, "removeObjectForKey:");

    return;
  }
  v2 = sub_10021E9CC((uint64_t)_swiftEmptyArrayStorage);
  v57 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v58 = (id)((unint64_t)(v3 + 63) >> 6);
  swift_bridgeObjectRetain(v1);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v6 << 6);
      goto LABEL_27;
    }
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (v11 >= (uint64_t)v58)
      break;
    v12 = *(_QWORD *)(v57 + 8 * v11);
    ++v6;
    if (!v12)
    {
      v6 = v11 + 1;
      if (v11 + 1 >= (uint64_t)v58)
        break;
      v12 = *(_QWORD *)(v57 + 8 * v6);
      if (!v12)
      {
        v6 = v11 + 2;
        if (v11 + 2 >= (uint64_t)v58)
          break;
        v12 = *(_QWORD *)(v57 + 8 * v6);
        if (!v12)
        {
          v6 = v11 + 3;
          if (v11 + 3 >= (uint64_t)v58)
            break;
          v12 = *(_QWORD *)(v57 + 8 * v6);
          if (!v12)
          {
            v6 = v11 + 4;
            if (v11 + 4 >= (uint64_t)v58)
              break;
            v12 = *(_QWORD *)(v57 + 8 * v6);
            if (!v12)
            {
              v13 = v11 + 5;
              if (v13 >= (uint64_t)v58)
                break;
              v12 = *(_QWORD *)(v57 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v6 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_55;
                  if (v6 >= (uint64_t)v58)
                    goto LABEL_44;
                  v12 = *(_QWORD *)(v57 + 8 * v6);
                  ++v13;
                  if (v12)
                    goto LABEL_26;
                }
              }
              v6 = v13;
            }
          }
        }
      }
    }
LABEL_26:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v6 << 6);
LABEL_27:
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v10 + 8);
    v15 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v14);
    v16 = v15;
    v17 = String._bridgeToObjectiveC()();
    if ((v2 & 0xC000000000000001) != 0)
    {
      if (v2 >= 0)
        v2 &= 0xFFFFFFFFFFFFFF8uLL;
      v18 = v16;
      v19 = __CocoaDictionary.count.getter(v2);
      if (__OFADD__(v19, 1))
        goto LABEL_52;
      v2 = sub_100279E84(v2, v19 + 1);
    }
    else
    {
      v20 = v16;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v60 = (id)v2;
    v23 = sub_10045C214((uint64_t)v17);
    v24 = *(_QWORD *)(v2 + 16);
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      swift_once(&qword_1007B3D48, sub_100278D4C);
      goto LABEL_48;
    }
    v27 = v22;
    if (*(_QWORD *)(v2 + 24) >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v2 = (uint64_t)v60;
        if ((v22 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_10046ECD0();
        v2 = (uint64_t)v60;
        if ((v27 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_1004669F0(v26, isUniquelyReferenced_nonNull_native);
      v28 = sub_10045C214((uint64_t)v17);
      if ((v27 & 1) != (v29 & 1))
      {
        v56 = sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v56);
        __break(1u);
        return;
      }
      v23 = v28;
      v2 = (uint64_t)v60;
      if ((v27 & 1) != 0)
      {
LABEL_5:
        v7 = *(_QWORD *)(v2 + 56);
        v8 = 8 * v23;

        *(_QWORD *)(v7 + v8) = v16;
        goto LABEL_6;
      }
    }
    *(_QWORD *)(v2 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v30 = 8 * v23;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + v30) = v17;
    *(_QWORD *)(*(_QWORD *)(v2 + 56) + v30) = v16;
    v31 = *(_QWORD *)(v2 + 16);
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_53;
    *(_QWORD *)(v2 + 16) = v33;
    v34 = v17;
LABEL_6:

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
LABEL_44:
  swift_release(v1);
  swift_bridgeObjectRelease(v1);
  v35 = (void *)objc_opt_self(NSKeyedArchiver);
  sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
  sub_100221EDC(0, &qword_1007B6CB8, IDSPseudonym_ptr);
  sub_10023A6F8();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  v60 = 0;
  v37 = objc_msgSend(v35, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, &v60);

  v38 = v60;
  if (v37)
  {
    v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

    v42 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v43 = Data._bridgeToObjectiveC()().super.isa;
    v44 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, "setObject:forKey:", v43, v44);

    sub_100225AB4(v39, v41);
    return;
  }
  v46 = v38;
  v1 = _convertNSErrorToError(_:)(v38);

  swift_willThrow(v47);
  if (qword_1007B3D48 != -1)
    goto LABEL_56;
LABEL_48:
  v48 = type metadata accessor for Logger(0);
  sub_100221DF8(v48, (uint64_t)qword_1007B6C90);
  swift_errorRetain(v1);
  v49 = swift_errorRetain(v1);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v52 = 138412290;
    swift_errorRetain(v1);
    v54 = (void *)_swift_stdlib_bridgeErrorToNSError(v1);
    v60 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v52 + 4);
    *v53 = v54;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to persist pseudonyms to revoke error: %@", v52, 0xCu);
    v55 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v53, 1, v55);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
}

void sub_100279DE4(void *a1)
{
  sub_100278DDC(a1);
}

uint64_t sub_100279DF8(uint64_t a1)
{
  return sub_1002794E0(a1);
}

void (*sub_100279E0C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_10027A4E8();
  return sub_100279E40;
}

void sub_100279E40(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = swift_bridgeObjectRetain(*a1);
    sub_1002796D8(v3);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    sub_1002796D8(*a1);
  }
}

Swift::Int sub_100279E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_100008384(&qword_1007B4E58);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_100221EDC(0, &qword_1007B6CB8, IDSPseudonym_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1004669F0(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

uint64_t sub_10027A0D4()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dataForKey:", v1);

  if (!v2)
  {
    if (qword_1007B3D48 != -1)
      swift_once(&qword_1007B3D48, sub_100278D4C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100221DF8(v8, (uint64_t)qword_1007B6C90);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No current pseudonym to load", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    return 0;
  }
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  sub_100221EDC(0, &qword_1007B6CA8, NSKeyedUnarchiver_ptr);
  v6 = sub_100221EDC(0, &qword_1007B6CB8, IDSPseudonym_ptr);
  v7 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v6, v3, v5, v6);
  v13 = v7;
  if (!v7)
  {
    if (qword_1007B3D48 != -1)
      swift_once(&qword_1007B3D48, sub_100278D4C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100221DF8(v15, (uint64_t)qword_1007B6C90);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No valid current pseudonym to load", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    sub_100225AB4(v3, v5);

    return 0;
  }
  sub_100225AB4(v3, v5);
  return v13;
}

_QWORD *sub_10027A4E8()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _QWORD *result;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD v64[3];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dataForKey:", v1);

  if (!v2)
  {
    if (qword_1007B3D48 != -1)
      swift_once(&qword_1007B3D48, sub_100278D4C);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100221DF8(v16, (uint64_t)qword_1007B6C90);
    v10 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v18, "No pseudonyms to revoke to load", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    goto LABEL_48;
  }
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  sub_100221EDC(0, &qword_1007B6CA8, NSKeyedUnarchiver_ptr);
  v6 = sub_100008384(&qword_1007B6CB0);
  v7 = swift_allocObject(v6, 56, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF140;
  *(_QWORD *)(v7 + 32) = sub_100221EDC(0, (unint64_t *)&unk_1007B5230, NSDictionary_ptr);
  *(_QWORD *)(v7 + 40) = sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
  *(_QWORD *)(v7 + 48) = sub_100221EDC(0, &qword_1007B6CB8, IDSPseudonym_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&v63, v7, v3, v5);
  swift_bridgeObjectRelease(v7);
  if (!v64[2])
  {
    sub_10000D0F0((uint64_t)&v63, (uint64_t *)&unk_1007B6890);
    goto LABEL_50;
  }
  v20 = sub_100008384(&qword_1007B6CC0);
  if ((swift_dynamicCast(&v62, &v63, (char *)&type metadata for Any + 8, v20, 6) & 1) == 0)
  {
LABEL_50:
    if (qword_1007B3D48 != -1)
      swift_once(&qword_1007B3D48, sub_100278D4C);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100221DF8(v52, (uint64_t)qword_1007B6C90);
    v54 = Logger.logObject.getter(v53);
    v55 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "No valid pseudonyms to revoke", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }
    sub_100225AB4(v3, v5);

    return &_swiftEmptyDictionarySingleton;
  }
  v58 = v5;
  v59 = v3;
  v21 = v62;
  v22 = (_QWORD *)sub_10021E9C0((uint64_t)_swiftEmptyArrayStorage);
  v60 = v21 + 64;
  v23 = 1 << *(_BYTE *)(v21 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v21 + 64);
  v61 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(v21);
  v26 = 0;
  while (1)
  {
    if (v25)
    {
      v29 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v30 = v29 | (v26 << 6);
    }
    else
    {
      v31 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_60;
      if (v31 >= v61)
      {
LABEL_57:
        swift_release(v21);
        sub_100225AB4(v59, v58);
        swift_bridgeObjectRelease(v21);
        return v22;
      }
      v32 = *(_QWORD *)(v60 + 8 * v31);
      ++v26;
      if (!v32)
      {
        v26 = v31 + 1;
        if (v31 + 1 >= v61)
          goto LABEL_57;
        v32 = *(_QWORD *)(v60 + 8 * v26);
        if (!v32)
        {
          v26 = v31 + 2;
          if (v31 + 2 >= v61)
            goto LABEL_57;
          v32 = *(_QWORD *)(v60 + 8 * v26);
          if (!v32)
          {
            v26 = v31 + 3;
            if (v31 + 3 >= v61)
              goto LABEL_57;
            v32 = *(_QWORD *)(v60 + 8 * v26);
            if (!v32)
            {
              v26 = v31 + 4;
              if (v31 + 4 >= v61)
                goto LABEL_57;
              v32 = *(_QWORD *)(v60 + 8 * v26);
              if (!v32)
              {
                v33 = v31 + 5;
                if (v33 >= v61)
                  goto LABEL_57;
                v32 = *(_QWORD *)(v60 + 8 * v33);
                if (!v32)
                {
                  while (1)
                  {
                    v26 = v33 + 1;
                    if (__OFADD__(v33, 1))
                      break;
                    if (v26 >= v61)
                      goto LABEL_57;
                    v32 = *(_QWORD *)(v60 + 8 * v26);
                    ++v33;
                    if (v32)
                      goto LABEL_35;
                  }
                  __break(1u);
LABEL_62:
                  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                  __break(1u);
                  return result;
                }
                v26 = v33;
              }
            }
          }
        }
      }
LABEL_35:
      v25 = (v32 - 1) & v32;
      v30 = __clz(__rbit64(v32)) + (v26 << 6);
    }
    v34 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v30);
    v36 = *v34;
    v35 = v34[1];
    v37 = *(void **)(*(_QWORD *)(v21 + 56) + 8 * v30);
    swift_bridgeObjectRetain(v35);
    v38 = v37;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    v63 = v22;
    v41 = sub_10045C200(v36, v35);
    v42 = v22[2];
    v43 = (v40 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      break;
    v45 = v40;
    if (v22[3] >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v22 = v63;
        if ((v40 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
        sub_10046ECC4();
        v22 = v63;
        if ((v45 & 1) != 0)
          goto LABEL_14;
      }
    }
    else
    {
      sub_1004669E4(v44, isUniquelyReferenced_nonNull_native);
      v46 = sub_10045C200(v36, v35);
      if ((v45 & 1) != (v47 & 1))
        goto LABEL_62;
      v41 = v46;
      v22 = v63;
      if ((v45 & 1) != 0)
      {
LABEL_14:
        v27 = v22[7];
        v28 = 8 * v41;

        *(_QWORD *)(v27 + v28) = v38;
        goto LABEL_15;
      }
    }
    v22[(v41 >> 6) + 8] |= 1 << v41;
    v48 = (uint64_t *)(v22[6] + 16 * v41);
    *v48 = v36;
    v48[1] = v35;
    *(_QWORD *)(v22[7] + 8 * v41) = v38;
    v49 = v22[2];
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (v50)
      goto LABEL_59;
    v22[2] = v51;
    swift_bridgeObjectRetain(v35);
LABEL_15:
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  swift_once(&qword_1007B3D48, sub_100278D4C);
  v8 = type metadata accessor for Logger(0);
  sub_100221DF8(v8, (uint64_t)qword_1007B6C90);
  swift_errorRetain(v21);
  v9 = swift_errorRetain(v21);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    swift_errorRetain(v21);
    v14 = _swift_stdlib_bridgeErrorToNSError(v21);
    v63 = (_QWORD *)v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v12 + 4);
    *v13 = v14;
    swift_errorRelease(v21);
    swift_errorRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to load pseudonyms to revoke with error: %@", v12, 0xCu);
    v15 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v21);
    return &_swiftEmptyDictionarySingleton;
  }
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
LABEL_48:

  return &_swiftEmptyDictionarySingleton;
}

ValueMetadata *type metadata accessor for SDPseudonymStorage()
{
  return &type metadata for SDPseudonymStorage;
}

uint64_t sub_10027ACA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007C4330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027ACE8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007D7FE0);
  sub_100221DF8(v0, (uint64_t)qword_1007D7FE0);
  return Logger.init(subsystem:category:)(0xD000000000000025, 0x8000000100613570, 0xD000000000000012, 0x80000001006135A0);
}

uint64_t HeadphoneProxFeatureClient.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate, v4, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1, v2);
}

uint64_t HeadphoneProxFeatureClient.delegate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate;
  swift_beginAccess(v3, v5, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*HeadphoneProxFeatureClient.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5, v6);
  return sub_10027AF10;
}

void sub_10027AF10(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unknownObjectWeakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

char *sub_10027AF7C()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_manager;
  type metadata accessor for HeadphoneProxFeatureManager(0);
  v3 = v0;
  *(_QWORD *)&v0[v2] = static HeadphoneProxFeatureManager.shared.getter();
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate], 0);

  v9.receiver = v3;
  v9.super_class = ObjectType;
  v4 = (char *)objc_msgSendSuper2(&v9, "init");
  v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_manager];
  v6 = sub_10027B614();
  v7 = v4;
  swift_retain(v5);
  dispatch thunk of HeadphoneProxFeatureManager.delegate.setter(v4, v6);
  swift_release(v5);

  return v7;
}

uint64_t HeadphoneProxFeatureClient.readyToShow(device:features:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v3 = v2;
  if (qword_1007B3D50 != -1)
    swift_once(&qword_1007B3D50, sub_10027ACE8);
  v6 = type metadata accessor for Logger(0);
  sub_100221DF8(v6, (uint64_t)qword_1007D7FE0);
  v7 = a1;
  swift_bridgeObjectRetain_n(a2, 2);
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v26 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = objc_msgSend(v8, "bluetoothAddress", v26);
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

    }
    else
    {
      v27 = 0;
      v28[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v17 = 0x8000000100612DF0;
      v15 = 0xD000000000000015;
    }
    v27 = sub_100228BD8(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v11 + 4);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2080;
    v18 = Array.description.getter(a2, &type metadata for String);
    v20 = v19;
    v27 = sub_100228BD8(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v11 + 14);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "HeadphoneProxFeatureService: [Sharing] Features Ready To Show: Device: %s, Features: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v21 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate;
  swift_beginAccess(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate, &v27, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v21, v22);
  if (result)
  {
    v24 = (void *)result;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v24, "readyToShowWithDevice:features:", v8, isa);

    return swift_unknownObjectRelease(v24);
  }
  return result;
}

Swift::Bool __swiftcall HeadphoneProxFeatureClient.shouldShowWhatsNewCard(deviceAddress:)(Swift::String deviceAddress)
{
  void *object;
  uint64_t countAndFlagsBits;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  object = deviceAddress._object;
  countAndFlagsBits = deviceAddress._countAndFlagsBits;
  v3 = dispatch thunk of HeadphoneProxFeatureManager.shouldShowWhatsNewCard(deviceAddress:)();
  if (qword_1007B3D50 != -1)
    swift_once(&qword_1007B3D50, sub_10027ACE8);
  v4 = type metadata accessor for Logger(0);
  sub_100221DF8(v4, (uint64_t)qword_1007D7FE0);
  v5 = swift_bridgeObjectRetain_n(object, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(object);
    v13 = sub_100228BD8(countAndFlagsBits, (unint64_t)object, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4);
    swift_bridgeObjectRelease_n(object, 3);
    *(_WORD *)(v8 + 12) = 2080;
    if ((v3 & 1) != 0)
      v10 = 5457241;
    else
      v10 = 20302;
    if ((v3 & 1) != 0)
      v11 = 0xE300000000000000;
    else
      v11 = 0xE200000000000000;
    v13 = sub_100228BD8(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 14);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "HeadphoneProxFeatureService: [Sharing] Should Show Whats New Card for Device: %s -> %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(object, 2);
  }
  return v3 & 1;
}

uint64_t type metadata accessor for HeadphoneProxFeatureClient()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient);
}

unint64_t sub_10027B614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B6D00;
  if (!qword_1007B6D00)
  {
    v1 = type metadata accessor for HeadphoneProxFeatureClient();
    result = swift_getWitnessTable(&protocol conformance descriptor for HeadphoneProxFeatureClient, v1);
    atomic_store(result, (unint64_t *)&qword_1007B6D00);
  }
  return result;
}

uint64_t sub_10027B658(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[32];
  uint64_t v44;

  v32 = a5;
  v33 = a8;
  v38 = a1;
  v39 = a2;
  v31 = *(_QWORD *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v40 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8));
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = ((uint64_t (*)(void))__chkstk_darwin)();
  v36 = (char *)&v29 - v16;
  v41 = a4;
  __chkstk_darwin(v15);
  v35 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_getAssociatedTypeWitness(0, a6);
  v34 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v29 - v19;
  v21 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v21)
    return static Array._allocateUninitialized(_:)(0, v41);
  v22 = v21;
  v30 = v18;
  v23 = v41;
  v44 = ContiguousArray.init()(v41);
  v37 = type metadata accessor for ContiguousArray(0, v23);
  ContiguousArray.reserveCapacity(_:)(v22);
  v41 = v20;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v26 = v35;
    v25 = v36;
    while (1)
    {
      v27 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v43, v41, a3, a6);
      (*(void (**)(char *))(v14 + 16))(v25);
      v27(v43, 0);
      v28 = v42;
      v38(v25, v40);
      if (v28)
        break;
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v26, v37);
      dispatch thunk of Collection.formIndex(after:)(v41, a3, a6);
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
        return v44;
      }
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
    swift_release(v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v40, v32);
  }
  return result;
}

void URL.realPathURL()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSURL *v6;
  char *v7;
  const __CFURL *v8;
  const __CFURL *v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  NSString *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  CFURLRef v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[40];
  uint64_t v38;

  v3 = type metadata accessor for URLResourceValues(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (NSURL *)((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)((char *)&v34 - (char *)v6);
  URL._bridgeToObjectiveC()(v6);
  v9 = v8;
  v10 = (__CFString *)CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);

  if (v10)
  {
    v38 = a1;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;
    v14 = String.utf8CString.getter(v11, v12);
    swift_bridgeObjectRelease(v13);
    v15 = realpath_DARWIN_EXTSN((const char *)(v14 + 32), 0);
    swift_release(v14);
    if (!v15)
      goto LABEL_9;
    v16 = String.init(cString:)(v15);
    v18 = v17;
    free(v15);
    v35 = v16;
    v36 = v18;
    v19 = String.utf8CString.getter(v16, v18);
    v34 = strlen((const char *)(v19 + 32));
    swift_release(v19);
    v20 = sub_100008384(&qword_1007B6D20);
    inited = swift_initStackObject(v20, v37);
    *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
    *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
    v22 = NSURLIsDirectoryKey;
    v23 = sub_100282EF4(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy(inited + 32, 1, v24);
    URL.resourceValues(forKeys:)(v23);
    if (v1)
    {

      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v23);
      return;
    }
    v26 = swift_bridgeObjectRelease(v23);
    v27 = URLResourceValues.isDirectory.getter(v26);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v28 = v36;
    v29 = String.utf8CString.getter(v35, v36);
    swift_bridgeObjectRelease(v28);
    v30 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)(v29 + 32), v34, v27 & 1);
    swift_release(v29);
    if (v30)
    {
      v31 = v38;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v30);

      v32 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
    }
    else
    {
LABEL_9:
      v33 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v38, 1, 1, v33);

    }
  }
  else
  {
    v25 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 1, 1, v25);
  }
}

uint64_t sub_10027BC10(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v50 = a8;
  v51 = a5;
  v9 = v8;
  v63 = a4;
  v64 = a1;
  v65 = a2;
  v49 = *(_QWORD *)(a5 - 8);
  v11 = __chkstk_darwin(a1);
  v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (char *)&v46 - v13;
  v55 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v48 = (char *)&v46 - v19;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v52 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v21 = __chkstk_darwin(v20);
  v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v26 = __chkstk_darwin(v23);
  v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v46 - v29;
  v58 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v28);
  v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = swift_getAssociatedTypeWitness(0, a6);
  v54 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v56 = (char *)&v46 - v32;
  v33 = v16;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  v35 = v63;
  v67 = ContiguousArray.init()(v63);
  v63 = type metadata accessor for ContiguousArray(0, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, _QWORD, _QWORD *))(v58 + 16))(v57, v60, v16);
  v36 = v56;
  v60 = v33;
  v37 = v33;
  v38 = v55;
  result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v34)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        v41 = v59;
        v42 = v66;
        goto LABEL_9;
      }
    }
  }
  v42 = v66;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }
  else
  {
    v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v47;
    v45 = v48;
    v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }
}

uint64_t SDRunState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10027C158 + 4 * byte_1005CFD20[a1]))(0x7472617453746F6ELL, 0xEA00000000006465);
}

uint64_t sub_10027C158()
{
  return 0x6572676F72506E69;
}

uint64_t sub_10027C170()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_10027C18C()
{
  return 0x64656C696166;
}

uint64_t sub_10027C1A0()
{
  return 1885956979;
}

void sub_10027C1B0(char *a1)
{
  sub_1004A847C(*a1);
}

void sub_10027C1BC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10027C20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + 3854;
  String.hash(into:)(&v3, 0x6572676F72506E69, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

void sub_10027C28C()
{
  __asm { BR              X10 }
}

uint64_t sub_10027C2CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + 3854;
  String.hash(into:)(a1, 0x6572676F72506E69, v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_10027C338()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10027C384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + 3854;
  String.hash(into:)(&v3, 0x6572676F72506E69, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

unint64_t sub_10027C404@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s16DaemoniOSLibrary10SDRunStateO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10027C430()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10027C464 + 4 * byte_1005CFD34[*v0]))();
}

void sub_10027C464(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6572676F72506E69;
  a1[1] = v1 + 3854;
}

void sub_10027C480(_QWORD *a1@<X8>)
{
  *a1 = 0x6574656C706D6F63;
  a1[1] = 0xE900000000000064;
}

void sub_10027C4A0(_QWORD *a1@<X8>)
{
  *a1 = 0x64656C696166;
  a1[1] = 0xE600000000000000;
}

void sub_10027C4B8(_QWORD *a1@<X8>)
{
  *a1 = 1885956979;
  a1[1] = 0xE400000000000000;
}

uint64_t Optional<A>.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v18);
    v17 = 0x6C616E6F6974704FLL;
    v18 = 0xE90000000000003CLL;
    v12._countAndFlagsBits = _typeName(_:qualified:)(v3, 0);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    v14._countAndFlagsBits = 0x656E6F6E2E3ELL;
    v14._object = (void *)0xE600000000000000;
    String.append(_:)(v14);
    return v17;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v3, a2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v15;
}

uint64_t sub_10027C64C(uint64_t a1, uint64_t a2)
{
  return Optional<A>.description.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_10027C654()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Int sub_10027C678()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10027C6B8()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10027C6DC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10027C718(const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t WitnessTable;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AssociatedConformanceWitness;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  char *v53;
  uint64_t AssociatedTypeWitness;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[4];
  uint64_t v63;

  v60 = a7;
  v61 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v59 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v14;
  v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v56);
  __chkstk_darwin(AssociatedTypeWitness);
  v53 = (char *)&v48 - v15;
  v58 = a6;
  v16 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  v17 = *(_QWORD *)(v16 + 8);
  v18 = type metadata accessor for EnumeratedSequence(0, a4, v17);
  v50 = *(_QWORD *)(v18 - 8);
  v51 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v48 - v19;
  v52 = a1;
  v57 = a4;
  v21 = dispatch thunk of Collection.count.getter(a4, v16);
  v22 = a2;
  v23 = a2;
  v24 = a5;
  v25 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v23, a5);
  v26 = v21 * v25;
  if ((unsigned __int128)(v21 * (__int128)v25) >> 64 == (v21 * v25) >> 63)
  {
    v27 = v63;
    if (v26 == dispatch thunk of static FixedWidthInteger.bitWidth.getter(a3, v63))
    {
      v28 = v57;
      v29 = Sequence.enumerated()(v57, v17);
      v48 = (uint64_t)&v48;
      __chkstk_darwin(v29);
      v49 = v22;
      *(&v48 - 6) = v22;
      *(&v48 - 5) = a3;
      *(&v48 - 4) = v28;
      *(&v48 - 3) = v24;
      v30 = v24;
      v31 = v58;
      *(&v48 - 2) = v27;
      *(&v48 - 1) = v31;
      v32 = v51;
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v51);
      v34 = v55;
      v36 = (const char *)sub_10027BC10((void (*)(char *, char *))sub_100287E18, (uint64_t)(&v48 - 8), v32, a3, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v35);
      v55 = v36;
      v52 = v34;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v32);
      v62[0] = v36;
      v37 = v56;
      v38 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v56, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v40 = v53;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1005D0548, 256, v38, AssociatedConformanceWitness);
      v41 = v59;
      v42 = dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v40, a3, v37);
      __chkstk_darwin(v42);
      *(&v48 - 6) = v49;
      *(&v48 - 5) = a3;
      *(&v48 - 4) = v28;
      *(&v48 - 3) = v30;
      *(&v48 - 2) = v63;
      *(&v48 - 1) = v31;
      v43 = type metadata accessor for Array(0, a3);
      v44 = swift_getWitnessTable(&protocol conformance descriptor for [A], v43);
      Sequence.reduce<A>(_:_:)(v41, sub_100287E3C, &v48 - 8, v43, a3, v44);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v41, a3);
      swift_bridgeObjectRelease(v55);
    }
    else
    {
      v62[0] = v22;
      v62[1] = a3;
      v62[2] = v24;
      v62[3] = v27;
      v45 = type metadata accessor for IntegerPacker.PackError(0, (uint64_t)v62);
      v46 = swift_getWitnessTable(&unk_1005D0428, v45);
      v47 = swift_allocError(v45, v46, 0, 0);
      swift_willThrow(v47);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10027CADC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t result;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v40 = a4;
  v41 = a1;
  v39 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, a2, "offset element ", 0);
  v11 = __chkstk_darwin(TupleTypeMetadata2);
  v12 = *(_QWORD *)(a3 - 8);
  v13 = __chkstk_darwin(v11);
  v42 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v44 = (char *)&v36 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v36 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v36 - v21;
  v23 = __chkstk_darwin(v20);
  v43 = (char *)&v36 - v24;
  v25 = *(int *)(v23 + 48);
  v27 = v26 + v25;
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v26 + v25, (char *)a1 + v25, a2);
  v28 = *(_QWORD *)(a5 + 8);
  v29 = v40;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v27, a2, *(_QWORD *)(v40 + 8), a3, v28);
  v45 = 0;
  v30 = sub_100287E70();
  dispatch thunk of BinaryInteger.init<A>(_:)(&v45, &type metadata for Int, v30, a3, v28);
  dispatch thunk of static BinaryInteger.~ prefix(_:)(v19, a3, v28);
  v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  v31(v19, a3);
  v45 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a2, v29);
  v38 = v22;
  v37 = v30;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v22, &v45, &type metadata for Int, v30, a3, v28);
  v32 = v42;
  dispatch thunk of static BinaryInteger.~ prefix(_:)(v19, a3, v28);
  dispatch thunk of static BinaryInteger.& infix(_:_:)(v43, v32, a3, v28);
  v31(v32, a3);
  v33 = *v41;
  result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a2, v29);
  if ((unsigned __int128)(v33 * (__int128)result) >> 64 == (v33 * result) >> 63)
  {
    v45 = v33 * result;
    dispatch thunk of BinaryInteger.init<A>(_:)(&v45, &type metadata for Int, v37, a3, v28);
    v35 = v44;
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v44, v32, a3, v28, a3, v28);
    v31(v32, a3);
    v31(v35, a3);
    v31(v19, a3);
    v31(v38, a3);
    return ((uint64_t (*)(char *, uint64_t))v31)(v43, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027CDF4(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  const char **v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  _QWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t (*v89)(char *, uint64_t);
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t TupleTypeMetadata2;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[4];
  const char *v112;

  v85 = a7;
  v86 = a6;
  v102 = a2;
  v103 = a8;
  v12 = *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v14 = __chkstk_darwin(TupleTypeMetadata2);
  v97 = (char *)v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98 = (char *)v83 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, a5, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.Index: Comparable);
  v18 = type metadata accessor for Range(0, AssociatedTypeWitness);
  v95 = *(_QWORD *)(v18 - 8);
  v96 = v18;
  v19 = __chkstk_darwin(v18);
  v94 = (char *)v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v93 = (char *)v83 - v21;
  v104 = swift_getAssociatedTypeWitness(0, v12);
  v92 = *(_QWORD *)(v104 - 8);
  v22 = __chkstk_darwin(v104);
  v91 = (char *)v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v90 = (char *)v83 - v25;
  v109 = AssociatedTypeWitness;
  v100 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = __chkstk_darwin(v24);
  v106 = (char *)v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)v83 - v28;
  v107 = v12;
  v108 = a1;
  v101 = a5;
  v30 = dispatch thunk of Collection.count.getter(a5, v12);
  v84 = a3;
  result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a3, v86);
  v32 = v30 * result;
  if ((unsigned __int128)(v30 * (__int128)result) >> 64 != (v30 * result) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v33 = a4;
  v34 = v85;
  result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a4, v85);
  if (result)
  {
    if (v32 == 0x8000000000000000 && result == -1)
      goto LABEL_20;
    if (v32 % result)
    {
      v111[0] = v84;
      v111[1] = a4;
      v111[2] = v86;
      v111[3] = v34;
      v36 = type metadata accessor for IntegerPacker.PackError(0, (uint64_t)v111);
      WitnessTable = swift_getWitnessTable(&unk_1005D0428, v36);
      v38 = swift_allocError(v36, WitnessTable, 0, 0);
      swift_willThrow(v38);
      return (uint64_t)v33;
    }
    v83[0] = a4;
    v111[0] = static Array._allocateUninitialized(_:)(0, v104);
    v39 = v107;
    v40 = v101;
    dispatch thunk of Collection.startIndex.getter(v101);
    v41 = v106;
    v42 = v39;
    v43 = v40;
    dispatch thunk of Collection.endIndex.getter(v40, v42);
    v44 = v109;
    v45 = dispatch thunk of static Comparable.< infix(_:_:)(v29, v41, v109, AssociatedConformanceWitness);
    v89 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
    v46 = v89(v41, v44);
    if ((v45 & 1) == 0)
    {
LABEL_13:
      v112 = (const char *)v111[0];
      __chkstk_darwin(v46);
      v72 = (char *)v83[0];
      v83[-8] = v84;
      v83[-7] = v72;
      v73 = v86;
      v83[-6] = v74;
      v83[-5] = v73;
      v76 = v103;
      v75 = v104;
      v83[-4] = v85;
      v83[-3] = v76;
      v83[-2] = v102;
      v77 = type metadata accessor for Array(0, v75);
      v78 = sub_100008384(&qword_1007B5A60);
      v79 = swift_getWitnessTable(&protocol conformance descriptor for [A], v77);
      v33 = &v112;
      v80 = v83[1];
      v81 = sub_10027B658((void (*)(char *, char *))sub_100287F6C, (uint64_t)&v83[-10], v77, v72, v78, v79, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v110);
      if (!v80)
        v33 = (const char **)v81;
      v82 = swift_bridgeObjectRelease(v112);
      ((void (*)(char *, uint64_t, __n128))v89)(v29, v109, v82);
      return (uint64_t)v33;
    }
    v88 = v29;
    v87 = AssociatedConformanceWitness;
    v47 = v109;
    while (1)
    {
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)(v29, v102, v43, v103);
      result = dispatch thunk of static Comparable.<= infix(_:_:)(v29, v41);
      if ((result & 1) == 0)
        break;
      v48 = v98;
      v49 = TupleTypeMetadata2;
      v50 = &v98[*(int *)(TupleTypeMetadata2 + 48)];
      v51 = v100;
      v52 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
      v52(v98, v29, v47);
      v52(v50, v106, v47);
      v53 = v97;
      v54 = &v97[*(int *)(v49 + 48)];
      v52(v97, v48, v47);
      v52(v54, v50, v47);
      v55 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v56 = v94;
      v55(v94, v53, v47);
      v57 = (void (*)(char *, uint64_t))v89;
      v89(v54, v47);
      v58 = &v53[*(int *)(v49 + 48)];
      v55(v53, v48, v47);
      v55(v58, v50, v47);
      v59 = v55;
      v105 = v55;
      v60 = v96;
      v61 = v101;
      v59(&v56[*(int *)(v96 + 36)], v58, v47);
      v57(v53, v47);
      v62 = v95;
      v63 = v93;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v93, v56, v60);
      v64 = v90;
      dispatch thunk of Collection.subscript.getter(v63, v61, v107);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v60);
      v65 = v92;
      v66 = v91;
      v67 = v104;
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v91, v64, v104);
      v68 = type metadata accessor for Array(0, v67);
      v69 = v66;
      v41 = v106;
      Array.append(_:)(v69, v68);
      v70 = v64;
      v43 = v61;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v67);
      v71 = v88;
      v57(v88, v47);
      v105(v71, v41, v47);
      dispatch thunk of Collection.endIndex.getter(v43, v107);
      v29 = v71;
      LOBYTE(v50) = dispatch thunk of static Comparable.< infix(_:_:)(v71, v41, v47, v87);
      v46 = ((uint64_t (*)(char *, uint64_t))v57)(v41, v47);
      if ((v50 & 1) == 0)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void sub_10027D54C(const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, _QWORD *a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, &protocol requirements base descriptor for RandomAccessCollection, &associated conformance descriptor for RandomAccessCollection.Collection.SubSequence: RandomAccessCollection);
  sub_10027C718(a1, a2, a3, AssociatedTypeWitness, a5, AssociatedConformanceWitness, a7);
  if (v17)
    *a8 = v17;
}

uint64_t PushableTimer.noLaterThan.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002834F0(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, a1);
}

uint64_t PushableTimer.__allocating_init(fireAt:noLaterThan:queue:handler:)(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v11 = sub_100284070(a1, a2, a3, a4, a5);

  swift_release(a5);
  return v11;
}

uint64_t PushableTimer.init(fireAt:noLaterThan:queue:handler:)(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = sub_100284070(a1, a2, a3, a4, a5);

  swift_release(a5);
  return v7;
}

uint64_t sub_10027D6F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DispatchTimeInterval.never(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_10027D73C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t PushableTimer.reschedule(deadline:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t ObjectType;
  void (*v25)(char *, _QWORD, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  char *v29;

  v29 = a1;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v9 = sub_100008384(&qword_1007B6D28);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTime(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  v28 = v1;
  sub_1002834F0(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    static DispatchTime.distantFuture.getter();
    sub_10000D0F0((uint64_t)v11, &qword_1007B6D28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  }
  v19 = sub_100220D78(&qword_1007B6D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime, (uint64_t)&protocol conformance descriptor for DispatchTime);
  v20 = v29;
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v16, v29, v12, v19) & 1) != 0)
  {
    v21 = v18;
    v22 = v16;
  }
  else
  {
    v21 = v18;
    v22 = v20;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v22, v12);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  ObjectType = swift_getObjectType(*(_QWORD *)(v28 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer));
  v25 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v25(v8, enum case for DispatchTimeInterval.never(_:), v2);
  *(_QWORD *)v6 = 0;
  v25(v6, enum case for DispatchTimeInterval.nanoseconds(_:), v2);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v18, v8, v6, ObjectType);
  v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v6, v2);
  v26(v8, v2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v18, v12);
}

Swift::Void __swiftcall PushableTimer.resume()()
{
  sub_10027DA20((uint64_t (*)(uint64_t))&OS_dispatch_source.resume());
}

Swift::Void __swiftcall PushableTimer.cancel()()
{
  sub_10027DA20((uint64_t (*)(uint64_t))&OS_dispatch_source.cancel());
}

uint64_t sub_10027DA20(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer));
  return a1(ObjectType);
}

uint64_t PushableTimer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  sub_10000D0F0(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, &qword_1007B6D28);
  swift_unknownObjectRelease(v2);
  return v1;
}

uint64_t PushableTimer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  sub_10000D0F0(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, &qword_1007B6D28);
  swift_unknownObjectRelease(v2);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t SDB389BubbleMonitor.allDevices.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t SDB389BubbleMonitor.allDevices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*SDB389BubbleMonitor.allDevices.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

void *SDB389BubbleMonitor.queue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 24, v4, 0, 0);
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void SDB389BubbleMonitor.queue.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 24, v4, 1, 0);
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

uint64_t (*SDB389BubbleMonitor.queue.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t SDB389BubbleMonitor.inBubbleCount.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
}

uint64_t SDB389BubbleMonitor.updateHandler.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 32, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 32);
  sub_1002845E4(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t SDB389BubbleMonitor.updateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 32, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return sub_1002845F4(v5, v6);
}

uint64_t (*SDB389BubbleMonitor.updateHandler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t SDB389BubbleMonitor.lostHandler.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 48, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 48);
  sub_1002845E4(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t SDB389BubbleMonitor.lostHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v2 + 48, v8, 1, 0);
  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return sub_1002845F4(v5, v6);
}

uint64_t (*SDB389BubbleMonitor.lostHandler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t SDB389BubbleMonitor.closestB389sInBubble.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _BYTE v6[24];

  swift_beginAccess(v0 + 80, v6, 0, 0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = swift_bridgeObjectRetain(v1);
  v5 = sub_10022922C(v2);
  sub_100281C04((uint64_t *)&v5);
  v3 = sub_10027DEEC((unint64_t)v5);
  swift_bridgeObjectRelease(v1);
  return v3;
}

uint64_t sub_10027DEEC(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v21 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v1);
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    v19 = swift_retain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
    v20 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v20 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v8 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        v9 = v21;
        if ((v21 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v21);
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1), v21);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v10 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v10)
            goto LABEL_34;
          v11 = *(id *)(v21 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v10)
            goto LABEL_37;
          v12 = (uint64_t)v11;
          v13 = *(id *)(v21 + 32 + 8 * v1);
        }
        v14 = v13;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v9 = sub_10026D800(v21);
          v21 = v9;
        }
        v15 = (v9 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v15 + 32) = v14;
        specialized Array._endMutation()(v16);
        v17 = v21;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v17 = sub_10026D800(v21);
          v21 = v17;
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v6 = (v17 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(_QWORD *)(v6 + 32) = v12;
        specialized Array._endMutation()(v7);
      }
      v5 = v8;
      if (v4 == v8)
        return v21;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_100229138(v1);
    v21 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t sub_10027E104(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = sub_10021EAD4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = (id)CUMainQueue(v3, v4, v5);
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_QWORD *)(v1 + 64) = objc_msgSend(objc_allocWithZone((Class)SFDeviceDiscovery), "init");
  v6 = sub_10021EAD4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v6;
  return v1;
}

void sub_10027E180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  double v7;
  NSString v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void **aBlock;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  void *v22;
  uint64_t v23;
  char v24[24];

  v3 = v2;
  v6 = *(void **)(v3 + 64);
  objc_msgSend(v6, "setChangeFlags:", 13);
  objc_msgSend(v6, "setDiscoveryFlags:", 2);
  *(_QWORD *)&v7 = swift_beginAccess(v3 + 24, v24, 0, 0).n128_u64[0];
  if (*(_QWORD *)(v3 + 24))
  {
    objc_msgSend(v6, "setDispatchQueue:", v7);
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setPurpose:", v8);

    v22 = sub_100287EFC;
    v23 = v3;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_1002C3A3C;
    v21 = &unk_10071F4F0;
    v9 = _Block_copy(&aBlock);
    v10 = v23;
    swift_retain();
    swift_release(v10);
    objc_msgSend(v6, "setDeviceFoundHandler:", v9);
    _Block_release(v9);
    v22 = sub_100287F04;
    v23 = v3;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_1004C4424;
    v21 = &unk_10071F518;
    v11 = _Block_copy(&aBlock);
    v12 = v23;
    swift_retain();
    swift_release(v12);
    objc_msgSend(v6, "setDeviceChangedHandler:", v11);
    _Block_release(v11);
    v22 = sub_100287F0C;
    v23 = v3;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_1002C3A3C;
    v21 = &unk_10071F540;
    v13 = _Block_copy(&aBlock);
    v14 = v23;
    swift_retain();
    swift_release(v14);
    objc_msgSend(v6, "setDeviceLostHandler:", v13);
    _Block_release(v13);
    v15 = swift_allocObject(&unk_10071F578, 32, 7);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    v22 = sub_100287F38;
    v23 = v15;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_1002D6B08;
    v21 = &unk_10071F590;
    v16 = _Block_copy(&aBlock);
    v17 = v23;
    swift_retain();
    swift_release(v17);
    objc_msgSend(v6, "activateWithCompletion:", v16);
    _Block_release(v16);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10027E410(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void (*v16)(char *, char *, uint64_t);
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*v25)(char *, char *, uint64_t);
  id v26;
  char isUniquelyReferenced_nonNull_native;
  const char *v28;
  __n128 v29;
  void (*v30)(char *, uint64_t, __n128);
  uint64_t v31;
  void *v32;
  __n128 v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  __n128 v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  id v46;
  char v47;
  const char *v48;
  __n128 v49;
  _QWORD v51[2];
  _QWORD v52[5];
  __int128 v53;
  __int128 v54;

  v4 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v4);
  v6 = (char *)&v51[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v51[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v51[-1] - v12;
  v14 = objc_msgSend(a1, "identifier");
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_10000D0F0((uint64_t)v6, &qword_1007B7280);
  }
  v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_10000D0F0((uint64_t)v6, &qword_1007B7280);
  v16(v13, v6, v7);
  v17 = objc_msgSend(a1, "bleDevice");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "advertisementFields");
    if (v19)
    {
      v20 = v19;
      v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v51[0] = 0x65707954627573;
      v51[1] = 0xE700000000000000;
      AnyHashable.init<A>(_:)(v52, v51, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v21 + 16) && (v22 = sub_10045C1D0((uint64_t)v52), (v23 & 1) != 0))
      {
        sub_10022E77C(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v53);
      }
      else
      {
        v53 = 0u;
        v54 = 0u;
      }
      swift_bridgeObjectRelease((const char *)v21);
      sub_10022E6C0((uint64_t)v52);
      if (*((_QWORD *)&v54 + 1))
      {
        if ((swift_dynamicCast(v51, &v53, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6) & 1) != 0
          && LOBYTE(v51[0]) == 5)
        {
          v25 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
          v25(v11, v13, v7);
          swift_beginAccess(a2 + 2, v52, 33, 0);
          v26 = a1;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2[2]);
          *(_QWORD *)&v53 = a2[2];
          a2[2] = 0x8000000000000000;
          sub_10046C088((uint64_t)v26, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
          v28 = (const char *)a2[2];
          a2[2] = v53;
          v29 = swift_bridgeObjectRelease(v28);
          v30 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
          v30(v11, v7, v29);
          swift_endAccess(v52);
          v31 = a2[9];
          if (v31 < 0)
          {
            v37 = (uint64_t)objc_msgSend(v18, "rssi");

            if (v37 < 0)
            {
              v44 = sub_100287F58(v37, v31);
              v38 = a2 + 10;
              if ((v44 & 0x80000000) == 0)
              {
                swift_beginAccess(a2 + 10, v52, 33, 0);
                v45 = (void *)sub_10026A478((uint64_t)v13);
                swift_endAccess(v52);

                v25(v11, v13, v7);
                swift_beginAccess(a2 + 10, v52, 33, 0);
                v46 = v26;
                v47 = swift_isUniquelyReferenced_nonNull_native(a2[10]);
                *(_QWORD *)&v53 = a2[10];
                a2[10] = 0x8000000000000000;
                sub_10046C088((uint64_t)v46, (uint64_t)v11, v47);
                v48 = (const char *)a2[10];
                a2[10] = v53;
                v49 = swift_bridgeObjectRelease(v48);
                v30(v11, v7, v49);
                swift_endAccess(v52);
                goto LABEL_25;
              }
LABEL_24:
              swift_beginAccess(v38, v52, 33, 0);
              v39 = (void *)sub_10026A478((uint64_t)v13);
              swift_endAccess(v52);

LABEL_25:
              v40 = swift_beginAccess(a2 + 4, v52, 0, 0);
              v41 = (void (*)(uint64_t))a2[4];
              if (v41)
              {
                v42 = a2[5];
                v43 = swift_retain();
                v41(v43);
                sub_1002845F4((uint64_t)v41, v42);
              }
              return ((uint64_t (*)(char *, uint64_t, __n128))v30)(v13, v7, v40);
            }
          }
          else
          {

          }
          v38 = a2 + 10;
          goto LABEL_24;
        }
      }
      else
      {
        sub_10000D0F0((uint64_t)&v53, (uint64_t *)&unk_1007B6890);
      }
    }

  }
  swift_beginAccess(a2 + 10, v52, 33, 0);
  v32 = (void *)sub_10026A478((uint64_t)v13);
  swift_endAccess(v52);

  v33 = swift_beginAccess(a2 + 4, v52, 0, 0);
  v34 = (void (*)(uint64_t))a2[4];
  if (v34)
  {
    v35 = a2[5];
    v36 = swift_retain();
    v34(v36);
    sub_1002845F4((uint64_t)v34, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v13, v7, v33);
}

void sub_10027E914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  const void *v5;

  v4 = objc_msgSend(*(id *)(a3 + 64), "deviceFoundHandler");
  if (v4)
  {
    v5 = v4;
    (*((void (**)(id, uint64_t))v4 + 2))(v4, a1);
    _Block_release(v5);
  }
}

uint64_t sub_10027E96C(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  void *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  void *v17;
  void *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  void (*v23)(_BYTE *);
  uint64_t v24;
  _BYTE v26[24];
  _BYTE v27[24];

  v4 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v26[-v12];
  v14 = objc_msgSend(a1, "identifier");
  if (!v14)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_10000D0F0((uint64_t)v6, &qword_1007B7280);
  }
  v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_10000D0F0((uint64_t)v6, &qword_1007B7280);
  v16(v13, v6, v7);
  swift_beginAccess(a2 + 2, v27, 33, 0);
  v17 = (void *)sub_10026A478((uint64_t)v13);
  swift_endAccess(v27);

  swift_beginAccess(a2 + 10, v27, 33, 0);
  v18 = (void *)sub_10026A478((uint64_t)v13);
  swift_endAccess(v27);

  swift_beginAccess(a2 + 4, v27, 0, 0);
  v19 = (void (*)(uint64_t))a2[4];
  if (v19)
  {
    v20 = a2[5];
    v21 = swift_retain();
    v19(v21);
    sub_1002845F4((uint64_t)v19, v20);
  }
  v22 = swift_beginAccess(a2 + 6, v26, 0, 0);
  v23 = (void (*)(_BYTE *))a2[6];
  if (v23)
  {
    v24 = a2[7];
    swift_retain();
    v23(v13);
    sub_1002845F4((uint64_t)v23, v24);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v8 + 8))(v13, v7, v22);
}

void sub_10027EBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;
  _BYTE v22[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v0 + 24, v22, 0, 0);
  v8 = *(void **)(v0 + 24);
  if (v8)
  {
    aBlock[4] = sub_100287ED4;
    v21 = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025BBB4;
    aBlock[3] = &unk_10071F4C8;
    v9 = _Block_copy(aBlock);
    v10 = v8;
    v11 = swift_retain();
    static DispatchQoS.unspecified.getter(v11);
    v19 = _swiftEmptyArrayStorage;
    v12 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v13 = sub_100008384((uint64_t *)&unk_1007B6410);
    v14 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v13, v14, v2, v12);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v9);
    _Block_release(v9);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
    swift_release(v21);
    swift_beginAccess(v1 + 32, aBlock, 1, 0);
    v15 = *(_QWORD *)(v1 + 32);
    v16 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    sub_1002845F4(v15, v16);
  }
  else
  {
    __break(1u);
  }
}

uint64_t SDB389BubbleMonitor.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  sub_1002845F4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_1002845F4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t SDB389BubbleMonitor.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  sub_1002845F4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_1002845F4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t b389VersionString(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint8_t *v13;
  uint64_t v14;
  Class isa;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3EA0 != -1)
    swift_once(&qword_1007B3EA0, sub_1002E9FA4);
  v8 = sub_100221DF8(v4, (uint64_t)qword_1007D82B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_10022E4A8(a1, a2);
  v9 = sub_10022E4A8(a1, a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v42 = v7;
  if (v12)
  {
    v40 = v5;
    v41 = v4;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v45[0] = v14;
    *(_DWORD *)v13 = 136315138;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v16 = (id)SFHexStringForData(isa);

    if (!v16)
    {
      result = sub_100225AB4(a1, a2);
      __break(1u);
      return result;
    }
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v43 = sub_100228BD8(v17, v19, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v13 + 4);
    swift_bridgeObjectRelease(v19);
    sub_100225AB4(a1, a2);
    sub_100225AB4(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "b389VersionString from %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v5 = v40;
    v4 = v41;
    v7 = v42;
  }
  else
  {

    sub_100225AB4(a1, a2);
    sub_100225AB4(a1, a2);
  }
  sub_100283704(a1, a2);
  v21 = (v20 >> 20) & 0xF;
  v22 = HIWORD(v20) & 0xF;
  v23 = (unsigned __int16)v20 >> 4;
  v24 = sub_100008384(&qword_1007B54A0);
  v25 = swift_allocObject(v24, 80, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1005CF140;
  LOBYTE(v45[0]) = v21;
  *(_QWORD *)(v25 + 32) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  *(_QWORD *)(v25 + 40) = v26;
  LOBYTE(v45[0]) = v22;
  *(_QWORD *)(v25 + 48) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  *(_QWORD *)(v25 + 56) = v27;
  LOWORD(v45[0]) = v23;
  *(_QWORD *)(v25 + 64) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
  *(_QWORD *)(v25 + 72) = v28;
  v45[0] = v25;
  v29 = sub_100008384((uint64_t *)&unk_1007BD6A0);
  v30 = sub_10026E2FC((unint64_t *)&qword_1007B6D40, (uint64_t *)&unk_1007BD6A0, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v29, v30);
  v33 = v32;
  swift_bridgeObjectRelease(v25);
  v34 = swift_bridgeObjectRetain_n(v33, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v45[0] = v38;
    *(_DWORD *)v37 = 136315138;
    swift_bridgeObjectRetain(v33);
    v43 = sub_100228BD8(v31, v33, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v37 + 4);
    swift_bridgeObjectRelease_n(v33, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Result version: %s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v42, v4);
  }
  else
  {

    swift_bridgeObjectRelease_n(v33, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v31;
}

uint64_t sub_10027F48C()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  int *v4;
  Swift::String v5;
  const char *object;
  Swift::String v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  Swift::String v11;
  Swift::String v12;
  const char *v13;
  Swift::String v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  Swift::String v18;
  Swift::String v19;
  const char *v20;
  Swift::String v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  Swift::String v27;
  __int128 v29;
  _QWORD v30[2];

  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(175);
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x80000001006136C0;
  String.append(_:)(v1);
  v2 = type metadata accessor for B389PresentationConfig.Mode(0);
  _print_unlocked<A, B>(_:_:)(v0, v30, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 0x43726F6C6F63202CLL;
  v3._object = (void *)0xED0000203A65646FLL;
  String.append(_:)(v3);
  v4 = (int *)type metadata accessor for B389PresentationConfig(0);
  LODWORD(v29) = *(_DWORD *)(v0 + v4[5]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  object = (const char *)v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object, (_QWORD)v29);
  v7._countAndFlagsBits = 0x7375655A7369202CLL;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  if (*(_BYTE *)(v0 + v4[6]))
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v4[6]))
    v9 = (const char *)0xE400000000000000;
  else
    v9 = (const char *)0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0xD000000000000012;
  v11._object = (void *)0x80000001006136E0;
  String.append(_:)(v11);
  LOBYTE(v29) = *(_BYTE *)(v0 + v4[7]);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v13 = (const char *)v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13, (_QWORD)v29);
  v14._object = (void *)0x8000000100613700;
  v14._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v14);
  if (*(_BYTE *)(v0 + v4[8]))
    v15 = 1702195828;
  else
    v15 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v4[8]))
    v16 = (const char *)0xE400000000000000;
  else
    v16 = (const char *)0xE500000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(v16);
  v18._object = (void *)0x8000000100613720;
  v18._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v18);
  *(_QWORD *)&v29 = *(_QWORD *)(v0 + v4[9]);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v20 = (const char *)v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20, (_QWORD)v29);
  v21._countAndFlagsBits = 0xD000000000000015;
  v21._object = (void *)0x8000000100613740;
  String.append(_:)(v21);
  v22 = (uint64_t *)(v0 + v4[10]);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  *(_QWORD *)&v29 = v23;
  BYTE8(v29) = (_BYTE)v22;
  DefaultStringInterpolation.appendInterpolation<A>(nilPrint:)(&v29, &type metadata for Double, &protocol witness table for Double);
  v24._object = (void *)0xED0000203A656D61;
  v24._countAndFlagsBits = 0x4E6E65766967202CLL;
  String.append(_:)(v24);
  v29 = *(_OWORD *)(v0 + v4[11]);
  DefaultStringInterpolation.appendInterpolation<A>(nilPrint:)(&v29, &type metadata for String, &protocol witness table for String);
  v25._object = (void *)0x8000000100613760;
  v25._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v25);
  v29 = *(_OWORD *)(v0 + v4[12]);
  v26 = sub_100287B60();
  DefaultStringInterpolation.appendInterpolation<A>(nilPrint:)(&v29, &type metadata for Data, v26);
  v27._countAndFlagsBits = 62;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return v30[0];
}

uint64_t sub_10027F7FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10027F828 + 4 * byte_1005CFD39[a1]))(1701080941, 0xE400000000000000);
}

uint64_t sub_10027F828()
{
  return 0x646F43726F6C6F63;
}

uint64_t sub_10027F8F4()
{
  return 0x6E69766172676E65;
}

uint64_t sub_10027F918()
{
  unsigned __int8 *v0;

  return sub_10027F7FC(*v0);
}

uint64_t sub_10027F920@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100285880(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10027F944()
{
  return 0;
}

void sub_10027F950(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10027F95C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100287B1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10027F984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100287B1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10027F9AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  char v29;
  __int128 v30;

  v3 = v1;
  v5 = sub_100008384(&qword_1007B72D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10023A834(a1, v9);
  v11 = sub_100287B1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for B389PresentationConfig.CodingKeys, &type metadata for B389PresentationConfig.CodingKeys, v11, v9, v10);
  LOBYTE(v30) = 0;
  v12 = type metadata accessor for B389PresentationConfig.Mode(0);
  v13 = sub_100220D78(&qword_1007B72E0, type metadata accessor for B389PresentationConfig.Mode, (uint64_t)&unk_1005D00F8);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v30, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for B389PresentationConfig(0);
    v15 = *(unsigned int *)(v3 + v14[5]);
    LOBYTE(v30) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v30, v5);
    v16 = *(unsigned __int8 *)(v3 + v14[6]);
    LOBYTE(v30) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v30, v5);
    v17 = *(unsigned __int8 *)(v3 + v14[7]);
    LOBYTE(v30) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v30, v5);
    v18 = *(unsigned __int8 *)(v3 + v14[8]);
    LOBYTE(v30) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v30, v5);
    v19 = *(_QWORD *)(v3 + v14[9]);
    LOBYTE(v30) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v30, v5);
    v20 = (uint64_t *)(v3 + v14[10]);
    v21 = *v20;
    v22 = *((unsigned __int8 *)v20 + 8);
    LOBYTE(v30) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v30, v5);
    v23 = (uint64_t *)(v3 + v14[11]);
    v24 = *v23;
    v25 = v23[1];
    LOBYTE(v30) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v30, v5);
    v30 = *(_OWORD *)(v3 + v14[12]);
    v29 = 8;
    v26 = sub_100285DE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v30, &v29, v5, &type metadata for Data, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10027FC58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  _QWORD v59[2];
  char v60;

  v50 = a2;
  v51 = type metadata accessor for B389PresentationConfig.Mode(0);
  __chkstk_darwin(v51);
  v52 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100008384(&qword_1007B72C0);
  v49 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for B389PresentationConfig(0);
  v7 = (int *)__chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v7[5];
  *(_DWORD *)&v9[v48] = 0;
  v47 = v7[6];
  v9[v47] = 0;
  v10 = v7[7];
  v9[v10] = 0;
  v11 = v7[8];
  v9[v11] = 0;
  v12 = v7[9];
  *(_QWORD *)&v9[v12] = -50;
  v13 = &v9[v7[10]];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v9[v7[11]];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v57 = v14;
  v55 = &v9[v7[12]];
  v56 = a1;
  *(_OWORD *)v55 = xmmword_1005CF260;
  v15 = a1[3];
  v16 = a1[4];
  sub_10023A834(a1, v15);
  v17 = sub_100287B1C();
  v53 = v5;
  v18 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for B389PresentationConfig.CodingKeys, &type metadata for B389PresentationConfig.CodingKeys, v17, v15, v16);
  if (v18)
  {
    sub_10022E75C(v56);
    v25 = v55;
    swift_bridgeObjectRelease(*((_QWORD *)v57 + 1));
    return sub_100225AA0(*(_QWORD *)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v58 = v10;
    v45 = v12;
    v46 = v11;
    v44 = (uint64_t *)v13;
    v19 = v49;
    v20 = v50;
    LOBYTE(v59[0]) = 0;
    v21 = sub_100220D78(&qword_1007B72D0, type metadata accessor for B389PresentationConfig.Mode, (uint64_t)&unk_1005D0120);
    v22 = (uint64_t)v52;
    v23 = v53;
    v24 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v59, v54, v51, v21);
    sub_100221DB4(v22, (uint64_t)v9, type metadata accessor for B389PresentationConfig.Mode);
    LOBYTE(v59[0]) = 1;
    v27 = v19;
    v26 = KeyedDecodingContainer.decode(_:forKey:)(v59, v24);
    *(_DWORD *)&v9[v48] = v26;
    LOBYTE(v59[0]) = 2;
    v28 = KeyedDecodingContainer.decode(_:forKey:)(v59, v24);
    v9[v47] = v28 & 1;
    LOBYTE(v59[0]) = 3;
    v29 = KeyedDecodingContainer.decode(_:forKey:)(v59, v24);
    v30 = v57;
    v9[v58] = v29;
    LOBYTE(v59[0]) = 4;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(v59, v54);
    v9[v46] = v31 & 1;
    LOBYTE(v59[0]) = 5;
    v32 = KeyedDecodingContainer.decode(_:forKey:)(v59, v54);
    *(_QWORD *)&v9[v45] = v32;
    LOBYTE(v59[0]) = 6;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v59, v54);
    v34 = v44;
    *v44 = v33;
    *((_BYTE *)v34 + 8) = v35 & 1;
    LOBYTE(v59[0]) = 7;
    *(_QWORD *)v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v59, v54);
    *((_QWORD *)v30 + 1) = v36;
    v60 = 8;
    v37 = sub_100285DA0();
    v38 = v54;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v59, &type metadata for Data, &v60, v54, &type metadata for Data, v37);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v38);
    v39 = v59[0];
    v40 = v59[1];
    v41 = v55;
    sub_100225AA0(*(_QWORD *)v55, *((_QWORD *)v55 + 1));
    *(_QWORD *)v41 = v39;
    *((_QWORD *)v41 + 1) = v40;
    sub_100244384((uint64_t)v9, v20, type metadata accessor for B389PresentationConfig);
    sub_10022E75C(v56);
    return sub_1002443C8((uint64_t)v9, type metadata accessor for B389PresentationConfig);
  }
}

uint64_t sub_1002800B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10027FC58(a1, a2);
}

uint64_t sub_1002800C8(_QWORD *a1)
{
  return sub_10027F9AC(a1);
}

void sub_1002800E4(char *a1)
{
  sub_1004A76B4(*a1);
}

void sub_1002800F0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_100280148()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x444955557462, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_1002801B8()
{
  __asm { BR              X10 }
}

uint64_t sub_100280200(uint64_t a1)
{
  String.hash(into:)(a1, 0x444955557462, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_10028025C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1002802B0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x444955557462, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100280320@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100285CB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10028034C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100280388 + 4 * byte_1005CFD4E[*v0]))();
}

void sub_100280388(_QWORD *a1@<X8>)
{
  *a1 = 0x444955557462;
  a1[1] = 0xE600000000000000;
}

void sub_1002803A0(_QWORD *a1@<X8>)
{
  *a1 = 0x69666E6F4363666ELL;
  a1[1] = 0xE900000000000067;
}

void sub_1002803C0(_QWORD *a1@<X8>)
{
  *a1 = 0x69746C754D7369;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1002803DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100280418 + 4 * byte_1005CFD52[*v0]))(0x6E65644965736163, 0xEE00726569666974);
}

uint64_t sub_100280418()
{
  return 0x444955557462;
}

uint64_t sub_10028042C()
{
  return 0x69666E6F4363666ELL;
}

uint64_t sub_100280448()
{
  return 0x69746C754D7369;
}

unint64_t sub_100280460@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100285CB4(a1);
  *a2 = result;
  return result;
}

void sub_100280484(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100280490(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100285D18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002804B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100285D18();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1002804E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1002804F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  _QWORD v48[2];
  char v49;

  v44 = a2;
  v45 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008384(&qword_1007B7248);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for B389PresentationConfig.Mode(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v46 = a1;
  sub_10023A834(a1, v12);
  v14 = sub_100285D18();
  v15 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for B389PresentationConfig.Mode.CodingKeys, &type metadata for B389PresentationConfig.Mode.CodingKeys, v14, v12, v13);
  if (v15)
    goto LABEL_3;
  v16 = v45;
  v47 = v11;
  v42 = v9;
  LOBYTE(v48[0]) = 0;
  v17 = KeyedDecodingContainer.decode(_:forKey:)(v48, v5);
  v18 = v5;
  v19 = v8;
  switch(v17)
  {
    case 0:
      LOBYTE(v48[0]) = 3;
      v27 = KeyedDecodingContainer.decode(_:forKey:)(v48, v5);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v20 = v46;
      v28 = 0;
      v29 = (uint64_t)v47;
      *v47 = v27 & 1;
LABEL_14:
      v38 = v44;
      swift_storeEnumTagMultiPayload(v29, v42, v28);
      sub_100221DB4(v29, v38, type metadata accessor for B389PresentationConfig.Mode);
      return sub_10022E75C(v20);
    case 1:
      LOBYTE(v48[0]) = 1;
      v30 = sub_100220D78(&qword_1007B7278, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = v16;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v48, v18, v16, v30);
      LOBYTE(v48[0]) = 3;
      v36 = KeyedDecodingContainer.decode(_:forKey:)(v48, v18);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
      v37 = *(int *)(sub_100008384(&qword_1007B70D8) + 48);
      v29 = (uint64_t)v47;
      (*(void (**)(_BYTE *, char *, uint64_t))(v43 + 32))(v47, v4, v31);
      *(_BYTE *)(v29 + v37) = v36 & 1;
      v28 = 1;
      v20 = v46;
      goto LABEL_14;
    case 2:
      v49 = 2;
      v22 = sub_100285DA0();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v49, v5, &type metadata for Data, v22);
      v24 = v48[0];
      v23 = v48[1];
      sub_100221EDC(0, &qword_1007B6CA8, NSKeyedUnarchiver_ptr);
      v25 = sub_100221EDC(0, &qword_1007B7270, SFB389NFCPromptConfiguration_ptr);
      v26 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v25, v24, v23, v25);
      v35 = v26;
      v20 = v46;
      if (!v26)
      {
        v39 = sub_100285D5C();
        v40 = swift_allocError(&type metadata for B389PresentationConfig.Mode.DecodeError, v39, 0, 0);
        *v41 = 0;
        swift_willThrow(v40);
        sub_100225AB4(v24, v23);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v18);
        return sub_10022E75C(v20);
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v18);
      sub_100225AB4(v24, v23);
      v29 = (uint64_t)v47;
      *(_QWORD *)v47 = v35;
      v28 = 2;
      goto LABEL_14;
  }
  v32 = sub_100285D5C();
  v33 = swift_allocError(&type metadata for B389PresentationConfig.Mode.DecodeError, v32, 0, 0);
  *v34 = 1;
  swift_willThrow(v33);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
  v20 = v46;
  return sub_10022E75C(v20);
}

uint64_t sub_100280964(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void **v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  id v78[2];

  v2 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v2);
  v69 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for B389PresentationConfig.Mode(0);
  v5 = __chkstk_darwin(v4);
  v68 = (void **)((char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v5);
  v70 = (char *)&v67 - v8;
  v9 = __chkstk_darwin(v7);
  v72 = (unsigned __int8 *)&v67 - v10;
  v11 = __chkstk_darwin(v9);
  v71 = (uint64_t)&v67 - v12;
  v13 = __chkstk_darwin(v11);
  v74 = (char *)&v67 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v67 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v67 - v18;
  v20 = sub_100008384(&qword_1007B7288);
  v73 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v23 = a1[4];
  sub_10023A834(a1, v24);
  v25 = sub_100285D18();
  v26 = v24;
  v27 = v75;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for B389PresentationConfig.Mode.CodingKeys, &type metadata for B389PresentationConfig.Mode.CodingKeys, v25, v26, v23);
  sub_100244384(v27, (uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v4);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v29 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v19, v29);
      v30 = 1;
    }
    else
    {
      sub_1002443C8((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
      v30 = 2;
    }
  }
  else
  {
    v30 = 0;
  }
  v31 = v22;
  v32 = (uint64_t)v74;
  LOBYTE(v78[0]) = 0;
  v33 = v76;
  KeyedEncodingContainer.encode(_:forKey:)(v30, v78, v20);
  if (v33)
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v31, v20);
  sub_100244384(v27, (uint64_t)v17, type metadata accessor for B389PresentationConfig.Mode);
  v35 = swift_getEnumCaseMultiPayload(v17, v4);
  if (v35)
  {
    if (v35 == 1)
    {
      v36 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v17, v36);
    }
    else
    {
      sub_1002443C8((uint64_t)v17, type metadata accessor for B389PresentationConfig.Mode);
    }
    sub_100244384(v27, v32, type metadata accessor for B389PresentationConfig.Mode);
    v38 = v71;
    sub_100244384(v32, v71, type metadata accessor for B389PresentationConfig.Mode);
    v39 = swift_getEnumCaseMultiPayload(v38, v4);
    v37 = (uint64_t)v70;
    if (!v39)
    {
      sub_1002443C8(v32, type metadata accessor for B389PresentationConfig.Mode);
      goto LABEL_24;
    }
    if (v39 != 1)
    {
      sub_1002443C8(v71, type metadata accessor for B389PresentationConfig.Mode);
      sub_1002443C8(v32, type metadata accessor for B389PresentationConfig.Mode);
      goto LABEL_24;
    }
    v40 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v71, v40);
  }
  else
  {
    sub_100244384(v27, v32, type metadata accessor for B389PresentationConfig.Mode);
    v37 = (uint64_t)v70;
  }
  sub_1002443C8(v32, type metadata accessor for B389PresentationConfig.Mode);
  v41 = v72;
  sub_100244384(v27, (uint64_t)v72, type metadata accessor for B389PresentationConfig.Mode);
  v42 = swift_getEnumCaseMultiPayload(v41, v4);
  if (v42)
  {
    if (v42 == 1)
    {
      v43 = sub_100008384(&qword_1007B70D8);
      v44 = v72;
      v45 = v72[*(int *)(v43 + 48)];
      v46 = type metadata accessor for UUID(0);
      (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v44, v46);
    }
    else
    {
      sub_1002443C8((uint64_t)v72, type metadata accessor for B389PresentationConfig.Mode);
      v45 = 0;
    }
  }
  else
  {
    v45 = *v72;
  }
  LOBYTE(v78[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v45, v78, v20);
LABEL_24:
  sub_100244384(v27, v37, type metadata accessor for B389PresentationConfig.Mode);
  v47 = v4;
  v48 = swift_getEnumCaseMultiPayload(v37, v4);
  v49 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v49 - 8);
  if (v48 == 1)
  {
    v51 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v69, v37, v49);
    v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56);
    v53 = (uint64_t)v51;
    v52(v51, 0, 1, v49);
  }
  else
  {
    v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
    v53 = (uint64_t)v69;
    v54(v69, 1, 1, v49);
    sub_1002443C8(v37, type metadata accessor for B389PresentationConfig.Mode);
  }
  LOBYTE(v78[0]) = 1;
  v55 = sub_100220D78(&qword_1007B7290, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v53, v78, v20, v49, v55);
  sub_10000D0F0(v53, &qword_1007B7280);
  v56 = v68;
  sub_100244384(v27, (uint64_t)v68, type metadata accessor for B389PresentationConfig.Mode);
  if (swift_getEnumCaseMultiPayload(v56, v47) != 2)
  {
    sub_1002443C8((uint64_t)v56, type metadata accessor for B389PresentationConfig.Mode);
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v31, v20);
  }
  v57 = *v56;
  v58 = (void *)objc_opt_self(NSKeyedArchiver);
  v78[0] = 0;
  v59 = objc_msgSend(v58, "archivedDataWithRootObject:requiringSecureCoding:error:", v57, 1, v78);
  v60 = v78[0];
  if (!v59)
  {
    v65 = v60;
    _convertNSErrorToError(_:)(v60);

    swift_willThrow(v66);
    return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v31, v20);
  }
  v61 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
  v63 = v62;

  v78[0] = v61;
  v78[1] = v63;
  v77 = 2;
  v64 = sub_100285DE4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v78, &v77, v20, &type metadata for Data, v64);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v31, v20);

  return sub_100225AB4((uint64_t)v61, (unint64_t)v63);
}

uint64_t sub_100281028@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002804F8(a1, a2);
}

uint64_t sub_10028103C(_QWORD *a1)
{
  return sub_100280964(a1);
}

void *sub_100281050()
{
  void *result;

  result = (void *)sub_10021EAE8((uint64_t)_swiftEmptyArrayStorage);
  off_1007B6D10 = result;
  return result;
}

uint64_t sub_100281074()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_100008384((uint64_t *)&unk_1007B7360);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  qword_1007B6D18 = result;
  return result;
}

uint64_t sub_1002810A8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  if (qword_1007B3D60 != -1)
    swift_once(&qword_1007B3D60, sub_100281074);
  v1 = qword_1007B6D18;
  v2 = (os_unfair_lock_s *)(qword_1007B6D18 + 16);
  swift_retain(qword_1007B6D18);
  os_unfair_lock_lock(v2);
  sub_1003356EC(v3, (uint64_t (*)(void))sub_100287EB4);
  os_unfair_lock_unlock(v2);
  swift_release(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

_QWORD *sub_100281154(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  void *v13;
  uint64_t v14;
  char v15;
  void *v16;

  if (qword_1007B3D58 != -1)
    swift_once(&qword_1007B3D58, sub_100281050);
  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  swift_beginAccess(&off_1007B6D10, &v14, 32, 0);
  v4 = off_1007B6D10;
  if (*((_QWORD *)off_1007B6D10 + 2))
  {
    swift_bridgeObjectRetain(v2);
    v5 = sub_10045C200(v3, v2);
    if ((v6 & 1) != 0)
      v7 = *(_QWORD *)(v4[7] + 8 * v5);
    else
      v7 = 0;
    v8 = v6 ^ 1;
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  swift_endAccess(&v14);
  v14 = v7;
  v15 = v8 & 1;
  v9 = sub_100008384(&qword_1007B7358);
  result = Optional.unwrap(_:file:line:)(&v16, sub_100287ECC, a1, "DaemoniOSLibrary/SDCommonSwifty.swift", 37, 2, 610, v9);
  v11 = (uint64_t)v16 - 1;
  if (v16 == (void *)1)
  {
    swift_beginAccess(&off_1007B6D10, &v14, 33, 0);
    swift_bridgeObjectRetain(v2);
    sub_10026A584(v3, v2);
    swift_endAccess(&v14);
    return (_QWORD *)swift_bridgeObjectRelease(v2);
  }
  else if (v16)
  {
    swift_beginAccess(&off_1007B6D10, &v14, 33, 0);
    swift_bridgeObjectRetain(v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_1007B6D10);
    v16 = off_1007B6D10;
    off_1007B6D10 = (_UNKNOWN *)0x8000000000000000;
    sub_10046C094(v11, v3, v2, isUniquelyReferenced_nonNull_native);
    v13 = off_1007B6D10;
    off_1007B6D10 = v16;
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v13);
    return (_QWORD *)swift_endAccess(&v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100281344(Swift::String *a1)
{
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(23);
  v2._object = (void *)0x80000001006137C0;
  v2._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  String.append(_:)(a1[1]);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t sub_1002813C4()
{
  uint64_t v0;

  sub_1002810A8();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t URL.fileUTType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t inited;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v12[40];

  v1 = type metadata accessor for URLResourceValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100008384(&qword_1007B6D20);
  inited = swift_initStackObject(v5, v12);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = NSURLContentTypeKey;
  v7 = NSURLContentTypeKey;
  v8 = sub_100282EF4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v9);
  URL.resourceValues(forKeys:)(v8);
  result = swift_bridgeObjectRelease(v8);
  if (!v0)
  {
    URLResourceValues.contentType.getter(result);
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.fileTypeIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  _BYTE v17[40];

  v2 = type metadata accessor for URLResourceValues(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100008384(&qword_1007B6D20);
  inited = swift_initStackObject(v6, v17);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = NSURLTypeIdentifierKey;
  v8 = NSURLTypeIdentifierKey;
  v9 = sub_100282EF4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v10);
  URL.resourceValues(forKeys:)(v9);
  v11 = swift_bridgeObjectRelease(v9);
  if (!v1)
  {
    v0 = URLResourceValues.typeIdentifier.getter(v11);
    inited = v12;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v13 = v0;
  v14 = (void *)inited;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.fileSize()()
{
  uint64_t (*v0)(uint64_t);
  Swift::Bool v1;
  Swift::Int_optional result;

  v0 = sub_1002817AC((void **)&NSURLFileSizeKey, (uint64_t (*)(uint64_t))&URLResourceValues.fileSize.getter);
  result.value = (Swift::Int)v0;
  result.is_nil = v1;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.isDirectory()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t inited;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  _BYTE v15[40];

  v1 = type metadata accessor for URLResourceValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100008384(&qword_1007B6D20);
  inited = swift_initStackObject(v5, v15);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
  v7 = NSURLIsDirectoryKey;
  v8 = sub_100282EF4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v9);
  URL.resourceValues(forKeys:)(v8);
  v10 = swift_bridgeObjectRelease(v8);
  if (!v0)
  {
    v12 = URLResourceValues.isDirectory.getter(v10);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v11 = v12 & 1;
  }
  return v11 & 1;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.availableStorage()()
{
  uint64_t (*v0)(uint64_t);
  Swift::Bool v1;
  Swift::Int_optional result;

  v0 = sub_1002817AC((void **)&NSURLVolumeAvailableCapacityKey, (uint64_t (*)(uint64_t))&URLResourceValues.volumeAvailableCapacity.getter);
  result.value = (Swift::Int)v0;
  result.is_nil = v1;
  return result;
}

uint64_t (*sub_1002817AC(void **a1, uint64_t (*a2)(uint64_t)))(uint64_t)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t inited;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[40];

  v5 = type metadata accessor for URLResourceValues(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100008384(&qword_1007B6D20);
  inited = swift_initStackObject(v9, v18);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  v11 = *a1;
  *(_QWORD *)(inited + 32) = *a1;
  v12 = v11;
  v13 = sub_100282EF4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v14);
  URL.resourceValues(forKeys:)(v13);
  v15 = swift_bridgeObjectRelease(v13);
  if (!v2)
  {
    a2 = (uint64_t (*)(uint64_t))a2(v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return a2;
}

uint64_t Sequence.batch(size:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t WitnessTable;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v32 - v6;
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v9);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness(0, a3);
  v34 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - v16;
  v18 = type metadata accessor for Array(0, AssociatedTypeWitness);
  v39 = ((uint64_t (*)(void))Array.init())();
  v38 = Array.init()(AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v36, a2);
  dispatch thunk of Sequence.makeIterator()(a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, v15, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v36 = v17;
  v20 = v15;
  dispatch thunk of IteratorProtocol.next()(v15, AssociatedConformanceWitness);
  v21 = v33;
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v22(v11, 1, AssociatedTypeWitness) != 1)
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v25(v7, v11, AssociatedTypeWitness);
    while (1)
    {
      Array.append(_:)(v7, v18);
      v26 = v38;
      v27 = swift_bridgeObjectRetain(v38);
      v28 = Array.count.getter(v27, AssociatedTypeWitness);
      swift_bridgeObjectRelease(v26);
      if (v28 > v35)
      {
        v37 = v26;
        v29 = type metadata accessor for Array(0, v18);
        swift_bridgeObjectRetain(v26);
        Array.append(_:)(&v37, v29);
        Array.removeAll(keepingCapacity:)(0);
      }
      dispatch thunk of IteratorProtocol.next()(v20, AssociatedConformanceWitness);
      if (v22(v11, 1, AssociatedTypeWitness) == 1)
        break;
      v25(v7, v11, AssociatedTypeWitness);
    }
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v20);
  v23 = v38;
  v37 = v38;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v18);
  if ((Collection.isEmpty.getter(v18, WitnessTable) & 1) != 0)
  {
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    v37 = v23;
    v30 = type metadata accessor for Array(0, v18);
    Array.append(_:)(&v37, v30);
  }
  return v39;
}

uint64_t sub_100281C04(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1003A9B20(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100281C7C(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100281C7C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  uint64_t *v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t *v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  void *v41;
  Swift::Int v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  Swift::Int v114;
  id v115;
  Swift::Int v116;
  char *v117;
  Swift::Int v118;
  Swift::Int v119;
  id v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if (v3)
      sub_1002824C8(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_152;
  v114 = v4;
  v111 = a1;
  if (v3 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    v124 = (uint64_t)_swiftEmptyArrayStorage;
    v122 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v14 >= 2)
      {
        v104 = *v111;
        do
        {
          v105 = v14 - 2;
          if (v14 < 2)
            goto LABEL_133;
          if (!v104)
            goto LABEL_149;
          v106 = *(_QWORD *)&v9[16 * v105 + 32];
          v107 = *(_QWORD *)&v9[16 * v14 + 24];
          sub_100282624((id *)(v104 + 8 * v106), (id *)(v104 + 8 * *(_QWORD *)&v9[16 * v14 + 16]), v104 + 8 * v107, v122);
          if (v1)
            break;
          if (v107 < v106)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_1003A9300((uint64_t)v9);
          if (v105 >= *((_QWORD *)v9 + 2))
            goto LABEL_135;
          v108 = &v9[16 * v105 + 32];
          *(_QWORD *)v108 = v106;
          *((_QWORD *)v108 + 1) = v107;
          v109 = *((_QWORD *)v9 + 2);
          if (v14 > v109)
            goto LABEL_136;
          memmove(&v9[16 * v14 + 16], &v9[16 * v14 + 32], 16 * (v109 - v14));
          *((_QWORD *)v9 + 2) = v109 - 1;
          v14 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_115:
      v110 = swift_bridgeObjectRelease(v9);
      *(_QWORD *)((v124 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v110);
      swift_bridgeObjectRelease(v124);
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100221EDC(0, &qword_1007BB6D0, SFDevice_ptr);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v122 = (char *)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v124 = v8;
  }
  v10 = v3;
  v11 = 0;
  v12 = *a1;
  v112 = *a1 - 8;
  v113 = *a1 + 16;
  v9 = (char *)_swiftEmptyArrayStorage;
  v13 = &selRef_addEntriesFromDictionary_;
  v123 = *a1;
  v119 = v10;
  while (1)
  {
    v15 = v11++;
    v117 = v9;
    v118 = v15;
    if (v11 < v10)
    {
      v16 = *(void **)(v12 + 8 * v11);
      v17 = *(void **)(v12 + 8 * v15);
      v18 = v16;
      v19 = v17;
      v20 = objc_msgSend(v18, v13[328]);
      if (!v20)
        goto LABEL_150;
      v21 = v20;
      v120 = objc_msgSend(v20, "rssiFloor");

      v22 = objc_msgSend(v19, v13[328]);
      if (!v22)
        goto LABEL_151;
      v23 = v22;
      v115 = objc_msgSend(v22, "rssiFloor");

      v15 = v118;
      v11 = v118 + 2;
      if (v118 + 2 < v119)
      {
        v24 = (id *)(v113 + 8 * v118);
        while (1)
        {
          v25 = *(v24 - 1);
          v26 = *v24;
          v27 = v25;
          v28 = objc_msgSend(v26, v13[328]);
          if (!v28)
            goto LABEL_146;
          v29 = v28;
          v30 = objc_msgSend(v28, "rssiFloor");

          v31 = objc_msgSend(v27, v13[328]);
          if (!v31)
            goto LABEL_147;
          v32 = v31;
          v33 = objc_msgSend(v31, "rssiFloor");

          if ((uint64_t)v120 < (uint64_t)v115 == (uint64_t)v30 >= (uint64_t)v33)
            break;
          ++v11;
          ++v24;
          v9 = v117;
          v13 = &selRef_addEntriesFromDictionary_;
          if (v119 == v11)
          {
            v11 = v119;
            goto LABEL_26;
          }
        }
        v9 = v117;
        v13 = &selRef_addEntriesFromDictionary_;
LABEL_26:
        v15 = v118;
      }
      v12 = v123;
      if ((uint64_t)v120 < (uint64_t)v115)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v34 = (uint64_t *)(v112 + 8 * v11);
          v35 = v11;
          v36 = v15;
          v37 = (uint64_t *)(v123 + 8 * v15);
          do
          {
            if (v36 != --v35)
            {
              if (!v123)
                goto LABEL_148;
              v38 = *v37;
              *v37 = *v34;
              *v34 = v38;
            }
            ++v36;
            --v34;
            ++v37;
          }
          while (v36 < v35);
        }
      }
    }
    if (v11 < v119)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v114)
        break;
    }
LABEL_55:
    if (v11 < v15)
      goto LABEL_132;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_1003A8EEC(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v54 = *((_QWORD *)v9 + 2);
    v53 = *((_QWORD *)v9 + 3);
    v14 = v54 + 1;
    v12 = v123;
    if (v54 >= v53 >> 1)
    {
      v103 = sub_1003A8EEC((char *)(v53 > 1), v54 + 1, 1, v9);
      v12 = v123;
      v9 = v103;
    }
    *((_QWORD *)v9 + 2) = v14;
    v55 = v9 + 32;
    v56 = &v9[16 * v54 + 32];
    *(_QWORD *)v56 = v15;
    *((_QWORD *)v56 + 1) = v11;
    if (v54)
    {
      while (1)
      {
        v57 = v14 - 1;
        if (v14 >= 4)
        {
          v62 = &v55[16 * v14];
          v63 = *((_QWORD *)v62 - 8);
          v64 = *((_QWORD *)v62 - 7);
          v68 = __OFSUB__(v64, v63);
          v65 = v64 - v63;
          if (v68)
            goto LABEL_121;
          v67 = *((_QWORD *)v62 - 6);
          v66 = *((_QWORD *)v62 - 5);
          v68 = __OFSUB__(v66, v67);
          v60 = v66 - v67;
          v61 = v68;
          if (v68)
            goto LABEL_122;
          v69 = v14 - 2;
          v70 = &v55[16 * v14 - 32];
          v72 = *(_QWORD *)v70;
          v71 = *((_QWORD *)v70 + 1);
          v68 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v68)
            goto LABEL_124;
          v68 = __OFADD__(v60, v73);
          v74 = v60 + v73;
          if (v68)
            goto LABEL_127;
          if (v74 >= v65)
          {
            v92 = &v55[16 * v57];
            v94 = *(_QWORD *)v92;
            v93 = *((_QWORD *)v92 + 1);
            v68 = __OFSUB__(v93, v94);
            v95 = v93 - v94;
            if (v68)
              goto LABEL_131;
            v85 = v60 < v95;
            goto LABEL_92;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v86 = *((_QWORD *)v9 + 4);
            v87 = *((_QWORD *)v9 + 5);
            v68 = __OFSUB__(v87, v86);
            v79 = v87 - v86;
            v80 = v68;
            goto LABEL_86;
          }
          v59 = *((_QWORD *)v9 + 4);
          v58 = *((_QWORD *)v9 + 5);
          v68 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          v61 = v68;
        }
        if ((v61 & 1) != 0)
          goto LABEL_123;
        v69 = v14 - 2;
        v75 = &v55[16 * v14 - 32];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v78 = __OFSUB__(v76, v77);
        v79 = v76 - v77;
        v80 = v78;
        if (v78)
          goto LABEL_126;
        v81 = &v55[16 * v57];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v68 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v68)
          goto LABEL_129;
        if (__OFADD__(v79, v84))
          goto LABEL_130;
        if (v79 + v84 >= v60)
        {
          v85 = v60 < v84;
LABEL_92:
          if (v85)
            v57 = v69;
          goto LABEL_94;
        }
LABEL_86:
        if ((v80 & 1) != 0)
          goto LABEL_125;
        v88 = &v55[16 * v57];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v68 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v68)
          goto LABEL_128;
        if (v91 < v79)
          goto LABEL_14;
LABEL_94:
        v96 = v57 - 1;
        if (v57 - 1 >= v14)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v12)
          goto LABEL_145;
        v97 = v9;
        v98 = &v55[16 * v96];
        v99 = *(_QWORD *)v98;
        v100 = &v55[16 * v57];
        v101 = *((_QWORD *)v100 + 1);
        sub_100282624((id *)(v12 + 8 * *(_QWORD *)v98), (id *)(v12 + 8 * *(_QWORD *)v100), v12 + 8 * v101, v122);
        if (v1)
        {
          v9 = v97;
          goto LABEL_115;
        }
        if (v101 < v99)
          goto LABEL_118;
        if (v57 > *((_QWORD *)v97 + 2))
          goto LABEL_119;
        *(_QWORD *)v98 = v99;
        *(_QWORD *)&v55[16 * v96 + 8] = v101;
        v102 = *((_QWORD *)v97 + 2);
        if (v57 >= v102)
          goto LABEL_120;
        v9 = v97;
        v14 = v102 - 1;
        memmove(&v55[16 * v57], v100 + 16, 16 * (v102 - 1 - v57));
        *((_QWORD *)v97 + 2) = v102 - 1;
        v12 = v123;
        if (v102 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v10 = v119;
    v13 = &selRef_addEntriesFromDictionary_;
    if (v11 >= v119)
      goto LABEL_104;
  }
  if (__OFADD__(v15, v114))
    goto LABEL_140;
  v39 = v119;
  if (v15 + v114 < v119)
    v39 = v15 + v114;
  if (v39 >= v15)
  {
    if (v11 != v39)
    {
      v40 = v112 + 8 * v11;
      v116 = v39;
      do
      {
        v41 = *(void **)(v12 + 8 * v11);
        v42 = v15;
        v121 = v40;
        while (1)
        {
          v43 = *(void **)v40;
          v44 = v41;
          v45 = v43;
          v46 = objc_msgSend(v44, v13[328]);
          if (!v46)
            goto LABEL_142;
          v47 = v46;
          v48 = objc_msgSend(v46, "rssiFloor");

          v49 = objc_msgSend(v45, v13[328]);
          if (!v49)
            goto LABEL_143;
          v50 = v49;
          v51 = objc_msgSend(v49, "rssiFloor");

          if ((uint64_t)v48 >= (uint64_t)v51)
            break;
          v12 = v123;
          if (!v123)
            goto LABEL_144;
          v52 = *(void **)v40;
          v41 = *(void **)(v40 + 8);
          *(_QWORD *)v40 = v41;
          *(_QWORD *)(v40 + 8) = v52;
          v40 -= 8;
          ++v42;
          v13 = &selRef_addEntriesFromDictionary_;
          if (v11 == v42)
            goto LABEL_46;
        }
        v12 = v123;
        v13 = &selRef_addEntriesFromDictionary_;
LABEL_46:
        ++v11;
        v40 = v121 + 8;
        v15 = v118;
      }
      while (v11 != v116);
      v11 = v116;
      v9 = v117;
    }
    goto LABEL_55;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1002824C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  char **v19;
  char **v20;
  id v21;
  BOOL v22;
  void *v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 != a2)
  {
    v4 = a3;
    v27 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    v6 = &selRef_addEntriesFromDictionary_;
    v7 = &selRef_reasonType;
LABEL_5:
    v8 = *(void **)(v27 + 8 * v4);
    v9 = a1;
    v26 = v5;
    v28 = v4;
    while (1)
    {
      v10 = *(void **)v5;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(v11, v6[328]);
      if (!v13)
        break;
      v14 = v13;
      v15 = objc_msgSend(v13, v7[249]);

      v16 = objc_msgSend(v12, v6[328]);
      if (!v16)
        goto LABEL_14;
      v17 = v16;
      v18 = objc_msgSend(v16, v7[249]);
      v19 = v7;
      v20 = v6;
      v21 = v18;

      v22 = (uint64_t)v15 < (uint64_t)v21;
      v6 = v20;
      v7 = v19;
      if (v22)
      {
        if (!v27)
          goto LABEL_15;
        v23 = *(void **)v5;
        v8 = *(void **)(v5 + 8);
        *(_QWORD *)v5 = v8;
        *(_QWORD *)(v5 + 8) = v23;
        v5 -= 8;
        if (v28 != ++v9)
          continue;
      }
      v4 = v28 + 1;
      v5 = v26 + 8;
      if (v28 + 1 == a2)
        return;
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

uint64_t sub_100282624(id *a1, id *__src, unint64_t a3, char *a4)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  char **v12;
  void **v13;
  id *v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id *v25;
  char *v26;
  id *v27;
  char **v28;
  char **v29;
  id *v30;
  char *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  char **v37;
  id v38;
  id v39;
  void *v40;
  id *v41;
  id v42;
  char *v43;
  uint64_t result;
  char *v47;
  unint64_t v48;
  id *v50;
  char *v51;
  char *v52;
  id *v53;

  v4 = __src;
  v5 = (char *)__src - (char *)a1;
  v6 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v6 = (char *)__src - (char *)a1;
  v7 = v6 >> 3;
  v8 = a3 - (_QWORD)__src;
  v9 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v9 = a3 - (_QWORD)__src;
  v10 = v9 >> 3;
  v53 = a1;
  v52 = a4;
  if (v7 < v9 >> 3)
  {
    if (v5 < -7)
      goto LABEL_56;
    if (a4 != (char *)a1 || &a1[v7] <= (id *)a4)
      memmove(a4, a1, 8 * v7);
    v47 = &a4[8 * v7];
    v51 = v47;
    if ((unint64_t)v4 < a3 && v5 >= 8)
    {
      v11 = (void **)a4;
      v12 = &selRef_reasonType;
      v13 = a1;
      while (1)
      {
        v14 = v4;
        v15 = v11;
        v16 = *v11;
        v17 = *v4;
        v18 = v16;
        v19 = objc_msgSend(v17, "bleDevice");
        if (!v19)
          goto LABEL_54;
        v20 = v19;
        v21 = objc_msgSend(v19, v12[249]);

        v22 = objc_msgSend(v18, "bleDevice");
        if (!v22)
          goto LABEL_55;
        v23 = v22;
        v24 = objc_msgSend(v22, v12[249]);

        if ((uint64_t)v21 >= (uint64_t)v24)
        {
          if (v13 != v15)
            *v13 = *v15;
          v11 = v15 + 1;
          v52 = (char *)(v15 + 1);
          v25 = v14;
        }
        else
        {
          v25 = v14 + 1;
          v11 = v15;
          if (v13 >= v14 && v13 < v25)
          {
            v12 = &selRef_reasonType;
            if (v13 != v14)
              *v13 = *v14;
            goto LABEL_25;
          }
          *v13 = *v14;
        }
        v12 = &selRef_reasonType;
LABEL_25:
        ++v13;
        if (v11 < (void **)v47)
        {
          v4 = v25;
          if ((unint64_t)v25 < a3)
            continue;
        }
        v53 = v13;
        break;
      }
    }
LABEL_51:
    sub_1003A90A0((void **)&v53, (const void **)&v52, &v51);
    return 1;
  }
  if (v8 < -7)
    goto LABEL_56;
  if (a4 != (char *)__src || &__src[v10] <= (id *)a4)
    memmove(a4, __src, 8 * v10);
  v26 = &a4[8 * v10];
  v51 = v26;
  v53 = v4;
  if (a1 >= v4 || v8 < 8)
    goto LABEL_51;
  v27 = (id *)(a3 - 8);
  v28 = &selRef_addEntriesFromDictionary_;
  v29 = &selRef_reasonType;
  v30 = v4;
  while (1)
  {
    v48 = (unint64_t)v26;
    v50 = v4;
    v31 = v26 - 8;
    v32 = *--v30;
    v33 = *((id *)v26 - 1);
    v34 = v32;
    v35 = objc_msgSend(v33, v28[328]);
    if (!v35)
      break;
    v36 = v35;
    v37 = v29;
    v38 = objc_msgSend(v35, v29[249]);

    v39 = objc_msgSend(v34, v28[328]);
    if (!v39)
      goto LABEL_53;
    v40 = v39;
    v41 = v27 + 1;
    v42 = objc_msgSend(v39, v37[249]);

    if ((uint64_t)v38 >= (uint64_t)v42)
    {
      v51 = v31;
      v30 = v50;
      if ((unint64_t)v41 >= v48 && (unint64_t)v27 < v48)
      {
        v29 = &selRef_reasonType;
        if (v41 != (id *)v48)
          *v27 = *(id *)v31;
        v26 = v31;
        v43 = a4;
        v28 = &selRef_addEntriesFromDictionary_;
        goto LABEL_49;
      }
      *v27 = *(id *)v31;
      v26 = v31;
    }
    else
    {
      v26 = (char *)v48;
      if (v41 != v50 || v27 >= v50)
        *v27 = *v30;
      v53 = v30;
    }
    v43 = a4;
    v28 = &selRef_addEntriesFromDictionary_;
    v29 = &selRef_reasonType;
LABEL_49:
    if (v30 > a1)
    {
      --v27;
      v4 = v30;
      if (v26 > v43)
        continue;
    }
    goto LABEL_51;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100282A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  char v29;
  char v30;
  void *v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for B389PresentationConfig.Mode(0);
  v8 = __chkstk_darwin(v7);
  v10 = (void **)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  v16 = sub_100008384(&qword_1007B72B0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &v19[*(int *)(v17 + 48)];
  sub_100244384(a1, (uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
  sub_100244384(a2, (uint64_t)v20, type metadata accessor for B389PresentationConfig.Mode);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v7);
  if (!EnumCaseMultiPayload)
  {
    sub_100244384((uint64_t)v19, (uint64_t)v15, type metadata accessor for B389PresentationConfig.Mode);
    if (!swift_getEnumCaseMultiPayload(v20, v7))
    {
      v29 = *v15 ^ *v20;
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_100244384((uint64_t)v19, (uint64_t)v10, type metadata accessor for B389PresentationConfig.Mode);
    v31 = *v10;
    if (swift_getEnumCaseMultiPayload(v20, v7) == 2)
    {
      v32 = *(void **)v20;
      sub_100221EDC(0, (unint64_t *)&qword_1007B72B8, NSObject_ptr);
      v30 = static NSObject.== infix(_:_:)(v31, v32);

      sub_1002443C8((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
      return v30 & 1;
    }

    goto LABEL_13;
  }
  sub_100244384((uint64_t)v19, (uint64_t)v13, type metadata accessor for B389PresentationConfig.Mode);
  v22 = *(int *)(sub_100008384(&qword_1007B70D8) + 48);
  v23 = v13[v22];
  if (swift_getEnumCaseMultiPayload(v20, v7) != 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
LABEL_13:
    sub_10000D0F0((uint64_t)v19, &qword_1007B72B0);
LABEL_14:
    v30 = 0;
    return v30 & 1;
  }
  v24 = v20[v22];
  v26 = v34;
  v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v6, v20, v35);
  v27 = static UUID.== infix(_:_:)(v13, v6);
  v28 = *(void (**)(char *, uint64_t))(v26 + 8);
  v28(v6, v25);
  v28(v13, v25);
  if ((v27 & 1) == 0)
  {
    sub_1002443C8((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
    goto LABEL_14;
  }
  v29 = v23 ^ v24;
LABEL_8:
  sub_1002443C8((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
  v30 = v29 ^ 1;
  return v30 & 1;
}

BOOL sub_100282D04(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  double *v7;
  char v8;
  double *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;

  if ((sub_100282A10(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for B389PresentationConfig(0);
  if (*(_DWORD *)(a1 + v4[5]) != *(_DWORD *)(a2 + v4[5]))
    return 0;
  v5 = v4;
  if (*(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || *(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7])
    || *(unsigned __int8 *)(a1 + v4[8]) != *(unsigned __int8 *)(a2 + v4[8])
    || *(_QWORD *)(a1 + v4[9]) != *(_QWORD *)(a2 + v4[9]))
  {
    return 0;
  }
  v6 = v4[10];
  v7 = (double *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = *(unsigned __int8 *)(a2 + v6 + 8);
  if ((v8 & 1) != 0)
  {
    if (!v10)
      return 0;
  }
  else
  {
    if (*v7 != *v9)
      LOBYTE(v10) = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  v11 = v4[11];
  v12 = (_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  if (!v13)
  {
    if (v15)
      return 0;
    goto LABEL_20;
  }
  if (!v15)
    return 0;
  if (*v12 == *v14 && v13 == v15
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, *v14, v15, 0), result = 0, (v16 & 1) != 0))
  {
LABEL_20:
    v18 = v5[12];
    v19 = a1 + v18;
    v20 = *(_QWORD *)(a1 + v18);
    v21 = *(_QWORD *)(v19 + 8);
    v22 = (uint64_t *)(a2 + v18);
    v23 = *v22;
    v24 = v22[1];
    if (v21 >> 60 == 15)
    {
      if (v24 >> 60 == 15)
        return 1;
      goto LABEL_24;
    }
    if (v24 >> 60 == 15)
    {
LABEL_24:
      sub_100244404(v20, *(_QWORD *)(v19 + 8));
      sub_100244404(v23, v24);
      sub_100225AA0(v20, v21);
      sub_100225AA0(v23, v24);
      return 0;
    }
    sub_100244404(v20, *(_QWORD *)(v19 + 8));
    sub_100244404(v23, v24);
    sub_1002B7ED4(v20, v21);
    v26 = v25;
    sub_100225AA0(v23, v24);
    sub_100225AA0(v20, v21);
    return (v26 & 1) != 0;
  }
  return result;
}

void *sub_100282EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008384(qword_1007B73B0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v37 = v1;
    v38 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v38 + 8 * v4);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;
      Hasher.init(_seed:)(v39);
      v10 = v6;
      String.hash(into:)(v39, v7, v9);
      v11 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease(v9);
      v13 = -1 << *(_BYTE *)(v3 + 32);
      v14 = v11 & ~v13;
      v15 = v14 >> 6;
      v16 = *(_QWORD *)(v5 + 8 * (v14 >> 6));
      v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14));
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v18 == v21 && v20 == v22)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v20, 2);
LABEL_4:

          goto LABEL_5;
        }
        v24 = v22;
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
        swift_bridgeObjectRelease(v20);
        result = (void *)swift_bridgeObjectRelease(v24);
        if ((v25 & 1) != 0)
          goto LABEL_4;
        v26 = ~v13;
        while (1)
        {
          v14 = (v14 + 1) & v26;
          v15 = v14 >> 6;
          v16 = *(_QWORD *)(v5 + 8 * (v14 >> 6));
          v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0)
            break;
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14));
          v20 = v28;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v27 == v29 && v20 == v30)
            goto LABEL_3;
          v32 = v30;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v20, v29, v30, 0);
          swift_bridgeObjectRelease(v20);
          result = (void *)swift_bridgeObjectRelease(v32);
          if ((v33 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v15) = v17 | v16;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14) = v10;
      v34 = *(_QWORD *)(v3 + 16);
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v36;
LABEL_5:
      if (++v4 == v37)
        return (void *)v3;
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_100283120(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100008384(&qword_1007B7310);
  __chkstk_darwin(v3);
  __asm { BR              X9 }
}

uint64_t sub_1002831A0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  int v28;

  if (((unint64_t)BYTE6(v2) - 0x1000000000000000) >> 61 != 7)
    goto LABEL_32;
  if (BYTE6(v2) == 2)
  {
    *(_QWORD *)(v6 - 120) = v1;
    *(_QWORD *)(v6 - 112) = a1;
    sub_10022E4A8(v3, v2);
    *(_QWORD *)(v6 - 72) = _swiftEmptyArrayStorage;
    sub_100229AD4(0, 0, 0);
    v7 = *(_QWORD *)(v6 - 72);
    if (v5)
    {
      if (v5 == 1)
        v8 = (int)v3;
      else
        v8 = *(_QWORD *)(v3 + 16);
      sub_10022E4A8(v3, v2);
      sub_10022E4A8(v3, v2);
    }
    else
    {
      v8 = 0;
    }
    ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v3, v2, v8);
    *(_QWORD *)(v6 - 104) = v3;
    *(_QWORD *)(v6 - 96) = v2;
    sub_100225AB4(v3, v2);
    v12 = type metadata accessor for Data.Iterator(0);
    v13 = sub_100220D78(&qword_1007BB6B0, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
    dispatch thunk of IteratorProtocol.next()(v12, v13);
    v14 = 0;
    if ((*(_BYTE *)(v6 - 81) & 1) != 0)
    {
LABEL_11:
      *(_QWORD *)(v4 + *(int *)(*(_QWORD *)(v6 - 112) + 36)) = v14;
      sub_10000D0F0(v4, &qword_1007B7310);
      sub_100225AB4(*(_QWORD *)(v6 - 104), *(_QWORD *)(v6 - 96));
      v15 = *(int8x16_t **)(v6 - 72);
      v16 = v15[1].u64[0];
      if (v16)
      {
        if (v16 >= 0x10)
        {
          v17 = v16 & 0x7FFFFFFFFFFFFFF0;
          v21 = v15 + 3;
          v22 = 0uLL;
          v23 = v16 & 0x7FFFFFFFFFFFFFF0;
          v24 = 0uLL;
          do
          {
            v22 = vorrq_s8(v21[-1], v22);
            v24 = vorrq_s8(*v21, v24);
            v21 += 2;
            v23 -= 16;
          }
          while (v23);
          v25 = vorrq_s8(v24, v22);
          *(int8x8_t *)v25.i8 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
          v9 = v25.i32[0] | v25.i32[1] | ((unint64_t)(v25.i64[0] | HIDWORD(v25.i64[0])) >> 16);
          if (v16 == v17)
            goto LABEL_29;
        }
        else
        {
          v17 = 0;
          LODWORD(v9) = 0;
        }
        v26 = v16 - v17;
        v27 = (unsigned __int16 *)&v15[2] + v17;
        do
        {
          v28 = *v27++;
          v9 = v28 | v9;
          --v26;
        }
        while (v26);
      }
      else
      {
        v9 = 0;
      }
LABEL_29:
      swift_release(v15);
      return v9;
    }
    v14 = 0;
    while (v14 != 0x2000)
    {
      if ((v14 & 0x1FFE) != 0)
        v18 = 0;
      else
        v18 = *(unsigned __int8 *)(v6 - 82) << (8 * (v14 & 1));
      *(_QWORD *)(v6 - 72) = v7;
      v20 = *(_QWORD *)(v7 + 16);
      v19 = *(_QWORD *)(v7 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_100229AD4(v19 > 1, v20 + 1, 1);
        v7 = *(_QWORD *)(v6 - 72);
      }
      *(_QWORD *)(v7 + 16) = v20 + 1;
      *(_WORD *)(v7 + 2 * v20 + 32) = v18;
      dispatch thunk of IteratorProtocol.next()(v12, v13);
      ++v14;
      if (*(_BYTE *)(v6 - 81) == 1)
        goto LABEL_11;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    JUMPOUT(0x100283490);
  }
  v9 = sub_100008384(&qword_1007B7338);
  v10 = sub_10026E2FC((unint64_t *)&unk_1007B7340, &qword_1007B7338, (uint64_t)&unk_1005D0428);
  v11 = swift_allocError(v9, v10, 0, 0);
  swift_willThrow(v11);
  return v9;
}

unint64_t _s16DaemoniOSLibrary10SDRunStateO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10071C720, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1002834F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B6D28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100283538(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  return sub_100283550(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))sub_1004D5BD4);
}

uint64_t sub_100283544(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  return sub_100283550(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))sub_1004D6408);
}

uint64_t sub_100283550(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  Swift::String v9;
  const char *object;
  __n128 v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  v15 = a2;
  v16 = a3;
  v17 = a1;
  swift_bridgeObjectRetain(a3);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = (const char *)v9._object;
  String.append(_:)(v9);
  v11 = swift_bridgeObjectRelease(object);
  v12 = String.hashValue.getter(v15, v16, v11);
  swift_bridgeObjectRelease(v16);
  swift_beginAccess(a4 + 16, &v15, 33, 0);
  v13 = sub_10045DE64(&v17, v12);
  result = swift_endAccess(&v15);
  if ((v13 & 1) != 0)
    return a6(a5);
  return result;
}

void sub_10028361C(uint64_t a1, os_log_t log, const char *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  Swift::String v13;
  const char *object;
  __n128 v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  os_log_t loga;
  const char *v23;
  uint64_t v24;
  uint64_t v25[9];

  loga = log;
  v23 = a3;
  v25[0] = a1;
  swift_bridgeObjectRetain(a3);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = (const char *)v13._object;
  String.append(_:)(v13);
  v15 = swift_bridgeObjectRelease(object);
  v16 = String.hashValue.getter(loga, v23, v15);
  swift_bridgeObjectRelease(v23);
  swift_beginAccess(a4 + 16, &loga, 33, 0);
  v17 = sub_10045DE64(v25, v16);
  swift_endAccess(&loga);
  if ((v17 & 1) != 0)
    sub_1004D81B0(a5, a6, a7, a8, v18, v19, v20, v21, loga, (uint64_t)v23, v24, v25[0], v25[1], v25[2], v25[3], v25[4], v25[5], v25[6], v25[7],
      v25[8]);
}

void sub_100283704(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = sub_100008384(&qword_1007B7310);
  __chkstk_darwin(v3);
  v5[4] = (char *)v5 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X9 }
}

uint64_t sub_100283788(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x8_t v27;
  unint64_t v28;
  __int32 *v29;
  int v30;

  if (((unint64_t)BYTE6(v3) - 0x1000000000000000) >> 61 != 7)
    goto LABEL_32;
  if (BYTE6(v3) == 4)
  {
    *(_QWORD *)(v5 - 128) = v1;
    *(_QWORD *)(v5 - 120) = a1;
    sub_10022E4A8(v4, v3);
    *(_QWORD *)(v5 - 72) = _swiftEmptyArrayStorage;
    sub_1002298F8(0, 0, 0);
    v6 = *(_QWORD *)(v5 - 72);
    if (v2)
    {
      if (v2 == 1)
        v7 = (int)v4;
      else
        v7 = *(_QWORD *)(v4 + 16);
      sub_10022E4A8(v4, v3);
      sub_10022E4A8(v4, v3);
    }
    else
    {
      v7 = 0;
    }
    ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v4, v3, v7);
    *(_QWORD *)(v5 - 112) = v4;
    *(_QWORD *)(v5 - 104) = v3;
    sub_100225AB4(v4, v3);
    v11 = type metadata accessor for Data.Iterator(0);
    v12 = sub_100220D78(&qword_1007BB6B0, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
    dispatch thunk of IteratorProtocol.next()(v11, v12);
    v13 = 0;
    if ((*(_BYTE *)(v5 - 81) & 1) != 0)
    {
LABEL_11:
      v14 = *(_QWORD *)(v5 - 96);
      *(_QWORD *)(v14 + *(int *)(*(_QWORD *)(v5 - 120) + 36)) = v13;
      sub_10000D0F0(v14, &qword_1007B7310);
      sub_100225AB4(*(_QWORD *)(v5 - 112), *(_QWORD *)(v5 - 104));
      v15 = *(int8x16_t **)(v5 - 72);
      v16 = v15[1].u64[0];
      if (v16)
      {
        if (v16 >= 8)
        {
          v17 = v16 & 0x7FFFFFFFFFFFFFF8;
          v22 = v15 + 3;
          v23 = 0uLL;
          v24 = v16 & 0x7FFFFFFFFFFFFFF8;
          v25 = 0uLL;
          do
          {
            v23 = vorrq_s8(v22[-1], v23);
            v25 = vorrq_s8(*v22, v25);
            v22 += 2;
            v24 -= 8;
          }
          while (v24);
          v26 = vorrq_s8(v25, v23);
          v27 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
          v8 = (v27.i32[0] | v27.i32[1]);
          if (v16 == v17)
            goto LABEL_29;
        }
        else
        {
          v17 = 0;
          LODWORD(v8) = 0;
        }
        v28 = v16 - v17;
        v29 = &v15[2].i32[v17];
        do
        {
          v30 = *v29++;
          v8 = v30 | v8;
          --v28;
        }
        while (v28);
      }
      else
      {
        v8 = 0;
      }
LABEL_29:
      swift_release(v15);
      return v8;
    }
    v18 = 0;
    v13 = 0;
    while (v13 != 0x20000000)
    {
      if ((v13 & 0x1FFFFFFC) != 0)
        v19 = 0;
      else
        v19 = *(unsigned __int8 *)(v5 - 82) << (v18 & 0x18);
      *(_QWORD *)(v5 - 72) = v6;
      v21 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1002298F8(v20 > 1, v21 + 1, 1);
        v6 = *(_QWORD *)(v5 - 72);
      }
      *(_QWORD *)(v6 + 16) = v21 + 1;
      *(_DWORD *)(v6 + 4 * v21 + 32) = v19;
      dispatch thunk of IteratorProtocol.next()(v11, v12);
      v18 += 8;
      ++v13;
      if (*(_BYTE *)(v5 - 81) == 1)
        goto LABEL_11;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    JUMPOUT(0x100283A84);
  }
  v8 = sub_100008384(&qword_1007B7378);
  v9 = sub_10026E2FC((unint64_t *)&unk_1007B7380, &qword_1007B7378, (uint64_t)&unk_1005D0428);
  v10 = swift_allocError(v8, v9, 0, 0);
  swift_willThrow(v10);
  return v8;
}

void sub_100283A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100008384(&qword_1007B7310);
  __chkstk_darwin(v3);
  __asm { BR              X9 }
}

uint64_t sub_100283B1C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  if (((unint64_t)BYTE6(v3) - 0x1000000000000000) >> 61 != 7)
    goto LABEL_32;
  if (BYTE6(v3) == 8)
  {
    *(_QWORD *)(v6 - 104) = a1;
    sub_10022E4A8(v4, v3);
    *(_QWORD *)(v6 - 72) = _swiftEmptyArrayStorage;
    sub_100229AB8(0, 0, 0);
    v7 = *(_QWORD *)(v6 - 72);
    if (v1)
    {
      if (v1 == 1)
        v8 = (int)v4;
      else
        v8 = *(_QWORD *)(v4 + 16);
      sub_10022E4A8(v4, v3);
      sub_10022E4A8(v4, v3);
    }
    else
    {
      v8 = 0;
    }
    ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v4, v3, v8);
    sub_100225AB4(v4, v3);
    v12 = type metadata accessor for Data.Iterator(0);
    v13 = sub_100220D78(&qword_1007BB6B0, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
    *(_QWORD *)(v6 - 96) = v12;
    dispatch thunk of IteratorProtocol.next()(v12, v13);
    v14 = 0;
    if ((*(_BYTE *)(v6 - 81) & 1) == 0)
    {
      *(_QWORD *)(v6 - 128) = v4;
      *(_QWORD *)(v6 - 120) = v3;
      *(_QWORD *)(v6 - 112) = v2;
      v15 = 0;
      v16 = 0;
      while (v16 != 0xF000000000000000)
      {
        if (v15 >= 0x40)
          v17 = 0;
        else
          v17 = (unint64_t)*(unsigned __int8 *)(v6 - 82) << (v15 & 0x38);
        *(_QWORD *)(v6 - 72) = v7;
        v19 = *(_QWORD *)(v7 + 16);
        v18 = *(_QWORD *)(v7 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_100229AB8(v18 > 1, v19 + 1, 1);
          v7 = *(_QWORD *)(v6 - 72);
        }
        *(_QWORD *)(v7 + 16) = v19 + 1;
        *(_QWORD *)(v7 + 8 * v19 + 32) = v17;
        dispatch thunk of IteratorProtocol.next()(*(_QWORD *)(v6 - 96), v13);
        --v16;
        v15 += 8;
        if (*(_BYTE *)(v6 - 81) == 1)
        {
          v14 = -v16;
          v3 = *(_QWORD *)(v6 - 120);
          v4 = *(_QWORD *)(v6 - 128);
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
      JUMPOUT(0x100283E1CLL);
    }
LABEL_20:
    *(_QWORD *)(v5 + *(int *)(*(_QWORD *)(v6 - 104) + 36)) = v14;
    sub_10000D0F0(v5, &qword_1007B7310);
    sub_100225AB4(v4, v3);
    v20 = *(int8x16_t **)(v6 - 72);
    v21 = v20[1].u64[0];
    if (v21)
    {
      if (v21 >= 4)
      {
        v22 = v21 & 0x7FFFFFFFFFFFFFFCLL;
        v23 = v20 + 3;
        v24 = 0uLL;
        v25 = v21 & 0x7FFFFFFFFFFFFFFCLL;
        v26 = 0uLL;
        do
        {
          v24 = vorrq_s8(v23[-1], v24);
          v26 = vorrq_s8(*v23, v26);
          v23 += 2;
          v25 -= 4;
        }
        while (v25);
        v27 = vorrq_s8(v26, v24);
        v9 = (uint64_t)vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
        if (v21 == v22)
          goto LABEL_29;
      }
      else
      {
        v22 = 0;
        v9 = 0;
      }
      v28 = v21 - v22;
      v29 = &v20[2].i64[v22];
      do
      {
        v30 = *v29++;
        v9 |= v30;
        --v28;
      }
      while (v28);
    }
    else
    {
      v9 = 0;
    }
LABEL_29:
    swift_release(v20);
    return v9;
  }
  v9 = sub_100008384(&qword_1007B7318);
  v10 = sub_10026E2FC((unint64_t *)&qword_1007B7320, &qword_1007B7318, (uint64_t)&unk_1005D0428);
  v11 = swift_allocError(v9, v10, 0, 0);
  swift_willThrow(v11);
  return v9;
}

uint64_t sub_100283E34(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  int v27;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((unint64_t)(v6 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v6 & 0x1FFFFFFFFFFFFFFFLL) != 2)
  {
    v15 = sub_100008384(&qword_1007B7338);
    v16 = sub_10026E2FC((unint64_t *)&unk_1007B7340, &qword_1007B7338, (uint64_t)&unk_1005D0428);
    v17 = swift_allocError(v15, v16, 0, 0);
    swift_willThrow(v17);
    return v4;
  }
  v9 = result;
  swift_unknownObjectRetain(result);
  result = sub_100229AD4(0, 0, 0);
  if (v5 == a3)
  {
LABEL_16:
    swift_unknownObjectRelease(v9);
    v18 = _swiftEmptyArrayStorage[2];
    if (v18)
    {
      if (v18 >= 0x10)
      {
        v19 = v18 & 0x7FFFFFFFFFFFFFF0;
        v20 = (int8x16_t *)&_swiftEmptyArrayStorage[6];
        v21 = 0uLL;
        v22 = v18 & 0x7FFFFFFFFFFFFFF0;
        v23 = 0uLL;
        do
        {
          v21 = vorrq_s8(v20[-1], v21);
          v23 = vorrq_s8(*v20, v23);
          v20 += 2;
          v22 -= 16;
        }
        while (v22);
        v24 = vorrq_s8(v23, v21);
        *(int8x8_t *)v24.i8 = vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        v4 = v24.i32[0] | v24.i32[1] | ((unint64_t)(v24.i64[0] | HIDWORD(v24.i64[0])) >> 16);
        if (v18 == v19)
          goto LABEL_25;
      }
      else
      {
        v19 = 0;
        LODWORD(v4) = 0;
      }
      v25 = v18 - v19;
      v26 = (unsigned __int16 *)&_swiftEmptyArrayStorage[4] + v19;
      do
      {
        v27 = *v26++;
        v4 = v27 | v4;
        --v25;
      }
      while (v25);
LABEL_25:
      swift_release(_swiftEmptyArrayStorage);
      return v4;
    }
    swift_release(_swiftEmptyArrayStorage);
    return 0;
  }
  if (v5 > a3)
  {
    result = swift_unknownObjectRetain(v9);
    v10 = 0;
    v11 = a2 + a3;
    while (v10 != 0x2000)
    {
      if ((v10 & 0x1FFE) != 0)
        v12 = 0;
      else
        v12 = *(unsigned __int8 *)(v11 + v10) << (8 * (v10 & 1));
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        result = sub_100229AD4(v13 > 1, v14 + 1, 1);
      ++v10;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      *((_WORD *)&_swiftEmptyArrayStorage[4] + v14) = v12;
      if (v6 == v10)
      {
        swift_unknownObjectRelease(v9);
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100284070(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(_QWORD *, uint64_t);
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD aBlock[5];
  uint64_t v79;

  v64 = a4;
  v65 = a5;
  v63 = a3;
  v76 = a2;
  v72 = a1;
  v73 = type metadata accessor for DispatchTimeInterval(0);
  v71 = *(_QWORD *)(v73 - 8);
  v7 = __chkstk_darwin(v73);
  v70 = (id *)((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v69 = (char *)&v63 - v9;
  v10 = sub_100008384(&qword_1007B6D28);
  __chkstk_darwin(v10);
  v67 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v66 - 8);
  v13 = __chkstk_darwin(v66);
  v68 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v75 = (char *)&v63 - v15;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002834F0(a2, v5 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan);
  sub_100221EDC(0, (unint64_t *)&qword_1007B7390, OS_dispatch_source_ptr);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_100220D78(&qword_1007B7398, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v24 = sub_100008384(&qword_1007B73A0);
  v25 = sub_10026E2FC(&qword_1007B73A8, &qword_1007B73A0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v19, v23);
  v26 = v63;
  v27 = v63;
  v28 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v22, v26);

  v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v30 = v12;
  v29(v22, v19);
  v31 = v74;
  *(_QWORD *)(v74 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer) = v28;
  v32 = v65;
  aBlock[4] = v64;
  v79 = v65;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10071F5B8;
  v33 = _Block_copy(aBlock);
  v77 = _swiftEmptyArrayStorage;
  v34 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain(v32);
  v35 = sub_100008384((uint64_t *)&unk_1007B6410);
  v36 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v35, v36, v16, v34);
  v37 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v38 = DispatchWorkItem.init(flags:block:)(v18, v33);
  swift_release(v79);
  v39 = OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer;
  v40 = *(_QWORD *)(v31 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer);
  ObjectType = swift_getObjectType(v40);
  swift_unknownObjectRetain(v40);
  v65 = v38;
  v42 = ObjectType;
  v43 = v66;
  OS_dispatch_source.setEventHandler(handler:)(v38, v42);
  v44 = v40;
  v45 = (uint64_t)v67;
  swift_unknownObjectRelease(v44);
  sub_1002834F0(v76, v45);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v45, 1, v43) == 1)
  {
    v46 = v68;
    static DispatchTime.distantFuture.getter();
    sub_10000D0F0(v45, &qword_1007B6D28);
  }
  else
  {
    v46 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v68, v45, v43);
  }
  v47 = sub_100220D78(&qword_1007B6D30, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime, (uint64_t)&protocol conformance descriptor for DispatchTime);
  v48 = v72;
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v46, v72, v43, v47) & 1) != 0)
  {
    v49 = v75;
    v50 = v46;
  }
  else
  {
    v49 = v75;
    v50 = v48;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v49, v50, v43);
  v51 = *(void (**)(char *, uint64_t))(v30 + 8);
  v51(v46, v43);
  v52 = swift_getObjectType(*(_QWORD *)(v31 + v39));
  v53 = v43;
  v54 = v52;
  v55 = v71;
  v56 = *(void (**)(char *, _QWORD, uint64_t))(v71 + 104);
  v57 = v69;
  v58 = v73;
  v56(v69, enum case for DispatchTimeInterval.never(_:), v73);
  v59 = (char *)v70;
  *v70 = 0;
  v56(v59, enum case for DispatchTimeInterval.nanoseconds(_:), v58);
  v60 = v75;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v75, v57, v59, v54);
  swift_release(v65);
  sub_10000D0F0(v76, &qword_1007B6D28);
  v51(v48, v53);
  v61 = *(void (**)(_QWORD *, uint64_t))(v55 + 8);
  v61(v59, v58);
  v61(v57, v58);
  v51(v60, v53);
  return v74;
}

uint64_t sub_1002845E4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1002845F4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

unint64_t sub_100284608()
{
  unint64_t result;

  result = qword_1007B6D48;
  if (!qword_1007B6D48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SDRunState, &type metadata for SDRunState);
    atomic_store(result, (unint64_t *)&qword_1007B6D48);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SDRunState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SDRunState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100284728 + 4 * byte_1005CFD5B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10028475C + 4 * byte_1005CFD56[v4]))();
}

uint64_t sub_10028475C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100284764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10028476CLL);
  return result;
}

uint64_t sub_100284778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100284780);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100284784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028478C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDRunState()
{
  return &type metadata for SDRunState;
}

uint64_t type metadata accessor for OnceManager()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary11OnceManager);
}

uint64_t sub_1002847C8()
{
  return type metadata accessor for PushableTimer(0);
}

uint64_t type metadata accessor for PushableTimer(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007B6E40, (uint64_t)&nominal type descriptor for PushableTimer);
}

void sub_1002847E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100284858(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100284858(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1007B6E50)
  {
    v2 = type metadata accessor for DispatchTime(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1007B6E50);
  }
}

uint64_t type metadata accessor for SDB389BubbleMonitor()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary19SDB389BubbleMonitor);
}

uint64_t sub_1002848D0(uint64_t a1)
{
  void *v2;

  v2 = &unk_1005CFF70;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 88);
}

uint64_t type metadata accessor for InstanceCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100287FA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InstanceCounter);
}

char *sub_10028491C(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v11[(v6 + 16) & ~(unint64_t)v6];
    swift_retain(v11);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = *a2;
      *(_QWORD *)a1 = *a2;
      v13 = v12;
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = sub_100008384(&qword_1007B70D8);
      a1[*(int *)(v10 + 48)] = *((_BYTE *)a2 + *(int *)(v10 + 48));
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

void sub_100284A10(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {

  }
  else if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for UUID(0);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
}

void **sub_100284A74(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v9 = *a2;
    *a1 = *a2;
    v10 = v9;
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = sub_100008384(&qword_1007B70D8);
    *((_BYTE *)a1 + *(int *)(v8 + 48)) = *((_BYTE *)a2 + *(int *)(v8 + 48));
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void **sub_100284B40(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for B389PresentationConfig.Mode);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v9 = *a2;
      *a1 = *a2;
      v10 = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = sub_100008384(&qword_1007B70D8);
      *((_BYTE *)a1 + *(int *)(v8 + 48)) = *((_BYTE *)a2 + *(int *)(v8 + 48));
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata accessor for B389PresentationConfig.Mode(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B7150, (uint64_t)&nominal type descriptor for B389PresentationConfig.Mode);
}

_BYTE *sub_100284C38(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_100008384(&qword_1007B70D8);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_100284CDC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for B389PresentationConfig.Mode);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_100008384(&qword_1007B70D8);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100284D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100284DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100284DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100284DC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[3];

  v5[0] = &unk_1005CFFB8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, &unk_1005CFFB8);
    v5[1] = v4;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
    return 0;
  }
  return result;
}

char *sub_100284E54(char *a1, char **a2, int *a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  unint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v11[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for B389PresentationConfig.Mode(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = *a2;
      *(_QWORD *)a1 = *a2;
      v13 = v12;
      swift_storeEnumTagMultiPayload(a1, v7, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = sub_100008384(&qword_1007B70D8);
      a1[*(int *)(v10 + 48)] = *((_BYTE *)a2 + *(int *)(v10 + 48));
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v14 = a3[6];
    *(_DWORD *)&a1[a3[5]] = *(_DWORD *)((char *)a2 + a3[5]);
    a1[v14] = *((_BYTE *)a2 + v14);
    v15 = a3[8];
    a1[a3[7]] = *((_BYTE *)a2 + a3[7]);
    a1[v15] = *((_BYTE *)a2 + v15);
    v16 = a3[10];
    *(_QWORD *)&a1[a3[9]] = *(char **)((char *)a2 + a3[9]);
    v17 = &a1[v16];
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = a3[11];
    v20 = a3[12];
    v21 = &a1[v19];
    v22 = (char **)((char *)a2 + v19);
    v23 = v22[1];
    *(_QWORD *)v21 = *v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = &a1[v20];
    v25 = (_OWORD *)((char *)a2 + v20);
    v26 = *(unint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain(v23);
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)v24 = *v25;
    }
    else
    {
      v27 = *(_QWORD *)v25;
      sub_10022E4A8(v27, v26);
      *(_QWORD *)v24 = v27;
      *((_QWORD *)v24 + 1) = v26;
    }
  }
  return a1;
}

uint64_t sub_100284FF4(id *a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  unint64_t v9;

  v4 = type metadata accessor for B389PresentationConfig.Mode(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  if (EnumCaseMultiPayload == 2)
  {

  }
  else if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  result = swift_bridgeObjectRelease(*(id *)((char *)a1 + *(int *)(a2 + 44) + 8));
  v8 = (uint64_t *)((char *)a1 + *(int *)(a2 + 48));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_100225AB4(*v8, v9);
  return result;
}

void **sub_100285098(void **a1, void **a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for B389PresentationConfig.Mode(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v10 = *a2;
    *a1 = *a2;
    v11 = v10;
    swift_storeEnumTagMultiPayload(a1, v6, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = sub_100008384(&qword_1007B70D8);
    *((_BYTE *)a1 + *(int *)(v9 + 48)) = *((_BYTE *)a2 + *(int *)(v9 + 48));
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[10];
  *(void **)((char *)a1 + a3[9]) = *(void **)((char *)a2 + a3[9]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[11];
  v18 = a3[12];
  v19 = (void **)((char *)a1 + v17);
  v20 = (void **)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (char *)a1 + v18;
  v23 = (_OWORD *)((char *)a2 + v18);
  v24 = *(unint64_t *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain(v21);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)v22 = *v23;
  }
  else
  {
    v25 = *(_QWORD *)v23;
    sub_10022E4A8(v25, v24);
    *(_QWORD *)v22 = v25;
    *((_QWORD *)v22 + 1) = v24;
  }
  return a1;
}

void **sub_10028520C(void **a1, void **a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for B389PresentationConfig.Mode);
    v6 = type metadata accessor for B389PresentationConfig.Mode(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v10 = *a2;
      *a1 = *a2;
      v11 = v10;
      swift_storeEnumTagMultiPayload(a1, v6, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = sub_100008384(&qword_1007B70D8);
      *((_BYTE *)a1 + *(int *)(v9 + 48)) = *((_BYTE *)a2 + *(int *)(v9 + 48));
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(void **)((char *)a1 + a3[9]) = *(void **)((char *)a2 + a3[9]);
  v12 = a3[10];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  v16 = a3[11];
  v17 = (void **)((char *)a1 + v16);
  v18 = (void **)((char *)a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[12];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = *(unint64_t *)((char *)a2 + v21 + 8);
  if (*(unint64_t *)((char *)a1 + v21 + 8) >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      v26 = *v23;
      sub_10022E4A8(v26, v24);
      v27 = *v22;
      v28 = v22[1];
      *v22 = v26;
      v22[1] = v24;
      sub_100225AB4(v27, v28);
      return a1;
    }
    sub_10023D5F8((uint64_t)v22);
    goto LABEL_12;
  }
  if (v24 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    return a1;
  }
  v25 = *v23;
  sub_10022E4A8(v25, v24);
  *v22 = v25;
  v22[1] = v24;
  return a1;
}

_BYTE *sub_100285400(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = type metadata accessor for B389PresentationConfig.Mode(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_100008384(&qword_1007B70D8);
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = a3[6];
  *(_DWORD *)&a1[a3[5]] = *(_DWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v10] = a2[v10];
  v11 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  return a1;
}

_BYTE *sub_100285510(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for B389PresentationConfig.Mode);
    v6 = type metadata accessor for B389PresentationConfig.Mode(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_100008384(&qword_1007B70D8);
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = a3[6];
  *(_DWORD *)&a1[a3[5]] = *(_DWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v10] = a2[v10];
  v11 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = a3[11];
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[12];
  v21 = (uint64_t *)&a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v23 = *(_QWORD *)&a1[v20 + 8];
  if (v23 >> 60 != 15)
  {
    v24 = v22[1];
    if (v24 >> 60 != 15)
    {
      v25 = *v21;
      *v21 = *v22;
      v21[1] = v24;
      sub_100225AB4(v25, v23);
      return a1;
    }
    sub_10023D5F8((uint64_t)v21);
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
  return a1;
}

uint64_t sub_100285690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028569C);
}

uint64_t sub_10028569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for B389PresentationConfig.Mode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100285728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100285734);
}

uint64_t sub_100285734(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for B389PresentationConfig.Mode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 44) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for B389PresentationConfig(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B71E0, (uint64_t)&nominal type descriptor for B389PresentationConfig);
}

uint64_t sub_1002857C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for B389PresentationConfig.Mode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[2] = &unk_1005CFFB8;
    v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[4] = &unk_1005CFFB8;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = "\t";
    v4[7] = &unk_1005D0000;
    v4[8] = &unk_1005D0018;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100285880(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646F43726F6C6F63 && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F43726F6C6F63, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7375655A7369 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7375655A7369, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x5079726574746162 && a2 == 0xEE0064616F6C7961)
  {
    v9 = 0xEE0064616F6C7961;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5079726574746162, 0xEE0064616F6C7961, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x5479726574746162 && a2 == 0xED0000776F4C6F6FLL)
  {
    v10 = 0xED0000776F4C6F6FLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162, 0xED0000776F4C6F6FLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6572685469737372 && a2 == 0xED0000646C6F6873)
  {
    v11 = 0xED0000646C6F6873;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572685469737372, 0xED0000646C6F6873, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000011)
  {
    v12 = 0x8000000100613890;
    if (a2 == 0x8000000100613890)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100613890, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6D614E6E65766967 && a2 == 0xE900000000000065)
  {
    v13 = 0xE900000000000065;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6E65766967, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6E69766172676E65 && a2 == 0xED00006174614467)
  {
    swift_bridgeObjectRelease(0xED00006174614467);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E69766172676E65, 0xED00006174614467, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_100285CB4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10071C7B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void sub_100285CFC(uint64_t a1)
{
  sub_1002877B8(a1, (uint64_t *)&unk_1007B7238, (unint64_t *)&qword_1007B5470, CNContact_ptr);
}

unint64_t sub_100285D18()
{
  unint64_t result;

  result = qword_1007B7250;
  if (!qword_1007B7250)
  {
    result = swift_getWitnessTable(&unk_1005D04F8, &type metadata for B389PresentationConfig.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B7250);
  }
  return result;
}

unint64_t sub_100285D5C()
{
  unint64_t result;

  result = qword_1007B7258;
  if (!qword_1007B7258)
  {
    result = swift_getWitnessTable(&unk_1005D04B8, &type metadata for B389PresentationConfig.Mode.DecodeError);
    atomic_store(result, (unint64_t *)&qword_1007B7258);
  }
  return result;
}

unint64_t sub_100285DA0()
{
  unint64_t result;

  result = qword_1007B7260;
  if (!qword_1007B7260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1007B7260);
  }
  return result;
}

unint64_t sub_100285DE4()
{
  unint64_t result;

  result = qword_1007B7298;
  if (!qword_1007B7298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1007B7298);
  }
  return result;
}

Swift::Int sub_100285E28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];
  _OWORD v21[2];
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008384((uint64_t *)&unk_1007B5870);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      sub_10026EFF8(v6 + 40 * v4, (uint64_t)v21);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v3 + 40));
      v8 = ~(-1 << *(_BYTE *)(v3 + 32));
      v9 = result & v8;
      v10 = (result & (unint64_t)v8) >> 6;
      v11 = *(_QWORD *)(v5 + 8 * v10);
      v12 = 1 << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_10026EFF8(*(_QWORD *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          v13 = static AnyHashable.== infix(_:_:)(v20, v21);
          result = sub_10022E6C0((uint64_t)v20);
          if ((v13 & 1) != 0)
            break;
          v9 = (v9 + 1) & v8;
          v10 = v9 >> 6;
          v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
          v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0)
            goto LABEL_8;
        }
        sub_10022E6C0((uint64_t)v21);
      }
      else
      {
LABEL_8:
        *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
        v14 = *(_QWORD *)(v3 + 48) + 40 * v9;
        v15 = v21[0];
        v16 = v21[1];
        *(_QWORD *)(v14 + 32) = v22;
        *(_OWORD *)v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        v17 = *(_QWORD *)(v3 + 16);
        v18 = __OFADD__(v17, 1);
        v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v19;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100285F8C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease((const char *)v1);
    if (v3)
    {
LABEL_3:
      sub_100008384(&qword_1007B7370);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain((const char *)v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease((const char *)v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v44 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v42 = (const char *)v1;
    while (1)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      v11 = __OFADD__(v9++, 1);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }
      v12 = v10;
      v13 = NSObject._rawHashValue(seed:)(v4[5]);
      v14 = -1 << *((_BYTE *)v4 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        type metadata accessor for SDAirDropSendConnection(0);
        v19 = *(id *)(v4[6] + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, v12);

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12);
          v1 = (uint64_t)v42;
          goto LABEL_18;
        }
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)(v22, v12);

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = (uint64_t)v42;
      }
      *(_QWORD *)&v8[8 * v16] = v18 | v17;
      *(_QWORD *)(v4[6] + 8 * v15) = v12;
      v24 = v4[2];
      v11 = __OFADD__(v24, 1);
      v25 = v24 + 1;
      if (v11)
        goto LABEL_44;
      v4[2] = v25;
LABEL_18:
      if (v9 == v44)
        return;
    }
  }
  v26 = 0;
  v43 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v43)
  {
    v27 = v4[5];
    v28 = *(id *)(v1 + 32 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      type metadata accessor for SDAirDropSendConnection(0);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0)
        goto LABEL_30;
      v37 = ~v30;
      v31 = (v31 + 1) & v37;
      v32 = v31 >> 6;
      v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
      v34 = 1 << v31;
      if ((v33 & (1 << v31)) != 0)
      {
        while (1)
        {
          v38 = *(id *)(v4[6] + 8 * v31);
          v39 = static NSObject.== infix(_:_:)(v38, v28);

          if ((v39 & 1) != 0)
            break;
          v31 = (v31 + 1) & v37;
          v32 = v31 >> 6;
          v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
          v34 = 1 << v31;
          if ((v33 & (1 << v31)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v5 = v44;
        goto LABEL_31;
      }
LABEL_38:
      v5 = v44;
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_45;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v5)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

void *sub_1002862E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE v56[32];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t __s1;

  v2 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v56[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __chkstk_darwin(v3);
  v8 = &v56[-v7];
  v9 = __chkstk_darwin(v6);
  v69 = &v56[-v10];
  v11 = __chkstk_darwin(v9);
  v68 = &v56[-v12];
  v13 = __chkstk_darwin(v11);
  v70 = &v56[-v14];
  v15 = __chkstk_darwin(v13);
  v17 = &v56[-v16];
  __chkstk_darwin(v15);
  v19 = &v56[-v18];
  v20 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  __chkstk_darwin(v20);
  v64 = &v56[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  __chkstk_darwin(v22);
  v60 = &v56[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = sub_100008384((uint64_t *)&unk_1007B86D0);
  __chkstk_darwin(v66);
  v25 = &v56[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v81 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v26 = *(_QWORD *)(v81 - 8);
  v27 = __chkstk_darwin(v81);
  v73 = &v56[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __chkstk_darwin(v27);
  v75 = &v56[-v30];
  v31 = __chkstk_darwin(v29);
  v32 = __chkstk_darwin(v31);
  v33 = __chkstk_darwin(v32);
  v65 = &v56[-v34];
  __chkstk_darwin(v33);
  v38 = &v56[-v37];
  v39 = *(_QWORD *)(a1 + 16);
  if (!v39)
    return &_swiftEmptySetSingleton;
  v71 = v35;
  v61 = v17;
  v62 = v8;
  v63 = v5;
  v40 = v39;
  v72 = v36;
  sub_100008384(&qword_1007B7350);
  v57 = v40;
  v41 = static _SetStorage.allocate(capacity:)(v40);
  v42 = 0;
  v79 = v41 + 56;
  v58 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  v43 = v41;
  v80 = *(_QWORD *)(v26 + 72);
  v59 = v2;
  v74 = v19;
  v44 = v66;
  v76 = v38;
  v77 = v41;
  v45 = (uint64_t)v65;
  do
  {
    v67 = v42;
    sub_100244384(v58 + v80 * v42, (uint64_t)v38, type metadata accessor for SDAirDropDiscoveredEndpoint);
    Hasher.init(_seed:)(&__s1);
    sub_1002B2164();
    v46 = Hasher._finalize()();
    v78 = ~(-1 << *(_BYTE *)(v43 + 32));
    v47 = v46 & v78;
    v48 = (v46 & (unint64_t)v78) >> 6;
    v49 = *(_QWORD *)(v79 + 8 * v48);
    if (((1 << (v46 & v78)) & v49) != 0)
    {
      sub_100244384(*(_QWORD *)(v43 + 48) + v47 * v80, v45, type metadata accessor for SDAirDropDiscoveredEndpoint);
      v53 = (uint64_t)&v25[*(int *)(v44 + 48)];
      sub_100244384(v45, (uint64_t)v25, type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_100244384((uint64_t)v38, v53, type metadata accessor for SDAirDropDiscoveredEndpoint);
      v54 = (char *)&loc_100286808 + dword_10028775C[swift_getEnumCaseMultiPayload(v25, v81)];
      __asm { BR              X9 }
    }
    *(_QWORD *)(v79 + 8 * v48) = (1 << v47) | v49;
    sub_100221DB4((uint64_t)v38, *(_QWORD *)(v43 + 48) + v47 * v80, type metadata accessor for SDAirDropDiscoveredEndpoint);
    v50 = *(_QWORD *)(v43 + 16);
    v51 = __OFADD__(v50, 1);
    v52 = v50 + 1;
    if (v51)
    {
      __break(1u);
      JUMPOUT(0x1002876BCLL);
    }
    *(_QWORD *)(v43 + 16) = v52;
    v42 = v67 + 1;
  }
  while (v67 + 1 != v57);
  return (void *)v43;
}

void sub_10028779C(uint64_t a1)
{
  sub_1002877B8(a1, &qword_1007B72A0, (unint64_t *)&qword_1007B72A8, BSAction_ptr);
}

void sub_1002877B8(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  id v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v50;

  v5 = a1;
  v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease((const char *)v5);
    if (v7)
    {
LABEL_3:
      sub_100008384(a2);
      v8 = (_QWORD *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6)
        goto LABEL_4;
LABEL_11:
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain((const char *)v5);
      v9 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease((const char *)v5);
      if (!v9)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
  }
  v8 = &_swiftEmptySetSingleton;
  if (v6)
    goto LABEL_11;
LABEL_4:
  v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return;
LABEL_15:
  v12 = (char *)(v8 + 7);
  v50 = v9;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v46 = (const char *)v5;
    while (1)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_43;
      }
      v16 = v14;
      v17 = NSObject._rawHashValue(seed:)(v8[5]);
      v18 = -1 << *((_BYTE *)v8 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        sub_100221EDC(0, a3, a4);
        v23 = *(id *)(v8[6] + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23, v16);

        if ((v24 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v16);
          v5 = (uint64_t)v46;
          goto LABEL_18;
        }
        v25 = ~v18;
        while (1)
        {
          v19 = (v19 + 1) & v25;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            break;
          v26 = *(id *)(v8[6] + 8 * v19);
          v27 = static NSObject.== infix(_:_:)(v26, v16);

          if ((v27 & 1) != 0)
            goto LABEL_17;
        }
        v5 = (uint64_t)v46;
      }
      *(_QWORD *)&v12[8 * v20] = v22 | v21;
      *(_QWORD *)(v8[6] + 8 * v19) = v16;
      v28 = v8[2];
      v15 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v15)
        goto LABEL_44;
      v8[2] = v29;
LABEL_18:
      if (v13 == v50)
        return;
    }
  }
  v30 = 0;
  v47 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v30 != v47)
  {
    v31 = v8[5];
    v32 = *(id *)(v5 + 32 + 8 * v30);
    v33 = NSObject._rawHashValue(seed:)(v31);
    v34 = -1 << *((_BYTE *)v8 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
    v38 = 1 << v35;
    if (((1 << v35) & v37) != 0)
    {
      sub_100221EDC(0, a3, a4);
      v39 = *(id *)(v8[6] + 8 * v35);
      v40 = static NSObject.== infix(_:_:)(v39, v32);

      if ((v40 & 1) != 0)
        goto LABEL_30;
      v41 = ~v34;
      v35 = (v35 + 1) & v41;
      v36 = v35 >> 6;
      v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
      v38 = 1 << v35;
      if ((v37 & (1 << v35)) != 0)
      {
        while (1)
        {
          v42 = *(id *)(v8[6] + 8 * v35);
          v43 = static NSObject.== infix(_:_:)(v42, v32);

          if ((v43 & 1) != 0)
            break;
          v35 = (v35 + 1) & v41;
          v36 = v35 >> 6;
          v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
          v38 = 1 << v35;
          if ((v37 & (1 << v35)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v9 = v50;
        goto LABEL_31;
      }
LABEL_38:
      v9 = v50;
    }
    *(_QWORD *)&v12[8 * v36] = v38 | v37;
    *(_QWORD *)(v8[6] + 8 * v35) = v32;
    v44 = v8[2];
    v15 = __OFADD__(v44, 1);
    v45 = v44 + 1;
    if (v15)
      goto LABEL_45;
    v8[2] = v45;
LABEL_31:
    if (++v30 == v9)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

unint64_t sub_100287B1C()
{
  unint64_t result;

  result = qword_1007B72C8;
  if (!qword_1007B72C8)
  {
    result = swift_getWitnessTable(&unk_1005D0468, &type metadata for B389PresentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B72C8);
  }
  return result;
}

unint64_t sub_100287B60()
{
  unint64_t result;

  result = qword_1007B72E8;
  if (!qword_1007B72E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1007B72E8);
  }
  return result;
}

void *sub_100287BA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100008384((uint64_t *)&unk_1007B72F0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100220D78((unint64_t *)&unk_1007B7300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t type metadata accessor for IntegerPacker.PackError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for IntegerPacker.PackError);
}

uint64_t sub_100287E18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10027CADC(a1, v2[2], v2[3], v2[5], v2[6], a2);
}

uint64_t sub_100287E3C()
{
  return dispatch thunk of static BinaryInteger.| infix(_:_:)();
}

unint64_t sub_100287E70()
{
  unint64_t result;

  result = qword_1007B7330;
  if (!qword_1007B7330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1007B7330);
  }
  return result;
}

_QWORD *sub_100287EB4()
{
  uint64_t v0;

  return sub_100281154(v0);
}

uint64_t sub_100287ECC()
{
  Swift::String *v0;

  return sub_100281344(v0);
}

id sub_100287ED4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 64), "invalidate");
}

uint64_t sub_100287EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100287EF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100287EFC(void *a1)
{
  _QWORD *v1;

  return sub_10027E410(a1, v1);
}

void sub_100287F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10027E914(a1, a2, v2);
}

uint64_t sub_100287F0C(void *a1)
{
  _QWORD *v1;

  return sub_10027E96C(a1, v1);
}

uint64_t sub_100287F14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100287F38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100287F58(uint64_t a1, uint64_t a2)
{
  return (a1 > a2) - (a1 < a2);
}

void sub_100287F6C(const char *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  sub_10027D54C(a1, v3[2], v3[3], v3[4], v3[5], v3[7], a3, a2);
}

uint64_t sub_100287FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100287FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t type metadata accessor for IntegerPacker(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for IntegerPacker);
}

uint64_t sub_100287FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t getEnumTagSinglePayload for SDTempPairingSubService(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_10028803C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10028807C + 4 * byte_1005CFD60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10028809C + 4 * byte_1005CFD65[v4]))();
}

_BYTE *sub_10028807C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10028809C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002880A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002880AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002880B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002880BC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for B389PresentationConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for B389PresentationConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1002881A4 + 4 * byte_1005CFD6F[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1002881D8 + 4 * byte_1005CFD6A[v4]))();
}

uint64_t sub_1002881D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002881E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002881E8);
  return result;
}

uint64_t sub_1002881F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002881FCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100288200(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100288208(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for B389PresentationConfig.CodingKeys()
{
  return &type metadata for B389PresentationConfig.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SDAuthenticationRole(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for B389PresentationConfig.Mode.DecodeError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100288300 + 4 * byte_1005CFD79[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100288334 + 4 * byte_1005CFD74[v4]))();
}

uint64_t sub_100288334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028833C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100288344);
  return result;
}

uint64_t sub_100288350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100288358);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10028835C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100288364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100288370(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for B389PresentationConfig.Mode.DecodeError()
{
  return &type metadata for B389PresentationConfig.Mode.DecodeError;
}

uint64_t storeEnumTagSinglePayload for B389PresentationConfig.Mode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002883D8 + 4 * byte_1005CFD83[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10028840C + 4 * byte_1005CFD7E[v4]))();
}

uint64_t sub_10028840C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100288414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10028841CLL);
  return result;
}

uint64_t sub_100288428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100288430);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100288434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028843C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for B389PresentationConfig.Mode.CodingKeys()
{
  return &type metadata for B389PresentationConfig.Mode.CodingKeys;
}

unint64_t sub_10028845C()
{
  unint64_t result;

  result = qword_1007B74B8;
  if (!qword_1007B74B8)
  {
    result = swift_getWitnessTable(&unk_1005D0278, &type metadata for B389PresentationConfig.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B74B8);
  }
  return result;
}

unint64_t sub_1002884A4()
{
  unint64_t result;

  result = qword_1007B74C0;
  if (!qword_1007B74C0)
  {
    result = swift_getWitnessTable(&unk_1005D02E0, &type metadata for B389PresentationConfig.Mode.DecodeError);
    atomic_store(result, (unint64_t *)&qword_1007B74C0);
  }
  return result;
}

unint64_t sub_1002884EC()
{
  unint64_t result;

  result = qword_1007B74C8;
  if (!qword_1007B74C8)
  {
    result = swift_getWitnessTable(&unk_1005D0398, &type metadata for B389PresentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B74C8);
  }
  return result;
}

uint64_t sub_100288530(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1005D0400, a1);
}

unint64_t sub_100288544()
{
  unint64_t result;

  result = qword_1007B74D0;
  if (!qword_1007B74D0)
  {
    result = swift_getWitnessTable(&unk_1005D0308, &type metadata for B389PresentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B74D0);
  }
  return result;
}

unint64_t sub_10028858C()
{
  unint64_t result;

  result = qword_1007B74D8;
  if (!qword_1007B74D8)
  {
    result = swift_getWitnessTable(&unk_1005D0330, &type metadata for B389PresentationConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B74D8);
  }
  return result;
}

unint64_t sub_1002885D4()
{
  unint64_t result;

  result = qword_1007B74E0;
  if (!qword_1007B74E0)
  {
    result = swift_getWitnessTable(&unk_1005D01B0, &type metadata for B389PresentationConfig.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B74E0);
  }
  return result;
}

unint64_t sub_10028861C()
{
  unint64_t result;

  result = qword_1007B74E8;
  if (!qword_1007B74E8)
  {
    result = swift_getWitnessTable(&unk_1005D01D8, &type metadata for B389PresentationConfig.Mode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007B74E8);
  }
  return result;
}

uint64_t sub_100288694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B74F0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B74F0);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100288724(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1002887B4, static AirDropActor.shared, 0);
}

uint64_t sub_1002887B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = *(_QWORD *)(v1 + 40);
  v2 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = SFAirDropReceive.AskRequest.files.getter(a1);
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease(v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v10 = *(_QWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v11 = *(_QWORD *)(v1 + 32);
  if (v7)
  {
    v12 = SFAirDropReceive.AskRequest.urlItems.getter(v8);
    v13 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease(v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    if (!v13)
    {
      v16 = SFAirDropReceive.AskRequest.senderBundleID.getter(v14);
      v18 = v17;
      if (v16 == 0xD000000000000014 && v17 == 0x80000001006139E0)
      {
        swift_bridgeObjectRelease(0x80000001006139E0);
      }
      else
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000014, 0x80000001006139E0, 0);
        swift_bridgeObjectRelease(v18);
        v15 = 0;
        if ((v19 & 1) == 0)
          goto LABEL_10;
      }
      v15 = sub_1002888EC(*(NSObject **)(v1 + 16));
      goto LABEL_10;
    }
    v15 = 0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 32));
    v15 = 0;
  }
LABEL_10:
  swift_task_dealloc(*(_QWORD *)(v1 + 48));
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(v15 & 1);
}

uint64_t sub_1002888EC(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, unint64_t, uint64_t);
  void *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  os_log_t v55;
  uint64_t *v56;
  uint64_t (*v57)(char *, unint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59[2];

  v2 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = SFVoiceMemosAppAvailable(v12);
  if ((_DWORD)result)
  {
    v52 = v5;
    v53 = v3;
    v54 = v2;
    v55 = a1;
    v16 = SFAirDropReceive.AskRequest.files.getter(result);
    v17 = v16;
    v18 = *(_QWORD *)(v16 + 16);
    if (v18)
    {
      v49 = v9;
      v50 = v6;
      v51 = v7;
      v19 = v16 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v57 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v20 = v57(v14, v19, v10);
      SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v20);
      v22 = v21;
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v22);
      LODWORD(v22) = SFIsVoiceMemo(v23);

      v24 = *(void (**)(char *, uint64_t))(v11 + 8);
      v24(v14, v10);
      if (!(_DWORD)v22)
      {
LABEL_8:
        swift_bridgeObjectRelease(v17);
        return 0;
      }
      v25 = 1;
      while (1)
      {
        if (v18 == v25)
        {
          swift_bridgeObjectRelease(v17);
          v25 = (unint64_t)v56;
          goto LABEL_11;
        }
        if (v25 >= *(_QWORD *)(v17 + 16))
          break;
        v26 = v57(v14, v19 + *(_QWORD *)(v11 + 72) * v25++, v10);
        SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v26);
        v28 = v27;
        v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v28);
        LOBYTE(v28) = SFIsVoiceMemo(v23);

        v24(v14, v10);
        if ((v28 & 1) == 0)
          goto LABEL_8;
      }
      __break(1u);
      swift_once(&qword_1007B3D68, sub_100288694);
      v31 = type metadata accessor for Logger(0);
      sub_100221DF8(v31, (uint64_t)qword_1007B74F0);
      (*(void (**)(NSString, uint64_t, void (*)(char *, uint64_t)))(v19 + 16))(v23, v11, v24);
      swift_errorRetain(v10);
      v32 = swift_errorRetain(v10);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(22, -1);
        v56 = (uint64_t *)swift_slowAlloc(8, -1);
        v57 = (uint64_t (*)(char *, unint64_t, uint64_t))swift_slowAlloc(32, -1);
        v59[0] = (uint64_t)v57;
        *(_DWORD *)v35 = 136315394;
        v50 = v35 + 4;
        v51 = v19;
        v36 = v52;
        v55 = v33;
        SFAirDropReceive.AskRequest.id.getter();
        v37 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        v38 = v54;
        v39 = dispatch thunk of CustomStringConvertible.description.getter(v54, v37);
        v40 = v23;
        v42 = v41;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v38);
        v58 = sub_100228BD8(v39, v42, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v50);
        swift_bridgeObjectRelease(v42);
        (*(void (**)(NSString, _QWORD))(v51 + 8))(v40, v24);
        *(_WORD *)(v35 + 12) = 2112;
        swift_errorRetain(v10);
        v43 = _swift_stdlib_bridgeErrorToNSError(v10);
        v58 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v35 + 14);
        v44 = v56;
        *v56 = v43;
        swift_errorRelease(v10);
        swift_errorRelease(v10);
        v45 = v55;
        _os_log_impl((void *)&_mh_execute_header, v55, v34, "Failed to get Voice Memo app for ask request %s: %@", (uint8_t *)v35, 0x16u);
        v46 = sub_100008384(&qword_1007B4C30);
        swift_arrayDestroy(v44, 1, v46);
        swift_slowDealloc(v44, -1, -1);
        v47 = v57;
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v35, -1, -1);

        swift_errorRelease(v10);
      }
      else
      {
        swift_errorRelease(v10);
        (*(void (**)(NSString, _QWORD))(v19 + 8))(v23, v24);
        swift_errorRelease(v10);
        swift_errorRelease(v10);

      }
    }
    else
    {
      swift_bridgeObjectRelease(v16);
      v25 = (unint64_t)v56;
LABEL_11:
      v29 = objc_allocWithZone((Class)LSApplicationRecord);
      v30 = sub_100528FF4(0xD000000000000014, 0x80000001006139E0, 1);
      v48 = *(void **)(v25 + 16);
      *(_QWORD *)(v25 + 16) = v30;

    }
    return *(_QWORD *)(v25 + 16) != 0;
  }
  return result;
}

uint64_t sub_100288E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100288E70, static AirDropActor.shared, 0);
}

uint64_t sub_100288E70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[3];
  v2 = static AirDropActor.shared;
  v3 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v4 = swift_task_alloc(32);
  v0[4] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v5;
  v6 = sub_100008384((uint64_t *)&unk_1007B6820);
  *v5 = v0;
  v5[1] = sub_100288F48;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[2], v2, v3, 0xD000000000000027, 0x8000000100613990, sub_100289608, v4, v6);
}

uint64_t sub_100288F48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_100288F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v2 = sub_100008384(&qword_1007B7620);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (void *)objc_opt_self(SDAirDropHandlerVoiceMemos);
  type metadata accessor for URL(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10071F9B8, v8 + v4, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v9 + v8, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_100289674;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100289150;
  aBlock[3] = &unk_10071F9D0;
  v10 = _Block_copy(aBlock);
  swift_release(v12);
  objc_msgSend(v5, "importMemosForItems:completion:", isa, v10);
  _Block_release(v10);

}

uint64_t sub_1002890FC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = _swiftEmptyArrayStorage;
  if (a1)
    v1 = a1;
  v4 = v1;
  swift_bridgeObjectRetain(a1);
  v2 = sub_100008384(&qword_1007B7620);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_100289150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v4 = a2;
  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = type metadata accessor for URL(0);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v6(v4, a3);
  swift_release(v5);
  return swift_bridgeObjectRelease(v4);
}

uint64_t type metadata accessor for SDAirDropContentHandlerVoiceMemos()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary33SDAirDropContentHandlerVoiceMemos);
}

uint64_t sub_1002891D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SDAirDropContentHandlerVoiceMemos();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_10028920C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007B7534);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10022320C;
  return sub_100288724(a1);
}

uint64_t sub_100289260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  v2 = swift_allocObject(&unk_10071F990, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  v3 = sub_100008384((uint64_t *)&unk_1007B6820);
  return SFProgressTask.init(_:initialProgress:operation:file:line:)(0xD000000000000012, 0x8000000100613900, &v5, &unk_1007B7618, v2, 0xD000000000000068, 0x8000000100613920, 66, &type metadata for Double, v3);
}

void sub_100289320(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[56];

  v3 = SFAirDropReceive.AskRequest.files.getter(a1);
  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease(v3);
  v5 = sub_100008384(&qword_1007B7600);
  inited = swift_initStackObject(v5, v23);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = 0x454D5F4543494F56;
  v7 = inited + 32;
  *(_QWORD *)(inited + 40) = 0xEA00000000004F4DLL;
  *(_QWORD *)(inited + 48) = v4;
  swift_bridgeObjectRetain(0xEA00000000004F4DLL);
  swift_bridgeObjectRetain(inited);
  v8._countAndFlagsBits = 95;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x454D5F4543494F56;
  v9._object = (void *)0xEA00000000004F4DLL;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(0xEA00000000004F4DLL);
  if (v4 > 1)
  {
    v10._countAndFlagsBits = 0x4C4152554C505FLL;
    v10._object = (void *)0xE700000000000000;
    String.append(_:)(v10);
  }
  swift_bridgeObjectRelease(inited);
  if ((a2 & 1) != 0)
  {
    v11._countAndFlagsBits = 0x4C4154495041435FLL;
    v11._object = (void *)0xEC00000044455A49;
    String.append(_:)(v11);
  }
  v12._countAndFlagsBits = 0x545845545FLL;
  v12._object = (void *)0xE500000000000000;
  String.append(_:)(v12);
  swift_setDeallocating(inited);
  v13 = *(_QWORD *)(inited + 16);
  v14 = sub_100008384(&qword_1007B7608);
  swift_arrayDestroy(v7, v13, v14);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEF524546534E4152);
  v17 = (id)SFLocalizedStringForKey(v15, v16);

  if (v17)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v21 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1005CD2A0;
    *(_QWORD *)(v22 + 56) = &type metadata for Int;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v22 + 32) = v4;
    static String.localizedStringWithFormat(_:_:)(v18, v20, v22);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100289574()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100289598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7614);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10000D12C;
  return sub_100288E08(a1, a2, a3, v8);
}

void sub_100289608(uint64_t a1)
{
  sub_100288F9C(a1);
}

uint64_t sub_100289610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100008384(&qword_1007B7620);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100289674(_QWORD *a1)
{
  sub_100008384(&qword_1007B7620);
  return sub_1002890FC(a1);
}

uint64_t sub_1002896C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002896D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for SDAirDropClassroomBrowserFactory()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary32SDAirDropClassroomBrowserFactory);
}

uint64_t sub_1002896FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B7628);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B7628);
  if (qword_1007B3E70 != -1)
    swift_once(&qword_1007B3E70, sub_1002E9ECC);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8220);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10028978C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v1 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser))
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_managedConfig);
    if (v2)
    {
      if (objc_msgSend(v2, "isClassroomEnabled"))
      {
        v3 = objc_msgSend(objc_allocWithZone((Class)CRKShareTargetBrowser), "initWithDelegate:queue:", v0, *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browserQueue));
        v4 = *(void **)(v0 + v1);
        *(_QWORD *)(v0 + v1) = v3;

        v5 = *(void **)(v0 + v1);
        if (v5)
          objc_msgSend(v5, "resume");
      }
    }
  }
}

uint64_t sub_100289834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(_QWORD *);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[9];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32[24];

  v2 = v1;
  v27 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0);
  __chkstk_darwin(v27);
  v26[8] = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  __chkstk_darwin(v5);
  v26[7] = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v26[5] = *(_QWORD *)(v7 - 8);
  v26[6] = v7;
  __chkstk_darwin(v7);
  v26[4] = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  __chkstk_darwin(v9);
  v26[3] = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v11 = __chkstk_darwin(v30);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v26 - v13;
  __chkstk_darwin(v12);
  v17 = (char *)v26 - v16;
  if (*(_QWORD *)(a1 + 16))
  {
    v26[1] = a1;
    v26[2] = v2;
    v18 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v29 = *(_QWORD *)(v15 + 72);
    swift_bridgeObjectRetain(a1);
    v28 = v14;
    v31 = v17;
    sub_10022E534(v18, (uint64_t)v17);
    sub_10022E534((uint64_t)v17, (uint64_t)v14);
    v19 = (char *)&loc_100289A84 + dword_100289D74[swift_getEnumCaseMultiPayload(v14, v30)];
    __asm { BR              X9 }
  }
  v20 = *(void (**)(_QWORD *))(v2
                                        + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_endpointsUpdateHandler);
  v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints);
  swift_beginAccess(v21, v32, 0, 0);
  v22 = *v21;
  v23 = swift_bridgeObjectRetain(v22);
  v24 = sub_100229314(v23);
  swift_bridgeObjectRelease(v22);
  v20(v24);
  return swift_release(v24);
}

uint64_t sub_100289D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v2 = v1;
  v4 = sub_100008384(&qword_1007B7760);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v29 = v2;
    v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints);
    swift_bridgeObjectRetain(a1);
    v28 = a1;
    v9 = (uint64_t *)(a1 + 40);
    do
    {
      v11 = *(v9 - 1);
      v12 = *v9;
      swift_beginAccess(v8, v31, 33, 0);
      v13 = *v8;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      v14 = sub_10045C200(v11, v12);
      LOBYTE(v11) = v15;
      swift_bridgeObjectRelease(v13);
      if ((v11 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
        v17 = *v8;
        v30 = *v8;
        *v8 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10046EE94();
          v17 = v30;
        }
        swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v17 + 48) + 16 * v14 + 8));
        v18 = *(_QWORD *)(v17 + 56);
        v19 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
        v20 = *(_QWORD *)(v19 - 8);
        sub_100221DB4(v18 + *(_QWORD *)(v20 + 72) * v14, (uint64_t)v6, type metadata accessor for SDAirDropDiscoveredEndpoint);
        sub_10026C48C(v14, v17);
        v21 = *v8;
        *v8 = v17;
        swift_bridgeObjectRelease(v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v6, 0, 1, v19);
      }
      else
      {
        v10 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      }
      v9 += 2;
      swift_bridgeObjectRelease(v12);
      sub_10028B518((uint64_t)v6);
      swift_endAccess(v31);
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v28);
    v2 = v29;
  }
  v22 = *(void (**)(_QWORD *))(v2
                                        + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_endpointsUpdateHandler);
  v23 = (uint64_t *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints);
  swift_beginAccess(v23, v31, 0, 0);
  v24 = *v23;
  v25 = swift_bridgeObjectRetain(v24);
  v26 = sub_100229314(v25);
  swift_bridgeObjectRelease(v24);
  v22(v26);
  return swift_release(v26);
}

uint64_t sub_100289FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return swift_task_switch(sub_100289FE4, 0, 0);
}

uint64_t sub_100289FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 64) = Strong;
  if (Strong)
  {
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 72) = static MainActor.shared.getter();
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10028A098, v5, v6);
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10028A098()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)v0[8];
  v2 = v0[7];
  swift_release(v0[9]);
  sub_100289834(v2);

  return swift_task_switch(sub_10028A0E4, 0, 0);
}

uint64_t sub_10028A0E4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 64) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10028A10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return swift_task_switch(sub_10028A128, 0, 0);
}

uint64_t sub_10028A128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 64) = Strong;
  if (Strong)
  {
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 72) = static MainActor.shared.getter();
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10028A1DC, v5, v6);
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10028A1DC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)v0[8];
  v2 = v0[7];
  swift_release(v0[9]);
  sub_100289D84(v2);

  return swift_task_switch(sub_10028B668, 0, 0);
}

uint64_t sub_10028A234(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  id v10;
  id v11;

  v6 = a4;
  if (a4)
  {
    v9 = sub_100221EDC(0, &qword_1007B7748, CRKShareTarget_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v9);
  }
  v10 = a3;
  v11 = a1;
  a5(v6);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10028A2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[13] = a4;
  v5[14] = a5;
  v6 = sub_100008384(&qword_1007B68A0);
  v5[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v5[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[17] = v8;
  v5[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10028A338, 0, 0);
}

uint64_t sub_10028A338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (qword_1007B3D70 != -1)
    swift_once(&qword_1007B3D70, sub_1002896FC);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = sub_100221DF8(v4, (uint64_t)qword_1007B7628);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 104);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    result = swift_slowAlloc(32, -1);
    v35 = result;
    *(_DWORD *)v10 = 136315138;
    if (!v9)
    {
      __break(1u);
      return result;
    }
    v12 = result;
    v32 = *(_QWORD *)(v0 + 136);
    v33 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 144);
    swift_getErrorValue(v1, v0 + 88, v0 + 64);
    v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    v15 = v14;
    *(_QWORD *)(v0 + 96) = sub_100228BD8(v13, v14, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v10 + 4);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Classroom browser failed %s", v10, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 128);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  v19 = *(_QWORD *)(v0 + 112) + 16;
  swift_beginAccess(v19, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v19, v20);
  *(_QWORD *)(v0 + 152) = Strong;
  if (Strong)
  {
    *(_QWORD *)(v0 + 160) = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_delegate;
    v22 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 168) = v22;
    *(_QWORD *)(v0 + 176) = static MainActor.shared.getter(v22);
    v23 = dispatch thunk of Actor.unownedExecutor.getter(v22, &protocol witness table for MainActor);
    return swift_task_switch(sub_10028A678, v23, v24);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 112) + 16;
    swift_beginAccess(v25, v0 + 40, 0, 0);
    v27 = swift_unknownObjectWeakLoadStrong(v25, v26);
    *(_QWORD *)(v0 + 192) = v27;
    if (v27)
    {
      v28 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v28);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(v28, &protocol witness table for MainActor);
      return swift_task_switch(sub_10028A9BC, v29, v30);
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 120);
      swift_task_dealloc(*(_QWORD *)(v0 + 144));
      swift_task_dealloc(v31);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_10028A678()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t (*v5)();

  v1 = v0[19];
  v2 = v0[20];
  swift_release(v0[22]);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + v2, v3);
  v0[23] = Strong;
  if (Strong)
    v5 = sub_10028A6D4;
  else
    v5 = sub_10028A740;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10028A6D4()
{
  uint64_t v0;

  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10028A808, static AirDropActor.shared, 0);
}

uint64_t sub_10028A740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 112) + 16;
  swift_beginAccess(v1, v0 + 40, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 192) = Strong;
  if (Strong)
  {
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v4);
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10028A9BC, v5, v6);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10028A808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = swift_allocObject(&unk_10071FA88, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16, v1);
  v5 = swift_retain(v4);
  v6 = static MainActor.shared.getter(v5);
  v7 = (_QWORD *)swift_allocObject(&unk_10071FAB0, 40, 7);
  v7[2] = v6;
  v7[3] = &protocol witness table for MainActor;
  v7[4] = v4;
  swift_release(v4);
  v8 = sub_100252EC0(v2, (uint64_t)&unk_1007B7740, (uint64_t)v7);
  swift_release(v8);
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_10028A900, 0, 0);
}

uint64_t sub_10028A900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 112) + 16;
  swift_beginAccess(v1, v0 + 40, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(_QWORD *)(v0 + 192) = Strong;
  if (Strong)
  {
    v4 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 200) = static MainActor.shared.getter();
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    return swift_task_switch(sub_10028A9BC, v5, v6);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10028A9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 200));
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser);
  v4 = *(void **)(v0 + 192);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");
    v5 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;

    v4 = v5;
  }

  v6 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for SDAirDropClassroomBrowser()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser);
}

id sub_10028AC24(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browserQueue;
  sub_100221EDC(0, (unint64_t *)&qword_1007B42D0, OS_dispatch_queue_ptr);
  v7 = v2;
  *(_QWORD *)&v2[v6] = static OS_dispatch_queue.main.getter(v7);
  v8 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_delegate];
  *((_QWORD *)v8 + 1) = 0;
  swift_unknownObjectWeakInit(v8, 0);
  v9 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_managedConfig;
  *(_QWORD *)&v7[v9] = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  *(_QWORD *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints] = &_swiftEmptyDictionarySingleton;
  v10 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_endpointsUpdateHandler];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  swift_retain(a2);

  v12.receiver = v7;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t sub_10028AD3C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10028AD60()
{
  return sub_10028B56C((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10028AD74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1007B7734);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_10028A2B4(a1, v4, v5, v7, v6);
}

uint64_t sub_10028ADEC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10028AE18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007BD9C4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_10039D724(a1, v4, v5, v6);
}

uint64_t sub_10028AE84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  void *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (void **)((char *)&v38 - v10);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v38 - v13;
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v38 - v15);
  v17 = sub_100008384(&qword_1007B68A0);
  result = __chkstk_darwin(v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v40 = v2;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v37 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v37 = a1;
      v22 = a1;
      swift_bridgeObjectRetain_n(a1, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v37);
      v21 = result;
    }
    else
    {
      v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = a1;
      result = swift_bridgeObjectRetain_n(a1, 2);
    }
    v39 = v20;
    v41 = v22;
    if (!v21)
    {
      v24 = _swiftEmptyArrayStorage;
LABEL_15:
      swift_bridgeObjectRelease_n(v41, 2);
      v27 = type metadata accessor for TaskPriority(0);
      v28 = (uint64_t)v39;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v39, 1, 1, v27);
      v29 = swift_allocObject(&unk_10071FA38, 24, 7);
      swift_unknownObjectWeakInit(v29 + 16, v40);
      v30 = (_QWORD *)swift_allocObject(&unk_10071FB00, 48, 7);
      v30[2] = 0;
      v30[3] = 0;
      v30[4] = v29;
      v30[5] = v24;
      v31 = sub_100252EE0(v28, (uint64_t)&unk_1007B7770, (uint64_t)v30);
      return swift_release(v31);
    }
    if (v21 >= 1)
    {
      if ((v22 & 0xC000000000000001) != 0)
      {
        v23 = 0;
        v24 = _swiftEmptyArrayStorage;
        do
        {
          *v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v41);
          swift_storeEnumTagMultiPayload(v16, v4, 3);
          sub_100221DB4((uint64_t)v16, (uint64_t)v14, type metadata accessor for SDAirDropDiscoveredEndpoint);
          if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
            v24 = (_QWORD *)sub_1002280E8(0, v24[2] + 1, 1, (unint64_t)v24);
          v26 = v24[2];
          v25 = v24[3];
          if (v26 >= v25 >> 1)
            v24 = (_QWORD *)sub_1002280E8(v25 > 1, v26 + 1, 1, (unint64_t)v24);
          ++v23;
          v24[2] = v26 + 1;
          sub_100221DB4((uint64_t)v14, (uint64_t)v24+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v26, type metadata accessor for SDAirDropDiscoveredEndpoint);
        }
        while (v21 != v23);
      }
      else
      {
        v32 = (void **)(v22 + 32);
        v24 = _swiftEmptyArrayStorage;
        do
        {
          v33 = *v32;
          *v11 = *v32;
          swift_storeEnumTagMultiPayload(v11, v4, 3);
          sub_100221DB4((uint64_t)v11, (uint64_t)v8, type metadata accessor for SDAirDropDiscoveredEndpoint);
          v34 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
            v24 = (_QWORD *)sub_1002280E8(0, v24[2] + 1, 1, (unint64_t)v24);
          v36 = v24[2];
          v35 = v24[3];
          if (v36 >= v35 >> 1)
            v24 = (_QWORD *)sub_1002280E8(v35 > 1, v36 + 1, 1, (unint64_t)v24);
          v24[2] = v36 + 1;
          sub_100221DB4((uint64_t)v8, (uint64_t)v24+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v36, type metadata accessor for SDAirDropDiscoveredEndpoint);
          ++v32;
          --v21;
        }
        while (v21);
      }
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10028B244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v3 = sub_100008384(&qword_1007B68A0);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_24;
  v27 = v6;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v20 = a1;
    swift_bridgeObjectRetain_n(a1, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v20);
    v7 = result;
    v26 = v1;
    if (result)
      goto LABEL_4;
LABEL_21:
    v9 = _swiftEmptyArrayStorage;
LABEL_22:
    swift_bridgeObjectRelease_n(a1, 2);
    v21 = type metadata accessor for TaskPriority(0);
    v22 = (uint64_t)v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v27, 1, 1, v21);
    v23 = swift_allocObject(&unk_10071FA38, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16, v26);
    v24 = (_QWORD *)swift_allocObject(&unk_10071FAD8, 48, 7);
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v23;
    v24[5] = v9;
    v25 = sub_100252EE0(v22, (uint64_t)&unk_1007B7758, (uint64_t)v24);
    return swift_release(v25);
  }
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n(a1, 2);
  v26 = v1;
  if (!v7)
    goto LABEL_21;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v10 = *(id *)(a1 + 8 * v8 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, "identifier", v26);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_100227A68(0, v9[2] + 1, 1, v9);
        v18 = v9[2];
        v17 = v9[3];
        if (v18 >= v17 >> 1)
          v9 = sub_100227A68((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
        v9[2] = v18 + 1;
        v19 = &v9[2 * v18];
        v19[4] = v14;
        v19[5] = v16;
      }
      else
      {

      }
      ++v8;
    }
    while (v7 != v8);
    goto LABEL_22;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_10028B49C()
{
  return sub_10028B56C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10028B4B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_1007B7754);
  v5 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000D098;
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch(sub_10028A128, 0, 0);
}

uint64_t sub_10028B518(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008384(&qword_1007B7760);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10028B558()
{
  return sub_10028B56C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10028B56C(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2]);
  a1(v2[4]);
  a2(v2[5]);
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_10028B5B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_1007B776C);
  v5 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000D098;
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch(sub_100289FE4, 0, 0);
}

uint64_t sub_10028B620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_10028B66C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = *(int *)(_s10NanoWalletV18InitialLockContextVMa(0) + 44);
  v2 = *(void **)(v0 + v1);
  if (v2)
  {
    v3 = *(id *)(v0 + v1);
LABEL_5:
    v5 = v2;
    return v3;
  }
  result = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationRequest), "init");
  if (result)
  {
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10028B6D8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100008384(&qword_1007B5B28);
  v1 = swift_allocObject(v0, 432, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1005D0670;
  if (qword_1007B3D78 != -1)
    swift_once(&qword_1007B3D78, LongHash.storage.getter);
  *(_QWORD *)(v1 + 56) = &type metadata for SDAuthentication.Operation.CheckIsBluetoothEnabled;
  *(_QWORD *)(v1 + 64) = &off_1007BAF40;
  *(_QWORD *)(v1 + 96) = &type metadata for SDAuthentication.Operation.CheckIsWiFiEnabled;
  *(_QWORD *)(v1 + 104) = &off_1007BAF20;
  *(_QWORD *)(v1 + 136) = &type metadata for SDAuthentication.Operation.CheckWatchIsNearby;
  *(_QWORD *)(v1 + 144) = &off_1007BAF00;
  *(_QWORD *)(v1 + 176) = &type metadata for SDAuthentication.Operation.CheckRemoteDeviceOSVersionIsSupported;
  *(_QWORD *)(v1 + 184) = &off_1007BAEE0;
  *(_QWORD *)(v1 + 216) = &type metadata for SDAuthentication.Operation.RecordRemoteDevice;
  *(_QWORD *)(v1 + 224) = &off_1007BAEC0;
  *(_QWORD *)(v1 + 256) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(_QWORD *)(v1 + 264) = &off_1007BAEA0;
  *(_QWORD *)(v1 + 296) = &type metadata for SDAuthentication.Operation.IncludeAWDLInfoInMessage;
  *(_QWORD *)(v1 + 304) = &off_1007BAE80;
  *(_QWORD *)(v1 + 336) = &type metadata for SDAuthentication.Operation.IncludeLastUnlockDateInMessage;
  *(_QWORD *)(v1 + 344) = &off_1007BAE60;
  *(_QWORD *)(v1 + 376) = &type metadata for SDAuthentication.Operation.IncludeRangingTokenInMessage;
  *(_QWORD *)(v1 + 384) = &off_1007BAE40;
  *(_QWORD *)(v1 + 416) = &type metadata for SDAuthentication.Operation.SendRequestMessage;
  *(_QWORD *)(v1 + 424) = &off_1007BAE20;
  return v1;
}

uint64_t sub_10028B80C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  int *v102;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a3[6];
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v102 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v102[7];
    v80 = (void *)(a1 + v79);
    v81 = (char *)a2 + v79;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    if (v17(v81, 1, v15))
    {
      v82 = sub_100008384(&qword_1007C4330);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v80, v81, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v80, 0, 1, v15);
    }
    v83 = v102[8];
    v84 = (void *)(a1 + v83);
    v85 = (char *)a2 + v83;
    if (v17((char *)a2 + v83, 1, v15))
    {
      v86 = sub_100008384(&qword_1007C4330);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v84, v85, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v84, 0, 1, v15);
    }
    v87 = v102[9];
    v88 = (uint64_t *)(a1 + v87);
    v89 = (uint64_t *)((char *)a2 + v87);
    v90 = *v89;
    v91 = v89[1];
    sub_10022E4A8(*v89, v91);
    *v88 = v90;
    v88[1] = v91;
    v92 = v102[10];
    v93 = a1 + v92;
    v94 = (uint64_t *)((char *)a2 + v92);
    v95 = v94[1];
    if (v95 >> 60 == 15)
    {
      *(_OWORD *)v93 = *(_OWORD *)v94;
    }
    else
    {
      v96 = *v94;
      sub_10022E4A8(*v94, v94[1]);
      *(_QWORD *)v93 = v96;
      *(_QWORD *)(v93 + 8) = v95;
    }
    v97 = v102[11];
    v98 = v102[12];
    v99 = *(void **)((char *)a2 + v97);
    *(_QWORD *)(a1 + v97) = v99;
    *(_BYTE *)(a1 + v98) = *((_BYTE *)a2 + v98);
    v100 = v99;
  }
  return a1;
}

void sub_10028C04C(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  v22 = (char *)a1 + a2[7];
  if (!v8(v22, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  v23 = (char *)a1 + a2[8];
  if (!v8(v23, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
  sub_100225AB4(*(_QWORD *)((char *)a1 + a2[9]), *(_QWORD *)((char *)a1 + a2[9] + 8));
  v24 = (_QWORD *)((char *)a1 + a2[10]);
  v25 = v24[1];
  if (v25 >> 60 != 15)
    sub_100225AB4(*v24, v25);

}

uint64_t sub_10028C3A4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  int *v101;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v101 = a3;
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = v101[7];
  v79 = (void *)(a1 + v78);
  v80 = (char *)a2 + v78;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  if (v16(v80, 1, v14))
  {
    v81 = sub_100008384(&qword_1007C4330);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v79, v80, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v79, 0, 1, v14);
  }
  v82 = v101[8];
  v83 = (void *)(a1 + v82);
  v84 = (char *)a2 + v82;
  if (v16((char *)a2 + v82, 1, v14))
  {
    v85 = sub_100008384(&qword_1007C4330);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v83, v84, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v83, 0, 1, v14);
  }
  v86 = v101[9];
  v87 = (uint64_t *)(a1 + v86);
  v88 = (uint64_t *)((char *)a2 + v86);
  v89 = *v88;
  v90 = v88[1];
  sub_10022E4A8(*v88, v90);
  *v87 = v89;
  v87[1] = v90;
  v91 = v101[10];
  v92 = a1 + v91;
  v93 = (uint64_t *)((char *)a2 + v91);
  v94 = v93[1];
  if (v94 >> 60 == 15)
  {
    *(_OWORD *)v92 = *(_OWORD *)v93;
  }
  else
  {
    v95 = *v93;
    sub_10022E4A8(*v93, v93[1]);
    *(_QWORD *)v92 = v95;
    *(_QWORD *)(v92 + 8) = v94;
  }
  v96 = v101[11];
  v97 = v101[12];
  v98 = *(void **)((char *)a2 + v96);
  *(_QWORD *)(a1 + v96) = v98;
  *(_BYTE *)(a1 + v97) = *((_BYTE *)a2 + v97);
  v99 = v98;
  return a1;
}

char *sub_10028CBC0(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  id v135;
  int *v137;
  _QWORD *v138;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490((_QWORD *)a1 + 1, v7);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v137 = a3;
  v138 = a2;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = v137[7];
  v106 = &a1[v105];
  v107 = (char *)v138 + v105;
  v108 = v14(&a1[v105], 1, v12);
  v109 = v14(v107, 1, v12);
  if (v108)
  {
    if (!v109)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v106, v107, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v106, 0, 1, v12);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v106, v12);
LABEL_84:
    v110 = sub_100008384(&qword_1007C4330);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v106, v107, v12);
LABEL_85:
  v111 = v137[8];
  v112 = &a1[v111];
  v113 = (char *)v138 + v111;
  v114 = v14(&a1[v111], 1, v12);
  v115 = v14(v113, 1, v12);
  if (v114)
  {
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v112, v113, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v112, 0, 1, v12);
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v112, v12);
LABEL_90:
    v116 = sub_100008384(&qword_1007C4330);
    memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v112, v113, v12);
LABEL_91:
  v117 = v137[9];
  v118 = (uint64_t *)&a1[v117];
  v119 = (_QWORD *)((char *)v138 + v117);
  v120 = *v119;
  v121 = v119[1];
  sub_10022E4A8(*v119, v121);
  v122 = *v118;
  v123 = v118[1];
  *v118 = v120;
  v118[1] = v121;
  sub_100225AB4(v122, v123);
  v124 = v137[10];
  v125 = (uint64_t *)&a1[v124];
  v126 = (_QWORD *)((char *)v138 + v124);
  v127 = *(_QWORD *)((char *)v138 + v124 + 8);
  if (*(_QWORD *)&a1[v124 + 8] >> 60 != 15)
  {
    if (v127 >> 60 != 15)
    {
      v129 = *v126;
      sub_10022E4A8(*v126, v127);
      v130 = *v125;
      v131 = v125[1];
      *v125 = v129;
      v125[1] = v127;
      sub_100225AB4(v130, v131);
      goto LABEL_98;
    }
    sub_10023D5F8((uint64_t)v125);
    goto LABEL_96;
  }
  if (v127 >> 60 == 15)
  {
LABEL_96:
    *(_OWORD *)v125 = *(_OWORD *)v126;
    goto LABEL_98;
  }
  v128 = *v126;
  sub_10022E4A8(*v126, v127);
  *v125 = v128;
  v125[1] = v127;
LABEL_98:
  v132 = v137[11];
  v133 = *(void **)&a1[v132];
  v134 = *(void **)((char *)v138 + v132);
  *(_QWORD *)&a1[v132] = v134;
  v135 = v134;

  a1[v137[12]] = *((_BYTE *)v138 + v137[12]);
  return a1;
}

uint64_t sub_10028D848(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v76;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v76 = a3;
  if (v11(v8, 1, v9))
  {
    v12 = sub_100008384(&qword_1007C4330);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v14 = v13[5];
  v15 = &v7[v14];
  v16 = &v8[v14];
  if (v11(&v8[v14], 1, v9))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  v18 = v13[6];
  v19 = &v7[v18];
  v20 = &v8[v18];
  if (v11(&v8[v18], 1, v9))
  {
    v21 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  v22 = v13[7];
  v23 = &v7[v22];
  v24 = &v8[v22];
  if (v11(&v8[v22], 1, v9))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  v26 = v13[8];
  v27 = &v7[v26];
  v28 = &v8[v26];
  if (v11(&v8[v26], 1, v9))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  v30 = v13[9];
  v31 = &v7[v30];
  v32 = &v8[v30];
  if (v11(&v8[v30], 1, v9))
  {
    v33 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
  }
  v34 = v13[10];
  v35 = &v7[v34];
  v36 = &v8[v34];
  if (v11(&v8[v34], 1, v9))
  {
    v37 = sub_100008384(&qword_1007C4330);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
  }
  v38 = v13[11];
  v39 = &v7[v38];
  v40 = &v8[v38];
  if (v11(&v8[v38], 1, v9))
  {
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
  }
  v42 = v13[12];
  v43 = &v7[v42];
  v44 = &v8[v42];
  if (v11(&v8[v42], 1, v9))
  {
    v45 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
  }
  v7[v13[13]] = v8[v13[13]];
  v46 = v13[14];
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v11(&v8[v46], 1, v9))
  {
    v49 = sub_100008384(&qword_1007C4330);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
  }
  v50 = v13[15];
  v51 = &v7[v50];
  v52 = &v8[v50];
  if (v11(&v8[v50], 1, v9))
  {
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
  }
  v54 = v13[16];
  v55 = &v7[v54];
  v56 = &v8[v54];
  if (v11(&v8[v54], 1, v9))
  {
    v57 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
  }
  v58 = v13[17];
  v59 = &v7[v58];
  v60 = &v8[v58];
  if (v11(&v8[v58], 1, v9))
  {
    v61 = sub_100008384(&qword_1007C4330);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
  }
  v62 = v13[18];
  v63 = &v7[v62];
  v64 = &v8[v62];
  *(_DWORD *)v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  v65 = v76[7];
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  if (v11((char *)(a2 + v65), 1, v9))
  {
    v68 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v66, v67, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v66, 0, 1, v9);
  }
  v69 = v76[8];
  v70 = (void *)(a1 + v69);
  v71 = (const void *)(a2 + v69);
  if (v11((char *)(a2 + v69), 1, v9))
  {
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v70, v71, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v70, 0, 1, v9);
  }
  v73 = v76[10];
  *(_OWORD *)(a1 + v76[9]) = *(_OWORD *)(a2 + v76[9]);
  *(_OWORD *)(a1 + v73) = *(_OWORD *)(a2 + v73);
  v74 = v76[12];
  *(_QWORD *)(a1 + v76[11]) = *(_QWORD *)(a2 + v76[11]);
  *(_BYTE *)(a1 + v74) = *(_BYTE *)(a2 + v74);
  return a1;
}

uint64_t *sub_10028DFE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  int *v128;
  uint64_t *v129;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v128 = a3;
  v129 = a2;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v128[7];
  v105 = (char *)a1 + v104;
  v106 = (char *)v129 + v104;
  v107 = v12((char *)a1 + v104, 1, v10);
  v108 = v12(v106, 1, v10);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v105, v106, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v105, 0, 1, v10);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v108)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v105, v10);
LABEL_84:
    v109 = sub_100008384(&qword_1007C4330);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v105, v106, v10);
LABEL_85:
  v110 = v128[8];
  v111 = (char *)a1 + v110;
  v112 = (char *)v129 + v110;
  v113 = v12((char *)a1 + v110, 1, v10);
  v114 = v12(v112, 1, v10);
  if (v113)
  {
    if (!v114)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v111, v112, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v111, 0, 1, v10);
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  if (v114)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v111, v10);
LABEL_90:
    v115 = sub_100008384(&qword_1007C4330);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v111, v112, v10);
LABEL_91:
  v116 = v128[9];
  v117 = *(uint64_t *)((char *)a1 + v116);
  v118 = *(uint64_t *)((char *)a1 + v116 + 8);
  *(_OWORD *)((char *)a1 + v116) = *(_OWORD *)((char *)v129 + v116);
  sub_100225AB4(v117, v118);
  v119 = v128[10];
  v120 = (uint64_t *)((char *)a1 + v119);
  v121 = (uint64_t *)((char *)v129 + v119);
  v122 = *(uint64_t *)((char *)a1 + v119 + 8);
  if (v122 >> 60 != 15)
  {
    v123 = v121[1];
    if (v123 >> 60 != 15)
    {
      v124 = *v120;
      *v120 = *v121;
      v120[1] = v123;
      sub_100225AB4(v124, v122);
      goto LABEL_96;
    }
    sub_10023D5F8((uint64_t)v120);
  }
  *(_OWORD *)v120 = *(_OWORD *)v121;
LABEL_96:
  v125 = v128[11];
  v126 = *(void **)((char *)a1 + v125);
  *(uint64_t *)((char *)a1 + v125) = *(uint64_t *)((char *)v129 + v125);

  *((_BYTE *)a1 + v128[12]) = *((_BYTE *)v129 + v128[12]);
  return a1;
}

uint64_t sub_10028EC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028EC18);
}

uint64_t sub_10028EC18(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100008384(&qword_1007C4330);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10028ECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028ECC8);
}

char *sub_10028ECC8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100008384(&qword_1007C4330);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t _s10NanoWalletV18InitialLockContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B77D0, (uint64_t)&_s10NanoWalletV18InitialLockContextVMn);
}

void sub_10028ED7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = "(";
  v2 = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10023EB48(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1005D0700;
      v10 = &unk_1005D0718;
      v11 = &unk_1005D0730;
      v12 = &unk_1005D0748;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

uint64_t sub_10028EE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028EE4C);
}

uint64_t sub_10028EE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10028EECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028EED8);
}

uint64_t sub_10028EED8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SDAuthenticationCommonOperationInput(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t _s10NanoWalletV4FlowVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B7880, (uint64_t)&_s10NanoWalletV4FlowVMn);
}

uint64_t sub_10028EF68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for SDAuthenticationCommonOperationInput(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10028EFE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v90;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v90 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = *(int *)(v90 + 28);
    v80 = (uint64_t *)(a1 + v79);
    v81 = (uint64_t *)((char *)a2 + v79);
    v82 = *v81;
    v83 = v81[1];
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    sub_10022E4A8(v82, v83);
    *v80 = v82;
    v80[1] = v83;
    v84 = *(int *)(v90 + 32);
    v85 = a1 + v84;
    v86 = (uint64_t *)((char *)a2 + v84);
    v87 = v86[1];
    if (v87 >> 60 == 15)
    {
      *(_OWORD *)v85 = *(_OWORD *)v86;
    }
    else
    {
      v88 = *v86;
      sub_10022E4A8(*v86, v86[1]);
      *(_QWORD *)v85 = v88;
      *(_QWORD *)(v85 + 8) = v87;
    }
  }
  return a1;
}

uint64_t sub_10028F730(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  uint64_t *v23;
  unint64_t v24;

  v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10022E75C(v4);
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  result = sub_100225AB4(*(_QWORD *)((char *)a1 + a2[7]), *(_QWORD *)((char *)a1 + a2[7] + 8));
  v23 = (_QWORD *)((char *)a1 + a2[8]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    return sub_100225AB4(*v23, v24);
  return result;
}

uint64_t sub_10028FA3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v89;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v89 = a3;
  v11 = *(int *)(a3 + 24);
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = *(int *)(v89 + 28);
  v79 = (uint64_t *)(a1 + v78);
  v80 = (uint64_t *)((char *)a2 + v78);
  v81 = *v80;
  v82 = v80[1];
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  sub_10022E4A8(v81, v82);
  *v79 = v81;
  v79[1] = v82;
  v83 = *(int *)(v89 + 32);
  v84 = a1 + v83;
  v85 = (uint64_t *)((char *)a2 + v83);
  v86 = v85[1];
  if (v86 >> 60 == 15)
  {
    *(_OWORD *)v84 = *(_OWORD *)v85;
  }
  else
  {
    v87 = *v85;
    sub_10022E4A8(*v85, v85[1]);
    *(_QWORD *)v84 = v87;
    *(_QWORD *)(v84 + 8) = v86;
  }
  return a1;
}

uint64_t *sub_100290160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v121;
  uint64_t *v122;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490(a1 + 1, v7);
  v121 = a3;
  v122 = a2;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v105 = *(int *)(v121 + 28);
  v106 = (uint64_t *)((char *)a1 + v105);
  v107 = (uint64_t *)((char *)v122 + v105);
  v108 = *v107;
  v109 = v107[1];
  sub_10022E4A8(*v107, v109);
  v110 = *v106;
  v111 = v106[1];
  *v106 = v108;
  v106[1] = v109;
  sub_100225AB4(v110, v111);
  v112 = *(int *)(v121 + 32);
  v113 = (uint64_t *)((char *)a1 + v112);
  v114 = (uint64_t *)((char *)v122 + v112);
  v115 = *(uint64_t *)((char *)v122 + v112 + 8);
  if (*(unint64_t *)((char *)a1 + v112 + 8) >> 60 != 15)
  {
    if (v115 >> 60 != 15)
    {
      v117 = *v114;
      sub_10022E4A8(v117, v115);
      v118 = *v113;
      v119 = v113[1];
      *v113 = v117;
      v113[1] = v115;
      sub_100225AB4(v118, v119);
      return a1;
    }
    sub_10023D5F8((uint64_t)v113);
    goto LABEL_84;
  }
  if (v115 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)v113 = *(_OWORD *)v114;
    return a1;
  }
  v116 = *v114;
  sub_10022E4A8(v116, v115);
  *v113 = v116;
  v113[1] = v115;
  return a1;
}

uint64_t sub_100290C5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a3[6];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  return a1;
}

uint64_t *sub_100291300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t *v115;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v114 = a3;
  v115 = a2;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = *(int *)(v114 + 28);
  v105 = *(uint64_t *)((char *)a1 + v104);
  v106 = *(uint64_t *)((char *)a1 + v104 + 8);
  *(_OWORD *)((char *)a1 + v104) = *(_OWORD *)((char *)v115 + v104);
  sub_100225AB4(v105, v106);
  v107 = *(int *)(v114 + 32);
  v108 = (uint64_t *)((char *)a1 + v107);
  v109 = (uint64_t *)((char *)v115 + v107);
  v110 = *(uint64_t *)((char *)a1 + v107 + 8);
  if (v110 >> 60 != 15)
  {
    v111 = v109[1];
    if (v111 >> 60 != 15)
    {
      v112 = *v108;
      *v108 = *v109;
      v108[1] = v111;
      sub_100225AB4(v112, v110);
      return a1;
    }
    sub_10023D5F8((uint64_t)v108);
  }
  *(_OWORD *)v108 = *(_OWORD *)v109;
  return a1;
}

uint64_t sub_100291DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100291DAC);
}

uint64_t sub_100291DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100291DBC);
}

uint64_t _s10NanoWalletV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B7918, (uint64_t)&_s10NanoWalletV17InitialKeyContextVMn);
}

uint64_t sub_100291DD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1005D0700;
    v4[4] = &unk_1005D0718;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100291E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10027ACA0(v2 + *(int *)(a1 + 32), a2);
}

uint64_t sub_100291E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = v3 + *(int *)(a3 + 40);
  result = sub_100225AA0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  *(_QWORD *)v6 = a1;
  *(_QWORD *)(v6 + 8) = a2;
  return result;
}

uint64_t sub_100291EBC(uint64_t a1, uint64_t a2)
{
  return sub_1002429A0(a1, a2, (uint64_t (*)(void))sub_10028B66C);
}

uint64_t sub_100291ED8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

id sub_100291EE8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = *(int *)(_s10NanoWalletV20HandleRequestContextVMa(0) + 48);
  v2 = *(void **)(v0 + v1);
  if (v2)
  {
    v3 = *(id *)(v0 + v1);
LABEL_5:
    v5 = v2;
    return v3;
  }
  result = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationResponse), "init");
  if (result)
  {
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100291F54(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v46 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384(&qword_1007B5B28);
  v10 = swift_allocObject(v9, 192, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1005D0680;
  if (qword_1007B3D78 != -1)
    swift_once(&qword_1007B3D78, LongHash.storage.getter);
  *(_QWORD *)(v10 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(_QWORD *)(v10 + 64) = &off_1007BAEA0;
  *(_QWORD *)(v10 + 96) = &type metadata for SDAuthentication.Operation.RangeAsResponder;
  *(_QWORD *)(v10 + 104) = &off_1007BB060;
  *(_QWORD *)(v10 + 136) = &type metadata for SDAuthentication.Operation.IncludeAWDLInfoInMessage;
  *(_QWORD *)(v10 + 144) = &off_1007BAE80;
  *(_QWORD *)(v10 + 176) = &type metadata for SDAuthentication.Operation.SendResponseMessage;
  *(_QWORD *)(v10 + 184) = &off_1007BB240;
  *a3 = v10;
  v11 = (int *)_s10NanoWalletV20HandleRequestContextVMa(0);
  v12 = v11[12];
  *(uint64_t *)((char *)a3 + v12) = 0;
  *((_BYTE *)a3 + v11[13]) = 1;
  if (objc_msgSend(a1, "hasVersion")
    && objc_msgSend(a1, "hasType")
    && objc_msgSend(a1, "hasAwdlInfo")
    && objc_msgSend(a1, "hasRangingToken")
    && objc_msgSend(a1, "hasUnlockDate"))
  {
    v13 = _s10NanoWalletV17InitialKeyContextVMa(0);
    sub_100244384(a2 + *(int *)(v13 + 24), (uint64_t)a3 + v11[6], type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100244418(a2 + 8, (uint64_t)(a3 + 1));
    v14 = (uint64_t *)(a2 + *(int *)(v13 + 28));
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)((char *)a3 + v11[10]);
    *v17 = v15;
    v17[1] = v16;
    sub_10022E4A8(v15, v16);
    *(_DWORD *)((char *)a3 + v11[9]) = objc_msgSend(a1, "version");
    v18 = objc_msgSend(a1, "awdlInfo");
    if (v18)
    {
      v19 = v18;
      v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v43 = v21;

      v22 = (uint64_t *)((char *)a3 + v11[11]);
      v23 = v43;
      *v22 = v20;
      v22[1] = v23;
      v24 = objc_msgSend(a1, "rangingToken");
      if (v24)
      {
        v25 = v24;
        v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v43 = v27;

        v28 = (uint64_t *)((char *)a3 + v11[8]);
        v29 = v43;
        *v28 = v26;
        v28[1] = v29;
        Date.init(timeIntervalSince1970:)(objc_msgSend(a1, "unlockDate"));

        sub_1002443C8(a2, _s10NanoWalletV17InitialKeyContextVMa);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)a3 + v11[7], v8, v46);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v44 = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v30 = v45;
    v31 = objc_msgSend(a1, "description");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;
    swift_bridgeObjectRelease(v30);

    v44 = v32;
    v45 = v34;
    v35._countAndFlagsBits = 0xD00000000000001CLL;
    v35._object = (void *)0x8000000100613B30;
    String.append(_:)(v35);
    v36._object = (void *)0x80000001005D0870;
    v36._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v36);
    v37 = v44;
    v38 = v45;
    v39 = sub_100244304();
    v40 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v39, 0, 0);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = v37;
    *(_QWORD *)(v41 + 16) = v38;
    swift_willThrow(v40);

    sub_1002443C8(a2, _s10NanoWalletV17InitialKeyContextVMa);
    swift_bridgeObjectRelease(*a3);

  }
}

uint64_t sub_100292328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100292368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 40);
  v3 = *(_QWORD *)v2;
  sub_10022E4A8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1002923A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  sub_10022E4A8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1002923DC(uint64_t a1, uint64_t a2)
{
  return sub_1002429A0(a1, a2, (uint64_t (*)(void))sub_100291EE8);
}

id sub_1002923F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  id v5;

  v1 = *(int *)(_s10NanoWalletV21HandleResponseContextVMa(0) + 40);
  v2 = *(void **)(v0 + v1);
  if (v2)
  {
    v3 = *(id *)(v0 + v1);
LABEL_5:
    v5 = v2;
    return v3;
  }
  result = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationConfirmation), "init");
  if (result)
  {
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100292464(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 232, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005D0690;
  if (qword_1007B3D78 != -1)
    swift_once(&qword_1007B3D78, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.RecordKeyExchangeEnd;
  *(_QWORD *)(v7 + 64) = &off_1007BB0E0;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.RecordAWDLBringUpStart;
  *(_QWORD *)(v7 + 104) = &off_1007BB040;
  *(_QWORD *)(v7 + 136) = &type metadata for SDAuthentication.Operation.RangeAsInitiator;
  *(_QWORD *)(v7 + 144) = &off_1007BB020;
  *(_QWORD *)(v7 + 176) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(_QWORD *)(v7 + 184) = &off_1007BB1C0;
  *(_QWORD *)(v7 + 216) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(_QWORD *)(v7 + 224) = &off_1007BB1A0;
  *a3 = v7;
  v8 = (int *)_s10NanoWalletV21HandleResponseContextVMa(0);
  v9 = v8[10];
  *(uint64_t *)((char *)a3 + v9) = 0;
  *((_BYTE *)a3 + v8[11]) = 2;
  v10 = _s10NanoWalletV18InitialLockContextVMa(0);
  v11 = a2 + *(int *)(v10 + 40);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 >> 60 == 15)
  {
    v13 = sub_100244304();
    v14 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v13, 0, 0);
    *(_DWORD *)v15 = 10;
    *(_QWORD *)(v15 + 8) = 0xD000000000000015;
    *(_QWORD *)(v15 + 16) = 0x8000000100613B50;
    swift_willThrow(v14);

LABEL_9:
    sub_1002443C8(a2, _s10NanoWalletV18InitialLockContextVMa);
    swift_bridgeObjectRelease(*a3);

    return;
  }
  v16 = v10;
  v17 = *(_QWORD *)v11;
  sub_10022E4A8(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
  if (!objc_msgSend(a1, "hasAwdlInfo"))
  {
    v24 = sub_100244304();
    v25 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v24, 0, 0);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = 0xD000000000000011;
    *(_QWORD *)(v26 + 16) = 0x8000000100613B70;
    swift_willThrow(v25);

    sub_100225AA0(v17, v12);
    goto LABEL_9;
  }
  sub_100244384(a2 + *(int *)(v16 + 24), (uint64_t)a3 + v8[5], type metadata accessor for SDAuthenticationSessionMetrics);
  sub_100244418(a2 + 8, (uint64_t)a3 + v8[6]);
  v18 = (uint64_t *)((char *)a3 + v8[7]);
  *v18 = v17;
  v18[1] = v12;
  sub_10022E4A8(v17, v12);
  *(_DWORD *)((char *)a3 + v8[8]) = objc_msgSend(a1, "version");
  v19 = objc_msgSend(a1, "awdlInfo");
  if (v19)
  {
    v20 = v19;
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v27 = v22;

    sub_100225AA0(v17, v12);
    sub_1002443C8(a2, _s10NanoWalletV18InitialLockContextVMa);
    v23 = (uint64_t *)((char *)a3 + v8[9]);
    *v23 = v21;
    v23[1] = v27;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100292768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 36);
  v3 = *(_QWORD *)v2;
  sub_10022E4A8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1002927A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 28);
  v3 = *(_QWORD *)v2;
  sub_10022E4A8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_1002927DC(uint64_t a1, uint64_t a2)
{
  return sub_1002429A0(a1, a2, (uint64_t (*)(void))sub_1002923F8);
}

uint64_t sub_1002927F8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_100292804@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100008384(&qword_1007B5B28);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1005CF250;
  if (qword_1007B3D78 != -1)
    swift_once(&qword_1007B3D78, LongHash.storage.getter);
  *(_QWORD *)(v7 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(_QWORD *)(v7 + 64) = &off_1007BB180;
  *(_QWORD *)(v7 + 96) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(_QWORD *)(v7 + 104) = &off_1007BB1A0;
  *a3 = v7;
  if ((objc_msgSend(a1, "hasSuccess") & 1) != 0)
  {
    v8 = a2 + *(int *)(_s10NanoWalletV20HandleRequestContextVMa(0) + 24);
    v9 = _s10NanoWalletV25HandleConfirmationContextVMa(0);
    sub_100244384(v8, (uint64_t)a3 + *(int *)(v9 + 24), type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100244418(a2 + 8, (uint64_t)(a3 + 1));
    LOBYTE(v8) = objc_msgSend(a1, "success");

    result = sub_1002443C8(a2, _s10NanoWalletV20HandleRequestContextVMa);
    *((_BYTE *)a3 + *(int *)(v9 + 28)) = v8;
  }
  else
  {
    v11 = sub_100244304();
    v12 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v11, 0, 0);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0xD000000000000016;
    *(_QWORD *)(v13 + 16) = 0x8000000100612950;
    swift_willThrow(v12);

    sub_1002443C8(a2, _s10NanoWalletV20HandleRequestContextVMa);
    return swift_bridgeObjectRelease(*a3);
  }
  return result;
}

void sub_1002929B8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE v48[40];
  void *v49;

  v46 = a3;
  v41 = _s10NanoWalletV25HandleConfirmationContextVMa(0);
  __chkstk_darwin(v41);
  v43 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = _s10NanoWalletV18InitialLockContextVMa(0);
  __chkstk_darwin(v44);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = _s10NanoWalletV21HandleResponseContextVMa(0);
  __chkstk_darwin(v42);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = _s10NanoWalletV17InitialKeyContextVMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = _s10NanoWalletV20HandleRequestContextVMa(0);
  v13 = __chkstk_darwin(v45);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v41 - v16);
  sub_100244418(a1, (uint64_t)v48);
  v18 = sub_100008384(&qword_1007B5D40);
  v19 = sub_100221EDC(0, &qword_1007B5D50, off_1007112C0);
  if (swift_dynamicCast(&v49, v48, v18, v19, 6))
  {
    v20 = v49;
    sub_100244418(a2, (uint64_t)v48);
    v21 = v20;
    v22 = sub_100008384(&qword_1007B5D70);
    swift_dynamicCast(v12, v48, v22, v10, 7);
    v23 = v47;
    sub_100291F54(v21, (uint64_t)v12, v17);
    if (!v23)
    {
      v24 = v46;
      v46[3] = v45;
      v24[4] = &off_10071FF68;
      v25 = sub_100244348(v24);
      v26 = _s10NanoWalletV20HandleRequestContextVMa;
      v27 = (uint64_t)v17;
LABEL_10:
      sub_100221DB4(v27, (uint64_t)v25, v26);
    }
  }
  else
  {
    v28 = v47;
    sub_100244418(a1, (uint64_t)v48);
    v29 = sub_100221EDC(0, &qword_1007B5D58, off_1007112C8);
    if (swift_dynamicCast(&v49, v48, v18, v29, 6))
    {
      v30 = v49;
      sub_100244418(a2, (uint64_t)v48);
      v21 = v30;
      v31 = sub_100008384(&qword_1007B5D70);
      swift_dynamicCast(v7, v48, v31, v44, 7);
      sub_100292464(v21, (uint64_t)v7, v9);
      if (!v28)
      {
        v32 = v46;
        v46[3] = v42;
        v32[4] = &off_10071FF78;
        v25 = sub_100244348(v32);
        v26 = _s10NanoWalletV21HandleResponseContextVMa;
        v27 = (uint64_t)v9;
        goto LABEL_10;
      }
    }
    else
    {
      sub_100244418(a1, (uint64_t)v48);
      v33 = sub_100221EDC(0, &qword_1007B5D68, off_1007112A8);
      if (!swift_dynamicCast(&v49, v48, v18, v33, 6))
      {
        v38 = sub_100244304();
        v39 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v38, 0, 0);
        *(_DWORD *)v40 = 10;
        *(_QWORD *)(v40 + 8) = 0xD00000000000001FLL;
        *(_QWORD *)(v40 + 16) = 0x8000000100612670;
        swift_willThrow(v39);
        return;
      }
      v34 = v49;
      sub_100244418(a2, (uint64_t)v48);
      v21 = v34;
      v35 = sub_100008384(&qword_1007B5D70);
      swift_dynamicCast(v15, v48, v35, v45, 7);
      v36 = v43;
      sub_100292804(v21, (uint64_t)v15, v43);
      if (!v28)
      {
        v37 = v46;
        v46[3] = v41;
        v37[4] = &off_10071FF88;
        v25 = sub_100244348(v37);
        v26 = _s10NanoWalletV25HandleConfirmationContextVMa;
        v27 = (uint64_t)v36;
        goto LABEL_10;
      }
    }
  }

}

void sub_100292DF4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_1002929B8(a1, a2, a3);
}

uint64_t _s10NanoWalletV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B7B10, (uint64_t)&_s10NanoWalletV25HandleConfirmationContextVMn);
}

uint64_t _s10NanoWalletV21HandleResponseContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B7A68, (uint64_t)&_s10NanoWalletV21HandleResponseContextVMn);
}

uint64_t _s10NanoWalletV20HandleRequestContextVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B79B8, (uint64_t)&_s10NanoWalletV20HandleRequestContextVMn);
}

uint64_t sub_100292E44(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  int *v102;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a3[6];
    v13 = (char *)(a1 + v12);
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v102 = a3;
    if (v17(v14, 1, v15))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v20 = v19[5];
    v21 = &v13[v20];
    v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    v24 = v19[6];
    v25 = &v13[v24];
    v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    v28 = v19[7];
    v29 = &v13[v28];
    v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    v32 = v19[8];
    v33 = &v13[v32];
    v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      v35 = sub_100008384(&qword_1007C4330);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    v36 = v19[9];
    v37 = &v13[v36];
    v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      v39 = sub_100008384(&qword_1007C4330);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    v40 = v19[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      v43 = sub_100008384(&qword_1007C4330);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    v44 = v19[11];
    v45 = &v13[v44];
    v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      v47 = sub_100008384(&qword_1007C4330);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    v48 = v19[12];
    v49 = &v13[v48];
    v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      v51 = sub_100008384(&qword_1007C4330);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    v52 = v19[14];
    v53 = &v13[v52];
    v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      v55 = sub_100008384(&qword_1007C4330);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    v56 = v19[15];
    v57 = &v13[v56];
    v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      v59 = sub_100008384(&qword_1007C4330);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    v60 = v19[16];
    v61 = &v13[v60];
    v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      v63 = sub_100008384(&qword_1007C4330);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    v64 = v19[17];
    v65 = &v13[v64];
    v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      v67 = sub_100008384(&qword_1007C4330);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    v68 = v19[18];
    v69 = &v13[v68];
    v70 = &v14[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    v71 = v19[20];
    v72 = &v13[v71];
    v73 = &v14[v71];
    v74 = *((_QWORD *)v73 + 1);
    *(_QWORD *)v72 = *(_QWORD *)v73;
    *((_QWORD *)v72 + 1) = v74;
    v75 = v19[21];
    v76 = &v13[v75];
    v77 = &v14[v75];
    v78 = *((_QWORD *)v77 + 1);
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v102[7];
    v80 = a1 + v79;
    v81 = (uint64_t)a2 + v79;
    v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    v82(v80, v81, v15);
    v83 = v102[8];
    v84 = (uint64_t *)(a1 + v83);
    v85 = (uint64_t *)((char *)a2 + v83);
    v86 = *v85;
    v87 = v85[1];
    sub_10022E4A8(*v85, v87);
    *v84 = v86;
    v84[1] = v87;
    v88 = v102[10];
    *(_DWORD *)(a1 + v102[9]) = *(_DWORD *)((char *)a2 + v102[9]);
    v89 = (uint64_t *)(a1 + v88);
    v90 = *(uint64_t *)((char *)a2 + v88);
    v91 = *(uint64_t *)((char *)a2 + v88 + 8);
    sub_10022E4A8(v90, v91);
    *v89 = v90;
    v89[1] = v91;
    v92 = v102[11];
    v93 = (uint64_t *)(a1 + v92);
    v94 = (uint64_t *)((char *)a2 + v92);
    v95 = *v94;
    v96 = v94[1];
    sub_10022E4A8(*v94, v96);
    *v93 = v95;
    v93[1] = v96;
    v97 = v102[12];
    v98 = v102[13];
    v99 = *(void **)((char *)a2 + v97);
    *(_QWORD *)(a1 + v97) = v99;
    *(_BYTE *)(a1 + v98) = *((_BYTE *)a2 + v98);
    v100 = v99;
  }
  return a1;
}

void sub_1002935D0(char *a1, int *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v4 = a1 + 8;
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  sub_10022E75C(v4);
  v5 = &a1[a2[6]];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v10 = &v5[v9[5]];
  if (!v8(v10, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v11 = &v5[v9[6]];
  if (!v8(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  v12 = &v5[v9[7]];
  if (!v8(v12, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  v13 = &v5[v9[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  v14 = &v5[v9[9]];
  if (!v8(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  v15 = &v5[v9[10]];
  if (!v8(v15, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  v16 = &v5[v9[11]];
  if (!v8(v16, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v17 = &v5[v9[12]];
  if (!v8(v17, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  v18 = &v5[v9[14]];
  if (!v8(v18, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  v19 = &v5[v9[15]];
  if (!v8(v19, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  v20 = &v5[v9[16]];
  if (!v8(v20, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  v21 = &v5[v9[17]];
  if (!v8(v21, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v5[v9[21] + 8]);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&a1[a2[7]], v6);
  sub_100225AB4(*(_QWORD *)&a1[a2[8]], *(_QWORD *)&a1[a2[8] + 8]);
  sub_100225AB4(*(_QWORD *)&a1[a2[10]], *(_QWORD *)&a1[a2[10] + 8]);
  sub_100225AB4(*(_QWORD *)&a1[a2[11]], *(_QWORD *)&a1[a2[11] + 8]);

}

uint64_t sub_1002938E4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  int *v101;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  v101 = a3;
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  v23 = v18[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v16(&v13[v23], 1, v14))
  {
    v26 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v27 = v18[7];
  v28 = &v12[v27];
  v29 = &v13[v27];
  if (v16(&v13[v27], 1, v14))
  {
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v14);
  }
  v31 = v18[8];
  v32 = &v12[v31];
  v33 = &v13[v31];
  if (v16(&v13[v31], 1, v14))
  {
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, v14);
  }
  v35 = v18[9];
  v36 = &v12[v35];
  v37 = &v13[v35];
  if (v16(&v13[v35], 1, v14))
  {
    v38 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v36, 0, 1, v14);
  }
  v39 = v18[10];
  v40 = &v12[v39];
  v41 = &v13[v39];
  if (v16(&v13[v39], 1, v14))
  {
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
  }
  v43 = v18[11];
  v44 = &v12[v43];
  v45 = &v13[v43];
  if (v16(&v13[v43], 1, v14))
  {
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  v47 = v18[12];
  v48 = &v12[v47];
  v49 = &v13[v47];
  if (v16(&v13[v47], 1, v14))
  {
    v50 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v48, 0, 1, v14);
  }
  v12[v18[13]] = v13[v18[13]];
  v51 = v18[14];
  v52 = &v12[v51];
  v53 = &v13[v51];
  if (v16(&v13[v51], 1, v14))
  {
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v52, 0, 1, v14);
  }
  v55 = v18[15];
  v56 = &v12[v55];
  v57 = &v13[v55];
  if (v16(&v13[v55], 1, v14))
  {
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v56, 0, 1, v14);
  }
  v59 = v18[16];
  v60 = &v12[v59];
  v61 = &v13[v59];
  if (v16(&v13[v59], 1, v14))
  {
    v62 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
  }
  v63 = v18[17];
  v64 = &v12[v63];
  v65 = &v13[v63];
  if (v16(&v13[v63], 1, v14))
  {
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v64, 0, 1, v14);
  }
  v67 = v18[18];
  v68 = &v12[v67];
  v69 = &v13[v67];
  *(_DWORD *)v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  v70 = v18[20];
  v71 = &v12[v70];
  v72 = &v13[v70];
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *((_QWORD *)v71 + 1) = v73;
  v74 = v18[21];
  v75 = &v12[v74];
  v76 = &v13[v74];
  v77 = *((_QWORD *)v76 + 1);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = v77;
  v78 = v101[7];
  v79 = a1 + v78;
  v80 = (uint64_t)a2 + v78;
  v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  v81(v79, v80, v14);
  v82 = v101[8];
  v83 = (uint64_t *)(a1 + v82);
  v84 = (uint64_t *)((char *)a2 + v82);
  v85 = *v84;
  v86 = v84[1];
  sub_10022E4A8(*v84, v86);
  *v83 = v85;
  v83[1] = v86;
  v87 = v101[10];
  *(_DWORD *)(a1 + v101[9]) = *(_DWORD *)((char *)a2 + v101[9]);
  v88 = (uint64_t *)(a1 + v87);
  v89 = *(uint64_t *)((char *)a2 + v87);
  v90 = *(uint64_t *)((char *)a2 + v87 + 8);
  sub_10022E4A8(v89, v90);
  *v88 = v89;
  v88[1] = v90;
  v91 = v101[11];
  v92 = (uint64_t *)(a1 + v91);
  v93 = (uint64_t *)((char *)a2 + v91);
  v94 = *v93;
  v95 = v93[1];
  sub_10022E4A8(*v93, v95);
  *v92 = v94;
  v92[1] = v95;
  v96 = v101[12];
  v97 = v101[13];
  v98 = *(void **)((char *)a2 + v96);
  *(_QWORD *)(a1 + v96) = v98;
  *(_BYTE *)(a1 + v97) = *((_BYTE *)a2 + v97);
  v99 = v98;
  return a1;
}

char *sub_10029404C(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  id v129;
  int *v131;
  char *v132;

  v7 = a2 + 1;
  v6 = *a2;
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10023D490((_QWORD *)a1 + 1, v7);
  v131 = a3;
  v132 = (char *)a2;
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = v14(&v10[v19], 1, v12);
  v23 = v14(v21, 1, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  v25 = v18[6];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v14(&v10[v25], 1, v12);
  v29 = v14(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    v30 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  v31 = v18[7];
  v32 = &v10[v31];
  v33 = &v11[v31];
  v34 = v14(&v10[v31], 1, v12);
  v35 = v14(v33, 1, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  v37 = v18[8];
  v38 = &v10[v37];
  v39 = &v11[v37];
  v40 = v14(&v10[v37], 1, v12);
  v41 = v14(v39, 1, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v38, 0, 1, v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    v42 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  v43 = v18[9];
  v44 = &v10[v43];
  v45 = &v11[v43];
  v46 = v14(&v10[v43], 1, v12);
  v47 = v14(v45, 1, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  v49 = v18[10];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v14(&v10[v49], 1, v12);
  v53 = v14(v51, 1, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    v54 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  v55 = v18[11];
  v56 = &v10[v55];
  v57 = &v11[v55];
  v58 = v14(&v10[v55], 1, v12);
  v59 = v14(v57, 1, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v56, 0, 1, v12);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  v61 = v18[12];
  v62 = &v10[v61];
  v63 = &v11[v61];
  v64 = v14(&v10[v61], 1, v12);
  v65 = v14(v63, 1, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v62, 0, 1, v12);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    v66 = sub_100008384(&qword_1007C4330);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  v67 = v18[14];
  v68 = &v10[v67];
  v69 = &v11[v67];
  v70 = v14(&v10[v67], 1, v12);
  v71 = v14(v69, 1, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v68, 0, 1, v12);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    v72 = sub_100008384(&qword_1007C4330);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  v73 = v18[15];
  v74 = &v10[v73];
  v75 = &v11[v73];
  v76 = v14(&v10[v73], 1, v12);
  v77 = v14(v75, 1, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v74, 0, 1, v12);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    v78 = sub_100008384(&qword_1007C4330);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  v79 = v18[16];
  v80 = &v10[v79];
  v81 = &v11[v79];
  v82 = v14(&v10[v79], 1, v12);
  v83 = v14(v81, 1, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v80, 0, 1, v12);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    v84 = sub_100008384(&qword_1007C4330);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  v85 = v18[17];
  v86 = &v10[v85];
  v87 = &v11[v85];
  v88 = v14(&v10[v85], 1, v12);
  v89 = v14(v87, 1, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }
  if (v89)
  {
LABEL_78:
    v90 = sub_100008384(&qword_1007C4330);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v86, 0, 1, v12);
LABEL_79:
  v91 = v18[18];
  v92 = &v10[v91];
  v93 = &v11[v91];
  v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  v95 = v18[20];
  v96 = &v10[v95];
  v97 = &v11[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v18[21];
  v101 = &v10[v100];
  v102 = &v11[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(&a1[v131[7]], &v132[v131[7]], v12);
  v105 = v131[8];
  v106 = (uint64_t *)&a1[v105];
  v107 = (uint64_t *)&v132[v105];
  v108 = *v107;
  v109 = v107[1];
  sub_10022E4A8(*v107, v109);
  v110 = *v106;
  v111 = v106[1];
  *v106 = v108;
  v106[1] = v109;
  sub_100225AB4(v110, v111);
  *(_DWORD *)&a1[v131[9]] = *(_DWORD *)&v132[v131[9]];
  v112 = v131[10];
  v113 = (uint64_t *)&a1[v112];
  v114 = (uint64_t *)&v132[v112];
  v115 = *v114;
  v116 = v114[1];
  sub_10022E4A8(*v114, v116);
  v117 = *v113;
  v118 = v113[1];
  *v113 = v115;
  v113[1] = v116;
  sub_100225AB4(v117, v118);
  v119 = v131[11];
  v120 = (uint64_t *)&a1[v119];
  v121 = (uint64_t *)&v132[v119];
  v122 = *v121;
  v123 = v121[1];
  sub_10022E4A8(*v121, v123);
  v124 = *v120;
  v125 = v120[1];
  *v120 = v122;
  v120[1] = v123;
  sub_100225AB4(v124, v125);
  v126 = v131[12];
  v127 = *(void **)&a1[v126];
  v128 = *(void **)&v132[v126];
  *(_QWORD *)&a1[v126] = v128;
  v129 = v128;

  a1[v131[13]] = v132[v131[13]];
  return a1;
}

uint64_t sub_100294B60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a3[6];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    v61 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  }
  else
  {
    v61 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v61(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v62 = v12[18];
  v63 = &v6[v62];
  v64 = &v7[v62];
  *(_DWORD *)v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v61((char *)(a1 + a3[7]), (char *)(a2 + a3[7]), v8);
  v65 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v65) = *(_DWORD *)(a2 + v65);
  v66 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v66) = *(_OWORD *)(a2 + v66);
  v67 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v67) = *(_BYTE *)(a2 + v67);
  return a1;
}

uint64_t *sub_100295244(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  int *v116;
  uint64_t *v117;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10022E75C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  v116 = a3;
  v117 = a2;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))((uint64_t)a1 + v116[7], (uint64_t)v117 + v116[7], v10);
  v104 = v116[8];
  v105 = *(uint64_t *)((char *)a1 + v104);
  v106 = *(uint64_t *)((char *)a1 + v104 + 8);
  *(_OWORD *)((char *)a1 + v104) = *(_OWORD *)((char *)v117 + v104);
  sub_100225AB4(v105, v106);
  v107 = v116[10];
  *(_DWORD *)((char *)a1 + v116[9]) = *(_DWORD *)((char *)v117 + v116[9]);
  v108 = *(uint64_t *)((char *)a1 + v107);
  v109 = *(uint64_t *)((char *)a1 + v107 + 8);
  *(_OWORD *)((char *)a1 + v107) = *(_OWORD *)((char *)v117 + v107);
  sub_100225AB4(v108, v109);
  v110 = v116[11];
  v111 = *(uint64_t *)((char *)a1 + v110);
  v112 = *(uint64_t *)((char *)a1 + v110 + 8);
  *(_OWORD *)((char *)a1 + v110) = *(_OWORD *)((char *)v117 + v110);
  sub_100225AB4(v111, v112);
  v113 = v116[12];
  v114 = *(void **)((char *)a1 + v113);
  *(uint64_t *)((char *)a1 + v113) = *(uint64_t *)((char *)v117 + v113);

  *((_BYTE *)a1 + v116[13]) = *((_BYTE *)v117 + v116[13]);
  return a1;
}

uint64_t sub_100295D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100295D10);
}

uint64_t sub_100295D10(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100295DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100295DBC);
}

char *sub_100295DBC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_100295E58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[10];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = "(";
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_1005D0700;
      v5[5] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[6] = &unk_1005D0700;
      v5[7] = &unk_1005D0700;
      v5[8] = &unk_1005D0730;
      v5[9] = &unk_1005D0748;
      swift_initStructMetadata(a1, 256, 10, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_100295F24(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v6 = a1;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain(v4);
    if (v12(v9, 1, v10))
    {
      v13 = sub_100008384(&qword_1007C4330);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
    v15 = v14[5];
    v16 = &v8[v15];
    v17 = &v9[v15];
    if (v12(&v9[v15], 1, v10))
    {
      v18 = sub_100008384(&qword_1007C4330);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    v19 = v14[6];
    v20 = &v8[v19];
    v21 = &v9[v19];
    if (v12(&v9[v19], 1, v10))
    {
      v22 = sub_100008384(&qword_1007C4330);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v20, v21, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
    }
    v23 = v14[7];
    v24 = &v8[v23];
    v25 = &v9[v23];
    if (v12(&v9[v23], 1, v10))
    {
      v26 = sub_100008384(&qword_1007C4330);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
    }
    v27 = v14[8];
    v28 = &v8[v27];
    v29 = &v9[v27];
    if (v12(&v9[v27], 1, v10))
    {
      v30 = sub_100008384(&qword_1007C4330);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v28, v29, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v28, 0, 1, v10);
    }
    v31 = v14[9];
    v32 = &v8[v31];
    v33 = &v9[v31];
    if (v12(&v9[v31], 1, v10))
    {
      v34 = sub_100008384(&qword_1007C4330);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v32, v33, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v32, 0, 1, v10);
    }
    v35 = v14[10];
    v36 = &v8[v35];
    v37 = &v9[v35];
    if (v12(&v9[v35], 1, v10))
    {
      v38 = sub_100008384(&qword_1007C4330);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
    }
    v39 = v14[11];
    v40 = &v8[v39];
    v41 = &v9[v39];
    if (v12(&v9[v39], 1, v10))
    {
      v42 = sub_100008384(&qword_1007C4330);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v40, v41, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v40, 0, 1, v10);
    }
    v43 = v14[12];
    v44 = &v8[v43];
    v45 = &v9[v43];
    if (v12(&v9[v43], 1, v10))
    {
      v46 = sub_100008384(&qword_1007C4330);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v44, v45, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v44, 0, 1, v10);
    }
    v8[v14[13]] = v9[v14[13]];
    v47 = v14[14];
    v48 = &v8[v47];
    v49 = &v9[v47];
    if (v12(&v9[v47], 1, v10))
    {
      v50 = sub_100008384(&qword_1007C4330);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
    }
    v51 = v14[15];
    v52 = &v8[v51];
    v53 = &v9[v51];
    if (v12(&v9[v51], 1, v10))
    {
      v54 = sub_100008384(&qword_1007C4330);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v52, v53, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v52, 0, 1, v10);
    }
    v55 = v14[16];
    v56 = &v8[v55];
    v57 = &v9[v55];
    if (v12(&v9[v55], 1, v10))
    {
      v58 = sub_100008384(&qword_1007C4330);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v56, v57, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v56, 0, 1, v10);
    }
    v59 = v14[17];
    v60 = &v8[v59];
    v61 = &v9[v59];
    if (v12(&v9[v59], 1, v10))
    {
      v62 = sub_100008384(&qword_1007C4330);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
    }
    v63 = v14[18];
    v64 = &v8[v63];
    v65 = &v9[v63];
    *(_DWORD *)v64 = *(_DWORD *)v65;
    v64[4] = v65[4];
    v8[v14[19]] = v9[v14[19]];
    v66 = v14[20];
    v67 = &v8[v66];
    v68 = &v9[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v14[21];
    v71 = &v8[v70];
    v72 = &v9[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = a3[6];
    v75 = (char *)v6 + v74;
    v76 = (char *)a2 + v74;
    v77 = *(_OWORD *)((char *)a2 + v74 + 24);
    *(_OWORD *)((char *)v6 + v74 + 24) = v77;
    v78 = v77;
    v79 = **(void (***)(char *, char *, uint64_t))(v77 - 8);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    v79(v75, v76, v78);
    v80 = a3[7];
    v81 = (_QWORD *)((char *)v6 + v80);
    v82 = (_QWORD *)((char *)a2 + v80);
    v83 = *v82;
    v84 = v82[1];
    sub_10022E4A8(*v82, v84);
    *v81 = v83;
    v81[1] = v84;
    v85 = a3[9];
    *(_DWORD *)((char *)v6 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v86 = (_QWORD *)((char *)v6 + v85);
    v87 = *(_QWORD *)((char *)a2 + v85);
    v88 = *(_QWORD *)((char *)a2 + v85 + 8);
    sub_10022E4A8(v87, v88);
    *v86 = v87;
    v86[1] = v88;
    v89 = a3[10];
    v90 = a3[11];
    v91 = *(void **)((char *)a2 + v89);
    *(_QWORD *)((char *)v6 + v89) = v91;
    *((_BYTE *)v6 + v90) = *((_BYTE *)a2 + v90);
    v92 = v91;
  }
  return v6;
}

void sub_100296678(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  int *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v9 = &v4[v8[5]];
  if (!v7(v9, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v10 = &v4[v8[6]];
  if (!v7(v10, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v11 = &v4[v8[7]];
  if (!v7(v11, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v12 = &v4[v8[8]];
  if (!v7(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v13 = &v4[v8[9]];
  if (!v7(v13, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  v14 = &v4[v8[10]];
  if (!v7(v14, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  v15 = &v4[v8[11]];
  if (!v7(v15, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v16 = &v4[v8[12]];
  if (!v7(v16, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  v17 = &v4[v8[14]];
  if (!v7(v17, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  v18 = &v4[v8[15]];
  if (!v7(v18, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  v19 = &v4[v8[16]];
  if (!v7(v19, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  v20 = &v4[v8[17]];
  if (!v7(v20, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[20] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[21] + 8]);
  sub_10022E75C((_QWORD *)((char *)a1 + a2[6]));
  sub_100225AB4(*(_QWORD *)((char *)a1 + a2[7]), *(_QWORD *)((char *)a1 + a2[7] + 8));
  sub_100225AB4(*(_QWORD *)((char *)a1 + a2[9]), *(_QWORD *)((char *)a1 + a2[9] + 8));

}

_QWORD *sub_100296968(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;

  v5 = *a2;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v5);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100008384(&qword_1007C4330);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v14 = v13[5];
  v15 = &v7[v14];
  v16 = &v8[v14];
  if (v11(&v8[v14], 1, v9))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  v18 = v13[6];
  v19 = &v7[v18];
  v20 = &v8[v18];
  if (v11(&v8[v18], 1, v9))
  {
    v21 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  v22 = v13[7];
  v23 = &v7[v22];
  v24 = &v8[v22];
  if (v11(&v8[v22], 1, v9))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  v26 = v13[8];
  v27 = &v7[v26];
  v28 = &v8[v26];
  if (v11(&v8[v26], 1, v9))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  v30 = v13[9];
  v31 = &v7[v30];
  v32 = &v8[v30];
  if (v11(&v8[v30], 1, v9))
  {
    v33 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v32, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
  }
  v34 = v13[10];
  v35 = &v7[v34];
  v36 = &v8[v34];
  if (v11(&v8[v34], 1, v9))
  {
    v37 = sub_100008384(&qword_1007C4330);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
  }
  v38 = v13[11];
  v39 = &v7[v38];
  v40 = &v8[v38];
  if (v11(&v8[v38], 1, v9))
  {
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v40, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
  }
  v42 = v13[12];
  v43 = &v7[v42];
  v44 = &v8[v42];
  if (v11(&v8[v42], 1, v9))
  {
    v45 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
  }
  v7[v13[13]] = v8[v13[13]];
  v46 = v13[14];
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v11(&v8[v46], 1, v9))
  {
    v49 = sub_100008384(&qword_1007C4330);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
  }
  v50 = v13[15];
  v51 = &v7[v50];
  v52 = &v8[v50];
  if (v11(&v8[v50], 1, v9))
  {
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v52, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
  }
  v54 = v13[16];
  v55 = &v7[v54];
  v56 = &v8[v54];
  if (v11(&v8[v54], 1, v9))
  {
    v57 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v55, v56, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
  }
  v58 = v13[17];
  v59 = &v7[v58];
  v60 = &v8[v58];
  if (v11(&v8[v58], 1, v9))
  {
    v61 = sub_100008384(&qword_1007C4330);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
  }
  v62 = v13[18];
  v63 = &v7[v62];
  v64 = &v8[v62];
  *(_DWORD *)v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  v65 = v13[20];
  v66 = &v7[v65];
  v67 = &v8[v65];
  v68 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *((_QWORD *)v66 + 1) = v68;
  v69 = v13[21];
  v70 = &v7[v69];
  v71 = &v8[v69];
  v72 = *((_QWORD *)v71 + 1);
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *((_QWORD *)v70 + 1) = v72;
  v73 = a3[6];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = *(_OWORD *)((char *)a2 + v73 + 24);
  *(_OWORD *)((char *)a1 + v73 + 24) = v76;
  v77 = v76;
  v78 = **(void (***)(char *, char *, uint64_t))(v76 - 8);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  v78(v74, v75, v77);
  v79 = a3[7];
  v80 = (_QWORD *)((char *)a1 + v79);
  v81 = (_QWORD *)((char *)a2 + v79);
  v82 = *v81;
  v83 = v81[1];
  sub_10022E4A8(*v81, v83);
  *v80 = v82;
  v80[1] = v83;
  v84 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  v85 = (_QWORD *)((char *)a1 + v84);
  v86 = *(_QWORD *)((char *)a2 + v84);
  v87 = *(_QWORD *)((char *)a2 + v84 + 8);
  sub_10022E4A8(v86, v87);
  *v85 = v86;
  v85[1] = v87;
  v88 = a3[10];
  v89 = a3[11];
  v90 = *(void **)((char *)a2 + v88);
  *(_QWORD *)((char *)a1 + v88) = v90;
  *((_BYTE *)a1 + v89) = *((_BYTE *)a2 + v89);
  v91 = v90;
  return a1;
}

_QWORD *sub_100297094(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  int *v123;
  _QWORD *v124;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v123 = a3;
  v124 = a2;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v18 = v17[5];
  v19 = &v9[v18];
  v20 = &v10[v18];
  v21 = v13(&v9[v18], 1, v11);
  v22 = v13(v20, 1, v11);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_12:
    v23 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v19, v20, v11);
LABEL_13:
  v24 = v17[6];
  v25 = &v9[v24];
  v26 = &v10[v24];
  v27 = v13(&v9[v24], 1, v11);
  v28 = v13(v26, 1, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v25, v26, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
LABEL_18:
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v25, v26, v11);
LABEL_19:
  v30 = v17[7];
  v31 = &v9[v30];
  v32 = &v10[v30];
  v33 = v13(&v9[v30], 1, v11);
  v34 = v13(v32, 1, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v32, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v31, 0, 1, v11);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
LABEL_24:
    v35 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v31, v32, v11);
LABEL_25:
  v36 = v17[8];
  v37 = &v9[v36];
  v38 = &v10[v36];
  v39 = v13(&v9[v36], 1, v11);
  v40 = v13(v38, 1, v11);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v37, 0, 1, v11);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v11);
LABEL_30:
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v37, v38, v11);
LABEL_31:
  v42 = v17[9];
  v43 = &v9[v42];
  v44 = &v10[v42];
  v45 = v13(&v9[v42], 1, v11);
  v46 = v13(v44, 1, v11);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v43, v44, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v43, 0, 1, v11);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v43, v11);
LABEL_36:
    v47 = sub_100008384(&qword_1007C4330);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v43, v44, v11);
LABEL_37:
  v48 = v17[10];
  v49 = &v9[v48];
  v50 = &v10[v48];
  v51 = v13(&v9[v48], 1, v11);
  v52 = v13(v50, 1, v11);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v50, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v49, 0, 1, v11);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
LABEL_42:
    v53 = sub_100008384(&qword_1007C4330);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v49, v50, v11);
LABEL_43:
  v54 = v17[11];
  v55 = &v9[v54];
  v56 = &v10[v54];
  v57 = v13(&v9[v54], 1, v11);
  v58 = v13(v56, 1, v11);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v55, v56, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v55, 0, 1, v11);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v55, v11);
LABEL_48:
    v59 = sub_100008384(&qword_1007C4330);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v55, v56, v11);
LABEL_49:
  v60 = v17[12];
  v61 = &v9[v60];
  v62 = &v10[v60];
  v63 = v13(&v9[v60], 1, v11);
  v64 = v13(v62, 1, v11);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v61, v62, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v61, 0, 1, v11);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v61, v11);
LABEL_54:
    v65 = sub_100008384(&qword_1007C4330);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v61, v62, v11);
LABEL_55:
  v9[v17[13]] = v10[v17[13]];
  v66 = v17[14];
  v67 = &v9[v66];
  v68 = &v10[v66];
  v69 = v13(&v9[v66], 1, v11);
  v70 = v13(v68, 1, v11);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v67, v68, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v67, 0, 1, v11);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v11);
LABEL_60:
    v71 = sub_100008384(&qword_1007C4330);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v67, v68, v11);
LABEL_61:
  v72 = v17[15];
  v73 = &v9[v72];
  v74 = &v10[v72];
  v75 = v13(&v9[v72], 1, v11);
  v76 = v13(v74, 1, v11);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v73, v74, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v73, 0, 1, v11);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v11);
LABEL_66:
    v77 = sub_100008384(&qword_1007C4330);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v73, v74, v11);
LABEL_67:
  v78 = v17[16];
  v79 = &v9[v78];
  v80 = &v10[v78];
  v81 = v13(&v9[v78], 1, v11);
  v82 = v13(v80, 1, v11);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v79, v80, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v79, 0, 1, v11);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v79, v11);
LABEL_72:
    v83 = sub_100008384(&qword_1007C4330);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v79, v80, v11);
LABEL_73:
  v84 = v17[17];
  v85 = &v9[v84];
  v86 = &v10[v84];
  v87 = v13(&v9[v84], 1, v11);
  v88 = v13(v86, 1, v11);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v85, v86, v11);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v85, v11);
    goto LABEL_78;
  }
  if (v88)
  {
LABEL_78:
    v89 = sub_100008384(&qword_1007C4330);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v85, v86, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v85, 0, 1, v11);
LABEL_79:
  v90 = v17[18];
  v91 = &v9[v90];
  v92 = &v10[v90];
  v93 = *(_DWORD *)v92;
  v91[4] = v92[4];
  *(_DWORD *)v91 = v93;
  v9[v17[19]] = v10[v17[19]];
  v94 = v17[20];
  v95 = &v9[v94];
  v96 = &v10[v94];
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v97 = *((_QWORD *)v96 + 1);
  v98 = *((_QWORD *)v95 + 1);
  *((_QWORD *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  v99 = v17[21];
  v100 = &v9[v99];
  v101 = &v10[v99];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v102 = *((_QWORD *)v101 + 1);
  v103 = *((_QWORD *)v100 + 1);
  *((_QWORD *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  sub_10023D490((_QWORD *)((char *)a1 + v123[6]), (_QWORD *)((char *)v124 + v123[6]));
  v104 = v123[7];
  v105 = (_QWORD *)((char *)a1 + v104);
  v106 = (_QWORD *)((char *)v124 + v104);
  v107 = *v106;
  v108 = v106[1];
  sub_10022E4A8(*v106, v108);
  v109 = *v105;
  v110 = v105[1];
  *v105 = v107;
  v105[1] = v108;
  sub_100225AB4(v109, v110);
  *(_DWORD *)((char *)a1 + v123[8]) = *(_DWORD *)((char *)v124 + v123[8]);
  v111 = v123[9];
  v112 = (_QWORD *)((char *)a1 + v111);
  v113 = (_QWORD *)((char *)v124 + v111);
  v114 = *v113;
  v115 = v113[1];
  sub_10022E4A8(*v113, v115);
  v116 = *v112;
  v117 = v112[1];
  *v112 = v114;
  v112[1] = v115;
  sub_100225AB4(v116, v117);
  v118 = v123[10];
  v119 = *(void **)((char *)a1 + v118);
  v120 = *(void **)((char *)v124 + v118);
  *(_QWORD *)((char *)a1 + v118) = v120;
  v121 = v120;

  *((_BYTE *)a1 + v123[11]) = *((_BYTE *)v124 + v123[11]);
  return a1;
}

_QWORD *sub_100297B64(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  *a1 = *a2;
  v5 = a3[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  v17 = v12[6];
  v18 = &v6[v17];
  v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    v20 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  v21 = v12[7];
  v22 = &v6[v21];
  v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    v24 = sub_100008384(&qword_1007C4330);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  v25 = v12[8];
  v26 = &v6[v25];
  v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  v29 = v12[9];
  v30 = &v6[v29];
  v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    v32 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  v33 = v12[10];
  v34 = &v6[v33];
  v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    v36 = sub_100008384(&qword_1007C4330);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  v37 = v12[11];
  v38 = &v6[v37];
  v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  v41 = v12[12];
  v42 = &v6[v41];
  v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    v44 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  v45 = v12[14];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    v48 = sub_100008384(&qword_1007C4330);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  v49 = v12[15];
  v50 = &v6[v49];
  v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  v53 = v12[16];
  v54 = &v6[v53];
  v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    v56 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  v57 = v12[17];
  v58 = &v6[v57];
  v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    v60 = sub_100008384(&qword_1007C4330);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  v61 = v12[18];
  v62 = &v6[v61];
  v63 = &v7[v61];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v64 = a3[6];
  v65 = a3[7];
  v66 = (char *)a1 + v64;
  v67 = (char *)a2 + v64;
  v68 = *((_OWORD *)v67 + 1);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *((_OWORD *)v66 + 1) = v68;
  *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
  *(_OWORD *)((char *)a1 + v65) = *(_OWORD *)((char *)a2 + v65);
  v69 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v69) = *(_OWORD *)((char *)a2 + v69);
  v70 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v70) = *((_BYTE *)a2 + v70);
  return a1;
}

_QWORD *sub_100298228(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  int *v117;
  _QWORD *v118;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v117 = a3;
  v118 = a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0);
  v17 = v16[5];
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = v12(&v8[v17], 1, v10);
  v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    v22 = sub_100008384(&qword_1007C4330);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  v23 = v16[6];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = v12(&v8[v23], 1, v10);
  v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    v28 = sub_100008384(&qword_1007C4330);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  v29 = v16[7];
  v30 = &v8[v29];
  v31 = &v9[v29];
  v32 = v12(&v8[v29], 1, v10);
  v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    v34 = sub_100008384(&qword_1007C4330);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  v35 = v16[8];
  v36 = &v8[v35];
  v37 = &v9[v35];
  v38 = v12(&v8[v35], 1, v10);
  v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    v40 = sub_100008384(&qword_1007C4330);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  v41 = v16[9];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v44 = v12(&v8[v41], 1, v10);
  v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    v46 = sub_100008384(&qword_1007C4330);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  v47 = v16[10];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v12(&v8[v47], 1, v10);
  v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    v52 = sub_100008384(&qword_1007C4330);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  v53 = v16[11];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v12(&v8[v53], 1, v10);
  v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    v58 = sub_100008384(&qword_1007C4330);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  v59 = v16[12];
  v60 = &v8[v59];
  v61 = &v9[v59];
  v62 = v12(&v8[v59], 1, v10);
  v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    v64 = sub_100008384(&qword_1007C4330);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  v65 = v16[14];
  v66 = &v8[v65];
  v67 = &v9[v65];
  v68 = v12(&v8[v65], 1, v10);
  v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    v70 = sub_100008384(&qword_1007C4330);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  v71 = v16[15];
  v72 = &v8[v71];
  v73 = &v9[v71];
  v74 = v12(&v8[v71], 1, v10);
  v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    v76 = sub_100008384(&qword_1007C4330);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  v77 = v16[16];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v12(&v8[v77], 1, v10);
  v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    v82 = sub_100008384(&qword_1007C4330);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  v83 = v16[17];
  v84 = &v8[v83];
  v85 = &v9[v83];
  v86 = v12(&v8[v83], 1, v10);
  v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    v88 = sub_100008384(&qword_1007C4330);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  v89 = v16[18];
  v90 = &v8[v89];
  v91 = &v9[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  v92 = v16[20];
  v93 = &v8[v92];
  v94 = &v9[v92];
  v96 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v93 = v96;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  v98 = v16[21];
  v99 = &v8[v98];
  v100 = &v9[v98];
  v102 = *(_QWORD *)v100;
  v101 = *((_QWORD *)v100 + 1);
  v103 = *((_QWORD *)v99 + 1);
  *(_QWORD *)v99 = v102;
  *((_QWORD *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  v104 = v117[6];
  v105 = (char *)a1 + v104;
  v106 = (char *)v118 + v104;
  sub_10022E75C((_QWORD *)((char *)a1 + v104));
  v107 = *((_OWORD *)v106 + 1);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *((_OWORD *)v105 + 1) = v107;
  *((_QWORD *)v105 + 4) = *((_QWORD *)v106 + 4);
  v108 = v117[7];
  v109 = *(_QWORD *)((char *)a1 + v108);
  v110 = *(_QWORD *)((char *)a1 + v108 + 8);
  *(_OWORD *)((char *)a1 + v108) = *(_OWORD *)((char *)v118 + v108);
  sub_100225AB4(v109, v110);
  v111 = v117[9];
  *(_DWORD *)((char *)a1 + v117[8]) = *(_DWORD *)((char *)v118 + v117[8]);
  v112 = *(_QWORD *)((char *)a1 + v111);
  v113 = *(_QWORD *)((char *)a1 + v111 + 8);
  *(_OWORD *)((char *)a1 + v111) = *(_OWORD *)((char *)v118 + v111);
  sub_100225AB4(v112, v113);
  v114 = v117[10];
  v115 = *(void **)((char *)a1 + v114);
  *(_QWORD *)((char *)a1 + v114) = *(_QWORD *)((char *)v118 + v114);

  *((_BYTE *)a1 + v117[11]) = *((_BYTE *)v118 + v117[11]);
  return a1;
}

uint64_t sub_100298CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100298CC8);
}

uint64_t sub_100298CC8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100298D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100298D50);
}

char *sub_100298D50(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SDAuthenticationSessionMetrics(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100298DC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "(";
    v4[3] = &unk_1005D0700;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = &unk_1005D0700;
    v4[6] = &unk_1005D0730;
    v4[7] = &unk_1005D0748;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100298E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100298E80);
}

uint64_t sub_100298E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100298E90);
}

uint64_t sub_100298E94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  result = type metadata accessor for SDAuthenticationSessionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1005D08F0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100298F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100298F44(a1, (uint64_t (*)(_QWORD))&type metadata accessor for URL, (void (*)(void))sub_100299384, a2);
}

uint64_t sub_100298F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100298F44(a1, type metadata accessor for SDAirDropDiscoveredEndpoint, (void (*)(void))sub_100299420, a2);
}

uint64_t sub_100298F44@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  result = sub_1002992E4(a1);
  if ((v10 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = a2(0);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a4;
    v14 = 1;
  }
  else
  {
    a3();
    v11 = a2(0);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a4;
    v14 = 0;
  }
  return v12(v13, v14, 1, v11);
}

uint64_t sub_100298FF4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v4 = String.UTF8View._foreignSubscript(position:)(15, a1);
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v4 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      else
        v4 = *(_BYTE *)_StringObject.sharedUTF8.getter(a1, a2);
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

uint64_t sub_100299084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  id v13;
  uint64_t v14;
  id v16;
  id v17;
  _BYTE v18[16];

  v4 = sub_100008384((uint64_t *)&unk_1007C5DE0);
  __chkstk_darwin(v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for SFPlatform(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static SFPlatform.macOS.getter(v9);
  v12 = static SFPlatform.isPlatform(_:)(v11);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    type metadata accessor for SDAirDropContentHandlerUtilities();
    v16 = 0;
  }
  else
  {
    v13 = objc_allocWithZone((Class)LSApplicationRecord);
    v16 = sub_100528FF4(0xD000000000000016, 0x8000000100613BD0, 1);
    type metadata accessor for SDAirDropContentHandlerUtilities();
    if (v16)
      v17 = v16;
  }
  v14 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  sub_100323EA0(a1, v16, 1, a2);

  return sub_10000D0F0((uint64_t)v6, (uint64_t *)&unk_1007C5DE0);
}

uint64_t type metadata accessor for SDAirDropContentHandlerWebLinks()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary31SDAirDropContentHandlerWebLinks);
}

uint64_t sub_10029923C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SDAirDropContentHandlerWebLinks();
  result = swift_allocObject(v2, 16, 7);
  *a1 = result;
  return result;
}

uint64_t sub_10029926C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1007B7C18 + dword_1007B7C18);
  v3 = (_QWORD *)swift_task_alloc(unk_1007B7C1C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10022320C;
  return v5(a1);
}

uint64_t sub_1002992D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100299084(a1, a2);
}

uint64_t sub_1002992E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100299384@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if ((a3 & 1) != 0)
    goto LABEL_10;
  v5 = result;
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
    {
      v7 = *(_QWORD *)(a4 + 48);
      v8 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v5, v8);
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100299420@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
    {
      v6 = *(_QWORD *)(a4 + 48);
      v7 = v6
         + *(_QWORD *)(*(_QWORD *)(type metadata accessor for SDAirDropDiscoveredEndpoint(0) - 8) + 72) * result;
      return sub_10022E534(v7, a5);
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1002994B4(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSURL *v44;
  char v45;
  void *v46;
  void *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  __int128 v69;
  char v70[56];
  uint64_t v71;
  unint64_t v72;
  char v73[56];

  v3 = sub_100008384((uint64_t *)&unk_1007B5200);
  __chkstk_darwin(v3);
  v5 = &v70[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v11 = SFAirDropReceive.AskRequest.urlItems.getter(v8);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = swift_bridgeObjectRelease(v11);
  v14 = SFAirDropReceive.AskRequest.itemsDescription.getter(v13);
  v16 = v15;
  if (v12 != 1)
    goto LABEL_4;
  v17 = v14;
  v18 = swift_bridgeObjectRetain(v15);
  v19 = SFAirDropReceive.AskRequest.urlItems.getter(v18);
  sub_100298F44(v19, (uint64_t (*)(_QWORD))&type metadata accessor for URL, (void (*)(void))sub_100299384, (uint64_t)v5);
  swift_bridgeObjectRelease(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    swift_bridgeObjectRelease(v16);
    sub_10000D0F0((uint64_t)v5, (uint64_t *)&unk_1007B5200);
LABEL_4:
    v20 = sub_100008384(&qword_1007B7600);
    inited = swift_initStackObject(v20, v73);
    v69 = xmmword_1005CD2A0;
    *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
    *(_QWORD *)(inited + 32) = 0x45544953424557;
    v22 = inited + 32;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    *(_QWORD *)(inited + 48) = v12;
    v71 = 0x545F4E5245444F4DLL;
    v72 = 0xEF524546534E4152;
    swift_bridgeObjectRetain(0xE700000000000000);
    swift_bridgeObjectRetain(inited);
    v23._countAndFlagsBits = 95;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0x45544953424557;
    v24._object = (void *)0xE700000000000000;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(0xE700000000000000);
    if (v12 > 1)
    {
      v25._countAndFlagsBits = 0x4C4152554C505FLL;
      v25._object = (void *)0xE700000000000000;
      String.append(_:)(v25);
    }
    swift_bridgeObjectRelease(inited);
    if ((a2 & 1) != 0)
    {
      v26._countAndFlagsBits = 0x4C4154495041435FLL;
      v26._object = (void *)0xEC00000044455A49;
      String.append(_:)(v26);
    }
    v27._countAndFlagsBits = 0x545845545FLL;
    v27._object = (void *)0xE500000000000000;
    String.append(_:)(v27);
    v28 = v72;
    swift_setDeallocating(inited);
    v29 = *(_QWORD *)(inited + 16);
    v30 = sub_100008384(&qword_1007B7608);
    swift_arrayDestroy(v22, v29, v30);
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    v33 = (id)SFLocalizedStringForKey(v31, v32);

    if (v33)
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v37 = sub_100008384((uint64_t *)&unk_1007B86C0);
      v38 = swift_allocObject(v37, 72, 7);
      *(_OWORD *)(v38 + 16) = v69;
      *(_QWORD *)(v38 + 56) = &type metadata for Int;
      *(_QWORD *)(v38 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v38 + 32) = v12;
      v39 = static String.localizedStringWithFormat(_:_:)(v34, v36, v38);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v38);
      v5 = v16;
LABEL_20:
      swift_bridgeObjectRelease(v5);
      return v39;
    }
    swift_bridgeObjectRelease(v16);
    __break(1u);
    goto LABEL_22;
  }
  v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  v41 = SFAirDropReceive.AskRequest.senderBundleID.getter(v40);
  v43 = v42;
  if (v41 == 0xD000000000000016 && v42 == 0x8000000100613BD0)
  {
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000100613BD0);
    goto LABEL_14;
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 0xD000000000000016, 0x8000000100613BD0, 0);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v43);
  if ((v45 & 1) != 0)
  {
LABEL_14:
    v5 = v16;
    if (v16)
      goto LABEL_16;
  }
  URL._bridgeToObjectiveC()(v44);
  v47 = v46;
  v48 = objc_msgSend(v46, "_lp_simplifiedDisplayString");

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v5 = v49;

  swift_bridgeObjectRelease(v16);
LABEL_16:
  swift_bridgeObjectRetain(v5);
  v50 = sub_100008384(&qword_1007B7600);
  v51 = swift_initStackObject(v50, v70);
  *(_QWORD *)(v51 + 32) = 0xD000000000000012;
  v52 = v51 + 32;
  v69 = xmmword_1005CD2A0;
  *(_OWORD *)(v51 + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(v51 + 40) = 0x8000000100613BF0;
  *(_QWORD *)(v51 + 48) = 1;
  v71 = 0x545F4E5245444F4DLL;
  v72 = 0xEF524546534E4152;
  swift_bridgeObjectRetain(0x8000000100613BF0);
  swift_bridgeObjectRetain(v51);
  v53._countAndFlagsBits = 95;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 0xD000000000000012;
  v54._object = (void *)0x8000000100613BF0;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(0x8000000100613BF0);
  if ((a2 & 1) != 0)
  {
    v55._countAndFlagsBits = 0x4C4154495041435FLL;
    v55._object = (void *)0xEC00000044455A49;
    String.append(_:)(v55);
  }
  v56._countAndFlagsBits = 0x545845545FLL;
  v56._object = (void *)0xE500000000000000;
  String.append(_:)(v56);
  v57 = v72;
  swift_setDeallocating(v51);
  v58 = *(_QWORD *)(v51 + 16);
  v59 = sub_100008384(&qword_1007B7608);
  swift_arrayDestroy(v52, v58, v59);
  v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v57);
  v62 = (id)SFLocalizedStringForKey(v60, v61);

  if (v62)
  {
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    v65 = v64;

    v66 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v67 = swift_allocObject(v66, 72, 7);
    *(_OWORD *)(v67 + 16) = v69;
    *(_QWORD *)(v67 + 56) = &type metadata for String;
    *(_QWORD *)(v67 + 64) = sub_100299AB0();
    *(_QWORD *)(v67 + 32) = v17;
    *(_QWORD *)(v67 + 40) = v5;
    v39 = static String.localizedStringWithFormat(_:_:)(v63, v65, v67);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v67);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_20;
  }
LABEL_22:
  result = swift_bridgeObjectRelease(v5);
  __break(1u);
  return result;
}

unint64_t sub_100299AB0()
{
  unint64_t result;

  result = qword_1007C4280;
  if (!qword_1007C4280)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1007C4280);
  }
  return result;
}

uint64_t sub_100299AF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = a1;
  v2 = type metadata accessor for URL(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384((uint64_t *)&unk_1007B5200);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDrop.TransferType(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v1[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100299BD0, static AirDropActor.shared, 0);
}

uint64_t sub_100299BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = SFAirDropReceive.AskRequest.type.getter();
  v5 = SFAirDrop.TransferType.isLinks.getter(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v5 & 1) == 0)
  {
    v29 = 0;
LABEL_37:
    v31 = *(_QWORD *)(v0 + 40);
    v30 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v29);
  }
  v7 = *(_QWORD *)(v0 + 32);
  result = SFAirDropReceive.AskRequest.urlItems.getter(v6);
  v9 = result;
  v10 = 0;
  v11 = result + 56;
  v12 = -1;
  v13 = -1 << *(_BYTE *)(result + 32);
  if (-v13 < 64)
    v12 = ~(-1 << -(char)v13);
  v14 = v12 & *(_QWORD *)(result + 56);
  v32 = (unint64_t)(63 - v13) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_22;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v11 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v11 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v11 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_21:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_22:
    v20 = *(_QWORD *)(v0 + 48);
    v21 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v20, *(_QWORD *)(v9 + 48) + *(_QWORD *)(v7 + 72) * v16, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v20, 1, v21) == 1)
    {
      swift_release(v9);
      v29 = 1;
      goto LABEL_37;
    }
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7 + 32))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24));
    URL.scheme.getter(v22);
    if (!v23)
    {
      (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
LABEL_35:
      swift_release(v9);
      v29 = 0;
      goto LABEL_37;
    }
    v24 = v23;
    v25 = String.lowercased()();
    swift_bridgeObjectRelease(v24);
    if (v25._countAndFlagsBits == 1886680168 && v25._object == (void *)0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v25._countAndFlagsBits, v25._object, 1886680168, 0xE400000000000000, 0) & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
      result = swift_bridgeObjectRelease(v25._object);
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 40);
      v27 = *(_QWORD *)(v0 + 24);
      if (v25._countAndFlagsBits == 0x7370747468 && v25._object == (void *)0xE500000000000000)
      {
        (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
        result = swift_bridgeObjectRelease(0xE500000000000000);
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25._countAndFlagsBits, v25._object, 0x7370747468, 0xE500000000000000, 0);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v26, v27);
        result = swift_bridgeObjectRelease(v25._object);
        if ((v28 & 1) == 0)
          goto LABEL_35;
      }
    }
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    v29 = 1;
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v7 + 56))(*(_QWORD *)(v0 + 48), 1, 1, *(_QWORD *)(v0 + 24));
    swift_release(v9);
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v11 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v11 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100299F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B7C20);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B7C20);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

__n128 sub_100299FE8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  const char *object;
  Swift::String v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v3 = v2;
  v38 = a2;
  v5 = _s12HelloRequestVMa(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B7DE8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100221DF8(v14, (uint64_t)qword_1007B7C20);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Sending HELLO request", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry], v39, 33, 0);
  Date.init()(v20);
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 0, 1, v21);
  sub_10023A084((uint64_t)v13, v19, &qword_1007C4330);
  swift_endAccess(v39);
  sub_100244384(a1, (uint64_t)v10, _s12HelloRequestVMa);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  v22 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloRequest];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloRequest], v39, 33, 0);
  sub_10023A084((uint64_t)v10, v22, &qword_1007B7DE8);
  swift_endAccess(v39);
  strcpy((char *)v39, "Send HELLO [");
  BYTE5(v39[1]) = 0;
  HIWORD(v39[1]) = -5120;
  v23 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v24 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  object = (const char *)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 93;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28 = v39[0];
  v29 = (const char *)v39[1];
  v30 = v37;
  sub_100244384(a1, v37, _s12HelloRequestVMa);
  v31 = *(unsigned __int8 *)(v6 + 80);
  v32 = (v31 + 24) & ~v31;
  v33 = swift_allocObject(&unk_1007202C0, v32 + v7, v31 | 7);
  *(_QWORD *)(v33 + 16) = v3;
  sub_100221DB4(v30, v33 + v32, _s12HelloRequestVMa);
  v34 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)(v28, v29);
  swift_release(v33);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_10029A36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = *(_QWORD *)(_s12HelloRequestVMa(0) - 8);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v3[9] = v5;
  v3[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B68A0);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B7DF0);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v8 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return swift_task_switch(sub_10029A44C, v8, 0);
}

uint64_t sub_10029A44C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;

  v1 = v0[12];
  v3 = v0[5];
  v2 = v0[6];
  v4 = sub_100008384(&qword_1007B7CF0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation, v0 + 2, 33, 0);
  sub_10023A084(v1, v6, &qword_1007B7DF0);
  swift_endAccess(v0 + 2);
  sub_10029A748();
  v0[14] = v7;
  v8 = v7;
  v9 = v0[10];
  v10 = v0[11];
  v12 = v0[8];
  v11 = v0[9];
  v14 = (char *)v0[6];
  v13 = v0[7];
  v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection];
  *(_QWORD *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection] = v7;
  swift_retain(v7);
  swift_release(v15);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  sub_100244384(v13, v9, _s12HelloRequestVMa);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1007202E8, v19 + 8, v17 | 7);
  v0[15] = v20;
  *(_QWORD *)(v20 + 16) = v14;
  sub_100221DB4(v9, v20 + v18, _s12HelloRequestVMa);
  *(_QWORD *)(v20 + v19) = v8;
  v21 = swift_allocObject(&unk_100720310, 24, 7);
  v0[16] = v21;
  *(_QWORD *)(v21 + 16) = v14;
  v22 = async function pointer to concurrentRace<A>(priority:operation:against:)[1];
  v23 = v14;
  swift_retain(v8);
  v24 = v23;
  v25 = (_QWORD *)swift_task_alloc(v22);
  v0[17] = v25;
  *v25 = v0;
  v25[1] = sub_10029A6AC;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_10029A6AC()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[17];
  (*v1)[18] = v0;
  swift_task_dealloc(v3);
  v5 = v2[15];
  v4 = v2[16];
  v6 = v2[13];
  sub_10000D0F0(v2[11], &qword_1007B68A0);
  swift_release(v4);
  swift_release(v5);
  if (v0)
    v7 = sub_1002A8140;
  else
    v7 = sub_1002A8144;
  return swift_task_switch(v7, v6, 0);
}

void sub_10029A748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  _BYTE v8[32];

  v1 = v0;
  v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v5 = &v8[-v4];
  sub_100244384(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint, (uint64_t)&v8[-v4], v6);
  v7 = (char *)sub_10029A81C + 4 * byte_1005D0AE0[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10029A81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;

  sub_1002443C8(v0, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  sub_100244384(v3, v1, type metadata accessor for SDAirDropDiscoveredEndpoint);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  return ((uint64_t (*)())((char *)sub_10029A89C + 4 * byte_1005D0AE4[EnumCaseMultiPayload]))();
}

uint64_t sub_10029A89C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  sub_1002443C8(v3, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  v5 = v1;
  v6 = sub_1002A08BC(0, v0, v2 & 1);
  if (!v5)
  {
    v7 = swift_allocObject(&unk_100720158, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16, v0);
    v8 = swift_allocObject(&unk_100720180, 24, 7);
    swift_weakInit(v8 + 16, v6);
    v9 = swift_allocObject(&unk_1007201A8, 32, 7);
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    swift_retain(v7);
    swift_retain(v8);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))NWConnection.stateUpdateHandler.setter)(sub_1002A6C54, v9);
    swift_release(v7);
    swift_release(v8);
    if (qword_1007B3D80 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v10 = type metadata accessor for Logger(0);
    sub_100221DF8(v10, (uint64_t)qword_1007B7C20);
    v11 = swift_retain_n(v6, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v4 - 96) = v15;
      *(_QWORD *)(v4 - 72) = v15;
      *(_DWORD *)v14 = 136315138;
      *(_QWORD *)(v4 - 104) = v14 + 4;
      v16 = NWConnection.debugDescription.getter(v15);
      v18 = v17;
      *(_QWORD *)(v4 - 88) = sub_100228BD8(v16, v17, (uint64_t *)(v4 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 88, v4 - 80, *(_QWORD *)(v4 - 104));
      swift_release_n(v6, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting connection %s", v14, 0xCu);
      v19 = *(_QWORD *)(v4 - 96);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(v6, 2);
    }
    ((void (*)(_QWORD))NWConnection.start(queue:))(*(_QWORD *)(v0
                                                                        + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_queue));
  }
  swift_release(0);
  return v6;
}

uint64_t sub_10029AB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;

  v4[8] = a2;
  v7 = sub_100008384(&qword_1007C4330);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v4[10] = static AirDropActor.shared;
  v8 = (_QWORD *)swift_task_alloc(dword_1007C56BC);
  v4[11] = v8;
  *v8 = v4;
  v8[1] = sub_10029AC08;
  return sub_10052A6B0(a3, a4);
}

uint64_t sub_10029AC08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10029AC78, *(_QWORD *)(v2 + 80), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10029AC78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[8];
  v2 = v0[9];
  v3 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v0[12] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v4 = v1 + v3;
  v5 = swift_beginAccess(v1 + v3, v0 + 2, 33, 0);
  Date.init()(v5);
  v6 = type metadata accessor for Date(0);
  v0[13] = v6;
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v0[14] = v7;
  v7(v2, 0, 1, v6);
  v8 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  v0[15] = v8;
  sub_10023A084(v2, v4 + *(int *)(v8 + 20), &qword_1007C4330);
  swift_endAccess(v0 + 2);
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7F7C);
  v0[16] = v9;
  *v9 = v0;
  v9[1] = sub_10029AD54;
  return sub_10029AE54();
}

uint64_t sub_10029AD54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_10029ADAC, v1, 0);
}

uint64_t sub_10029ADAC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 64) + *(_QWORD *)(v0 + 96);
  v6 = swift_beginAccess(v5, v0 + 40, 33, 0);
  Date.init()(v6);
  v2(v4, 0, 1, v3);
  sub_10023A084(v4, v5 + *(int *)(v1 + 24), &qword_1007C4330);
  swift_endAccess(v0 + 40);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029AE54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[11] = v0;
  v2 = sub_100008384(&qword_1007B7DF0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008384(&qword_1007B7CF0);
  v1[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[14] = v4;
  v1[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v1[16] = static AirDropActor.shared;
  return swift_task_switch(sub_10029AF10, v5, 0);
}

uint64_t sub_10029AF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection);
  *(_QWORD *)(v0 + 136) = v1;
  if (v1)
  {
    v2 = dword_1007C56B4;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = sub_10029AFBC;
    return sub_10052AEBC(v1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10029AFBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10029B1A0;
  else
    v5 = sub_10029B028;
  return swift_task_switch(v5, v3[16], 0);
}

uint64_t sub_10029B028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  *(_DWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_receiverFeatureFlags) = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection) = v1;
  swift_retain(v1);
  swift_release(v5);
  v6 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation, v0 + 64, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2))
  {
    v7 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v6, v10);
    *(_DWORD *)(v0 + 168) = v7;
    *(_BYTE *)(v0 + 172) = BYTE4(v7);
    SFProgressContinuation.finish(with:)(v0 + 168, v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  v11 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(v12, 1, 1, *(_QWORD *)(v0 + 104));
  v14 = v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation, v0 + 40, 33, 0);
  sub_10023A084(v12, v14, &qword_1007B7DF0);
  swift_endAccess(v0 + 40);
  swift_release(v11);
  v15 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029B1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  sub_10029FC08(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection, "Cancelling HELLO connection %s");
  v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1);
  v6 = *(_QWORD *)(v0 + 160);
  if (v5)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  v10 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(v11, 1, 1, *(_QWORD *)(v0 + 104));
  v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v13, v0 + 40, 33, 0);
  sub_10023A084(v11, v13, &qword_1007B7DF0);
  swift_endAccess(v0 + 40);
  swift_release(v10);
  v14 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029B300(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[5] = a2;
  v3 = sub_100008384(&qword_1007B7CF0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropSend.Failure(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v9 = static AirDropActor.shared;
  v2[15] = static AirDropActor.shared;
  return swift_task_switch(sub_10029B3E8, v9, 0);
}

uint64_t sub_10029B3E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v2 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 128) = v2;
  *v2 = v1;
  v2[1] = sub_10029B468;
  return v4(0x70801D946C940000, 2, 0, 0, 1);
}

uint64_t sub_10029B468()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = v2[15];
  (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
  if (v0)
    v5 = sub_10029B774;
  else
    v5 = sub_10029B4E4;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10029B4E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B7C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HELLO request timeout", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 40);

  sub_10029FC08(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection, "Cancelling HELLO connection %s");
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v8);
  v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v12, v0 + 16, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
  {
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 48);
    v18 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12, v17);
    v19 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v20 = swift_allocError(v15, v19, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v13, v15);
    SFProgressContinuation.fail(with:)(v20, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_errorRelease(v20);
  }
  v23 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 72);
  v25 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v24, v25, 0, 0);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v26, v22, v24);
  swift_willThrow(v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  v28 = *(_QWORD *)(v0 + 88);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029B774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_10029B7C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v3 = v2;
  v38 = a2;
  v5 = _s10AskRequestVMa(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B7DF8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100221DF8(v14, (uint64_t)qword_1007B7C20);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Sending ASK request", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = &v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry], &v39, 33, 0);
  Date.init()(v20);
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 0, 1, v21);
  v22 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  sub_10023A084((uint64_t)v13, (uint64_t)&v19[*(int *)(v22 + 28)], &qword_1007C4330);
  swift_endAccess(&v39);
  sub_100244384(a1, (uint64_t)v10, _s10AskRequestVMa);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  v23 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest], &v39, 33, 0);
  sub_10023A084((uint64_t)v10, v23, &qword_1007B7DF8);
  swift_endAccess(&v39);
  v39 = 0;
  v40 = 0xE000000000000000;
  v24._countAndFlagsBits = 0x4B534120646E6553;
  v24._object = (void *)0xEA00000000005B20;
  String.append(_:)(v24);
  v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v26 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(a1, v25, v26);
  v27._countAndFlagsBits = 93;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28 = v39;
  v29 = (const char *)v40;
  v30 = v37;
  sub_100244384(a1, v37, _s10AskRequestVMa);
  v31 = *(unsigned __int8 *)(v6 + 80);
  v32 = (v31 + 24) & ~v31;
  v33 = swift_allocObject(&unk_100720338, v32 + v7, v31 | 7);
  *(_QWORD *)(v33 + 16) = v3;
  sub_100221DB4(v30, v33 + v32, _s10AskRequestVMa);
  v34 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)(v28, v29);
  swift_release(v33);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_10029BB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = *(_QWORD *)(_s10AskRequestVMa(0) - 8);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v3[9] = v5;
  v3[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B68A0);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B7E00);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v8 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return swift_task_switch(sub_10029BC2C, v8, 0);
}

uint64_t sub_10029BC2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;

  v1 = v0[12];
  v3 = v0[5];
  v2 = v0[6];
  v4 = sub_100008384(&qword_1007B7D08);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation, v0 + 2, 33, 0);
  sub_10023A084(v1, v6, &qword_1007B7E00);
  swift_endAccess(v0 + 2);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain(v7);
  sub_10029A748();
  v0[14] = v8;
  v9 = v8;
  v10 = v0[10];
  v11 = v0[11];
  v13 = v0[8];
  v12 = v0[9];
  v15 = (char *)v0[6];
  v14 = v0[7];
  swift_release(v7);
  v16 = *(_QWORD *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection];
  *(_QWORD *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection] = v9;
  swift_retain(v9);
  swift_release(v16);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  sub_100244384(v14, v10, _s10AskRequestVMa);
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100720360, v20 + 8, v18 | 7);
  v0[15] = v21;
  *(_QWORD *)(v21 + 16) = v15;
  sub_100221DB4(v10, v21 + v19, _s10AskRequestVMa);
  *(_QWORD *)(v21 + v20) = v9;
  v22 = swift_allocObject(&unk_100720388, 24, 7);
  v0[16] = v22;
  *(_QWORD *)(v22 + 16) = v15;
  v23 = async function pointer to concurrentRace<A>(priority:operation:against:)[1];
  v24 = v15;
  swift_retain(v9);
  v25 = v24;
  v26 = (_QWORD *)swift_task_alloc(v23);
  v0[17] = v26;
  *v26 = v0;
  v26[1] = sub_10029BEB4;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_10029BEB4()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[17];
  (*v1)[18] = v0;
  swift_task_dealloc(v3);
  v5 = v2[15];
  v4 = v2[16];
  v6 = v2[13];
  sub_10000D0F0(v2[11], &qword_1007B68A0);
  swift_release(v4);
  swift_release(v5);
  if (v0)
    v7 = sub_10029BFAC;
  else
    v7 = sub_10029BF50;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10029BF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029BFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029C004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;

  v4[8] = a2;
  v7 = sub_100008384(&qword_1007C4330);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v4[10] = static AirDropActor.shared;
  v8 = (_QWORD *)swift_task_alloc(dword_1007C56CC);
  v4[11] = v8;
  *v8 = v4;
  v8[1] = sub_10029C0D0;
  return sub_10052A8B8(a3, a4);
}

uint64_t sub_10029C0D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10029C140, *(_QWORD *)(v2 + 80), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10029C140()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[8];
  v2 = v0[9];
  v3 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v0[12] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v4 = v1 + v3;
  v5 = swift_beginAccess(v1 + v3, v0 + 2, 33, 0);
  Date.init()(v5);
  v6 = type metadata accessor for Date(0);
  v0[13] = v6;
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v0[14] = v7;
  v7(v2, 0, 1, v6);
  v8 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  v0[15] = v8;
  sub_10023A084(v2, v4 + *(int *)(v8 + 32), &qword_1007C4330);
  swift_endAccess(v0 + 2);
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7FB4);
  v0[16] = v9;
  *v9 = v0;
  v9[1] = sub_10029C21C;
  return sub_10029C31C();
}

uint64_t sub_10029C21C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_10029C274, v1, 0);
}

uint64_t sub_10029C274()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 64) + *(_QWORD *)(v0 + 96);
  v6 = swift_beginAccess(v5, v0 + 40, 33, 0);
  Date.init()(v6);
  v2(v4, 0, 1, v3);
  sub_10023A084(v4, v5 + *(int *)(v1 + 36), &qword_1007C4330);
  swift_endAccess(v0 + 40);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029C31C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[40] = v0;
  v2 = sub_100008384(&qword_1007B7E00);
  v1[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008384(&qword_1007B7D08);
  v1[42] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[43] = v4;
  v1[44] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v1[45] = static AirDropActor.shared;
  return swift_task_switch(sub_10029C3D8, v5, 0);
}

uint64_t sub_10029C3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 320) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection);
  *(_QWORD *)(v0 + 368) = v1;
  if (v1)
  {
    v2 = dword_1007C56C4;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 376) = v3;
    *v3 = v0;
    v3[1] = sub_10029C490;
    return sub_10052B2E8(v0 + 16, v1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10029C490()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10029CA08;
  else
    v4 = sub_10029C4F4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 360), 0);
}

uint64_t sub_10029C4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  NSObject *log;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  if (!v3)
    v3 = swift_retain(*(_QWORD *)(v0 + 368));
  *(_QWORD *)(v1 + v2) = v3;
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(void **)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v6 = *(void **)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v8 = *(void **)(v0 + 96);
  v10 = qword_1007B3D80;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  if (v10 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v11 = type metadata accessor for Logger(0);
  sub_100221DF8(v11, (uint64_t)qword_1007B7C20);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  v12 = swift_bridgeObjectRetain(v8);
  v13 = Logger.logObject.getter(v12);
  v42 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v13, v42))
  {
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v8, 2);

    v21 = *(_QWORD *)(v1 + v2);
    if (!v21)
      goto LABEL_16;
    goto LABEL_15;
  }
  log = v13;
  v39 = v9;
  v43 = v7;
  v40 = v1;
  v14 = swift_slowAlloc(32, -1);
  v37 = swift_slowAlloc(96, -1);
  v44 = v37;
  *(_DWORD *)v14 = 136315650;
  v15 = v5;
  v16 = (unint64_t)v4;
  if (!v4)
  {
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v16 = 0x8000000100612DF0;
    v15 = 0xD000000000000015;
  }
  v41 = (uint64_t *)(v0 + 312);
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(v0 + 296) = sub_100228BD8(v15, v16, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v14 + 4);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease_n(v4, 2);
  *(_WORD *)(v14 + 12) = 2080;
  v17 = v43;
  v18 = (unint64_t)v6;
  if (!v6)
  {
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v46);
    v18 = 0x8000000100612DF0;
    v17 = 0xD000000000000015;
  }
  swift_bridgeObjectRetain(v6);
  *(_QWORD *)(v0 + 304) = sub_100228BD8(v17, v18, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v41, v14 + 14);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease_n(v6, 2);
  *(_WORD *)(v14 + 22) = 2080;
  v9 = v39;
  v19 = v39;
  v20 = (unint64_t)v8;
  if (!v8)
  {
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v46);
    v20 = 0x8000000100612DF0;
    v19 = 0xD000000000000015;
  }
  swift_bridgeObjectRetain(v8);
  *v41 = sub_100228BD8(v19, v20, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v0 + 320, v14 + 24);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease_n(v8, 2);
  _os_log_impl((void *)&_mh_execute_header, log, v42, "Sender extracted IDS session ID %s, pseudonym: %s, push token: %s from ask response", (uint8_t *)v14, 0x20u);
  swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1, -1);
  swift_slowDealloc(v14, -1, -1);

  v7 = v43;
  v21 = *(_QWORD *)(v40 + v2);
  if (v21)
  {
LABEL_15:
    swift_retain(v21);
    sub_1004FB0A0(v5, v4, v7, v6, v9, v8);
    swift_release(v21);
  }
LABEL_16:
  v22 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 344);
  v24 = *(_QWORD *)(v0 + 320) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v24, v0 + 248, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22))
  {
    v26 = *(_QWORD *)(v0 + 344);
    v25 = *(_QWORD *)(v0 + 352);
    v27 = *(_QWORD *)(v0 + 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
    v28 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 200) = v28;
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 112);
    v29 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 136) = v29;
    v30 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 168) = v30;
    SFProgressContinuation.finish(with:)(v0 + 120, v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }
  sub_1002A80BC((_QWORD *)(v0 + 16));
  v31 = *(_QWORD *)(v0 + 368);
  v33 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 344) + 56))(v32, 1, 1, *(_QWORD *)(v0 + 336));
  v34 = v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v34, v0 + 224, 33, 0);
  sub_10023A084(v32, v34, &qword_1007B7E00);
  swift_endAccess(v0 + 224);
  swift_release(v31);
  v35 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029CA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 320);
  sub_10029FC08(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection, "Cancelling ASK connection %s");
  v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v4, v0 + 272, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1);
  v6 = *(_QWORD *)(v0 + 384);
  if (v5)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 384));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 352);
    v9 = *(_QWORD *)(v0 + 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 344) + 56))(v11, 1, 1, *(_QWORD *)(v0 + 336));
  v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v13, v0 + 224, 33, 0);
  sub_10023A084(v11, v13, &qword_1007B7E00);
  swift_endAccess(v0 + 224);
  swift_release(v10);
  v14 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029CB68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2[5] = a2;
  v3 = sub_100008384(&qword_1007B7D08);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropSend.Failure(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDrop.TransferType(0);
  v2[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[16] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v11);
  v2[18] = swift_task_alloc(v11);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v12 = static AirDropActor.shared;
  v2[19] = static AirDropActor.shared;
  return swift_task_switch(sub_10029CC88, v12, 0);
}

uint64_t sub_10029CC88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v12;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[15];
  v4 = v0[16];
  SFAirDropSend.Request.type.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for SFAirDrop.TransferType.peerPayment(_:), v3);
  v5 = static SFAirDrop.TransferType.== infix(_:_:)(v1, v2);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v7 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v1, v3);
  if ((v5 & 1) != 0)
    v8 = 0x8155A43676E00000;
  else
    v8 = 0x70801D946C940000;
  if ((v5 & 1) != 0)
    v9 = 6;
  else
    v9 = 2;
  ContinuousClock.init()(v7);
  v12 = (char *)&dword_1007B6518 + dword_1007B6518;
  v10 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  v0[20] = v10;
  *v10 = v0;
  v10[1] = sub_10029CDAC;
  return ((uint64_t (*)(unint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v12)(v8, v9, 0, 0, 1);
}

uint64_t sub_10029CDAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  v4 = v2[19];
  (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
  if (v0)
    v5 = sub_10029D0D0;
  else
    v5 = sub_10029CE2C;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10029CE2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B7C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ASK request timeout", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 40);

  sub_10029FC08(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection, "Cancelling ASK connection %s");
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v8);
  v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v12, v0 + 16, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
  {
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 48);
    v18 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12, v17);
    v19 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v20 = swift_allocError(v15, v19, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v13, v15);
    SFProgressContinuation.fail(with:)(v20, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_errorRelease(v20);
  }
  v23 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 72);
  v25 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v24, v25, 0, 0);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v26, v22, v24);
  swift_willThrow(v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  v28 = *(_QWORD *)(v0 + 136);
  v29 = *(_QWORD *)(v0 + 112);
  v30 = *(_QWORD *)(v0 + 88);
  v31 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029D0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029D140@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  const char *object;
  Swift::String v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  id v37;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];

  v4 = v3;
  v8 = type metadata accessor for SFAirDrop.Progress(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v12 = type metadata accessor for Logger(0);
  sub_100221DF8(v12, (uint64_t)qword_1007B7C20);
  v13 = swift_bridgeObjectRetain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v41 = a2;
    v17 = (uint8_t *)v16;
    v40 = swift_slowAlloc(32, -1);
    v45[0] = v40;
    v43 = a3;
    *(_DWORD *)v17 = 136315138;
    v39 = v17 + 4;
    v18 = type metadata accessor for URL(0);
    v42 = v4;
    v19 = v11;
    v20 = v9;
    v21 = v8;
    v22 = v18;
    v23 = swift_bridgeObjectRetain(a1);
    v24 = Array.description.getter(v23, v22);
    v26 = v25;
    swift_bridgeObjectRelease(a1);
    v27 = v24;
    v8 = v21;
    v9 = v20;
    v11 = v19;
    v4 = v42;
    v44 = sub_100228BD8(v27, (unint64_t)v26, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v39);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sending UPLOAD request %s", v17, 0xCu);
    v28 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v45[0] = 0;
  v45[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease((const char *)v45[1]);
  strcpy((char *)v45, "Send UPLOAD [");
  HIWORD(v45[1]) = -4864;
  v29 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v30 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
  object = (const char *)v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  v33._countAndFlagsBits = 93;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34 = v45[0];
  v35 = (const char *)v45[1];
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for SFAirDrop.Progress.notStarted(_:), v8);
  v36 = swift_allocObject(&unk_100720220, 32, 7);
  *(_QWORD *)(v36 + 16) = v4;
  *(_QWORD *)(v36 + 24) = a1;
  swift_bridgeObjectRetain(a1);
  v37 = v4;
  withProgressTask<A, B>(_:initialProgress:operation:)(v34, v35);
  swift_bridgeObjectRelease(v35);
  swift_release(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10029D4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  v4 = type metadata accessor for SFSecurityScopedURL(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFSandboxTokenURLPair(0);
  v3[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[16] = v7;
  v3[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B7E10);
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384(&qword_1007B7DF8);
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v10 = static AirDropActor.shared;
  v3[20] = static AirDropActor.shared;
  return swift_task_switch(sub_10029D5BC, v10, 0);
}

uint64_t sub_10029D5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, unint64_t, _QWORD);
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_100221F28(v2, v1, &qword_1007B7DF8);
  v3 = _s10AskRequestVMa(0);
  LODWORD(v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v1, 1, v3);
  sub_10000D0F0(v1, &qword_1007B7DF8);
  if ((_DWORD)v2 == 1)
  {
    v4 = type metadata accessor for SFAirDropSend.Failure(0);
    v5 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v4, v5, 0, 0);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, enum case for SFAirDropSend.Failure.badRequest(_:), v4);
    swift_willThrow(v7);
    v32 = *(_QWORD *)(v0 + 144);
    v33 = *(_QWORD *)(v0 + 136);
    v34 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 88);
    v8 = sub_100008384((uint64_t *)&unk_1007B6820);
    v9 = sub_1002A7600();
    v10 = RandomAccessCollection<>.securityScopedURLs.getter(v8, v9);
    v11 = v10;
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
      v13 = *(_QWORD *)(v0 + 128);
      v14 = *(_QWORD *)(v0 + 104);
      v42 = _swiftEmptyArrayStorage;
      sub_100229914(0, v12, 0);
      v15 = v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v40 = v11;
      v41 = *(_QWORD *)(v14 + 72);
      v16 = *(void (**)(uint64_t, unint64_t, _QWORD))(v14 + 16);
      do
      {
        v17 = *(_QWORD *)(v0 + 112);
        v16(v17, v15, *(_QWORD *)(v0 + 96));
        static SFSecurityScopedURL.consumeSandboxToken(item:)(v17);
        (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
        v18 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_100229914(0, v42[2] + 1, 1);
          v18 = v42;
        }
        v20 = v18[2];
        v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_100229914(v19 > 1, v20 + 1, 1);
          v18 = v42;
        }
        v21 = *(_QWORD *)(v0 + 136);
        v22 = *(_QWORD *)(v0 + 120);
        v18[2] = v20 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v20, v21, v22);
        v42 = v18;
        v15 += v41;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      swift_bridgeObjectRelease(v10);
      v18 = _swiftEmptyArrayStorage;
    }
    v23 = *(_QWORD *)(v0 + 144);
    v25 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 80);
    v26 = *(_QWORD *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs);
    *(_QWORD *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs) = v18;
    swift_bridgeObjectRelease(v26);
    v27 = sub_100008384(&qword_1007B7D20);
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v23, v25, v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v23, 0, 1, v27);
    v29 = v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
    swift_beginAccess(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation, v0 + 40, 33, 0);
    sub_10023A084(v23, v29, &qword_1007B7E10);
    swift_endAccess(v0 + 40);
    v30 = *(_QWORD *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
    swift_retain(v30);
    sub_10029A748();
    *(_QWORD *)(v0 + 168) = v31;
    v36 = v31;
    v37 = *(_QWORD *)(v0 + 80);
    swift_release(v30);
    v38 = *(_QWORD *)(v37 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
    *(_QWORD *)(v37 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection) = v36;
    swift_retain(v36);
    swift_release(v38);
    v39 = static AirDropActor.shared;
    *(_QWORD *)(v0 + 176) = static AirDropActor.shared;
    return swift_task_switch(sub_10029D9E8, v39, 0);
  }
}

uint64_t sub_10029D9E8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[11];
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (void *)v0[10];
    v3 = type metadata accessor for SDAirDropSendCompressionAdapter(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    swift_bridgeObjectRetain(v1);
    v4 = v2;
    v5 = sub_10022F0BC(v1, (uint64_t)v2, (uint64_t)&off_1007200A8);
    v0[24] = v5;
    v6 = *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = v5;
    swift_retain(v5);
    swift_release(v6);
    v7 = sub_100220D78(&qword_1007B5808, type metadata accessor for SDAirDropSendCompressionAdapter, (uint64_t)&unk_1005CF108);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v3, v7);
    v10 = v9;
    v11 = sub_10029DBC4;
    v12 = v8;
    v13 = v10;
  }
  else
  {
    v14 = v0[20];
    v15 = type metadata accessor for SFAirDropSend.Failure(0);
    v16 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v0[23] = swift_allocError(v15, v16, 0, 0);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, enum case for SFAirDropSend.Failure.badRequest(_:), v15);
    swift_willThrow(v18);
    v11 = sub_10029DB60;
    v12 = v14;
    v13 = 0;
  }
  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_10029DB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029DBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;

  if (qword_1007B3D00 != -1)
    swift_once(&qword_1007B3D00, sub_10022EF4C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B5740);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting Send Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 176);

  v8 = *(void **)(v6 + 24);
  objc_msgSend(v8, "zip");
  v9 = objc_msgSend(v8, "copyReadStream");
  v10 = *(void **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v9;

  return swift_task_switch(sub_10029DCE4, v7, 0);
}

uint64_t sub_10029DCE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 192));
  return swift_task_switch(sub_10029DD24, v1, 0);
}

uint64_t sub_10029DD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_10029DD8C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  const char *object;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD v22[2];

  v2 = v1;
  v4 = _s15ExchangeRequestVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100221DF8(v7, (uint64_t)qword_1007B7C20);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sending EXCHANGE request", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease((const char *)0xE000000000000000, 0);
  v22[0] = 0x43584520646E6553;
  v22[1] = 0xEF5B2045474E4148;
  v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v13 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  object = (const char *)v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 93;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  sub_100244384(a1, (uint64_t)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), _s15ExchangeRequestVMa);
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = swift_allocObject(&unk_1007200E0, v18 + v6, v17 | 7);
  *(_QWORD *)(v19 + 16) = v2;
  sub_100221DB4((uint64_t)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, _s15ExchangeRequestVMa);
  _s16ExchangeResponseVMa(0);
  v20 = v2;
  withProgressTask<A, B>(_:initialProgress:operation:)(0x43584520646E6553, 0xEF5B2045474E4148);
  swift_release(v19);
  return swift_bridgeObjectRelease((const char *)0xEF5B2045474E4148);
}

uint64_t sub_10029DFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = *(_QWORD *)(_s15ExchangeRequestVMa(0) - 8);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v3[9] = v5;
  v3[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B68A0);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B7E18);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v8 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return swift_task_switch(sub_10029E0D0, v8, 0);
}

uint64_t sub_10029E0D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;

  v1 = v0[12];
  v3 = v0[5];
  v2 = v0[6];
  v4 = sub_100008384((uint64_t *)&unk_1007B7D30);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation, v0 + 2, 33, 0);
  sub_10023A084(v1, v6, &qword_1007B7E18);
  swift_endAccess(v0 + 2);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain(v7);
  sub_10029A748();
  v0[14] = v8;
  v9 = v8;
  v10 = v0[10];
  v11 = v0[11];
  v13 = v0[8];
  v12 = v0[9];
  v15 = (char *)v0[6];
  v14 = v0[7];
  swift_release(v7);
  v16 = *(_QWORD *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection];
  *(_QWORD *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection] = v9;
  swift_retain(v9);
  swift_release(v16);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  sub_100244384(v14, v10, _s15ExchangeRequestVMa);
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100720108, v20 + 8, v18 | 7);
  v0[15] = v21;
  *(_QWORD *)(v21 + 16) = v15;
  sub_100221DB4(v10, v21 + v19, _s15ExchangeRequestVMa);
  *(_QWORD *)(v21 + v20) = v9;
  v22 = swift_allocObject(&unk_100720130, 24, 7);
  v0[16] = v22;
  *(_QWORD *)(v22 + 16) = v15;
  v23 = *((unsigned int *)&async function pointer to concurrentRace<A>(priority:operation:against:) + 1);
  v24 = v15;
  swift_retain(v9);
  v25 = v24;
  v26 = (_QWORD *)swift_task_alloc(v23);
  v0[17] = v26;
  *v26 = v0;
  v26[1] = sub_10029A6AC;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_10029E358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a2;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v7 = (_QWORD *)swift_task_alloc(dword_1007C569C);
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_10029E3F0;
  return sub_10052AB84(a3, a4);
}

uint64_t sub_10029E3F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 24);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (_QWORD *)swift_task_alloc(dword_1007B7EA4);
  *(_QWORD *)(v2 + 32) = v6;
  *v6 = v4;
  v6[1] = sub_10029E46C;
  return sub_10029E4B8();
}

uint64_t sub_10029E46C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10029E4B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[11] = v0;
  v2 = sub_100008384(&qword_1007B7E18);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008384((uint64_t *)&unk_1007B7D30);
  v1[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[14] = v4;
  v1[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = _s16ExchangeResponseVMa(0);
  v1[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v6 = static AirDropActor.shared;
  v1[17] = static AirDropActor.shared;
  return swift_task_switch(sub_10029E594, v6, 0);
}

uint64_t sub_10029E594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection);
  *(_QWORD *)(v0 + 144) = v1;
  if (v1)
  {
    v2 = dword_1007C5694;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 152) = v3;
    *v3 = v0;
    v3[1] = sub_10029E650;
    return sub_10052BA14(*(_QWORD *)(v0 + 128), v1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10029E650()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10029E82C;
  else
    v4 = sub_10029E6B4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), 0);
}

uint64_t sub_10029E6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v3, v0 + 64, 32, 0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 128);
  if (v4)
  {
    sub_1002443C8(*(_QWORD *)(v0 + 128), _s16ExchangeResponseVMa);
    swift_endAccess(v0 + 64);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v3, v8);
    swift_endAccess(v0 + 64);
    SFProgressContinuation.finish(with:)(v5, v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_1002443C8(v5, _s16ExchangeResponseVMa);
  }
  v9 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(v10, 1, 1, *(_QWORD *)(v0 + 104));
  v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v12, v0 + 40, 33, 0);
  sub_10023A084(v10, v12, &qword_1007B7E18);
  swift_endAccess(v0 + 40);
  swift_release(v9);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029E82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  sub_10029FC08(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection, "Cancelling UPLOAD connection %s");
  v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1);
  v6 = *(_QWORD *)(v0 + 160);
  if (v5)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  v10 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(v11, 1, 1, *(_QWORD *)(v0 + 104));
  v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v13, v0 + 40, 33, 0);
  sub_10023A084(v11, v13, &qword_1007B7E18);
  swift_endAccess(v0 + 40);
  swift_release(v10);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029E994(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[5] = a2;
  v3 = sub_100008384((uint64_t *)&unk_1007B7D30);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropSend.Failure(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v9 = static AirDropActor.shared;
  v2[15] = static AirDropActor.shared;
  return swift_task_switch(sub_10029EA7C, v9, 0);
}

uint64_t sub_10029EA7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v2 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 128) = v2;
  *v2 = v1;
  v2[1] = sub_10029EAFC;
  return v4(0x70801D946C940000, 2, 0, 0, 1);
}

uint64_t sub_10029EAFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = v2[15];
  (*(void (**)(_QWORD, _QWORD))(v2[13] + 8))(v2[14], v2[12]);
  if (v0)
    v5 = sub_1002A813C;
  else
    v5 = sub_10029EB78;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10029EB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B7C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "EXCHANGE request timeout", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 40);

  sub_10029FC08(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection, "Cancelling UPLOAD connection %s");
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v8);
  v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v12, v0 + 16, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
  {
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 48);
    v18 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12, v17);
    v19 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v20 = swift_allocError(v15, v19, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v13, v15);
    SFProgressContinuation.fail(with:)(v20, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_errorRelease(v20);
  }
  v23 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 72);
  v25 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v24, v25, 0, 0);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v26, v22, v24);
  swift_willThrow(v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  v28 = *(_QWORD *)(v0 + 88);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_10029EE08@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  const char *object;
  Swift::String v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  v3 = v2;
  v6 = _s12ErrorRequestVMa(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v39 = v9;
  v40 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - v10;
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v12 = type metadata accessor for Logger(0);
  sub_100221DF8(v12, (uint64_t)qword_1007B7C20);
  v13 = sub_100244384(a1, (uint64_t)v11, _s12ErrorRequestVMa);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v37 = a1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v42[0] = v18;
    v38 = v2;
    v36 = a2;
    *(_DWORD *)v17 = 136315138;
    v19 = CodableError.description.getter(v18);
    v21 = (const char *)v20;
    v41 = sub_100228BD8(v19, v20, v42);
    v3 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v17 + 4);
    swift_bridgeObjectRelease(v21);
    sub_1002443C8((uint64_t)v11, _s12ErrorRequestVMa);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sending ERROR request %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    a1 = v37;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_1002443C8((uint64_t)v11, _s12ErrorRequestVMa);
  }

  strcpy((char *)v42, "Send ERROR [");
  BYTE5(v42[1]) = 0;
  HIWORD(v42[1]) = -5120;
  v23 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v24 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  object = (const char *)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 93;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28 = v42[0];
  v29 = (const char *)v42[1];
  v30 = v40;
  sub_100244384(a1, v40, _s12ErrorRequestVMa);
  v31 = *(unsigned __int8 *)(v7 + 80);
  v32 = (v31 + 24) & ~v31;
  v33 = swift_allocObject(&unk_100720248, v32 + v39, v31 | 7);
  *(_QWORD *)(v33 + 16) = v3;
  sub_100221DB4(v30, v33 + v32, _s12ErrorRequestVMa);
  v34 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)(v28, v29);
  swift_release(v33);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_10029F154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[2] = a2;
  v3[3] = a3;
  v4 = *(_QWORD *)(_s12ErrorRequestVMa(0) - 8);
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v3[5] = v5;
  v3[6] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B68A0);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v7 = static AirDropActor.shared;
  v3[8] = static AirDropActor.shared;
  return swift_task_switch(sub_10029F20C, v7, 0);
}

uint64_t sub_10029F20C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain(v1);
  sub_10029A748();
  v3 = v2;
  v0[9] = v2;
  swift_release(v1);
  v4 = v0[6];
  v5 = v0[7];
  v7 = v0[4];
  v6 = v0[5];
  v9 = (char *)v0[2];
  v8 = v0[3];
  v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection];
  *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection] = v3;
  swift_retain(v3);
  swift_release(v10);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  sub_100244384(v8, v4, _s12ErrorRequestVMa);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_100720270, v14 + 8, v12 | 7);
  v0[10] = v15;
  *(_QWORD *)(v15 + 16) = v9;
  sub_100221DB4(v4, v15 + v13, _s12ErrorRequestVMa);
  *(_QWORD *)(v15 + v14) = v3;
  v16 = swift_allocObject(&unk_100720298, 24, 7);
  v0[11] = v16;
  *(_QWORD *)(v16 + 16) = v9;
  v17 = async function pointer to concurrentRace<A>(priority:operation:against:)[1];
  v18 = v9;
  swift_retain(v3);
  v19 = v18;
  v20 = (_QWORD *)swift_task_alloc(v17);
  v0[12] = v20;
  *v20 = v0;
  v20[1] = sub_10029F3FC;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_10029F3FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v3 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  sub_10000D0F0(v6, &qword_1007B68A0);
  swift_release(v4);
  swift_release(v5);
  if (v0)
    v7 = sub_10029F4E0;
  else
    v7 = sub_10029F498;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_10029F498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029F4E0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029F524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;

  v4[2] = a2;
  v4[3] = a3;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v7 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
  v4[4] = static AirDropActor.shared;
  v4[5] = v7;
  v8 = (_QWORD *)swift_task_alloc(dword_1007C56AC);
  v4[6] = v8;
  *v8 = v4;
  v8[1] = sub_10029F5CC;
  return sub_10052AD20(a3, a4);
}

uint64_t sub_10029F5CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = static AirDropActor.shared;
  *(_QWORD *)(v2 + 56) = static AirDropActor.shared;
  return swift_task_switch(sub_10029F640, v6, 0);
}

uint64_t sub_10029F640()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection);
  v0[8] = v1;
  if (!v1)
    return swift_task_switch(sub_10029F810, v0[4], 0);
  v2 = dword_1007C56A4;
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_10029F6E0;
  return sub_10052BE84(v1);
}

uint64_t sub_10029F6E0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 72);
  *(_QWORD *)(*v3 + 80) = v2;
  swift_task_dealloc(v7);
  v8 = *(_QWORD *)(v6 + 56);
  if (v2)
  {
    v9 = sub_10029F7A0;
  }
  else
  {
    sub_100225AB4(a1, a2);
    v9 = sub_10029F764;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_10029F764()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_task_switch(sub_10029F810, *(_QWORD *)(v0 + 32), 0);
}

uint64_t sub_10029F7A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[10];
  v2 = v0[8];
  sub_10029FC08(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection, "Cancelling ERROR connection %s");
  swift_release(v2);
  swift_errorRelease(v1);
  return swift_task_switch(sub_10029F810, v0[4], 0);
}

uint64_t sub_10029F810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = v1 + *(int *)(_s12ErrorRequestVMa(0) + 20);
  v3 = type metadata accessor for CodableError(0);
  v4 = sub_100220D78(&qword_1007B7F40, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError);
  swift_allocError(v3, v4, 0, 0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v2, v3);
  swift_willThrow(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029F8C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a2;
  v3 = type metadata accessor for ContinuousClock(0);
  v2[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v2[6] = static AirDropActor.shared;
  return swift_task_switch(sub_10029F954, v5, 0);
}

uint64_t sub_10029F954(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v2 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 56) = v2;
  *v2 = v1;
  v2[1] = sub_10029F9D4;
  return v4(5000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_10029F9D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *(_QWORD *)(*v1 + 24);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_10029FBD4;
  else
    v7 = sub_10029FA60;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 48), 0);
}

uint64_t sub_10029FA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B7C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ERROR request timeout", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  sub_10029FC08(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection, "Cancelling ERROR connection %s");
  v6 = type metadata accessor for SFAirDropSend.Failure(0);
  v7 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v6, v7, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v6);
  swift_willThrow(v9);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029FBD4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029FC08(uint64_t result, uint64_t *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *format;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = *(_QWORD *)(v3 + *a2);
  if (v5)
  {
    v7 = v3;
    v8 = result;
    v9 = qword_1007B3D80;
    swift_retain(v5);
    if (v9 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v10 = type metadata accessor for Logger(0);
    sub_100221DF8(v10, (uint64_t)qword_1007B7C20);
    v11 = swift_retain_n(v5, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      format = a3;
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v22 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = NWConnection.debugDescription.getter();
      v18 = v17;
      v21 = sub_100228BD8(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4);
      swift_release_n(v5, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, format, v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      if ((v8 & 1) == 0)
      {
LABEL_6:
        NWConnection.cancel()();
LABEL_9:
        swift_release(v5);
        v19 = *(_QWORD *)(v7 + v4);
        *(_QWORD *)(v7 + v4) = 0;
        return swift_release(v19);
      }
    }
    else
    {

      swift_release_n(v5, 2);
      if ((v8 & 1) == 0)
        goto LABEL_6;
    }
    NWConnection.forceCancel()();
    goto LABEL_9;
  }
  return result;
}

__n128 sub_10029FDFC(int a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint8_t *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  LODWORD(v2) = a1;
  v3 = type metadata accessor for SFSandboxTokenURLPair(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v10 = type metadata accessor for Logger(0);
  sub_100221DF8(v10, (uint64_t)qword_1007B7C20);
  v11 = v1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v38 = v2;
    v2 = v15;
    v39 = v9;
    *(_DWORD *)v14 = 136315138;
    v41 = v15;
    v37 = v14 + 4;
    sub_1002B0AF0();
    v17 = (const char *)v16;
    v40 = sub_100228BD8(v18, v16, &v41);
    v9 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v37);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finish send connection to endpoint %s", v14, 0xCu);
    swift_arrayDestroy(v2, 1, (char *)&type metadata for Any + 8);
    v19 = v2;
    LOBYTE(v2) = v38;
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v20 = v2 & 1;
  sub_10029FC08(v20, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection, "Cancelling HELLO connection %s");
  sub_10029FC08(v20, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection, "Cancelling ASK connection %s");
  sub_10029FC08(v20, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection, "Cancelling UPLOAD connection %s");
  sub_10029FC08(v20, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection, "Cancelling UPLOAD connection %s");
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v9, 1, 1, v21);
  v22 = swift_allocObject(&unk_100720158, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v11);
  v23 = v11;
  v24 = qword_1007B3D98;
  swift_retain(v22);
  if (v24 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v25 = static AirDropActor.shared;
  v26 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v27 = (_QWORD *)swift_allocObject(&unk_1007201F8, 40, 7);
  v27[2] = v25;
  v27[3] = v26;
  v27[4] = v22;
  swift_retain(v25);
  swift_release(v22);
  v28 = sub_100252EC0((uint64_t)v9, (uint64_t)&unk_1007B7EE0, (uint64_t)v27);
  swift_release(v28);
  v29 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs;
  v30 = *(_QWORD *)&v23[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs];
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v39 = v23;
    v32 = v30 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v33 = *(_QWORD *)(v4 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain((const char *)v30);
    do
    {
      v34(v6, v32, v3);
      SFSandboxTokenURLPair.releaseSandboxExtension()();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease((const char *)v30);
    v23 = v39;
    v30 = *(_QWORD *)&v39[v29];
  }
  *(_QWORD *)&v23[v29] = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease((const char *)v30);
}

uint64_t sub_1002A0210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 64) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  *(_QWORD *)(v4 + 72) = static AirDropActor.shared;
  return swift_task_switch(sub_1002A027C, v5, 0);
}

uint64_t sub_1002A027C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *Strong;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(_QWORD *)(v0 + 80) = v5;
    if (v5)
    {
      swift_retain(v5);

      v6 = (_QWORD *)swift_task_alloc(dword_1007B5844);
      *(_QWORD *)(v0 + 88) = v6;
      *v6 = v0;
      v6[1] = sub_1002A0368;
      return sub_10022FD2C();
    }

  }
  v8 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v8, v0 + 40, 0, 0);
  v10 = (char *)swift_unknownObjectWeakLoadStrong(v8, v9);
  if (v10)
  {
    v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0;

    swift_release(v11);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A0368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release(v1);
  return swift_task_switch(sub_1002A03C8, v2, 0);
}

uint64_t sub_1002A03C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *Strong;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v1, v0 + 40, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = *(_QWORD *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0;

    swift_release(v4);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A0434()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[13] = v0;
  v2 = sub_100008384(&qword_1007B7E10);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008384(&qword_1007B7D20);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v1[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v1[18] = static AirDropActor.shared;
  return swift_task_switch(sub_1002A04F0, v5, 0);
}

uint64_t sub_1002A04F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
  *(_QWORD *)(v0 + 152) = v1;
  if (v1)
  {
    v2 = dword_1007C5674;
    swift_retain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 160) = v3;
    *v3 = v0;
    v3[1] = sub_1002A059C;
    return sub_10052B750(v1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002A059C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1002A075C;
  else
    v6 = sub_1002A060C;
  return swift_task_switch(v6, v4[18], 0);
}

uint64_t sub_1002A060C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v3, v0 + 64, 0, 0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1))
  {
    v4 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 176);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v3, v10);
    *(_QWORD *)(v0 + 88) = v7;
    *(_QWORD *)(v0 + 96) = v6;
    SFProgressContinuation.finish(with:)(v0 + 88, v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v4 = v7;
    v5 = v6;
  }
  sub_100225AB4(v4, v5);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 56))(v12, 1, 1, *(_QWORD *)(v0 + 120));
  v14 = v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v14, v0 + 40, 33, 0);
  sub_10023A084(v12, v14, &qword_1007B7E10);
  swift_endAccess(v0 + 40);
  swift_release(v11);
  v15 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A075C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  sub_10029FC08(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection, "Cancelling UPLOAD connection %s");
  v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1);
  v6 = *(_QWORD *)(v0 + 184);
  if (v5)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 184));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  v10 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 56))(v11, 1, 1, *(_QWORD *)(v0 + 120));
  v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v13, v0 + 40, 33, 0);
  sub_10023A084(v11, v13, &qword_1007B7E10);
  swift_endAccess(v0 + 40);
  swift_release(v10);
  v14 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A08BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = type metadata accessor for NWEndpoint(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v11 = qword_1007B3D80;
    swift_retain(a1);
    if (v11 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v12 = type metadata accessor for Logger(0);
    sub_100221DF8(v12, (uint64_t)qword_1007B7C20);
    v13 = swift_retain_n(a1, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v39 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = NWConnection.debugDescription.getter(v17);
      v20 = v19;
      v37 = sub_100228BD8(v18, v19, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v16 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Creating new AirDrop connection from existing %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v26 = sub_1005020B0(a1);
    swift_release(a1);
  }
  else
  {
    if (qword_1007B3D80 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v36 = v3;
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100221DF8(v21, (uint64_t)qword_1007B7C20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Creating new AirDrop connection", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = a2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
    v27 = *(_QWORD *)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_queue);
    v28 = swift_allocObject(&unk_100720158, 24, 7);
    swift_unknownObjectWeakInit(v28 + 16, a2);
    v29 = swift_allocObject(&unk_100720158, 24, 7);
    swift_unknownObjectWeakInit(v29 + 16, a2);
    swift_retain(v28);
    swift_retain(v29);
    v30 = v36;
    sub_1004FB418(v27, a2, a3 & 1, (uint64_t)sub_1002A74CC, v28, (uint64_t)sub_1002A74D4, v29);
    v32 = v31;
    swift_release_n(v28, 2);
    swift_release_n(v29, 2);
    if (!v30)
    {
      sub_1002B0D88();
      *v10 = v34;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for NWEndpoint.opaque(_:), v7);
      v35 = type metadata accessor for NWConnection(0);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      return NWConnection.init(to:using:)(v10, v32);
    }
  }
  return v26;
}

void sub_1002A0C98(uint64_t a1, NSObject *a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  _BYTE v11[24];

  v7 = a5 + 16;
  swift_beginAccess(a5 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7, v8);
  if (Strong)
  {
    v10 = (void *)Strong;
    sub_1002A7174(a2, a3);

  }
}

uint64_t sub_1002A0D0C(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  sec_identity_t v9;
  _BYTE v10[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (result)
  {
    v8 = (void *)result;
    v9 = sub_10038E260();
    a2();

    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1002A0D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE v25[24];
  char v26[24];

  v6 = type metadata accessor for NWConnection.State(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v9);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a2 + 16;
  v13 = a3 + 16;
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = swift_allocObject(&unk_100720158, 24, 7);
  swift_beginAccess(v12, v26, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v12, v16);
  swift_unknownObjectWeakInit(v15 + 16, Strong);

  v18 = swift_allocObject(&unk_100720180, 24, 7);
  swift_beginAccess(v13, v25, 0, 0);
  v19 = swift_weakLoadStrong(v13);
  swift_weakInit(v18 + 16, v19);
  swift_release(v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v6);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v20 + 48) & ~v20;
  v22 = (char *)swift_allocObject(&unk_1007201D0, v21 + v8, v20 | 7);
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  *((_QWORD *)v22 + 4) = v18;
  *((_QWORD *)v22 + 5) = v15;
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(&v22[v21], &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
  v23 = sub_100252EC0((uint64_t)v11, (uint64_t)&unk_1007B7EB0, (uint64_t)v22);
  return swift_release(v23);
}

uint64_t sub_1002A0F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return swift_task_switch(sub_1002A0FA0, 0, 0);
}

uint64_t sub_1002A0FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v0 + 72) + 16;
    swift_beginAccess(v4, v0 + 40, 0, 0);
    v6 = swift_unknownObjectWeakLoadStrong(v4, v5);
    *(_QWORD *)(v0 + 96) = v6;
    if (v6)
    {
      v7 = (_QWORD *)swift_task_alloc(dword_1007B7EBC);
      *(_QWORD *)(v0 + 104) = v7;
      *v7 = v0;
      v7[1] = sub_1002A1070;
      return sub_1002A10F8(*(_QWORD *)(v0 + 80), v3);
    }
    swift_release(v3);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A1070()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));

  return swift_task_switch(sub_1002A10C8, 0, 0);
}

uint64_t sub_1002A10C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A10F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v3[16] = v4;
  v3[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropSend.Transfer.Metrics.TransferResult(0);
  v3[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[19] = v6;
  v3[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NWError(0);
  v3[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[22] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v9);
  v3[24] = swift_task_alloc(v9);
  v3[25] = swift_task_alloc(v9);
  v3[26] = swift_task_alloc(v9);
  v3[27] = swift_task_alloc(v9);
  v3[28] = swift_task_alloc(v9);
  v10 = type metadata accessor for NWConnection.State(0);
  v3[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[30] = v11;
  v3[31] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v12 = static AirDropActor.shared;
  v3[32] = static AirDropActor.shared;
  return swift_task_switch(sub_1002A1244, v12, 0);
}

uint64_t sub_1002A1244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  uint64_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t (*v110)(uint64_t);
  BOOL *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(BOOL *, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  BOOL *v120;
  _QWORD *v121;
  uint64_t (*v122)();
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  _BOOL4 v134;
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BOOL4 v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  os_log_type_t v155;
  _BOOL4 v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  _BOOL4 v167;
  uint64_t v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t *v187;
  uint64_t *v188;
  os_log_type_t type;
  uint64_t typea;
  uint64_t typeb;
  uint64_t *v192;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  uint64_t v196;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 104), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for NWConnection.State.waiting(_:))
  {
    log = (os_log_t)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 96))(v5, *(_QWORD *)(v0 + 232));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v5, v8);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v10(v7, v6, v8);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8);
    v12 = *(unsigned int **)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 176);
    if (v11 == enum case for NWError.posix(_:))
    {
      (*(void (**)(_QWORD, uint64_t))(v14 + 96))(*(_QWORD *)(v0 + 216), v13);
      v15 = POSIXErrorCode.rawValue.getter(*v12);
      if (v15 == POSIXErrorCode.rawValue.getter(50))
      {
        if (qword_1007B3D80 != -1)
          swift_once(&qword_1007B3D80, sub_100299F58);
        v16 = *(_QWORD *)(v0 + 224);
        v17 = *(_QWORD *)(v0 + 208);
        v18 = *(_QWORD *)(v0 + 168);
        v19 = *(_QWORD *)(v0 + 112);
        v20 = type metadata accessor for Logger(0);
        sub_100221DF8(v20, (uint64_t)qword_1007B7C20);
        v10(v17, v16, v18);
        v21 = swift_retain_n(v19, 2);
        loga = Logger.logObject.getter(v21);
        type = static os_log_type_t.default.getter();
        v22 = os_log_type_enabled(loga, type);
        v23 = *(_QWORD *)(v0 + 224);
        v24 = *(_QWORD *)(v0 + 208);
        v25 = *(_QWORD *)(v0 + 168);
        v26 = *(_QWORD *)(v0 + 176);
        v27 = *(_QWORD *)(v0 + 112);
        if (v22)
        {
          v28 = swift_slowAlloc(22, -1);
          v29 = (uint64_t *)swift_slowAlloc(8, -1);
          v185 = swift_slowAlloc(32, -1);
          v196 = v185;
          *(_DWORD *)v28 = 138412546;
          v30 = sub_100220D78(&qword_1007B7EC0, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
          v31 = swift_allocError(v25, v30, 0, 0);
          v32 = v10;
          v33 = v31;
          v32(v34, v24, v25);
          v35 = _swift_stdlib_bridgeErrorToNSError(v33);
          *(_QWORD *)(v0 + 80) = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v28 + 4);
          *v29 = v35;
          v36 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
          v37 = v36(v24, v25);
          *(_WORD *)(v28 + 12) = 2080;
          v38 = NWConnection.debugDescription.getter(v37);
          v40 = v39;
          *(_QWORD *)(v0 + 88) = sub_100228BD8(v38, v39, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v28 + 14);
          swift_bridgeObjectRelease(v40);
          swift_release_n(v27, 2);
          _os_log_impl((void *)&_mh_execute_header, loga, type, "Ignoring error %@ for connection %s", (uint8_t *)v28, 0x16u);
          v41 = sub_100008384(&qword_1007B4C30);
          swift_arrayDestroy(v29, 1, v41);
          swift_slowDealloc(v29, -1, -1);
          swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v185, -1, -1);
          swift_slowDealloc(v28, -1, -1);

          v36(v23, v25);
        }
        else
        {

          swift_release_n(v27, 2);
          v143 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
          v143(v24, v25);
          v143(v23, v25);
        }
        goto LABEL_57;
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(v14 + 8))(*(_QWORD *)(v0 + 216), v13);
    }
    if (qword_1007B3D80 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v70 = *(_QWORD *)(v0 + 224);
    v71 = *(_QWORD *)(v0 + 200);
    v72 = *(_QWORD *)(v0 + 168);
    v73 = *(_QWORD *)(v0 + 112);
    v74 = type metadata accessor for Logger(0);
    sub_100221DF8(v74, (uint64_t)qword_1007B7C20);
    v10(v71, v70, v72);
    v75 = swift_retain_n(v73, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.default.getter();
    v78 = os_log_type_enabled(v76, v77);
    v79 = *(_QWORD *)(v0 + 200);
    v80 = v10;
    v82 = *(_QWORD *)(v0 + 168);
    v81 = *(_QWORD *)(v0 + 176);
    v83 = *(_QWORD *)(v0 + 112);
    if (v78)
    {
      v186 = v80;
      v84 = swift_slowAlloc(22, -1);
      v188 = (uint64_t *)swift_slowAlloc(8, -1);
      typeb = swift_slowAlloc(32, -1);
      v196 = typeb;
      *(_DWORD *)v84 = 136315394;
      v85 = NWConnection.debugDescription.getter(typeb);
      v184 = v81;
      v87 = v86;
      log->isa = (Class)sub_100228BD8(v85, v86, &v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(log, v0 + 72, v84 + 4);
      swift_bridgeObjectRelease(v87);
      swift_release_n(v83, 2);
      *(_WORD *)(v84 + 12) = 2112;
      v88 = sub_100220D78(&qword_1007B7EC0, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v89 = swift_allocError(v82, v88, 0, 0);
      v186(v90, v79, v82);
      v91 = _swift_stdlib_bridgeErrorToNSError(v89);
      *(_QWORD *)(v0 + 72) = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v84 + 14);
      *v188 = v91;
      v92 = *(void (**)(uint64_t, uint64_t))(v184 + 8);
      v92(v79, v82);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Waiting for transfer connection %s %@", (uint8_t *)v84, 0x16u);
      v93 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v188, 1, v93);
      swift_slowDealloc(v188, -1, -1);
      swift_arrayDestroy(typeb, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typeb, -1, -1);
      swift_slowDealloc(v84, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 112), 2);
      v92 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      v92(v79, v82);
    }

    *(_QWORD *)(v0 + 264) = v92;
    v107 = *(_QWORD *)(v0 + 128);
    v106 = *(_QWORD *)(v0 + 136);
    v108 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
    sub_100244384(v108, v106, type metadata accessor for SDAirDropDiscoveredEndpoint);
    v109 = swift_getEnumCaseMultiPayload(v106, v107) == 1;
    if (v109)
      v110 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint;
    else
      v110 = type metadata accessor for SDAirDropDiscoveredEndpoint;
    sub_1002443C8(*(_QWORD *)(v0 + 136), v110);
    v112 = *(_QWORD *)(v0 + 152);
    v111 = *(BOOL **)(v0 + 160);
    v113 = *(_QWORD *)(v0 + 144);
    v114 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendRequest;
    *v111 = v109;
    v115 = enum case for SFAirDropSend.Failure.resolveFailure(_:);
    v116 = type metadata accessor for SFAirDropSend.Failure(0);
    v117 = *(void (**)(BOOL *, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 104);
    v117(v111, v115, v116);
    (*(void (**)(BOOL *, _QWORD, uint64_t))(v112 + 104))(v111, enum case for SFAirDropSend.Transfer.Metrics.TransferResult.failure(_:), v113);
    sub_100337548(v114, v108, (uint64_t)v111);
    (*(void (**)(BOOL *, uint64_t))(v112 + 8))(v111, v113);
    NWConnection.cancel()();
    v118 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v119 = swift_allocError(v116, v118, 0, 0);
    *(_QWORD *)(v0 + 272) = v119;
    *v120 = 0;
    v117(v120, v115, v116);
    v121 = (_QWORD *)swift_task_alloc(dword_1007B7ECC);
    *(_QWORD *)(v0 + 280) = v121;
    v122 = sub_1002A24AC;
LABEL_30:
    *v121 = v0;
    v121[1] = v122;
    return sub_1002A26C4(*(_QWORD *)(v0 + 112), v119);
  }
  if (v4 == enum case for NWConnection.State.failed(_:))
  {
    v192 = (uint64_t *)(v0 + 32);
    v42 = *(_QWORD *)(v0 + 248);
    v43 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 168);
    v45 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 96))(v42, *(_QWORD *)(v0 + 232));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v43, v42, v44);
    if (qword_1007B3D80 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v47 = *(_QWORD *)(v0 + 184);
    v46 = *(_QWORD *)(v0 + 192);
    v48 = *(_QWORD *)(v0 + 168);
    v49 = *(_QWORD *)(v0 + 176);
    v50 = *(_QWORD *)(v0 + 112);
    v51 = type metadata accessor for Logger(0);
    sub_100221DF8(v51, (uint64_t)qword_1007B7C20);
    logb = *(os_log_t *)(v49 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))logb)(v47, v46, v48);
    v52 = swift_retain_n(v50, 2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter();
    v55 = os_log_type_enabled(v53, v54);
    v56 = *(_QWORD *)(v0 + 176);
    v57 = *(_QWORD *)(v0 + 184);
    v58 = *(_QWORD *)(v0 + 168);
    v59 = *(_QWORD *)(v0 + 112);
    if (v55)
    {
      v60 = swift_slowAlloc(22, -1);
      v187 = (uint64_t *)swift_slowAlloc(8, -1);
      typea = swift_slowAlloc(32, -1);
      v196 = typea;
      *(_DWORD *)v60 = 136315394;
      v61 = NWConnection.debugDescription.getter(typea);
      v183 = v56;
      v63 = v62;
      *v192 = sub_100228BD8(v61, v62, &v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v192, v0 + 40, v60 + 4);
      swift_bridgeObjectRelease(v63);
      swift_release_n(v59, 2);
      *(_WORD *)(v60 + 12) = 2112;
      v64 = sub_100220D78(&qword_1007B7EC0, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
      v65 = swift_allocError(v58, v64, 0, 0);
      ((void (*)(uint64_t, uint64_t, uint64_t))logb)(v66, v57, v58);
      v67 = _swift_stdlib_bridgeErrorToNSError(v65);
      *(_QWORD *)(v0 + 40) = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v60 + 14);
      *v187 = v67;
      v68 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
      v68(v57, v58);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Transfer connection failed %s %@", (uint8_t *)v60, 0x16u);
      v69 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v187, 1, v69);
      swift_slowDealloc(v187, -1, -1);
      swift_arrayDestroy(typea, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 112), 2);
      v68 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v68(v57, v58);

    }
    *(_QWORD *)(v0 + 288) = v68;
    v123 = *(_QWORD *)(v0 + 192);
    v124 = *(_QWORD *)(v0 + 168);
    NWConnection.cancel()();
    v125 = sub_100220D78(&qword_1007B7EC0, (uint64_t (*)(uint64_t))&type metadata accessor for NWError, (uint64_t)&protocol conformance descriptor for NWError);
    v119 = swift_allocError(v124, v125, 0, 0);
    *(_QWORD *)(v0 + 296) = v119;
    ((void (*)(uint64_t, uint64_t, uint64_t))logb)(v126, v123, v124);
    v121 = (_QWORD *)swift_task_alloc(dword_1007B7ECC);
    *(_QWORD *)(v0 + 304) = v121;
    v122 = sub_1002A25B8;
    goto LABEL_30;
  }
  if (v4 == enum case for NWConnection.State.setup(_:))
  {
    if (qword_1007B3D80 != -1)
      swift_once(&qword_1007B3D80, sub_100299F58);
    v94 = *(_QWORD *)(v0 + 112);
    v95 = type metadata accessor for Logger(0);
    sub_100221DF8(v95, (uint64_t)qword_1007B7C20);
    v96 = swift_retain_n(v94, 2);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.default.getter();
    v99 = os_log_type_enabled(v97, v98);
    v100 = *(_QWORD *)(v0 + 112);
    if (v99)
    {
      v101 = (uint8_t *)swift_slowAlloc(12, -1);
      v102 = swift_slowAlloc(32, -1);
      *(_DWORD *)v101 = 136315138;
      v196 = v102;
      v103 = NWConnection.debugDescription.getter(v102);
      v105 = v104;
      *(_QWORD *)(v0 + 96) = sub_100228BD8(v103, v104, &v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v101 + 4);
      swift_bridgeObjectRelease(v105);
      swift_release_n(v100, 2);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Setting up transfer connection %s", v101, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);

    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 112), 2);

    }
    goto LABEL_57;
  }
  v128 = (uint64_t *)(v0 + 56);
  if (v4 != enum case for NWConnection.State.preparing(_:))
  {
    if (v4 == enum case for NWConnection.State.ready(_:))
    {
      if (qword_1007B3D80 != -1)
        swift_once(&qword_1007B3D80, sub_100299F58);
      v144 = *(_QWORD *)(v0 + 112);
      v145 = type metadata accessor for Logger(0);
      sub_100221DF8(v145, (uint64_t)qword_1007B7C20);
      v146 = swift_retain_n(v144, 2);
      v132 = Logger.logObject.getter(v146);
      v133 = static os_log_type_t.default.getter();
      v147 = os_log_type_enabled(v132, v133);
      v135 = *(_QWORD *)(v0 + 112);
      if (v147)
      {
        v136 = (uint8_t *)swift_slowAlloc(12, -1);
        v138 = swift_slowAlloc(32, -1);
        *(_DWORD *)v136 = 136315138;
        v196 = v138;
        v148 = NWConnection.debugDescription.getter(v138);
        v150 = v149;
        *(_QWORD *)(v0 + 48) = sub_100228BD8(v148, v149, &v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v136 + 4);
        swift_bridgeObjectRelease(v150);
        swift_release_n(v135, 2);
        v142 = "Transfer connection ready %s";
        goto LABEL_43;
      }
    }
    else
    {
      if (v4 != enum case for NWConnection.State.cancelled(_:))
      {
        if (qword_1007B3D80 != -1)
          swift_once(&qword_1007B3D80, sub_100299F58);
        v162 = *(_QWORD *)(v0 + 112);
        v163 = type metadata accessor for Logger(0);
        sub_100221DF8(v163, (uint64_t)qword_1007B7C20);
        v164 = swift_retain_n(v162, 2);
        v165 = Logger.logObject.getter(v164);
        v166 = static os_log_type_t.default.getter();
        v167 = os_log_type_enabled(v165, v166);
        v168 = *(_QWORD *)(v0 + 112);
        if (v167)
        {
          v169 = (uint8_t *)swift_slowAlloc(12, -1);
          v170 = swift_slowAlloc(32, -1);
          v196 = v170;
          v171 = v170;
          *(_DWORD *)v169 = 136315138;
          v172 = NWConnection.debugDescription.getter(v170);
          v174 = v173;
          *(_QWORD *)(v0 + 16) = sub_100228BD8(v172, v173, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v169 + 4);
          swift_bridgeObjectRelease(v174);
          swift_release_n(v168, 2);
          _os_log_impl((void *)&_mh_execute_header, v165, v166, "Unknown transfer connection state %s", v169, 0xCu);
          swift_arrayDestroy(v171, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v171, -1, -1);
          swift_slowDealloc(v169, -1, -1);
        }
        else
        {
          swift_release_n(*(_QWORD *)(v0 + 112), 2);
        }

        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
        goto LABEL_57;
      }
      if (qword_1007B3D80 != -1)
        swift_once(&qword_1007B3D80, sub_100299F58);
      v152 = *(_QWORD *)(v0 + 112);
      v153 = type metadata accessor for Logger(0);
      sub_100221DF8(v153, (uint64_t)qword_1007B7C20);
      v154 = swift_retain_n(v152, 2);
      v132 = Logger.logObject.getter(v154);
      v155 = static os_log_type_t.default.getter();
      v156 = os_log_type_enabled(v132, v155);
      v135 = *(_QWORD *)(v0 + 112);
      if (v156)
      {
        v157 = (uint8_t *)swift_slowAlloc(12, -1);
        v158 = swift_slowAlloc(32, -1);
        v196 = v158;
        *(_DWORD *)v157 = 136315138;
        v159 = NWConnection.debugDescription.getter(v158);
        v161 = v160;
        *(_QWORD *)(v0 + 24) = sub_100228BD8(v159, v160, &v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v157 + 4);
        swift_bridgeObjectRelease(v161);
        swift_release_n(v135, 2);
        _os_log_impl((void *)&_mh_execute_header, v132, v155, "Transfer connection invalidated %s", v157, 0xCu);
        swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v158, -1, -1);
        v151 = v157;
        goto LABEL_44;
      }
    }
LABEL_50:
    swift_release_n(v135, 2);

    goto LABEL_57;
  }
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v129 = *(_QWORD *)(v0 + 112);
  v130 = type metadata accessor for Logger(0);
  sub_100221DF8(v130, (uint64_t)qword_1007B7C20);
  v131 = swift_retain_n(v129, 2);
  v132 = Logger.logObject.getter(v131);
  v133 = static os_log_type_t.default.getter();
  v134 = os_log_type_enabled(v132, v133);
  v135 = *(_QWORD *)(v0 + 112);
  if (!v134)
    goto LABEL_50;
  v136 = (uint8_t *)swift_slowAlloc(12, -1);
  v137 = swift_slowAlloc(32, -1);
  v196 = v137;
  v138 = v137;
  *(_DWORD *)v136 = 136315138;
  v139 = NWConnection.debugDescription.getter(v137);
  v141 = v140;
  *v128 = sub_100228BD8(v139, v140, &v196);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v0 + 64, v136 + 4);
  swift_bridgeObjectRelease(v141);
  swift_release_n(v135, 2);
  v142 = "Preparing transfer connection %s";
LABEL_43:
  _os_log_impl((void *)&_mh_execute_header, v132, v133, v142, v136, 0xCu);
  swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v138, -1, -1);
  v151 = v136;
LABEL_44:
  swift_slowDealloc(v151, -1, -1);

LABEL_57:
  v175 = *(_QWORD *)(v0 + 216);
  v176 = *(_QWORD *)(v0 + 224);
  v178 = *(_QWORD *)(v0 + 200);
  v177 = *(_QWORD *)(v0 + 208);
  v180 = *(_QWORD *)(v0 + 184);
  v179 = *(_QWORD *)(v0 + 192);
  v181 = *(_QWORD *)(v0 + 160);
  v182 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v176);
  swift_task_dealloc(v175);
  swift_task_dealloc(v177);
  swift_task_dealloc(v178);
  swift_task_dealloc(v179);
  swift_task_dealloc(v180);
  swift_task_dealloc(v181);
  swift_task_dealloc(v182);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A24AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_errorRelease(v1);
  return swift_task_switch(sub_1002A250C, v2, 0);
}

uint64_t sub_1002A250C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A25B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_errorRelease(v1);
  return swift_task_switch(sub_1002A2618, v2, 0);
}

uint64_t sub_1002A2618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A26C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v4 = sub_100008384((uint64_t *)&unk_1007B7D30);
  v3[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[18] = v5;
  v3[19] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B7D20);
  v3[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[21] = v7;
  v3[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B7D08);
  v3[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[24] = v9;
  v3[25] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B7CF0);
  v3[26] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[27] = v11;
  v3[28] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1002A27E0, static AirDropActor.shared, 0);
}

uint64_t sub_1002A27E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection);
  if (v3)
    v4 = v2 == v3;
  else
    v4 = 0;
  if (v4)
  {
    v11 = (uint64_t *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 216);
    v14 = (uint64_t *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 208);
    v15 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
    swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation, v0 + 88, 0, 0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v18))
    {
      v16 = 224;
      goto LABEL_26;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection);
    if (v5)
      v6 = v2 == v5;
    else
      v6 = 0;
    if (v6)
    {
      v11 = (uint64_t *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 192);
      v14 = (uint64_t *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 184);
      v15 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
      swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation, v0 + 64, 0, 0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v20))
      {
        v16 = 200;
        goto LABEL_26;
      }
    }
    else
    {
      v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
      if (v7)
        v8 = v2 == v7;
      else
        v8 = 0;
      if (v8)
      {
        v11 = (uint64_t *)(v0 + 168);
        v21 = *(_QWORD *)(v0 + 168);
        v14 = (uint64_t *)(v0 + 160);
        v22 = *(_QWORD *)(v0 + 160);
        v15 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
        swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation, v0 + 40, 0, 0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v15, 1, v22))
        {
          v16 = 176;
          goto LABEL_26;
        }
      }
      else
      {
        v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection);
        if (v9)
          v10 = v2 == v9;
        else
          v10 = 0;
        if (v10)
        {
          v11 = (uint64_t *)(v0 + 144);
          v12 = *(_QWORD *)(v0 + 144);
          v14 = (uint64_t *)(v0 + 136);
          v13 = *(_QWORD *)(v0 + 136);
          v15 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
          swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation, v0 + 16, 0, 0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v15, 1, v13))
          {
            v16 = 152;
LABEL_26:
            v23 = *(_QWORD *)(v0 + v16);
            v24 = *v14;
            v25 = *v11;
            v26 = *(_QWORD *)(v0 + 120);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v15, v24);
            SFProgressContinuation.fail(with:)(v26, v24);
            (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
          }
        }
      }
    }
  }
  v27 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 176);
  v29 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A2A2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  double v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];

  v2 = sub_100008384(&qword_1007B7D20);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDrop.Progress(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v10 = type metadata accessor for Logger(0);
  sub_100221DF8(v10, (uint64_t)qword_1007B7C20);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v23 = v5;
    v24 = v3;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v28[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = COERCE_DOUBLE(SFAirDrop.Progress.percent.getter());
    v25 = a1;
    if ((v17 & 1) != 0)
    {
      v20 = 0x8000000100613EB0;
      v18 = 0xD000000000000015;
    }
    else
    {
      v18 = Double.description.getter(v16);
      v20 = v19;
    }
    v27 = sub_100228BD8(v18, v20, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v14 + 4);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Upload progress %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v3 = v24;
    a1 = v25;
    v5 = v23;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  }
  v21 = v26 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v26 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation, v28, 0, 0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v21, 1, v2);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21, v2);
    SFProgressContinuation.yield(_:)(a1, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_1002A2CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = sub_100008384(&qword_1007B7D20);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v8 = type metadata accessor for Logger(0);
  sub_100221DF8(v8, (uint64_t)qword_1007B7C20);
  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v22 = v7;
    v12 = swift_slowAlloc(12, -1);
    v21 = v2;
    v13 = (uint8_t *)v12;
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    swift_errorRetain(a1);
    v15 = _swift_stdlib_bridgeErrorToNSError(a1);
    v23 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 4);
    *v14 = v15;
    v7 = v22;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Send compression failed %@", v13, 0xCu);
    v16 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    v17 = v13;
    v2 = v21;
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v18 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation, &v23, 0, 0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v18, 1, v4);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
    SFProgressContinuation.fail(with:)(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_1002A318C()
{
  return type metadata accessor for SDAirDropSendConnection(0);
}

uint64_t type metadata accessor for SDAirDropSendConnection(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007B7CD0, (uint64_t)&nominal type descriptor for SDAirDropSendConnection);
}

void sub_1002A31A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[24];

  v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(319);
  if (v3 <= 0x3F)
  {
    v24[0] = *(_QWORD *)(v2 - 8) + 64;
    v24[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v24[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v24[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for SFAirDropSend.Request(319);
    if (v5 <= 0x3F)
    {
      v24[4] = *(_QWORD *)(v4 - 8) + 64;
      v24[5] = (char *)&value witness table for Builtin.Int32 + 64;
      v24[6] = "\b";
      sub_100260B1C(319, &qword_1007B7CE0, _s12HelloRequestVMa);
      if (v7 <= 0x3F)
      {
        v24[7] = *(_QWORD *)(v6 - 8) + 64;
        sub_1002A33E0(319, &qword_1007B7CE8, &qword_1007B7CF0);
        if (v9 <= 0x3F)
        {
          v24[8] = *(_QWORD *)(v8 - 8) + 64;
          v24[9] = "\b";
          sub_100260B1C(319, &qword_1007B7CF8, _s10AskRequestVMa);
          if (v11 <= 0x3F)
          {
            v24[10] = *(_QWORD *)(v10 - 8) + 64;
            v24[11] = "\b";
            sub_1002A33E0(319, &qword_1007B7D00, &qword_1007B7D08);
            if (v13 <= 0x3F)
            {
              v24[12] = *(_QWORD *)(v12 - 8) + 64;
              sub_100260B1C(319, &qword_1007B7D10, _s13UploadRequestVMa);
              if (v15 <= 0x3F)
              {
                v24[13] = *(_QWORD *)(v14 - 8) + 64;
                v24[14] = "\b";
                v24[15] = "\b";
                sub_1002A33E0(319, &qword_1007B7D18, &qword_1007B7D20);
                if (v17 <= 0x3F)
                {
                  v24[16] = *(_QWORD *)(v16 - 8) + 64;
                  v24[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
                  v24[18] = "\b";
                  v24[19] = "\b";
                  sub_1002A33E0(319, &qword_1007B7D28, (uint64_t *)&unk_1007B7D30);
                  if (v19 <= 0x3F)
                  {
                    v24[20] = *(_QWORD *)(v18 - 8) + 64;
                    v24[21] = "\b";
                    v20 = type metadata accessor for SDAirDropSendConnectionTelemetry(319);
                    if (v21 <= 0x3F)
                    {
                      v24[22] = *(_QWORD *)(v20 - 8) + 64;
                      v22 = type metadata accessor for SFNWInterfaceType(319);
                      if (v23 <= 0x3F)
                      {
                        v24[23] = *(_QWORD *)(v22 - 8) + 64;
                        swift_updateClassMetadata2(a1, 256, 24, v24, a1 + 80);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1002A33E0(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10021FF9C(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t type metadata accessor for SDAirDropSendConnectionTelemetry(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007B7D98, (uint64_t)&nominal type descriptor for SDAirDropSendConnectionTelemetry);
}

uint64_t *sub_1002A3440(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_100008384(&qword_1007C4330);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      v15 = sub_100008384(&qword_1007C4330);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = a3[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v9((uint64_t *)((char *)a2 + v16), 1, v7))
    {
      v19 = sub_100008384(&qword_1007C4330);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if (v9((uint64_t *)((char *)a2 + v20), 1, v7))
    {
      v23 = sub_100008384(&qword_1007C4330);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v21, v22, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
    }
    v24 = a3[8];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    if (v9((uint64_t *)((char *)a2 + v24), 1, v7))
    {
      v27 = sub_100008384(&qword_1007C4330);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v25, v26, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
    }
    v28 = a3[9];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    if (v9((uint64_t *)v30, 1, v7))
    {
      v31 = sub_100008384(&qword_1007C4330);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v29, v30, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1002A3754(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + a2[5];
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  v8 = a1 + a2[6];
  if (!v6(v8, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  v9 = a1 + a2[7];
  if (!v6(v9, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  v10 = a1 + a2[8];
  if (!v6(v10, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
  v11 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v11, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  return result;
}

char *sub_1002A38A8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100008384(&qword_1007C4330);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = sub_100008384(&qword_1007C4330);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v8(&a2[v14], 1, v6))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (v8(&a2[v18], 1, v6))
  {
    v21 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  }
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  if (v8(&a2[v22], 1, v6))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v24, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  }
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  if (v8(v28, 1, v6))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v27, v28, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
  }
  return a1;
}

char *sub_1002A3B90(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
LABEL_13:
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = v8(&a1[v18], 1, v6);
  v22 = v8(v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v20, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
LABEL_18:
    v23 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v19, v20, v6);
LABEL_19:
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v8(&a1[v24], 1, v6);
  v28 = v8(v26, 1, v6);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v25, v26, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v25, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v25, v6);
LABEL_24:
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v25, v26, v6);
LABEL_25:
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = v8(&a1[v30], 1, v6);
  v34 = v8(v32, 1, v6);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v31, v32, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v31, 0, 1, v6);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v31, v6);
LABEL_30:
    v35 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v31, v32, v6);
LABEL_31:
  v36 = a3[9];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = v8(&a1[v36], 1, v6);
  v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v37, v38, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    goto LABEL_36;
  }
  if (v40)
  {
LABEL_36:
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v37, v38, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v37, 0, 1, v6);
  return a1;
}

char *sub_1002A4018(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100008384(&qword_1007C4330);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = sub_100008384(&qword_1007C4330);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v8(&a2[v14], 1, v6))
  {
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (v8(&a2[v18], 1, v6))
  {
    v21 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  }
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  if (v8(&a2[v22], 1, v6))
  {
    v25 = sub_100008384(&qword_1007C4330);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v24, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  }
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  if (v8(v28, 1, v6))
  {
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v27, v28, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
  }
  return a1;
}

char *sub_1002A4300(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100008384(&qword_1007C4330);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
LABEL_12:
    v17 = sub_100008384(&qword_1007C4330);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
LABEL_13:
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = v8(&a1[v18], 1, v6);
  v22 = v8(v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
LABEL_18:
    v23 = sub_100008384(&qword_1007C4330);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v19, v20, v6);
LABEL_19:
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = v8(&a1[v24], 1, v6);
  v28 = v8(v26, 1, v6);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v25, v26, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v25, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v25, v6);
LABEL_24:
    v29 = sub_100008384(&qword_1007C4330);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v25, v26, v6);
LABEL_25:
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = v8(&a1[v30], 1, v6);
  v34 = v8(v32, 1, v6);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v31, v32, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v31, 0, 1, v6);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v31, v6);
LABEL_30:
    v35 = sub_100008384(&qword_1007C4330);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v31, v32, v6);
LABEL_31:
  v36 = a3[9];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = v8(&a1[v36], 1, v6);
  v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v37, v38, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    goto LABEL_36;
  }
  if (v40)
  {
LABEL_36:
    v41 = sub_100008384(&qword_1007C4330);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v37, v38, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v37, 0, 1, v6);
  return a1;
}

uint64_t sub_1002A4788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A4794);
}

uint64_t sub_1002A4794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007C4330);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1002A47D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A47E0);
}

uint64_t sub_1002A47E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007C4330);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1002A4824(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_100260B1C(319, (unint64_t *)&qword_1007BC3D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = v4[0];
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_1002A48A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  double v19;
  void (*v20)(char *, uint64_t);
  double v21;
  uint64_t v22;

  v1 = sub_100008384(&qword_1007C4330);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v22 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  sub_100221F28(v0, (uint64_t)v6, &qword_1007C4330);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v14(v6, 1, v7) == 1)
  {
    v15 = (uint64_t)v6;
LABEL_5:
    sub_10000D0F0(v15, &qword_1007C4330);
    return 0;
  }
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v13, v6, v7);
  v17 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  sub_100221F28(v0 + *(int *)(v17 + 20), (uint64_t)v4, &qword_1007C4330);
  if (v14(v4, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v15 = (uint64_t)v4;
    goto LABEL_5;
  }
  v16(v11, v4, v7);
  v19 = Date.timeIntervalSince(_:)(v13);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
  v21 = v19 * 1000.0;
  if ((~COERCE__INT64(v19 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v21 < 9.22337204e18)
    return (uint64_t)v21;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1002A4AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  double v19;
  void (*v20)(char *, uint64_t);
  double v21;
  uint64_t v22;

  v1 = sub_100008384(&qword_1007C4330);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v22 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  sub_100221F28(v0, (uint64_t)v6, &qword_1007C4330);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v14(v6, 1, v7) == 1)
  {
    v15 = (uint64_t)v6;
LABEL_5:
    sub_10000D0F0(v15, &qword_1007C4330);
    return 0;
  }
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v13, v6, v7);
  v17 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  sub_100221F28(v0 + *(int *)(v17 + 24), (uint64_t)v4, &qword_1007C4330);
  if (v14(v4, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v15 = (uint64_t)v4;
    goto LABEL_5;
  }
  v16(v11, v4, v7);
  v19 = Date.timeIntervalSince(_:)(v13);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
  v21 = v19 * 1000.0;
  if ((~COERCE__INT64(v19 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v21 < 9.22337204e18)
    return (uint64_t)v21;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1002A4D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t result;
  double v19;
  void (*v20)(char *, uint64_t);
  double v21;
  uint64_t v22;

  v1 = sub_100008384(&qword_1007C4330);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v22 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  v14 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  sub_100221F28(v0 + *(int *)(v14 + 28), (uint64_t)v6, &qword_1007C4330);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
  {
    v16 = (uint64_t)v6;
LABEL_5:
    sub_10000D0F0(v16, &qword_1007C4330);
    return 0;
  }
  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v13, v6, v7);
  sub_100221F28(v0 + *(int *)(v14 + 32), (uint64_t)v4, &qword_1007C4330);
  if (v15(v4, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v16 = (uint64_t)v4;
    goto LABEL_5;
  }
  v17(v11, v4, v7);
  v19 = Date.timeIntervalSince(_:)(v13);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
  v21 = v19 * 1000.0;
  if ((~COERCE__INT64(v19 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v21 < 9.22337204e18)
    return (uint64_t)v21;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1002A4F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t result;
  double v19;
  void (*v20)(char *, uint64_t);
  double v21;
  uint64_t v22;

  v1 = sub_100008384(&qword_1007C4330);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v22 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  v14 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  sub_100221F28(v0 + *(int *)(v14 + 28), (uint64_t)v6, &qword_1007C4330);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
  {
    v16 = (uint64_t)v6;
LABEL_5:
    sub_10000D0F0(v16, &qword_1007C4330);
    return 0;
  }
  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v13, v6, v7);
  sub_100221F28(v0 + *(int *)(v14 + 36), (uint64_t)v4, &qword_1007C4330);
  if (v15(v4, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    v16 = (uint64_t)v4;
    goto LABEL_5;
  }
  v17(v11, v4, v7);
  v19 = Date.timeIntervalSince(_:)(v13);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
  v21 = v19 * 1000.0;
  if ((~COERCE__INT64(v19 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v21 < 9.22337204e18)
    return (uint64_t)v21;
LABEL_12:
  __break(1u);
  return result;
}

void *sub_1002A5174()
{
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  Class v2;
  char v3;
  Class v4;
  char v5;
  Class v6;
  char v7;

  if (sub_1002A48A4() >= 1)
  {
    sub_1002A48A4();
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10046C228((uint64_t)isa, 0x6E65536F6C6C6568, (const char *)0xEB00000000534D74, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease((const char *)0x8000000000000000);
  }
  if (sub_1002A4AD4() >= 1)
  {
    sub_1002A4AD4();
    v2 = Int._bridgeToObjectiveC()().super.super.isa;
    v3 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10046C228((uint64_t)v2, 0x6E69466F6C6C6568, (const char *)0xEF534D6465687369, v3);
    swift_bridgeObjectRelease((const char *)0x8000000000000000);
  }
  if (sub_1002A4D04() >= 1)
  {
    sub_1002A4D04();
    v4 = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10046C228((uint64_t)v4, 0x4D746E65536B7361, (const char *)0xE900000000000053, v5);
    swift_bridgeObjectRelease((const char *)0x8000000000000000);
  }
  if (sub_1002A4F3C() >= 1)
  {
    sub_1002A4F3C();
    v6 = Int._bridgeToObjectiveC()().super.super.isa;
    v7 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10046C228((uint64_t)v6, 0x73696E69466B7361, (const char *)0xED0000534D646568, v7);
    swift_bridgeObjectRelease((const char *)0x8000000000000000);
  }
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_1002A533C()
{
  Swift::String v0;
  Swift::String v1;
  const char *object;
  Swift::String v3;
  Swift::String v4;
  const char *v5;
  Swift::String v6;
  Swift::String v7;
  const char *v8;
  Swift::String v9;
  Swift::String v10;
  const char *v11;
  Swift::String v12;

  _StringGuts.grow(_:)(107);
  v0._countAndFlagsBits = 0xD000000000000031;
  v0._object = (void *)0x8000000100613E00;
  String.append(_:)(v0);
  sub_1002A48A4();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = (const char *)v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0xD000000000000013;
  v3._object = (void *)0x8000000100613E40;
  String.append(_:)(v3);
  sub_1002A4AD4();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v5 = (const char *)v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = 0x746E65536B736120;
  v6._object = (void *)0xED0000202D20534DLL;
  String.append(_:)(v6);
  sub_1002A4D04();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v8 = (const char *)v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._object = (void *)0x8000000100613E60;
  v9._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v9);
  sub_1002A4F3C();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v11 = (const char *)v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t sub_1002A54FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v5 + 208) = a4;
  *(_QWORD *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 88) = v4;
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a2;
  v6 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFNWInterfaceType(0);
  *(_QWORD *)(v5 + 112) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 120) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v9);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v10 = static AirDropActor.shared;
  *(_QWORD *)(v5 + 144) = static AirDropActor.shared;
  return swift_task_switch(sub_1002A55CC, v10, 0);
}

uint64_t sub_1002A55CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  char *v9;
  uint64_t (**v10)();
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t EnumCaseMultiPayload;
  uint64_t (*v43)();
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  NSObject *log;
  uint64_t v57[2];

  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(void **)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 152) = sub_100221DF8(v4, (uint64_t)qword_1007B7C20);
  sub_10022E4A8(v1, v3);
  v5 = v2;
  sub_10022E4A8(v1, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(char **)(v0 + 88);
  v10 = off_1007B7000;
  v12 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  if (v8)
  {
    v55 = v7;
    log = v6;
    v13 = swift_slowAlloc(22, -1);
    v54 = swift_slowAlloc(64, -1);
    v57[0] = v54;
    *(_DWORD *)v13 = 136315394;
    sub_10022E4A8(v12, v11);
    v14 = Data.description.getter(v12, v11);
    v16 = v15;
    sub_100225AB4(v12, v11);
    *(_QWORD *)(v0 + 48) = sub_100228BD8(v14, v16, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 4);
    swift_bridgeObjectRelease(v16);
    sub_100225AB4(v12, v11);
    v17 = v12;
    v18 = (uint8_t *)v13;
    v19 = sub_100225AB4(v17, v11);
    *(_WORD *)(v13 + 12) = 2080;
    v20 = *(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection];
    if (v20)
    {
      v21 = *(_QWORD *)(v0 + 136);
      swift_retain(*(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection]);
      sub_1004FA6E0(v21);
      swift_release(v20);
    }
    else
    {
      v22 = Logger.logObject.getter(v19);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, (os_log_type_t)v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v23, "UPLOAD connection is not active", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }
      v25 = *(_QWORD *)(v0 + 136);
      v27 = *(_QWORD *)(v0 + 112);
      v26 = *(_QWORD *)(v0 + 120);

      (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for SFNWInterfaceType.other(_:), v27);
    }
    v28 = *(_QWORD *)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 120);
    v31 = *(void **)(v0 + 88);
    v32 = sub_100220D78(&qword_1007B7E38, (uint64_t (*)(uint64_t))&type metadata accessor for SFNWInterfaceType, (uint64_t)&protocol conformance descriptor for SFNWInterfaceType);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v29, v32);
    v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    *(_QWORD *)(v0 + 56) = sub_100228BD8(v33, v35, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 14);
    swift_bridgeObjectRelease(v35);

    _os_log_impl((void *)&_mh_execute_header, log, v55, "Sending compressed data %s on interface %s", v18, 0x16u);
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v10 = off_1007B7000;
  }
  else
  {
    sub_100225AB4(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    sub_100225AB4(v12, v11);

  }
  v36 = *(_QWORD *)(v0 + 88);
  v37 = v10[398];
  *(_QWORD *)(v0 + 160) = v37;
  v38 = *(_QWORD *)((char *)v37 + v36);
  *(_QWORD *)(v0 + 168) = v38;
  if (v38
    && (v39 = *(_QWORD *)(v36 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContext),
        (*(_QWORD *)(v0 + 176) = v39) != 0))
  {
    v41 = *(_QWORD *)(v0 + 96);
    v40 = *(_QWORD *)(v0 + 104);
    sub_100244384(v36 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint, v40, type metadata accessor for SDAirDropDiscoveredEndpoint);
    EnumCaseMultiPayload = (int)swift_getEnumCaseMultiPayload(v40, v41);
    v43 = off_1007203A0[EnumCaseMultiPayload];
    v44 = *(_QWORD *)((char *)&unk_1005D0B90 + EnumCaseMultiPayload * 8);
    v45 = *(_QWORD *)(v0 + 104);
    swift_retain(v38);
    swift_unknownObjectRetain(v39);
    sub_1002443C8(v45, (uint64_t (*)(_QWORD))v43);
    v46 = (_QWORD *)swift_task_alloc(dword_1007C488C);
    *(_QWORD *)(v0 + 184) = v46;
    *v46 = v0;
    v46[1] = sub_1002A5AD0;
    return sub_1004FFE18(v39, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v44, *(_BYTE *)(v0 + 208));
  }
  else
  {
    v48 = type metadata accessor for SFAirDropSend.Failure(0);
    v49 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v48, v49, 0, 0);
    v51 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, enum case for SFAirDropSend.Failure.cancelled(_:), v48);
    swift_willThrow(v51);
    v52 = *(_QWORD *)(v0 + 128);
    v53 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002A5AD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002A5DFC;
  else
    v4 = sub_1002A5B34;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), 0);
}

uint64_t sub_1002A5B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 128);
    swift_retain(*(_QWORD *)(*(_QWORD *)(v1 + 88) + v2));
    sub_1004FA6E0(v4);
    swift_release(v3);
  }
  else
  {
    v5 = Logger.logObject.getter(a1);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "UPLOAD connection is not active", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v9 = *(_QWORD *)(v1 + 120);
    v8 = *(_QWORD *)(v1 + 128);
    v10 = *(_QWORD *)(v1 + 112);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v8, enum case for SFNWInterfaceType.other(_:), v10);
  }
  v12 = *(_QWORD *)(v1 + 120);
  v11 = *(_QWORD *)(v1 + 128);
  v13 = *(_QWORD *)(v1 + 112);
  v14 = *(_BYTE *)(v1 + 208);
  v15 = *(_QWORD *)(v1 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_lastActiveInterfaceType;
  swift_beginAccess(v15, v1 + 16, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v15, v11, v13);
  v16 = swift_endAccess(v1 + 16);
  if ((v14 & 1) != 0)
  {
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = *(_QWORD *)(v1 + 80);
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v20 = 134217984;
      *(_QWORD *)(v1 + 40) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v20 + 4);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Total bytes read %ld", v20, 0xCu);
      swift_slowDealloc(v20, -1, -1);
    }

    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Finished sending UPLOAD", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = (_QWORD *)swift_task_alloc(dword_1007B7E34);
    *(_QWORD *)(v1 + 200) = v25;
    *v25 = v1;
    v25[1] = sub_1002A5E5C;
    return sub_1002A0434();
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 168);
    swift_unknownObjectRelease(*(_QWORD *)(v1 + 176));
    swift_release(v27);
    v28 = *(_QWORD *)(v1 + 128);
    v29 = *(_QWORD *)(v1 + 104);
    swift_task_dealloc(*(_QWORD *)(v1 + 136));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1002A5DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A5E5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_task_switch(sub_1002A5EB4, v1, 0);
}

uint64_t sub_1002A5EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A5F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v4[12] = v5;
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SDAirDropMessage(0);
  v4[14] = v6;
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007B7E08);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s13UploadRequestVMa(0);
  v4[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[18] = v9;
  v4[19] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B7E48);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B7DF8);
  v4[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s10AskRequestVMa(0);
  v4[22] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[23] = v13;
  v4[24] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v14 = static AirDropActor.shared;
  v4[25] = static AirDropActor.shared;
  return swift_task_switch(sub_1002A6080, v14, 0);
}

uint64_t sub_1002A6080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t EnumCaseMultiPayload;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
  *(_QWORD *)(v0 + 208) = v2;
  if (!v2)
    goto LABEL_4;
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest, v0 + 16, 0, 0);
  sub_100221F28(v6, v5, &qword_1007B7DF8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_10000D0F0(*(_QWORD *)(v0 + 168), &qword_1007B7DF8);
LABEL_4:
    v7 = type metadata accessor for SFAirDropSend.Failure(0);
    v8 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v7, v8, 0, 0);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for SFAirDropSend.Failure.badRequest(_:), v7);
    swift_willThrow(v10);
    v12 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v55 = v0 + 40;
  v18 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 160);
  sub_100221DB4(*(_QWORD *)(v0 + 168), v18, _s10AskRequestVMa);
  sub_100221F28(v18 + *(int *)(v19 + 20), v20, &qword_1007B7E48);
  v21 = type metadata accessor for SFAirDrop.TransferType(0);
  v22 = *(_QWORD *)(v21 - 8);
  LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  v23 = swift_retain(v2);
  v24 = *(_QWORD *)(v0 + 160);
  if ((_DWORD)v20 == 1)
  {
    sub_10000D0F0(*(_QWORD *)(v0 + 160), &qword_1007B7E48);
LABEL_9:
    sub_1004BF048();
    v51 = v26;
    v49 = v27;
    v50 = sub_1004C3B20();
    v48 = v28;
    goto LABEL_10;
  }
  v25 = SFAirDrop.TransferType.isOnlyExchange.getter(v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) == 0)
    goto LABEL_9;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
LABEL_10:
  v29 = *(_QWORD *)(v0 + 152);
  v47 = *(_QWORD *)(v0 + 144);
  v31 = *(_QWORD *)(v0 + 128);
  v30 = *(int **)(v0 + 136);
  v32 = *(_QWORD *)(v0 + 120);
  v52 = *(_QWORD *)(v0 + 112);
  v53 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 88);
  v54 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = *(_QWORD *)(v0 + 80);
  v36 = *(_QWORD *)(v0 + 64);
  sub_100221F28(*(_QWORD *)(v0 + 192), v29, (uint64_t *)&unk_1007B7E50);
  *(_QWORD *)(v29 + v30[5]) = v36;
  v37 = (_QWORD *)(v29 + v30[6]);
  *v37 = v34;
  v37[1] = v35;
  *(_OWORD *)(v29 + v30[7]) = xmmword_1005CF260;
  *(_BYTE *)(v29 + v30[8]) = 0;
  v38 = (_QWORD *)(v29 + v30[9]);
  *v38 = v51;
  v38[1] = v49;
  v39 = (uint64_t *)(v29 + v30[10]);
  *v39 = v50;
  v39[1] = v48;
  sub_100244384(v29, v31, _s13UploadRequestVMa);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56))(v31, 0, 1, v30);
  v40 = v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadRequest;
  swift_beginAccess(v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadRequest, v55, 33, 0);
  swift_bridgeObjectRetain(v35);
  sub_10023A084(v31, v40, &qword_1007B7E08);
  swift_endAccess(v55);
  sub_100244384(v29, v32, _s13UploadRequestVMa);
  swift_storeEnumTagMultiPayload(v32, v52, 6);
  sub_10052C154();
  v42 = v41;
  *(_QWORD *)(v0 + 216) = v41;
  sub_1002443C8(v32, type metadata accessor for SDAirDropMessage);
  v43 = *(_QWORD *)(v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContext);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContext) = v42;
  swift_unknownObjectRetain(v42);
  swift_unknownObjectRelease(v43);
  sub_100244384(v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint, v53, type metadata accessor for SDAirDropDiscoveredEndpoint);
  EnumCaseMultiPayload = (int)swift_getEnumCaseMultiPayload(v53, v54);
  v45 = *(_QWORD *)((char *)&unk_1005D0BB0 + EnumCaseMultiPayload * 8);
  sub_1002443C8(*(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))off_1007203C0[EnumCaseMultiPayload]);
  v46 = (_QWORD *)swift_task_alloc(dword_1007C488C);
  *(_QWORD *)(v0 + 224) = v46;
  *v46 = v0;
  v46[1] = sub_1002A64E8;
  return sub_1004FFE18(v42, 0, 0xC000000000000000, v45, 0);
}

uint64_t sub_1002A64E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002A66C8;
  else
    v4 = sub_1002A654C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 200), 0);
}

uint64_t sub_1002A654C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_1007B3D80 != -1)
    swift_once(&qword_1007B3D80, sub_100299F58);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007B7C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sent Initial UPLOAD Request", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 104);

  swift_unknownObjectRelease(v6);
  swift_release(v7);
  sub_1002443C8(v11, _s13UploadRequestVMa);
  sub_1002443C8(v8, _s10AskRequestVMa);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A66C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 216));
  swift_release(v1);
  sub_1002443C8(v3, _s13UploadRequestVMa);
  sub_1002443C8(v2, _s10AskRequestVMa);
  v5 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A678C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v1 = (int *)_s15ExchangeRequestVMa(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  v8 = v0 + v4 + v1[7];
  v9 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = (uint64_t *)(v6 + v1[8]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_100225AB4(*v11, v12);
  v13 = (_QWORD *)(v6 + v1[9]);
  if (v13[9])
  {
    swift_bridgeObjectRelease(v13[1]);
    v14 = v13[3];
    if (v14 >> 60 != 15)
      sub_100225AB4(v13[2], v14);
    sub_100225AB4(v13[4], v13[5]);
    sub_100225AB4(v13[6], v13[7]);
    swift_bridgeObjectRelease(v13[9]);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002A68E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(_s15ExchangeRequestVMa(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1007B7E6C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10029DFF0(a1, v5, v6);
}

uint64_t sub_1002A695C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = (int *)_s15ExchangeRequestVMa(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  v8 = v0 + v4 + v1[7];
  v9 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = (uint64_t *)(v6 + v1[8]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_100225AB4(*v11, v12);
  v13 = (_QWORD *)(v6 + v1[9]);
  if (v13[9])
  {
    swift_bridgeObjectRelease(v13[1]);
    v14 = v13[3];
    if (v14 >> 60 != 15)
      sub_100225AB4(v13[2], v14);
    sub_100225AB4(v13[4], v13[5]);
    sub_100225AB4(v13[6], v13[7]);
    swift_bridgeObjectRelease(v13[9]);
  }
  v15 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = v15 + 8;
  swift_release(*(_QWORD *)(v0 + v15));
  return swift_deallocObject(v0, v16, v3 | 7);
}

uint64_t sub_1002A6ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(_s15ExchangeRequestVMa(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7E84);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_10029E358(a1, v6, v7, v8);
}

uint64_t sub_1002A6B64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A6B88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B7E94);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return sub_10029E994(a1, v4);
}

uint64_t sub_1002A6BE0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A6C04()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A6C28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A6C54(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A0D94(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002A6C5C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NWConnection.State(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002A6CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWConnection.State(0) - 8) + 80);
  v3 = v0 + ((v2 + 48) & ~v2);
  v4 = swift_task_alloc(dword_1007B7EAC);
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10000D12C;
  *(_QWORD *)(v4 + 80) = v3;
  *(_OWORD *)(v4 + 64) = v5;
  return swift_task_switch(sub_1002A0FA0, 0, 0);
}

id sub_1002A6D60(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  int *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v43;
  objc_class *ObjectType;
  objc_super v45;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v6);
  *(_DWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_receiverFeatureFlags] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection] = 0;
  v12 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloRequest];
  v13 = _s12HelloRequestVMa(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation];
  v15 = sub_100008384(&qword_1007B7CF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection] = 0;
  v16 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest];
  v17 = _s10AskRequestVMa(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection] = 0;
  v18 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation];
  v19 = sub_100008384(&qword_1007B7D08);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadRequest];
  v21 = _s13UploadRequestVMa(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContext] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection] = 0;
  v22 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation];
  v23 = sub_100008384(&qword_1007B7D20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection] = 0;
  v24 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation];
  v25 = sub_100008384((uint64_t *)&unk_1007B7D30);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection] = 0;
  v26 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_lastActiveInterfaceType];
  v27 = enum case for SFNWInterfaceType.awdl(_:);
  v28 = type metadata accessor for SFNWInterfaceType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
  v29 = v6;
  v43 = a1;
  sub_1004FB050();
  sub_100244384(a1, (uint64_t)&v29[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint], type metadata accessor for SDAirDropDiscoveredEndpoint);
  *(_QWORD *)&v29[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_queue] = a4;
  *(_QWORD *)&v29[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_deviceStatus] = a2;
  v30 = a3;
  *(_QWORD *)&v29[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_pseudonymService] = a3;
  v31 = &v29[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendRequest];
  v32 = type metadata accessor for SFAirDropSend.Request(0);
  v33 = *(_QWORD *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, a5, v32);
  v34 = &v29[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry];
  v35 = type metadata accessor for Date(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v36(v34, 1, 1, v35);
  v37 = (int *)type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  v36(&v34[v37[5]], 1, 1, v35);
  v36(&v34[v37[6]], 1, 1, v35);
  v36(&v34[v37[7]], 1, 1, v35);
  v36(&v34[v37[8]], 1, 1, v35);
  v36(&v34[v37[9]], 1, 1, v35);
  v38 = a4;
  v39 = a2;
  swift_retain(v30);

  v45.receiver = v29;
  v45.super_class = ObjectType;
  v40 = objc_msgSendSuper2(&v45, "init");
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a5, v32);
  sub_1002443C8(v43, type metadata accessor for SDAirDropDiscoveredEndpoint);
  return v40;
}

uint64_t sub_1002A7174(NSObject *a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __SecTrust *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t result;
  _BYTE v25[12];
  int v26;
  uint64_t v27;

  v5 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  __chkstk_darwin(v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  __chkstk_darwin(v8);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100244384(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint, (uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
  {
    sub_100221DB4((uint64_t)v7, (uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    v11 = (uint64_t *)&v10[*(int *)(v8 + 40)];
    v12 = v11[1];
    if (v12)
    {
      v13 = *v11;
      swift_bridgeObjectRetain(v12);
      v14 = sec_trust_copy_ref(a1);
      v15 = sub_10038E348(v13, v12, v14);

      swift_bridgeObjectRelease(v12);
      if (qword_1007B3D80 != -1)
        swift_once(&qword_1007B3D80, sub_100299F58);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_100221DF8(v16, (uint64_t)qword_1007B7C20);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_13;
      v20 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 67109120;
      v26 = v15 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v20 + 4);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Validated appleID and secTrust - receiver trusted: %{BOOL}d", v20, 8u);
    }
    else
    {
      if (qword_1007B3D80 != -1)
        swift_once(&qword_1007B3D80, sub_100299F58);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_100221DF8(v21, (uint64_t)qword_1007B7C20);
      v18 = Logger.logObject.getter(v22);
      v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v18, v23))
      {
        v15 = 1;
        goto LABEL_13;
      }
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v23, "No appleID for receiver present - handling as unknown receiver", v20, 2u);
      v15 = 1;
    }
    swift_slowDealloc(v20, -1, -1);
LABEL_13:

    a2(v15 & 1);
    return sub_1002443C8((uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  }
  sub_1002443C8((uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x8000000100613F00, "DaemoniOSLibrary/SDAirDropSendConnection.swift", 46, 2, 456, 0);
  __break(1u);
  return result;
}

void sub_1002A74CC(uint64_t a1, NSObject *a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;

  sub_1002A0C98(a1, a2, a3, a4, v4);
}

uint64_t sub_1002A74D4(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_1002A0D0C(a1, a2, a3, v3);
}

uint64_t sub_1002A74DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002A7508(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007B7ED4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1002A0210(a1, v4, v5, v6);
}

uint64_t sub_1002A7574()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A75A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1007B7EEC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000D098;
  return sub_10029D4B4(a1, v5, v4);
}

unint64_t sub_1002A7600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B7F00;
  if (!qword_1007B7F00)
  {
    v1 = sub_10021FF9C((uint64_t *)&unk_1007B6820);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1007B7F00);
  }
  return result;
}

uint64_t sub_1002A764C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = _s12ErrorRequestVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  v7 = v0 + v4;
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 20);
  v10 = type metadata accessor for CodableError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002A76F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(_s12ErrorRequestVMa(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1007B7F14);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10029F154(a1, v5, v6);
}

uint64_t sub_1002A7770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = _s12ErrorRequestVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  v7 = v0 + v4;
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 20);
  v10 = type metadata accessor for CodableError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1002A782C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(_s12ErrorRequestVMa(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7F24);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_10029F524(a1, v6, v7, v8);
}

uint64_t sub_1002A78C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B7F34);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return sub_10029F8C0(a1, v4);
}

uint64_t sub_1002A791C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(_s12HelloRequestVMa(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1002A7994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(_s12HelloRequestVMa(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1007B7F4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_10029A36C(a1, v5, v6);
}

uint64_t sub_1002A7A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(_s12HelloRequestVMa(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_release(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1002A7AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(_s12HelloRequestVMa(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7F5C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_10029AB3C(a1, v6, v7, v8);
}

uint64_t sub_1002A7B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B7F6C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return sub_10029B300(a1, v4);
}

uint64_t sub_1002A7B94()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;

  v1 = (int *)_s10AskRequestVMa(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v4, v7);
  v9 = v6 + v1[5];
  v10 = type metadata accessor for SFAirDrop.TransferType(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = (uint64_t *)(v6 + v1[6]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_100225AB4(*v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  v14 = (uint64_t *)(v6 + v1[14]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_100225AB4(*v14, v15);
  v16 = (uint64_t *)(v6 + v1[15]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_100225AB4(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[17]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_100225AB4(*v18, v19);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002A7D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(_s10AskRequestVMa(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1007B7F84);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_10029BB4C(a1, v5, v6);
}

uint64_t sub_1002A7DE0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v1 = (int *)_s10AskRequestVMa(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v4, v7);
  v9 = v6 + v1[5];
  v10 = type metadata accessor for SFAirDrop.TransferType(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = (uint64_t *)(v6 + v1[6]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_100225AB4(*v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  v14 = (uint64_t *)(v6 + v1[14]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_100225AB4(*v14, v15);
  v16 = (uint64_t *)(v6 + v1[15]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_100225AB4(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[17]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_100225AB4(*v18, v19);
  v20 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 8;
  swift_release(*(_QWORD *)(v0 + v20));
  return swift_deallocObject(v0, v21, v3 | 7);
}

uint64_t sub_1002A7FCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(_s10AskRequestVMa(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc(dword_1007B7F94);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_10029C004(a1, v6, v7, v8);
}

uint64_t sub_1002A8064(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1007B7FA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000D098;
  return sub_10029CB68(a1, v4);
}

_QWORD *sub_1002A80BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[1];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  sub_100225AA0(v6, v7);
  return a1;
}

uint64_t sub_1002A8154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  NSString v9;
  int Boolean;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  const char *v20;
  double v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  void *v31;
  char v32;
  const char *v33;
  const char *v34;
  const char *v35;
  double v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  unint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for NWTXTRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("flags"));
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  Boolean = GestaltGetBoolean(v9, 0, 0);

  if (Boolean)
    v12 = 2043;
  else
    v12 = 1019;
  type metadata accessor for SFAirDropUserDefaults(0, v11);
  v13 = (void *)static SFAirDropUserDefaults.shared.getter();
  v14 = SFAirDropUserDefaults.helloFeatureFlagsEnabled.getter();

  v15 = 12288;
  if ((v14 & 1) != 0)
    v15 = 12292;
  v42 = v15 | v12;
  v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  v18 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v41 = &_swiftEmptyDictionarySingleton;
  v42 = 0x8000000000000000;
  sub_10046C234(v16, v18, v6, v8, isUniquelyReferenced_nonNull_native);
  v20 = (const char *)v42;
  v42 = (unint64_t)v41;
  *(_QWORD *)&v21 = swift_bridgeObjectRelease(v8).n128_u64[0];
  if (!objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary29SDAirDropDeviceSupportManager_deviceStatus), "enableStrangers", swift_bridgeObjectRelease(v20, v21).n128_f64[0])|| (sub_10038E610() & 1) == 0|| (v22 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary29SDAirDropDeviceSupportManager_nearbyAgent), "bleAuthTag")) == 0)
  {
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("atag"));
    v30 = v34;
    goto LABEL_12;
  }
  v23 = v22;
  v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v26 = v25;

  v27 = Data.base64EncodedString(options:)(0);
  sub_100225AB4(v24, v26);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("atag"));
  v30 = v29;
  if (!v27._object)
  {
LABEL_12:
    sub_10026A5A4(v28, (uint64_t)v30);
    v33 = v35;
    goto LABEL_13;
  }
  v31 = (void *)v42;
  v32 = swift_isUniquelyReferenced_nonNull_native(v42);
  v41 = v31;
  v42 = 0x8000000000000000;
  sub_10046C234(v27._countAndFlagsBits, (uint64_t)v27._object, v28, v30, v32);
  v33 = (const char *)v42;
  v42 = (unint64_t)v41;
LABEL_13:
  *(_QWORD *)&v36 = swift_bridgeObjectRelease(v30).n128_u64[0];
  v37 = swift_bridgeObjectRelease(v33, v36);
  v38 = NWTXTRecord.init(_:)(v42, v37);
  v39 = NWTXTRecord.data.getter(v38);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v39;
}

uint64_t type metadata accessor for SDAirDropDeviceSupportManager()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary29SDAirDropDeviceSupportManager);
}

uint64_t sub_1002A84A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B7FF8);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B7FF8);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1002A8534(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;

  if (qword_1007B3D88 != -1)
    swift_once(&qword_1007B3D88, sub_1002A84A4);
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007B7FF8);
  v4 = swift_retain_n(a2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    CurrentValueSubject.value.getter(v8);
    v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    v10 = type metadata accessor for SFAirDropSend.Transfer(0);
    v11 = sub_100220D78(&qword_1007B6590, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v12 = Dictionary.description.getter(v15, v9, v10, v11);
    v14 = v13;
    swift_bridgeObjectRelease(v15);
    v15 = (const char *)sub_100228BD8(v12, (unint64_t)v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Send transfers: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
}

__n128 sub_1002A8744()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v20;

  v1 = v0;
  v2 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D88 != -1)
    swift_once(&qword_1007B3D88, sub_1002A84A4);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100221DF8(v5, (uint64_t)qword_1007B7FF8);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropSendService start", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = v1[14];
  v11 = v1[15];
  sub_10023A834(v1 + 11, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = qword_1007B3D98;
  swift_retain(v1);
  if (v13 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v14 = static AirDropActor.shared;
  v15 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v16 = (_QWORD *)swift_allocObject(&unk_100720438, 40, 7);
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v1;
  swift_retain(v14);
  v17 = sub_100252AF4((uint64_t)v4, (uint64_t)&unk_1007B8100, (uint64_t)v16);
  swift_release(v17);
  sub_100502CB0(0);
  v18 = (const char *)v1[8];
  v1[8] = &_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_1002A8958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = type metadata accessor for SFAirDropSend.Request(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[14] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v7);
  v3[16] = swift_task_alloc(v7);
  v8 = sub_100008384(&qword_1007B68A0);
  v3[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384(&qword_1007B6738);
  v3[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[19] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v3[20] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v12);
  v3[22] = swift_task_alloc(v12);
  v3[23] = swift_task_alloc(v12);
  v13 = type metadata accessor for SFAirDrop.TransferType(0);
  v3[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v15);
  v3[27] = swift_task_alloc(v15);
  v16 = type metadata accessor for SFAirDropClient.Identifier(0);
  v3[28] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[29] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v18);
  v3[31] = swift_task_alloc(v18);
  v19 = type metadata accessor for UUID(0);
  v3[32] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[33] = v20;
  v3[34] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v21 = static AirDropActor.shared;
  v3[35] = static AirDropActor.shared;
  return swift_task_switch(sub_1002A8B0C, v21, 0);
}

uint64_t sub_1002A8B0C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1[36] = *(_QWORD *)(v1[11] + 72);
  SFAirDropSend.Request.endpointID.getter(a1);
  v2 = (_QWORD *)swift_task_alloc(dword_1007BDAB4);
  v1[37] = v2;
  *v2 = v1;
  v2[1] = sub_1002A8B70;
  return sub_100395A44(v1[34]);
}

uint64_t sub_1002A8B70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  v4 = *(_QWORD *)(*v1 + 272);
  v5 = *(_QWORD *)(*v1 + 280);
  v6 = *(_QWORD *)(*v1 + 256);
  v7 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 304) = a1;
  swift_task_dealloc(v3);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v2 + 312) = v8;
  v8(v4, v6);
  return swift_task_switch(sub_1002A8BF8, v5, 0);
}

uint64_t sub_1002A8BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t Strong;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  double v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[3];

  v1 = *(_QWORD *)(v0 + 304);
  if (*(_QWORD *)(v1 + 16))
  {
    if (qword_1007B3D88 != -1)
    {
      swift_once(&qword_1007B3D88, sub_1002A84A4);
      v1 = *(_QWORD *)(v0 + 304);
    }
    v2 = type metadata accessor for Logger(0);
    sub_100221DF8(v2, (uint64_t)qword_1007B7FF8);
    v3 = swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(const char **)(v0 + 304);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v115[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
      v11 = sub_100220D78(&qword_1007B5490, type metadata accessor for SDAirDropDiscoveredEndpoint, (uint64_t)&unk_1005D1058);
      swift_bridgeObjectRetain(v7);
      v13 = Set.description.getter(v12, v10, v11);
      v15 = v14;
      swift_bridgeObjectRelease(v7);
      *(_QWORD *)(v0 + 56) = sub_100228BD8(v13, (unint64_t)v15, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting send to %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 304), 2);
    }

    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 88) + 40, v32);
    v34 = *(_QWORD *)(v0 + 248);
    if (Strong)
    {
      v35 = Strong;
      v37 = *(_QWORD *)(v0 + 232);
      v36 = *(_QWORD *)(v0 + 240);
      v38 = *(_QWORD *)(v0 + 224);
      sub_10036B0C0(v36);
      swift_unknownObjectRelease(v35);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v34, v36, v38);
    }
    else
    {
      v39 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 104))(*(_QWORD *)(v0 + 248), enum case for SFAirDropClient.Identifier.daemon(_:), *(_QWORD *)(v0 + 224));
    }
    v41 = *(_QWORD *)(v0 + 208);
    v40 = *(_QWORD *)(v0 + 216);
    v42 = *(_QWORD *)(v0 + 192);
    v43 = *(_QWORD *)(v0 + 200);
    SFAirDropSend.Request.type.getter(v39);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v41, enum case for SFAirDrop.TransferType.peerPayment(_:), v42);
    v44 = static SFAirDrop.TransferType.== infix(_:_:)(v40, v41);
    v45 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v45(v41, v42);
    v46 = ((uint64_t (*)(uint64_t, uint64_t))v45)(v40, v42);
    if ((v44 & 1) != 0)
    {
      v47 = *(_QWORD *)(v0 + 248);
      v48 = *(_QWORD *)(v0 + 224);
      v49 = *(_QWORD *)(v0 + 232);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
      v46 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v47, enum case for SFAirDropClient.Identifier.wallet(_:), v48);
    }
    v50 = *(const char **)(v0 + 304);
    v83 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 312);
    v51 = *(_QWORD *)(v0 + 272);
    v52 = *(_QWORD *)(v0 + 248);
    v53 = *(_QWORD *)(v0 + 256);
    v93 = v52;
    v94 = *(_QWORD *)(v0 + 232);
    v95 = *(_QWORD *)(v0 + 224);
    v96 = *(_QWORD *)(v0 + 240);
    v97 = *(_QWORD *)(v0 + 216);
    v98 = *(_QWORD *)(v0 + 208);
    v107 = *(_QWORD *)(v0 + 176);
    v110 = *(_QWORD *)(v0 + 184);
    v88 = *(_QWORD *)(v0 + 168);
    v91 = *(_QWORD *)(v0 + 160);
    v85 = *(_QWORD *)(v0 + 144);
    v86 = *(_QWORD *)(v0 + 152);
    v113 = *(_QWORD *)(v0 + 136);
    v89 = *(_QWORD *)(v0 + 128);
    v101 = *(_QWORD *)(v0 + 120);
    v92 = *(_QWORD *)(v0 + 112);
    v104 = *(_QWORD *)(v0 + 104);
    v87 = *(_QWORD *)(v0 + 96);
    v90 = *(_QWORD *)(v0 + 88);
    v54 = *(_QWORD *)(v0 + 80);
    v84 = *(_QWORD *)(v0 + 72);
    SFAirDropSend.Request.endpointID.getter(v46);
    sub_100395E44(v51, v0 + 16);
    v55 = v83(v51, v53);
    v56 = SFAirDropSend.Request.requestSource.getter(v55);
    v58 = v57;
    sub_100424D34(v54, v50, v0 + 16, v56, v57, v52, v110);
    *(_QWORD *)&v59 = swift_bridgeObjectRelease(v50).n128_u64[0];
    v60 = swift_bridgeObjectRelease(v58, v59);
    SFProgressTask.split()(v84, v107, v85, v60);
    v61 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v113, 1, 1, v61);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v88, v107, v85);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v89, v54, v87);
    v62 = *(unsigned __int8 *)(v86 + 80);
    v63 = (v62 + 16) & ~v62;
    v64 = (v91 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = *(unsigned __int8 *)(v104 + 80);
    v66 = (v65 + v64 + 8) & ~v65;
    v67 = swift_allocObject(&unk_100720488, v66 + v92, v62 | v65 | 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 32))(v67 + v63, v88, v85);
    *(_QWORD *)(v67 + v64) = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v67 + v66, v89, v87);
    swift_retain(v90);
    v68 = static Task<>.noThrow(priority:operation:)(v113, &unk_1007B8148, v67, (char *)&type metadata for () + 8);
    swift_release(v67);
    swift_release(v68);
    sub_10000D0F0(v113, &qword_1007B68A0);
    v69 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
    v69(v107, v85);
    v69(v110, v85);
    sub_10000D0F0(v0 + 16, &qword_1007B8150);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
    swift_task_dealloc(v51);
    swift_task_dealloc(v93);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v110);
    swift_task_dealloc(v107);
    swift_task_dealloc(v88);
    swift_task_dealloc(v113);
    swift_task_dealloc(v89);
    swift_task_dealloc(v101);
    v70 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_bridgeObjectRelease(*(const char **)(v0 + 304));
    if (qword_1007B3D88 != -1)
      swift_once(&qword_1007B3D88, sub_1002A84A4);
    v16 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 80);
    v20 = type metadata accessor for Logger(0);
    sub_100221DF8(v20, (uint64_t)qword_1007B7FF8);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v19, v17);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = *(_QWORD *)(v0 + 272);
      v25 = *(_QWORD *)(v0 + 256);
      v100 = *(_QWORD *)(v0 + 120);
      v103 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
      v106 = *(_QWORD *)(v0 + 104);
      v112 = *(_QWORD *)(v0 + 96);
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      v115[0] = v109;
      *(_DWORD *)v26 = 136315138;
      SFAirDropSend.Request.endpointID.getter(v109);
      v27 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v25, v27);
      v30 = v29;
      v103(v24, v25);
      *(_QWORD *)(v0 + 64) = sub_100228BD8(v28, (unint64_t)v30, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v26 + 4);
      v31 = swift_bridgeObjectRelease(v30);
      (*(void (**)(uint64_t, uint64_t, __n128))(v106 + 8))(v100, v112, v31);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No resolved endpoints from initial endpoint: %s", v26, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
    }

    v71 = *(_QWORD *)(v0 + 272);
    v72 = *(_QWORD *)(v0 + 240);
    v73 = *(_QWORD *)(v0 + 248);
    v75 = *(_QWORD *)(v0 + 208);
    v74 = *(_QWORD *)(v0 + 216);
    v99 = *(_QWORD *)(v0 + 184);
    v102 = *(_QWORD *)(v0 + 176);
    v105 = *(_QWORD *)(v0 + 168);
    v108 = *(_QWORD *)(v0 + 136);
    v111 = *(_QWORD *)(v0 + 128);
    v114 = *(_QWORD *)(v0 + 120);
    v76 = type metadata accessor for SFAirDropSend.Failure(0);
    v77 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v78 = swift_allocError(v76, v77, 0, 0);
    v80 = v79;
    SFAirDropSend.Request.endpointID.getter(v78);
    v81 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v76 - 8) + 104))(v80, enum case for SFAirDropSend.Failure.missingEndpoint(_:), v76);
    swift_willThrow(v81);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v99);
    swift_task_dealloc(v102);
    swift_task_dealloc(v105);
    swift_task_dealloc(v108);
    swift_task_dealloc(v111);
    swift_task_dealloc(v114);
    v70 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v70();
}

uint64_t sub_1002A951C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4[21] = a3;
  v4[22] = a4;
  v4[20] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[24] = v6;
  v4[25] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v4[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[27] = v8;
  v4[28] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v4[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[30] = v10;
  v4[31] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B8158);
  v4[32] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[33] = v12;
  v4[34] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100008384(&qword_1007B8130) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[35] = swift_task_alloc(v13);
  v4[36] = swift_task_alloc(v13);
  v4[37] = swift_task_alloc(v13);
  v4[38] = swift_task_alloc(v13);
  v14 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v4[39] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[40] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[41] = swift_task_alloc(v16);
  v4[42] = swift_task_alloc(v16);
  v4[43] = swift_task_alloc(v16);
  v4[44] = swift_task_alloc(v16);
  v4[45] = swift_task_alloc(v16);
  v4[46] = swift_task_alloc(v16);
  v4[47] = swift_task_alloc(v16);
  v17 = type metadata accessor for SFAirDropSend.Transfer(0);
  v4[48] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[49] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[50] = swift_task_alloc(v19);
  v4[51] = swift_task_alloc(v19);
  v4[52] = swift_task_alloc(v19);
  v4[53] = swift_task_alloc(v19);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v20 = static AirDropActor.shared;
  v4[54] = static AirDropActor.shared;
  return swift_task_switch(sub_1002A9740, v20, 0);
}

uint64_t sub_1002A9740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  void (*v21)(uint64_t, uint64_t, __n128);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v0[55] = sub_100008384(&qword_1007B6738);
  v1 = SFProgressTask.initialValue.getter();
  SFAirDropSend.Transfer.id.getter(v1);
  if (qword_1007B3D88 != -1)
    swift_once(&qword_1007B3D88, sub_1002A84A4);
  v3 = v0[46];
  v2 = v0[47];
  v4 = v0[39];
  v5 = v0[40];
  v6 = type metadata accessor for Logger(0);
  v0[56] = sub_100221DF8(v6, (uint64_t)qword_1007B7FF8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[57] = v7;
  v8 = v7(v3, v2, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[46];
  v13 = v0[39];
  v14 = v0[40];
  if (v11)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v30 = v28;
    *(_DWORD *)v15 = 136315138;
    v16 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v19 = v18;
    v0[19] = sub_100228BD8(v17, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v15 + 4);
    v20 = swift_bridgeObjectRelease(v19);
    v21 = *(void (**)(uint64_t, uint64_t, __n128))(v14 + 8);
    v21(v12, v13, v20);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAirDropSendService.transfers ADD {id: %s}", v15, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t, __n128))(v14 + 8);
    ((void (*)(_QWORD, _QWORD))v21)(v0[46], v0[39]);
  }

  v0[58] = v21;
  v22 = (_QWORD *)v0[21];
  v23 = v22[14];
  v24 = v22[15];
  sub_10023A834(v22 + 11, v23);
  v25 = *(int **)(v24 + 40);
  v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)v25 + *v25);
  v26 = (_QWORD *)swift_task_alloc(v25[1]);
  v0[59] = v26;
  *v26 = v0;
  v26[1] = sub_1002A99BC;
  return v29(v23, v24);
}

uint64_t sub_1002A99BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 472);
  *(_QWORD *)(*v1 + 480) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002AA628;
  else
    v4 = sub_1002A9A20;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 432), 0);
}

uint64_t sub_1002A9A20()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v11)(_QWORD *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[57];
  v16 = v0[55];
  v2 = v0[53];
  v4 = v0[48];
  v3 = v0[49];
  v5 = v0[47];
  v6 = v0[45];
  v8 = v0[38];
  v7 = v0[39];
  v0[61] = *(_QWORD *)(v0[21] + 16);
  v1(v6, v5, v7);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[62] = v9;
  v9(v8, v2, v4);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
  v0[63] = v10;
  v10(v8, 0, 1, v4);
  v11 = (void (*)(_QWORD *, _QWORD))CurrentValueSubject.value.modify(v0 + 10);
  sub_1003950A8(v8, v6);
  v11(v0 + 10, 0);
  SFProgressTask.makeAsyncIterator()(v16);
  v12 = static AirDropActor.shared;
  v13 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v0[64] = v13;
  v14 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[65] = v14;
  *v14 = v0;
  v14[1] = sub_1002A9B80;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[37], v12, v13, v0[32], v0 + 16);
}

uint64_t sub_1002A9B80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 520));
  if (v0)
  {
    v3 = v2[54];
    v4 = sub_1002AAA88;
  }
  else
  {
    v2[66] = v2[58];
    v3 = v2[54];
    v4 = sub_1002A9BEC;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002A9BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, _QWORD);
  uint64_t v53;
  _QWORD *v54;
  void (*v56)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  __n128 v67;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void (*v76)(uint64_t, uint64_t, __n128);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  __n128 v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  os_log_type_t type;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  void (*v109)(uint64_t, _QWORD);
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, __n128);
  void (*v114)(uint64_t, uint64_t, __n128);
  uint64_t v115;
  uint64_t v116;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 336);
    v10 = *(_QWORD *)(v0 + 312);
    if (v8)
    {
      v114 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 464);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v116 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      v16 = v15;
      *(_QWORD *)(v0 + 136) = sub_100228BD8(v14, v15, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v11 + 4);
      v17 = swift_bridgeObjectRelease(v16);
      v114(v9, v10, v17);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropSendService.transfers REMOVE {id: %s}", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 464))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 312));
    }

    v48 = *(_QWORD *)(v0 + 384);
    v49 = *(_QWORD *)(v0 + 392);
    v50 = *(_QWORD *)(v0 + 360);
    v51 = *(_QWORD *)(v0 + 304);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 456))(v50, *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, 1, 1, v48);
    v52 = (uint64_t (*)(uint64_t, _QWORD))CurrentValueSubject.value.modify(v0 + 16);
    sub_1003950A8(v51, v50);
    v53 = v52(v0 + 16, 0);
    SFAirDropSend.Request.endpointID.getter(v53);
    v54 = (_QWORD *)swift_task_alloc(dword_1007BDABC);
    *(_QWORD *)(v0 + 552) = v54;
    *v54 = v0;
    v54[1] = sub_1002AA458;
    return sub_100396344(*(_QWORD *)(v0 + 200));
  }
  else
  {
    v115 = v0 + 48;
    v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
    v110 = v4;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
    v20 = *(_QWORD *)(v0 + 408);
    v19 = *(_QWORD *)(v0 + 416);
    v21 = *(_QWORD *)(v0 + 376);
    v22 = *(_QWORD *)(v0 + 352);
    v23 = *(_QWORD *)(v0 + 312);
    v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v105(v19, v3, v1);
    v18(v22, v21, v23);
    v24 = v107(v20, v19, v1);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v0 + 528);
    v29 = *(_QWORD *)(v0 + 408);
    v30 = *(_QWORD *)(v0 + 384);
    v31 = *(_QWORD *)(v0 + 392);
    v32 = *(_QWORD *)(v0 + 352);
    v33 = *(_QWORD *)(v0 + 312);
    if (v27)
    {
      v112 = *(_QWORD *)(v0 + 392);
      v34 = *(_QWORD *)(v0 + 248);
      v101 = *(_QWORD *)(v0 + 232);
      v103 = *(_QWORD *)(v0 + 240);
      v35 = swift_slowAlloc(22, -1);
      v108 = swift_slowAlloc(64, -1);
      v116 = v108;
      *(_DWORD *)v35 = 136315394;
      v36 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
      type = v26;
      v38 = v30;
      v40 = v39;
      *(_QWORD *)(v35 + 4) = sub_100228BD8(v37, v39, &v116);
      v41 = swift_bridgeObjectRelease(v40);
      v42 = v28(v32, v33, v41);
      *(_WORD *)(v35 + 12) = 2080;
      SFAirDropSend.Transfer.state.getter(v42);
      v43 = sub_100220D78(&qword_1007B8160, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Transfer.State);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v101, v43);
      v46 = v45;
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v34, v101);
      *(_QWORD *)(v35 + 14) = sub_100228BD8(v44, v46, &v116);
      v47 = swift_bridgeObjectRelease(v46);
      v113 = *(void (**)(uint64_t, uint64_t, __n128))(v112 + 8);
      v113(v29, v38, v47);
      _os_log_impl((void *)&_mh_execute_header, v25, type, "SDAirDropSendService.transfers UPDATE {id: %s, state: %s}", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v108, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD))v28)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 312));
      v113 = *(void (**)(uint64_t, uint64_t, __n128))(v31 + 8);
      ((void (*)(uint64_t, uint64_t))v113)(v29, v30);
    }

    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
    v56 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 504);
    v58 = *(_QWORD *)(v0 + 416);
    v59 = *(_QWORD *)(v0 + 384);
    v60 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));
    v57(v60, v58, v59);
    v56(v60, 0, 1, v59);
    v109 = (void (*)(uint64_t, _QWORD))CurrentValueSubject.value.modify(v115);
    v62 = v61;
    if (v110(v60, 1, v59) == 1)
    {
      v63 = *(_QWORD *)(v0 + 344);
      sub_10000D0F0(*(_QWORD *)(v0 + 288), &qword_1007B8130);
      v64 = *v62;
      swift_bridgeObjectRetain(*v62);
      v65 = sub_10045C244(v63);
      LOBYTE(v63) = v66;
      v67 = swift_bridgeObjectRelease(v64);
      if ((v63 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v62);
        *(_QWORD *)(v0 + 144) = *v62;
        *v62 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_10046FAA4();
        v69 = *(_QWORD *)(v0 + 384);
        v70 = *(_QWORD *)(v0 + 392);
        v71 = *(_QWORD *)(v0 + 280);
        (*(void (**)(unint64_t, _QWORD))(v0 + 528))(*(_QWORD *)(*(_QWORD *)(v0 + 144) + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 320) + 72) * v65, *(_QWORD *)(v0 + 312));
        v72 = *(_QWORD *)(v0 + 144);
        v105(v71, *(_QWORD *)(v72 + 56) + *(_QWORD *)(v70 + 72) * v65, v69);
        sub_10026C944(v65, v72);
        v73 = *v62;
        *v62 = v72;
        v67 = swift_bridgeObjectRelease(v73);
        v74 = 0;
      }
      else
      {
        v74 = 1;
      }
      v75 = (_QWORD *)(v0 + 464);
      v83 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
      v84 = *(_QWORD *)(v0 + 344);
      v85 = *(_QWORD *)(v0 + 312);
      v86 = *(_QWORD *)(v0 + 280);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __n128))(v0 + 504))(v86, v74, 1, *(_QWORD *)(v0 + 384), v67);
      v83(v84, v85);
      sub_10000D0F0(v86, &qword_1007B8130);
    }
    else
    {
      v75 = (_QWORD *)(v0 + 528);
      v76 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 528);
      v77 = *(_QWORD *)(v0 + 400);
      v78 = *(_QWORD *)(v0 + 344);
      v79 = *(_QWORD *)(v0 + 312);
      v105(v77, *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 384));
      v80 = swift_isUniquelyReferenced_nonNull_native(*v62);
      v116 = *v62;
      *v62 = 0x8000000000000000;
      sub_10046C6C4(v77, v78, v80);
      v81 = *v62;
      *v62 = v116;
      v82 = swift_bridgeObjectRelease(v81);
      v76(v78, v79, v82);
    }
    *(_QWORD *)(v0 + 536) = *v75;
    v111 = *(_QWORD *)(v0 + 512);
    v87 = *(_QWORD *)(v0 + 416);
    v88 = *(_QWORD *)(v0 + 248);
    v102 = *(_QWORD *)(v0 + 240);
    v89 = *(_QWORD *)(v0 + 224);
    v104 = *(_QWORD *)(v0 + 232);
    v106 = *(_QWORD *)(v0 + 384);
    v90 = *(_QWORD **)(v0 + 168);
    v91 = v90 + 11;
    v92 = *(_QWORD *)(v0 + 208);
    v93 = *(_QWORD *)(v0 + 216);
    v109(v115, 0);
    sub_10044647C(v87);
    v94 = v90[14];
    v95 = v90[15];
    v96 = sub_10023A834(v91, v94);
    v97 = SFAirDropSend.Transfer.state.getter(v96);
    SFAirDropSend.Transfer.displayPriority.getter(v97);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 48))(v88, v89, v94, v95);
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v89, v92);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v88, v104);
    ((void (*)(uint64_t, uint64_t))v113)(v87, v106);
    v98 = static AirDropActor.shared;
    v99 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 544) = v99;
    *v99 = v0;
    v99[1] = sub_1002AA3EC;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 296), v98, v111, *(_QWORD *)(v0 + 256), v0 + 128);
  }
}

uint64_t sub_1002AA3EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 544));
  if (v0)
  {
    v3 = v2[54];
    v4 = sub_1002AAA88;
  }
  else
  {
    v2[66] = v2[67];
    v3 = v2[54];
    v4 = sub_1002A9BEC;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002AA458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 432);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 552));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1002AA4D0, v1, 0);
}

uint64_t sub_1002AA4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 360);
  v11 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 272);
  v20 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);
  (*(void (**)(uint64_t, _QWORD))(v0 + 464))(v7, *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002AA628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void (*v22)(uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, _QWORD);
  uint64_t v37;
  _QWORD *v38;
  void (*v40)(uint64_t, uint64_t, __n128);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 480);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v40 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 464);
    v5 = *(_QWORD *)(v0 + 328);
    v6 = *(_QWORD *)(v0 + 312);
    v7 = swift_slowAlloc(22, -1);
    v41 = (uint64_t *)swift_slowAlloc(8, -1);
    v42 = swift_slowAlloc(32, -1);
    v43 = v42;
    *(_DWORD *)v7 = 136315394;
    v8 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 120) = sub_100228BD8(v9, v10, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 4);
    v12 = swift_bridgeObjectRelease(v11);
    v40(v5, v6, v12);
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain(v1);
    v13 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 112) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v7 + 14);
    *v41 = v13;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropSendService.transfers ERROR {id: %s, error: %@}", (uint8_t *)v7, 0x16u);
    v14 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v41, 1, v14);
    swift_slowDealloc(v41, -1, -1);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    v16 = *(_QWORD *)(v0 + 328);
    v17 = *(_QWORD *)(v0 + 312);
    swift_errorRelease(v1);
    v15(v16, v17);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v18 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 464);
  v23 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 312);
  if (v21)
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v43 = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
    v30 = v29;
    *(_QWORD *)(v0 + 136) = sub_100228BD8(v28, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v25 + 4);
    v31 = swift_bridgeObjectRelease(v30);
    v22(v23, v24, v31);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "SDAirDropSendService.transfers REMOVE {id: %s}", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    ((void (*)(_QWORD, _QWORD))v22)(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 312));
  }

  v32 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 392);
  v34 = *(_QWORD *)(v0 + 360);
  v35 = *(_QWORD *)(v0 + 304);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 456))(v34, *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v35, 1, 1, v32);
  v36 = (uint64_t (*)(uint64_t, _QWORD))CurrentValueSubject.value.modify(v0 + 16);
  sub_1003950A8(v35, v34);
  v37 = v36(v0 + 16, 0);
  SFAirDropSend.Request.endpointID.getter(v37);
  v38 = (_QWORD *)swift_task_alloc(dword_1007BDABC);
  *(_QWORD *)(v0 + 552) = v38;
  *v38 = v0;
  v38[1] = sub_1002AA458;
  return sub_100396344(*(_QWORD *)(v0 + 200));
}

