void sub_1000050CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;

  v5 = a2;
  v7 = v5;
  if (dword_1007B3A28 <= 20)
  {
    if (dword_1007B3A28 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B3A28, 20), v5 = v7, v6))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_3", 20, "BLE NearbyInfo changed %@\n", v5);
      v5 = v7;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceChanged:type:changes:", v5, 16, a3);

}

void sub_100005170(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  id v7;

  v5 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v6 = a2;
  dispatch_assert_queue_V2(v5);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v7, "deviceDiscoveryDeviceChanged:changes:", v6, a3);

}

void sub_1000051E4(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "deviceDiscoveryFoundDevice:", v4);

}

void sub_100005250(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v10 = v3;
  if (dword_1007B3A28 <= 50)
  {
    if (dword_1007B3A28 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 50), v3 = v10, v4))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke", 50, "BLE NearbyInfo found %@\n", v3);
      v3 = v10;
    }
  }
  v5 = *(_QWORD **)(a1 + 32);
  if (!v5[28])
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 224);
    *(_QWORD *)(v7 + 224) = v6;

    v3 = v10;
    v5 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v5, "_deviceDiscoveryBLEDeviceFound:type:", v3, 16);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
  if (v9)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v10, v9);

}

void sub_100005E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000063B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000073B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100008384(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id sub_10000884C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const __CFString *v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  const __CFString *v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = objc_msgSend(v2, "systemUIFlags");

  if ((v3 & 2) != 0)
  {
    v6 = 0;
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "wasInLockScreen");
    v6 = (int)v4;
  }
  v7 = paired_unlock_log(v4, v5);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = CFSTR("NO");
    if ((v3 & 2) != 0)
      v9 = CFSTR("YES");
    v14 = 138412290;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "on lock screen: %@", (uint8_t *)&v14, 0xCu);
  }

  result = objc_msgSend(*(id *)(a1 + 32), "setWasInLockScreen:", (v3 >> 1) & 1);
  if (v6)
  {
    v12 = paired_unlock_log(result, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Transitioned out of lock screen.", (uint8_t *)&v14, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "beginUnlockIfNotOnLockScreen");
  }
  return result;
}

void sub_100008C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 256), 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Block_object_dispose((const void *)(v41 - 112), 8);
  _Block_object_dispose((const void *)(v41 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100008CE4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  BOOL v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  NSObject *v35;
  _BYTE v36[128];

  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "elements"));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_22;
  }
  v6 = v5;
  v7 = 0;
  v8 = *(_QWORD *)v29;
  do
  {
    for (i = 0; i != v6; i = (char *)i + 1)
    {
      if (*(_QWORD *)v29 != v8)
        objc_enumerationMutation(v4);
      v10 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
      if (v11)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v11));
        v13 = v12;
        v14 = v12 != 0;
        if (v12)
          v7 = objc_msgSend(v12, "unsignedIntValue") | v7;

      }
      else
      {
        v14 = 0;
      }
      v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier"));
      v16 = v15;
      if (v15
        && (v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v15))) != 0)
      {
        v17 = v15;
        v7 = -[NSObject unsignedIntValue](v15, "unsignedIntValue") | v7;
      }
      else
      {
        if (v14)
          goto LABEL_18;
        v18 = daemon_log(v15);
        v17 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          v33 = v11;
          v34 = 2112;
          v35 = v16;
          _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "SystemUI unknown identifier: '%@'/ '%@'", buf, 0x16u);
        }
      }

LABEL_18:
    }
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
  }
  while (v6);
LABEL_22:

  pthread_mutex_lock(&stru_1007B3728);
  v19 = NSPrintF("%#{flags}", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 488), &unk_1005CCDB2);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = NSPrintF("%#{flags}", v7, &unk_1005CCDB2);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  v23 = daemon_log(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v33 = v20;
    v34 = 2112;
    v35 = v22;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "SystemUI changed: %@ -> %@", buf, 0x16u);
  }

  v25 = *(_QWORD *)(a1 + 40);
  v26 = *(_DWORD *)(v25 + 488);
  *(_DWORD *)(v25 + 488) = v7;
  pthread_mutex_unlock(&stru_1007B3728);
  if (v26 != (_DWORD)v7)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v27, "postNotificationName:object:", CFSTR("com.apple.sharingd.SystemUIChanged"), 0);

  }
}

void sub_100008FE0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  unsigned __int8 v7;
  int v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  int v16;
  void *v17;
  unsigned int v18;
  const __CFString *v19;
  const __CFString *v20;
  id v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  void *v35;
  id v36;
  unsigned __int8 v37;
  uint64_t v38;
  void *v39;
  id v40;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceFilter"));
  v3 = *(void **)(a1 + 40);
  v4 = v2;
  v5 = v3;
  if (v4 == v5)
  {

    goto LABEL_12;
  }
  v6 = v5;
  if ((v4 == 0) != (v5 != 0))
  {
    v7 = objc_msgSend(v4, "isEqual:", v5);

    if ((v7 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

  }
  if (dword_1007B3A28 <= 10 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p deviceFilter changed to %@ ", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setDeviceFilter:", *(_QWORD *)(a1 + 40));
LABEL_12:
  v8 = *(_DWORD *)(a1 + 104);
  if (v8 != objc_msgSend(*(id *)(a1 + 32), "changeFlags"))
  {
    if (dword_1007B3A28 <= 10
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p changeFlags from 0x%x to 0x%x", *(const void **)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "changeFlags"), *(_DWORD *)(a1 + 104));
    }
    objc_msgSend(*(id *)(a1 + 32), "setChangeFlags:", *(unsigned int *)(a1 + 104));
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "payloadFilterData"));
  v10 = *(void **)(a1 + 48);
  v11 = v9;
  v12 = v10;
  if (v11 == v12)
  {

    goto LABEL_25;
  }
  v13 = v12;
  if ((v11 == 0) == (v12 != 0))
  {

    goto LABEL_24;
  }
  v14 = objc_msgSend(v11, "isEqual:", v12);

  if ((v14 & 1) == 0)
LABEL_24:
    objc_msgSend(*(id *)(a1 + 32), "setPayloadFilterData:mask:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 48));
LABEL_25:
  v15 = *(id *)(a1 + 80);
  if (v15 != objc_msgSend(*(id *)(a1 + 32), "rssiThreshold"))
  {
    if (dword_1007B3A28 <= 10
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p RSSI threshold to %ld", *(const void **)(a1 + 32), *(_QWORD *)(a1 + 80));
    }
    objc_msgSend(*(id *)(a1 + 32), "setRssiThreshold:", *(_QWORD *)(a1 + 80));
  }
  v16 = *(unsigned __int8 *)(a1 + 108);
  if (v16 != objc_msgSend(*(id *)(a1 + 32), "scanCache"))
  {
    if (dword_1007B3A28 <= 10
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
    {
      v17 = *(void **)(a1 + 32);
      v18 = objc_msgSend(v17, "scanCache");
      v19 = CFSTR("NO");
      if (v18)
        v20 = CFSTR("YES");
      else
        v20 = CFSTR("NO");
      if (*(_BYTE *)(a1 + 108))
        v19 = CFSTR("YES");
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p scanCache from %@ to %@", v17, v20, v19);
    }
    objc_msgSend(*(id *)(a1 + 32), "setScanCache:", *(unsigned __int8 *)(a1 + 108));
  }
  v21 = *(id *)(a1 + 88);
  if (v21 != objc_msgSend(*(id *)(a1 + 32), "scanRate"))
  {
    if (dword_1007B3A28 > 10 || dword_1007B3A28 == -1 && !_LogCategory_Initialize(&dword_1007B3A28, 10))
      goto LABEL_82;
    v22 = *(void **)(a1 + 32);
    v23 = (uint64_t)objc_msgSend(v22, "scanRate");
    if (v23 > 19)
    {
      if (v23 > 39)
      {
        if (v23 == 40)
        {
          v24 = "High";
          goto LABEL_64;
        }
        if (v23 == 50)
        {
          v24 = "Aggressive";
          goto LABEL_64;
        }
      }
      else
      {
        if (v23 == 20)
        {
          v24 = "Normal";
          goto LABEL_64;
        }
        if (v23 == 30)
        {
          v24 = "HighNormal";
          goto LABEL_64;
        }
      }
LABEL_63:
      v24 = "?";
    }
    else
    {
      v24 = "Invalid";
      switch(v23)
      {
        case 0:
          break;
        case 1:
          v24 = "BackgroundOld";
          break;
        case 2:
          v24 = "NormalOld";
          break;
        case 3:
          v24 = "HighOld";
          break;
        case 4:
          v24 = "AggressiveOld";
          break;
        case 10:
          v24 = "Background";
          break;
        default:
          goto LABEL_63;
      }
    }
LABEL_64:
    v25 = *(_QWORD *)(a1 + 88);
    if (v25 <= 19)
    {
      v26 = "Invalid";
      switch(v25)
      {
        case 0:
          goto LABEL_81;
        case 1:
          v26 = "BackgroundOld";
          break;
        case 2:
          v26 = "NormalOld";
          break;
        case 3:
          v26 = "HighOld";
          break;
        case 4:
          v26 = "AggressiveOld";
          break;
        case 10:
          v26 = "Background";
          break;
        default:
          goto LABEL_80;
      }
      goto LABEL_81;
    }
    if (v25 > 39)
    {
      if (v25 == 40)
      {
        v26 = "High";
        goto LABEL_81;
      }
      if (v25 == 50)
      {
        v26 = "Aggressive";
        goto LABEL_81;
      }
    }
    else
    {
      if (v25 == 20)
      {
        v26 = "Normal";
        goto LABEL_81;
      }
      if (v25 == 30)
      {
        v26 = "HighNormal";
LABEL_81:
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p scanRate from %s to %s", v22, v24, v26);
LABEL_82:
        objc_msgSend(*(id *)(a1 + 32), "setScanRate:", *(_QWORD *)(a1 + 88));
        goto LABEL_83;
      }
    }
LABEL_80:
    v26 = "?";
    goto LABEL_81;
  }
LABEL_83:
  v27 = *(id *)(a1 + 96);
  if (v27 != objc_msgSend(*(id *)(a1 + 32), "rescanIntervalScreenOff"))
  {
    if (dword_1007B3A28 <= 10
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p rescanIntervalScreenOff from %d to %d", *(const void **)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "rescanIntervalScreenOff"), *(_QWORD *)(a1 + 96));
    }
    objc_msgSend(*(id *)(a1 + 32), "setRescanIntervalScreenOff:", *(_QWORD *)(a1 + 96));
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trackedPeers"));
  v29 = *(void **)(a1 + 56);
  v30 = v28;
  v31 = v29;
  if (v30 == v31)
  {

    goto LABEL_100;
  }
  v32 = v31;
  if ((v30 == 0) != (v31 != 0))
  {
    v33 = objc_msgSend(v30, "isEqual:", v31);

    if ((v33 & 1) != 0)
      goto LABEL_100;
  }
  else
  {

  }
  if (dword_1007B3A28 <= 10 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p trackedPeers to %@", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "setTrackedPeers:", *(_QWORD *)(a1 + 56));
LABEL_100:
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "useCases"));
  v35 = *(void **)(a1 + 64);
  v40 = v34;
  v36 = v35;
  if (v40 == v36)
  {

    return;
  }
  if ((v40 == 0) != (v36 != 0))
  {
    v37 = objc_msgSend(v40, "isEqual:", v36);

    if ((v37 & 1) != 0)
      return;
  }
  else
  {

  }
  if (dword_1007B3A28 <= 10 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 10)))
  {
    v38 = *(_QWORD *)(a1 + 32);
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "_useCasesToHexString:", *(_QWORD *)(a1 + 64)));
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke", 10, "Updating BLEScanner %p useCases to (%@)", v38, v39);

  }
  objc_msgSend(*(id *)(a1 + 32), "setUseCases:", *(_QWORD *)(a1 + 64));
}

void sub_100009DF4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  void *i;
  void *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned __int8 v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];

  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 472);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v8)
          objc_enumerationMutation(v2);
        v10 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v10, "discoveryFlags") & 0x10) != 0)
          v5 |= objc_msgSend(v10, "overrideScreenOff");
        if ((objc_msgSend(v10, "discoveryFlags") & 1) != 0)
          v6 |= objc_msgSend(v10, "overrideScreenOff");
        if ((objc_msgSend(v10, "discoveryFlags") & 2) != 0)
          v7 |= objc_msgSend(v10, "overrideScreenOff");
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    }
    while (v4);
  }
  else
  {
    LOBYTE(v5) = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v7) = 0;
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 433) = v5 & 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 449) = v6 & 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 465) = v7 & 1;
  v11 = objc_msgSend(*(id *)(a1 + 40), "discoveryFlags");
  v12 = v11;
  if ((v11 & 0x20) != 0)
  {
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsBluetoothDeviceIDsForSharing"));
LABEL_24:
    v14 = (void *)v13;
    objc_msgSend(*(id *)(a1 + 40), "setDeviceFilter:", v13);

    goto LABEL_25;
  }
  if ((v11 & 0x100000) != 0)
  {
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_idsBluetoothDeviceIDsForMe"));
    goto LABEL_24;
  }
  if ((v11 & 0x200000) != 0)
  {
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_idsBluetoothDeviceIDsForHomePods"));
    goto LABEL_24;
  }
  if ((v11 & 0x1000000) != 0)
    objc_msgSend(*(id *)(a1 + 32), "_unlockDeviceFilterChangedForRequest:", *(_QWORD *)(a1 + 40));
LABEL_25:
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceFoundHandler"));
  if (v15)
  {

  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceLostHandler"));

    if (!v16)
    {
LABEL_30:
      v17 = 0;
      goto LABEL_34;
    }
  }
  if ((v12 & 0x10) != 0)
  {
    v18 = 424;
  }
  else
  {
    if ((v12 & 1) == 0)
      goto LABEL_30;
    v18 = 440;
  }
  v17 = *(id *)(*(_QWORD *)(a1 + 32) + v18);
LABEL_34:
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v19 = v17;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v33;
    do
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(_QWORD *)v33 != v22)
          objc_enumerationMutation(v19);
        v24 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j);
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v24, (_QWORD)v32));
        if (v25)
        {
          v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceFilter"));
          if (v26
            && (v27 = (void *)v26,
                v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceFilter")),
                v29 = objc_msgSend(v28, "containsObject:", v24),
                v28,
                v27,
                (v29 & 1) == 0))
          {
            v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceLostHandler"));
          }
          else
          {
            v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceFoundHandler"));
          }
          v31 = (void *)v30;
          if (v30)
            (*(void (**)(uint64_t, void *))(v30 + 16))(v30, v25);

        }
      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v21);
  }

  objc_msgSend(*(id *)(a1 + 32), "_update");
}

void sub_10000A158(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "deviceDiscoveryLostDevice:", v4);

}

void sub_10000A508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000A8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10000AF60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10000CC3C(uint64_t a1)
{
  id v2;
  id v3;
  const char *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "systemUIFlags");
  if (dword_1007B1060 <= 30)
  {
    v3 = v2;
    if (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30))
    {
      if (objc_msgSend(*(id *)(a1 + 32), "_systemCanTrigger"))
        v4 = "yes";
      else
        v4 = "no";
      LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent commonSystemUIChanged]_block_invoke", 30, "System UI Changed %#{flags}, CanTrigger %s\n", v3, &unk_1005CC596, v4);
    }
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_systemCanTrigger") & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "requestRemoveAll");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_10000D090(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_identificationMaintenanceTimer");
}

uint64_t sub_10000D09C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_10000D098;
  return v5();
}

uint64_t sub_10000D0F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008384(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000D12C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10000D5E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t start()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  dispatch_source_t v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  dispatch_source_t v26;
  _QWORD v27[5];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  dispatch_source_t v33;
  _QWORD handler[5];
  uint8_t buf[8];
  uint8_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  dispatch_source_t v40;

  v0 = objc_autoreleasePoolPush();
  v1 = daemon_log(v0);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting Up...", buf, 2u);
  }

  _set_user_dir_suffix(objc_msgSend(CFSTR("com.apple.sharingd"), "UTF8String"));
  sub_10019D748();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("OneTimeAirDropReset2")));

  if (!v4)
  {
    objc_msgSend(v3, "removeObjectForKey:", kSFOperationDiscoverableModeKey);
    objc_msgSend(v3, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("OneTimeAirDropReset2"));
  }
  v5 = &_dispatch_main_q;
  *(_QWORD *)buf = 0;
  v36 = buf;
  v37 = 0x3032000000;
  v38 = sub_10000E7E8;
  v39 = sub_10000E7F8;
  v40 = 0;
  v40 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler(*((dispatch_source_t *)v36 + 5), &stru_100714230);
  v6 = *((_QWORD *)v36 + 5);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10000E85C;
  handler[3] = &unk_100714258;
  handler[4] = buf;
  dispatch_source_set_cancel_handler(v6, handler);
  dispatch_resume(*((dispatch_object_t *)v36 + 5));
  v28 = 0;
  v29 = &v28;
  v30 = 0x3032000000;
  v31 = sub_10000E7E8;
  v32 = sub_10000E7F8;
  v33 = 0;
  v33 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1DuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v29[5], &stru_100714278);
  v7 = v29[5];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10000E904;
  v27[3] = &unk_100714258;
  v27[4] = &v28;
  dispatch_source_set_cancel_handler(v7, v27);
  dispatch_resume((dispatch_object_t)v29[5]);
  signal(30, (void (__cdecl *)(int))1);
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = sub_10000E7E8;
  v25 = sub_10000E7F8;
  v26 = 0;
  v26 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1EuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v22[5], &stru_100714298);
  v8 = v22[5];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10000E9A8;
  v20[3] = &unk_100714258;
  v20[4] = &v21;
  dispatch_source_set_cancel_handler(v8, v20);
  dispatch_resume((dispatch_object_t)v22[5]);
  signal(31, (void (__cdecl *)(int))1);
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = sub_10000E7E8;
  v18 = sub_10000E7F8;
  v19 = 0;
  v19 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1FuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v15[5], &stru_1007142B8);
  v9 = v15[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10000EA4C;
  v13[3] = &unk_100714258;
  v13[4] = &v14;
  dispatch_source_set_cancel_handler(v9, v13);
  dispatch_resume((dispatch_object_t)v15[5]);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SharingDaemon sharedDaemon](SharingDaemon, "sharedDaemon"));
  objc_msgSend(v10, "start");

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v21, 8);

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(buf, 8);

  objc_autoreleasePoolPop(v0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  objc_msgSend(v11, "run");

  return 1;
}

void sub_10000E79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E7E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000E7F8(uint64_t a1)
{

}

void sub_10000E800(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SIGTERM received, shutting down.", v3, 2u);
  }

  exit(0);
}

void sub_10000E85C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10000E870(id a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SIGINFO received, requesting debug output.", v4, 2u);
  }

  sub_10019D748();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("com.apple.sharingd.DebugInfoRequested"), 0);

}

void sub_10000E904(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10000E918(id a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SIGUSR1 received, requesting reset state.", v4, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("com.apple.sharingd.ResetState"), 0);

}

void sub_10000E9A8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10000E9BC(id a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SIGUSR2 received, requesting reset state 2.", v4, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("com.apple.sharingd.ResetState2"), 0);

}

void sub_10000EA4C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void *acm_mem_alloc_data(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result)
    qword_1007C6468 += size;
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_1007C6468 - __n;
    if (qword_1007C6468 < __n)
      v4 = 0;
    qword_1007C6468 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result)
    qword_1007C6470 += size;
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_1007C6470 - __n;
    if (qword_1007C6470 < __n)
      v4 = 0;
    qword_1007C6470 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  const char *v6;
  const char *v7;
  const char *v8;

  if (a2)
    qword_1007C6460 += a3;
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v6 = "NULL";
    if (result)
      v7 = result;
    else
      v7 = "NULL";
    if (a4)
      v8 = a4;
    else
      v8 = "NULL";
    if (a6)
      v6 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1007C6460, 0, qword_1007C6468, qword_1007C6470, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;

  if (a2)
  {
    v6 = qword_1007C6460 - a3;
    if (qword_1007C6460 < a3)
      v6 = 0;
    qword_1007C6460 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v7 = "NULL";
    if (result)
      v8 = result;
    else
      v8 = "NULL";
    if (a4)
      v9 = a4;
    else
      v9 = "NULL";
    if (a6)
      v7 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1007C6460, 0, qword_1007C6468, qword_1007C6470, v9, a5, v7);
  }
  return result;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))sub_10000EEFC, (uint64_t)&v6, a1, &byte_1007AFF41, 1);
  if ((_DWORD)v2)
  {
    sub_10000FE8C();
    v3 = 70;
  }
  else
  {
    v3 = 10;
    if (a1 && byte_1007AFF41 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        v4 = *a1;
        if (*a1)
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        *(_DWORD *)buf = 136315650;
        v8 = "ACMLib";
        v9 = 2080;
        v10 = "ACMContextCreate";
        v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      v3 = 10;
    }
  }
  if (v3 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    v11 = 2048;
    v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_10000EEFC(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315394;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    v14 = sub_10000F6CC();
    v15 = 70;
    if ((_DWORD)v14)
    {
      v16 = v14;
    }
    else
    {
      v16 = sub_10000F8AC(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16)
        v15 = 70;
      else
        v15 = 10;
    }
  }
  else
  {
    v15 = 70;
    v16 = 4294967293;
  }
  if (v15 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315650;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    v22 = 2048;
    v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v8 = 0;
  v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *))sub_10000EEFC, (uint64_t)&v8, a1, a2, &byte_1007AFF41, 1);
  if (v4)
  {
    if (byte_1007AFF41 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      v10 = "ACMLib";
      v11 = 2080;
      v12 = "ACMContextCreateWithExternalForm";
      v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    v6 = 30;
  }
  else
  {
    sub_10000FE8C();
    v6 = 70;
  }
  if (v6 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    v13 = 2048;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD v16[2];

  v4 = byte_1007AFF41;
  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    v4 = byte_1007AFF41;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    v12 = "ACMLib";
    v14 = "ACMContextDelete";
    v13 = 2080;
    if (a2)
      v6 = "destroyed";
    v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(_QWORD *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  v10 = a1;
  v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))sub_10000EEFC, (uint64_t)&v10, a1, a2);
  if ((_DWORD)v7)
    v8 = 70;
  else
    v8 = 10;
  if (v8 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1
    || !a2
    || sub_10000F6CC()
    || sub_10000F8AC((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  }
  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_10000F6CC()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  unsigned int v4;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315394;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if ((byte_1007C647C & 1) != 0)
  {
    v0 = 0;
  }
  else
  {
    v1 = IOServiceMatching("AppleCredentialManager");
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      v4 = 70;
      v0 = 4294967291;
      goto LABEL_10;
    }
    v3 = MatchingService;
    v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1007C6478);
    if ((_DWORD)v0)
    {
      v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1007C647C = 1;
  }
  v4 = 10;
LABEL_10:
  if (v4 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315650;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    v10 = 2048;
    v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10000F8AC(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  _BYTE *v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  size_t v22;
  size_t inputStructCnt;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  inputStructCnt = 0;
  v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    v15 = v14;
    if (!a6 && a7)
    {
      v18 = 4294967293;
    }
    else
    {
      if (a7)
        v16 = *a7;
      else
        v16 = 0;
      v22 = v16;
      v17 = IOConnectCallStructMethod(dword_1007C6478, 0, v14, inputStructCnt, a6, &v22);
      v18 = v17;
      if (a1)
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      if ((_DWORD)v17)
      {
        if (byte_1007AFF41 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          v30 = 1024;
          v31 = v18;
          v32 = 1024;
          v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_1007AFF41 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        v18 = 0;
        if (a7)
          *a7 = v22;
      }
    }
    v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18)
      v20 = 70;
    else
      v20 = 10;
  }
  else
  {
    v20 = 70;
    v18 = 4294967291;
  }
  if (v20 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    v28 = 2048;
    *(_QWORD *)v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = 0;
  v13 = 4;
  if (a1)
  {
    v6 = sub_10000F6CC();
    if ((_DWORD)v6)
    {
      v11 = v6;
      v8 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 576, "ACMContextContainsCredentialTypeEx");
      v8 = 70;
      if (v7)
      {
        *(_OWORD *)v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        v9 = sub_10000F8AC((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14)
          v10 = 0;
        else
          v10 = -7;
        if (v9)
          v11 = v9;
        else
          v11 = v10;
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 590, "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v11 = 4294967292;
      }
    }
  }
  else
  {
    v8 = 70;
    v11 = 4294967293;
  }
  if (v8 >= byte_1007AFF41 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsCredentialTypeEx";
    v19 = 2048;
    v20 = (int)v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

void sub_10000FE8C()
{
  unsigned __int8 v0;
  unsigned int v1;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (byte_1007AFF41 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  output = 0;
  outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_1007C6478, 2u, 0, 0, &output, &outputCnt))
    goto LABEL_8;
  v0 = output;
  v1 = output;
  byte_1007AFF41 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    v8 = 1024;
    v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    v1 = byte_1007AFF41;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, _QWORD *a6)
{
  _BYTE *v12;
  BOOL v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  v12 = 0;
  if (a5)
    v13 = a4 == 0;
  else
    v13 = 0;
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      v12 = 0;
    }
    else
    {
      v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5)
          memcpy(v12 + 8, a4, a5);
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *), uint64_t a2, _QWORD *a3, _BYTE *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  _BYTE v19[21];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  v10 = 70;
  v11 = 4294967293;
  if (!a1 || !a3)
    goto LABEL_25;
  v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    v10 = 70;
    v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v18 = 21;
    v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        v11 = 4294967291;
        goto LABEL_23;
      }
      v11 = 0;
      goto LABEL_20;
    }
    v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      v10 = 70;
      goto LABEL_25;
    }
  }
  v18 = 17;
  v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17)
    v15 = 0;
  else
    v15 = -5;
  if (v14)
    v11 = v14;
  else
    v11 = v15;
  if (!v14 && v18 == 17)
  {
LABEL_20:
    v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4)
      *a4 = v19[16];
  }
  if ((_DWORD)v11)
    goto LABEL_23;
  v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  _QWORD v21[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  v12 = 0;
  v13 = 70;
  v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      v20 = 9;
      v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          v14 = 0;
          goto LABEL_19;
        }
        v14 = -5;
        goto LABEL_28;
      }
      v14 = v15;
      if (v15 != -3)
        goto LABEL_28;
    }
    v20 = 5;
    v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5)
      v17 = 0;
    else
      v17 = -5;
    if (v16)
      v14 = v16;
    else
      v14 = v17;
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          v13 = 70;
          v14 = -4;
          goto LABEL_31;
        }
        v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)v12 = *a3;
        v12[4] = v18;
        if (a5)
          *a5 = BYTE4(v21[0]);
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    v12 = 0;
    if (v14)
      goto LABEL_29;
LABEL_30:
    v14 = 0;
    v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD), uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  unsigned int v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  if (a1 && a3)
  {
    if (a4)
      a1(a2, 2, 0, a3, 16, 0, 0);
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    v8 = 0;
    v9 = 10;
    goto LABEL_8;
  }
  v9 = 70;
  v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  return v8;
}

uint64_t SDUnlockRelockRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStashConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 20) |= 4u;
      while (1)
      {
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0)
          goto LABEL_48;
        v18 += 7;
        v9 = v19++ >= 9;
        if (v9)
        {
          v20 = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v20 = 0;
LABEL_50:
      *(_BYTE *)(a1 + 16) = v20 != 0;
    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v23 = 0;
        v24 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v15 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_52;
          v23 += 7;
          v9 = v24++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_54;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_54:
        v28 = 8;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_44;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_46:
        v28 = 12;
      }
      *(_DWORD *)(a1 + v28) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAuthenticationTokenReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t Data;
  void *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_38;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_40:
        v27 = 32;
        goto LABEL_45;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 24;
        goto LABEL_29;
      case 3u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 8;
LABEL_29:
        v22 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      case 4u:
        v23 = 0;
        v24 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
      v14 |= (unint64_t)(v26 & 0x7F) << v23;
      if ((v26 & 0x80) == 0)
        goto LABEL_42;
      v23 += 7;
      v9 = v24++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_44:
    v27 = 16;
LABEL_45:
    *(_DWORD *)(a1 + v27) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100013C80(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transfer"));
  v5 = v3;
  if (a2)
    v4 = 1;
  else
    v4 = 2;
  objc_msgSend(v3, "setUserResponse:", v4);

}

void sub_100014438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100014488(id *a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "completedURLs"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = objc_loadWeakRetained(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "handlingAppBundleID"));
  objc_msgSend(v2, "_LSFailedToOpenURL:withBundle:", v6, v8);

  v10 = objc_loadWeakRetained(a1);
  v9 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "completionHandler"));
  v9[2](v9, 1, 0, 1);

}

void sub_1000147C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000147E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v2 = airdrop_ui_log();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User clicked on Open button", v7, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "completedURLs"));
  objc_msgSend(WeakRetained, "openURLs:", v6);

}

uint64_t sub_100014B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100014D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100014DC0(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  char v10;

  v5 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100014E6C;
  block[3] = &unk_100714398;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  v10 = a2;
  v8 = v5;
  v6 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v9);
}

void sub_100014E6C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "handleMoveToAppShareSheetCompletedWithSuccess:error:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));

}

id sub_1000157B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
  if (!objc_msgSend(v4, "containsObject:", v5))
  {
    if (objc_msgSend(*(id *)(a1 + 40), "handlingAppInstalled"))
    {

    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "handlingAppBundleID"));
      v8 = objc_msgSend(v6, "isEqualToString:", v7);

      if (v8)
        goto LABEL_6;
    }
    v9 = 0;
    goto LABEL_8;
  }

LABEL_6:
  v9 = v3;
LABEL_8:

  return v9;
}

uint64_t sub_100016134(uint64_t a1, uint64_t a2)
{
  if (qword_1007C6480 != -1)
    dispatch_once(&qword_1007C6480, &stru_100714408);
  off_1007AFF48 = (uint64_t (*)())dlsym((void *)qword_1007C6488, "ADClientAddValueForScalarKey");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1007AFF48)(a1, a2);
}

void sub_1000161A4(id a1)
{
  qword_1007C6488 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 2);
}

void sub_1000161CC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000161F0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1000161FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No items to open with Share Sheet", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100016228()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Share Sheet was cancelled", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100016254(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_1000161F0((void *)&_mh_execute_header, a2, a3, "Share Sheet failed with error: %@", (uint8_t *)&v3);
}

void sub_1000162C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "logReceiverBundleID appIdentifier is nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000162EC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  v5 = 138412290;
  v6 = v3;
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "failed to remove item at %@", (uint8_t *)&v5);

}

void sub_100016378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Cannot open empty list of URLs", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100017C5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100017C84(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = airdrop_log(WeakRetained);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDAirDropSession: cancellation handler called for sessionID: %@", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(WeakRetained, "stop");
}

id sub_100018008(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "observeValueForKeyPath:ofObject:change:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_100018174(uint64_t a1, uint64_t a2, os_log_t log)
{
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  __int16 v6;
  uint64_t v7;

  if ((unint64_t)(a1 - 1) > 0xE)
    v3 = CFSTR("?");
  else
    v3 = *(&off_1007144B0 + a1 - 1);
  v4 = 138412547;
  v5 = v3;
  v6 = 2113;
  v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDAirDropSession: Received event %@, properties = %{private}@", (uint8_t *)&v4, 0x16u);
}

void sub_10001821C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropSession: startProgress sessionID is NULL", v1, 2u);
}

void sub_10001829C(id a1)
{
  SDMISManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDMISManager);
  v2 = (void *)qword_1007C6490;
  qword_1007C6490 = (uint64_t)v1;

}

id sub_1000183A0(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "handleMISStateChanged");
}

void sub_100018524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int sub_100018544(id a1, int a2, OS_xpc_object *a3)
{
  void *v3;

  if (a2 == 1001 && xpc_dictionary_get_uint64(a3, netrbClientNotificationKey) >> 1 == 2501)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDMISManager sharedManager](SDMISManager, "sharedManager"));
    objc_msgSend(v3, "detachMIS");

  }
  return 0;
}

void sub_100018648(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100018F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100018F9C(uint64_t a1, int token)
{
  id WeakRetained;
  uint64_t state64;

  state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "handleBioLockoutStateChanged:", state64);

  }
}

void sub_10001948C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000194A4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Could not find pearl device, current descriptors: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100019508(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error getting pearl device identities. Error: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10001956C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error getting periocular support. Error: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000195D0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not force bio lockout", v1, 2u);
}

uint64_t SDUnlockSetupCreateSecretReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Data;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = PBReaderReadData(a2);
      v19 = objc_claimAutoreleasedReturnValue(Data);
      v20 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v19;

    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v21 = 0;
        v22 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_42;
          v21 += 7;
          v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v26 = 8;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 24;
      }
      *(_DWORD *)(a1 + v26) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10001A9F0(void *a1, NSObject *a2)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = objc_msgSend(a1, "processIdentifier");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "process %d tried to connect to the Collaboration User Defaults server, but it was not entitled.", (uint8_t *)v3, 8u);
}

void sub_10001B918(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "_UIHostActivityProxy:%@ is restricted.", (uint8_t *)&v2, 0xCu);
}

void sub_10001BC80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;

  v6 = objc_autoreleasePoolPush();
  if (a2 && a4)
    objc_msgSend(a2, "handleEvent:", a4);
  objc_autoreleasePoolPop(v6);
}

void sub_10001C900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001C920(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleTimerFired");

}

void sub_10001CBD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  unsigned int v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  _BYTE v23[10];
  void *v24;

  if (*(unsigned __int16 *)(a1 + 56) - 2002 <= 2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = auto_unlock_log(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int16 *)(a1 + 56);
        v7 = objc_msgSend(*(id *)(a1 + 40), "length");
        v22 = 67109376;
        *(_DWORD *)v23 = v6;
        *(_WORD *)&v23[4] = 1024;
        *(_DWORD *)&v23[6] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received protobuf (type = %d, size = %u)", (uint8_t *)&v22, 0xEu);
      }

      v5 = -[SDAutoUnlockSessionWrapper initWithData:]([SDAutoUnlockSessionWrapper alloc], "initWithData:", *(_QWORD *)(a1 + 40));
      v8 = -[NSObject hasSessionID](v5, "hasSessionID");
      if ((_DWORD)v8
        && (v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject sessionID](v5, "sessionID")),
            v10 = objc_msgSend(v9, "length"),
            v9,
            v10 == (id)16))
      {
        v11 = objc_alloc((Class)NSUUID);
        v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[NSObject sessionID](v5, "sessionID")));
        v13 = objc_msgSend(v11, "initWithUUIDBytes:", objc_msgSend(v12, "bytes"));

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sessionID"));
        v15 = -[NSObject isEqual:](v13, "isEqual:", v14);

        if (v15)
        {
          v17 = *(void **)(a1 + 48);
          v18 = objc_claimAutoreleasedReturnValue(-[NSObject payload](v5, "payload"));
          objc_msgSend(v17, "handleMessage:fromDeviceID:type:", v18, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56));
        }
        else
        {
          v20 = auto_unlock_log(v16);
          v18 = objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sessionID"));
            v22 = 138412546;
            *(_QWORD *)v23 = v13;
            *(_WORD *)&v23[8] = 2112;
            v24 = v21;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Incoming message session ID (%@) doesn't match current one (%@)", (uint8_t *)&v22, 0x16u);

          }
        }

      }
      else
      {
        v19 = auto_unlock_log(v8);
        v13 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_10001CF8C(v5, (uint64_t *)(a1 + 40), v13);
      }

    }
    else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_10001CF4C(v5);
    }

  }
}

void sub_10001CF4C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Incoming message from unknown device", v1, 2u);
}

void sub_10001CF8C(void *a1, uint64_t *a2, NSObject *a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  uint64_t v13;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sessionID"));
  v7 = *a2;
  v8 = 138412802;
  v9 = v6;
  v10 = 2112;
  v11 = a1;
  v12 = 2112;
  v13 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Incoming message missing info (session = %@, wrapper = %@, data = %@)", (uint8_t *)&v8, 0x20u);

}

void sub_10001D048(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v1 = auto_unlock_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Locking key bag", v6, 2u);
  }

  v3 = aks_lock_bag(4294967293);
  if ((_DWORD)v3)
  {
    v4 = auto_unlock_log(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10002022C();

  }
}

void sub_10001D0E0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;

  v1 = ACMContextCreate(a1);
  if ((_DWORD)v1)
  {
    v2 = auto_unlock_log(v1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100020258();

  }
}

void sub_10001D130(void *a1, _QWORD *a2)
{
  id v3;
  _DWORD *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = objc_retainAutorelease(a1);
  v4 = ACMContextCreateWithExternalForm(objc_msgSend(v3, "bytes"), (uint64_t)objc_msgSend(v3, "length"));
  if (!v4)
  {
    v5 = auto_unlock_log(0);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1000202B8((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);

  }
  if (a2)
    *a2 = v4;

}

void sub_10001D1BC(const void *a1, _QWORD *a2, _QWORD *a3)
{
  NSObject *v6;
  dispatch_time_t v7;
  intptr_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[4];
  NSObject *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = sub_10001D3C0;
  v20 = sub_10001D3D0;
  v21 = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001D3D8;
  v12[3] = &unk_100714620;
  v14 = &v22;
  v15 = &v16;
  v6 = dispatch_semaphore_create(0);
  v13 = v6;
  ACMContextGetExternalForm(a1, (uint64_t)v12);
  v7 = dispatch_time(0, 5000000000);
  v8 = dispatch_semaphore_wait(v6, v7);
  if (v8)
    v23[3] = 60;
  v9 = auto_unlock_log(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = v17[5];
    *(_DWORD *)buf = 138412290;
    v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning context data %@", buf, 0xCu);
  }

  if (a2)
    *a2 = objc_retainAutorelease((id)v17[5]);
  if (a3)
    *a3 = v23[3];

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);
}

void sub_10001D390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D3C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001D3D0(uint64_t a1)
{

}

intptr_t sub_10001D3D8(uint64_t a1, const void *a2, int64_t size)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;

  v6 = malloc_type_malloc(size, 0xC060F670uLL);
  if (v6)
  {
    v7 = v6;
    memcpy(v6, a2, size);
    if (size >= 1)
    {
      v8 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v7, size));
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

    }
    free(v7);
  }
  else
  {
    v11 = auto_unlock_log(0);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_10002031C();

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 12;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_10001D4A8(_OWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t v7[16];

  v1 = ACMContextContainsCredentialTypeEx(a1, 9, 0);
  v2 = v1;
  v3 = auto_unlock_log(v1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100020348();
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ACM context contains credential", v7, 2u);
  }

  return v2 == 0;
}

id sub_10001D548()
{
  void *v0;
  uint64_t bag_uuid;
  uint64_t v2;
  NSObject *v3;
  id v4;

  v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  bag_uuid = aks_get_bag_uuid(0, v0);
  if ((_DWORD)bag_uuid)
  {
    v2 = auto_unlock_log(bag_uuid);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1000203A8();

    v4 = 0;
  }
  else
  {
    v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v0);
  }
  free(v0);
  return v4;
}

uint64_t sub_10001D5F4(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const __CFString *v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  int v22;
  uint64_t v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  void *v27;

  v5 = a1;
  v6 = v5;
  if ((unint64_t)(a2 - 1) >= 3)
    v7 = 0;
  else
    v7 = (a2 + 8);
  v8 = auto_unlock_log(v5);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = CFSTR("NO");
    v22 = 134218499;
    v23 = v7;
    if (a3)
      v10 = CFSTR("YES");
    v24 = 2112;
    v25 = v10;
    v26 = 2113;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Validating local LTK (aks keyclass: %ld, touch bar: %@, local LTK: %{private}@)", (uint8_t *)&v22, 0x20u);
  }

  v11 = objc_retainAutorelease(v6);
  v12 = aks_validate_local_key(0, v7, objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));
  v13 = v12;
  v14 = auto_unlock_log(v12);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 67109120;
    LODWORD(v23) = v13;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Validated local LTK (status: %d)", (uint8_t *)&v22, 8u);
  }

  v17 = 0;
  if (v13 != -536362989 && v13 != -536362984)
  {
    v17 = 0;
    v18 = v13 == -536870212 ? a3 : 0;
    if ((v18 & 1) == 0 && v13 != -536362971)
    {
      if (v13)
      {
        v19 = auto_unlock_log(v16);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v22 = 67109120;
          LODWORD(v23) = v13;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Validating local LTK returned unexpected status (status: %d)", (uint8_t *)&v22, 8u);
        }

      }
      v17 = 1;
    }
  }

  return v17;
}

void sub_10001D818(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  v1 = auto_unlock_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    sub_100020408();

  v3 = aks_remote_session_reset_all();
  if ((_DWORD)v3)
  {
    v4 = auto_unlock_log(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to reset all sessions", v6, 2u);
    }

  }
}

uint64_t sub_10001D8AC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t state;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (v2)
  {
    v3 = (uint64_t)v2;
    v4 = objc_retainAutorelease(v1);
    state = aks_remote_peer_get_state(0, objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"), v3);
    v6 = state;
    if ((_DWORD)state && (_DWORD)state != -536870184)
    {
      v10 = auto_unlock_log(state);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_100020440();

      v9 = 100;
    }
    else
    {
      v7 = auto_unlock_log(state);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        sub_1000204A0(v3, v6, v8);

      v9 = sub_10001DA7C(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    }
    free((void *)v3);
  }
  else
  {
    v9 = 100;
  }

  return v9;
}

id sub_10001D9C8(uint64_t a1, int a2)
{
  __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFString *v5;
  const __CFString *v6;
  __CFString *v7;
  void *v8;

  if (a1 > 6)
    v2 = 0;
  else
    v2 = off_100714690[(int)a1];
  v3 = CFSTR("escrow_record_not_found");
  if (HIDWORD(a1) == 1)
    v4 = CFSTR("escrow_record_not_found");
  else
    v4 = 0;
  if (HIDWORD(a1))
    v5 = (__CFString *)v4;
  else
    v5 = CFSTR("escrow_record_valid");
  if (a2 != 1)
    v3 = 0;
  if (a2)
    v6 = v3;
  else
    v6 = CFSTR("escrow_record_valid");
  v7 = v5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("State: {\n\ttoken status: %@,\n\tunwrapped record status: %@\n\twrapped record status: %@\n}"), v2, v7, v6));

  return v8;
}

uint64_t sub_10001DA7C(unint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((_DWORD)a2)
    return 0;
  if (HIDWORD(a1))
  {
    switch((int)a1)
    {
      case 0:
        if ((a2 & 0x400000000) != 0)
          result = 9;
        else
          result = 100;
        break;
      case 1:
        result = 4;
        break;
      case 2:
        result = 5;
        break;
      case 3:
        result = 6;
        break;
      case 4:
        result = 7;
        break;
      case 5:
        result = 1;
        break;
      case 6:
        result = 8;
        break;
      default:
        result = 100;
        break;
    }
  }
  else if ((_DWORD)a1)
  {
    return 2;
  }
  else
  {
    return 3;
  }
  return result;
}

void sub_10001DB10(void *a1)
{
  id v1;
  uint64_t *v2;
  uint64_t *v3;
  id v4;
  uint64_t state;
  int v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  _DWORD v13[2];
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;

  v1 = a1;
  v2 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (v2)
  {
    v3 = v2;
    v4 = objc_retainAutorelease(v1);
    state = aks_remote_peer_get_state(0, objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"), v3);
    v6 = state;
    if (!(_DWORD)state || (_DWORD)state == -536870184)
    {
      v7 = auto_unlock_log(state);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = sub_10001D9C8(*v3, v3[1]);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v11 = sub_10001DC78(*((_DWORD *)v3 + 3));
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13[0] = 67109634;
        v13[1] = v6;
        v14 = 2112;
        v15 = v10;
        v16 = 2112;
        v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Status %d, Peer State: %@, flags: %@", (uint8_t *)v13, 0x1Cu);

      }
    }
    free(v3);
  }

}

id sub_10001DC78(char a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = v2;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_7:
    objc_msgSend(v3, "addObject:", CFSTR("originator"));
    if ((a1 & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  objc_msgSend(v2, "addObject:", CFSTR("registered"));
  if ((a1 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a1 & 4) != 0)
LABEL_4:
    objc_msgSend(v3, "addObject:", CFSTR("armed"));
LABEL_5:
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", ")));

  return v4;
}

const __CFString *sub_10001DD10(uint64_t a1)
{
  const __CFString *result;

  result = CFSTR("SDAKSPeerStateNotSetUp");
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("SDAKSPeerStateNotAvailable");
      break;
    case 2:
      result = CFSTR("SDAKSPeerStateOnlyEscrowAvailable");
      break;
    case 3:
      result = CFSTR("SDAKSPeerStateTokenAvailable");
      break;
    case 4:
      result = CFSTR("SDAKSPeerStateNoPasscodeUnlockWithinWindow");
      break;
    case 5:
      result = CFSTR("SDAKSPeerStateNoRemoteUnlockWithinWindow");
      break;
    case 6:
      result = CFSTR("SDAKSPeerStateTooManyFailedPasscodeEntries");
      break;
    case 7:
      result = CFSTR("SDAKSPeerStatePasscodeDisabled");
      break;
    case 8:
      result = CFSTR("SDAKSPeerStateBioLockout");
      break;
    case 9:
      result = CFSTR("SDAKSPeerStateNotArmed");
      break;
    default:
      if (a1 == 100)
        result = CFSTR("SDAKSPeerStateUnknown");
      else
        result = CFSTR("Unexpected type");
      break;
  }
  return result;
}

uint64_t sub_10001DDC4()
{
  uint64_t device_state;
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v10[16];
  _OWORD v11[4];
  __int16 v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  device_state = aks_get_device_state(0, v11);
  if ((v11[0] & 0x10) != 0)
  {
    v7 = auto_unlock_log(device_state);
    v4 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      v6 = "bio armed";
      goto LABEL_7;
    }
LABEL_8:
    v8 = 1;
    goto LABEL_12;
  }
  v1 = MKBDeviceUnlockedSinceBoot(device_state);
  v2 = v1;
  v3 = auto_unlock_log(v1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2 == 1)
  {
    if (v5)
    {
      *(_WORD *)v10 = 0;
      v6 = "biometric timer expired, but reporting bio armed anyway";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v10, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (v5)
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "not armed", v10, 2u);
  }
  v8 = 0;
LABEL_12:

  return v8;
}

id sub_10001DEF4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t der;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint8_t buf[8];

  v36 = 0;
  v37 = 0;
  if ((unint64_t)(a1 - 1) >= 3)
    v3 = 0;
  else
    v3 = (a1 + 8);
  v4 = auto_unlock_log(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SDAKSGenerateLocalLTK attested: %d", buf, 8u);
  }

  if (a2)
  {
    v35 = 0;
    v6 = MAECopyDCRTWithError(&v35);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = v35;
    v9 = v8;
    if (v7)
    {
      v10 = aks_params_create(0, 0);
      *(_QWORD *)buf = 4;
      v11 = objc_retainAutorelease(v7);
      v12 = aks_params_set_data(v10, 21, objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));
      if ((_DWORD)v12)
      {
        v13 = auto_unlock_log(v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_100020700();
      }
      else
      {
        v24 = aks_params_set_number(v10, 20, buf);
        if ((_DWORD)v24)
        {
          v25 = auto_unlock_log(v24);
          v14 = objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_10002069C();
        }
        else
        {
          v33 = 0;
          v34 = 0;
          der = aks_params_get_der(v10, &v34, &v33);
          if (!(_DWORD)der)
          {
            v16 = aks_create_signing_key_with_params(der, v3, v34, v33, &v37, &v36);
            goto LABEL_21;
          }
          v27 = auto_unlock_log(der);
          v14 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_100020638();
        }
      }
    }
    else
    {
      v17 = auto_unlock_log(v8);
      v14 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000205D4((uint64_t)v9, v14, v18, v19, v20, v21, v22, v23);
    }

    v16 = -536870212;
LABEL_21:

    goto LABEL_22;
  }
  v15 = aks_create_signing_key(0, v3, &v37, &v36);
  v16 = v15;
LABEL_22:
  if (v16 == -536870212 || !v36)
  {
    v31 = auto_unlock_log(v15);
    v30 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      sub_100020568();
    v28 = 0;
  }
  else
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v37));
    v29 = auto_unlock_log(v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Generated local key", buf, 2u);
    }
  }

  if (v37)
    free(v37);
  return v28;
}

id sub_10001E1FC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const __CFString *v14;
  const __CFString *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const __CFString *v39;
  __int16 v40;
  id v41;

  v7 = a1;
  v8 = a3;
  v9 = v8;
  v26 = 0;
  v27 = 0;
  if ((unint64_t)(a4 - 1) >= 3)
    v10 = 0;
  else
    v10 = (a4 + 8);
  if ((unint64_t)(a2 - 1) >= 3)
    v11 = 0;
  else
    v11 = (a2 + 8);
  v12 = auto_unlock_log(v8);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = CFSTR("YES");
    *(_DWORD *)buf = 67110659;
    v29 = 0;
    v30 = 1024;
    if (v9)
      v15 = CFSTR("YES");
    else
      v15 = CFSTR("NO");
    v31 = v10;
    if (!v7)
      v14 = CFSTR("NO");
    v32 = 2112;
    v33 = v15;
    v34 = 2113;
    v35 = v9;
    v36 = 1024;
    v37 = v11;
    v38 = 2112;
    v39 = v14;
    v40 = 2113;
    v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Signing (handle = %d, local class %d, local exists %@, local data %{private}@, remote class %d, remote exists %@, remote data %{private}@)", buf, 0x3Cu);
  }

  v16 = objc_retainAutorelease(v9);
  v17 = objc_msgSend(v16, "bytes");
  v18 = objc_msgSend(v16, "length");
  v19 = objc_retainAutorelease(v7);
  v20 = aks_sign_signing_key(0, v10, v17, v18, v11, objc_msgSend(v19, "bytes"), objc_msgSend(v19, "length"), &v27, &v26);
  if ((_DWORD)v20 == -536870212 || !v26)
  {
    v24 = auto_unlock_log(v20);
    v23 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_100020764();
    v21 = 0;
  }
  else
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v27));
    v22 = auto_unlock_log(v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Signed remote key", buf, 2u);
    }
  }

  if (v27)
    free(v27);

  return v21;
}

void sub_10001E478(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint8_t buf[16];

  v1 = a1;
  v2 = auto_unlock_log(v1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Beginning DCRT retrieval", buf, 2u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001E538;
  v5[3] = &unk_100714648;
  v6 = v1;
  v4 = v1;
  MAEIssueDCRTWithCallback(0, 0, v5);

}

void sub_10001E538(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint8_t v14[16];

  v3 = a2;
  v4 = auto_unlock_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000207D0((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);

    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DCRT retrieval finished", v14, 2u);
    }

    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v13();

}

uint64_t sub_10001E5F8(void *a1, void *a2, int a3, _DWORD *a4, int a5)
{
  unsigned int v5;
  uint64_t v6;

  if (a5)
    v5 = 4;
  else
    v5 = 10;
  if (a3)
    v6 = v5 | 0x80;
  else
    v6 = v5;
  return sub_10001E624(a1, a2, v6, 0, 0, a4);
}

uint64_t sub_10001E624(void *a1, void *a2, uint64_t a3, void *a4, int a5, _DWORD *a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  const __CFString *v50;
  const __CFString *v51;
  void *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  id v56;
  id v57;
  int v58;
  int v60;
  uint8_t buf[4];
  _BYTE v62[10];
  _BYTE v63[10];
  _BYTE v64[10];
  _BYTE v65[10];
  _BYTE v66[20];
  __int16 v67;
  id v68;

  v10 = a1;
  v11 = a2;
  v12 = a4;
  v13 = v12;
  v60 = 0;
  v58 = a5;
  if ((a5 & 1) == 0)
  {
    v14 = auto_unlock_log(v12);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v62 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SDAKSCreateSession flags: %d", buf, 8u);
    }

  }
  v57 = v11;
  if (!v10 || !v11)
  {
    v16 = auto_unlock_log(v12);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (v10)
        v50 = CFSTR("YES");
      else
        v50 = CFSTR("NO");
      if (v11)
        v51 = CFSTR("YES");
      else
        v51 = CFSTR("NO");
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
      *(_DWORD *)buf = 138413571;
      *(_QWORD *)v62 = v50;
      *(_WORD *)&v62[8] = 2113;
      *(_QWORD *)v63 = v10;
      *(_WORD *)&v63[8] = 2112;
      *(_QWORD *)v64 = v51;
      *(_WORD *)&v64[8] = 2113;
      *(_QWORD *)v65 = v57;
      *(_WORD *)&v65[8] = 1024;
      *(_DWORD *)v66 = a3;
      *(_WORD *)&v66[4] = 2112;
      *(_QWORD *)&v66[6] = v52;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Either local or remoteLTK is nil. This shouldn't happen; expect AKS to throw an error. local exists %@, localKey"
        " = %{private}@,\n"
        " remote exists %@, remoteKey = %{private}@, flags: %d. Callstack:\n"
        "%@",
        buf,
        0x3Au);

      v11 = v57;
    }

  }
  v56 = v10;
  v18 = objc_retainAutorelease(v10);
  v19 = objc_msgSend(v18, "bytes");
  v20 = objc_msgSend(v18, "length");
  v21 = objc_retainAutorelease(v11);
  v22 = objc_msgSend(v21, "bytes");
  v23 = objc_msgSend(v21, "length");
  v24 = objc_retainAutorelease(v13);
  v25 = aks_remote_session(0, a3, v19, v20, v22, v23, objc_msgSend(v24, "bytes"), objc_msgSend(v24, "length"), &v60);
  v26 = v25;
  v27 = a6;
  if ((_DWORD)v25 == -536870211)
  {
    v28 = auto_unlock_log(v25);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received no memory error when creating session, clearing and retrying", buf, 2u);
    }

    sub_10001D818(v30);
    v60 = 0;
    v31 = objc_retainAutorelease(v18);
    v32 = objc_msgSend(v31, "bytes");
    v33 = objc_msgSend(v31, "length");
    v34 = objc_retainAutorelease(v21);
    v35 = objc_msgSend(v34, "bytes");
    v36 = objc_msgSend(v34, "length");
    v37 = objc_retainAutorelease(v24);
    v25 = aks_remote_session(0, a3, v32, v33, v35, v36, objc_msgSend(v37, "bytes"), objc_msgSend(v37, "length"), &v60);
    v26 = v25;
    v27 = a6;
  }
  v38 = auto_unlock_log(v25);
  v39 = objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v62 = v60;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Auth session -- create (session id: %d)", buf, 8u);
  }

  if (!v26)
  {
    v43 = v60;
    if (!v27)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!v58)
  {
    v44 = auto_unlock_log(v40);
    v45 = objc_claimAutoreleasedReturnValue(v44);
    v46 = v45;
    if (v26 == -536870160)
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v62 = -536870160;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Escrow record not found status = %d", buf, 8u);
      }

    }
    else
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        v53 = CFSTR("NO");
        *(_DWORD *)buf = 67110915;
        *(_DWORD *)v62 = v26;
        *(_WORD *)&v62[4] = 1024;
        if (v56)
          v54 = CFSTR("YES");
        else
          v54 = CFSTR("NO");
        *(_DWORD *)&v62[6] = a3;
        if (v57)
          v55 = CFSTR("YES");
        else
          v55 = CFSTR("NO");
        *(_WORD *)v63 = 2112;
        if (v24)
          v53 = CFSTR("YES");
        *(_QWORD *)&v63[2] = v54;
        *(_WORD *)v64 = 2113;
        *(_QWORD *)&v64[2] = v18;
        *(_WORD *)v65 = 2112;
        *(_QWORD *)&v65[2] = v55;
        *(_WORD *)v66 = 2113;
        *(_QWORD *)&v66[2] = v21;
        *(_WORD *)&v66[10] = 2112;
        *(_QWORD *)&v66[12] = v53;
        v67 = 2113;
        v68 = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "AKS session failure: (status = %d, flags = %d,\n local exists %@, localKey = %{private}@,\n remote exists %@, remoteKey = %{private}@\n secret exists: %@, secret = %{private}@)", buf, 0x4Au);
      }

      sub_10001DB10(v21);
    }
LABEL_34:
    v43 = -1;
    if (!v27)
      goto LABEL_36;
LABEL_35:
    *v27 = v26;
    goto LABEL_36;
  }
  if (v26 != -536363000 && v26 != -536870184)
  {
    v47 = auto_unlock_log(v40);
    v48 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v62 = v26;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "got error: %d", buf, 8u);
    }

    goto LABEL_34;
  }
  v41 = auto_unlock_log(v40);
  v42 = objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Record exists, but not available", buf, 2u);
  }

  v43 = 0;
  if (v27)
    goto LABEL_35;
LABEL_36:

  return v43;
}

uint64_t sub_10001EBE8(void *a1, void *a2, int a3, _DWORD *a4)
{
  uint64_t v4;

  if (a3)
    v4 = 129;
  else
    v4 = 1;
  return sub_10001E624(a1, a2, v4, 0, 0, a4);
}

uint64_t sub_10001EC04(void *a1, void *a2, int a3, int a4, int a5, void *a6, _DWORD *a7)
{
  return sub_10001EC34(a1, a2, a3, a4, a5, 0, a6, 0, a7);
}

uint64_t sub_10001EC34(void *a1, void *a2, int a3, int a4, int a5, int a6, void *a7, int a8, _DWORD *a9)
{
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  uint64_t v30;
  int v32;
  const __CFString *v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  const __CFString *v37;
  __int16 v38;
  const __CFString *v39;

  if (a3)
    v15 = 128;
  else
    v15 = 0;
  if (a5)
    v15 |= 7u;
  if (a7)
    v16 = 1;
  else
    v16 = a4;
  if (v16)
    v17 = 5;
  else
    v17 = 2;
  v18 = v17 | v15;
  v19 = v15 | 0x100;
  if (a6)
    v20 = v19;
  else
    v20 = v18;
  v21 = a7;
  v22 = a2;
  v23 = a1;
  v24 = auto_unlock_log(v23);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = CFSTR("NO");
    if (a3)
      v27 = CFSTR("YES");
    else
      v27 = CFSTR("NO");
    if (a5)
      v28 = CFSTR("YES");
    else
      v28 = CFSTR("NO");
    v32 = 138413058;
    v33 = v27;
    if (a4)
      v29 = CFSTR("YES");
    else
      v29 = CFSTR("NO");
    v34 = 2112;
    v35 = v28;
    v36 = 2112;
    v37 = v29;
    if (v21)
      v26 = CFSTR("YES");
    v38 = 2112;
    v39 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Creating auth session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@", (uint8_t *)&v32, 0x2Au);
  }

  v30 = sub_10001E624(v23, v22, v20, v21, a8, a9);
  return v30;
}

uint64_t sub_10001EDE0(void *a1, void *a2, int a3, int a4, int a5, void *a6, int a7, _DWORD *a8)
{
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const __CFString *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  const __CFString *v35;

  v15 = a6;
  v16 = a2;
  v17 = a1;
  v18 = auto_unlock_log(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = CFSTR("NO");
    if (a3)
      v21 = CFSTR("YES");
    else
      v21 = CFSTR("NO");
    if (a5)
      v22 = CFSTR("YES");
    else
      v22 = CFSTR("NO");
    v28 = 138413058;
    v29 = v21;
    if (a4)
      v23 = CFSTR("YES");
    else
      v23 = CFSTR("NO");
    v30 = 2112;
    v31 = v22;
    v32 = 2112;
    v33 = v23;
    if (v15)
      v20 = CFSTR("YES");
    v34 = 2112;
    v35 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Creating bio arm session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@", (uint8_t *)&v28, 0x2Au);
  }
  if (a3)
    v24 = 128;
  else
    v24 = 0;
  if (a5)
    v24 |= 4u;
  v25 = v24 | 0xBu;

  v26 = sub_10001E624(v17, v16, v25, v15, a7, a8);
  return v26;
}

uint64_t sub_10001EF6C(void *a1, void *a2, int a3, int a4, int a5, void *a6, int a7, _DWORD *a8)
{
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const __CFString *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  const __CFString *v35;

  v15 = a6;
  v16 = a2;
  v17 = a1;
  v18 = auto_unlock_log(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = CFSTR("NO");
    if (a3)
      v21 = CFSTR("YES");
    else
      v21 = CFSTR("NO");
    if (a5)
      v22 = CFSTR("YES");
    else
      v22 = CFSTR("NO");
    v28 = 138413058;
    v29 = v21;
    if (a4)
      v23 = CFSTR("YES");
    else
      v23 = CFSTR("NO");
    v30 = 2112;
    v31 = v22;
    v32 = 2112;
    v33 = v23;
    if (v15)
      v20 = CFSTR("YES");
    v34 = 2112;
    v35 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Creating assert delay session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@", (uint8_t *)&v28, 0x2Au);
  }
  if (a3)
    v24 = 128;
  else
    v24 = 0;
  if (a5)
    v24 |= 3u;
  v25 = v24 | 0xCu;

  v26 = sub_10001E624(v17, v16, v25, v15, a7, a8);
  return v26;
}

uint64_t sub_10001F0F4(void *a1, void *a2, void *a3, _DWORD *a4)
{
  return sub_10001E624(a1, a2, 7, a3, 0, a4);
}

id sub_10001F108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v6;
  void *v7;

  v6 = 0;
  v7 = 0;
  v1 = aks_remote_session_token(a1, &v7, &v6);
  if ((_DWORD)v1 == -536870212)
  {
    v2 = auto_unlock_log(v1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100020834();

    v4 = 0;
  }
  else
  {
    if (!v7)
    {
      v4 = 0;
      return v4;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v7, v6));
  }
  if (v7)
    free(v7);
  return v4;
}

BOOL sub_10001F1B0(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t buf[16];

  v3 = a2;
  v4 = a1;
  v5 = auto_unlock_log(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disabling AKS escrow record", buf, 2u);
  }

  v7 = objc_retainAutorelease(v4);
  v8 = objc_msgSend(v7, "bytes");
  v9 = objc_msgSend(v7, "length");

  v10 = objc_retainAutorelease(v3);
  v11 = objc_msgSend(v10, "bytes");
  v12 = objc_msgSend(v10, "length");

  v13 = aks_remote_session(0, 3, v8, v9, v11, v12, 0, 0, 0);
  v14 = v13;
  if ((_DWORD)v13 == -536870212)
  {
    v15 = auto_unlock_log(v13);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_100020860();

  }
  return v14 != -536870212;
}

BOOL sub_10001F2EC(uint64_t a1, id a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  int v19;

  v16 = 0;
  v17 = 0;
  v5 = objc_retainAutorelease(a2);
  v6 = objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");

  v8 = aks_remote_session_step(a1, v6, v7, &v17, &v16);
  v9 = v8;
  v10 = auto_unlock_log(v8);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Step status: %d", buf, 8u);
  }

  if (v9)
  {
    v13 = auto_unlock_log(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_10002088C();

  }
  else if (a3)
  {
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v17, v16));
  }
  if (v17)
    free(v17);
  return v9 == 0;
}

id sub_10001F450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  void *v14;

  v13 = 0;
  v14 = 0;
  v1 = aks_remote_peer_confirm(a1, &v14, &v13);
  if ((_DWORD)v1 == -536870212 || v13 == 0)
  {
    v3 = auto_unlock_log(v1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1000208B8((uint64_t)&v13, v4, v5, v6, v7, v8, v9, v10);

    v11 = 0;
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v14));
  }
  if (v14)
    free(v14);
  return v11;
}

uint64_t sub_10001F4F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  int v14;
  const __CFString *v15;

  v3 = a2;
  v4 = v3;
  if (v3 && (v3 = objc_msgSend(v3, "length")) != 0)
  {
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataUsingEncoding:", 4)));
    v6 = aks_remote_peer_setup(a1, -[NSObject bytes](v5, "bytes"), -[NSObject length](v5, "length"), 0, 0);
    v7 = v6;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == -536870194)
      {
        v8 = auto_unlock_log(v6);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_100020980();
        v7 = 147;
      }
      else
      {
        v12 = auto_unlock_log(v6);
        v9 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_100020920();
        v7 = 172;
      }

    }
  }
  else
  {
    v10 = auto_unlock_log(v3);
    v5 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v11 = CFSTR("YES");
      if (!v4)
        v11 = CFSTR("NO");
      v14 = 138412290;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Missing passcode (exists: %@)", (uint8_t *)&v14, 0xCu);
    }
    v7 = 175;
  }

  return v7;
}

uint64_t sub_10001F690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;

  v1 = aks_remote_peer_setup(a1, 0, 0, 0, 0);
  if (!(_DWORD)v1)
    return 0;
  v2 = auto_unlock_log(v1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1000209AC();

  return 172;
}

BOOL sub_10001F6FC(uint64_t a1)
{
  return aks_remote_peer_confirm(a1, 0, 0) != -536870212;
}

BOOL sub_10001F728(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Auth session -- reset (session id: %d)", (uint8_t *)v5, 8u);
  }

  return aks_reset_session(a1) != -536870212;
}

id sub_10001F7E0(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _DWORD *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD v55[6];
  _QWORD v56[6];
  uint8_t buf[16];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD v78[3];

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v78[0] = 0;
  v76 = 0;
  v77 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71 = 0;
  v68 = 0;
  v69 = 0;
  v67 = 0;
  v65 = 0;
  v66 = 0;
  v62 = 0;
  v63 = &v62;
  v64 = 0x2020000000;
  v58 = 0;
  v59 = &v58;
  v60 = 0x2020000000;
  v61 = 0;
  v54 = v3;
  if (!v3)
  {
    v44 = auto_unlock_log(v4);
    v25 = objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_100020A0C();
    goto LABEL_70;
  }
  v6 = objc_retainAutorelease(v3);
  v7 = objc_msgSend(v6, "UTF8String");
  v8 = objc_msgSend(v6, "length");
  v9 = auto_unlock_log(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating keybags", buf, 2u);
  }

  if (aks_create_bag(v7, v8, 0, v78))
    goto LABEL_48;
  v11 = aks_remote_session_reset_all();
  if ((_DWORD)v11)
    goto LABEL_48;
  v12 = auto_unlock_log(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating LTKs", buf, 2u);
  }

  v14 = aks_create_signing_key(4294967293, 11, &v77, &v75);
  if ((_DWORD)v14)
  {
    v45 = auto_unlock_log(v14);
    v25 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_100020C84();
    goto LABEL_70;
  }
  v15 = aks_create_signing_key(v78[0], 9, &v76, &v74);
  if ((_DWORD)v15)
  {
    v46 = auto_unlock_log(v15);
    v25 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_100020C18();
    goto LABEL_70;
  }
  v16 = aks_sign_signing_key(4294967293, 11, v77, v75, 9, v76, v74, &v72, &v70, v3);
  if ((_DWORD)v16)
  {
    v47 = auto_unlock_log(v16);
    v25 = objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_100020BAC();
    goto LABEL_70;
  }
  v17 = aks_sign_signing_key(v78[0], 9, v76, v74, 11, v77, v75, &v73, &v71, v54);
  if ((_DWORD)v17)
  {
    v48 = auto_unlock_log(v17);
    v25 = objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_100020B40();
    goto LABEL_70;
  }
  v18 = auto_unlock_log(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Authorization Test: Enabling test keybag", buf, 2u);
  }

  if (aks_remote_session(4294967293, 4, v77, v75, v72, v70, 0, 0, (char *)&v69 + 4))
    goto LABEL_48;
  if (aks_remote_session(v78[0], 132, v76, v74, v73, v71, 0, 0, &v69))
    goto LABEL_48;
  if (sub_100020014(HIDWORD(v69), v69))
    goto LABEL_48;
  if (aks_remote_peer_setup(HIDWORD(v69), v7, (int)v8, 0, 0))
    goto LABEL_48;
  v20 = aks_remote_peer_confirm(v69, &v68, &v67);
  if ((_DWORD)v20)
    goto LABEL_48;
  v21 = auto_unlock_log(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating ACM context", buf, 2u);
  }

  if (!v5)
  {
    ACMContextCreate((uint64_t *)&v66);
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_1000200E4;
    v56[3] = &unk_100714670;
    v56[4] = &v62;
    v56[5] = &v58;
    ACMContextGetExternalForm(v66, (uint64_t)v56);
    if (v63[3])
    {
      v27 = ACMContextContainsCredentialTypeEx(v66, 9, 0);
      if ((_DWORD)v27)
      {
        v5 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v63[3], v59[3]));
        free((void *)v63[3]);
        v63[3] = 0;
        goto LABEL_28;
      }
      v53 = auto_unlock_log(v27);
      v25 = objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        sub_100020A64();
    }
    else
    {
      v52 = auto_unlock_log(v26);
      v25 = objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        sub_100020A38();
    }
    v5 = 0;
    goto LABEL_70;
  }
  v5 = objc_retainAutorelease(v5);
  v23 = ACMContextCreateWithExternalForm(objc_msgSend(v5, "bytes"), (uint64_t)objc_msgSend(v5, "length"));
  v66 = v23;
  if (!v23)
  {
    v24 = auto_unlock_log(0);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      sub_100020B14();
    goto LABEL_70;
  }
LABEL_28:
  v28 = auto_unlock_log(v23);
  v29 = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Authorization Test: Starting authorization session", buf, 2u);
  }

  v30 = v77;
  v31 = v75;
  v32 = v72;
  v33 = v70;
  v5 = objc_retainAutorelease(v5);
  if (!aks_remote_session(4294967293, 7, v30, v31, v32, v33, objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"), (char *)&v69 + 4)&& !aks_remote_session(v78[0], 135, v76, v74, v73, v71, v68, v67, &v69)&& !sub_100020014(HIDWORD(v69), v69)&& !aks_remote_session_reset(HIDWORD(v69)))
  {
    v34 = aks_remote_session_reset(v69);
    if (!(_DWORD)v34)
    {
      v35 = auto_unlock_log(v34);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Authorization Test: Session complete checking for credential", buf, 2u);
      }

      v37 = ACMContextContainsCredentialTypeEx(v66, 9, 0);
      if ((_DWORD)v37)
      {
        v49 = auto_unlock_log(v37);
        v25 = objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          sub_100020AE8();
      }
      else
      {
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472;
        v55[2] = sub_100020154;
        v55[3] = &unk_100714670;
        v55[4] = &v62;
        v55[5] = &v58;
        ACMContextGetExternalForm(v66, (uint64_t)v55);
        if (v59[3])
        {
          v39 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v63[3]));
          v40 = (void *)v39;
          if (v39)
          {
            v41 = auto_unlock_log(v39);
            v25 = objc_claimAutoreleasedReturnValue(v41);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Authorization Test: Returning credential", buf, 2u);
            }
            goto LABEL_42;
          }
          v51 = auto_unlock_log(0);
          v25 = objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            sub_100020ABC();
        }
        else
        {
          v50 = auto_unlock_log(v38);
          v25 = objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            sub_100020A90();
        }
      }
LABEL_70:
      v40 = 0;
LABEL_42:

      goto LABEL_43;
    }
  }
LABEL_48:
  v40 = 0;
LABEL_43:
  v42 = (void *)v63[3];
  if (v42)
    free(v42);
  if (v66)
    ACMContextDelete(v66, 0);
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(&v62, 8);

  return v40;
}

void sub_10001FFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100020014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = 0;
  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v5 = aks_remote_session_step(a2, v10, v4, &v11, &v9);
    if (v10)
    {
      free(v10);
      v10 = 0;
    }
    if ((_DWORD)v5)
      break;
    v6 = v11;
    if (!v9)
      goto LABEL_12;
    v5 = aks_remote_session_step(a1, v11, v9, &v10, &v8);
    if (v11)
    {
      free(v11);
      v11 = 0;
    }
    if ((_DWORD)v5)
      goto LABEL_14;
    v4 = v8;
    if (!v8)
    {
      v5 = 0;
      goto LABEL_14;
    }
  }
  v6 = v11;
LABEL_12:
  if (v6)
  {
    free(v6);
    v11 = 0;
  }
LABEL_14:
  if (v10)
    free(v10);
  return v5;
}

void *sub_1000200E4(uint64_t a1, const void *a2, size_t size)
{
  void *result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = malloc_type_malloc(size, 0xAE607954uLL);
  result = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (result)
  {
    result = memcpy(result, a2, size);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = size;
  }
  return result;
}

void *sub_100020154(uint64_t a1, const void *a2, size_t size)
{
  void *result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = malloc_type_malloc(size, 0xF6F8783AuLL);
  result = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (result)
  {
    result = memcpy(result, a2, size);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = size;
  }
  return result;
}

void sub_1000201C4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1000201D4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

void sub_10002022C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to lock keybag", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020258()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to create ACM context (status: %d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000202B8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to create ACM context from external form %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10002031C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create ACM context (malloc failure)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020348()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "ACM context does not contain credential (status: %d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000203A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to get keybag UUID (status: %d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020408()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Resetting all AKS sessions -- we shouldn't ever need to do this", v1, 2u);
  sub_1000161DC();
}

void sub_100020440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to get peer state (status = %d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000204A0(uint64_t a1, int a2, NSObject *a3)
{
  id v6;
  void *v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  void *v11;
  __int16 v12;
  int v13;

  v6 = sub_10001D9C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = *(_DWORD *)(a1 + 12);
  v9[0] = 67109634;
  v9[1] = a2;
  v10 = 2112;
  v11 = v7;
  v12 = 1024;
  v13 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Status %d, Peer State: %@, flags %d", (uint8_t *)v9, 0x18u);

}

void sub_100020568()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100020214();
  sub_1000201D4((void *)&_mh_execute_header, v0, (uint64_t)v0, "Local key generation failed (error %d, output length = %d)", v1);
  sub_10001949C();
}

void sub_1000205D4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Unable to generate DCRT: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100020638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000201F4();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Could not construct der parameters (%d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10002069C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000201F4();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Could not set key type (%d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020700()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000201F4();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Could not add certificate to AKS parameters (%d)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020764()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100020214();
  sub_1000201D4((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failed to sign remote key (error = %d, output length = %d)", v1);
  sub_10001949C();
}

void sub_1000207D0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "DCRT retrieval failed: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100020834()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create token", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to disable record", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10002088C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Step failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000208B8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Escrow generation failed (length = %d)", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100020920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Remote peer setup, could not validate escrow %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020980()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Remote peer setup, incorrect user password", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000209AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Remote peer setup, could not finalize registration %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020A0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161DC();
}

void sub_100020A38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create external ACM form", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020A64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Authorization Test: Unexpected credential in the acmref", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020A90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Authorization Test: External form is empty", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020ABC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Authorization Test: External data unable to be created", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020AE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Authorization Test: Credential missing", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020B14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create ACM context from external form", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100020B40()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 67109376;
  sub_1000201E0();
  sub_1000201D4((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to sign real signing key, aks_sign_signing_key()@%d expect:0, got:%x", (uint8_t *)v2);
  sub_10001949C();
}

void sub_100020BAC()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 67109376;
  sub_1000201E0();
  sub_1000201D4((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to sign test signing key, aks_sign_signing_key()@%d expect:0, got:%x", (uint8_t *)v2);
  sub_10001949C();
}

void sub_100020C18()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 67109376;
  sub_1000201E0();
  sub_1000201D4((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create test signing key, aks_create_signing_key()@%d expect:0, got:%x", (uint8_t *)v2);
  sub_10001949C();
}

void sub_100020C84()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 67109376;
  sub_1000201E0();
  sub_1000201D4((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create local signing key, aks_create_signing_key()@%d expect:0, got:%x", (uint8_t *)v2);
  sub_10001949C();
}

uint64_t SDUnlockSessionConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_56;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_58:
        v37 = 12;
        goto LABEL_63;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_62:
        v37 = 8;
LABEL_63:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 3u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                v24 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v24 = 0;
LABEL_67:
        v38 = v24 != 0;
        v39 = 16;
        goto LABEL_76;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 20) |= 8u;
        while (2)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v9 = v28++ >= 9;
              if (v9)
              {
                v29 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v29 = 0;
LABEL_71:
        v38 = v29 != 0;
        v39 = 17;
        goto LABEL_76;
      case 5u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 20) |= 0x10u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v34 |= (unint64_t)(v36 & 0x7F) << v32;
      if ((v36 & 0x80) == 0)
        goto LABEL_73;
      v32 += 7;
      v9 = v33++ >= 9;
      if (v9)
      {
        v34 = 0;
        goto LABEL_75;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v34 = 0;
LABEL_75:
    v38 = v34 != 0;
    v39 = 18;
LABEL_76:
    *(_BYTE *)(a1 + v39) = v38;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100021F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021F94(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerAppStoreSearch");
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "cancelAction"));
  objc_msgSend(WeakRetained, "actionSelected:", v2);

}

uint64_t SDUnlockSessionKeyExchangeResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v30 = 20;
        goto LABEL_50;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_49:
        v30 = 16;
LABEL_50:
        *(_DWORD *)(a1 + v30) = v14;
        continue;
      case 3u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

        continue;
      case 4u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v27 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
        goto LABEL_52;
      v25 += 7;
      v9 = v26++ >= 9;
      if (v9)
      {
        v27 = 0;
        goto LABEL_54;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v27 = 0;
LABEL_54:
    *(_BYTE *)(a1 + 24) = v27 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100023DC0(void *a1, NSObject *a2)
{
  id v3;
  int v4;
  int v5;
  id v6;
  __int16 v7;
  int v8;

  v3 = objc_msgSend(objc_retainAutorelease(a1), "fileSystemRepresentation");
  v4 = *__error();
  v5 = 136315394;
  v6 = v3;
  v7 = 1024;
  v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to issue sandbox extension for %s with error %d", (uint8_t *)&v5, 0x12u);
}

id sub_1000246B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_1000248AC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "releaseIdleSleepAssertion");
  objc_msgSend(*(id *)(a1 + 32), "invalidateAssertionTimer");
  return _objc_msgSend(*(id *)(a1 + 32), "logAutoUnlockEnd");
}

void sub_100025038(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100025050(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "beginAKSSession");
}

void sub_1000253E8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_100025414(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000254B8;
  v6[3] = &unk_100714700;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_1000254B8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting wifi request", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "nq_handleWiFiRequestStartedWithStartAWDLHandler:", *(_QWORD *)(a1 + 32));

}

void sub_100025538(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  _QWORD block[5];
  id v6[2];

  v4 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000255C8;
  block[3] = &unk_100714750;
  v6[1] = a3;
  objc_copyWeak(v6, (id *)(a1 + 48));
  block[4] = *(_QWORD *)(a1 + 40);
  dispatch_async(v4, block);
  objc_destroyWeak(v6);
}

void sub_1000255C8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = auto_unlock_log(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10002924C(a1, v3);

    v4 = (id *)(a1 + 40);
    WeakRetained = objc_loadWeakRetained(v4);
    objc_msgSend(WeakRetained, "invalidateResponseTimer");

    v6 = objc_loadWeakRetained(v4);
    v7 = SFAutoUnlockErrorDomain;
    v11 = NSLocalizedDescriptionKey;
    v12 = CFSTR("Starting AWDL failed");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 114, v8));
    objc_msgSend(v6, "notifyDelegateWithError:", v9);

  }
  else
  {
    v10 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v10, "nq_awdlNetworkStarted");

  }
}

void sub_100025738(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[4];
  id v3;

  v1 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000257B0;
  block[3] = &unk_1007145D0;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_1000257B0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "nq_handleWiFiRequestInvalidated");

}

void sub_10002601C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100026850(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000278A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;
  uint8_t buf[4];
  void *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = auto_unlock_log(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error sending SDAutoUnlockAWDLInfo (error: %@)", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v7 = *(void **)(a1 + 32);
    v8 = SFAutoUnlockErrorDomain;
    v11 = NSLocalizedDescriptionKey;
    v12 = CFSTR("AWDL info exchange failed");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 103, v9));
    objc_msgSend(v7, "notifyDelegateWithError:", v10);

  }
}

void sub_100027B4C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSErrorUserInfoKey v10;
  const __CFString *v11;

  v3 = a2;
  v4 = auto_unlock_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1000297A4();

  objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
  v6 = *(void **)(a1 + 32);
  v7 = SFAutoUnlockErrorDomain;
  v10 = NSLocalizedDescriptionKey;
  v11 = CFSTR("Exchange request failed");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 201, v8));
  objc_msgSend(v6, "notifyDelegateWithError:", v9);

}

void sub_100027DEC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSErrorUserInfoKey v10;
  const __CFString *v11;

  v3 = a2;
  v4 = auto_unlock_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_100029804();

  objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
  v6 = *(void **)(a1 + 32);
  v7 = SFAutoUnlockErrorDomain;
  v10 = NSLocalizedDescriptionKey;
  v11 = CFSTR("Exchange request failed");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 103, v8));
  objc_msgSend(v6, "notifyDelegateWithError:", v9);

}

void sub_1000280D0(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint8_t buf[8];
  NSErrorUserInfoKey v14;
  const __CFString *v15;

  v4 = objc_msgSend(*(id *)(a1 + 32), "sessionCompleted");
  if ((v4 & 1) != 0)
  {
    v5 = auto_unlock_log(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AuthToken ack after session completed", buf, 2u);
    }

  }
  else
  {
    if (a2)
    {
      objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
      v7 = *(void **)(a1 + 32);
      v8 = SFAutoUnlockErrorDomain;
      v14 = NSLocalizedDescriptionKey;
      v15 = CFSTR("Exchange request failed");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 103, v9));
      objc_msgSend(v7, "notifyDelegateWithError:", v10);

      return;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "exchangeResponse"));
      if (objc_msgSend(v12, "version") < 2
        || !objc_msgSend(*(id *)(a1 + 32), "userRequestRequired"))
      {
        v11 = *(_QWORD *)(a1 + 48);

        if (v11)
          return;
        v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequestStartedHandler"));
        (*((void (**)(id, uint64_t))v12 + 2))(v12, 1);
      }

    }
  }
}

void sub_1000283E8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setShouldAlertOnNotify:", 0);
  objc_msgSend(*(id *)(a1 + 32), "alertOfUnlock");
  objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
  objc_msgSend(*(id *)(a1 + 32), "notifyDelegateWithError:", v4);

}

id sub_100028880(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Assertion timer fired", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setAssertionTimer:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "releaseIdleSleepAssertion");
}

void sub_10002923C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_10002924C(uint64_t a1, NSObject *a2)
{
  void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  const __CFString *v7;
  __int16 v8;
  void *v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequest"));
  v4 = 136315650;
  v5 = "-[SDAutoUnlockKeySession createWiFiRequest]_block_invoke_2";
  v6 = 2112;
  v7 = CFSTR("Starting AWDL failed");
  v8 = 2112;
  v9 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s error %@ request:%@", (uint8_t *)&v4, 0x20u);

}

void sub_100029308()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "WiFi request invalidated", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100029334(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a1, a3, "handleAWDLInfo: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000293A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a1, a3, "Deserializing AWDL info failed %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10002940C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Local device needs to be armed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100029438(uint64_t a1, NSObject *a2)
{
  int v2;
  const __CFString *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 138412546;
  v3 = CFSTR("Auth prompt request missing info");
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ (request: %@)", (uint8_t *)&v2, 0x16u);
  sub_10001949C();
}

void sub_1000294BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Received image data but already using cache", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000294E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Received image data message without data %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100029548()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleSessionKeyExchangeResponse: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000295A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100029608()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Sending auth token for approve %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100029668()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to generate ranging session token", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100029694()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Sending auth token %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000296F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Creating auth token failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100029720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Confirmation failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10002974C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed awdl info serialization", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100029778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "WiFi interface disabled", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000297A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error sending auth prompt response %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100029804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error sending request %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100029864(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IOPMAssertionDeclareSystemActivity for key session returned %x", (uint8_t *)v2, 8u);
  sub_1000161DC();
}

uint64_t SDAuthenticationResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t Data;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_39;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_41:
        v28 = 40;
        goto LABEL_46;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 32;
        goto LABEL_37;
      case 3u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 16;
        goto LABEL_37;
      case 4u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        break;
      case 5u:
        v26 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v26);
        v20 = 8;
LABEL_37:
        v27 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_43;
      v22 += 7;
      v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_45:
    v28 = 24;
LABEL_46:
    *(_DWORD *)(a1 + v28) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002A6EC(id a1)
{
  SDUnlockIDSController *v1;
  void *v2;

  v1 = objc_alloc_init(SDUnlockIDSController);
  v2 = (void *)qword_1007C64A0;
  qword_1007C64A0 = (uint64_t)v1;

}

void sub_10002AC08(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  _BYTE v40[14];
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, IDSSendMessageOptionTimeoutKey);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", IDSMaxMessageTimeout));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, IDSSendMessageOptionTimeoutKey);

  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, IDSSendMessageOptionEnforceRemoteTimeoutsKey);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, IDSSendMessageOptionQueueOneIdentifierKey);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = &IDSSendMessageOptionLocalDeliveryKey;
  if (v7 != 1)
  {
    if (v7)
      goto LABEL_10;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, IDSSendMessageOptionLocalDeliveryKey);
    v8 = &IDSSendMessageOptionRequireBluetoothKey;
  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, *v8);
LABEL_10:
  v9 = objc_msgSend(objc_alloc((Class)IDSProtobuf), "initWithProtobufData:type:isResponse:", *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 88), 0);
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "idsService"));
  v12 = (void *)v10;
  if (*(_QWORD *)(a1 + 80) == 2)
  {
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "idsServiceClassA"));

    v12 = (void *)v13;
  }
  v14 = paired_unlock_log(v10, v11);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int16 *)(a1 + 88);
    v17 = objc_msgSend(*(id *)(a1 + 48), "length");
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "dataClassStringForDataClass:", *(_QWORD *)(a1 + 80)));
    v19 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)v40 = v16;
    *(_WORD *)&v40[4] = 2048;
    *(_QWORD *)&v40[6] = v17;
    v41 = 2112;
    v42 = v18;
    v43 = 2112;
    v44 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending protobuf (type = %d, size = %lu, data class = %@, data = %@)", buf, 0x26u);

  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", IDSDefaultPairedDevice));
  v37 = 0;
  v38 = 0;
  objc_msgSend(v12, "sendProtobuf:toDestinations:priority:options:identifier:error:", v9, v20, 300, v3, &v38, &v37);
  v21 = v38;
  v22 = v37;

  v25 = paired_unlock_log(v23, v24);
  v26 = objc_claimAutoreleasedReturnValue(v25);
  v27 = v26;
  if (v22)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_10002C12C((uint64_t)v22, v27, v28, v29, v30, v31, v32, v33);

    v34 = *(_QWORD *)(a1 + 64);
    if (v34)
      (*(void (**)(uint64_t, id))(v34 + 16))(v34, v22);
  }
  else
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v40 = v21;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Sent message with identifier = %@", buf, 0xCu);
    }

    v35 = *(void **)(a1 + 64);
    if (v35)
    {
      v36 = objc_msgSend(v35, "copy");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 64), "setObject:forKeyedSubscript:", v36, v21);

    }
  }

}

void sub_10002B018(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegates"));
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_10002B0F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegates"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_10002C12C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "IDS send error = %@", a5, a6, a7, a8, 2u);
}

void sub_10002C194(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "IDS device identifier not found for device: %@", a5, a6, a7, a8, 2u);
}

void sub_10002C1FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "No error handler for message sent callback", a5, a6, a7, a8, 0);
}

void sub_10002C230(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Incoming protobuf is nil", a5, a6, a7, a8, 0);
}

id sub_10002C430(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_start");
}

id sub_10002C510(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_cancel");
}

void sub_10002D510(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a3)
  {
    v3 = auto_unlock_log(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10002E2D8(v4, v5, v6, v7, v8, v9, v10, v11);

  }
}

void sub_10002D970(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSErrorUserInfoKey v6;
  const __CFString *v7;

  objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
  v2 = *(void **)(a1 + 32);
  v3 = SFAutoUnlockErrorDomain;
  v6 = NSLocalizedDescriptionKey;
  v7 = CFSTR("Setup created response failed");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v3, 103, v4));
  objc_msgSend(v2, "notifyDelegateWithError:", v5);

}

void sub_10002DC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v4 = *(void **)(a1 + 32);
    v5 = SFAutoUnlockErrorDomain;
    v8 = NSLocalizedDescriptionKey;
    v9 = CFSTR("Setup created response failed");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, 103, v6));
    objc_msgSend(v4, "notifyDelegateWithError:", v7);

  }
}

void sub_10002DE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v4 = *(void **)(a1 + 32);
    v5 = SFAutoUnlockErrorDomain;
    v8 = NSLocalizedDescriptionKey;
    v9 = CFSTR("Setup created response failed");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, 103, v6));
    objc_msgSend(v4, "notifyDelegateWithError:", v7);

  }
}

id sub_10002E030(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleMessage:fromDeviceID:type:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56));
}

void sub_10002E1F8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Hash from setup doesn't match preferred LTK", v1, 2u);
  sub_1000161DC();
}

void sub_10002E234(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Timeout waiting for LTK response from Companion", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_10002E264(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "handleCreateEscrowSecret: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10002E2D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Sending key device locked failed", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

uint64_t SDAuthenticationPairingCreateSecretReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Data;
  uint64_t v19;
  uint64_t v20;
  uint64_t String;
  void *v22;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = PBReaderReadData(a2);
      v19 = objc_claimAutoreleasedReturnValue(Data);
      v20 = 16;
    }
    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0)
              goto LABEL_33;
            v13 += 7;
            v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v15) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 24) = v15;
        }
        else
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
        }
        continue;
      }
      String = PBReaderReadString(a2);
      v19 = objc_claimAutoreleasedReturnValue(String);
      v20 = 8;
    }
    v22 = *(void **)(a1 + v20);
    *(_QWORD *)(a1 + v20) = v19;

  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002F368(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002F380(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unsigned int v7;
  const __CFString *v8;
  int v9;
  const __CFString *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localLTK"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteLTK"));
  objc_msgSend(*(id *)(a1 + 32), "setAksSessionID:", sub_10001E5F8(v2, v3, (int)objc_msgSend(*(id *)(a1 + 32), "originator"), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 1));

  v5 = auto_unlock_log(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_msgSend(*(id *)(a1 + 32), "sessionIsValid");
    v8 = CFSTR("NO");
    if (v7)
      v8 = CFSTR("YES");
    v9 = 138412290;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fix worked for pairing session: %@", (uint8_t *)&v9, 0xCu);
  }

}

void sub_10002F4A4(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localLTK"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteLTK"));
  v4 = objc_msgSend(*(id *)(a1 + 32), "originator");
  v5 = objc_msgSend(*(id *)(a1 + 32), "usingEscrow");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "escrowSecret"));
  objc_msgSend(*(id *)(a1 + 32), "setAksSessionID:", sub_10001EC04(v2, v3, v4, v5, 0, v6, (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));

  v8 = auto_unlock_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "sessionIsValid");
    v11 = CFSTR("NO");
    if (v10)
      v11 = CFSTR("YES");
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fix worked for auth session: %@", (uint8_t *)&v12, 0xCu);
  }

}

void sub_10002F5FC(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localLTK"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteLTK"));
  v4 = objc_msgSend(*(id *)(a1 + 32), "originator");
  v5 = objc_msgSend(*(id *)(a1 + 32), "usingEscrow");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "escrowSecret"));
  objc_msgSend(*(id *)(a1 + 32), "setAksSessionID:", sub_10001EC04(v2, v3, v4, v5, 0, v6, (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)));

  v8 = auto_unlock_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "sessionIsValid");
    v11 = CFSTR("NO");
    if (v10)
      v11 = CFSTR("YES");
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fix worked for auth session: %@", (uint8_t *)&v12, 0xCu);
  }

}

void sub_10002FDF4(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  _DWORD v3[2];

  v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error creating authorization record: %d", (uint8_t *)v3, 8u);
}

void sub_100030310(void *a1, NSObject *a2)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = objc_msgSend(a1, "processIdentifier");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "process %d tried to connect to the Share Sheet User Defaults server, but it was not entitled.", (uint8_t *)v3, 8u);
}

void sub_100030B9C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  __int16 v20;
  char v21;

  v5 = a2;
  v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100030C90;
  block[3] = &unk_100714918;
  v14 = v5;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(void **)(a1 + 48);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v21 = *(_BYTE *)(a1 + 66);
  v10 = *(id *)(a1 + 56);
  v20 = *(_WORD *)(a1 + 64);
  v18 = v6;
  v19 = v10;
  v11 = v6;
  v12 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100030C90(uint64_t a1)
{
  void *v2;
  id v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _DWORD v20[2];
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDActivityEncryptionManager sharedEncryptionManager](SDActivityEncryptionManager, "sharedEncryptionManager"));
    v3 = objc_msgSend(v2, "newDecryptionKeyFromDataRepresentation:", *(_QWORD *)(a1 + 32));

    if (v3)
    {
      if ((objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 40)) & 1) != 0)
      {
        v4 = *(unsigned __int16 *)(a1 + 80);
        v5 = objc_msgSend(*(id *)(a1 + 48), "lastCounter");
        v6 = handoff_log();
        v7 = objc_claimAutoreleasedReturnValue(v6);
        v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
        if (v4 <= v5)
        {
          if (v8)
          {
            v15 = *(unsigned __int16 *)(a1 + 80);
            v16 = objc_msgSend(*(id *)(a1 + 48), "lastCounter");
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "uniqueIDOverride"));
            v18 = SFHexStringForData(*(_QWORD *)(a1 + 56));
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20[0] = 67109890;
            v20[1] = v15;
            v21 = 1024;
            v22 = v16;
            v23 = 2112;
            v24 = v17;
            v25 = 2112;
            v26 = v19;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "New counter %d is not greater than previous %d from %@ with rawAdvertisementData %@. New key is same. Replay!", (uint8_t *)v20, 0x22u);

          }
        }
        else if (v8)
        {
          sub_1000313F4(a1 + 48, a1);
        }

      }
      else
      {
        v11 = *(_QWORD *)(a1 + 48);
        v12 = *(void **)(v11 + 48);
        *(_QWORD *)(v11 + 48) = 0;

        v13 = (void *)objc_claimAutoreleasedReturnValue(+[SDActivityEncryptionManager sharedEncryptionManager](SDActivityEncryptionManager, "sharedEncryptionManager"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "uniqueIDOverride"));
        objc_msgSend(v13, "setDecryptionKey:forDeviceIdentifier:", v3, v14);

        objc_msgSend(*(id *)(a1 + 48), "updateWithRawAdvertisementData:receivedViaScanning:isReplay:newAdvertisementHandler:", *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 82), 1, *(_QWORD *)(a1 + 72));
      }
    }

  }
  else
  {
    v9 = handoff_log();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_100031358(a1, v10);

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
}

void sub_1000311EC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100031228(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "uniqueIDOverride"));
  v4 = SFHexStringForData(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100031200();
  sub_1000311EC((void *)&_mh_execute_header, v6, v7, "Failed to decrypt advertisement with new key from %@ with rawAdvertisementData %@. Discarding advertisement", v8, v9, v10, v11, v12);

  sub_100031218();
}

void sub_1000312C0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "uniqueIDOverride"));
  v4 = SFHexStringForData(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100031200();
  sub_1000311EC((void *)&_mh_execute_header, v6, v7, "Failed to decrypt advertisement from %@ with rawAdvertisementData %@. Requesting new key", v8, v9, v10, v11, v12);

  sub_100031218();
}

void sub_100031358(uint64_t a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "uniqueIDOverride"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve new key from %@", (uint8_t *)&v4, 0xCu);

}

void sub_1000313F4(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)a1 + 24), "uniqueIDOverride"));
  v4 = SFHexStringForData(*(_QWORD *)(a2 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100031200();
  sub_1000311EC((void *)&_mh_execute_header, v6, v7, "Failed to decrypt advertisement from %@ with rawAdvertisementData %@. New key is same. Replay?", v8, v9, v10, v11, v12);

  sub_100031218();
}

void sub_1000314D0(id a1)
{
  SDClassroomBrowser *v1;
  void *v2;

  v1 = objc_alloc_init(SDClassroomBrowser);
  v2 = (void *)qword_1007C64B8;
  qword_1007C64B8 = (uint64_t)v1;

}

id sub_100031F0C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v2 = airdrop_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = 138478083;
    v8 = v4;
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SDClassroomBrowser: cancellation handler called for personID %{private}@ sessionID %@", (uint8_t *)&v7, 0x16u);
  }

  return objc_msgSend(*(id *)(a1 + 48), "cancelSendingItemsToPersonWithID:sessionID:clientBundleID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
}

Class sub_100033248()
{
  Class result;

  if (qword_1007C64C8 != -1)
    dispatch_once(&qword_1007C64C8, &stru_1007149B0);
  result = objc_getClass("CRKShareTargetBrowser");
  qword_1007C64C0 = (uint64_t)result;
  off_1007B03D0 = (uint64_t (*)())sub_1000332A4;
  return result;
}

id sub_1000332A4()
{
  return (id)qword_1007C64C0;
}

void sub_1000332B0(id a1)
{
  qword_1007C64D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ClassroomKit.framework/ClassroomKit", 2);
}

void sub_1000332D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1000332F0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, v0, v1, "App provided JSON: %@", v2);
}

void sub_100033358(uint64_t a1, void *a2, NSObject *a3)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  id v8;
  __int16 v9;
  id v10;

  v5 = 138412802;
  v6 = a1;
  v7 = 2048;
  v8 = objc_msgSend(a2, "completedUnitCount");
  v9 = 2048;
  v10 = objc_msgSend(a2, "totalUnitCount");
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "SDClassroomBrowser send operation to %@ progress %ld/%ld", (uint8_t *)&v5, 0x20u);
}

void sub_100033414(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  v6 = 138412546;
  v7 = a1;
  v8 = 2112;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDClassroomBrowser failed send operation to %@ (%@)", (uint8_t *)&v6, 0x16u);

}

void sub_1000334C4()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "SDClassroomBrowser didInterruptWithError %@", v1, 0xCu);
}

void sub_100033534(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = SFCompactStringFromCollection(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, a2, v5, "SDClassroomBrowser shareTargetBrowser:didFindTargets: %@", v6);

  sub_1000332E4();
}

void sub_1000335B4(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = SFCompactStringFromCollection(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, a2, v5, "SDClassroomBrowser shareTargetBrowser:didRemoveTargets: %@", v6);

  sub_1000332E4();
}

id sub_100033794(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "stop");
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

void sub_100033C80(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 80));
  objc_msgSend(WeakRetained, "bonjourPublisher:propertiesDidChange:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));

}

id sub_100033FF4(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "publishCallBack:", a2);
}

id sub_100034058(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "publish");
}

void sub_100034250(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

void sub_10003425C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Bonjour name conflict for %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000342C0()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100034238();
  sub_100034250((void *)&_mh_execute_header, v0, (uint64_t)v0, "Bonjour advertise failed (%ld|%d)", v1);
  sub_10001949C();
}

void sub_100034330(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "%@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100034398(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "SDAirDropPublisher: dataFromTXTRecordDictionary returned nil", a5, a6, a7, a8, 0);
}

void sub_1000343CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "SDAirDropPublisher: copyAirDropID returned NULL", a5, a6, a7, a8, 0);
}

void sub_100034400()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100034238();
  sub_100034250((void *)&_mh_execute_header, v0, v1, "SDAirDropPublisher: CFNetServiceRegisterWithOptions returned (%ld, %d)", v2);
  sub_10001949C();
}

id sub_1000347FC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_start");
}

id sub_100034D88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_cancel");
}

id sub_100034EEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_updateForCloudPairing");
}

void sub_100035B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100035BC4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleLTKTimerFired");

}

void sub_100037FC4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  SDUnlockSetupRequest *v5;
  uint64_t v6;
  NSDate *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void *v22;
  uint64_t v23;
  uint8_t buf[4];
  SDUnlockSetupRequest *v25;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setSendState:", 1);
  v5 = objc_alloc_init(SDUnlockSetupRequest);
  -[SDUnlockSetupRequest setVersion:](v5, "setVersion:", objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v6), "setupRequestVersion"));
  -[SDUnlockSetupRequest setLongTermKey:](v5, "setLongTermKey:", v4);

  v7 = objc_opt_new(NSDate);
  objc_msgSend(*(id *)(a1 + 32), "setKeyExchangeDate:", v7);

  v9 = auto_unlock_log(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Sending SDUnlockSetupRequest %@", buf, 0xCu);
  }

  v11 = objc_msgSend(*(id *)(a1 + 32), "useAttestedProtocol");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(-[SDUnlockSetupRequest data](v5, "data"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceID"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "messageTimeout")));
  v20 = 3221225472;
  v21 = sub_100038210;
  v22 = &unk_1007148C8;
  v23 = *(_QWORD *)(a1 + 32);
  v19 = _NSConcreteStackBlock;
  if (v11)
    v17 = 2001;
  else
    v17 = 101;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sendAutoUnlockPayload:toDevice:type:sessionID:queueOneID:timeout:completion:", v13, v14, v17, v15, 0, v16, &v19, v19, v20, v21, v22, v23));
  objc_msgSend(*(id *)(a1 + 32), "setSetupMessageIdentifier:", v18);

  objc_msgSend(*(id *)(a1 + 32), "restartResponseTimer:", sub_10019AAC0((double)(uint64_t)objc_msgSend(*(id *)(a1 + 32), "responseTimeout")));
}

void sub_100038210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSetupError:");
    objc_msgSend(*(id *)(a1 + 32), "setErrorType:", 5);
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v4 = *(void **)(a1 + 32);
    v5 = SFAutoUnlockErrorDomain;
    v8 = NSLocalizedDescriptionKey;
    v9 = CFSTR("Setup request failed");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, 151, v6));
    objc_msgSend(v4, "notifyDelegateWithError:", v7);

  }
}

uint64_t sub_100038308(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100038510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSetupError:");
    objc_msgSend(*(id *)(a1 + 32), "setErrorType:", 6);
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v4 = *(void **)(a1 + 32);
    v5 = SFAutoUnlockErrorDomain;
    v8 = NSLocalizedDescriptionKey;
    v9 = CFSTR("Setup request failed");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, 152, v6));
    objc_msgSend(v4, "notifyDelegateWithError:", v7);

  }
}

id sub_1000386D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleMessage:fromDeviceID:type:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56));
}

void sub_100039A84(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100039A94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Internet Sharing enabled", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039AC0(void *a1, NSObject *a2)
{
  void *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "passcode"));
  v4 = CFSTR("YES");
  if (!v3)
    v4 = CFSTR("NO");
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid parameters (passcode = %@)", (uint8_t *)&v5, 0xCu);

}

void sub_100039B6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Passcode can't unlock keybag", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039B98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Not enabling, view not syncing", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039BC4(void *a1, NSObject *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;
  __int16 v8;
  const __CFString *v9;

  if (objc_msgSend(a1, "isConnected"))
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  if (objc_msgSend(a1, "isNearby"))
    v5 = CFSTR("YES");
  else
    v5 = CFSTR("NO");
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "### Device is either not connected or not nearby (isConnected:%@, isNearby:%@)", (uint8_t *)&v6, 0x16u);
}

void sub_100039C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Hash from setup doesn't match preferred LTK", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039CC0(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error in session created response: %d", (uint8_t *)v2, 8u);
  sub_1000161DC();
}

void sub_100039D30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Watch missing LTK and is unable to communicate with Companion to potentially sync it", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039D5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Watch missing LTK for Mac", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039D88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Watch has old LTK for Mac", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039DB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleEscrowSessionRequest: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100039E14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "AKS session invalid", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039E40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Remote LTK does not exist", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039E6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleSetupCreateRecord: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100039ECC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Missing proxy companion IDS ID -- this shouldn't happen", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100039EF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Unlock not enabled and cloud pairing not syncing after pairing (device: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

uint64_t SDAutoUnlockAuthPromptResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t Data;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v30 = 24;
        goto LABEL_54;
      case 2u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

        continue;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                v23 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v23 = 0;
LABEL_49:
        *(_BYTE *)(a1 + 28) = v23 != 0;
        continue;
      case 4u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v14 |= (unint64_t)(v29 & 0x7F) << v26;
      if ((v29 & 0x80) == 0)
        goto LABEL_51;
      v26 += 7;
      v9 = v27++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_53:
    v30 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v30) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10003AF78(id a1)
{
  SDPairedDeviceAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDPairedDeviceAgent);
  v2 = (void *)qword_1007C64E0;
  qword_1007C64E0 = (uint64_t)v1;

}

id sub_10003B0E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_10003B2D8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_idsEnsureCoalescersStarted");
}

id sub_10003B34C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_10003B6A4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_companionLinkDevicesChanged");
}

id sub_10003B6AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_companionLinkDevicesChanged");
}

id sub_10003B6B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_companionLinkDevicesChanged");
}

void sub_10003B6BC(id a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = charging_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1000402A4();

}

void sub_10003B6FC(id a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = charging_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1000402D0();

}

void sub_10003B73C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;

  v3 = a2;
  if (v3)
  {
    v4 = charging_log();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000402FC();

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_companionLinkRegisterEvents");
  }

}

id sub_10003BCA8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = charging_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Connection action handler called", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_idsUpdateConnectedState");
}

id sub_10003BD18(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = charging_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sync action handler called", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_idsEnsureSynced");
}

id sub_10003C528(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_idsTimerInfoFired");
}

id sub_10003CBDC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = charging_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Triggering sync for connection", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_idsTriggerSync");
}

id sub_10003D21C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_idsTriggerSync");
}

void sub_10003E04C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char isKindOfClass;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  v5 = a2;
  v6 = a3;
  v8 = objc_opt_class(NSString, v7);
  isKindOfClass = objc_opt_isKindOfClass(v6, v8);

  if ((isKindOfClass & 1) != 0)
  {
    v10 = NRDevicePropertyName;
    if (objc_msgSend(v5, "isEqualToString:", NRDevicePropertyName))
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "getActivePairedDevice"));

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForProperty:", v10));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "name"));
        v15 = objc_msgSend(v14, "isEqualToString:", v13);

        if ((v15 & 1) == 0)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "setName:", v13);
          v16 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "publish");
          v17 = (int)v16;
          v18 = charging_log(v16);
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208);
            v21 = 138412546;
            v22 = v20;
            v23 = 1024;
            v24 = v17;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Published name update for %@ status %x", (uint8_t *)&v21, 0x12u);
          }

        }
      }
    }
  }

}

void sub_10003F03C(id a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = charging_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_10004083C();

}

void sub_10003F07C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v3 = a2;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(a1 + 32), "_powerSourceChanged:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void sub_10003F168(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v3 = a2;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(a1 + 32), "_powerSourceChanged:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void sub_10003F254(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v3 = a2;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(a1 + 32), "_powerSourceLost:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

void sub_10003F340(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = charging_log();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Activated power source monitor (error: %@)", (uint8_t *)&v5, 0xCu);
  }

}

id sub_10003F640(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_wristStateChanged");
}

id sub_10003F928(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_lowPowerModeChanged");
}

void sub_10003FE4C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint8_t v6[16];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104))
  {
    v2 = charging_log();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Calling dismiss UI handler after timeout", v6, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) + 16))();
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 104);
    *(_QWORD *)(v4 + 104) = 0;

  }
}

void sub_1000402A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "CompanionLink interrupted", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000402D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "CompanionLink invalidated", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000402FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Companion link failed to activate: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10004035C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Companion disconnected during UI sync, dismissing UI", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100040388()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "State update missing message type", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000403B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error sending state update (error: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100040414(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "State update encoding error: %ld", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_10004047C(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  uint8_t v6[24];

  v3 = (objc_class *)objc_opt_class(a1, a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100029230();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Update not an NSDictionary: %@", v6, 0xCu);

  sub_1000332E4();
}

void sub_100040508()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Lock state changed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100040534()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Nil message data", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100040560()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Message missing type: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000405C0(const __CFString *a1, NSObject *a2)
{
  objc_class *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char isKindOfClass;
  const __CFString *v10;
  int v11;
  void *v12;
  __int16 v13;
  const __CFString *v14;

  v4 = (objc_class *)objc_opt_class(a1, a2);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v8 = objc_opt_class(NSString, v7);
  isKindOfClass = objc_opt_isKindOfClass(a1, v8);
  v10 = CFSTR("unknown");
  if ((isKindOfClass & 1) != 0)
    v10 = a1;
  v11 = 138412546;
  v12 = v6;
  v13 = 2112;
  v14 = v10;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Message not an NSDictionary: %@ (%@)", (uint8_t *)&v11, 0x16u);

}

void sub_100040698(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Decoding error: %ld", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_100040700()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Dashboard entry missing name", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10004072C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Dashboard entry missing dict", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100040758(void *a1, NSObject *a2)
{
  uint8_t v3[24];

  objc_msgSend(a1, "unsignedLongValue");
  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Message ID doesn't exist for remove: %lu", v3, 0xCu);
  sub_1000332E4();
}

void sub_1000407D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a1, a3, "Watch missing pairing ID %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10004083C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Power source monitor invalidated", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDUnlockSessionKeyExchangeRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t Data;
  uint64_t v28;
  void *v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  uint64_t v34;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_50;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_52;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_52:
        v34 = 28;
        goto LABEL_65;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_56:
        v34 = 24;
        goto LABEL_65;
      case 3u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 36) |= 8u;
        while (2)
        {
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                v24 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v24 = 0;
LABEL_60:
        *(_BYTE *)(a1 + 32) = v24 != 0;
        continue;
      case 4u:
        Data = PBReaderReadData(a2);
        v28 = objc_claimAutoreleasedReturnValue(Data);
        v29 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v28;

        continue;
      case 5u:
        v30 = 0;
        v31 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v32 == -1 || v32 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
      v14 |= (unint64_t)(v33 & 0x7F) << v30;
      if ((v33 & 0x80) == 0)
        goto LABEL_62;
      v30 += 7;
      v9 = v31++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_64;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_64:
    v34 = 8;
LABEL_65:
    *(_DWORD *)(a1 + v34) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockRelockRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockWiFiAWDLInfoReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  uint64_t Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        Data = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(Data);
        v14 = 24;
        goto LABEL_50;
      case 2u:
        v16 = 0;
        v17 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v20 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_54:
        v35 = 12;
        goto LABEL_67;
      case 3u:
        v21 = 0;
        v22 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v18 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_58:
        v35 = 32;
        goto LABEL_67;
      case 4u:
        v25 = 0;
        v26 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v18 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              v9 = v26++ >= 9;
              if (v9)
              {
                LODWORD(v18) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v18) = 0;
LABEL_62:
        v35 = 36;
        goto LABEL_67;
      case 5u:
        v29 = 0;
        v30 = 0;
        v18 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        break;
      case 6u:
        v33 = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(v33);
        v14 = 16;
LABEL_50:
        v34 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v31 == -1 || v31 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
      v18 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0)
        goto LABEL_64;
      v29 += 7;
      v9 = v30++ >= 9;
      if (v9)
      {
        LODWORD(v18) = 0;
        goto LABEL_66;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v18) = 0;
LABEL_66:
    v35 = 8;
LABEL_67:
    *(_DWORD *)(a1 + v35) = v18;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStashKeyExchangeResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v29 = 28;
        goto LABEL_54;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_49:
        v29 = 24;
        goto LABEL_54;
      case 3u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

        continue;
      case 4u:
        v25 = 0;
        v26 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0)
        goto LABEL_51;
      v25 += 7;
      v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_53:
    v29 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000443E0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8)
{
  unint64_t v14;
  int v15;
  id v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _QWORD v33[9];
  _QWORD v34[9];

  v14 = (unint64_t)fmax(a7, 0.0);
  v15 = sub_100044644(a8);
  v16 = a6;
  v17 = a2;
  v18 = a1;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a3, CFSTR("sender")));
  v34[0] = v19;
  v34[1] = &__kCFBooleanTrue;
  v33[1] = CFSTR("success");
  v33[2] = CFSTR("bytesPerSec");
  v20 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v14));
  v21 = (void *)v20;
  if (v17)
    v22 = v17;
  else
    v22 = &stru_10072FE60;
  v34[2] = v20;
  v34[3] = v22;
  v33[3] = CFSTR("modelCode");
  v33[4] = CFSTR("bundleID");
  if (v18)
    v23 = v18;
  else
    v23 = &stru_10072FE60;
  v34[4] = v23;
  v34[5] = &__kCFBooleanFalse;
  v33[5] = CFSTR("legacy");
  v33[6] = CFSTR("totalBytesBucket");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_100714C20)[v15]));
  v34[6] = v24;
  v33[7] = CFSTR("discoverabilityLevel");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
  v34[7] = v25;
  v33[8] = CFSTR("fromShareSheet");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a5));
  v34[8] = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 9));

  v28 = sub_100195E5C(v16, v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

  v31 = airdrop_log(v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    sub_100045BE4();

  SFMetricsLog(CFSTR("com.apple.sharing.AirDrop.TransferResult"), v29);
}

uint64_t sub_100044644(double a1)
{
  if (a1 < 0.0)
    return 0;
  if (a1 == 0.0)
    return 1;
  if (a1 <= 1000000.0)
    return 2;
  if (a1 <= 5000000.0)
    return 3;
  if (a1 <= 20000000.0)
    return 4;
  if (a1 <= 50000000.0)
    return 5;
  if (a1 <= 100000000.0)
    return 6;
  if (a1 <= 250000000.0)
    return 7;
  if (a1 <= 500000000.0)
    return 8;
  if (a1 <= 1000000000.0)
    return 9;
  if (a1 <= 5000000000.0)
    return 10;
  if (a1 <= 1.0e10)
    return 11;
  if (a1 <= 1.5e10)
    return 12;
  if (a1 <= 2.0e10)
    return 13;
  return 14;
}

void sub_100044784(void *a1, void *a2, uint64_t a3, __CFError *a4, uint64_t a5, unsigned int a6, void *a7, double a8)
{
  __CFString *v14;
  __CFString *v15;
  int v16;
  CFIndex Code;
  __CFString *Domain;
  __CFString *v19;
  void *v20;
  const __CFString *v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v34;
  _QWORD v35[10];
  _QWORD v36[10];

  v14 = a1;
  v15 = a2;
  v34 = a7;
  v16 = sub_100044644(a8);
  if (a4)
  {
    Code = CFErrorGetCode(a4);
    Domain = (__CFString *)CFErrorGetDomain(a4);
  }
  else
  {
    Code = 0;
    Domain = &stru_10072FE60;
  }
  v35[0] = CFSTR("sender");
  v19 = Domain;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a3));
  v36[0] = v20;
  v36[1] = &__kCFBooleanFalse;
  v35[1] = CFSTR("success");
  v35[2] = CFSTR("modelCode");
  if (v15)
    v21 = v15;
  else
    v21 = &stru_10072FE60;
  if (v14)
    v22 = v14;
  else
    v22 = &stru_10072FE60;
  v36[2] = v21;
  v36[3] = v22;
  v35[3] = CFSTR("bundleID");
  v35[4] = CFSTR("legacy");
  v36[4] = &__kCFBooleanFalse;
  v35[5] = CFSTR("errorCode");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", Code));
  v36[5] = v23;
  v36[6] = v19;
  v35[6] = CFSTR("errorDomain");
  v35[7] = CFSTR("totalBytesBucket");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", (&off_100714C20)[v16]));
  v36[7] = v24;
  v35[8] = CFSTR("discoverabilityLevel");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a5));
  v36[8] = v25;
  v35[9] = CFSTR("fromShareSheet");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a6));
  v36[9] = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 10));

  v28 = sub_100195E5C(v34, v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

  v31 = airdrop_log(v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    sub_100045C44();

  SFMetricsLog(CFSTR("com.apple.sharing.AirDrop.TransferResult"), v29);
}

void sub_100044A24(double a1)
{
  void *v1;
  void *v2;
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("_cat");
  v3[1] = CFSTR("_op");
  v4[0] = CFSTR("AD");
  v4[1] = CFSTR("TimeSpent");
  v3[2] = CFSTR("time");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", (uint64_t)(a1 * 1000.0)));
  v4[2] = v1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3));
  SFDashboardLogJSON(v2);

}

void sub_100044AF8(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  _QWORD v7[4];

  v6[0] = CFSTR("_cat");
  v6[1] = CFSTR("_op");
  v7[0] = CFSTR("AD");
  v7[1] = CFSTR("TransferredCount");
  v6[2] = CFSTR("sender");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1));
  v7[2] = v3;
  v6[3] = CFSTR("count");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2));
  v7[3] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 4));
  SFDashboardLogJSON();

}

void sub_100044BF4(__CFString *a1, __CFString *a2, __CFString *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  __CFString *v41;
  __CFString *v42;
  __CFString *v43;
  void *v45;
  void *v47;
  void *v50;
  _QWORD v51[15];
  _QWORD v52[15];

  v17 = (int)(a8 * 1000.0);
  v18 = (int)(a9 * 1000.0);
  v19 = (int)(a10 * 1000.0);
  v20 = (int)(a11 * 1000.0);
  v21 = (int)(a12 * 1000.0);
  v22 = (int)(a13 * 1000.0);
  v38 = (int)(a14 * 1000.0);
  v39 = (int)(a15 * 1000.0);
  v23 = &stru_10072FE60;
  if (a1)
    v24 = a1;
  else
    v24 = &stru_10072FE60;
  v51[0] = CFSTR("sid");
  v51[1] = CFSTR("browserID");
  if (a2)
    v25 = a2;
  else
    v25 = &stru_10072FE60;
  v52[0] = v24;
  v52[1] = v25;
  if (a3)
    v23 = a3;
  v52[2] = v23;
  v51[2] = CFSTR("modelName");
  v51[3] = CFSTR("bonjourPTRDiscoveryMs");
  v43 = a3;
  v42 = a2;
  v41 = a1;
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17));
  v52[3] = v50;
  v51[4] = CFSTR("bonjourTXTDiscoveryMs");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18));
  v52[4] = v47;
  v51[5] = CFSTR("bonjourResolveMs");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19));
  v52[5] = v45;
  v51[6] = CFSTR("tcpConnectionMs");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20));
  v52[6] = v40;
  v51[7] = CFSTR("tlsHandshakeMs");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21));
  v52[7] = v26;
  v51[8] = CFSTR("idQueryMs");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v22));
  v52[8] = v27;
  v51[9] = CFSTR("totalDiscoveryWithoutBonjourPTRMs");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38));
  v52[9] = v28;
  v51[10] = CFSTR("totalDiscoveryMs");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v39));
  v52[10] = v29;
  v51[11] = CFSTR("verifiableID");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  v52[11] = v30;
  v51[12] = CFSTR("awdlVersion");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v52[12] = v31;
  v51[13] = CFSTR("platform");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a6));
  v52[13] = v32;
  v51[14] = CFSTR("rssi");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a7));
  v52[14] = v33;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v52, v51, 15));

  v36 = airdrop_log(v35);
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    sub_100045CB0();

  SFMetricsLog(CFSTR("com.apple.sharing.AirDrop.PeerDiscoveredInfo"), v34);
}

void sub_100044F90(__CFString *a1, __CFString *a2, __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, unsigned int a11)
{
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  __CFString *v36;
  __CFString *v37;
  uint8_t buf[4];
  void *v39;
  _QWORD v40[12];
  _QWORD v41[12];

  v20 = &stru_10072FE60;
  if (a1)
    v21 = a1;
  else
    v21 = &stru_10072FE60;
  v40[0] = CFSTR("sid");
  v40[1] = CFSTR("browserID");
  if (a2)
    v22 = a2;
  else
    v22 = &stru_10072FE60;
  v41[0] = v21;
  v41[1] = v22;
  if (a3)
    v20 = a3;
  v41[2] = v20;
  v40[2] = CFSTR("bid");
  v40[3] = CFSTR("startTimestamp");
  v37 = a3;
  v36 = a2;
  v23 = a1;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4));
  v41[3] = v24;
  v40[4] = CFSTR("durationMs");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a9));
  v41[4] = v25;
  v40[5] = CFSTR("firstDiscoveryMs");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a10));
  v41[5] = v26;
  v40[6] = CFSTR("totalPeersDiscovered");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a6));
  v41[6] = v27;
  v40[7] = CFSTR("maxPeersDiscovered");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
  v41[7] = v28;
  v40[8] = CFSTR("transfersInitiated");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a7));
  v41[8] = v29;
  v40[9] = CFSTR("transfersCompleted");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a8));
  v41[9] = v30;
  v41[10] = &__kCFBooleanFalse;
  v40[10] = CFSTR("legacy");
  v40[11] = CFSTR("discoveryLevel");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a11));
  v41[11] = v31;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v41, v40, 12));

  v34 = airdrop_log(v33);
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v39 = v32;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "AirDropSessionInfo: %{private}@", buf, 0xCu);
  }

  SFMetricsLog(CFSTR("com.apple.sharing.AirDrop.SessionInfo"), v32);
}

void sub_10004527C(__CFString *a1, __CFString *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v3 = &stru_10072FE60;
  if (a1)
    v3 = a1;
  v11[0] = CFSTR("sid");
  v11[1] = CFSTR("activityType");
  v4 = CFSTR("No user action");
  if (a2)
    v4 = a2;
  v12[0] = v3;
  v12[1] = v4;
  v5 = a2;
  v6 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2));

  v9 = airdrop_log(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_100045D10();

  SFMetricsLog(CFSTR("com.apple.sharing.AirDrop.SheetActivityType"), v7);
}

void sub_100045388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  NSMutableDictionary *v9;
  NSMutableDictionary *v10;

  v10 = objc_opt_new(NSMutableDictionary);
  if (a1)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a1, CFSTR("Subevent"));
  if (a2)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a2, CFSTR("State"));
  if ((int)a4 >= 1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v8, CFSTR("pid"));

  }
  v9 = v10;
  if (a3)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a3, CFSTR("id"));
    v9 = v10;
  }
  PLLogTimeSensitiveRegisteredEvent(21, CFSTR("AirDrop"), v9, 0);

}

void sub_100045470(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  NSMutableDictionary *v9;
  NSMutableDictionary *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a3;
  v9 = objc_opt_new(NSMutableDictionary);
  v10 = v9;
  if (a1)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", a1, CFSTR("Subevent"));
  if (a2)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a2, CFSTR("State"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "UUIDString"));

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "UUIDString"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v12, CFSTR("TransferID"));

  }
  if (a5 > 0.0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v13, CFSTR("ContentSize"));

  }
  if (a4)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a4, CFSTR("Interface"));
  PLLogTimeSensitiveRegisteredEvent(21, CFSTR("AirDropSession"), v10, 0);

}

void sub_1000455A8(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint8_t buf[4];
  void *v12;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", a2));
  objc_msgSend(v4, "insertObject:atIndex:", CFSTR("\n"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("### BEGIN: %@ #########################"), v3));
  objc_msgSend(v4, "insertObject:atIndex:", v5, 1);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("##### END: %@ #########################"), v3));
  objc_msgSend(v4, "addObject:", v6);

  v8 = daemon_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "componentsJoinedByString:", CFSTR("\n")));
    *(_DWORD *)buf = 138412290;
    v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);

  }
}

void sub_100045708(void *a1, void *a2, void *a3, uint64_t a4, double a5)
{
  double v8;
  BOOL v9;
  double v10;
  uint64_t v11;
  _UNKNOWN **v12;
  __CFString *v13;
  __CFString *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  void *v20;
  _UNKNOWN **v21;
  void *v22;
  _QWORD v23[7];
  _QWORD v24[7];

  v8 = a5 * 1000.0;
  v9 = a5 < 0.0;
  v10 = -1.0;
  if (!v9)
    v10 = v8;
  v11 = (uint64_t)v10;
  v23[0] = CFSTR("_cat");
  v23[1] = CFSTR("_op");
  v24[0] = CFSTR("HS");
  v24[1] = CFSTR("TetherSuccess");
  v23[2] = CFSTR("discovery");
  v12 = a3;
  v13 = a2;
  v14 = a1;
  v15 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  v16 = (void *)v15;
  if (v14)
    v17 = v14;
  else
    v17 = &stru_10072FE60;
  v24[2] = v15;
  v24[3] = v17;
  v23[3] = CFSTR("targetModel");
  v23[4] = CFSTR("srcModel");
  if (v13)
    v18 = v13;
  else
    v18 = &stru_10072FE60;
  v24[4] = v18;
  v23[5] = CFSTR("duration");
  v19 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v11));
  v20 = (void *)v19;
  v23[6] = CFSTR("successType");
  v21 = &off_10074B2E0;
  if (v12)
    v21 = v12;
  v24[5] = v19;
  v24[6] = v21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 7));

  SFDashboardLogJSON(v22);
}

void sub_1000458B0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _UNKNOWN **v5;
  __CFString *v10;
  __CFString *v11;
  id v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;
  __CFString *v17;
  void *v18;
  void *v19;
  _QWORD v20[6];
  const __CFString *v21;
  const __CFString *v22;
  _QWORD v23[5];
  _UNKNOWN **v24;
  __CFString *v25;
  void *v26;

  v10 = a1;
  v11 = a2;
  v12 = a3;
  v20[0] = CFSTR("_cat");
  v20[1] = CFSTR("_op");
  v23[0] = CFSTR("HS");
  v23[1] = CFSTR("TetherFailure");
  v20[2] = CFSTR("discovery");
  v13 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a5));
  v14 = (void *)v13;
  if (v10)
    v15 = v10;
  else
    v15 = &stru_10072FE60;
  v23[2] = v13;
  v23[3] = v15;
  v20[3] = CFSTR("targetModel");
  v20[4] = CFSTR("srcModel");
  if (v11)
    v16 = v11;
  else
    v16 = &stru_10072FE60;
  v23[4] = v16;
  v20[5] = CFSTR("errorCode");
  if (v12)
  {
    v5 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v12, "code")));
    v24 = v5;
    v21 = CFSTR("errorDomain");
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "domain"));
  }
  else
  {
    v24 = &off_10074B2E0;
    v21 = CFSTR("errorDomain");
    v17 = &stru_10072FE60;
  }
  v25 = v17;
  v22 = CFSTR("errorType");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
  v26 = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v20, 8));
  SFDashboardLogJSON();

  if (v12)
  {

  }
}

void sub_100045AA0(__CFString *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  const __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  _QWORD v11[5];

  v4 = (uint64_t)(a3 * 1000.0);
  v10[0] = CFSTR("_cat");
  v10[1] = CFSTR("_op");
  v11[0] = CFSTR("HO");
  v11[1] = CFSTR("ConnectBack");
  v5 = &stru_10072FE60;
  if (a1)
    v5 = a1;
  v11[2] = v5;
  v10[2] = CFSTR("bundleID");
  v10[3] = CFSTR("duration");
  v6 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v4));
  v11[3] = v7;
  v10[4] = CFSTR("bytesTransferred");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  v11[4] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 5));

  SFDashboardLogJSON(v9);
}

void sub_100045BE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "FileTransferSucceeded: %{private}@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100045C44()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "FileTransferFailed: %{private}@", v1, 0xCu);
  sub_10001949C();
}

void sub_100045CB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "AirDropPeerDiscoveredInfo: %{private}@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100045D10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "ShareSheetActivityType: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100047258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047288(uint64_t a1)
{
  int *v1;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (int *)WeakRetained[1];
  if (*v1 <= 50)
  {
    if (*v1 == -1)
    {
      if (!_LogCategory_Initialize(v1, 50))
        goto LABEL_5;
      v1 = (int *)WeakRetained[1];
    }
    LogPrintF(v1, "-[SDBLEPowerSourceContainer initWithPowerSource:]_block_invoke", 50, "Timer triggered");
  }
LABEL_5:
  objc_msgSend(WeakRetained, "_invalidate");

}

void sub_100047304(uint64_t a1)
{
  int *v1;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (int *)WeakRetained[1];
  if (*v1 <= 50)
  {
    if (*v1 == -1)
    {
      if (!_LogCategory_Initialize(v1, 50))
        goto LABEL_5;
      v1 = (int *)WeakRetained[1];
    }
    LogPrintF(v1, "-[SDBLEPowerSourceContainer initWithPowerSource:]_block_invoke_2", 50, "Coalescer invalidated");
  }
LABEL_5:
  objc_msgSend(WeakRetained, "_invalidate");

}

uint64_t SDUnlockStashTokenReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Data;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = PBReaderReadData(a2);
      v19 = objc_claimAutoreleasedReturnValue(Data);
      v20 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v19;

    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v21 = 0;
        v22 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_42;
          v21 += 7;
          v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v26 = 8;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 24;
      }
      *(_DWORD *)(a1 + v26) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SDAutoUnlockDecryptionFailedReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
            goto LABEL_37;
          }
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            break;
          v12 += 7;
          v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
            goto LABEL_40;
          }
        }
        v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_40:
        *(_DWORD *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_41:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v19 = 0;
    v20 = 0;
    v14 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
        goto LABEL_38;
      }
      v19 += 7;
      v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
        goto LABEL_40;
      }
    }
    v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockLongTermKeyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Data;
  uint64_t v19;
  uint64_t v20;
  uint64_t String;
  void *v22;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = PBReaderReadData(a2);
      v19 = objc_claimAutoreleasedReturnValue(Data);
      v20 = 8;
    }
    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0)
              goto LABEL_33;
            v13 += 7;
            v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v15) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 24) = v15;
        }
        else
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
        }
        continue;
      }
      String = PBReaderReadString(a2);
      v19 = objc_claimAutoreleasedReturnValue(String);
      v20 = 16;
    }
    v22 = *(void **)(a1 + v20);
    *(_QWORD *)(a1 + v20) = v19;

  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10004A1BC(id a1)
{
  SDDeviceAssetMonitor *v1;
  void *v2;

  v1 = objc_alloc_init(SDDeviceAssetMonitor);
  v2 = (void *)qword_1007C64E8;
  qword_1007C64E8 = (uint64_t)v1;

}

void sub_10004A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10004A4C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "stateDump");
}

void sub_10004A4C8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "activateIfReady");

}

void sub_10004A4F4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "activateIfReady");

}

void sub_10004A628(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10004A658(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "bluetoothDevicePaired:", v3);

}

void sub_10004A6A0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "bluetoothDeviceUnpaired:", v3);

}

void sub_10004AD40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004AD54(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const __CFString *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  const __CFString *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;

  v8 = a2;
  v9 = a5;
  v11 = asset_log(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (a4)
      v13 = CFSTR("Fallback ");
    else
      v13 = &stru_10072FE60;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundlePath"));
    v17 = 138413058;
    v18 = v13;
    v19 = 2112;
    v20 = v14;
    v21 = 2112;
    v22 = v15;
    v23 = 2112;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@Asset matching query %@ now available at %@ (%@)", (uint8_t *)&v17, 0x2Au);

  }
  if (a4)
    v16 = 2;
  else
    v16 = 1;
  objc_msgSend(*(id *)(a1 + 40), "setState:", v16);

}

void sub_10004BAE8(id a1)
{
  uint64_t v1;
  NSObject *v2;

  qword_1007C64F8 = (uint64_t)dlopen((const char *)objc_msgSend(CFSTR("/System/Library/PrivateFrameworks/URLFormatting.framework/URLFormatting"), "UTF8String"), 2);
  if (!qword_1007C64F8)
  {
    v1 = airdrop_log(0);
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10004BB48(v2);

  }
}

void sub_10004BB48(os_log_t log)
{
  int v1;
  const __CFString *v2;

  v1 = 138412290;
  v2 = CFSTR("/System/Library/PrivateFrameworks/URLFormatting.framework/URLFormatting");
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to softlink: %@", (uint8_t *)&v1, 0xCu);
}

void sub_10004BC08(id a1)
{
  SDAutoUnlockNotificationsManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDAutoUnlockNotificationsManager);
  v2 = (void *)qword_1007C6508;
  qword_1007C6508 = (uint64_t)v1;

}

void sub_10004BD44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004BDB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004BF18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004C214(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSObject *obj;
  uint64_t v46;
  uint64_t v47;
  uint8_t buf[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  const __CFString *v53;
  _BYTE v54[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = auto_unlock_log(v6);
    obj = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
      sub_10004D190((uint64_t)v7, obj, v9, v10, v11, v12, v13, v14);
    goto LABEL_4;
  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  obj = v5;
  v15 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
  if (!v15)
  {
LABEL_4:

    goto LABEL_5;
  }
  v16 = v15;
  v44 = v5;
  v46 = *(_QWORD *)v50;
LABEL_8:
  v17 = 0;
  while (1)
  {
    if (*(_QWORD *)v50 != v46)
      objc_enumerationMutation(obj);
    v18 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "userInfo"));
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("SDPhoneAutoUnlockNotificationUpsellKey")));
    if (v20)
      break;

LABEL_16:
    if (v16 == (id)++v17)
    {
      v16 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
      if (v16)
        goto LABEL_8;
      v5 = v44;
      goto LABEL_4;
    }
  }
  v21 = (void *)v20;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "userInfo"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("SDPhoneAutoUnlockNotificationUpsellKey")));
  v24 = objc_msgSend(v23, "BOOLValue");
  v25 = a1;
  v26 = *(unsigned __int8 *)(a1 + 40);

  v27 = v26 == v24;
  a1 = v25;
  if (!v27)
    goto LABEL_16;

  v29 = auto_unlock_log(v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Found matching item to clear", buf, 2u);
  }

  v32 = *(void **)(*(_QWORD *)(v25 + 32) + 8);
  v53 = CFSTR("com.apple.sharingd.phone-auto-unlock-upsell");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v53, 1));
  v47 = 0;
  objc_msgSend(v32, "clearPendingFollowUpItemsWithUniqueIdentifiers:error:", v33, &v47);
  v34 = v47;

  v5 = v44;
  if (v34)
  {
    v36 = auto_unlock_log(v35);
    obj = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
      sub_10004D128(obj, v37, v38, v39, v40, v41, v42, v43);
    goto LABEL_4;
  }
LABEL_5:

}

void sub_10004C878(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSMutableDictionary *v4;
  CFUserNotificationRef v5;
  uint64_t v6;
  NSObject *v7;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18[12];
  SInt32 error;
  uint8_t buf[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to create Auto Relock Notification", buf, 2u);
  }

  error = 0;
  v4 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), kCFUserNotificationAlertHeaderKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), kCFUserNotificationAlertMessageKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCFUserNotificationAlertTopMostKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, SBUserNotificationDismissOnLock);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, SBUserNotificationDontDismissOnUnlock);
  v5 = CFUserNotificationCreate(0, 0.0, 0x23uLL, &error, (CFDictionaryRef)v4);
  qword_1007D7F18 = (uint64_t)v5;
  if (v5)
  {
    v6 = auto_unlock_log(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully created Auto Relock Notification", v18, 2u);
    }

    RunLoopSource = CFUserNotificationCreateRunLoopSource(0, (CFUserNotificationRef)qword_1007D7F18, (CFUserNotificationCallBack)sub_10004CA58, 0);
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
    CFRelease(RunLoopSource);
  }
  if (error)
  {
    v10 = auto_unlock_log(v5);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10004D258((uint64_t)&error, v11, v12, v13, v14, v15, v16, v17);

  }
}

void sub_10004CA58(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  if (qword_1007D7F18)
  {
    v1 = auto_unlock_log(a1);
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Releasing Auto Relock Notification", v3, 2u);
    }

    CFRelease((CFTypeRef)qword_1007D7F18);
    qword_1007D7F18 = 0;
  }
}

void sub_10004CB98(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSMutableDictionary *v4;
  CFUserNotificationRef v5;
  uint64_t v6;
  NSObject *v7;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18[12];
  SInt32 error;
  uint8_t buf[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to create Unlock Request Notification", buf, 2u);
  }

  error = 0;
  v4 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), kCFUserNotificationAlertHeaderKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), kCFUserNotificationAlertMessageKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCFUserNotificationAlertTopMostKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, SBUserNotificationDismissOnLock);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, SBUserNotificationDontDismissOnUnlock);
  v5 = CFUserNotificationCreate(0, 0.0, 0x23uLL, &error, (CFDictionaryRef)v4);
  qword_1007D7F20 = (uint64_t)v5;
  if (v5)
  {
    v6 = auto_unlock_log(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully created Unlock Request Notification", v18, 2u);
    }

    RunLoopSource = CFUserNotificationCreateRunLoopSource(0, (CFUserNotificationRef)qword_1007D7F20, (CFUserNotificationCallBack)sub_10004CD78, 0);
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
    CFRelease(RunLoopSource);
  }
  if (error)
  {
    v10 = auto_unlock_log(v5);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_10004D258((uint64_t)&error, v11, v12, v13, v14, v15, v16, v17);

  }
}

void sub_10004CD78(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  if (qword_1007D7F20)
  {
    v1 = auto_unlock_log(a1);
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Releasing Auto Relock Notification", v3, 2u);
    }

    CFRelease((CFTypeRef)qword_1007D7F20);
    qword_1007D7F20 = 0;
  }
}

id sub_10004CF28(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notification timer fired", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "dismissNotification");
  return objc_msgSend(*(id *)(a1 + 32), "notifyObservers:", "suggestionNotificationTimedOut");
}

void sub_10004D128(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a1, a3, "Error while clearing notification: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10004D190(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error while fetching notifications: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10004D1F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error while posting notification: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10004D258(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Failed to create Auto Relock notification (error: %d)", a5, a6, a7, a8, 0);
}

uint64_t SDAutoUnlockCleanUpAWDLReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10004D994()
{
  if (qword_1007C6520 != -1)
    dispatch_once(&qword_1007C6520, &stru_100714E10);
  return (id)qword_1007C6528;
}

void sub_10004D9D4(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.airdrop.queue", 0);
  v2 = (void *)qword_1007C6528;
  qword_1007C6528 = (uint64_t)v1;

}

const __CFString *sub_10004DA00(uint64_t a1, int a2)
{
  const __CFString *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *CStringPtr;
  int v22;
  const char *v23;

  v3 = (const __CFString *)CFPreferencesCopyValue(CFSTR("AirDropID"), kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (v3)
    return v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bluetoothAddress"));

  v6 = objc_msgSend(v5, "length");
  if (!v6)
  {
    v12 = airdrop_log(0);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "BT address not available, force random AirDrop ID", (uint8_t *)&v22, 2u);
    }

    goto LABEL_8;
  }
  if (a2)
  {
LABEL_8:
    v14 = airdrop_log(v6);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Random AirDrop ID requested", (uint8_t *)&v22, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "substringWithRange:", 24, 12));
    v3 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "lowercaseString"));

    goto LABEL_11;
  }
  v7 = sub_10019B308(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = SFHexStringForDataEx(v8, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "substringToIndex:", 12));
  v3 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lowercaseString"));
LABEL_11:

  CFPreferencesSetValue(CFSTR("AirDropID"), v3, kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  v17 = CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  v18 = airdrop_log(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    v22 = 136315138;
    v23 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Current AirDrop ID is %s", (uint8_t *)&v22, 0xCu);
  }

  return v3;
}

uint64_t sub_10004DC8C()
{
  CFPreferencesSetValue(CFSTR("AirDropID"), 0, kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  return CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

void sub_10004DCF8(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSMutableDictionary *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD block[4];
  id v11;

  v3 = a2;
  v4 = a1;
  pthread_mutex_lock(&stru_1007B05C8);
  v5 = (void *)qword_1007C6518;
  if (!qword_1007C6518)
  {
    v6 = objc_opt_new(NSMutableDictionary);
    v7 = (void *)qword_1007C6518;
    qword_1007C6518 = (uint64_t)v6;

    v5 = (void *)qword_1007C6518;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithNonretainedObject:](NSValue, "valueWithNonretainedObject:", v3));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v8);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004DDF8;
  block[3] = &unk_1007146D8;
  v11 = v3;
  v9 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  pthread_mutex_unlock(&stru_1007B05C8);

}

void sub_10004DDF8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.AirDropPeerChanged"), *(_QWORD *)(a1 + 32), 0);

}

void sub_10004DE48(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  pthread_mutex_lock(&stru_1007B05C8);
  v2 = (void *)qword_1007C6518;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithNonretainedObject:](NSValue, "valueWithNonretainedObject:", v1));
  objc_msgSend(v2, "removeObjectForKey:", v3);

  if (objc_msgSend((id)qword_1007C6518, "count"))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004DF1C;
    block[3] = &unk_1007146D8;
    v5 = v1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  pthread_mutex_unlock(&stru_1007B05C8);

}

void sub_10004DF1C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.AirDropPeerChanged"), *(_QWORD *)(a1 + 32), 0);

}

void sub_10004DF6C(const void *a1, void *a2)
{
  __CFDictionary *Mutable;
  id value;

  value = a2;
  pthread_mutex_lock(&stru_1007B0608);
  Mutable = (__CFDictionary *)qword_1007C6530;
  if (!qword_1007C6530)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, 0);
    qword_1007C6530 = (uint64_t)Mutable;
  }
  CFDictionarySetValue(Mutable, a1, value);
  pthread_mutex_unlock(&stru_1007B0608);

}

id sub_10004DFE4(const void *a1)
{
  void *Value;
  id v3;

  pthread_mutex_lock(&stru_1007B0608);
  Value = (void *)qword_1007C6530;
  if (qword_1007C6530)
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_1007C6530, a1);
  v3 = Value;
  pthread_mutex_unlock(&stru_1007B0608);
  return v3;
}

uint64_t sub_10004E038(const void *a1)
{
  pthread_mutex_lock(&stru_1007B0608);
  if (qword_1007C6530)
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1007C6530, a1);
  return pthread_mutex_unlock(&stru_1007B0608);
}

BOOL sub_10004E07C(void *a1, uint64_t a2, _BYTE *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _BOOL8 v19;
  _BYTE *v21;

  v5 = a1;
  v6 = objc_msgSend(v5, "count");
  v8 = (void *)SFNodeCopyModel(a2, v7);
  v9 = objc_msgSend(v8, "length");
  v10 = sub_10004E1B4(a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (!v6)
  {
    v13 = 0;
LABEL_12:
    v19 = v13 != 0;
    goto LABEL_15;
  }
  v21 = a3;
  v12 = 0;
  v13 = 0;
  while (1)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", v12));

    if (v14 != (void *)a2)
      break;
LABEL_9:
    if (v6 == (id)++v12)
      goto LABEL_12;
  }
  v15 = sub_10004E1B4((uint64_t)v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (!objc_msgSend(v16, "intersectsSet:", v11))
  {
LABEL_8:

    goto LABEL_9;
  }
  if (!v9)
    goto LABEL_14;
  v18 = (void *)SFNodeCopyModel(v14, v17);
  if (!objc_msgSend(v18, "isEqual:", v8))
  {
    ++v13;

    goto LABEL_8;
  }
  *v21 = 1;

LABEL_14:
  v19 = 1;
LABEL_15:

  return v19;
}

id sub_10004E1B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = (void *)SFNodeCopyAppleID(a1);
  if (v3
    && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "verifiedIdentityForAppleID:", v3)),
        v4,
        v4))
  {
    v5 = (void *)SFNodeCopyEmailHash(a1);
    v6 = (void *)SFNodeCopyPhoneHash(a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactsForEmailHash:phoneHash:", v5, v6));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t sub_10004E26C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "myAppleIDCommonName"));
  v4 = (void *)SFNodeCopyAppleID(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "verifiedIdentityForAppleID:", v4));

  if (v5)
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountIdentifier"));
  else
    v6 = 0;
  if (objc_msgSend(v3, "length")
    && objc_msgSend(v6, "length")
    && (objc_msgSend(v3, "isEqualToString:", v6) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = (void *)SFNodeCopyKinds(a1);
    if (objc_msgSend(v8, "containsObject:", kSFNodeKindRapport))
      v7 = (uint64_t)objc_msgSend(v8, "containsObject:", kSFNodeKindMe);
    else
      v7 = 0;

  }
  return v7;
}

id sub_10004E380(uint64_t a1)
{
  id v1;
  void *v2;
  NSMutableSet *v3;
  void *v4;

  v1 = sub_10004E1B4(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = sub_100195B94(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  return v4;
}

id sub_10004E3B8(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v1 = sub_10004E1B4(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = sub_10004E408(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));

  return v5;
}

id sub_10004E408(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactWithPreferredIdentifierForContacts:", v1));

  return v3;
}

void sub_10004E464(uint64_t a1, void *a2)
{
  int v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  char v13;

  v12 = a2;
  v13 = 0;
  v3 = sub_10004E26C(a1);
  v4 = (void *)SFNodeCopyDisplayName(a1);
  v5 = (void *)SFNodeCopyComputerName(a1);
  if ((objc_msgSend(v4, "isEqualToString:", v5) & 1) != 0
    || (sub_10004E07C(v12, a1, &v13) | v3) != 1
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor")),
        v7 = objc_msgSend(v6, "coalesceMe"),
        v6,
        (v7 & 1) != 0))
  {
    v9 = 0;
LABEL_5:
    v10 = v9;
    goto LABEL_6;
  }
  v9 = v5;
  if (v13)
    goto LABEL_5;
  v10 = (id)SFNodeCopyModel(a1, v8);
LABEL_6:
  v11 = v10;
  SFNodeSetSecondaryName(a1, v10);
  if (v3)
    SFNodeAddKind(a1, kSFNodeKindMe);
  else
    SFNodeRemoveKind(a1, kSFNodeKindMe);

}

void *sub_10004E578(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD v19[4];
  id v20;

  v6 = a1;
  v7 = a4;
  if (v7)
  {
    v8 = v7;
    v9 = 0;
  }
  else
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(+[SDXPCHelperConnection makeActivatedConnection](SDXPCHelperConnection, "makeActivatedConnection"));
    v9 = v8;
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10004E6D8;
  v19[3] = &unk_1007146D8;
  v10 = v9;
  v20 = v10;
  v11 = objc_retainBlock(v19);
  v12 = objc_msgSend(v8, "monogramImageDataForContact:style:diameter:monogramsAsFlatImages:isContactImage:", v6, 2, 1, a3, sub_100050B78());
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = v13;
  if (v13)
  {
    v15 = v13;
  }
  else
  {
    v16 = airdrop_log(0);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_100050DA4();

  }
  ((void (*)(_QWORD *))v11[2])(v11);

  return v14;
}

void sub_10004E6B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_10004E6D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void *sub_10004E6E0(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  _QWORD v21[4];
  id v22;
  uint8_t buf[24];

  v7 = a1;
  v8 = a2;
  v9 = a4;
  if (v9)
  {
    v10 = v9;
    v11 = 0;
  }
  else
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[SDXPCHelperConnection makeActivatedConnection](SDXPCHelperConnection, "makeActivatedConnection"));
    v11 = v10;
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10004E89C;
  v21[3] = &unk_1007146D8;
  v12 = v11;
  v22 = v12;
  v13 = objc_retainBlock(v21);
  v14 = objc_msgSend(v10, "copyConversationIdentityImageIconDataForImage:forConversationIdentifier:style:diameter:monogramsAsFlatImages:isContactImage:", v7, v8, 2, 1, a3, sub_100050B78());
  v15 = v14;
  if (v14)
  {
    v16 = v14;
  }
  else
  {
    v17 = airdrop_log(0);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_uri"));
      sub_100050E04(v19, buf, v18);
    }

  }
  ((void (*)(_QWORD *))v13[2])(v13);

  return v15;
}

void sub_10004E868(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_10004E89C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id sub_10004E8A4(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v3, "monogramImagesForMultipleContacts:style:diameter:monogramsAsFlatImages:", v4, 2, 1, sub_100050B78());
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

id sub_10004E904(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v14[4];
  id v15;

  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5 = v4;
    v6 = 0;
  }
  else
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(+[SDXPCHelperConnection makeActivatedConnection](SDXPCHelperConnection, "makeActivatedConnection"));
    v6 = v5;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004EA50;
  v14[3] = &unk_1007146D8;
  v7 = v6;
  v15 = v7;
  v8 = objc_retainBlock(v14);
  v9 = objc_msgSend(v5, "groupMonogramImageDataForContacts:style:diameter:monogramsAsFlatImages:processOppositeBackgroundStyle:", v3, 2, 1, 1, sub_100050B78());
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (!v10)
  {
    v11 = airdrop_log(0);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_100050E58();

  }
  ((void (*)(_QWORD *))v8[2])(v8);

  return v10;
}

void sub_10004EA30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_10004EA50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_10004EA58(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  const __CFString *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  NSMutableSet *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  const __CFString *v23;
  id v24;

  v24 = a2;
  v7 = a3;
  v8 = (const __CFString *)SFNodeCopyComputerName(a1);
  v9 = sub_10004E1B4(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_10004E408(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (!v12)
    goto LABEL_4;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
  SFNodeSetContactIdentifier(a1, v14);

  v15 = sub_100195B94(v10);
  SFNodeSetContactIdentifiers(a1, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "givenName"));
  SFNodeSetFirstName(a1, v16);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "familyName"));
  SFNodeSetLastName(a1, v17);

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "nickname"));
  SFNodeSetNickName(a1, v18);

  v19 = objc_alloc_init((Class)CNContactFormatter);
  v20 = objc_msgSend(v13, "mutableCopy");
  objc_msgSend(v20, "setMiddleName:", &stru_10072FE60);
  v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringFromContact:", v20));

  if (v21)
  {
    SFNodeSetDisplayName(a1, v21);
    sub_10004E464(a1, v24);
    SFNodeRemoveKind(a1, kSFNodeKindUnknown);
    CFRelease(v21);
  }
  else
  {
LABEL_4:
    SFNodeAddKind(a1, kSFNodeKindUnknown);
    if (v8)
      v23 = v8;
    else
      v23 = &stru_10072FE60;
    SFNodeSetDisplayName(a1, v23);
    SFNodeSetSecondaryName(a1, 0);
  }
  sub_10004EC60(a1, v22, a4, 0);

  if (v8)
    CFRelease(v8);

}

void sub_10004EC60(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const __CFData *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  CGImage *v24;
  CGImage *v25;
  signed int Width;
  signed int Height;
  void *v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const __CFData *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  CFIndex Length;
  id v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  unsigned __int8 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  CFIndex v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;

  v6 = a4;
  v7 = kSFNodeKindMonogram;
  SFNodeRemoveKind(a1, kSFNodeKindMonogram);
  v8 = (void *)SFNodeCopyKinds(a1);
  if (objc_msgSend(v8, "containsObject:", kSFNodeKindMe))
  {
    v10 = (void *)SFNodeCopyModel(a1, v9);
    if ((objc_msgSend(v10, "hasPrefix:", CFSTR("iPhone")) & 1) != 0)
    {
      v11 = CFSTR("iPhoneX");
    }
    else if ((objc_msgSend(v10, "hasPrefix:", CFSTR("iPad")) & 1) != 0)
    {
      v11 = CFSTR("iPadPro");
    }
    else if ((objc_msgSend(v10, "hasPrefix:", CFSTR("iPad mini")) & 1) != 0)
    {
      v11 = CFSTR("iPadmini");
    }
    else
    {
      v11 = CFSTR("iPod");
      if ((objc_msgSend(v10, "hasPrefix:", CFSTR("iPod")) & 1) == 0)
      {
        if ((objc_msgSend(v10, "hasPrefix:", CFSTR("MacBook Pro")) & 1) != 0)
        {
          v11 = CFSTR("MacBookPro");
        }
        else if ((objc_msgSend(v10, "hasPrefix:", CFSTR("MacBook Air")) & 1) != 0)
        {
          v11 = CFSTR("MacBookAir");
        }
        else if ((objc_msgSend(v10, "hasPrefix:", CFSTR("Mac Pro")) & 1) != 0)
        {
          v11 = CFSTR("MacPro3");
        }
        else if ((objc_msgSend(v10, "hasPrefix:", CFSTR("iMac Pro")) & 1) != 0)
        {
          v11 = CFSTR("iMacPro");
        }
        else
        {
          v11 = CFSTR("iMac");
          if ((objc_msgSend(v10, "hasPrefix:", CFSTR("iMac")) & 1) == 0)
          {
            if ((objc_msgSend(v10, "hasPrefix:", CFSTR("Mac mini")) & 1) != 0)
            {
              v11 = CFSTR("Macmini");
            }
            else
            {
              v39 = objc_msgSend(v10, "hasPrefix:", CFSTR("Mac Studio"));
              if ((v39 & 1) != 0)
              {
                v11 = CFSTR("MacStudio");
              }
              else
              {
                v40 = airdrop_log(v39);
                v41 = objc_claimAutoreleasedReturnValue(v40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                  sub_100050EB8((uint64_t)v10, a1, v41);

                v11 = 0;
              }
            }
          }
        }
      }
    }
    v42 = SFDeviceImageFromImageName(v11, 60.0, 60.0);
    v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v42));
    if (objc_msgSend(v43, "CGImage"))
    {
      v44 = SFDataFromCGImage(objc_msgSend(objc_retainAutorelease(v43), "CGImage"));
      v45 = objc_claimAutoreleasedReturnValue(v44);
      if (v45)
      {
        v46 = (const void *)v45;
        SFNodeSetIconData(a1, v45);
        CFRelease(v46);
      }
    }

    goto LABEL_57;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v13 = (void *)SFNodeCopyEmailHash(a1);
  v14 = SFNodeCopyPhoneHash(a1);
  v52 = (void *)SFNodeCopyRealName(a1, v15);
  v50 = (void *)v14;
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contactsForEmailHash:phoneHash:", v13, v14));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contactWithPreferredIdentifierForContacts:"));
  v17 = v16;
  if (v16)
  {
    v49 = v13;
    v53 = 0;
    v18 = (const __CFData *)sub_10004E578(v16, 0, (uint64_t)&v53, 0);
    v19 = airdrop_log(v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      if (v18)
        Length = CFDataGetLength(v18);
      else
        Length = -1;
      *(_DWORD *)buf = 138413058;
      v55 = v52;
      v56 = 2048;
      v57 = Length;
      v58 = 1024;
      v59 = a3;
      v60 = 1024;
      v61 = v53;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Icon for node with id = %@: iconDataSize = %ld preferVibrant = %d isContactImage = %d", buf, 0x22u);
    }

    if (!v18 || v53)
    {
      if (!v18)
      {
LABEL_24:
        v13 = v49;
        v23 = v50;
        goto LABEL_25;
      }
    }
    else
    {
      SFNodeAddKind(a1, v7);
    }
    v24 = sub_1000CE310(v18);
    if (v24)
    {
      v25 = v24;
      v47 = v8;
      v48 = v6;
      Width = CGImageGetWidth(v24);
      Height = CGImageGetHeight(v25);
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
      v29 = objc_msgSend(v28, "minPersonImageSize");

      CFRelease(v25);
      if (v29 > Width || v29 > Height)
      {
        v31 = airdrop_log(v30);
        v32 = objc_claimAutoreleasedReturnValue(v31);
        v8 = v47;
        v6 = v48;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v55 = v52;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Icon too small for node with id = %@", buf, 0xCu);
        }

        CFRelease(v18);
        v18 = 0;
      }
      else
      {
        v8 = v47;
        v6 = v48;
      }
    }
    goto LABEL_24;
  }
  v21 = airdrop_log(0);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v55 = v52;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No contact for node with id = %@", buf, 0xCu);
  }

  v18 = 0;
  v23 = v50;
LABEL_25:

  if (v18)
  {
LABEL_28:
    SFNodeSetIconData(a1, v18);
    CFRelease(v18);
    goto LABEL_57;
  }
  v33 = (const __CFData *)sub_10004E578(0, 0, 0, v6);
  if (v33)
  {
    v18 = v33;
    SFNodeAddKind(a1, v7);
    goto LABEL_28;
  }
  v34 = airdrop_log(0);
  v35 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v37 = (void *)SFNodeCopyRealName(a1, v36);
    *(_DWORD *)buf = 138412290;
    v55 = v37;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "No icon data for node with id = %@", buf, 0xCu);

  }
LABEL_57:

}

__CFArray *sub_10004F238(__SecTrust *a1)
{
  uint64_t TrustResult;
  uint64_t CertificateCount;
  uint64_t v4;
  __CFArray *Mutable;
  CFIndex v6;
  SecCertificateRef CertificateAtIndex;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  SecTrustResultType result;
  CFErrorRef error;

  if (a1)
  {
    error = 0;
    if (SecTrustEvaluateWithError(a1, &error)
      || (result = kSecTrustResultInvalid,
          TrustResult = SecTrustGetTrustResult(a1, &result),
          result == kSecTrustResultRecoverableTrustFailure))
    {
      CertificateCount = SecTrustGetCertificateCount(a1);
      v4 = CertificateCount;
      if (CertificateCount >= 1)
      {
        Mutable = CFArrayCreateMutable(0, CertificateCount, &kCFTypeArrayCallBacks);
        v6 = 0;
        do
        {
          CertificateAtIndex = SecTrustGetCertificateAtIndex(a1, v6);
          CFArrayAppendValue(Mutable, CertificateAtIndex);
          ++v6;
        }
        while (v4 != v6);
LABEL_18:
        if (error)
          CFRelease(error);
        return Mutable;
      }
      v17 = airdrop_log(CertificateCount);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_100050F8C(v4, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      v25 = airdrop_log(TrustResult);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        sub_100051058((uint64_t)&result, v26, v27, v28, v29, v30, v31, v32);

      v34 = airdrop_log(v33);
      v18 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_100050FF0((uint64_t)&error, v18, v35, v36, v37, v38, v39, v40);
    }

    Mutable = 0;
    goto LABEL_18;
  }
  v8 = airdrop_log(0);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_100050F5C(v9, v10, v11, v12, v13, v14, v15, v16);

  return 0;
}

uint64_t sub_10004F3B0(void *a1, __SecTrust *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  int v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  NSMutableString *v39;
  void *v40;
  NSMutableString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_t v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *log;
  os_log_t loga;
  void *v59;
  id v60;
  id v61;
  id v62;
  int v63;
  id v64;
  uint8_t buf[4];
  os_log_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  NSObject *v70;

  v9 = a1;
  v10 = a3;
  v11 = v10;
  if (v9)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v64 = 0;
    v13 = objc_msgSend(v12, "verifyAndParseValidationRecordData:intoDictionary:", v9, &v64);
    v14 = v64;
    v15 = v14;
    if ((v13 & 1) != 0)
    {
      if (v14)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", CFSTR("altDsID")));
        v17 = v16;
        if (v16)
          v18 = v16;
        else
          v18 = objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("encDsID")));
        v22 = v18;

        if (-[NSObject length](v22, "length"))
        {
          v24 = sub_10004F238(a2);
          if (-[NSObject count](v24, "count"))
          {
            v63 = 0;
            v25 = SFAppleIDVerifyCertificateChainSync(v24, &v63);
            if (!(_DWORD)v25 || v63)
            {
              v35 = airdrop_log(v25);
              v29 = objc_claimAutoreleasedReturnValue(v35);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                sub_100051244();
              v20 = 0;
              goto LABEL_40;
            }
            v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectAtIndexedSubscript:](v24, "objectAtIndexedSubscript:", 0));

            v62 = 0;
            v27 = SFAppleIDCommonNameForCertificate(v26, &v62);
            v28 = v62;
            v29 = v28;
            v63 = v27;
            if (v27)
            {
              v30 = airdrop_log(v28);
              v31 = objc_claimAutoreleasedReturnValue(v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                sub_1000511E0();
            }
            else
            {
              v36 = -[NSObject hasSuffix:](v28, "hasSuffix:", v22);
              if ((v36 & 1) != 0)
              {
                v56 = v29;
                v37 = objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("ValidatedEmailHashes")));
                v38 = objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", CFSTR("ValidatedPhoneHashes")));
                v39 = sub_10004F93C(v37);
                v61 = (id)objc_claimAutoreleasedReturnValue(v39);
                v59 = (void *)v38;
                v40 = (void *)v38;
                v31 = v37;
                v41 = sub_10004F93C(v40);
                v60 = (id)objc_claimAutoreleasedReturnValue(v41);
                v42 = airdrop_log(v60);
                log = objc_claimAutoreleasedReturnValue(v42);
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                {
                  v43 = SFShortHashArrayDescription(v37);
                  v54 = (os_log_t)objc_claimAutoreleasedReturnValue(v43);
                  v44 = SFShortHashArrayDescription(v59);
                  v45 = objc_claimAutoreleasedReturnValue(v44);
                  *(_DWORD *)buf = 138478083;
                  v66 = v54;
                  v67 = 2113;
                  v68 = v45;
                  v46 = (void *)v45;
                  _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "Hashes in validation record: Email=[%{private}@], Phone=[%{private}@]", buf, 0x16u);

                }
                v47 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "emailOrPhoneForEmailHash:phoneHash:", v61, v60));
                v29 = v56;
                loga = v47;
                if (v47)
                {
                  sub_10004FAAC(v24, v11, v47);
                }
                else
                {
                  v51 = airdrop_log(0);
                  v55 = objc_claimAutoreleasedReturnValue(v51);
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Hashes in validation record are not recognized.", buf, 2u);
                  }

                }
                if (a4)
                {
                  v48 = objc_retainAutorelease(v61);
                  *a4 = v48;
                }
                if (a5)
                {
                  v48 = objc_retainAutorelease(v60);
                  *a5 = v48;
                }
                v52 = airdrop_log(v48);
                v53 = objc_claimAutoreleasedReturnValue(v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v66 = v11;
                  _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Validation record data is accepted for %@", buf, 0xCu);
                }

                v20 = 1;
                goto LABEL_39;
              }
              v49 = airdrop_log(v36);
              v31 = objc_claimAutoreleasedReturnValue(v49);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412802;
                v66 = v22;
                v67 = 2112;
                v68 = (uint64_t)v29;
                v69 = 2112;
                v70 = v11;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%@ doesn't match %@ for %@", buf, 0x20u);
              }
            }
            v20 = 0;
LABEL_39:

LABEL_40:
            goto LABEL_41;
          }
          v33 = airdrop_log(0);
          v34 = objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            sub_100051180();

        }
        else
        {
          v32 = airdrop_log(0);
          v24 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            sub_100051120();
        }
        v20 = 0;
LABEL_41:

        goto LABEL_42;
      }
      v23 = airdrop_log(0);
      v22 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1000510C0();
    }
    else
    {
      v21 = airdrop_log(v14);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1000512A8();
    }
    v20 = 0;
LABEL_42:

    goto LABEL_43;
  }
  v19 = airdrop_log(v10);
  v15 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v66 = v11;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Validation record data for %@ not available", buf, 0xCu);
  }
  v20 = 0;
LABEL_43:

  return v20;
}

NSMutableString *sub_10004F93C(void *a1)
{
  id v1;
  char *v2;
  char *v3;
  char *v4;
  NSMutableString *v5;
  char *v6;
  void *v7;
  id v8;
  char *v9;
  unint64_t v10;
  void *v11;
  unint64_t i;
  void *v13;
  char __str[2];
  char v16;
  unint64_t v17;

  v1 = a1;
  v2 = (char *)objc_msgSend(v1, "count");
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = v2 - 1;
    do
    {
      if (!v5)
        v5 = objc_opt_new(NSMutableString);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", v4));
      v17 = 0;
      v16 = 0;
      v8 = objc_retainAutorelease(v7);
      v9 = (char *)objc_msgSend(v8, "UTF8String");
      v10 = (unint64_t)objc_msgSend(v8, "length");
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", v10 >> 1));
      if (v10)
      {
        for (i = 0; i < v10; i += 2)
        {
          *(_WORD *)__str = *(_WORD *)&v9[i];
          v17 = strtoul(__str, 0, 16);
          objc_msgSend(v11, "appendBytes:length:", &v17, 1);
        }
      }
      if (v11)
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "base64EncodedStringWithOptions:", 0));
      else
        v13 = 0;

      if (v13)
        -[NSMutableString appendString:](v5, "appendString:", v13);
      if (v4 != v6)
        -[NSMutableString appendString:](v5, "appendString:", CFSTR(","));

      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_10004FAAC(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDAppleIDAgent sharedAgent](SDAppleIDAgent, "sharedAgent"));
  v19 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "verifiedIdentityForCertificateChain:emailOrPhone:error:", v5, v7, &v19));
  v11 = v19;

  if (v10)
  {
    v13 = airdrop_log(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412803;
      v21 = v6;
      v22 = 2160;
      v23 = 1752392040;
      v24 = 2113;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Got verified identity for %@ (%{private, mask.hash}@)", buf, 0x20u);
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
    objc_msgSend(v8, "cacheIdentity:", v10);
    objc_msgSend(v8, "cacheCertificate:forRealName:", v15, v6);
  }
  else
  {
    v16 = SFMetricsLogUnexpectedEvent(4, objc_msgSend(v11, "code"), v7);
    v17 = airdrop_log(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138413059;
      v21 = v6;
      v22 = 2160;
      v23 = 1752392040;
      v24 = 2113;
      v25 = v7;
      v26 = 2112;
      v27 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "verifiedIdentityForCertificateChain failed for %@ (%{private, mask.hash}@) with error %@", buf, 0x2Au);
    }

  }
}

id sub_10004FCE0(void *a1, __SecTrust *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v27;
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;

  v7 = a1;
  v8 = a4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  if (a3)
    v11 = (id)SFNodeCopyRealName(a3, v9);
  else
    v11 = v8;
  v12 = v11;
  v28 = 0;
  v29 = 0;
  sub_10004F3B0(v7, a2, v11, &v29, &v28);
  v13 = v29;
  v14 = v28;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "emailOrPhoneForEmailHash:phoneHash:", v13, v14));
  if (!v15)
  {
    v22 = airdrop_log(0);
    v17 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Contact information not available for %@", buf, 0xCu);
    }
    goto LABEL_18;
  }
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "verifiedIdentityForAppleID:", v15));
  v17 = v16;
  if (!v16)
  {
    v23 = airdrop_log(0);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      sub_100051308((uint64_t)v15, v24, v25);

LABEL_18:
    v21 = 0;
    goto LABEL_19;
  }
  if (a3)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject emailOrPhone](v16, "emailOrPhone"));
    v19 = v18;
    if (!v18)
    {
      v20 = airdrop_log(0);
      v27 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        sub_100051384();

      v19 = v15;
    }
    SFNodeSetAppleID(a3, v19);
    SFNodeSetEmailHash(a3, v13);
    SFNodeSetPhoneHash(a3, v14);

  }
  v21 = v15;
LABEL_19:

  return v21;
}

id sub_10004FF20(void *a1, __SecTrust *a2, void *a3)
{
  return sub_10004FCE0(a1, a2, 0, a3);
}

id sub_10004FF2C(void *a1, __SecTrust *a2, uint64_t a3)
{
  return sub_10004FCE0(a1, a2, a3, 0);
}

unint64_t sub_10004FF34()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  v1 = (unint64_t)objc_msgSend(v0, "longValue") & 1;

  return v1;
}

unint64_t sub_10004FF64()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  v1 = ((unint64_t)objc_msgSend(v0, "longValue") >> 1) & 1;

  return v1;
}

unint64_t sub_10004FF94()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  v1 = ((unint64_t)objc_msgSend(v0, "longValue") >> 3) & 1;

  return v1;
}

unint64_t sub_10004FFC4()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  v1 = ((unint64_t)objc_msgSend(v0, "longValue") >> 2) & 1;

  return v1;
}

unint64_t sub_10004FFF4()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  v1 = ((unint64_t)objc_msgSend(v0, "longValue") >> 6) & 1;

  return v1;
}

unint64_t sub_100050024()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  if ((objc_msgSend(v0, "longValue") & 0x80) != 0)
    v1 = 1;
  else
    v1 = sub_10004FF94();

  return v1;
}

unint64_t sub_10005006C()
{
  void *v0;
  unint64_t v1;

  v0 = (void *)SFNodeCopyFlags();
  v1 = ((unint64_t)objc_msgSend(v0, "longValue") >> 9) & 1;

  return v1;
}

const __CFString *sub_10005009C(const __CFString *result)
{
  if (result)
    return (const __CFString *)(CFStringGetLength(result) == 12);
  return result;
}

void sub_1000500BC(__CFDictionary *a1, CFDictionaryRef theDict)
{
  const void *v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFIndex v28;
  CFIndex valuePtr;

  v3 = (const void *)kSFOperationFilesCopiedKey;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kSFOperationFilesCopiedKey);
  if (!Value)
  {
    CFDictionaryRemoveValue(a1, v3);
    return;
  }
  v5 = Value;
  valuePtr = 0;
  v6 = CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
  if (!(_DWORD)v6)
  {
    v9 = airdrop_log(v6);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1000513E4(v10, v11, v12, v13, v14, v15, v16, v17);
    goto LABEL_11;
  }
  v7 = (const __CFArray *)CFDictionaryGetValue(a1, kSFOperationFilesKey);
  if (!v7)
  {
    v18 = airdrop_log(0);
    v10 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_100051414(v10, v19, v20, v21, v22, v23, v24, v25);
LABEL_11:

    return;
  }
  Count = CFArrayGetCount(v7);
  if (valuePtr >= Count)
  {
    v28 = Count - 1;
    v26 = CFNumberCreate(0, kCFNumberSInt64Type, &v28);
    if (v26)
    {
      v27 = v26;
      CFDictionarySetValue(a1, v3, v26);
      CFRelease(v27);
    }
  }
  else
  {
    CFDictionarySetValue(a1, v3, v5);
  }
}

uint64_t sub_1000501FC()
{
  __CFDictionary *Mutable;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  IOPMAssertionID AssertionID;

  AssertionID = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, CFSTR("FrameworkBundleID"), CFSTR("com.apple.Sharing"));
  CFDictionarySetValue(Mutable, CFSTR("AssertType"), CFSTR("PreventUserIdleSystemSleep"));
  CFDictionarySetValue(Mutable, CFSTR("AssertName"), CFSTR("AirDrop"));
  v1 = IOPMAssertionCreateWithProperties(Mutable, &AssertionID);
  if ((_DWORD)v1)
  {
    v2 = v1;
    v3 = airdrop_log(v1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100051444(v2, v4, v5, v6, v7, v8, v9, v10);

    AssertionID = 0;
  }
  CFRelease(Mutable);
  return AssertionID;
}

BOOL sub_1000502E0()
{
  id v0;
  id v1;
  void *v2;
  uint64_t v3;
  NSMutableDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSBundle *v17;
  void *v18;
  void *v19;
  CFUserNotificationRef v20;
  SInt32 v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t v34[12];
  SInt32 error;
  uint8_t buf[16];

  v0 = objc_alloc_init((Class)ACAccountStore);
  v1 = sub_10019B264(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if (!v2)
  {
    if (qword_1007D7F28)
    {
      v3 = airdrop_log(0);
      v4 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(&v4->super.super, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, &v4->super.super, OS_LOG_TYPE_DEFAULT, "Missing Apple ID already presented", buf, 2u);
      }
    }
    else
    {
      error = 0;
      v4 = objc_opt_new(NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, SBUserNotificationDismissOnLock);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, SBUserNotificationDontDismissOnUnlock);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kCFUserNotificationAlertTopMostKey);
      v6 = SFLocalizedStringForKey(CFSTR("AirDrop"), v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v7, kCFUserNotificationAlertHeaderKey);

      v9 = SFLocalizedStringForKey(CFSTR("NO_APPLE_ID_ACCOUNT_ALERT_TEXT"), v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v10, kCFUserNotificationAlertMessageKey);

      v12 = SFLocalizedStringForKey(CFSTR("OPEN_SETTINGS_BUTTON_TITLE"), v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v13, kCFUserNotificationDefaultButtonTitleKey);

      v15 = SFLocalizedStringForKey(CFSTR("CANCEL_BUTTON_TITLE"), v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v16, kCFUserNotificationAlternateButtonTitleKey);

      v17 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(NSBundle));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "resourceURL"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v19, kCFUserNotificationLocalizationURLKey);

      v20 = CFUserNotificationCreate(0, 0.0, 3uLL, &error, (CFDictionaryRef)v4);
      qword_1007D7F28 = (uint64_t)v20;
      v21 = error;
      v22 = airdrop_log(v20);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      v24 = v23;
      if (v21 || !v20)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          sub_1000514A8((uint64_t)&error, v24, v27, v28, v29, v30, v31, v32);

        if (qword_1007D7F28)
        {
          CFRelease((CFTypeRef)qword_1007D7F28);
          qword_1007D7F28 = 0;
        }
      }
      else
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Present missing Apple ID alert", v34, 2u);
        }

        RunLoopSource = CFUserNotificationCreateRunLoopSource(0, (CFUserNotificationRef)qword_1007D7F28, (CFUserNotificationCallBack)sub_100050BCC, 0);
        Main = CFRunLoopGetMain();
        CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
        CFRelease(RunLoopSource);
      }
    }

  }
  return v2 == 0;
}

id sub_1000505FC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const __CFDictionary *v11;
  __CFUserNotification *v12;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  SInt32 error;
  _QWORD v25[6];
  _QWORD v26[6];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v1 = objc_msgSend(v0, "wirelessCarPlay");

  if ((_DWORD)v1 && !qword_1007D7F30)
  {
    v25[0] = SBUserNotificationDismissOnLock;
    v25[1] = SBUserNotificationDontDismissOnUnlock;
    error = 0;
    v26[0] = &__kCFBooleanFalse;
    v26[1] = &__kCFBooleanTrue;
    v26[2] = &__kCFBooleanTrue;
    v25[2] = kCFUserNotificationAlertTopMostKey;
    v25[3] = kCFUserNotificationAlertHeaderKey;
    v3 = SFLocalizedStringForKey(CFSTR("AirDrop"), v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v26[3] = v4;
    v25[4] = kCFUserNotificationAlertMessageKey;
    v6 = SFLocalizedStringForKey(CFSTR("RECEIVER_WIRELESS_CARPLAY_HELP_TEXT"), v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v26[4] = v7;
    v25[5] = kCFUserNotificationDefaultButtonTitleKey;
    v9 = SFLocalizedStringForKey(CFSTR("OK_BUTTON_TITLE"), v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v26[5] = v10;
    v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 6));

    v12 = CFUserNotificationCreate(0, 0.0, 3uLL, &error, v11);
    qword_1007D7F30 = (uint64_t)v12;
    if (error || !v12)
    {
      v15 = airdrop_log(v12);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_100051510((uint64_t)&error, v16, v17, v18, v19, v20, v21, v22);

      if (qword_1007D7F30)
      {
        CFRelease((CFTypeRef)qword_1007D7F30);
        qword_1007D7F30 = 0;
      }
    }
    else
    {
      RunLoopSource = CFUserNotificationCreateRunLoopSource(0, v12, (CFUserNotificationCallBack)sub_100050D44, 0);
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
      CFRelease(RunLoopSource);
    }

  }
  return v1;
}

id sub_10005081C(int a1, const void *a2)
{
  NSMutableDictionary *v4;
  uint64_t v5;
  NSMutableDictionary *v6;
  const __CFString *v7;
  uint64_t v8;
  __CFString *v9;
  void *v10;
  CFTypeID v11;
  void *v12;

  v4 = objc_opt_new(NSMutableDictionary);
  v6 = v4;
  switch(a1)
  {
    case -8:
      v7 = CFSTR("System Sleep");
      goto LABEL_13;
    case -7:
      if (SFIsGreenTeaDevice(v4, v5))
        v7 = CFSTR("WLAN Disabled");
      else
        v7 = CFSTR("WiFi Disabled");
      goto LABEL_13;
    case -6:
      v7 = CFSTR("File Not Readable");
      goto LABEL_11;
    case -5:
      v7 = CFSTR("Invalid File");
      goto LABEL_13;
    case -4:
      v7 = CFSTR("No Files");
      goto LABEL_13;
    case -3:
      v7 = CFSTR("Authentication Failed");
LABEL_11:
      v8 = (uint64_t)a2;
      goto LABEL_14;
    case -2:
      v7 = CFSTR("Not Enough Space");
      goto LABEL_13;
    default:
      v7 = CFSTR("Transfer Failed 1");
LABEL_13:
      v8 = 0;
LABEL_14:
      v9 = sub_100050988(v7, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      if (a2)
      {
        v11 = CFGetTypeID(a2);
        if (v11 == CFErrorGetTypeID())
          -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", a2, NSUnderlyingErrorKey);
      }
      if (v10)
        -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v10, NSLocalizedDescriptionKey);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCFErrorDomainSFOperation, a1, v6));

      return v12;
  }
}

__CFString *sub_100050988(const __CFString *a1, uint64_t a2)
{
  __CFString *v3;
  CFStringRef v4;

  v3 = (__CFString *)sub_1000CDAF0(a1);
  if (v3 && a2)
  {
    v4 = CFStringCreateWithFormat(0, 0, v3, a2);
    CFRelease(v3);
    v3 = (__CFString *)v4;
  }
  return v3;
}

BOOL sub_1000509E4(void *a1)
{
  id v1;
  id v2;
  void *v3;
  unsigned int v4;

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "fileSystemRepresentation");
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
    if (objc_msgSend(v3, "length")
      && objc_msgSend(v3, "hasPrefix:", CFSTR("./"))
      && (objc_msgSend(v3, "hasSuffix:", CFSTR("/..")) & 1) == 0)
    {
      v4 = objc_msgSend(v3, "containsString:", CFSTR("../"));
    }
    else
    {
      v4 = 1;
    }

  }
  else
  {
    v4 = 1;
  }

  return v4 == 0;
}

BOOL sub_100050AB8(void *a1)
{
  id v1;
  id v2;
  void *v3;
  unsigned int v4;

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "fileSystemRepresentation");
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
    if (objc_msgSend(v3, "length") && (objc_msgSend(v3, "isEqualToString:", CFSTR(".")) & 1) == 0)
      v4 = objc_msgSend(v3, "containsString:", CFSTR("/"));
    else
      v4 = 1;

  }
  else
  {
    v4 = 1;
  }

  return v4 == 0;
}

double sub_100050B78()
{
  void *v0;
  unint64_t v1;
  double result;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = (unint64_t)objc_msgSend(v0, "userInterfaceIdiom");

  result = 66.0;
  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    return 62.0;
  return result;
}

void sub_100050BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  dispatch_queue_global_t v8;
  NSObject *v9;
  _DWORD v10[2];

  v3 = airdrop_log(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Missing Apple ID notification response handler called -> responseFlags (%d)", (uint8_t *)v10, 8u);
  }

  if (!a2)
  {
    v6 = airdrop_log(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Request to open iCloud settings", (uint8_t *)v10, 2u);
    }

    v8 = sub_10019AB98();
    v9 = objc_claimAutoreleasedReturnValue(v8);
    dispatch_async(v9, &stru_100714E30);

  }
  CFRelease((CFTypeRef)qword_1007D7F28);
  qword_1007D7F28 = 0;
}

void sub_100050CE0(id a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=APPLE_ACCOUNT&path=ICLOUD_SERVICE")));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  objc_msgSend(v1, "openSensitiveURL:withOptions:", v2, 0);

}

void sub_100050D44()
{
  CFRelease((CFTypeRef)qword_1007D7F30);
  qword_1007D7F30 = 0;
}

void sub_100050D6C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_100050D98(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100050DA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CNMonogrammer monogramForContact:isContactImage: returned nil for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100050E04(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "copyConversationIdentityImageIconDataForImage:forConversationIdentifier:style:diameter:monogramsAsFlatImages:isContactImage returned nil for %@", buf, 0xCu);

}

void sub_100050E58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CNMonogrammer monogramForContacts: returned nil for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100050EB8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v5 = (void *)SFNodeCopyRealName(a2, a2);
  v7 = 138412546;
  v8 = a1;
  v9 = 2112;
  v10 = v5;
  sub_100050D98((void *)&_mh_execute_header, a3, v6, "No icon data for node with model = %@, id = %@", (uint8_t *)&v7);

}

void sub_100050F5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "copyCertificateChainFromTrust: SecTrustRef is NULL", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100050F8C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "copyCertificateChainFromTrust: SecTrustGetCertificateCount returned %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100050FF0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "copyCertificateChainFromTrust: SecTrustEvaluateWithError failed %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100051058(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "copyCertificateChainFromTrust: SecTrustEvaluate result is %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000510C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Validation record for %@ is nil", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100051120()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Validation record altDSID for %@ is zero length", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100051180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Certificate chain for %@ is empty", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000511E0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100050D80();
  sub_100050D6C((void *)&_mh_execute_header, v0, v1, "SFAppleIDCommonNameForCertificate for %@ failed with error %d");
  sub_10001949C();
}

void sub_100051244()
{
  uint64_t v0;
  os_log_t v1;

  sub_100050D80();
  sub_100050D6C((void *)&_mh_execute_header, v0, v1, "Certificate chain not trusted. SFAppleIDVerifyCertificateChainSync for %@ failed with error %d");
  sub_10001949C();
}

void sub_1000512A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Validation record data verification failed for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100051308(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 141558275;
  v4 = 1752392040;
  v5 = 2113;
  v6 = a1;
  sub_100050D98((void *)&_mh_execute_header, a2, a3, "Unable to verify identity for %{private, mask.hash}@", (uint8_t *)&v3);
  sub_10001949C();
}

void sub_100051384()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Verified identity has a null email or phone (should never happen) %{private}@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000513E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "storeFilesCopied: CFNumberGetValue failed", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100051414(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "storeFilesCopied: kSFOperationFilesKey is missing", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100051444(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "IOPMAssertionCreateWithProperties returned %x", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000514A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Couldn't put up the missing Apple ID alert! (error = %d)", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100051510(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Couldn't put up the Wireless CarPlay alert! (error = %d)", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000515B8(id a1)
{
  SDStreamManager *v1;
  void *v2;

  v1 = -[SDStreamManager initWithServiceType:]([SDStreamManager alloc], "initWithServiceType:", CFSTR("_continuity._tcp."));
  v2 = (void *)qword_1007C6538;
  qword_1007C6538 = (uint64_t)v1;

}

void sub_100051970(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  void *v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SDStreamActivityIdentifier")));
  v4 = streams_log(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "count");
    v11 = 134218242;
    v12 = v6;
    v13 = 2112;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received continuation payload sent notification with %lu clients, activity ID = %@", (uint8_t *)&v11, 0x16u);
  }

  v7 = objc_msgSend(*(id *)(a1 + 40), "servicesContainIdentifier:", v2);
  if ((_DWORD)v7)
  {
    objc_msgSend(*(id *)(a1 + 40), "publish");
  }
  else
  {
    v9 = streams_log(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Activity not stream activity, not publishing", (uint8_t *)&v11, 2u);
    }

  }
}

uint64_t sub_10005219C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100052B80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = streams_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Republishing service", v6, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "publish");
}

uint64_t sub_100052F34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000530D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Service does not have a bonjour name", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000530FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create net service", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100053128()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create stream handler", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100053154()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Wi-Fi not enabled on local iOS device", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100053180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No stream ID when trying to publish", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000531AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create NSNetService", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000531D8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  sub_100050D98((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to published net service = %@, errorDict = %@", (uint8_t *)&v3);
}

void sub_100053254()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create stream handler, other side should be timing out", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100053280(void *a1, uint64_t *a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "managerID"));
  v6 = *a2;
  v8 = 138412546;
  v9 = v5;
  v10 = 2112;
  v11 = v6;
  sub_100050D98((void *)&_mh_execute_header, a3, v7, "No manager for received ID = %@, managers = %@", (uint8_t *)&v8);

}

void sub_10005336C(id a1)
{
  SDSetupAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDSetupAgent);
  v2 = (void *)gSDSetupAgent;
  gSDSetupAgent = v1;

}

id sub_100053FF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

_QWORD *sub_1000540D4(_QWORD *result)
{
  _QWORD *v1;

  if (*(_DWORD *)(result[4] + 72) != -1)
  {
    v1 = result;
    if (dword_1007B0708 <= 40
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 40)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _activate]_block_invoke", 40, "Profiles changed\n");
    }
    return objc_msgSend((id)v1[4], "prefsChanged");
  }
  return result;
}

id sub_1000541B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_10005432C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  if (!objc_msgSend(*(id *)(a1 + 32), "_uiShowing"))
  {
    if (dword_1007B0708 <= 50
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent nfcTagReaderUIActivateWithEndpoint:params:completion:]_block_invoke", 50, "Start NFC Tag Reader UI\n");
    }
    v6 = objc_alloc_init((Class)SFDevice);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    objc_msgSend(v6, "setIdentifier:", v4);

    objc_msgSend(*(id *)(a1 + 32), "_uiStartWithDevice:viewControllerName:xpcEndpoint:label:unlessApps:extraInfo:", v6, CFSTR("NFCTagReaderMainController"), *(_QWORD *)(a1 + 40), CFSTR("NFCUI"), 0, *(_QWORD *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 56);
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);
    goto LABEL_15;
  }
  if (dword_1007B0708 <= 60 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 60)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent nfcTagReaderUIActivateWithEndpoint:params:completion:]_block_invoke", 60, "### Ignoring NFC Tag Reader UI when already showing UI\n");
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = NSErrorWithOSStatusF(4294960575, "Prox UI Already Active");
    v6 = (id)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v6);
LABEL_15:

  }
}

const char *sub_10005511C(int a1)
{
  const char *result;

  if (a1 > 99)
  {
    switch(a1)
    {
      case 'd':
        return "B238SetupAfterWiFi";
      case 'e':
        return "B389SetupFromFindMy";
      case 'f':
        return "B389SetupDone";
      default:
        return "?";
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "ATVSetup";
        break;
      case 4:
        result = "MobileBackup";
        break;
      case 5:
        result = "WatchSetup";
        break;
      case 6:
        result = "ATVPair";
        break;
      case 7:
        result = "InternetRelay";
        break;
      case 8:
        result = "WiFiPassword";
        break;
      case 9:
        result = "iOSSetup";
        break;
      case 10:
        result = "Repair";
        break;
      case 11:
        result = "LegacyHomePodSetup";
        break;
      case 12:
        result = "ApplePay";
        break;
      case 13:
        result = "WHASetup";
        break;
      case 14:
        result = "DevToolsPair";
        break;
      case 17:
        result = "DDPing";
        break;
      case 18:
        result = "DDPong";
        break;
      case 19:
        result = "RemoteAutoFill";
        break;
      case 20:
        result = "CompanionLinkProx";
        break;
      case 21:
        result = "RemoteManagement";
        break;
      case 22:
        result = "RemoteAutoFillPong";
        break;
      case 24:
        result = "AccessorySetup";
        break;
      case 25:
        result = "TVLS";
        break;
      case 27:
        result = "ShareAudio";
        break;
      case 28:
        result = "AppSignIn";
        break;
      case 29:
        result = "Fitness";
        break;
      case 30:
        result = "TVCCS";
        break;
      case 31:
        result = "TVSA";
        break;
      case 32:
        result = "AuthenticateAccounts";
        break;
      case 33:
        result = "HomePodSetup";
        break;
      case 34:
        result = "CompanionAuthentication";
        break;
      case 36:
        result = "dovePeace";
        break;
      case 43:
        result = "AuthenticateAccountsV2";
        break;
      case 50:
        result = "NeedsRDLink";
        break;
      case 51:
        result = "NeedsCLink";
        break;
      case 52:
        result = "Goodbye";
        break;
      case 53:
        result = "PointToShare";
        break;
      case 55:
        result = "AUAction";
        break;
      case 56:
        result = "AcceptedInvitations";
        break;
      case 84:
        result = "HasInvitations";
        break;
      default:
        return "?";
    }
  }
  return result;
}

uint64_t sub_100055408(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_uiStartRepair:flags:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000554BC(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _OWORD v12[4];
  NSErrorUserInfoKey v13;
  const __CFString *v14;
  _BYTE v15[128];

  memset(v12, 0, sizeof(v12));
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 144);
  if (objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v12, v15, 16))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "objectForKeyedSubscript:", **((_QWORD **)&v12[0] + 1)));

    if (v3)
    {
      if (objc_msgSend(v3, "deviceActionType") == 36
        && _os_feature_enabled_impl("TDGSharingViewService", "Setup"))
      {
        if (objc_msgSend(*(id *)(a1 + 32), "_deviceHandlesDovePeaceSetup"))
        {
          if (dword_1007B0708 <= 50
            && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
          {
            LogPrintF(&dword_1007B0708, "-[SDSetupAgent retriggerProximitySetup:]_block_invoke", 50, "Re-triggering dovePeace setup UI for %@\n", v3);
          }
          objc_msgSend(*(id *)(a1 + 32), "_uiStartSetupDovePeace:autoStart:", v3, 1);
        }
        else if (dword_1007B0708 <= 50
               && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
        {
          LogPrintF(&dword_1007B0708, "-[SDSetupAgent retriggerProximitySetup:]_block_invoke", 50, "DovePeace setup UI not supported for %@\n", v3);
        }
      }
      else
      {
        if (dword_1007B0708 <= 50
          && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
        {
          LogPrintF(&dword_1007B0708, "-[SDSetupAgent retriggerProximitySetup:]_block_invoke", 50, "Re-triggering setup UI for %@\n", v3);
        }
        objc_msgSend(*(id *)(a1 + 32), "_uiStartSetupiOS:autoStart:", v3, 1);
      }
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
        (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
      goto LABEL_26;
    }
  }
  else
  {

  }
  if (dword_1007B0708 <= 90 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 90)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent retriggerProximitySetup:]_block_invoke", 90, "### Re-trigger failed: no triggered devices\n");
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v13 = NSLocalizedDescriptionKey;
    v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(4294960569, 0, 0));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)v6;
    v8 = CFSTR("?");
    if (v6)
      v8 = (const __CFString *)v6;
    v14 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, -6727, v9));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v10);

  }
  v3 = 0;
LABEL_26:

}

uint64_t sub_10005589C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_uiStartSetupB238:extraInfo:", *(_QWORD *)(a1 + 40), 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100055980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  if (!objc_msgSend(*(id *)(a1 + 32), "_uiShowing"))
  {
    if (dword_1007B0708 <= 50
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent showDevicePickerWithInfo:completion:]_block_invoke", 50, "Start Device Picker UI\n");
    }
    v6 = objc_alloc_init((Class)SFDevice);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    objc_msgSend(v6, "setIdentifier:", v4);

    objc_msgSend(*(id *)(a1 + 32), "_uiStartWithDevice:viewControllerName:label:unlessApps:extraInfo:", v6, CFSTR("ProfileDevicePickerMainController"), CFSTR("DevicePicker"), 0, *(_QWORD *)(a1 + 40));
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);
    goto LABEL_15;
  }
  if (dword_1007B0708 <= 60 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 60)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent showDevicePickerWithInfo:completion:]_block_invoke", 60, "### Ignoring Device Picker UI when already showing UI\n");
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = NSErrorWithOSStatusF(4294960575, "Prox UI Already Active");
    v6 = (id)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v6);
LABEL_15:

  }
}

void sub_100055BA0(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSErrorUserInfoKey v10;
  const __CFString *v11;

  if (objc_msgSend(*(id *)(a1 + 32), "_uiShowing"))
  {
    if (dword_1007B0708 <= 60
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 60)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent triggerHomeKitDeviceDetectedWithURL:completion:]_block_invoke", 60, "### Ignoring HomeKit Device Detected UI when already showing UI\n");
    }
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v10 = NSLocalizedDescriptionKey;
      v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(4294960575, 0, 0));
      v4 = objc_claimAutoreleasedReturnValue(v3);
      v5 = (void *)v4;
      v6 = CFSTR("?");
      if (v4)
        v6 = (const __CFString *)v4;
      v11 = v6;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, -6721, v7));
      (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v8);

    }
  }
  else
  {
    if (dword_1007B0708 <= 50
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent triggerHomeKitDeviceDetectedWithURL:completion:]_block_invoke", 50, "Triggering HomeKit Device Detected UI: '%@'\n", *(_QWORD *)(a1 + 40));
    }
    objc_msgSend(*(id *)(a1 + 32), "_uiStartHomeKitDeviceDetectedWithURL:", *(_QWORD *)(a1 + 40));
    v9 = *(_QWORD *)(a1 + 48);
    if (v9)
      (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, 0);
  }
}

_QWORD *sub_100056644(_QWORD *result)
{
  _QWORD *v1;

  if (*(_DWORD *)(result[4] + 256) != -1)
  {
    v1 = result;
    if (dword_1007B0708 <= 40
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 40)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureClientStarted]_block_invoke", 40, "iTunes accounts changed\n");
    }
    return _objc_msgSend((id)v1[4], "_iTunesAccountsChanged");
  }
  return result;
}

id sub_1000566D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_primaryAccountChanged");
}

id sub_1000566DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_uiLockStatusChanged");
}

id sub_1000566E4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_wifiStateChanged");
}

id sub_1000566EC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_primaryAccountChanged");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100056714(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_scanTimerFired");
}

id sub_10005671C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

id sub_100056728(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceLost:", a2);
}

id sub_100056734(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

void sub_100056740(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  int v7;
  NSError *v8;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B0708 <= 60)
    {
      v8 = v2;
      if (dword_1007B0708 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B0708, 60), v3 = v8, v6))
      {
        v4 = "### Discovery start failed: %@\n";
        v5 = 60;
LABEL_8:
        LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureClientStarted]_block_invoke_11", v5, v4);

        return;
      }
    }
  }
  else if (dword_1007B0708 <= 30)
  {
    v8 = 0;
    if (dword_1007B0708 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B0708, 30), v3 = 0, v7))
    {
      v4 = "Discovery started\n";
      v5 = 30;
      goto LABEL_8;
    }
  }

}

void sub_100056814(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_1007B39B8 <= 30)
  {
    if (dword_1007B39B8 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B39B8, 30), v3 = v5, v4))
    {
      LogPrintF(&dword_1007B39B8, "-[SDSetupAgent _ensureClientStarted]_block_invoke_12", 30, "BLE WatchSetup found %@\n", v3);
      v3 = v5;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_watchFound:", v3);

}

void sub_1000568AC(id a1, SFBLEDevice *a2)
{
  SFBLEDevice *v2;
  SFBLEDevice *v3;
  int v4;
  SFBLEDevice *v5;

  v2 = a2;
  v3 = v2;
  if (dword_1007B39B8 <= 30
    && ((v5 = v2, dword_1007B39B8 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B39B8, 30), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B39B8, "-[SDSetupAgent _ensureClientStarted]_block_invoke_13", 30, "BLE WatchSetup lost %@\n", v3);

  }
  else
  {

  }
}

void sub_10005692C(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_1007B39B8 <= 30)
  {
    if (dword_1007B39B8 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B39B8, 30), v3 = v5, v4))
    {
      LogPrintF(&dword_1007B39B8, "-[SDSetupAgent _ensureClientStarted]_block_invoke_14", 30, "BLE WatchSetup changed %@\n", v3);
      v3 = v5;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_watchFound:", v3);

}

void sub_1000569C4(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B0708 <= 60
    && ((v5 = v2, dword_1007B0708 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B0708, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureClientStarted]_block_invoke_15", 60, "### WatchScan start failed: %@\n", v3);

  }
  else
  {

  }
}

void sub_1000584FC(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  OS_xpc_object *v3;
  int v4;
  OS_xpc_object *v5;

  v2 = a2;
  v3 = v2;
  if (v2 == (OS_xpc_object *)&_xpc_error_connection_invalid
    || dword_1007B0708 > 30
    || (v5 = v2, dword_1007B0708 == -1) && (v4 = _LogCategory_Initialize(&dword_1007B0708, 30), v3 = v5, !v4))
  {

  }
  else
  {
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _launchAppWithMachServiceName:]_block_invoke", 30, "Launch XPC event: %{xpc}\n", v3);

  }
}

void sub_10005858C(uint64_t a1)
{
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  if (dword_1007B0708 <= 30 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _launchAppWithMachServiceName:]_block_invoke_2", 30, "Launch XPC '%@' finish\n", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10005880C(uint64_t result)
{
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(*(_QWORD *)(result + 40) + 80))
  {
    if (dword_1007B0708 <= 30)
    {
      if (dword_1007B0708 != -1)
        return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidActivate:]_block_invoke", 30, "UI DidActivate\n");
      result = _LogCategory_Initialize(&dword_1007B0708, 30);
      if ((_DWORD)result)
        return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidActivate:]_block_invoke", 30, "UI DidActivate\n");
    }
  }
  else if (dword_1007B0708 <= 50)
  {
    if (dword_1007B0708 != -1)
      return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidActivate:]_block_invoke", 50, "### Unknown UI DidActivate\n");
    result = _LogCategory_Initialize(&dword_1007B0708, 50);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidActivate:]_block_invoke", 50, "### Unknown UI DidActivate\n");
  }
  return result;
}

uint64_t sub_100058940(uint64_t result)
{
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(*(_QWORD *)(result + 40) + 80))
  {
    if (dword_1007B0708 <= 30)
    {
      if (dword_1007B0708 != -1)
        return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, "UI DidDeactivate\n");
      result = _LogCategory_Initialize(&dword_1007B0708, 30);
      if ((_DWORD)result)
        return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, "UI DidDeactivate\n");
    }
  }
  else if (dword_1007B0708 <= 50)
  {
    if (dword_1007B0708 != -1)
      return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidDeactivate:]_block_invoke", 50, "### Unknown UI DidActivate\n");
    result = _LogCategory_Initialize(&dword_1007B0708, 50);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandleDidDeactivate:]_block_invoke", 50, "### Unknown UI DidActivate\n");
  }
  return result;
}

void sub_100058AA0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  if (a1[4] == *(_QWORD *)(a1[5] + 80))
  {
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "UI DidInvalidate: %{error}\n", a1[6]);
    }
    v2 = a1[5];
    v3 = *(void **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;

    v4 = (_QWORD *)a1[5];
    if (v4[14])
    {
      objc_msgSend(v4, "_openSetupURL:");
      v5 = a1[5];
      v6 = *(void **)(v5 + 112);
      *(_QWORD *)(v5 + 112) = 0;

    }
  }
  else if (dword_1007B0708 <= 30
         && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
  {
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Unknown UI DidInvalidate: %{error}\n", a1[6]);
  }
}

_QWORD *sub_100058C14(_QWORD *result)
{
  _QWORD *v1;

  if (*(_QWORD *)(result[4] + 128))
  {
    v1 = result;
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _appleAccountSignIn:]_block_invoke", 30, "Apple Account signed in\n");
    }
    return objc_msgSend((id)v1[4], "_resetTriggers");
  }
  return result;
}

_QWORD *sub_100058F50(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[16];
  if (v3)
  {
    if (dword_1007B0708 <= 30)
    {
      if (dword_1007B0708 != -1)
      {
LABEL_4:
        v4 = objc_msgSend(v3, "screenOn");
        v5 = "off";
        if (v4)
          v5 = "on";
        LogPrintF(&dword_1007B0708, "-[SDSetupAgent _screenStateChanged]_block_invoke", 30, "Screen state changed to %s\n", v5);
        result = *(_QWORD **)(a1 + 32);
        return objc_msgSend(result, "_update");
      }
      v6 = _LogCategory_Initialize(&dword_1007B0708, 30);
      result = *(_QWORD **)(a1 + 32);
      if (v6)
      {
        v3 = (void *)result[16];
        goto LABEL_4;
      }
    }
    return objc_msgSend(result, "_update");
  }
  return result;
}

_QWORD *sub_100059554(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[17];
  if (v3)
  {
    if (dword_1007B0708 <= 30)
    {
      if (dword_1007B0708 != -1)
      {
LABEL_4:
        v4 = objc_msgSend(v3, "screenLocked");
        v5 = "unlocked";
        if (v4)
          v5 = "locked";
        LogPrintF(&dword_1007B0708, "-[SDSetupAgent _uiLockStatusChanged]_block_invoke", 30, "UI lock status changed to %s\n", v5);
        result = *(_QWORD **)(a1 + 32);
        return objc_msgSend(result, "_update");
      }
      v6 = _LogCategory_Initialize(&dword_1007B0708, 30);
      result = *(_QWORD **)(a1 + 32);
      if (v6)
      {
        v3 = (void *)result[17];
        goto LABEL_4;
      }
    }
    return objc_msgSend(result, "_update");
  }
  return result;
}

void sub_10005A404(uint64_t a1, unsigned int a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a3;
  if (dword_1007B0708 <= 50 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
  {
    if (a2 > 5)
      v5 = "?";
    else
      v5 = off_100715488[a2];
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _uiStartTVLatencyBanner:forActionType:]_block_invoke", 50, "UNote action: TVLatency, %s, %{error}\n", v5, v8);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "invalidate");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 160);
  *(_QWORD *)(v6 + 160) = 0;

  if (a2 == 1 && !v8)
    objc_msgSend(*(id *)(a1 + 32), "_uiStartTVLatencySetup:extraInfo:forActionType:", *(_QWORD *)(a1 + 40), 0, *(unsigned __int8 *)(a1 + 48));

}

void sub_10005AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_10005AE40(uint64_t a1, uint64_t a2)
{
  uint64_t Int64;
  const char *v4;

  Int64 = CFDictionaryGetInt64(a2, BKSApplicationStateAppIsFrontmostKey, 0);
  if (dword_1007B0708 <= 20 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 20)))
  {
    v4 = "yes";
    if (!Int64)
      v4 = "no";
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _uiStartWithDevice:viewControllerName:xpcEndpoint:label:unlessApps:extraInfo:]_block_invoke", 20, "%@: Frontmost state of %@: %s\n", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v4);
  }
  if (Int64)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_10005AF10(uint64_t a1)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
  {
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _uiStartWithDevice:viewControllerName:xpcEndpoint:label:unlessApps:extraInfo:]_block_invoke_2", 30, "%@: Suppressing UI while app is frontmost\n", *(_QWORD *)(a1 + 64));
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_uiStartWithDevice:viewControllerName:xpcEndpoint:label:extraInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  return objc_msgSend(*(id *)(a1 + 80), "invalidate");
}

id sub_10005B8C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_watchFastScanStop");
}

BOOL sub_10005C054(id a1, NRDevice *a2)
{
  NRDevice *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;

  v2 = a2;
  v3 = off_1007B0780();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", v4));

  if (objc_msgSend(v5, "BOOLValue"))
  {
    v6 = off_1007B0788();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", v7));

    v9 = objc_msgSend(v8, "BOOLValue");
    v5 = v8;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_10005C1A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  int v6;
  id v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B0708 <= 60)
    {
      v7 = v3;
      if (dword_1007B0708 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B0708, 60), v4 = v7, v5))
      {
        LogPrintF(&dword_1007B0708, "-[SDSetupAgent _watchStartMigration:]_block_invoke", 60, "### Watch migration failed: %@, %{error}\n", *(_QWORD *)(a1 + 32), v4);
LABEL_8:
        v4 = v7;
      }
    }
  }
  else if (dword_1007B0708 <= 50)
  {
    v7 = 0;
    if (dword_1007B0708 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B0708, 50), v4 = 0, v6))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _watchStartMigration:]_block_invoke", 50, "Watch migration started: %@\n", *(_QWORD *)(a1 + 32));
      goto LABEL_8;
    }
  }

}

void sub_10005C47C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
  {
    v6 = v3;
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureServerStarted]_block_invoke", 30, "PINPair ending session on error: %{error}\n", v6);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = 0;

    v3 = v6;
  }

}

void sub_10005C52C(id a1)
{
  if (dword_1007B0708 <= 30 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureServerStarted]_block_invoke_2", 30, "PINPair invalidated\n");
}

void sub_10005C58C(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_1007B0708 <= 20)
  {
    if (dword_1007B0708 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0708, 20), v3 = v5, v4))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureServerStarted]_block_invoke_3", 20, "Received request: %@\n", v3);
      v3 = v5;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_pinPairHandleRequest:", v3);

}

void sub_10005C624(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = v3;
    if (dword_1007B0708 <= 60
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 60)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureServerStarted]_block_invoke_4", 60, "### PINPair activate failed: %@\n", v8);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "invalidate");
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = 0;

    goto LABEL_10;
  }
  if (dword_1007B0708 <= 30)
  {
    v8 = 0;
    if (dword_1007B0708 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B0708, 30), v4 = 0, v7))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _ensureServerStarted]_block_invoke_4", 30, "PINPair activated\n");
LABEL_10:
      v4 = v8;
    }
  }

}

void sub_10005CB40(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  if (dword_1007B0708 <= 30 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _pinPairHandleRequest:]_block_invoke", 30, "PINPair session %@ completed %{error}\n", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), v5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "invalidate");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0;

}

id sub_10005CBEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_pinPairHandleShowPIN:");
}

id sub_10005CBF4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_pinPairHandleHidePIN");
}

_QWORD *sub_10005D38C(_QWORD *result)
{
  _QWORD *v1;

  if (*(_DWORD *)(result[4] + 252) != -1)
  {
    v1 = result;
    if (dword_1007B0708 <= 40
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 40)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairEnsuredStarted]_block_invoke", 40, "TTF: CFU items changed\n");
    }
    return objc_msgSend((id)v1[4], "_repairHandleCFUItemsChanged");
  }
  return result;
}

id sub_10005D418(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairHandleManateeChanged");
}

id sub_10005D420(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairHandleManateeChanged");
}

id sub_10005D428(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairHandleManateeChanged");
}

_QWORD *sub_10005D430(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(result[4] + 328))
  {
    v3 = result;
    if (dword_1007B0708 <= 30)
    {
      if (dword_1007B0708 != -1 || (result = (_QWORD *)_LogCategory_Initialize(&dword_1007B0708, 30), (_DWORD)result))
      {
        if (a2 > 3)
          v4 = "?";
        else
          v4 = off_1007154B8[a2];
        result = (_QWORD *)LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairEnsuredStarted]_block_invoke_5", 30, "TTF: WiFi health status changed: %s\n", v4);
      }
    }
    v5 = v3[4];
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      v6 = *(_QWORD *)(v5 + 376) | 0x10;
    else
      v6 = *(_QWORD *)(v5 + 376);
    v7 = *(_QWORD *)(v5 + 376) & 0xFFFFFFEFLL;
    if (a2 != 1)
      v7 = v6;
    *(_BYTE *)(v5 + 336) = (v7 & 0x10) != 0;
    *(_BYTE *)(v3[4] + 337) = a2 == 3;
    v8 = v3[4];
    v9 = v7 | 0x10000;
    v10 = v7 & 0xFFFEFFFF;
    if (*(_BYTE *)(v8 + 337))
      v10 = v9;
    if (v10 != *(_QWORD *)(v8 + 376))
    {
      *(_QWORD *)(v8 + 376) = v10;
      return objc_msgSend((id)v3[4], "_repairProblemFlagsChanged");
    }
  }
  return result;
}

_QWORD *sub_10005D558(_QWORD *result)
{
  _QWORD *v1;

  if (*(_DWORD *)(result[4] + 340) != -1)
  {
    v1 = result;
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairEnsuredStarted]_block_invoke_6", 30, "TTF: Captive status changed");
    }
    return objc_msgSend((id)v1[4], "_repairHandleCNSStateChanged");
  }
  return result;
}

void sub_10005D5E4(uint64_t a1, int a2, void *a3)
{
  const char *v5;
  const __CFString *v6;
  __CFString *v7;

  v7 = a3;
  if (dword_1007B0708 <= 30 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
  {
    v5 = sub_10005D698(a2);
    v6 = &stru_10072FE60;
    if (v7)
      v6 = v7;
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairEnsuredStarted]_block_invoke_7", 30, "TTF: Problem reporting repair progress: %s %@\n", v5, v6);
  }
  if (a2 == 96)
    objc_msgSend(*(id *)(a1 + 32), "_repairHandleCompletion");

}

const char *sub_10005D698(int a1)
{
  const char *result;

  if (a1 > 299)
  {
    if (a1 <= 799)
    {
      if (a1 <= 519)
      {
        if (a1 <= 410)
        {
          if (a1 <= 399)
          {
            if (a1 == 300)
              return "BackupProgress";
            if (a1 == 310)
              return "SyncProgress";
          }
          else
          {
            switch(a1)
            {
              case 400:
                return "StopSetup";
              case 401:
                return "PINPair";
              case 410:
                return "MigrateStart";
            }
          }
        }
        else if (a1 > 430)
        {
          switch(a1)
          {
            case 431:
              return "eSimExternal2FAStop";
            case 500:
              return "SiriWelcome";
            case 510:
              return "SiriDialogA";
          }
        }
        else
        {
          switch(a1)
          {
            case 411:
              return "MigrateStop";
            case 420:
              return "FileTransferReady";
            case 430:
              return "eSimExternal2FAStart";
          }
        }
      }
      else if (a1 > 559)
      {
        if (a1 > 599)
        {
          switch(a1)
          {
            case 600:
              return "SiriSkipDemo";
            case 700:
              return "StopSetupLEDs";
            case 710:
              return "AudioPasscodeEnded";
          }
        }
        else
        {
          switch(a1)
          {
            case 560:
              return "SiriDialogCMusic";
            case 570:
              return "SiriDialogCNews";
            case 580:
              return "SiriDialogCWeather";
          }
        }
      }
      else if (a1 > 549)
      {
        switch(a1)
        {
          case 550:
            return "SiriDialogBWeather";
          case 555:
            return "SiriDialogBClock";
          case 558:
            return "SiriDialogBMusic";
        }
      }
      else
      {
        switch(a1)
        {
          case 520:
            return "SiriDialogBStart";
          case 530:
            return "SiriDialogBHome";
          case 540:
            return "SiriDialogBNews";
        }
      }
      return "?";
    }
    if (a1 > 999)
    {
      if (a1 <= 1099)
      {
        if (a1 == 1000)
          return "SecureIntentStart";
        if (a1 == 1001)
          return "SecureIntentFinish";
      }
      else
      {
        switch(a1)
        {
          case 1100:
            return "OneTimeCodeDetected";
          case 2000:
            return "DependentStart";
          case 2001:
            return "DependentEnd";
        }
      }
      return "?";
    }
    switch(a1)
    {
      case 900:
        result = "SU-No-SetupScanAttempt";
        break;
      case 901:
        result = "SU-No-SetupStatusUpdate";
        break;
      case 902:
        result = "SU-No-SetupWipeWifi";
        break;
      case 903:
        result = "SU-No-SetupCancelled";
        break;
      case 904:
        result = "SU-No-SetupObliterate";
        break;
      case 905:
        result = "SU-No-SetupCannotCancel";
        break;
      case 906:
        result = "SysDrop AirDrop Event";
        break;
      case 907:
        result = "SysDrop Sysdiagnose Event";
        break;
      case 908:
        result = "SysDrop Cancel Event";
        break;
      case 909:
        result = "File Transfer Progress Event";
        break;
      case 910:
        result = "File Transfer Completed Event";
        break;
      case 911:
        result = "iOSWiFiSetup";
        break;
      case 912:
        result = "HKPrimaryResidentSSIDFetchStart";
        break;
      default:
        switch(a1)
        {
          case 800:
            result = "AuthAccountsStart";
            break;
          case 803:
            result = "AuthAccountsiCloudProgress";
            break;
          case 804:
            result = "AuthAccountsStoreProgress";
            break;
          case 805:
            result = "AuthAccountsGameCenterProgress";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  else if (a1 > 129)
  {
    if (a1 > 249)
    {
      switch(a1)
      {
        case 260:
          result = "TVLSStart";
          break;
        case 261:
        case 262:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 271:
        case 273:
        case 275:
          return "?";
        case 264:
          result = "TVLSFinish";
          break;
        case 270:
          result = "TVLSEstimateStart";
          break;
        case 272:
          result = "TVLSEstimateFinal";
          break;
        case 274:
          result = "TVLSEstimateFailed";
          break;
        case 276:
          result = "TVLSTryAgain";
          break;
        case 277:
          result = "TVLSToneBegan";
          break;
        case 278:
          result = "TVLCalStart";
          break;
        case 279:
          result = "TVLCalStep";
          break;
        case 280:
          result = "TVLCalFailed";
          break;
        case 281:
          result = "TVLCalTryAgain";
          break;
        case 282:
          result = "TVLCalFinal";
          break;
        default:
          if (a1 != 250)
            return "?";
          result = "ReportSuccess";
          break;
      }
    }
    else
    {
      if (a1 <= 219)
      {
        if (a1 <= 149)
        {
          if (a1 == 130)
            return "WiFiPoweredOff";
          if (a1 == 140)
            return "RecognizeVoice";
        }
        else
        {
          switch(a1)
          {
            case 150:
              return "SiriForEveryone";
            case 200:
              return "WiFiStart";
            case 210:
              return "ActivationStart";
          }
        }
        return "?";
      }
      switch(a1)
      {
        case 230:
          return "HomeKitStart";
        case 231:
        case 232:
        case 233:
        case 235:
        case 237:
        case 238:
        case 239:
          return "?";
        case 234:
          return "HomeKitSetupStart";
        case 236:
          return "CDPSetupStart";
        case 240:
          return "BuddyStarting";
        case 241:
          return "BuddyProgress";
        case 242:
          return "BuddyFinished";
        default:
          if (a1 == 220)
          {
            result = "iCloudStart";
          }
          else
          {
            if (a1 != 224)
              return "?";
            result = "AppleIDSetupStart";
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 79)
    {
      if (a1 > 49)
      {
        if (a1 > 64)
        {
          if (a1 == 65)
            return "SecurityAPCLoopStart";
          if (a1 == 70)
            return "SecurityFinish";
        }
        else
        {
          if (a1 == 50)
            return "PreAuthFinish";
          if (a1 == 60)
            return "SecurityStart";
        }
      }
      else
      {
        if (a1 > 29)
        {
          switch(a1)
          {
            case 30:
              result = "Error";
              break;
            case 31:
              result = "SessionStarted";
              break;
            case 32:
              result = "SessionEnded";
              break;
            case 33:
              result = "SessionSecured";
              break;
            case 35:
              result = "ConnectStart";
              break;
            case 40:
              result = "PreAuthStart";
              break;
            default:
              return "?";
          }
          return result;
        }
        switch(a1)
        {
          case 0:
            return "Invalid";
          case 10:
            return "Start";
          case 20:
            return "Final";
        }
      }
      return "?";
    }
    if (a1 > 119)
    {
      switch(a1)
      {
        case 'x':
          return "CheckingiCloud";
        case 'z':
          return "CheckingAppleMusic";
        case '|':
          return "CheckingAccount";
      }
      return "?";
    }
    switch(a1)
    {
      case 'P':
        result = "BasicConfigStart";
        break;
      case 'Z':
        result = "BasicConfigFinish";
        break;
      case '\\':
        result = "StepStart";
        break;
      case '^':
        result = "StepFinish";
        break;
      case '_':
        result = "PreFinish";
        break;
        result = "SetupFinished";
        break;
      case 'a':
        result = "SetupResumed";
        break;
      case 'b':
        result = "SetupSuspend";
        break;
      case 'c':
        result = "SetupPeerSWUpdate";
        break;
      case 'd':
        result = "Finished";
        break;
      default:
        return "?";
    }
  }
  return result;
}

id sub_10005DE14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairProblemCheck");
}

BOOL sub_10005E2F0(id a1, FLFollowUpItem *a2, unint64_t a3, BOOL *a4)
{
  return sub_10005E2F8(a2);
}

uint64_t sub_10005E2F8(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "uniqueIdentifier"));
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("com.apple.AAFollowUpIdentifier.RenewCredentials"));

  if ((v3 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "typeIdentifier"));
    v6 = objc_msgSend(v5, "isEqual:", CFSTR("com.apple.AAFollowUpIdentifier.RenewCredentials"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](ACAccountStore, "defaultStore"));
      v8 = sub_10019B264(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      if (v9
        && (v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "accountIdentifier")),
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier")),
            v12 = objc_msgSend(v10, "isEqual:", v11),
            v11,
            v10,
            (v12 & 1) != 0))
      {
        v4 = 1;
      }
      else
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "accountIdentifier"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountWithIdentifier:", v13));

        v4 = 0;
        if (v9 && v14)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "aa_altDSID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "aa_altDSID"));
          v4 = (uint64_t)objc_msgSend(v15, "isEqual:", v16);

        }
      }

    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

void sub_10005E474(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;

  v8 = a3;
  if (v8)
  {
    if (dword_1007B0708 <= 90
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 90)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _renewAccountIfNecessaryForCFUItems:completion:]_block_invoke_2", 90, "Could not renew account: %d\n", a2);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _renewAccountIfNecessaryForCFUItems:completion:]_block_invoke_2", 30, "Account renewed successfully: %d\n", a2);
    }
    v5 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
    objc_msgSend(v5, "removeObjectsAtIndexes:", *(_QWORD *)(a1 + 40));
    v6 = *(_QWORD *)(a1 + 48);
    v7 = objc_msgSend(v5, "copy");
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);

  }
}

void sub_10005E620(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(NSObject **)(v7 + 368);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005E6D0;
  block[3] = &unk_100715138;
  block[4] = v7;
  v12 = v6;
  v13 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, block);

}

_QWORD *sub_10005E6D0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (*(_DWORD *)(result[4] + 252) != -1)
  {
    v1 = result;
    v2 = result[5];
    if (v2)
    {
      if (dword_1007B0708 > 60)
        return result;
      if (dword_1007B0708 != -1)
        return (_QWORD *)LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairHandleCFUItemsChanged]_block_invoke_2", 60, "TTF: ### CFU get items failed: %{error}\n", v2);
      result = (_QWORD *)_LogCategory_Initialize(&dword_1007B0708, 60);
      if ((_DWORD)result)
      {
        v2 = v1[5];
        return (_QWORD *)LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairHandleCFUItemsChanged]_block_invoke_2", 60, "TTF: ### CFU get items failed: %{error}\n", v2);
      }
    }
    else
    {
      if (dword_1007B0708 <= 30
        && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
      {
        LogPrintF(&dword_1007B0708, "-[SDSetupAgent _repairHandleCFUItemsChanged]_block_invoke_2", 30, "TTF: CFU items: %ld\n", objc_msgSend((id)v1[6], "count"));
      }
      v3 = (void *)v1[4];
      v4 = v1[6];
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10005E7FC;
      v5[3] = &unk_100714B20;
      v5[4] = v3;
      return objc_msgSend(v3, "_renewAccountIfNecessaryForCFUItems:completion:", v4, v5);
    }
  }
  return result;
}

id sub_10005E7FC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairHandleCFUItems:", a2);
}

id sub_10005EDEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairHandleManateeChanged");
}

void sub_10005EFE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  uint64_t v14;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(NSObject **)(v7 + 368);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005F098;
  block[3] = &unk_100715138;
  v12 = v6;
  v13 = v5;
  v14 = v7;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, block);

}

uint64_t sub_10005F098(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    if (dword_1007B0708 <= 30)
    {
      if (dword_1007B0708 != -1)
        return LogPrintF(&dword_1007B0708, "-[SDSetupAgent _fetchSymptomsReport]_block_invoke_2", 30, "TTF: Received error trying to generate report: %@\n", v2);
      result = _LogCategory_Initialize(&dword_1007B0708, 30);
      if ((_DWORD)result)
      {
        v2 = *(_QWORD *)(v1 + 32);
        return LogPrintF(&dword_1007B0708, "-[SDSetupAgent _fetchSymptomsReport]_block_invoke_2", 30, "TTF: Received error trying to generate report: %@\n", v2);
      }
    }
  }
  else
  {
    if (dword_1007B0708 <= 30
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent _fetchSymptomsReport]_block_invoke_2", 30, "TTF: Received symptoms report with problem flags: %#ll{flags}\n", objc_msgSend(*(id *)(v1 + 40), "combinedProblemFlags"), &unk_1005CC0D1);
    }
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 376) & 0xFFFDFFF9;
    result = (uint64_t)objc_msgSend(*(id *)(v1 + 40), "combinedProblemFlags");
    v4 = *(_QWORD *)(v1 + 48);
    if ((result | v3) != *(_QWORD *)(v4 + 376))
    {
      *(_QWORD *)(v4 + 376) = result | v3;
      return (uint64_t)objc_msgSend(*(id *)(v1 + 48), "_repairProblemFlagsChanged");
    }
  }
  return result;
}

id sub_10005F84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_repairSilentProgress:info:", a2, a3);
}

void sub_10005FC0C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  id v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 176);
  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastDisconnectError"));
    v5 = (id)v3;
    if (dword_1007B0708 <= 40)
    {
      if (dword_1007B0708 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0708, 40), v3 = (uint64_t)v5, v4))
      {
        LogPrintF(&dword_1007B0708, "-[SDSetupAgent observeValueForKeyPath:ofObject:change:context:]_block_invoke", 40, "TTF: VPN changed: %{error}\n", v3);
        v3 = (uint64_t)v5;
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "_repairVPNError:", v3);

  }
}

void sub_10005FD40(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v2)
  {
    if (dword_1007B0708 <= 50
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "description"));
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent proximityDeviceDidTrigger:]_block_invoke", 50, "#ni_estimator deviceslist: %@", v3);

    }
    if (_os_feature_enabled_impl("Sharing", "ni_estimator"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bleDevice"));
      objc_msgSend(v7, "setTriggered:", 1);

    }
    if (dword_1007B0708 <= 50
      && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
    {
      LogPrintF(&dword_1007B0708, "-[SDSetupAgent proximityDeviceDidTrigger:]_block_invoke", 50, "#ni_estimator delegate triggered for device: %@", *(_QWORD *)(a1 + 40));
    }
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    if (objc_msgSend(v9, "deviceActionType") == 5)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bleDevice"));
      if (v8)
        objc_msgSend(*(id *)(a1 + 32), "_watchFound:", v8);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", v9);
    }
    goto LABEL_20;
  }
  if (dword_1007B0708 <= 50 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 50)))
  {
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description")));
    v4 = objc_msgSend(v9, "UTF8String");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "description"));
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent proximityDeviceDidTrigger:]_block_invoke", 50, "#ni_estimator SDSetup device: %s not of interest. _devices: %@", v4, v5);

LABEL_20:
  }
}

void sub_100060038(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("com.apple.Home://a/s?n=Test")));
  if (v2)
  {
    v3 = v2;
    objc_msgSend(*(id *)(a1 + 32), "_uiStartHomeKitDeviceDetectedWithURL:", v2);
    v2 = v3;
  }

}

void sub_100060150(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)SFDevice);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  objc_msgSend(v3, "setIdentifier:", v2);

  objc_msgSend(*(id *)(a1 + 32), "_uiStartWithDevice:viewControllerName:xpcEndpoint:label:unlessApps:extraInfo:", v3, CFSTR("NFCTagReaderMainController"), 0, CFSTR("NFCUI"), 0, 0);
}

void sub_10006032C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = &stru_10072FE60;
  if (a1[6])
    v3 = (const __CFString *)a1[6];
  v5 = CFSTR("testParams");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  objc_msgSend(v1, "_uiStartPair:extraInfo:", v2, v4);

}

id sub_10006059C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_uiStartRepair:flags:", *(_QWORD *)(a1 + 40), 0);
}

void sub_100060A30(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = &stru_10072FE60;
  if (a1[6])
    v3 = (const __CFString *)a1[6];
  v5 = CFSTR("testParams");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  objc_msgSend(v1, "_uiStartSetupB238:extraInfo:", v2, v4);

}

id sub_100060E14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_uiStartSetupiOS:autoStart:", *(_QWORD *)(a1 + 40), 0);
}

id sub_100061024(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_uiStartWiFiPasswordSharing:", *(_QWORD *)(a1 + 40));
}

id sub_10006115C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_uiStartSetupWatch:", *(_QWORD *)(a1 + 40));
}

id sub_1000613F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_uiStartSetupWHA:", *(_QWORD *)(a1 + 40));
}

void sub_100061558(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = &stru_10072FE60;
  if (a1[6])
    v3 = (const __CFString *)a1[6];
  v5 = CFSTR("testParams");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  objc_msgSend(v1, "_uiStartAppleTVSetup:extraInfo:", v2, v4);

}

void sub_100061784(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1007B0708 <= 90 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 90)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent testUIShareAudio:]_block_invoke", 90, "### TestShareAudio error: %{error}\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_100061814(id a1)
{
  if (dword_1007B0708 <= 30 && (dword_1007B0708 != -1 || _LogCategory_Initialize(&dword_1007B0708, 30)))
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent testUIShareAudio:]_block_invoke_2", 30, "TestShareAudio invalidated\n");
}

void sub_100061874(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (dword_1007B0708 <= 30
    && ((v5 = v2, dword_1007B0708 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B0708, 30), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B0708, "-[SDSetupAgent testUIShareAudio:]_block_invoke_3", 30, "TestShareAudio activated: %{error}\n", v3);

  }
  else
  {

  }
}

void sub_100061A4C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = &stru_10072FE60;
  if (a1[6])
    v3 = (const __CFString *)a1[6];
  v5 = CFSTR("testParams");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  objc_msgSend(v1, "_uiStartTVLatencySetup:extraInfo:forActionType:", v2, v4, 25);

}

void sub_100061C54(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = &stru_10072FE60;
  if (a1[6])
    v3 = (const __CFString *)a1[6];
  v5 = CFSTR("testParams");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  objc_msgSend(v1, "_uiStartTVLatencySetup:extraInfo:forActionType:", v2, v4, 30);

}

id sub_100061DE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_uiStartProxCardKitTest:extraInfo:", *(_QWORD *)(a1 + 40), 0);
}

Class sub_100061F6C()
{
  Class result;

  if (qword_1007C6578 != -1)
    dispatch_once(&qword_1007C6578, &stru_1007153C8);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_1007C6570 = (uint64_t)result;
  off_1007B0778 = (uint64_t (*)())sub_100061FC8;
  return result;
}

id sub_100061FC8()
{
  return (id)qword_1007C6570;
}

void sub_100061FD4(id a1)
{
  qword_1007C6580 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_100061FFC()
{
  id *v0;

  if (qword_1007C6578 != -1)
    dispatch_once(&qword_1007C6578, &stru_1007153C8);
  v0 = (id *)dlsym((void *)qword_1007C6580, "NRDevicePropertyIsArchived");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6560, *v0);
  off_1007B0780 = (uint64_t (*)())sub_100062074;
  return (id)qword_1007C6560;
}

id sub_100062074()
{
  return (id)qword_1007C6560;
}

id sub_100062080()
{
  id *v0;

  if (qword_1007C6578 != -1)
    dispatch_once(&qword_1007C6578, &stru_1007153C8);
  v0 = (id *)dlsym((void *)qword_1007C6580, "NRDevicePropertyMigrationConfirmed");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6568, *v0);
  off_1007B0788 = (uint64_t (*)())sub_1000620F8;
  return (id)qword_1007C6568;
}

id sub_1000620F8()
{
  return (id)qword_1007C6568;
}

id sub_100062104()
{
  id *v0;

  if (qword_1007C6578 != -1)
    dispatch_once(&qword_1007C6578, &stru_1007153C8);
  v0 = (id *)dlsym((void *)qword_1007C6580, "_NRDevicePropertyBluetoothIdentifier");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6558, *v0);
  off_1007B0790 = (uint64_t (*)())sub_10006217C;
  return (id)qword_1007C6558;
}

id sub_10006217C()
{
  return (id)qword_1007C6558;
}

Class sub_100062188()
{
  Class result;

  if (qword_1007C6578 != -1)
    dispatch_once(&qword_1007C6578, &stru_1007153C8);
  result = objc_getClass("NRMigrator");
  qword_1007C6588 = (uint64_t)result;
  off_1007B0798 = (uint64_t (*)())sub_1000621E4;
  return result;
}

id sub_1000621E4()
{
  return (id)qword_1007C6588;
}

Class sub_1000621F0()
{
  Class result;

  if (qword_1007C6598 != -1)
    dispatch_once(&qword_1007C6598, &stru_1007153E8);
  result = objc_getClass("NEVPNConnection");
  qword_1007C6590 = (uint64_t)result;
  off_1007B07A0 = (uint64_t (*)())sub_10006224C;
  return result;
}

id sub_10006224C()
{
  return (id)qword_1007C6590;
}

void sub_100062258(id a1)
{
  qword_1007C65A0 = (uint64_t)dlopen("/System/Library/Frameworks/NetworkExtension.framework/NetworkExtension", 2);
}

Class sub_100062280()
{
  Class result;

  if (qword_1007C65B0 != -1)
    dispatch_once(&qword_1007C65B0, &stru_100715408);
  result = objc_getClass("FLFollowUpController");
  qword_1007C65A8 = (uint64_t)result;
  off_1007B07A8 = (uint64_t (*)())sub_1000622DC;
  return result;
}

id sub_1000622DC()
{
  return (id)qword_1007C65A8;
}

void sub_1000622E8(id a1)
{
  qword_1007C65B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreFollowUp.framework/CoreFollowUp", 2);
}

id sub_100062310()
{
  id *v0;

  if (qword_1007C65C0 != -1)
    dispatch_once(&qword_1007C65C0, &stru_100715428);
  v0 = (id *)dlsym((void *)qword_1007C65C8, "HMDeviceSetupFollowupIdentifier");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6550, *v0);
  off_1007B07B0 = (uint64_t (*)())sub_100062388;
  return (id)qword_1007C6550;
}

id sub_100062388()
{
  return (id)qword_1007C6550;
}

void sub_100062394(id a1)
{
  qword_1007C65C8 = (uint64_t)dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
}

Class sub_1000623BC()
{
  Class result;

  if (qword_1007C65D8 != -1)
    dispatch_once(&qword_1007C65D8, &stru_100715448);
  result = objc_getClass("SSAccountStore");
  qword_1007C65D0 = (uint64_t)result;
  off_1007B07B8 = (uint64_t (*)())sub_100062418;
  return result;
}

id sub_100062418()
{
  return (id)qword_1007C65D0;
}

void sub_100062424(id a1)
{
  qword_1007C65E0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/StoreServices.framework/StoreServices", 2);
}

Class sub_10006244C()
{
  Class result;

  if (qword_1007C65F0 != -1)
    dispatch_once(&qword_1007C65F0, &stru_100715468);
  result = objc_getClass("AISRepairController");
  qword_1007C65E8 = (uint64_t)result;
  off_1007B07C0 = (uint64_t (*)())sub_1000624A8;
  return result;
}

id sub_1000624A8()
{
  return (id)qword_1007C65E8;
}

void sub_1000624B4(id a1)
{
  qword_1007C65F8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleIDSetup.framework/AppleIDSetup", 2);
}

Class sub_1000624DC()
{
  Class result;

  if (qword_1007C65F0 != -1)
    dispatch_once(&qword_1007C65F0, &stru_100715468);
  result = objc_getClass("AISRepairContext");
  qword_1007C6600 = (uint64_t)result;
  off_1007B07C8 = (uint64_t (*)())sub_100062538;
  return result;
}

id sub_100062538()
{
  return (id)qword_1007C6600;
}

void sub_1000627B4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1000627EC(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  if (objc_msgSend(*(id *)(a1 + 32), "baseAccelerationSet"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "handleNewAccelerometerData");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setBaseAccelerationSet:", 1);
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "motionManager"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accelerometerData"));
    objc_msgSend(v2, "acceleration");
    objc_msgSend(*(id *)(a1 + 32), "setBaseAcceleration:");

  }
}

void sub_10006286C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "handleActivityDetected:", v3);

}

void sub_100062C54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logType"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 138477827;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Motion activity activities: %{private}@", (uint8_t *)&v15, 0xCu);
  }

  if (v6)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logType"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_100064664((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);

  }
  objc_msgSend(*(id *)(a1 + 32), "handlePastActivities:withStartDate:", v5, *(_QWORD *)(a1 + 40));

}

void sub_10006300C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v6, "handlePastPedometerData:", a2);
  }
  else
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "logType"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1000646CC((uint64_t)v5, v7, v8, v9, v10, v11, v12, v13);

  }
}

void sub_100064124(uint64_t a1)
{
  void *v2;
  void (**v3)(void);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "motionDetectedHandler"));

  if (v2)
  {
    v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "motionDetectedHandler"));
    v3[2]();

    _objc_msgSend(*(id *)(a1 + 32), "setMotionDetectedHandler:", 0);
  }
}

void sub_1000642EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064314(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id WeakRetained;
  uint64_t v5;
  uint8_t v6[16];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logType"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Motion timer fired", v6, 2u);
  }

  v3 = objc_msgSend(*(id *)(a1 + 32), "type");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
    v5 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "motionDetected");
  else
    v5 = 1;
  objc_msgSend(WeakRetained, "handleMotionDetected:", v5);

}

void sub_100064664(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "activity error: %@", a5, a6, a7, a8, 2u);
}

void sub_1000646CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "no step data, error %@", a5, a6, a7, a8, 2u);
}

void sub_100064B10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_100064B4C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void sub_100064B5C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void sub_100064B6C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_100065558(a1, v3);

}

int64_t sub_100065148(id a1, SFAirDropNode *a2, SFAirDropNode *a3)
{
  SFAirDropNode *v4;
  SFAirDropNode *v5;
  SFAirDropNode *v6;
  SFAirDropNode *v7;
  SFAirDropNode *v8;
  int64_t v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  v8 = v7;
  if (v6)
    v9 = -1;
  else
    v9 = v7 != 0;
  if (v6 && v7)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode rangingMeasurement](v6, "rangingMeasurement"));
    v11 = objc_msgSend(v10, "flags");

    v12 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode rangingMeasurement](v8, "rangingMeasurement"));
    v13 = objc_msgSend(v12, "flags");

    if ((v11 & 8) != 0 && (v13 & 8) == 0)
      goto LABEL_8;
    if ((v11 & 8) == 0 && (v13 & 8) != 0)
    {
LABEL_11:
      v9 = 1;
      goto LABEL_28;
    }
    if ((v11 & 8) != 0 && (v13 & 8) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode rangingMeasurement](v6, "rangingMeasurement"));
      objc_msgSend(v14, "ptsScore");
      v16 = v15;
      v17 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode rangingMeasurement](v8, "rangingMeasurement"));
      objc_msgSend(v17, "ptsScore");
      v19 = v18;

      if (v16 <= v19)
        v9 = 1;
      else
        v9 = -1;
    }
    else
    {
      if (-[SFAirDropNode isKnown](v6, "isKnown")
        && !-[SFAirDropNode isKnown](v8, "isKnown"))
      {
        goto LABEL_11;
      }
      if ((-[SFAirDropNode isKnown](v6, "isKnown") & 1) == 0
        && (-[SFAirDropNode isKnown](v8, "isKnown") & 1) != 0)
      {
        goto LABEL_8;
      }
      if (-[SFAirDropNode isMe](v6, "isMe") && !-[SFAirDropNode isMe](v8, "isMe"))
        goto LABEL_11;
      if ((-[SFAirDropNode isMe](v6, "isMe") & 1) == 0
        && (-[SFAirDropNode isMe](v8, "isMe") & 1) != 0)
      {
LABEL_8:
        v9 = -1;
        goto LABEL_28;
      }
      v20 = magic_head_log();
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode discoveryDate](v6, "discoveryDate"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode discoveryDate](v8, "discoveryDate"));
        v27 = 138412546;
        v28 = v22;
        v29 = 2112;
        v30 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Sorting 1st slot based upon discoveryDate. A: %@, B: %@", (uint8_t *)&v27, 0x16u);

      }
      v24 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode discoveryDate](v8, "discoveryDate"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(-[SFAirDropNode discoveryDate](v6, "discoveryDate"));
      v9 = (int64_t)objc_msgSend(v24, "compare:", v25);

    }
  }
LABEL_28:

  return v9;
}

BOOL sub_1000653C8(id a1, SFAirDropNode *a2, NSDictionary *a3)
{
  return -[SFAirDropNode isUnknown](a2, "isUnknown", a3) ^ 1;
}

void sub_1000654E0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "helperConnection already exists in -[SDPeopleBrowser start]", v1, 2u);
  sub_1000161DC();
}

void sub_10006551C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "-[SDPeopleBrowser start] called twice", v1, 2u);
  sub_1000161DC();
}

void sub_100065558(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDXPCHelperConnection invalidated for %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000655D0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "People browser received callback from network browser", v1, 2u);
  sub_1000161DC();
}

void sub_100065944(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_10006CFF4();

}

uint64_t sub_100066020(uint64_t a1)
{
  return IOPMAssertionRelease(*(_DWORD *)(a1 + 32));
}

void sub_1000672DC(uint64_t a1)
{
  NSMutableDictionary *v2;

  v2 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), kSFOperationBytesCopiedKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), kSFOperationTimeRemainingKey);
  objc_msgSend(*(id *)(a1 + 48), "notifyClientForEvent:withProperty:", 7, v2);

}

void sub_1000673BC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v20[5];
  _QWORD block[5];

  v2 = kSFOperationTotalBytesKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "objectForKeyedSubscript:", kSFOperationTotalBytesKey));
  v4 = (uint64_t)objc_msgSend(v3, "longLongValue");

  if (!v4)
  {
    v4 = 128;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 128));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v5, v2);

  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100067604;
  block[3] = &unk_1007146D8;
  block[4] = v6;
  dispatch_async(v7, block);
  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v4 / 5));
  objc_msgSend(v8, "notifyClientOfBytesCopied:timeRemaining:", v9, &off_10074B328);

  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 2 * v4 / 5));
  objc_msgSend(v10, "notifyClientOfBytesCopied:timeRemaining:", v11, &off_10074B328);

  v12 = *(void **)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 3 * v4 / 5));
  objc_msgSend(v12, "notifyClientOfBytesCopied:timeRemaining:", v13, &off_10074B328);

  v14 = *(void **)(a1 + 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 4 * v4 / 5));
  objc_msgSend(v14, "notifyClientOfBytesCopied:timeRemaining:", v15, &off_10074B340);

  v16 = *(void **)(a1 + 32);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v4));
  objc_msgSend(v16, "notifyClientOfBytesCopied:timeRemaining:", v17, &off_10074B340);

  usleep(0x7A120u);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(NSObject **)(v18 + 240);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100067614;
  v20[3] = &unk_1007146D8;
  v20[4] = v18;
  dispatch_async(v19, v20);
}

id sub_100067604(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:withProperty:", 5, 0);
}

id sub_100067614(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:withProperty:", 9, 0);
}

id sub_1000676E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BYTE *v4;
  const char *v5;
  void *v6;
  int v8;
  const char *v9;
  __int16 v10;
  void *v11;

  v2 = airdrop_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_BYTE **)(a1 + 32);
    if (v4[72])
      v5 = "discovery";
    else
      v5 = "ask";
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "personID"));
    v8 = 136315394;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Retry %s request for %@", (uint8_t *)&v8, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "resolve");
}

uint64_t sub_100067EE0(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;

  if ((a2 & 1) == 0)
  {
    v3 = airdrop_log(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10006D43C();

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100068814(_QWORD *a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  _QWORD *v8;

  v4 = airdrop_log(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_10006D5B8((uint64_t)a1, v6);

    if (a1[6])
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLCredential credentialForTrust:](NSURLCredential, "credentialForTrust:"));
    else
      v7 = 0;
    (*(void (**)(void))(a1[5] + 16))();
    v8 = (_QWORD *)a1[4];
    if (v8[2])
      objc_msgSend(v8, "notifyClientForEvent:withProperty:", 3, 0);

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10006D644((uint64_t)a1, v6);

    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_100069B6C(uint64_t a1)
{
  void *v2;
  NSMutableArray *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  const __CFURL *v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE buf[32];
  _BYTE v28[128];

  v2 = (void *)sub_10019ADCC(*(const __CFArray **)(*(_QWORD *)(a1 + 32) + 112));
  v3 = objc_opt_new(NSMutableArray);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = *(id *)(*(_QWORD *)(a1 + 32) + 112);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v4);
        v8 = *(const __CFURL **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "containsObject:", v8, (_QWORD)v23) & 1) == 0)
        {
          v9 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 456);
          *(_OWORD *)buf = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 440);
          *(_OWORD *)&buf[16] = v9;
          if (!sub_10019B530(v8, buf))
          {
            v10 = (const void *)sub_10019B628(v8);
            if (v10)
            {
              v11 = v10;
              v12 = sub_10005081C(-6, v10);
              v5 = (id)objc_claimAutoreleasedReturnValue(v12);
              CFRelease(v11);
            }
            else
            {
              v14 = sub_10005081C(-5, 0);
              v13 = objc_claimAutoreleasedReturnValue(v14);
              v5 = (id)v13;
            }
            v15 = airdrop_log(v13);
            v16 = objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
              sub_10006D80C();

            goto LABEL_19;
          }
        }
        if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "count") == (id)1)
          objc_msgSend(*(id *)(a1 + 32), "generatePreviewForFileURL:", v8);
        objc_msgSend(*(id *)(a1 + 32), "appendFileURL:withBase:toItems:", v8, v2, v3);
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_19:

  v17 = -[NSMutableArray count](v3, "count");
  v18 = airdrop_log(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    v20 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "count");
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v17;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "validateAirDropItems validated %lu/%lu items for transfer", buf, 0x16u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v3, kSFOperationFilesKey);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "allValues"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v21, "containsObject:", &__kCFBooleanTrue)));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v22, kSFOperationConvertMediaFormatsKey);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006A580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A5A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "invalidate");

}

void sub_10006A894(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *Name;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  __int16 v27;
  uint64_t v28;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = airdrop_log(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_10006D9F0();

    objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:withProperty:", 10, v4);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v7 + 208) && *(_BYTE *)(v7 + 312))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDConnectedBrowser sharedBrowser](SDConnectedBrowser, "sharedBrowser"));
      objc_msgSend(v8, "addAirDropPerson:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));

      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 208) = 1;
      v7 = *(_QWORD *)(a1 + 32);
    }
    v9 = (void *)SFNodeCopyAppleID(*(_QWORD *)(v7 + 200));
    v10 = (void *)SFNodeCopyServiceName(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
    v11 = (void *)SFNodeCopyComputerName(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
    if (v10)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v10, kSFOperationReceiverIDKey);
    if (v11)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v11, kSFOperationReceiverComputerNameKey);
    if (v9
      && (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "verifiedIdentityForAppleID:", v9)),
          v12,
          v12))
    {
      Name = (void *)SFNodeCopyLastName(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
      v14 = (void *)SFNodeCopyFirstName(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
      v15 = (void *)SFNodeCopyDisplayName(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
      if (Name)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", Name, kSFOperationReceiverLastNameKey);
      if (v14)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v14, kSFOperationReceiverFirstNameKey);
      if (v15)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", v15, kSFOperationReceiverCompositeNameKey);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, kSFOperationVerifiableIdentityKey);

    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "setObject:forKeyedSubscript:", &__kCFBooleanFalse, kSFOperationVerifiableIdentityKey);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 264) = sub_10004FF64();
    if (*(_BYTE *)(a1 + 40))
      objc_msgSend(*(id *)(a1 + 32), "startSendingClassroom");
    objc_msgSend(*(id *)(a1 + 32), "removeFileIconsFromProperties");
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "objectForKeyedSubscript:", kSFOperationFilesKey));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "objectForKeyedSubscript:", kSFOperationItemsKey));
    v18 = objc_msgSend(v16, "count");
    v19 = v18;
    if (!v18)
    {
      v18 = objc_msgSend(v17, "count");
      v19 = v18;
    }
    v20 = airdrop_log(v18);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 224);
      v23 = 138412802;
      v24 = v11;
      v25 = 2048;
      v26 = v19;
      v27 = 2112;
      v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "startSending to: \"%@\", validated %lu airdrop items. properties: %@", (uint8_t *)&v23, 0x20u);
    }

    if (!*(_BYTE *)(a1 + 40))
      objc_msgSend(*(id *)(a1 + 32), "send");

  }
}

void sub_10006AF38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  uint64_t v17;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = airdrop_log(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_10006DA90(a1, (uint64_t)v4, v6);

    objc_msgSend(*(id *)(a1 + 40), "notifyClientForEvent:withProperty:", 10, v4);
  }
  else
  {
    v7 = (void *)SFNodeCopyComputerName(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 200));
    v8 = airdrop_log(v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "count");
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
      v12 = 134218498;
      v13 = v10;
      v14 = 2112;
      v15 = v7;
      v16 = 2112;
      v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting to send %lu files to \"%@\", fileURLs: %@", (uint8_t *)&v12, 0x20u);
    }

    objc_msgSend(*(id *)(a1 + 40), "startSending");
  }

}

void sub_10006B688(uint64_t a1)
{
  id v2;
  NSObject *v3;

  sub_10019ABA4();
  sub_10004DE48(*(void **)(a1 + 32));
  v2 = sub_10004D994();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  dispatch_resume(v3);

}

id sub_10006B6CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "airDropTransactionEnd:", 1);
}

void sub_10006BEFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_10006BFC8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void sub_10006BFD8(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_10006BFE0(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_10006C11C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id WeakRetained;
  uint8_t v9[16];

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 312))
  {
    v6 = airdrop_log(v3);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_shouldPublishProgress, adding total unit count of 100", v9, 2u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setTotalUnitCount:", (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "totalUnitCount") + 100);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "addChild:withPendingUnitCount:", v4, 100);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v5 + 57))
  {
    if (!*(_BYTE *)(v5 + 312))
      goto LABEL_10;
  }
  else
  {
    if (!*(_BYTE *)(v5 + 312))
    {
LABEL_10:
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 432));
      objc_msgSend(WeakRetained, "handleConversionProgress:", v4);

      goto LABEL_11;
    }
    *(_BYTE *)(v5 + 57) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "addObserver:forKeyPath:options:context:", *(_QWORD *)(a1 + 32), CFSTR("fractionCompleted"), 0, 0);
  }
LABEL_11:

}

void sub_10006C230(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;

  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(void **)(a1 + 40);
  v25 = *(NSObject **)(v23 + 240);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10006C3B8;
  v33[3] = &unk_100715720;
  v43 = a6;
  v34 = v16;
  v35 = v23;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v21;
  v40 = v22;
  v41 = v20;
  v42 = v24;
  v26 = v20;
  v27 = v22;
  v28 = v21;
  v29 = v19;
  v30 = v18;
  v31 = v17;
  v32 = v16;
  dispatch_async(v25, v33);

}

uint64_t sub_10006C3B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = *(_QWORD *)(a1 + 104);
  if (v2 == 10)
  {
    objc_msgSend(*(id *)(a1 + 40), "notifyClientForEvent:withProperty:", 10, *(_QWORD *)(a1 + 88));
  }
  else if (v2 == 9)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v4 = *(id *)(a1 + 32);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "url", (_QWORD)v18));
          objc_msgSend(v3, "addObject:", v10);

          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "conversionNeeded"));
          v12 = *(void **)(*(_QWORD *)(a1 + 40) + 120);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "url"));
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v13);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v6);
    }

    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(void **)(v14 + 112);
    *(_QWORD *)(v14 + 112) = v3;
    v16 = v3;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 128), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "addObjectsFromArray:", *(_QWORD *)(a1 + 56));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 280), *(id *)(a1 + 64));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 48), *(id *)(a1 + 72));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 336), *(id *)(a1 + 80));

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
}

id sub_10006C888(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "observeValueForKeyPath:ofObject:change:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_10006CCBC(id a1, BOOL a2, NSError *a3)
{
  NSError *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  if (v3)
  {
    v4 = airdrop_log();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "recordInteraction failed with error %@", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_10006CFB0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_10006CFBC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_10006CFF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection invalidated in %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D0B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: didReceiveResponse unknown status code %ld", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D118()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: didReceiveResponse operation is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D144()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: didReceiveResponse unknown operation", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D170()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: Ask response has no content", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D19C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: Discover response has no content", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D1C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: storePropertyValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D228()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: storeDataValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D288()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: storeStringValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D2E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "parseAskResponse: CFPropertyListCreateWithData %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D34C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFPropertyListCreateWithData returned invalid dictionary", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "parseDiscoverResponse: CFPropertyListCreateWithData %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D3DC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Connection to %@ failed (%@)");
  sub_10001949C();
}

void sub_10006D43C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: receiver is not trusted", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D468(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropClient: if_indextoname(%d) failed", (uint8_t *)v2, 8u);
  sub_1000161DC();
}

void sub_10006D4D8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "personID"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "SDAirDropClient: intermediate certificate not available. Sending to %@ with no Apple ID certificate", v5);

  sub_1000332E4();
}

void sub_10006D558()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: authenticationMethod returned %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D5B8(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personID"));
  sub_100029230();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Validated Apple ID certificate of receiver %@", v4, 0xCu);

  sub_1000332E4();
}

void sub_10006D644(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personID"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "Failed to validate Apple ID certificate of receiver %@", v5);

  sub_1000332E4();
}

void sub_10006D6C8(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Bonjour resolve %@ failed (%@)", (uint8_t *)&v6, 0x16u);

}

void sub_10006D774()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "SDAirDropClient: Unhandled compression type [%@], assuming GZip", v1, 0xCu);
  sub_10001949C();
}

void sub_10006D7E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: validateAirDropItems _items is empty or NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D80C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "validateAirDropItems couldn't validate fileURL: %@ with error: %@");
  sub_10001949C();
}

void sub_10006D86C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: Subtype for asset bundle couldn't be determined for URL: %@. Error: %@");
  sub_10001949C();
}

void sub_10006D8CC()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unexpectedly going through SDAirDropClient to AirDrop on Dawn device", v1, 2u);
  sub_1000161DC();
}

void sub_10006D904()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: kCFURLTypeIdentifierKey %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D964()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: kCFURLNameKey %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006D9C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: startPublishingProgress sessionID is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006D9F0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100029230();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "startSending, did NOT validate airdrop items. Error: %@. properties: %@");
  sub_10001949C();
}

void sub_10006DA64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: splitOutFileURLs failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006DA90(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "count");
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
  v9 = 138413058;
  v10 = v6;
  v11 = 2048;
  v12 = v7;
  v13 = 2112;
  v14 = v8;
  v15 = 2112;
  v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDAirDropClient: coordinateAccessWithIntents(%@) for %lu files %@ failed %@", (uint8_t *)&v9, 0x2Au);
}

void sub_10006DB58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: generatePreviewForFileURL copy property %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006DBBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: generatePreviewForFileURL load data %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10006DC1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: createImageDataWithSize returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006DC48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: createCGImageWithData returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10006DC74(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1000161F0((void *)&_mh_execute_header, a3, (uint64_t)a3, "SDAirDropClient: generatePreviewForFileURL failed to extract information from vcard \"%@\"", (uint8_t *)a2);

}

void sub_10006DCC0(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10006CFB0((void *)&_mh_execute_header, a3, (uint64_t)a3, "SDAirDropClient: generatePreviewForFileURL monogramImageDataForContact return nil", a1);
}

void sub_10006DCF4(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10006CFB0((void *)&_mh_execute_header, a3, (uint64_t)a3, "SDAirDropClient: generatePreviewForFileURL failed to decode.", a1);
}

void sub_10006DF08(id a1)
{
  SDHotspotAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDHotspotAgent);
  v2 = (void *)qword_1007C6610;
  qword_1007C6610 = (uint64_t)v1;

}

id sub_10006E364(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_10006E54C(uint64_t a1)
{
  SDHotspotManager *v2;
  uint64_t v3;
  void *v4;

  v2 = -[SDHotspotManager initWithDelegate:]([SDHotspotManager alloc], "initWithDelegate:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v2;

  return objc_msgSend(*(id *)(a1 + 32), "update");
}

id sub_10006E5E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_10006E78C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged:", 0);
}

id sub_10006EE30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_10006F41C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (dword_1007B0A10 <= 50 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 50)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _advertiserUpdate]_block_invoke", 50, "Advertisement timer fired");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_10006F49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_companionLinkHandleRequest:options:responseHandler:", a2, a3, a4);
}

void sub_10006F4B0(id a1)
{
  if (dword_1007B0A10 <= 90 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 90)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _advertiserUpdate]_block_invoke_3", 90, "### Companion link receiver interrupted");
}

void sub_10006F510(id a1)
{
  if (dword_1007B0A10 <= 90 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 90)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _advertiserUpdate]_block_invoke_4", 90, "### Companion link receiver invalidated");
}

void sub_10006F570(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B0A10 <= 90)
    {
      v6 = v2;
      if (dword_1007B0A10 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0A10, 90), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _advertiserUpdate]_block_invoke_5", 90, "### Companion link receiver failed to activate: %@", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B0A10 <= 50)
  {
    v6 = 0;
    if (dword_1007B0A10 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B0A10, 50), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _advertiserUpdate]_block_invoke_5", 50, "Companion link receiver started");
      goto LABEL_8;
    }
  }

}

id sub_10006F980(uint64_t a1)
{
  unsigned int v2;
  const char *v3;

  if (dword_1007B0A10 <= 50 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 50)))
  {
    v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "isTetheringSupported");
    v3 = "no";
    if (v2)
      v3 = "yes";
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent hotspotManagerTetheringSupportChanged:]_block_invoke", 50, "Tethering supported changed: %s", v3);
  }
  objc_msgSend(*(id *)(a1 + 32), "_update");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "tetheringSupportChanged");
}

void sub_10006FA6C(id a1)
{
  void *v1;

  v1 = (void *)qword_1007C6618;
  qword_1007C6618 = (uint64_t)&off_10074F9E8;

}

void sub_10006FB68(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006FBC0;
  block[3] = &unk_1007146D8;
  block[4] = v1;
  dispatch_async(v2, block);
}

id sub_10006FBC0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_appMonitorUpdate");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_10007001C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_addClientID:bundleID:proxy:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_1000701C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_removeClientID:", *(_QWORD *)(a1 + 40));
}

id sub_1000703D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_startBrowsingForClientID:", *(_QWORD *)(a1 + 40));
}

id sub_10007074C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_stopBrowsingForClientID:", *(_QWORD *)(a1 + 40));
}

id sub_100070AC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_enableHotspotForDevice:withCompletionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100070DD8(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  id v4;
  SDHotspotRequest *v5;
  SDHotspotRequest *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200))
  {
    v2 = arc4random();
    v3 = (int *)objc_msgSend(*(id *)(a1 + 32), "_logCategoryCreateWithLabel:sessionID:", CFSTR("TetheringAgent"), v2);
    v4 = objc_alloc_init((Class)SFRemoteHotspotDevice);
    objc_msgSend(v4, "setDeviceIdentifier:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));
    v5 = objc_opt_new(SDHotspotRequest);
    v6 = v5;
    if (*(_BYTE *)(a1 + 56))
      v7 = 2;
    else
      v7 = 3;
    -[SDHotspotRequest setRequestType:](v5, "setRequestType:", v7);
    -[SDHotspotRequest setHotspotDevice:](v6, "setHotspotDevice:", v4);
    -[SDHotspotRequest setLogCategory:](v6, "setLogCategory:", v3);
    -[SDHotspotRequest setSessionID:](v6, "setSessionID:", v2);
    -[SDHotspotRequest setTrafficFilterParams:](v6, "setTrafficFilterParams:", *(_QWORD *)(a1 + 40));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10007100C;
    v11[3] = &unk_100715880;
    v12 = *(id *)(a1 + 48);
    -[SDHotspotRequest setHotspotInfoHandler:](v6, "setHotspotInfoHandler:", v11);
    if (*v3 <= 40 && (*v3 != -1 || _LogCategory_Initialize(v3, 40)))
    {
      v8 = "Adding";
      if (!*(_BYTE *)(a1 + 56))
        v8 = "Removing";
      LogPrintF(v3, "-[SDHotspotAgent updateLowLatencyFilter:isAddFilter:completion:]_block_invoke", 40, "%s low latency fiter using companion link device %@ with params %@", v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200), *(_QWORD *)(a1 + 40));
    }
    objc_msgSend(*(id *)(a1 + 32), "_companionLinkActivateWithRequest:", v6);

  }
  else
  {
    if (dword_1007B0A10 <= 90
      && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 90)))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent updateLowLatencyFilter:isAddFilter:completion:]_block_invoke", 90, "### Missing hotspot device identifier to send low latency filter request");
    }
    v9 = NSErrorWithOSStatusF(4294960569, "Remote hotspot device identifer is missing");
    v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
}

uint64_t sub_10007100C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100071458(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_1007B0A10 <= 50)
  {
    if (dword_1007B0A10 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0A10, 50), v3 = v5, v4))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke", 50, "CompanionLink found: %@", v3);
      v3 = v5;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_discoveryDeviceFound:", v3);

}

void sub_1000714F0(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_1007B0A10 <= 50)
  {
    if (dword_1007B0A10 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0A10, 50), v3 = v5, v4))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke_2", 50, "CompanionLink changed: %@", v3);
      v3 = v5;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_discoveryDeviceChanged:", v3);

}

void sub_100071588(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (dword_1007B0A10 <= 50)
  {
    if (dword_1007B0A10 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0A10, 50), v3 = v5, v4))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke_3", 50, "CompanionLink lost: %@", v3);
      v3 = v5;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_discoveryDeviceLost:", v3);

}

void sub_100071620(id a1)
{
  if (dword_1007B0A10 <= 90 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 90)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke_4", 90, "### CompanionLink interrupted");
}

void sub_100071680(id a1)
{
  if (dword_1007B0A10 <= 90 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 90)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke_5", 90, "### CompanionLink invalidated");
}

void sub_1000716E0(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B0A10 <= 90)
    {
      v6 = v2;
      if (dword_1007B0A10 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0A10, 90), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke_6", 90, "### Companion link failed to activate: %@", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B0A10 <= 50)
  {
    v6 = 0;
    if (dword_1007B0A10 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B0A10, 50), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkEnsureStarted]_block_invoke_6", 50, "Companion link started");
      goto LABEL_8;
    }
  }

}

uint64_t sub_100071E10(uint64_t result)
{
  uint64_t v1;

  if (dword_1007B0A10 <= 90)
  {
    v1 = result;
    if (dword_1007B0A10 != -1)
      return LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkActivateWithRequest:]_block_invoke", 90, "### CompanionLink client interrupted for device: %@", *(_QWORD *)(v1 + 32));
    result = _LogCategory_Initialize(&dword_1007B0A10, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkActivateWithRequest:]_block_invoke", 90, "### CompanionLink client interrupted for device: %@", *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_100071E8C(uint64_t result)
{
  uint64_t v1;

  if (dword_1007B0A10 <= 90)
  {
    v1 = result;
    if (dword_1007B0A10 != -1)
      return LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkActivateWithRequest:]_block_invoke_2", 90, "### CompanionLink client invalidated for device: %@", *(_QWORD *)(v1 + 32));
    result = _LogCategory_Initialize(&dword_1007B0A10, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _companionLinkActivateWithRequest:]_block_invoke_2", 90, "### CompanionLink client invalidated for device: %@", *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_100071F08(uint64_t a1, void *a2)
{
  id v3;
  int *v4;
  int v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  id v7;

  v3 = a2;
  v4 = *(int **)(a1 + 64);
  v5 = *v4;
  v7 = v3;
  if (!v3)
  {
    if (v5 <= 50)
    {
      if (v5 == -1)
      {
        if (!_LogCategory_Initialize(v4, 50))
          goto LABEL_11;
        v4 = *(int **)(a1 + 64);
      }
      LogPrintF(v4, "-[SDHotspotAgent _companionLinkActivateWithRequest:]_block_invoke_3", 50, "Companion link client activated for device: %@", *(_QWORD *)(a1 + 48));
    }
LABEL_11:
    objc_msgSend(*(id *)(a1 + 56), "_companionLinkActivatedRequest:", *(_QWORD *)(a1 + 40));
    goto LABEL_12;
  }
  if (v5 <= 90)
  {
    if (v5 == -1)
    {
      if (!_LogCategory_Initialize(v4, 90))
        goto LABEL_9;
      v4 = *(int **)(a1 + 64);
      v3 = v7;
    }
    LogPrintF(v4, "-[SDHotspotAgent _companionLinkActivateWithRequest:]_block_invoke_3", 90, "### CompanionLink activation failed: %@, error: %@", *(_QWORD *)(a1 + 32), v3);
  }
LABEL_9:
  v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hotspotInfoHandler"));
  ((void (**)(_QWORD, _QWORD, id))v6)[2](v6, 0, v7);

LABEL_12:
}

id sub_100072324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_companionLinkHandleResponse:request:error:", a2, *(_QWORD *)(a1 + 40), a4);
}

void sub_100072BDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = a4;
  v9 = a3;
  v10 = a2;
  LogCategory_Remove(v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_100072C60(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  else
    return objc_msgSend(*(id *)(a1 + 32), "_companionLinkStartTetheringWithResponse:logCategory:modelID:productVersion:canConnectOn5GHz:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
}

void sub_1000734E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100073504(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_100073634(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  __int128 v19;
  _QWORD block[4];
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 v25;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007374C;
  block[3] = &unk_1007159F8;
  v21 = v9;
  v22 = v11;
  v19 = *(_OWORD *)(a1 + 40);
  v23 = v10;
  v24 = v12;
  v14 = (id)v19;
  v25 = v19;
  v15 = v12;
  v16 = v10;
  v17 = v11;
  v18 = v9;
  dispatch_async(v13, block);

}

void sub_10007374C(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  id v7;
  NSMutableDictionary *v8;
  NSMutableDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSMutableDictionary *v13;

  v2 = *(int **)(a1 + 72);
  if (*v2 <= 50)
  {
    if (*v2 == -1)
    {
      if (!_LogCategory_Initialize(*(_QWORD *)(a1 + 72), 50))
        goto LABEL_8;
      v2 = *(int **)(a1 + 72);
    }
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)(a1 + 48))
      v6 = "yes";
    else
      v6 = "no";
    v7 = objc_retainBlock(*(id *)(a1 + 64));
    LogPrintF(v2, "-[SDHotspotAgent _companionLinkStartTetheringWithResponse:logCategory:modelID:productVersion:canConnectOn5GHz:]_block_invoke_2", 50, "Personal hotspot started: Nm %@, Ch %@, Ps %s, Er %@ Hd %@", v3, v4, v6, v5, v7);

  }
LABEL_8:
  v8 = objc_opt_new(NSMutableDictionary);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 32);
  v13 = v8;
  if (v10)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v10, CFSTR("name"));
    v9 = v13;
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v11, CFSTR("pass"));
    v9 = v13;
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", v12, CFSTR("chan"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100074124(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "browsing"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clientProxy"));
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "allValues"));
      objc_msgSend(v6, "updatedFoundDeviceList:", v7);

    }
    else if (dword_1007B0A10 <= 90
           && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 90)))
    {
      LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _discoveryUpdateClients]_block_invoke", 90, "### Client is missing proxy: %@", v8);
    }

  }
}

void sub_100074618(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "_sysMonitorD2DEncryptionIsAvailable") & 1) != 0
    || objc_msgSend(v5, "group") != (id)1)
  {
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v6);
  }

}

id sub_10007479C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_discoveryUpdateLegacyDeviceList:", *(_QWORD *)(a1 + 40));
}

id sub_100075B50(uint64_t a1)
{
  if (dword_1007B0A10 <= 50 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 50)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _sysMonitorEnsureStarted]_block_invoke", 50, "Family updated");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = -1;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100075BCC(uint64_t a1)
{
  if (dword_1007B0A10 <= 50 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 50)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _sysMonitorEnsureStarted]_block_invoke_2", 50, "Primary account changed");
  objc_msgSend(*(id *)(a1 + 32), "_legacyBrowswerUpdateD2DState");
  objc_msgSend(*(id *)(a1 + 32), "_update");
  return objc_msgSend(*(id *)(a1 + 32), "_discoveryUpdateCombined:", 0);
}

id sub_100075C50(uint64_t a1)
{
  if (dword_1007B0A10 <= 50 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 50)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _sysMonitorEnsureStarted]_block_invoke_3", 50, "Manatee Availability changed");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100075CC0(uint64_t a1)
{
  if (dword_1007B0A10 <= 50 && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 50)))
    LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _sysMonitorEnsureStarted]_block_invoke_4", 50, "System monitor activated");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 273) = 1;
  objc_msgSend(*(id *)(a1 + 32), "_legacyBrowswerUpdateD2DState");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000767AC(_QWORD *a1, int a2)
{
  int *v3;
  int v4;
  uint64_t v5;
  void *v6;

  v3 = (int *)a1[8];
  v4 = *v3;
  if (a2 != 1)
  {
    if (v4 <= 90)
    {
      if (v4 == -1)
      {
        if (!_LogCategory_Initialize(v3, 90))
          goto LABEL_11;
        v3 = (int *)a1[8];
      }
      LogPrintF(v3, "-[SDHotspotAgent _postUserAlertForName:altDSID:logCategory:completion:]_block_invoke", 90, "### User denied Personal Hotspot request for \"%@\"", a1[4]);
    }
LABEL_11:
    v5 = NSErrorWithOSStatusF(4294896150, "User denied request to turn on Personal Hotspot.");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(void))(a1[7] + 16))();

    return objc_msgSend(*(id *)(a1[5] + 288), "removeObjectForKey:", a1[6]);
  }
  if (v4 <= 50)
  {
    if (v4 == -1)
    {
      if (!_LogCategory_Initialize(v3, 50))
        goto LABEL_9;
      v3 = (int *)a1[8];
    }
    LogPrintF(v3, "-[SDHotspotAgent _postUserAlertForName:altDSID:logCategory:completion:]_block_invoke", 50, "User allowed Personal Hotspot request for \"%@\"", a1[4]);
  }
LABEL_9:
  (*(void (**)(void))(a1[7] + 16))();
  return objc_msgSend(*(id *)(a1[5] + 288), "removeObjectForKey:", a1[6]);
}

void sub_100076914(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString"));

  objc_msgSend(*(id *)(a1 + 32), "_postUserAlertForName:altDSID:logCategory:completion:", CFSTR("John Appleseed"), v3, objc_msgSend(*(id *)(a1 + 32), "_logCategoryCreateWithLabel:sessionID:", CFSTR("TetheringAgent"), 0), &stru_100715AB8);
}

id sub_100076BE0(uint64_t a1)
{
  id result;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t state64;

  result = (id)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 296);
  if ((_DWORD)result != -1)
  {
    state64 = 0;
    result = (id)notify_get_state((int)result, &state64);
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(v3 + 300) != (_DWORD)state64)
    {
      *(_DWORD *)(v3 + 300) = state64;
      if (dword_1007B0A10 <= 30
        && (dword_1007B0A10 != -1 || _LogCategory_Initialize(&dword_1007B0A10, 30)))
      {
        v4 = *(int *)(*(_QWORD *)(a1 + 32) + 300);
        if (v4 > 5)
          v5 = "?";
        else
          v5 = (&off_100715B58)[v4];
        LogPrintF(&dword_1007B0A10, "-[SDHotspotAgent _registerForWombatActivityNotifications]_block_invoke", 30, "Received wombat activity state change notification: %s (0x%x)\n", v5, v4);
      }
      return objc_msgSend(*(id *)(a1 + 32), "_updateAdvertisementSuppression:", *(_DWORD *)(*(_QWORD *)(a1 + 32) + 300) == 1);
    }
  }
  return result;
}

id sub_100076E1C()
{
  id *v0;

  if (qword_1007C6630 != -1)
    dispatch_once(&qword_1007C6630, &stru_100715AD8);
  v0 = (id *)dlsym((void *)qword_1007C6638, "RPOptionSenderModelID");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6628, *v0);
  off_1007B0A80 = (uint64_t (*)())sub_100076E94;
  return (id)qword_1007C6628;
}

id sub_100076E94()
{
  return (id)qword_1007C6628;
}

void sub_100076EA0(id a1)
{
  qword_1007C6638 = (uint64_t)dlopen("/System/Library/Frameworks/Rapport.framework/Rapport", 2);
}

void sub_100076F08(id a1)
{
  SDHotspotBrowser *v1;
  void *v2;

  if ((SFIsDeviceAudioAccessory(a1) & 1) == 0)
  {
    v1 = objc_alloc_init(SDHotspotBrowser);
    v2 = (void *)qword_1007C6640;
    qword_1007C6640 = (uint64_t)v1;

  }
}

id sub_1000770F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint8_t v8[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Activating legacy browser", v8, 2u);
  }

  v4 = objc_msgSend(objc_alloc((Class)IDSContinuity), "initWithDelegate:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 72);
  *(_QWORD *)(v5 + 72) = v4;

  objc_msgSend(*(id *)(a1 + 32), "addObservers");
  objc_msgSend(*(id *)(a1 + 32), "stopAdvertisingResponse");
  objc_msgSend(*(id *)(a1 + 32), "stopAdvertisingTetheringRequest");
  objc_msgSend(*(id *)(a1 + 32), "updateHasAppleID");
  objc_msgSend(*(id *)(a1 + 32), "updateIDHash");
  return objc_msgSend(*(id *)(a1 + 32), "tetheringSupportChanged");
}

void sub_10007720C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint8_t v8[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalidating legacy browser", v8, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 11) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 12) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 14) = 0;
  objc_msgSend(*(id *)(a1 + 32), "removeObservers");
  objc_msgSend(*(id *)(a1 + 32), "stopAdvertisingResponse");
  objc_msgSend(*(id *)(a1 + 32), "stopAdvertisingTetheringRequest");
  objc_msgSend(*(id *)(a1 + 32), "stopConsumerScanning");
  objc_msgSend(*(id *)(a1 + 32), "stopProducerScanning");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = 0;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "removeDelegate:");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

void sub_100077364(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 40));
}

void sub_1000773EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(v3 + 80);
  v4 = (id *)(v3 + 80);
  v5 = v6;
  if (v2)
  {
    if (!v5)
    {
      objc_storeStrong(v4, v2);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "addDelegate:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
    }
  }
  else if (v5)
  {
    objc_msgSend(v5, "removeDelegate:");
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 80);
    *(_QWORD *)(v7 + 80) = 0;

  }
}

_QWORD *sub_1000774B8(_QWORD *result)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  _BYTE *v7;
  int v8;
  const __CFString *v9;

  v1 = result[4];
  v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    v3 = result;
    *(_BYTE *)(v1 + 8) = v2;
    v4 = tethering_log(result);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v3[4] + 8))
        v6 = CFSTR("YES");
      else
        v6 = CFSTR("NO");
      v8 = 138412290;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Legacy scan state changed: %@", (uint8_t *)&v8, 0xCu);
    }

    v7 = (_BYTE *)v3[4];
    if (v7[8])
      return objc_msgSend(v7, "restartProducerScanning");
    else
      return objc_msgSend(v7, "stopProducerScanning");
  }
  return result;
}

_QWORD *sub_100077604(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  if (*(unsigned __int8 *)(result[4] + 9) != *((unsigned __int8 *)result + 40))
  {
    v1 = result;
    v2 = tethering_log(result);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((unsigned __int8 *)v1 + 40);
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Legacy D2D encryption state changed: %{BOOL}d", (uint8_t *)v5, 8u);
    }

    *(_BYTE *)(v1[4] + 9) = *((_BYTE *)v1 + 40);
    return objc_msgSend((id)v1[4], "restartProducerScanning");
  }
  return result;
}

void sub_100078A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100078A30(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  id v11;

  v11 = a3;
  v7 = objc_opt_class(SDHotspotRequestRecord, v6);
  if ((objc_opt_isKindOfClass(v11, v7) & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "remoteHotspotDevice"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceIdentifier"));
    v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if (v10)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }

}

id sub_10007901C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "altDSIDUpdated", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "updateAccountState");
}

id sub_100079490(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Apple ID changed", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "updateAccountState");
}

id sub_100079558(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Apple Account signed in", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "updateAccountState");
}

id sub_100079620(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Apple Account signed out", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "updateAccountState");
}

id sub_100079714(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "screenOn"))
    objc_msgSend(*(id *)(a1 + 32), "updateIDHashAndRestart");
  v2 = objc_msgSend(*(id *)(a1 + 32), "bluetoothAllowedForScreenState");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "restartAdvertisingTetheringRequest");
    return objc_msgSend(*(id *)(a1 + 32), "restartConsumerScanning");
  }
  else
  {
    objc_msgSend(v3, "stopAdvertisingTetheringRequest");
    return objc_msgSend(*(id *)(a1 + 32), "stopConsumerScanning");
  }
}

id sub_1000797D0(uint64_t a1)
{
  id result;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "maxConnectionsReached");
  if ((_DWORD)result)
  {
    v3 = tethering_log(result);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Max connections reached, stopping response", v5, 2u);
    }

    return objc_msgSend(*(id *)(a1 + 32), "stopAdvertisingResponse");
  }
  return result;
}

void sub_1000798CC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t v14[16];
  uint8_t buf[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v3 = objc_msgSend(v2, "isEqualToString:", SFWiFiPasswordSharingAdvertisingBegan);

  if (v3)
  {
    v5 = tethering_log(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WiFi password sharing began", buf, 2u);
    }

    v7 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(v7 + 12))
    {
      if (!*(_BYTE *)(v7 + 13))
      {
        *(_BYTE *)(v7 + 13) = 1;
        objc_msgSend(*(id *)(a1 + 40), "stopAdvertisingTetheringRequest");
      }
    }
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v9 = objc_msgSend(v8, "isEqualToString:", SFWiFiPasswordSharingAdvertisingEnded);

    if (v9)
    {
      v11 = tethering_log(v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WiFi password sharing ended", v14, 2u);
      }

      v13 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v13 + 13))
      {
        *(_BYTE *)(v13 + 13) = 0;
        objc_msgSend(*(id *)(a1 + 40), "restartAdvertisingTetheringRequest");
      }
    }
  }
}

id sub_10007A2EC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  const __CFString *v5;
  unsigned int v6;
  void *v7;
  int v9;
  const __CFString *v10;

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "isTetheringSupported");
    v5 = CFSTR("NO");
    if (v4)
      v5 = CFSTR("YES");
    v9 = 138412290;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tethering support changed = %@", (uint8_t *)&v9, 0xCu);
  }

  v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "isTetheringSupported");
  v7 = *(void **)(a1 + 32);
  if (v6)
    return objc_msgSend(v7, "restartProducerScanning");
  objc_msgSend(v7, "stopProducerScanning");
  return objc_msgSend(*(id *)(a1 + 32), "stopAdvertisingResponse");
}

_QWORD *sub_10007AA50(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (!*(_BYTE *)(result[4] + 12))
  {
    v1 = result;
    v2 = tethering_log(result);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting Browsing", v4, 2u);
    }

    *(_BYTE *)(v1[4] + 12) = 1;
    objc_msgSend((id)v1[4], "restartAdvertisingTetheringRequest");
    *(_BYTE *)(v1[4] + 11) = 1;
    return objc_msgSend((id)v1[4], "restartConsumerScanning");
  }
  return result;
}

_QWORD *sub_10007AB54(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(result[4] + 12))
  {
    v1 = result;
    v2 = tethering_log(result);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping Browsing", v4, 2u);
    }

    *(_BYTE *)(v1[4] + 12) = 0;
    objc_msgSend((id)v1[4], "stopAdvertisingTetheringRequest");
    *(_BYTE *)(v1[4] + 11) = 0;
    objc_msgSend((id)v1[4], "stopConsumerScanning");
    return objc_msgSend(*(id *)(v1[4] + 152), "removeAllObjects");
  }
  return result;
}

void sub_10007AC9C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  unsigned int v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  SDHotspotRequestRecord *v28;
  uint64_t v29;
  void *v30;
  SDHotspotRequestRecord *v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  NSErrorDomain v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  NSErrorUserInfoKey v47;
  const __CFString *v48;
  NSErrorUserInfoKey v49;
  const __CFString *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  uint8_t buf[4];
  id v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceName"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "batteryLife"));
    *(_DWORD *)buf = 138412802;
    v54 = v4;
    v55 = 2112;
    v56 = v5;
    v57 = 2112;
    v58 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Enabling hotspot for device (name = %@, identifier = %@, batteryLife = %@)", buf, 0x20u);

  }
  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "state");
  if (v7 != (id)3)
  {
    v32 = tethering_log(v7);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      sub_10007F6D0();

    v47 = NSLocalizedDescriptionKey;
    v48 = CFSTR("Tethering communication state is not on");
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
    v35 = NSPOSIXErrorDomain;
    v36 = 104;
    goto LABEL_17;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));

  if (!v8)
  {
    v37 = tethering_log(v9);
    v38 = objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      sub_10007F644();

    v49 = NSLocalizedDescriptionKey;
    v50 = CFSTR("No peer for device requested");
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
    v35 = NSPOSIXErrorDomain;
    v36 = 94;
LABEL_17:
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v35, v36, v34));

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_22;
  }
  v10 = objc_alloc((Class)NSUUID);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
  v12 = objc_msgSend(v10, "initWithUUIDString:", v11);

  v51[0] = CFSTR("HotspotMessageVersion");
  v51[1] = CFSTR("HotspotBrowserMessageType");
  v52[0] = &off_10074B3B8;
  v52[1] = &off_10074B3D0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v52, v51, 2));
  v14 = tethering_log(v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Requesting credentials from bluetooth peer = %@", buf, 0xCu);
  }

  v16 = *(void **)(a1 + 40);
  v45 = 0;
  v46 = 0;
  v17 = objc_msgSend(v16, "sendMessage:toPeer:isRequest:messageID:error:identifier:", v13, v12, 1, 0, &v46, &v45);
  v18 = v46;
  v19 = v45;
  v20 = v19;
  if (v17)
  {
    v21 = objc_msgSend(*(id *)(a1 + 48), "copy");
    v22 = *(void **)(*(_QWORD *)(a1 + 40) + 120);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
    objc_msgSend(v22, "setObject:forKeyedSubscript:", v21, v23);

    v24 = *(void **)(a1 + 40);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
    objc_msgSend(v24, "invalidateTimerWithIdentifier:", v25);

    v26 = *(void **)(a1 + 40);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
    objc_msgSend(v26, "addRetrieveTimer:", v27);

    v28 = [SDHotspotRequestRecord alloc];
    v29 = *(_QWORD *)(a1 + 32);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v31 = -[SDHotspotRequestRecord initWithHotspotDevice:startTime:requestID:](v28, "initWithHotspotDevice:startTime:requestID:", v29, v30, v20);

    if (v20)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 200), "setObject:forKeyedSubscript:", v31, v20);

  }
  else
  {
    v39 = tethering_log(v19);
    v40 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      sub_10007F670();

    v41 = *(_QWORD **)(a1 + 40);
    v42 = (void *)v41[23];
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "modelCodeForIdentifier:", v43));
    sub_1000458B0(v42, v44, v18, 3, 0);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

LABEL_22:
}

void sub_10007B200(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "retrieveTimerFired:", *(_QWORD *)(a1 + 40), 0, 30.0));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 40));

}

id sub_10007B30C(uint64_t a1)
{
  uint64_t *v2;
  id *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSErrorUserInfoKey v21;
  const __CFString *v22;

  v2 = (uint64_t *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (id *)(a1 + 40);
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "objectForKeyedSubscript:"));
    if (v4)
    {
      v21 = NSLocalizedDescriptionKey;
      v22 = CFSTR("Retrieving credentials timed out");
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 60, v5));
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v6);

      v7 = tethering_log(objc_msgSend(*((id *)*v3 + 15), "removeObjectForKey:", *v2));
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_10007F7AC((uint64_t)v2, v8, v9, v10, v11, v12, v13, v14);

      if (!objc_msgSend(*v3, "outstandingRequestsHasHotspotDeviceForID:", *v2))
        goto LABEL_12;
      v15 = (void *)*((_QWORD *)*v3 + 23);
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "modelCodeForIdentifier:", *v2));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 60, 0));
      sub_1000458B0(v15, v16, v17, 5, 0);

    }
    else
    {
      v19 = tethering_log(0);
      v16 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_10007F728(v2, a1 + 40, v16);
    }

LABEL_12:
    objc_msgSend(*((id *)*v3 + 16), "removeObjectForKey:", *v2);
    goto LABEL_13;
  }
  v18 = tethering_log(a1);
  v4 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    sub_10007F6FC();
LABEL_13:

  return objc_msgSend(*(id *)(a1 + 48), "invalidate");
}

void sub_10007CABC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint8_t buf[4];
  uint64_t v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", &off_10074B3B8, CFSTR("HotspotMessageVersion"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", &off_10074B3B8, CFSTR("HotspotBrowserMessageType"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("HotspotBroswerCredentialData"));

  v6 = tethering_log(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending credentials to peer = %@", buf, 0xCu);
  }

  v9 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "outgoingResponseIdentifier"));
  v16 = 0;
  LOBYTE(v9) = objc_msgSend(v9, "sendMessage:toDeviceWithID:isRequest:messageID:error:identifier:", v4, v10, 0, v11, &v16, 0);
  v12 = v16;

  if ((v9 & 1) == 0)
  {
    v14 = tethering_log(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_10007F9CC();

  }
}

void sub_10007D09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007D0BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleScanResetTimerFired");

}

void sub_10007D368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007D388(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleScanAssertionTimerFired");

}

void sub_10007D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_10007D9A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(a1 + 40);
  v15 = *(NSObject **)(v13 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10007DAB4;
  v20[3] = &unk_100715C28;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v13;
  v25 = v12;
  v26 = v14;
  v16 = v12;
  v17 = v11;
  v18 = v10;
  v19 = v9;
  dispatch_async(v15, v20);

}

void sub_10007DAB4(uint64_t a1)
{
  uint64_t *v2;
  const __CFString **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const __CFString *v22;
  __int16 v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;

  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 56), "credentialLog:");
    v28 = *(_OWORD *)(a1 + 32);
    v27[0] = CFSTR("HotspotCredentialName");
    v27[1] = CFSTR("HotspotCredentialPassword");
    v27[2] = CFSTR("HotspotCredentialChannel");
    v29 = *(_QWORD *)(a1 + 48);
    v2 = (uint64_t *)&v28;
    v3 = (const __CFString **)v27;
    v4 = 3;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 64);
    v25 = CFSTR("HotspotCredentialError");
    v26 = v5;
    v2 = &v26;
    v3 = &v25;
    v4 = 1;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v3, v4));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v6, 1, 0));
  v8 = tethering_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40))
      v12 = CFSTR("YES");
    else
      v12 = CFSTR("NO");
    v13 = *(_QWORD *)(a1 + 64);
    v17 = 138413058;
    v18 = v11;
    v19 = 2112;
    v20 = v10;
    v21 = 2112;
    v22 = v12;
    v23 = 2112;
    v24 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Credentials (name = %@, channel = %@, password = %@, error = %@)", (uint8_t *)&v17, 0x2Au);
  }

  v15 = tethering_log(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    sub_10007FA9C((uint64_t)v6, v7, v16);

  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

void sub_10007E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10007E7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10007EAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10007EC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_10007EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10007EF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10007F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_10007F410()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No apple ID hash", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F43C(char a1, char a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  int v5;

  v3[0] = 67109376;
  v3[1] = a1 & 1;
  v4 = 1024;
  v5 = a2 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "realityDevice: %{BOOL}d, manateeUnavailable: %{BOOL}d", (uint8_t *)v3, 0xEu);
  sub_10001949C();
}

void sub_10007F4C4(void *a1, NSObject *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(a1, "timeIntervalSinceDate:", v4);
  v7 = 134217984;
  v8 = v5;
  sub_1000161F0((void *)&_mh_execute_header, a2, v6, "timeUntilTomorrow returned a negative number = %f", (uint8_t *)&v7);

  sub_100031218();
}

void sub_10007F564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No peer to send to", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F590(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "UUIDString"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "No device found for identifier %@", v5);

}

void sub_10007F618()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No deviceID to send to", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F644()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No peer to enable", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F670()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Message failed to send with immediate error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007F6D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Bluetooth not powered on, cannot send request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F6FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Timer does not have user info", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F728(uint64_t *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 120);
  v5 = 138412546;
  v6 = v3;
  v7 = 2112;
  v8 = v4;
  sub_100050D98((void *)&_mh_execute_header, a3, (uint64_t)a3, "No handler for retrieve timeout (identifier = %@, handlers = %@)", (uint8_t *)&v5);
  sub_10001949C();
}

void sub_10007F7AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Called handler with timeout error (identifier = %@)", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10007F814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Did not start advertising request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F840()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create advertisement packet, did not start advertising response", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F86C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create scan filter data, not scanning", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not find iCloud Paired Device for incoming advertising", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F8C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Discovered device without a client proxy", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F8F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Message did not contain type", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F91C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No fromID or peerID for request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F948()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No peer ID in credentials response", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create peer UUID", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F9A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No credentials in response", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10007F9CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Could not send credentials response = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FA2C(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IOPMAssertionCreateWithProperties returned %x", (uint8_t *)v2, 8u);
  sub_1000161DC();
}

void sub_10007FA9C(uint64_t a1, void *a2, NSObject *a3)
{
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  __int16 v7;
  void *v8;
  __int16 v9;
  id v10;

  if (a1)
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  v5 = 138412802;
  v6 = v4;
  v7 = 2112;
  v8 = a2;
  v9 = 2048;
  v10 = objc_msgSend(a2, "length");
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Returning credentials = %@, with data = %@, length = %ld", (uint8_t *)&v5, 0x20u);
}

void sub_10007FB64(void *a1, uint64_t a2, NSObject *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[12];
  __int16 v8;
  uint64_t v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "UUIDString"));
  sub_100029230();
  v8 = 2112;
  v9 = v5;
  sub_100050D98((void *)&_mh_execute_header, a3, v6, "No handler for identifier = %@, handlers = %@", v7);

  sub_100031218();
}

void sub_10007FBFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Unarchiver failed when unarchiving credentials dictionary: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FC5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error in credentials response = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FCBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Retrieving credentials returned error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FD1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Source failed to start advertising IDSContinuityTypeTetheringSourcePresence (%@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FD7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Target failed to start advertising IDSContinuityTypeTetheringTargetPresence (%@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FDDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Target failed to start scanning for IDSContinuityTypeTetheringSourcePresence (%@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10007FE3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Source failed to start scanning for IDSContinuityTypeTetheringTargetPresence (%@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10008020C(id a1)
{
  SDProximityController *v1;
  void *v2;

  v1 = objc_alloc_init(SDProximityController);
  v2 = (void *)qword_1007C6658;
  qword_1007C6658 = (uint64_t)v1;

}

id sub_1000804F4()
{
  if (qword_1007C6668 != -1)
    dispatch_once(&qword_1007C6668, &stru_100715C90);
  return (id)qword_1007C6660;
}

id sub_100081A98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_runSession");
}

void sub_100081F70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.sharing", "ProximityController");
  v2 = (void *)qword_1007C6660;
  qword_1007C6660 = (uint64_t)v1;

}

uint64_t SDUnlockResetReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t String;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v29 = 24;
        goto LABEL_54;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_49:
        v29 = 20;
        goto LABEL_54;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        break;
      case 4u:
        String = PBReaderReadString(a2);
        v27 = objc_claimAutoreleasedReturnValue(String);
        v28 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v27;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_51;
      v22 += 7;
      v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_53:
    v29 = 16;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000830A4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "updatedTransfer:", *(_QWORD *)(a1 + 32));
}

id sub_10008312C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "removedTransfer:", *(_QWORD *)(a1 + 32));
}

void sub_10008411C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transferIdentifierToTransfer", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(v3, "updatedTransfer:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9));
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

void sub_1000844CC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  _QWORD block[5];
  id v7;
  uint64_t v8;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100084564;
  block[3] = &unk_100715D08;
  v5 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v8 = a2;
  v7 = v5;
  dispatch_async(v4, block);

}

id sub_100084564(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTransferState:forTransfer:shouldNotify:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), 1);
}

void sub_100084578(uint64_t a1, char a2, char a3, char a4)
{
  NSObject *v8;
  void *v9;
  _QWORD block[5];
  id v11;
  char v12;
  char v13;
  char v14;

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100084628;
  block[3] = &unk_100715D80;
  v12 = a2;
  v9 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v11 = v9;
  v13 = a3;
  v14 = a4;
  dispatch_async(v8, block);

}

void sub_100084628(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  dispatch_time_t v4;
  NSObject *v5;
  void *v6;
  _QWORD block[5];
  id v8;
  char v9;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 49))
    {
      objc_msgSend(v2, "setTransferState:forTransfer:shouldNotify:", 7, v3, 1);
      v4 = dispatch_time(0, 5000000000);
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dispatchQueue"));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100084734;
      block[3] = &unk_100715D58;
      v6 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v8 = v6;
      v9 = *(_BYTE *)(a1 + 50);
      dispatch_after(v4, v5, block);

    }
    else
    {
      objc_msgSend(v2, "setTransferState:forTransfer:shouldNotify:shouldCleanup:", 8, v3, 1, *(unsigned __int8 *)(a1 + 50));
    }
  }
  else
  {
    _objc_msgSend(*(id *)(a1 + 32), "handlerFailedForTransfer:", *(_QWORD *)(a1 + 40));
  }
}

id sub_100084734(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTransferState:forTransfer:shouldNotify:shouldCleanup:", 8, *(_QWORD *)(a1 + 40), 1, *(unsigned __int8 *)(a1 + 48));
}

void sub_100085258(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  v11 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), v11, v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8));

  if (v9)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v8));
    objc_msgSend(v10, "incrementCount");
  }
  else
  {
    v10 = objc_msgSend(objc_alloc((Class)SFAirDropTransferItem), "initWithType:subtype:isFile:", v11, v7, a4);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v8);
  }

}

void sub_100085494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Progress event for recordID %@: transfer not found, ignoring.", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000854F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Cancel event for recordID %@: transfer not found, ignoring.", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100085554()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error event for recordID %@: transfer not found, ignoring", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000855B4()
{
  id v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_100085488();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "objectForKeyedSubscript:", kSFOperationErrorKey));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedDescription"));
  sub_100085470();
  sub_1000311EC((void *)&_mh_execute_header, v3, v4, "Error event %@ for recordID %@", v5, v6, v7, v8, v9);

  sub_100031218();
}

void sub_10008564C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Finished event for recordID %@: transfer not found, ignoring.", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000856AC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unhandled user response", v1, 2u);
}

void sub_1000856EC()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100085488();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "identifier"));
  sub_100085470();
  sub_1000311EC((void *)&_mh_execute_header, v2, v3, "No handler for transfer with id %@, ignore action triggered event for action %@", v4, v5, v6, v7, v8);

  sub_100031218();
}

void sub_100085768(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  sub_1000311EC((void *)&_mh_execute_header, v2, v3, "Handler %@ failed for transfer with id %@", v4, v5, v6, v7, 2u);

  sub_100031218();
}

void sub_1000857FC()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  sub_100085488();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "identifier"));
  v3 = SFAirDropTransferFailureReasonToString(v0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000311EC((void *)&_mh_execute_header, v4, v5, "Transfer with id %@ failed with reason %@", v6, v7, v8, v9, 2u);

  sub_100031218();
}

void sub_10008589C()
{
  NSObject *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  sub_100085488();
  v3 = v2;
  v4 = SFAirDropTransferStateToString(objc_msgSend(v2, "transferState"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = SFAirDropTransferStateToString(v1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v9 = 138412802;
  v10 = v5;
  v11 = 2112;
  v12 = v7;
  v13 = 2112;
  v14 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Set transfer state %@ -> %@ for transfer with id %@", (uint8_t *)&v9, 0x20u);

}

void sub_10008597C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Remove URL failed with error %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100085A1C(id a1)
{
  void *v1;
  unsigned int v2;
  SDActivityAdvertiser *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "enableContinuity");

  if (v2)
  {
    v3 = objc_alloc_init(SDActivityAdvertiser);
    v4 = (void *)qword_1007C6670;
    qword_1007C6670 = (uint64_t)v3;

  }
}

void sub_1000864A8(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100086514;
  v2[3] = &unk_100715E78;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "_enumerateRemoteObjectProxiesUsingBlock:", v2);

}

id sub_100086514(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "pairedDevicesChanged:", *(_QWORD *)(a1 + 32));
}

id sub_10008696C(_QWORD *a1, void *a2)
{
  return objc_msgSend(a2, "didSendPayloadForActivityIdentifier:toDevice:error:", a1[4], a1[5], a1[6]);
}

id sub_100086A68(_QWORD *a1, void *a2)
{
  return objc_msgSend(a2, "activityPayloadForAdvertisementPayload:command:requestedByDevice:withCompletionHandler:", a1[4], a1[5], a1[6], a1[7]);
}

void sub_100087380(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  v1 = (_QWORD *)(a1 + 32);
  v2 = objc_msgSend(*(id *)(a1 + 32), "invalidateGoodbyeTimer");
  v4 = handoff_log(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_100088BA4(v1, v5);

  v6 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(double *)(*v1 + 96)));
  v7 = *(void **)(*v1 + 104);
  *(_QWORD *)(*v1 + 104) = v6;

}

void sub_100087778(uint64_t a1, uint64_t a2, _BYTE *a3, int a4)
{
  _BYTE *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  int v19;

  v6 = *(_BYTE **)(a1 + 40);
  v6[3] = a2;
  v6[1] = *a3;
  v6[2] = a3[1];
  v7 = handoff_log(a1, a2);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = SFHexStringForData(*(_QWORD *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 40) + 4, 10));
    v12 = SFHexStringForData(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = 138412802;
    v15 = v10;
    v16 = 2112;
    v17 = v13;
    v18 = 1024;
    v19 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Encrypted (sharing flags + advertisementPayload): %@ => %@, counter %u", (uint8_t *)&v14, 0x1Cu);

  }
}

void sub_100087A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_100087B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_100087C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_100087E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100087FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000880DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[4];
  id v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;

  v3 = handoff_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = SFAdvertisementDescriptionFromPayloadData(*(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = SFCompactStringFromCollection(*(_QWORD *)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 138412546;
    v42 = v6;
    v43 = 2112;
    v44 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request to advertise %@ with options %@", buf, 0x16u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("name")));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("name")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "componentsSeparatedByString:", CFSTR("-")));

    if ((unint64_t)objc_msgSend(v11, "count") >= 5)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 5));
      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 156) = objc_msgSend(v12, "intValue");

    }
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = v13 | *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
  v15 = objc_msgSend((id)v13, "isEqual:");
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 168);
  v18 = objc_msgSend((id)v16, "isEqual:", v17);
  if (v14)
    v20 = v15;
  else
    v20 = 1;
  v21 = v18 ^ 1;
  if (!(v16 | v17))
    v21 = 0;
  if (v20 == 1 && v21 == 0)
  {
    v36 = handoff_log(v18, v19);
    v31 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Advertisement contents does not differ from current, continuing previous advertising", buf, 2u);
    }
    goto LABEL_22;
  }
  objc_msgSend(*(id *)(a1 + 48), "invalidateGoodbyeTimer");
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 120) = 1;
  v23 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(void **)(v24 + 160);
  *(_QWORD *)(v24 + 160) = v23;

  v26 = objc_msgSend(*(id *)(a1 + 40), "copy");
  v27 = *(_QWORD *)(a1 + 48);
  v28 = *(void **)(v27 + 168);
  *(_QWORD *)(v27 + 168) = v26;

  if ((objc_msgSend(*(id *)(a1 + 48), "updateAdvertiser") & 1) == 0)
  {
    v31 = objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    if (!-[NSObject alwaysSendPayload](v31, "alwaysSendPayload"))
    {
LABEL_22:

      return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0, v29, v30);
    }
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);

    if (v32)
    {
      v33 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 144), "copy");
      v34 = *(_QWORD **)(a1 + 48);
      v35 = v34[20];
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_100088420;
      v38[3] = &unk_100715F38;
      v39 = v33;
      v40 = *(id *)(a1 + 32);
      v31 = v33;
      objc_msgSend(v34, "activityPayloadForAdvertisementPayload:command:requestedByDevice:withCompletionHandler:", v35, 0, 0, v38);

      goto LABEL_22;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0, v29, v30);
}

void sub_100088420(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a3;
  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[SDActivityPayloadManager sharedPayloadManager](SDActivityPayloadManager, "sharedPayloadManager"));
  objc_msgSend(v7, "sendActivityPayloadWithAdvertisementData:forAdvertisementPayload:activityIdentifier:activityPayload:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v6, v5);

}

void sub_100088510(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appleID"));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_100088600(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDeviceFromBTIdentifier:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    v4 = sub_1000C0734(v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      v9 = (id)v5;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[SDActivityEncryptionManager sharedEncryptionManager](SDActivityEncryptionManager, "sharedEncryptionManager"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uniqueID"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cachedDecryptionKeyForDeviceIdentifier:", v7));

      if (v8)
      {
        objc_msgSend(v9, "setValidKey:", objc_msgSend(v8, "isValidKey"));
        objc_msgSend(v9, "setKeyCounter:", objc_msgSend(v8, "lastUsedCounter"));
      }

      v5 = (uint64_t)v9;
    }
  }
  else
  {
    v5 = 0;
  }
  v10 = (id)v5;
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100088778(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allPeerBTIdentifiers"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 32);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v6), "UUIDString"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "idsDeviceFromBTIdentifier:", v8));

        if (v9)
        {
          v10 = sub_1000C0734(v9);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          if (v11)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDActivityEncryptionManager sharedEncryptionManager](SDActivityEncryptionManager, "sharedEncryptionManager"));
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uniqueID"));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cachedDecryptionKeyForDeviceIdentifier:", v13));

            if (v14)
            {
              objc_msgSend(v11, "setValidKey:", objc_msgSend(v14, "isValidKey"));
              objc_msgSend(v11, "setKeyCounter:", objc_msgSend(v14, "lastUsedCounter"));
            }
            objc_msgSend(v15, "addObject:", v11);

          }
        }

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v4);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_100088A58()
{
  id *v0;

  if (qword_1007C6688 != -1)
    dispatch_once(&qword_1007C6688, &stru_100715F80);
  v0 = (id *)dlsym((void *)qword_1007C6690, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6680, *v0);
  off_1007B0F10 = (uint64_t (*)())sub_100088AD0;
  return (id)qword_1007C6680;
}

id sub_100088AD0()
{
  return (id)qword_1007C6680;
}

void sub_100088ADC(id a1)
{
  qword_1007C6690 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

void sub_100088B04(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100088B14(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_100088B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Advertising client arrived", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Advertising client went away", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088B78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Trying to grab power assertion while we already have one", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088BA4(_QWORD *a1, NSObject *a2)
{
  objc_class *v4;
  NSString *v5;
  void *v6;
  float v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  double v12;

  v4 = (objc_class *)objc_opt_class(*a1, a2);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = *(double *)(*a1 + 96);
  v9 = 138412546;
  v10 = v6;
  v11 = 2048;
  v12 = v7;
  sub_100088B14((void *)&_mh_execute_header, a2, v8, "%@ startGoodbyeTimer with time interval %.2f", (uint8_t *)&v9);

}

void sub_100088C68(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;

  v3 = (objc_class *)objc_opt_class(a1, a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v7 = 138412290;
  v8 = v5;
  sub_1000332D8((void *)&_mh_execute_header, a2, v6, "%@ invalidateGoodbyeTimer", (uint8_t *)&v7);

  sub_1000332E4();
}

void sub_100088CF0(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;

  v3 = (objc_class *)objc_opt_class(a1, a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v7 = 138412290;
  v8 = v5;
  sub_1000332D8((void *)&_mh_execute_header, a2, v6, "%@ goodbyeTimeoutFired", (uint8_t *)&v7);

  sub_1000332E4();
}

void sub_100088D78(id *a1, NSObject *a2)
{
  unsigned int v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;

  v3 = objc_msgSend(*a1, "length");
  v4[0] = 67109376;
  v4[1] = v3;
  v5 = 1024;
  v6 = 9;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Ignoring currentAdvertisementPayload because it is of incorrect size %d, should be %d", (uint8_t *)v4, 0xEu);
  sub_1000332E4();
}

void sub_100088E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Powered on", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088E38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Powered off", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088E64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Unknown", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088E90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Resetting", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100088EBC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1000332D8((void *)&_mh_execute_header, a3, (uint64_t)a3, "Did update state to %s", (uint8_t *)a2);
}

void sub_100088EF8(unint64_t a1, NSObject *a2, uint64_t a3)
{
  const char *v3;
  int v4;
  const char *v5;

  if (a1 > 3)
    v3 = "UnexpectedType";
  else
    v3 = off_100715F10[a1];
  v4 = 136315138;
  v5 = v3;
  sub_1000332D8((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStartAdvertisingOfType: %s", (uint8_t *)&v4);
  sub_10001949C();
}

void sub_100088F80(unint64_t a1, NSObject *a2, uint64_t a3)
{
  const char *v3;
  int v4;
  const char *v5;

  if (a1 > 3)
    v3 = "UnexpectedType";
  else
    v3 = off_100715F10[a1];
  v4 = 136315138;
  v5 = v3;
  sub_1000332D8((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStopAdvertisingOfType: %s", (uint8_t *)&v4);
  sub_10001949C();
}

void sub_100089008(unint64_t a1, uint64_t a2, NSObject *a3)
{
  const char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  if (a1 > 3)
    v3 = "UnexpectedType";
  else
    v3 = off_100715F10[a1];
  v4 = 136315394;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_100088B14((void *)&_mh_execute_header, a3, (uint64_t)a3, "IDSContinuity didStopAdvertisingOfType: %s withError: %@", (uint8_t *)&v4);
  sub_10001949C();
}

void sub_1000890A0(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Did fail to start advertising for %s (%@)", buf, 0x16u);

}

void sub_1000895AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000895C8(uint64_t a1)
{
  int v1;
  id WeakRetained;
  id v3;

  v1 = *(unsigned __int8 *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (v1)
    objc_msgSend(WeakRetained, "openCompletedItemsWithFilesApp");
  else
    objc_msgSend(WeakRetained, "saveCompletedItemsToiCloudDrive");

}

void sub_100089974(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD, _QWORD, _QWORD);
  int v6;
  uint64_t v7;

  v2 = airdrop_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished opening %@", (uint8_t *)&v6, 0xCu);
  }

  if (*(_BYTE *)(a1 + 48))
  {
    v5 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "completionHandler"));
    v5[2](v5, *(unsigned __int8 *)(a1 + 49), 0, 1);

  }
}

id sub_100089C94()
{
  id *v0;

  if (qword_1007C66A0 != -1)
    dispatch_once(&qword_1007C66A0, &stru_100715FF0);
  v0 = (id *)dlsym((void *)qword_1007C66A8, "BRUbiquitousDefaultContainerID");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6698, *v0);
  off_1007B0F18 = (uint64_t (*)())sub_100089D0C;
  return (id)qword_1007C6698;
}

id sub_100089D0C()
{
  return (id)qword_1007C6698;
}

void sub_100089D18(id a1)
{
  qword_1007C66A8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
}

void sub_100089D40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "No items to open with Files App", a5, a6, a7, a8, 0);
}

void sub_100089D74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Failed to process items to iCloud drive as it does not seem to be enabled", a5, a6, a7, a8, 0);
}

void sub_100089DA8(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transfer"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to save files to iCloud Drive for transfer %@ with error: %@", (uint8_t *)&v6, 0x16u);

}

uint64_t SDAutoUnlockProxyTriggerReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10008B0D0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "valueForKeyPath:", CFSTR("@unionOfObjects.uniqueIDOverride")));
  v4 = SFCompactStringFromCollection(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = 138412290;
  v7 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "nearbyDevicesChanged %@", (uint8_t *)&v6, 0xCu);

}

void sub_10008B2AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 24));
  objc_msgSend(WeakRetained, "airDropStatus:didChange:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));

}

void sub_10008B3AC(id a1)
{
  SDAutoUnlockSessionManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDAutoUnlockSessionManager);
  v2 = (void *)qword_1007C66B0;
  qword_1007C66B0 = (uint64_t)v1;

}

void sub_10008B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_10008B7D0(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "signedIntoPrimaryiCloudAccount");

  return v2;
}

id sub_10008B80C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "localDeviceController"));
  v3 = objc_msgSend(v2, "faceIDEnabled");

  return v3;
}

id sub_10008B858(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_msgSend(WeakRetained, "cachedDeviceWiFiState");

  return v2;
}

BOOL sub_10008B88C(id a1)
{
  void *v1;
  unsigned __int8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "bluetoothEnabled");

  return v2;
}

BOOL sub_10008B8C8(id a1)
{
  void *v1;
  void *v2;
  unsigned __int8 v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activeDevice"));
  v3 = objc_msgSend(v2, "isNearby");

  return v3;
}

id sub_10008B988(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_start");
}

void sub_10008BD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008BD28(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleBioLockout");

}

void sub_10008BF34(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  int v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = objc_msgSend(v2, "deviceKeyBagUnlocked");

  v5 = auto_unlock_log(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device unlocked on start up after retry", (uint8_t *)&v10, 2u);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(a1 + 32), "setLastUnlockDate:", v8);

    v6 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(a1 + 32), "setLockStateChangedDate:", v6);
  }
  else if (v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v10 = 134217984;
    v11 = objc_msgSend(v9, "deviceKeyBagState");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "### Device not unlocked on start up after retry (state: %ld)", (uint8_t *)&v10, 0xCu);

  }
}

void sub_10008C30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C330(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  uint8_t buf[16];

  v1 = auto_unlock_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Buddy setup completed. Checking whether behavior upsell is needed", buf, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockSessionManager sharedManager](SDAutoUnlockSessionManager, "sharedManager"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionManagerQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009CDFC;
  block[3] = &unk_1007146D8;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

void sub_10008C408(uint64_t a1, int token)
{
  id WeakRetained;
  uint64_t state64;

  state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "handleDisplayStateChanged:", state64);

  }
}

void sub_10008C4F4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Added SessionManager observer %@", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observerTable"));
  objc_msgSend(v5, "addObject:", *(_QWORD *)(a1 + 32));

}

void sub_10008C64C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removed SessionManager observer %@", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observerTable"));
  objc_msgSend(v5, "removeObject:", *(_QWORD *)(a1 + 32));

}

void sub_10008C7A4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerTable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_opt_respondsToSelector(v8, "session:didReceiveKeyDeviceLocked:");
        if ((v9 & 1) != 0)
        {
          v10 = auto_unlock_log(v9);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling key device locked %@", buf, 0xCu);
          }

          objc_msgSend(v8, "session:didReceiveKeyDeviceLocked:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v5);
  }

}

void sub_10008C9D0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerTable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_opt_respondsToSelector(v8, "session:didEnableWithDevice:");
        if ((v9 & 1) != 0)
        {
          v10 = auto_unlock_log(v9);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling enabled device %@", buf, 0xCu);
          }

          objc_msgSend(v8, "session:didEnableWithDevice:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v5);
  }

}

void sub_10008CC20(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerTable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_opt_respondsToSelector(v8, "session:didFailToEnableDevice:error:");
        if ((v9 & 1) != 0)
        {
          v10 = auto_unlock_log(v9);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "### Calling failed to enable %@", buf, 0xCu);
          }

          objc_msgSend(v8, "session:didFailToEnableDevice:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v5);
  }

}

void sub_10008CE50(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerTable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_opt_respondsToSelector(v8, "session:didBeginAttemptWithDevice:");
        if ((v9 & 1) != 0)
        {
          v10 = auto_unlock_log(v9);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling began %@", buf, 0xCu);
          }

          objc_msgSend(v8, "session:didBeginAttemptWithDevice:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v5);
  }

}

void sub_10008D090(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerTable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_opt_respondsToSelector(v8, "session:didCompleteUnlockWithDevice:");
        if ((v9 & 1) != 0)
        {
          v10 = auto_unlock_log(v9);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling completed %@", buf, 0xCu);
          }

          objc_msgSend(v8, "session:didCompleteUnlockWithDevice:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v5);
  }

}

void sub_10008D2E0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  void *v22;
  _BYTE v23[128];

  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observerTable"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  obj = v3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v9 = objc_opt_respondsToSelector(v8, "session:didFailUnlockWithResults:error:incrementedAttempt:");
        if ((v9 & 1) != 0)
        {
          v10 = auto_unlock_log(v9);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v22 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "### Calling failed %@", buf, 0xCu);
          }

          v12 = *(void **)(a1 + 32);
          v13 = *(_QWORD *)(a1 + 40);
          v14 = *(_QWORD *)(a1 + 48);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "incrementedCountID"));
          objc_msgSend(v8, "session:didFailUnlockWithResults:error:incrementedAttempt:", v12, v13, v14, v15 != 0);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v5);
  }

}

void sub_10008D4D4(id a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  v1 = auto_unlock_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Repair cloud pairing if necessary", v4, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
  objc_msgSend(v3, "triggerCloudPairRetryWithShortRetryDeviceIDs:", 0);

}

void sub_10008D840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSSet *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  NSMutableArray *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  int v28;
  const __CFString *v29;
  __int16 v30;
  void *v31;

  v2 = sub_1000C8E68();
  if ((v2 & 1) != 0)
  {
    v3 = auto_unlock_log(v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v28) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "### No eligible devices: Auto Unlock disabled due to profile", (uint8_t *)&v28, 2u);
    }

    v5 = *(_QWORD *)(a1 + 48);
    v6 = objc_opt_new(NSSet);
    (*(void (**)(uint64_t, NSSet *, _QWORD))(v5 + 16))(v5, v6, 0);
  }
  else
  {
    v6 = (NSSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoUnlockTransport"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet autoUnlockEligibleWatchesWithCloudPairing:](v6, "autoUnlockEligibleWatchesWithCloudPairing:", 0));
    v8 = objc_msgSend(v7, "mutableCopy");

    v10 = auto_unlock_log(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allObjects"));
      v28 = 138412290;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Devices %@", (uint8_t *)&v28, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 32), "eligibleDevicesFilterCompatibleDevices:", v8);
    objc_msgSend(*(id *)(a1 + 32), "setEligibleDevices:", v8);
    v13 = (__CFString *)v8;
    if ((objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("com.apple.preference.security.remoteservice")) & 1) != 0|| (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("com.apple.Touch-ID-Settings.extension")) & 1) != 0|| (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("autool")) & 1) != 0|| (v14 = v13, objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", CFSTR("com.apple.Preferences"))))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString allObjects](v13, "allObjects"));
      v16 = sub_1000C94D0(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v17));

      v19 = auto_unlock_log(v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v28 = 138412290;
        v29 = v14;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Devices with description %@", (uint8_t *)&v28, 0xCu);
      }

    }
    v21 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v22 = auto_unlock_log(v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
      if (objc_msgSend(v24, "deviceSupportsRanging"))
        v25 = CFSTR("YES");
      else
        v25 = CFSTR("NO");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "modelCode"));
      v28 = 138412546;
      v29 = v25;
      v30 = 2112;
      v31 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Ranging supported: %@ for model: %@", (uint8_t *)&v28, 0x16u);

    }
  }

}

id sub_10008DE28(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "createPairingLockSessionWithDevice:passcode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10008DEA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t buf[8];
  _BYTE v15[128];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cancel enabling all devices", buf, 2u);
  }

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockPairingSessions", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allKeys"));

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(a1 + 32), "cancelEnablingAutoUnlockForDeviceID:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v9));
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
    }
    while (v7);
  }

}

void sub_10008E088(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "uniqueID"));
  objc_msgSend(v1, "cancelEnablingAutoUnlockForDeviceID:", v2);

}

void sub_10008E4D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pairingIDForWatchID:", v3));

  v4 = *(void **)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
  v6 = objc_msgSend(v4, "disablePairingForDeviceID:pairingID:", v5, v9);

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v6, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
  objc_msgSend(v8, "updateApproveBluetoothIDs");

}

id sub_10008E818(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  void *v4;

  v2 = sub_1000C81E0();
  v3 = sub_1000C8330();
  if (v2 && *(_QWORD *)(a1 + 40) == 1)
  {
    v4 = *(void **)(a1 + 32);
    return _objc_msgSend(v4, "generateAttemptForType:");
  }
  if (v3 && *(_QWORD *)(a1 + 40) == 2)
  {
    v4 = *(void **)(a1 + 32);
    return _objc_msgSend(v4, "generateAttemptForType:");
  }
  return _objc_msgSend(*(id *)(a1 + 32), "attemptAutoUnlock");
}

void sub_10008EA6C(uint64_t a1)
{
  int v2;
  id v3;
  uint64_t v4;
  void *v5;
  __CFString *v6;
  __CFString *v7;
  NSMutableDictionary *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  NSErrorUserInfoKey v37;
  const __CFString *v38;
  uint8_t buf[4];
  void *v40;
  NSErrorUserInfoKey v41;
  const __CFString *v42;

  v2 = sub_1000C83EC();
  v3 = sub_1000C8498();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)v4;
  v6 = CFSTR("Test Mode");
  if (v4)
    v6 = (__CFString *)v4;
  v7 = v6;

  v8 = objc_opt_new(NSMutableDictionary);
  v9 = v2 ^ 1u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v10, SDAutoUnlockManagerMetricSuccessKey);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uniqueID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v11, SDAutoUnlockManagerMetricDeviceIDKey);

  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), SDAutoUnlockManagerMetricTimeKey);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v12, SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 64)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v13, SDAutoUnlockManagerMetricTimeSinceLastWakeKey);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 72)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v14, SDAutoUnlockManagerMetricLastSleepTypeKey);

  if ((v9 & 1) == 0)
  {
    v15 = SFAutoUnlockErrorDomain;
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", SFAutoUnlockErrorDomain, SDAutoUnlockManagerMetricErrorDomainKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", &off_10074B4C0, SDAutoUnlockManagerMetricErrorCodeKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v7, SDAutoUnlockManagerMetricErrorStringKey);
    v41 = NSLocalizedDescriptionKey;
    v42 = CFSTR("Test mode failure");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v15, 103, v16));

    objc_msgSend(*(id *)(a1 + 48), "setCachedMetrics:", v8);
    objc_msgSend(*(id *)(a1 + 48), "notifyObserversOfUnlockFailureWithResults:error:", v8, v17);
    goto LABEL_22;
  }
  v18 = sub_1000C8528();
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v17 = v19;
  if (v19)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "attemptExternalACMContext"));
      v21 = sub_10001F7E0(v17, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

      v24 = auto_unlock_log(v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Test Mode: Token: %@", buf, 0xCu);
      }

      if (v22)
      {
        objc_msgSend(*(id *)(a1 + 32), "setHintToken:", v22);
LABEL_21:

        objc_msgSend(*(id *)(a1 + 32), "setResults:", v8);
        objc_msgSend(*(id *)(a1 + 48), "notifyObserversOfUnlockCompletionWithDevice:", *(_QWORD *)(a1 + 32));
        goto LABEL_22;
      }
      v36 = auto_unlock_log(v26);
      v34 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v35 = "Test Mode: Unable to create hint token";
        goto LABEL_19;
      }
    }
    else
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dataUsingEncoding:", 4));
      v32 = MKBUnlockDevice(v22, 0);
      if ((_DWORD)v32)
        goto LABEL_21;
      v33 = auto_unlock_log(v32);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v35 = "Test Mode: Unlocked keybag";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 2u);
      }
    }

    goto LABEL_21;
  }
  v27 = auto_unlock_log(0);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    sub_10009CF40();

  v29 = SFAutoUnlockErrorDomain;
  v37 = NSLocalizedDescriptionKey;
  v38 = CFSTR("Missing passcode");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v29, 182, v30));

  objc_msgSend(*(id *)(a1 + 48), "notifyObserversOfUnlockFailureWithResults:error:", v8, v31);
LABEL_22:

}

void sub_10009017C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const __CFString *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  int v11;
  const __CFString *v12;
  __int16 v13;
  uint64_t v14;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attemptActivatedHandler"));

  if (v4)
  {
    v6 = auto_unlock_log(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = CFSTR("NO");
      v9 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)a2)
        v8 = CFSTR("YES");
      v11 = 138412546;
      v12 = v8;
      v13 = 2112;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempt started %@, error %@", (uint8_t *)&v11, 0x16u);
    }

    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attemptActivatedHandler"));
    v10[2](v10, a2, *(_QWORD *)(a1 + 40));

  }
}

void sub_100090580(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  NSErrorUserInfoKey v42;
  const __CFString *v43;
  _BYTE v44[128];

  if (objc_msgSend(*(id *)(a1 + 32), "doNotPostUnlockConfirmation"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setSuppressAlert:", *(_BYTE *)(a1 + 40) == 0);
    v2 = objc_msgSend(*(id *)(a1 + 32), "suppressAlert");
    v3 = *(void **)(a1 + 32);
    if (v2)
    {
      objc_msgSend(v3, "setPeriocularStatus:", 2);
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));

      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v38;
LABEL_5:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v38 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v9);
          if (objc_msgSend(v10, "doNotPostUnlockConfirmation"))
          {
            v11 = objc_msgSend(v10, "aksSuccess");
            if ((_DWORD)v11)
            {
              v28 = auto_unlock_log(v11);
              v29 = objc_claimAutoreleasedReturnValue(v28);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Sending Unlock Confirmation, Suppress Notification", buf, 2u);
              }

              objc_msgSend(v10, "completeAttemptPostNotification:", 0);
              goto LABEL_31;
            }
          }
          if ((objc_msgSend(v10, "doNotPostUnlockConfirmation") & 1) != 0)
            break;
          if (v7 == (id)++v9)
          {
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
            if (v7)
              goto LABEL_5;
            goto LABEL_31;
          }
        }
        v13 = v10;

        if (!v13)
          goto LABEL_33;
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "attemptResults"));
        v20 = objc_msgSend(v5, "mutableCopy");
        objc_msgSend(*(id *)(a1 + 32), "setCachedMetrics:", v20);

        v21 = SFUnlockErrorDomian;
        v42 = NSLocalizedDescriptionKey;
        v43 = CFSTR("Attempt Cancelled due to Periocular Success");
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v21, 118, v22));

        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v23, "code")));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedMetrics"));
        objc_msgSend(v25, "setObject:forKeyedSubscript:", v24, SDAutoUnlockManagerMetricErrorCodeKey);

        v26 = *(void **)(a1 + 32);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "cachedMetrics"));
        objc_msgSend(v26, "notifyObserversOfUnlockFailureWithResults:error:", v27, v23);

      }
      else
      {
LABEL_31:
        v13 = 0;
      }

LABEL_33:
      objc_msgSend(*(id *)(a1 + 32), "cancelAttemptsForDeviceUnlocked");
    }
    else
    {
      objc_msgSend(v3, "setDoNotPostUnlockConfirmation:", 0);
      objc_msgSend(*(id *)(a1 + 32), "setPeriocularStatus:", 1);
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions", 0));
      v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allValues"));

      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v33;
        while (2)
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v33 != v16)
              objc_enumerationMutation(v13);
            v18 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v18, "doNotPostUnlockConfirmation"))
            {
              v19 = objc_msgSend(v18, "aksSuccess");
              if ((_DWORD)v19)
              {
                v30 = auto_unlock_log(v19);
                v31 = objc_claimAutoreleasedReturnValue(v30);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Sending Unlock Confirmation, Show Notification", buf, 2u);
                }

                objc_msgSend(v18, "completeAttemptPostNotification:", 1);
                goto LABEL_34;
              }
            }
            if (objc_msgSend(v18, "doNotPostUnlockConfirmation"))
            {
              objc_msgSend(v18, "setDoNotPostUnlockConfirmation:", objc_msgSend(*(id *)(a1 + 32), "doNotPostUnlockConfirmation"));
              goto LABEL_34;
            }
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
          if (v15)
            continue;
          break;
        }
      }
    }
LABEL_34:

  }
}

id sub_100090D60(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id obj;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_10009CF6C();

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions"));
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allValues"));

    obj = v7;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v54;
      v51 = SDAutoUnlockManagerMetricSuccessKey;
      v50 = SDAutoUnlockManagerMetricAttemptTypeKey;
      v49 = SFAutoUnlockErrorDomain;
      v48 = SDAutoUnlockManagerMetricErrorDomainKey;
      v47 = SDAutoUnlockManagerMetricErrorCodeKey;
      v46 = SDAutoUnlockManagerMetricErrorStringKey;
      v45 = SDAutoUnlockManagerMetricUsingToolKey;
      v44 = SDAutoUnlockManagerMetricCancelTimeKey;
      v43 = SDAutoUnlockManagerMetricCancelReasonKey;
      v42 = SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey;
      v41 = SDAutoUnlockManagerMetricTimeSinceLastWakeKey;
      v40 = SDAutoUnlockManagerMetricLastSleepTypeKey;
      v38 = SDAutoUnlockManagerMetricPeriocularStatus;
      v39 = SDAutoUnlockManagerMetricPrewarmKey;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v54 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v12, "cancel");
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "canceledAuthLockSessions"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sessionID"));
          v15 = objc_msgSend(v13, "containsObject:", v14);

          if ((v15 & 1) == 0)
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "canceledAuthLockSessions"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sessionID"));
            objc_msgSend(v16, "addObject:", v17);

            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attemptDevice"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "uniqueID"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "deviceID"));
            v21 = objc_msgSend(v19, "isEqualToString:", v20);

            if (v21)
            {
              v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attemptStart"));
              objc_msgSend(v22, "timeIntervalSinceDate:", v23);
              v25 = v24;

              v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "attemptResults"));
              v27 = objc_msgSend(v26, "mutableCopy");

              objc_msgSend(v27, "setObject:forKeyedSubscript:", &off_10074B4D8, v51);
              v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "attemptType")));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v28, v50);

              objc_msgSend(v27, "setObject:forKeyedSubscript:", v49, v48);
              objc_msgSend(v27, "setObject:forKeyedSubscript:", &off_10074B4F0, v47);
              objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("Attempt Cancelled -- After finding Watch"), v46);
              v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, v45);

              v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v25));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v30, v44);

              v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40)));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v31, v43);

              v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "connectedBluetoothDevices")));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v32, v42);

              v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "timeSinceLastMachineWake")));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v33, v41);

              v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "lastSleepType")));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v34, v40);

              v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v12, "attemptPrewarmed")));
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v35, v39);

              if (objc_msgSend(*(id *)(a1 + 32), "periocularStatus"))
              {
                v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "periocularStatus")));
                objc_msgSend(v27, "setObject:forKeyedSubscript:", v36, v38);

              }
              objc_msgSend(*(id *)(a1 + 32), "setCachedMetrics:", v27);
              if ((objc_msgSend(*(id *)(a1 + 32), "isBeingUsedForSiri") & 1) == 0)
                sub_1000C6224(v27);
              objc_msgSend(*(id *)(a1 + 32), "setCachedMetrics:", 0);

            }
          }
        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
      }
      while (v9);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "invalidateAttempt");
  return objc_msgSend(*(id *)(a1 + 32), "setScanErrorString:", 0);
}

void sub_1000914F4(uint64_t a1)
{
  uint64_t v1;
  _UNKNOWN **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;

  v1 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(v1 - 1) >= 2)
  {
    if (v1)
      return;
    v11 = auto_unlock_log(a1);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_10009CFA4();

    v8 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    -[NSObject setBool:forKey:](v8, "setBool:forKey:", 1, CFSTR("AutoUnlockDoNotCollectTriggerMetrics"));
  }
  else
  {
    if (v1 == 2)
      v3 = &off_10074B508;
    else
      v3 = &off_10074B4D8;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedMetrics"));
    v5 = SDAutoUnlockManagerMetricUnintentionalAttemptKey;
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, SDAutoUnlockManagerMetricUnintentionalAttemptKey);

    v7 = auto_unlock_log(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedMetrics"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v5));
      v13 = 138412290;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Log Unintentional AutoUnlock Attempt: %@", (uint8_t *)&v13, 0xCu);

    }
  }

}

void sub_10009190C(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = auto_unlock_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_10009CFD0();

}

void sub_100091E8C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;

  v3 = a2;
  v4 = auto_unlock_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_10009D030(a1, (uint64_t)v3, v5);

}

void sub_100091FA8(uint64_t a1)
{
  SDUnlockDisable *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  void *v13;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = -[SDUnlockDisable initWithData:]([SDUnlockDisable alloc], "initWithData:", *(_QWORD *)(a1 + 40));
    v3 = auto_unlock_log(v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = (void *)objc_claimAutoreleasedReturnValue(-[SDUnlockDisable pairingID](v2, "pairingID"));
      v10 = 138412546;
      v11 = v5;
      v12 = 2112;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received SDUnlockDisable (device ID: %@, pairingID: %@)", (uint8_t *)&v10, 0x16u);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
    objc_msgSend(v7, "disablePairingWithKeyDevice:", *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 48), "initializeRemotePeer");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
    objc_msgSend(v8, "updateDynamicStoreEnabled");

  }
  else
  {
    v9 = auto_unlock_log(a1);
    v2 = (SDUnlockDisable *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, OS_LOG_TYPE_DEFAULT, "Received SDUnlockDisable but device ID is NULL", (uint8_t *)&v10, 2u);
    }
  }

}

void sub_100094710(id *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char isKindOfClass;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  NSObject *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  int v101;
  void *v102;
  __int16 v103;
  void *v104;
  NSErrorUserInfoKey v105;
  const __CFString *v106;

  v3 = a1[4];
  v4 = objc_opt_class(SDAutoUnlockPairingLockSession, a2);
  isKindOfClass = objc_opt_isKindOfClass(v3, v4);
  v7 = a1[4];
  if ((isKindOfClass & 1) != 0)
  {
    v8 = v7;
    if ((objc_msgSend(v8, "canceled") & 1) != 0)
    {
      v9 = SFAutoUnlockErrorDomain;
      v105 = NSLocalizedDescriptionKey;
      v106 = CFSTR("Pairing canceled");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v106, &v105, 1));
      v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 118, v10));

    }
    else
    {
      v11 = a1[5];
    }
    if (v11)
    {
      v26 = objc_msgSend(v8, "placeholder");
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
      v28 = v27;
      if (v26)
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "placeholderDevice"));
      }
      else
      {
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
        v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "idsDeviceForUniqueID:", v45));

        v47 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "autoUnlockDeviceForIDSDevice:cloudPaired:cached:", v46, 0, 0));

        v28 = (void *)v46;
      }

      v48 = a1[6];
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceID"));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sessionID"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "UUIDString"));
      objc_msgSend(v48, "disablePairingForDeviceID:pairingID:", v49, v51);

      objc_msgSend(a1[6], "notifyObserverOfFailedToEnableDevice:error:", v29, v11);
    }
    else
    {
      objc_msgSend(a1[6], "initializeRemotePeer");
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "remotePeer"));
      objc_msgSend(v33, "handlePairedSuccessfully");

      v34 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "autoUnlockDeviceForDeviceID:", v35));

      objc_msgSend(a1[6], "notifyObserverOfEnabledDevice:", v29);
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "suggestionManager"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "uniqueID"));
      objc_msgSend(v36, "setFeatureSuggestedForDeviceID:", v37);

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "suggestionManager"));
      objc_msgSend(v38, "setRetriedSetup");

      v39 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
      objc_msgSend(v39, "updateDynamicStoreEnabled");

      sub_1000CA254(CFSTR("com.apple.watch.auto-unlock.enabled"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      objc_msgSend(v40, "setBool:forKey:", 1, CFSTR("AutoUnlockAlreadyEnabledBefore"));

      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v42 = SFDeviceProductVersion();
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      objc_msgSend(v43, "floatValue");
      objc_msgSend(v41, "setFloat:forKey:", CFSTR("AutoUnlockLastSeenVersion"));

      v44 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockNotificationsManager sharedManager](SDAutoUnlockNotificationsManager, "sharedManager"));
      objc_msgSend(v44, "clearPhoneAutoUnlockUpsellNotification:", 1);

    }
    objc_msgSend(a1[4], "invalidate");
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "lockPairingSessions"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
    objc_msgSend(v52, "removeObjectForKey:", v53);

    v54 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](SDAutoUnlockTransport, "sharedTransport"));
    objc_msgSend(v54, "updateApproveBluetoothIDs");

LABEL_20:
LABEL_30:

    return;
  }
  v12 = objc_opt_class(SDAutoUnlockPairingKeySession, v6);
  if ((objc_opt_isKindOfClass(v7, v12) & 1) != 0)
  {
    if (!a1[5])
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "canceledPairingKeySessions"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "sessionID"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
      v17 = objc_msgSend(v14, "containsObject:", v16);

      if (v17)
      {
        v19 = auto_unlock_log(v18);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "sessionID"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "UUIDString"));
          v101 = 138412546;
          v102 = v21;
          v103 = 2112;
          v104 = v23;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Pairing session canceled (device ID: %@, session ID: %@)", (uint8_t *)&v101, 0x16u);

        }
        v24 = a1[6];
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
        objc_msgSend(v24, "disableKeyPairingForDeviceID:", v25);

      }
      else
      {
        objc_msgSend(a1[6], "updateAdvertising");
      }
    }
    objc_msgSend(a1[4], "invalidate");
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "canceledPairingKeySessions"));
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "sessionID"));
    objc_msgSend(v64, "removeObject:", v65);

    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "keyPairingSessions"));
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
    objc_msgSend(v8, "removeObjectForKey:", v66);

    goto LABEL_30;
  }
  v30 = a1[4];
  v31 = objc_opt_class(SDAutoUnlockLockSession, v13);
  if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
  {
    _objc_msgSend(a1[6], "handleLockSessionCompleted:error:", a1[4], a1[5]);
    return;
  }
  v55 = a1[4];
  v56 = objc_opt_class(SDAutoUnlockKeySession, v32);
  v57 = objc_opt_isKindOfClass(v55, v56);
  v59 = a1[4];
  if ((v57 & 1) != 0)
  {
    v8 = v59;
    v60 = a1[5];
    if (v60)
    {
      if (objc_msgSend(v60, "code") == (id)213)
        objc_msgSend(a1[6], "beginKeyRegistrationIfNecessary");
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockNotificationsManager sharedManager](SDAutoUnlockNotificationsManager, "sharedManager"));
      objc_msgSend(v61, "removeAutoUnlockNotification");
    }
    else
    {
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "keysWithAKSTokens"));
      v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bleDevice"));
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "identifier"));
      objc_msgSend(v61, "addObject:", v78);

    }
    v79 = auto_unlock_log(objc_msgSend(a1[6], "setNeedsStrictMotionCheck:", objc_msgSend(v8, "needsStrictMotionCheck")));
    v80 = objc_claimAutoreleasedReturnValue(v79);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
    {
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "sessionID"));
      v101 = 138412290;
      v102 = v81;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Removing key session %@", (uint8_t *)&v101, 0xCu);

    }
    objc_msgSend(a1[4], "invalidate");
    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "keyAuthSessions"));
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "sessionID"));
    v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "UUIDString"));
    objc_msgSend(v82, "removeObjectForKey:", v84);

    v86 = auto_unlock_log(v85);
    v11 = objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "keyAuthSessions"));
      v101 = 138412290;
      v102 = v87;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removed key session %@", (uint8_t *)&v101, 0xCu);

    }
    goto LABEL_20;
  }
  v62 = objc_opt_class(SDAutoUnlockProxySession, v58);
  if ((objc_opt_isKindOfClass(v59, v62) & 1) != 0)
  {
    _objc_msgSend(a1[6], "handleProxySessionCompleted:error:", a1[4], a1[5]);
    return;
  }
  v67 = a1[4];
  v68 = objc_opt_class(SDAutoUnlockRegistrationLockSession, v63);
  v69 = objc_opt_isKindOfClass(v67, v68);
  if ((v69 & 1) != 0)
  {
    if (a1[5])
    {
      v71 = auto_unlock_log(v69);
      v72 = objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
        v101 = 138412290;
        v102 = v73;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Received error while registering key (%@), removing from list of registered devices.", (uint8_t *)&v101, 0xCu);

      }
      v74 = objc_msgSend(a1[5], "code");
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "remotePeer"));
      v76 = v75;
      if (v74 == (id)102)
      {
        objc_msgSend(v75, "handleRegistrationFailedKeyLocked");
LABEL_52:

        v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "lockRegistrationSessionsByDeviceID"));
        v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
        objc_msgSend(v97, "setObject:forKeyedSubscript:", 0, v98);

        objc_msgSend(a1[4], "invalidate");
        return;
      }
      v96 = 0;
    }
    else
    {
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "remotePeer"));
      v76 = v75;
      v96 = 1;
    }
    objc_msgSend(v75, "handleRegistrationCompletedSuccessfully:", v96);
    goto LABEL_52;
  }
  v88 = a1[4];
  v89 = objc_opt_class(SDAutoUnlockRegistrationKeySession, v70);
  if ((objc_opt_isKindOfClass(v88, v89) & 1) != 0)
  {
    v90 = a1[4];
    v8 = v90;
    if (a1[5])
    {
      v91 = objc_msgSend(v90, "isLocallyGenerated");
      if ((_DWORD)v91)
      {
        v92 = auto_unlock_log(v91);
        v93 = objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
          sub_10009D1D8();

        v94 = a1[6];
        v95 = 1;
        goto LABEL_55;
      }
      if (a1[5])
      {
LABEL_56:
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "keyRegistrationSessionsByDeviceID"));
        v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "deviceID"));
        objc_msgSend(v99, "setObject:forKeyedSubscript:", 0, v100);

        objc_msgSend(a1[4], "invalidate");
        goto LABEL_30;
      }
    }
    v94 = a1[6];
    v95 = 0;
LABEL_55:
    objc_msgSend(v94, "setNeedsArming:", v95);
    goto LABEL_56;
  }
}

void sub_1000965C8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
  objc_msgSend(v2, "updateLocalLTK");

  objc_msgSend(*(id *)(a1 + 32), "setIdsMacCountCache:", -1);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
  objc_msgSend(v3, "updateDynamicStoreEnabled");

}

void sub_1000966CC(uint64_t a1)
{
  NSDate *v2;
  void *v3;
  unsigned int v4;

  v2 = objc_opt_new(NSDate);
  objc_msgSend(*(id *)(a1 + 32), "setNearbyDeviceChangedDate:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activeDevice"));
  v4 = objc_msgSend(v3, "isConnected");

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "registerRemotePeerIfNecessary");
}

id sub_100096828(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "createPairingKeySessionWithIdentifier:deviceID:requestData:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_10009691C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "cancelParallelRegistrationSessionsForDeviceID:newSessionID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "createRegistrationKeySessionWithIdentifier:deviceID:requestData:locallyGenerated:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), 0);
}

id sub_100096A34(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "cancelParallelRegistrationSessionsForDeviceID:newSessionID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remotePeer"));
  objc_msgSend(v2, "handleRemoteRegistrationRequested");

  return objc_msgSend(*(id *)(a1 + 32), "createRegistrationLockSessionWithDeviceID:sessionID:requestData:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_100096CE4(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remotePeer"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceID"));
  v6 = *(_QWORD *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 40);
  v7 = objc_msgSend(v4, "isEqualToString:", v6);

  if (v7)
  {
    _objc_msgSend(*v2, "handleRelockMessage");
  }
  else
  {
    v9 = auto_unlock_log(v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10009D3A0(v5, v2, v10);

  }
}

void sub_100096D90(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "payload"));
  objc_msgSend(v1, "createPairingKeySessionWithIdentifier:deviceID:requestData:", v2, v3, v4);

}

void sub_100097218(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 152));
  _Unwind_Resume(a1);
}

void sub_1000972A8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id v5;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bleDevice"));

  v5 = objc_msgSend(v4, "copy");
  objc_msgSend(WeakRetained, "handleFoundPeer:", v5);

}

void sub_100097318(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id v5;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bleDevice"));

  v5 = objc_msgSend(v4, "copy");
  objc_msgSend(WeakRetained, "handleFoundPeer:", v5);

}

void sub_100097388(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = auto_unlock_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scanner invalidated", v3, 2u);
  }

}

void sub_1000973EC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  id v5;
  int v6;
  id v7;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = 138412290;
    v7 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SFBLEScanner timer fired %@", (uint8_t *)&v6, 0xCu);

  }
  v5 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v5, "handleBLEScanTimerFired");

}

void sub_1000974B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  double v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  double v14;

  v3 = a2;
  if (!v3)
  {
    v9 = sub_1000CE9F0(CFSTR("AUScanTimeout"));
    v8 = v9;
    if (v9)
    {
      v9 = -[NSObject integerValue](v9, "integerValue");
      v10 = (double)(uint64_t)v9;
    }
    else
    {
      v10 = 5.0;
    }
    v11 = auto_unlock_log(v9);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 134217984;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Scanner started with timeout %.2f seconds", (uint8_t *)&v13, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "restartScanTimer:", sub_10019AAC0(v10));
    goto LABEL_14;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scanner"));

  v6 = auto_unlock_log(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (!v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Scanner invalidated before activate", (uint8_t *)&v13, 2u);
    }
LABEL_14:

    goto LABEL_15;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_10009D44C();

  objc_msgSend(*(id *)(a1 + 32), "invalidateAttempt");
  objc_msgSend(*(id *)(a1 + 32), "setScanErrorString:", 0);
LABEL_15:

}

id sub_100097B6C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scan timer fired", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "updateStringForProxySession");
  objc_msgSend(*(id *)(a1 + 32), "cancelAllLockSessionsForScanTimeout");
  objc_msgSend(*(id *)(a1 + 32), "handleScanTimerFired");
  objc_msgSend(*(id *)(a1 + 32), "invalidateAttempt");
  return objc_msgSend(*(id *)(a1 + 32), "setScanErrorString:", 0);
}

void sub_10009876C(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  SDAutoUnlockDecryptionFailed *v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  id v35;
  __int16 v36;
  void *v37;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "lockAuthSessions"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "identifier"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (objc_msgSend(a1[6], "messageType") == 309)
  {
    v7 = [SDAutoUnlockDecryptionFailed alloc];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "payload"));
    v9 = -[SDAutoUnlockDecryptionFailed initWithData:](v7, "initWithData:", v8);

    v10 = -[NSObject errorCode](v9, "errorCode");
    if (v6)
    {
      v11 = v10;
      v12 = -[NSObject handleDecryptionFailure:](v6, "handleDecryptionFailure:", v10);
      if (v11 == 191)
      {
        v13 = auto_unlock_log(v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_10009D514();

        v15 = objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
        v16 = objc_claimAutoreleasedReturnValue(-[NSObject deviceID](v6, "deviceID"));
        -[NSObject addDeviceIDMissingSessionKey:](v15, "addDeviceIDMissingSessionKey:", v16);
LABEL_7:

LABEL_22:
      }
    }
  }
  else
  {
    v17 = objc_msgSend(v3, "hasSessionID");
    if ((_DWORD)v17)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionID"));
      v19 = objc_msgSend(v18, "length");

      if (v19 == (id)16)
      {
        v20 = objc_alloc((Class)NSUUID);
        v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionID")));
        v9 = objc_msgSend(v20, "initWithUUIDBytes:", objc_msgSend(v21, "bytes"));

        v23 = auto_unlock_log(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject UUIDString](v9, "UUIDString"));
          v34 = 138412546;
          v35 = v3;
          v36 = 2112;
          v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received wrapper %@, session ID %@", (uint8_t *)&v34, 0x16u);

        }
        if (!v9)
        {
          v32 = auto_unlock_log(v26);
          v15 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            sub_10009D540();
          goto LABEL_22;
        }
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "keyAuthSessions"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject UUIDString](v9, "UUIDString"));
        v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", v28));

        if (v15)
        {
          v30 = v15;
        }
        else
        {
          if (!v6)
          {
            v33 = auto_unlock_log(v29);
            v16 = objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
              sub_10009D56C();
            goto LABEL_7;
          }
          v30 = v6;
        }
        -[NSObject handleMessageWithWrapper:](v30, "handleMessageWithWrapper:", v3);
        goto LABEL_22;
      }
    }
    v31 = auto_unlock_log(v17);
    v9 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10009D5CC(v3, v9);
  }

}

void sub_100098AA0(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = auto_unlock_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_10009D688();

}

id sub_100098C18(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_keyBagLockStateChange:", *(_QWORD *)(a1 + 40));
}

void sub_100099148(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;

  if (*(_BYTE *)(a1 + 32))
    v2 = CFSTR("UNLOCK_PHONE_UPGRADE_BODY_SIRI_ENABLED");
  else
    v2 = CFSTR("UNLOCK_PHONE_UPGRADE_BODY");
  v3 = SFLocalizedStringForKey(v2, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = auto_unlock_log(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Posting notification with text %@", (uint8_t *)&v8, 0xCu);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockNotificationsManager sharedManager](SDAutoUnlockNotificationsManager, "sharedManager"));
  objc_msgSend(v7, "showPhoneAutoUnlockNotificationWithBodyText:isUpsell:", v4, 0);

}

void sub_100099AB0(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getUpsellNotificationBodyTextForEvent:", *(_QWORD *)(a1 + 40)));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockNotificationsManager sharedManager](SDAutoUnlockNotificationsManager, "sharedManager"));
  objc_msgSend(v1, "showPhoneAutoUnlockNotificationWithBodyText:isUpsell:", v2, 1);

}

id sub_10009A134(uint64_t a1)
{
  NSDate *v2;

  v2 = objc_opt_new(NSDate);
  objc_msgSend(*(id *)(a1 + 32), "setPipeConnectionChangedDate:", v2);

  return objc_msgSend(*(id *)(a1 + 32), "updateAdvertising");
}

void sub_10009A660(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  unsigned int v5;
  BOOL v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = objc_msgSend(v2, "pairedWatchLockState");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remotePeer"));
  v5 = objc_msgSend(v4, "isKeyBagLocked");

  if (v5)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "registerRemotePeerIfNecessary");
}

void sub_10009A74C(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions", 0));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allValues"));

  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "tearDownAWDLIfNecessary");
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_10009ABB4(uint64_t a1)
{
  NSObject *v2;
  intptr_t v3;
  NSObject *v4;
  id v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  unsigned int v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "magnetLinkTimer"));
  v3 = dispatch_source_testcancel(v2);

  if (!v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "magnetLinkTimer"));
    dispatch_source_cancel(v4);

  }
  objc_msgSend(*(id *)(a1 + 32), "setMagnetLinkTimer:", 0);
  v5 = objc_msgSend(*(id *)(a1 + 32), "deviceCurrentlyUnlockedByWatch");
  v6 = (int)v5;
  v7 = auto_unlock_log(v5);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "### Requesting Relock Due To Magnet Link Disconnect", (uint8_t *)&v14, 2u);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localDeviceController"));
    objc_msgSend(v10, "lockDevice");

    objc_msgSend(*(id *)(a1 + 32), "setLastLockedByRelock:", 1);
    objc_msgSend(*(id *)(a1 + 32), "cancelAutoUnlock");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockNotificationsManager sharedManager](SDAutoUnlockNotificationsManager, "sharedManager"));
    objc_msgSend(v11, "showPhoneAutoRelockNotification");

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedMetrics"));
    -[NSObject setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, SDAutoUnlockManagerMetricAutoRelockKey);
  }
  else if (v9)
  {
    v12 = objc_msgSend(*(id *)(a1 + 32), "deviceCurrentlyUnlockedByWatch");
    v13 = CFSTR("NO");
    if (v12)
      v13 = CFSTR("YES");
    v14 = 138412290;
    v15 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not Requesting Relock, deviceCurrentlyUnlockedByWatch: %@", (uint8_t *)&v14, 0xCu);
  }

}

id sub_10009BB24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dumpState");
}

id sub_10009CDFC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "upsellBehaviorChangedAfterUpgradeIfNecessary");
}

void sub_10009CE04(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_10009CE18(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "modelIdentifier"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Unsupported hardware model identifier:%@", a1, 0xCu);

}

void sub_10009CE8C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  void *v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "modelIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "productVersion"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Unsupported hardware/software model identifier:%@, version:%@", (uint8_t *)&v6, 0x16u);

  sub_100031218();
}

void sub_10009CF40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Test Mode: Passcode missing for test mode", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009CF6C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Cancelling", v1, 2u);
  sub_1000161DC();
}

void sub_10009CFA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Do Not Post Alert Again", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009CFD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "### Unable to send relock request: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10009D030(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_100050D98((void *)&_mh_execute_header, a3, (uint64_t)a3, "### Error sending disable message (device id: %@, error: %@)", (uint8_t *)&v4);
  sub_10001949C();
}

void sub_10009D0AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Missing IDS device ID for Mac requesting pairing", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009D0D8(int a1, void *a2, NSObject *a3)
{
  int v4;
  void *v5;
  _DWORD v6[2];
  __int16 v7;
  void *v8;

  v4 = a1 / 60;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lockStateChangedDate"));
  v6[0] = 67109378;
  v6[1] = v4;
  v7 = 2112;
  v8 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Phone unused within the last %d min. Last lock/unlock date: %@. Telling Watch to perform motion check", (uint8_t *)v6, 0x12u);

  sub_100031218();
}

void sub_10009D180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Missing IDS device ID for key registration", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009D1AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Missing IDS device ID for lock registration", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009D1D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Local key registration session failed, setting needsArming = YES", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009D204(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "attemptType");
  sub_10009CE04((void *)&_mh_execute_header, v1, v2, "### Missing authorization token: %d", v3, v4, v5, v6, 0);
  sub_10001949C();
}

void sub_10009D278(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "attemptType");
  sub_10009CE04((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0);
  sub_10001949C();
}

void sub_10009D2EC(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  uint8_t v7[12];
  __int16 v8;
  void *v9;
  __int16 v10;
  uint64_t v11;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sessionID"));
  sub_100029230();
  v8 = 2112;
  v9 = a1;
  v10 = 2112;
  v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Incoming message missing info (session = %@, wrapper = %@, data = %@)", v7, 0x20u);

}

void sub_10009D3A0(uint64_t *a1, id *a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v4 = *a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "remotePeer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "deviceID"));
  v8 = 138412546;
  v9 = v4;
  v10 = 2112;
  v11 = v6;
  sub_100050D98((void *)&_mh_execute_header, a3, v7, "Relock message if from %@ but current remote peer is %@", (uint8_t *)&v8);

  sub_100031218();
}

void sub_10009D44C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Scanner error: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10009D4AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to decrypt message (error code: %ld)", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_10009D514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Watch is missing session ID", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009D540()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create session ID", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10009D56C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "No session for session ID: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10009D5CC(void *a1, NSObject *a2)
{
  const __CFString *v4;
  void *v5;
  uint64_t v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  id v10;

  if (objc_msgSend(a1, "hasSessionID"))
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sessionID"));
  v7 = 138412546;
  v8 = v4;
  v9 = 2048;
  v10 = objc_msgSend(v5, "length");
  sub_100050D98((void *)&_mh_execute_header, a2, v6, "Missing session ID (has session ID %@, length %ld)", (uint8_t *)&v7);

  sub_100031218();
}

void sub_10009D688()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Completed sending decryption failed message (error: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10009D6E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Generating state dump", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

id sub_10009DBE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_10009DCC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

uint64_t sub_10009E32C(uint64_t result)
{
  uint64_t v1;
  const char *v2;
  const char *v3;

  v1 = result;
  if (dword_1007B0F80 <= 40)
  {
    if (dword_1007B0F80 != -1 || (result = _LogCategory_Initialize(&dword_1007B0F80, 40), (_DWORD)result))
    {
      v2 = "yes";
      if (*(_BYTE *)(*(_QWORD *)(v1 + 32) + 264))
        v3 = "yes";
      else
        v3 = "no";
      if (!*(_BYTE *)(v1 + 40))
        v2 = "no";
      result = LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent setPreventNotifications:]_block_invoke", 40, "Prevent notifications: %s -> %s\n", v3, v2);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 32) + 264) = *(_BYTE *)(v1 + 40);
  return result;
}

_QWORD *sub_10009F360(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[26];
  if (v3)
  {
    if (dword_1007B0F80 <= 40)
    {
      if (dword_1007B0F80 != -1)
      {
LABEL_4:
        v4 = objc_msgSend(v3, "screenOn");
        v5 = "off";
        if (v4)
          v5 = "on";
        LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _screenStateChanged:]_block_invoke", 40, "Screen state changed to %s\n", v5);
        result = *(_QWORD **)(a1 + 32);
        goto LABEL_8;
      }
      v6 = _LogCategory_Initialize(&dword_1007B0F80, 40);
      result = *(_QWORD **)(a1 + 32);
      if (v6)
      {
        v3 = (void *)result[26];
        goto LABEL_4;
      }
    }
LABEL_8:
    objc_msgSend(result, "_update");
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 208), "screenOn");
    if ((result & 1) == 0)
      return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "tvAutoFillRemoveAll");
  }
  return result;
}

id sub_10009F49C(uint64_t a1)
{
  id result;
  unsigned int v3;
  const char *v4;
  void *v5;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 208);
  if (result)
  {
    v3 = objc_msgSend(result, "deviceUIUnlocked");
    if (dword_1007B0F80 <= 40
      && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 40)))
    {
      v4 = "locked";
      if (v3)
        v4 = "unlocked";
      LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _uiLockStatusChanged:]_block_invoke", 40, "UI lock status changed to %s\n", v4);
    }
    v5 = *(void **)(a1 + 32);
    if (v3)
      objc_msgSend(v5, "_activateUIDelayTimer");
    else
      objc_msgSend(v5, "_deactivateUIDelayTimer");
    return objc_msgSend(*(id *)(a1 + 32), "_update");
  }
  return result;
}

id sub_10009F95C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

id sub_10009F968(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceLost:", a2);
}

id sub_10009F974(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_deviceChanged:", a2);
}

void sub_10009F980(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_1007B0F80 <= 60
      && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 60)))
    {
      LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_4", 60, "### Discovery activate failed: %@\n", v3);
    }
  }
  else if (dword_1007B0F80 <= 30
         && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 30)))
  {
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_4", 30, "Discovery activated\n");
  }
  objc_msgSend(*(id *)(a1 + 32), "_update");

}

void sub_10009FA5C(id a1)
{
  if (dword_1007B0F80 <= 90 && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 90)))
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_5", 90, "### ClinkClient interrupted\n");
}

void sub_10009FABC(id a1)
{
  if (dword_1007B0F80 <= 30 && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 30)))
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_6", 30, "ClinkClient invalidated\n");
}

id sub_10009FB1C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientClinkDeviceFound:", a2);
}

id sub_10009FB28(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientClinkDeviceLost:", a2);
}

id sub_10009FB34(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientClinkDeviceChanged:", a2);
}

void sub_10009FB40(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B0F80 <= 90)
    {
      v6 = v2;
      if (dword_1007B0F80 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0F80, 90), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_10", 90, "### CompanionLink start failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B0F80 <= 30)
  {
    v6 = 0;
    if (dword_1007B0F80 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B0F80, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_10", 30, "CompanionLink started\n");
      goto LABEL_8;
    }
  }

}

id sub_1000A12AC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_proximityFound:", a2);
}

id sub_1000A12B8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_proximityLost:", a2);
}

id sub_1000A12C4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_proximityChanged:", a2);
}

void sub_1000A12D0(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B0F80 <= 60)
    {
      v6 = v2;
      if (dword_1007B0F80 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B0F80, 60), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _proximityEnsureStarted]_block_invoke_4", 60, "### Proximity discovery start failed: %@", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B0F80 <= 30)
  {
    v6 = 0;
    if (dword_1007B0F80 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B0F80, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _proximityEnsureStarted]_block_invoke_4", 30, "Proximity discovery started\n");
      goto LABEL_8;
    }
  }

}

id sub_1000A2320(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 184);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 184);
    *(_QWORD *)(v4 + 184) = 0;

  }
  if (dword_1007B0F80 <= 30 && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 30)))
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _serviceTimeoutStart]_block_invoke", 30, "Requesting service timeout firing\n");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 176) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000A276C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sessionStop:", a2);
}

void sub_1000A2778(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000A27EC;
  v2[3] = &unk_1007156D0;
  v1 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v1;
  objc_msgSend(v3, "_helpersClientPairingSucceeded:completion:", 1, v2);

}

void sub_1000A27EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v6 = 0;
    objc_msgSend(*(id *)(a1 + 32), "_sessionHandlePairingSucceededResponse:", *(_QWORD *)(a1 + 40));
    goto LABEL_6;
  }
  if (dword_1007B0F80 <= 60)
  {
    v6 = v3;
    if (dword_1007B0F80 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B0F80, 60), v4 = v6, v5))
    {
      LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _sessionStart:]_block_invoke_3", 60, "### Client error handling pairing succeeded: %@\n", v4);
LABEL_6:
      v4 = v6;
    }
  }

}

void sub_1000A288C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v23 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  if (dword_1007B0F80 <= 30 && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 30)))
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _sessionStart:]_block_invoke_4", 30, "Granting session: PromptForPasswordPicker\n");
  objc_msgSend(*(id *)(a1 + 32), "passwordPickerStart:bundleID:localizedAppName:unlocalizedAppName:associatedDomains:appIconData:deviceName:completion:", v23, v16, v17, v18, v19, v20, v21, v22);

}

id sub_1000A29B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_helpersClientPromptForPIN:throttleSeconds:", a2, a3);
}

void sub_1000A2D4C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "_proximityChanged:", v2);

}

id sub_1000A30D0(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isEqual:", CFSTR("-pw"));
  v3 = *(void **)(a1 + 40);
  if (v2)
    return objc_msgSend(v3, "passwordPickerStart:bundleID:localizedAppName:unlocalizedAppName:associatedDomains:appIconData:deviceName:completion:", 0, 0, 0, 0, 0, 0, 0, &stru_1007163C8);
  else
    return objc_msgSend(v3, "_uiStart:extraInfo:", *(_QWORD *)(a1 + 48), 0);
}

void sub_1000A3150(id a1, NSString *a2, NSString *a3, NSError *a4)
{
  NSString *v6;
  NSError *v7;
  NSString *v8;

  v8 = a2;
  v6 = a3;
  v7 = a4;
  if (dword_1007B0F80 <= 30 && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 30)))
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent testUI:]_block_invoke_2", 30, "Picker username: %@, pw: %@, error: %@", v8, v6, v7);

}

id sub_1000A3308(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (dword_1007B0F80 <= 30 && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 30)))
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _activateUIDelayTimer]_block_invoke", 30, "UI delay timer firing\n");
  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[29];
  if (v3)
  {
    objc_msgSend(v2, "_uiStart:extraInfo:", v3, 0);
    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "_deactivateUIDelayTimer");
}

void sub_1000A3604(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  char isKindOfClass;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  v5 = a3;
  v6 = objc_opt_self(ASCPasswordCredential);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  isKindOfClass = objc_opt_isKindOfClass(v13, v7);

  v9 = *(_QWORD *)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "user"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "password"));
    (*(void (**)(uint64_t, void *, void *, id))(v9 + 16))(v9, v10, v11, v5);

LABEL_6:
    goto LABEL_7;
  }
  if (!v5)
  {
    v12 = NSErrorWithOSStatusF(4294960561, "Credential was not a ASCPasswordCredential");
    v10 = (void *)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v9 + 16))(v9, 0, 0, v10);
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v9 + 16))(v9, 0, 0, v5);
LABEL_7:

}

void sub_1000A3820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3838(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A3848(uint64_t a1)
{

}

void sub_1000A3850(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  _QWORD block[5];
  id v10;
  id v11;

  v5 = a3;
  if (v5)
  {
    if (dword_1007B0F80 <= 90
      && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 90)))
    {
      LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _uiStartIfEnabled:extraInfo:]_block_invoke", 90, "### Error getting autofill availability: %@\n", v5);
    }
  }
  else if (a2)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v8 = *(NSObject **)(v6 + 272);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A39B4;
    block[3] = &unk_100715138;
    block[4] = v6;
    v10 = v7;
    v11 = *(id *)(a1 + 48);
    dispatch_async(v8, block);

  }
  else if (dword_1007B0F80 <= 60
         && (dword_1007B0F80 != -1 || _LogCategory_Initialize(&dword_1007B0F80, 60)))
  {
    LogPrintF(&dword_1007B0F80, "-[SDAutoFillAgent _uiStartIfEnabled:extraInfo:]_block_invoke", 60, "### UI Start: AutoFill disabled via settings\n");
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "invalidate");

}

id sub_1000A39B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_uiStartIfNeeded:extraInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

Class sub_1000A4050()
{
  Class result;

  if (qword_1007C66C8 != -1)
    dispatch_once(&qword_1007C66C8, &stru_100716438);
  result = objc_getClass("SFAutoFillHelperProxy");
  qword_1007C66C0 = (uint64_t)result;
  off_1007B0FF0 = (uint64_t (*)())sub_1000A40AC;
  return result;
}

id sub_1000A40AC()
{
  return (id)qword_1007C66C0;
}

void sub_1000A40B8(id a1)
{
  qword_1007C66D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation", 2);
}

Class sub_1000A40E0()
{
  Class result;

  if (qword_1007C66E0 != -1)
    dispatch_once(&qword_1007C66E0, &stru_100716458);
  result = objc_getClass("ACAccountStore");
  qword_1007C66D8 = (uint64_t)result;
  off_1007B0FF8 = (uint64_t (*)())sub_1000A413C;
  return result;
}

id sub_1000A413C()
{
  return (id)qword_1007C66D8;
}

void sub_1000A4148(id a1)
{
  qword_1007C66E8 = (uint64_t)dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
}

id sub_1000A4358(int a1)
{
  const char *v2;

  if ((a1 - 10) < 0xB)
    return *((id *)&off_100716620 + a1 - 10);
  if (a1 >= 8)
  {
    if (a1 <= 9)
      v2 = "?";
    else
      v2 = "User";
  }
  else
  {
    v2 = off_100716678[a1];
  }
  return (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

uint64_t sub_1000A46D8(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "uniqueIdentifier"));
  v9 = v7;
  v10 = v9;
  if (v7)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "effectiveIdentifier"));
    if (objc_msgSend(v11, "isEqual:", v8))
    {

LABEL_5:
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsIdentifier"));

      if (v15)
      {
        v16 = CFSTR("CompanionLink");
        v17 = v10;
LABEL_14:

        goto LABEL_15;
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "idsDeviceIdentifier"));
      objc_msgSend(v5, "setIdsIdentifier:", v21);
      v16 = CFSTR("CompanionLink");
      v17 = v10;
LABEL_13:

      goto LABEL_14;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mediaSystemIdentifier"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "UUIDString"));
    v14 = objc_msgSend(v13, "isEqual:", v8);

    if (v14)
      goto LABEL_5;
  }

  if (NSStringLooksLikeBTAddress(v8))
  {
    v18 = SFDataFromHexString(v8);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (v17)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bleDevice"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "advertisementFields"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("bdAddr")));

      if (v21 && (objc_msgSend(v21, "isEqualToData:", v17) & 1) != 0)
      {
        v16 = CFSTR("BT Address");
        goto LABEL_13;
      }

    }
  }
  v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
  if (!v24)
  {
LABEL_25:
    v23 = 0;
    goto LABEL_28;
  }
  v22 = (void *)v24;
  v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
  if (v23)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
    v27 = objc_msgSend(v25, "isEqual:", v26);

    if ((v27 & 1) != 0)
    {
      v16 = CFSTR("Name");
LABEL_15:
      if (dword_1007B1060 > 10
        || dword_1007B1060 == -1 && !_LogCategory_Initialize(&dword_1007B1060, 10))
      {
        v23 = 1;
        goto LABEL_28;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      LogPrintF(&dword_1007B1060, "BOOL SFDeviceMatchesTURoute(SFDevice * _Nonnull __strong, TURoute * _Nonnull __strong, RPCompanionLinkDevice * _Nullable __strong)", 10, "SFDevice %@ equal to TURoute %@ via %@\n", v22, v8, v16);
      v23 = 1;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_24:

LABEL_28:
  return v23;
}

void sub_1000A5BB4(id a1)
{
  SDProxHandoffAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDProxHandoffAgent);
  v2 = (void *)qword_1007C66F8;
  qword_1007C66F8 = (uint64_t)v1;

}

id sub_1000A60F0(uint64_t a1)
{
  if (dword_1007B1060 <= 30 && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent activate]_block_invoke", 30, "Activate\n");
  return objc_msgSend(*(id *)(a1 + 32), "prefsChanged");
}

id sub_1000A61B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

uint64_t sub_1000A6B38(uint64_t result)
{
  uint64_t v1;
  const char *v2;
  const char *v3;

  v1 = result;
  if (dword_1007B1060 <= 40)
  {
    if (dword_1007B1060 != -1 || (result = _LogCategory_Initialize(&dword_1007B1060, 40), (_DWORD)result))
    {
      v2 = "yes";
      if (*(_BYTE *)(*(_QWORD *)(v1 + 32) + 280))
        v3 = "yes";
      else
        v3 = "no";
      if (!*(_BYTE *)(v1 + 40))
        v2 = "no";
      result = LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent setPreventNotifications:]_block_invoke", 40, "Prevent notifications: %s -> %s\n", v3, v2);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 32) + 280) = *(_BYTE *)(v1 + 40);
  return result;
}

id sub_1000A6CA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_commonCallCountChanged");
}

id sub_1000A6CB0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_commonScreenStateChanged");
}

id sub_1000A6CB8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_commonScreenStateChanged");
}

id sub_1000A6CC0(uint64_t a1)
{
  if (dword_1007B1060 <= 30 && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _commonEnsureStarted]_block_invoke_4", 30, "System monitor activated\n");
  objc_msgSend(*(id *)(a1 + 32), "_commonCallCountChanged");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000A6D38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleUpdateMappingAndNearbyCoalesced");
}

id sub_1000A6D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_proxiedNotificationDidDismiss:reason:", a2, a3);
}

id sub_1000A6D50(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_proxiedNotificationWasTapped:", a2);
}

id sub_1000A742C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_run");
}

id sub_1000A8D58(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_runCallHandoffHandleResponse:error:", a2);
}

id sub_1000A8F14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_runCallHandoffHandleDelayTimerFired");
}

id sub_1000A9148(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleActionDeviceFound:", a2);
}

id sub_1000A9154(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleActionDeviceLost:", a2);
}

id sub_1000A9160(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_bleActionDeviceChanged:", a2);
}

void sub_1000A916C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_1007B1060 <= 60
      && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 60)))
    {
      LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _bleActionDiscoveryEnsureStarted]_block_invoke_4", 60, "### BLE action discovery activate failed: %@\n", v3);
    }
  }
  else if (dword_1007B1060 <= 30
         && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
  {
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _bleActionDiscoveryEnsureStarted]_block_invoke_4", 30, "BLE action discovery activated\n");
  }
  objc_msgSend(*(id *)(a1 + 32), "_update");

}

id sub_1000A9DE0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleActionScanTimerFired");
}

id sub_1000AA0E8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleInfoDeviceFound:", a2);
}

id sub_1000AA0F4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleInfoDeviceLost:", a2);
}

id sub_1000AA100(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_bleInfoDeviceChanged:", a2);
}

void sub_1000AA10C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_1007B1060 <= 60
      && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 60)))
    {
      LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _bleInfoDiscoveryEnsureStarted]_block_invoke_4", 60, "### BLE info discovery activate failed: %@\n", v3);
    }
  }
  else if (dword_1007B1060 <= 30
         && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
  {
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _bleInfoDiscoveryEnsureStarted]_block_invoke_4", 30, "BLE info discovery activated\n");
  }
  objc_msgSend(*(id *)(a1 + 32), "_update");

}

id sub_1000AB1A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_clinkEnsureStopped");
}

void sub_1000AB1AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  if (dword_1007B1060 <= 10 && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 10)))
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_2", 10, "Clink device changed %#{flags} %@\n", a3, &unk_1005CC625, v5);
  objc_msgSend(*(id *)(a1 + 32), "_bleUpdateMappingAndNearby");

}

void sub_1000AB24C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1007B1060 <= 10 && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 10)))
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_3", 10, "Clink device found %@\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "_bleUpdateMappingAndNearby");

}

void sub_1000AB2DC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1007B1060 <= 10 && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 10)))
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_4", 10, "Clink device lost %@\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "_bleUpdateMappingAndNearby");

}

void sub_1000AB36C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_1007B1060 <= 60
      && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 60)))
    {
      LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_5", 60, "### CLink activate failed: %@\n", v3);
    }
  }
  else if (dword_1007B1060 <= 30
         && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
  {
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_5", 30, "CLink activated\n");
  }
  objc_msgSend(*(id *)(a1 + 32), "_update");

}

id sub_1000AB448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clinkHandleRequest:options:responseHandler:", a2, a3, a4);
}

void sub_1000AB79C(uint64_t a1, void *a2)
{
  NSObject *v2;
  id *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  if (a2)
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 288);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000AB838;
    v5[3] = &unk_100714468;
    v3 = (id *)(a1 + 40);
    v4 = a2;
    objc_copyWeak(&v6, v3);
    v5[4] = v4;
    dispatch_async(v2, v5);

    objc_destroyWeak(&v6);
  }
}

void sub_1000AB838(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_motionUpdate:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_1000ABC2C(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  const char *v4;
  const char *v5;

  result = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "containsObject:", *(_QWORD *)(a1 + 40));
  if ((result & 1) != 0)
  {
    if (dword_1007B1060 <= 30
      && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
    {
      v3 = objc_msgSend(*(id *)(a1 + 40), "shouldAdvertise");
      v4 = "no";
      if (v3)
        v5 = "yes";
      else
        v5 = "no";
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 89))
        v4 = "yes";
      LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent proximityClientUpdate:]_block_invoke", 30, "Proximity client update: %s, cur=%s\n", v5, v4);
    }
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "_commonShouldAdvertiseChanged");
  }
  else if (dword_1007B1060 <= 90)
  {
    if (dword_1007B1060 != -1)
      return LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent proximityClientUpdate:]_block_invoke", 90, "### Unrecognized client: %@\n", *(_QWORD *)(a1 + 40));
    result = _LogCategory_Initialize(&dword_1007B1060, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent proximityClientUpdate:]_block_invoke", 90, "### Unrecognized client: %@\n", *(_QWORD *)(a1 + 40));
  }
  return result;
}

id sub_1000AC25C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_run");
}

uint64_t sub_1000ADCAC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000ADCBC(uint64_t a1)
{

}

void sub_1000ADCC4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i), "clinkDevice"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "mediaRouteIdentifier"));

        if (v8)
        {
          if (dword_1007B1060 <= 30
            && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
          {
            LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _proximityClientSeedInitialDevices:]_block_invoke", 30, "Nearby enter seed value (MediaRemote ID): %@\n", v8);
          }
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceEnteredNearbyHandler"));

          if (v9)
          {
            v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceEnteredNearbyHandler"));
            ((void (**)(_QWORD, void *))v10)[2](v10, v8);

          }
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

}

void sub_1000ADEF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceWillTriggerHandler"));
  if (v2)
  {
    v3 = *(void **)(*(_QWORD *)(a1 + 40) + 120);
    v5[1] = 3221225472;
    v5[2] = sub_1000ADF70;
    v5[3] = &unk_100716568;
    v5[4] = v2;
    v4 = v2;
    v5[0] = _NSConcreteStackBlock;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);
    v2 = v4;
  }

}

void sub_1000ADF70(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  v4 = objc_msgSend(v8, "state") == 12;
  v5 = v8;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "clinkDevice"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mediaRouteIdentifier"));

    if (v7)
    {
      if (dword_1007B1060 < 31
        && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
      {
        LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _proximityClientSeedWillTriggerDeviceIfNeeded:]_block_invoke_2", 30, "Triggered device seed value (MediaRemote ID): %@\n", v7);
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }

    v5 = v8;
  }

}

void sub_1000AE124(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_1007B1060 <= 60
      && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 60)))
    {
      LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _serviceEnsureStarted]_block_invoke", 60, "### BLE action service activate error: %@\n", v3);
    }
  }
  else if (dword_1007B1060 <= 30
         && (dword_1007B1060 != -1 || _LogCategory_Initialize(&dword_1007B1060, 30)))
  {
    LogPrintF(&dword_1007B1060, "-[SDProxHandoffAgent _serviceEnsureStarted]_block_invoke", 30, "BLE action service started\n");
  }
  objc_msgSend(*(id *)(a1 + 32), "_update");

}

id sub_1000AE308(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_serviceTimeoutFired");
}

id sub_1000AEFC4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "handleNotificationWasDismissed:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return objc_msgSend(*(id *)(a1 + 32), "_throttleEventDidOccur");
  return result;
}

id sub_1000AF08C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "handleNotificationWasTapped:", *(_QWORD *)(a1 + 40));
}

void sub_1000AF708(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 32), "_combinedDeviceIsSuppressed:", v9);
  v6 = v9;
  if ((v5 & 1) == 0)
  {
    v7 = objc_msgSend(v9, "state");
    v6 = v9;
    switch(v7)
    {
      case 0xBu:
        v8 = *(_QWORD *)(a1 + 40);
        goto LABEL_12;
      case 0xCu:
        v8 = *(_QWORD *)(a1 + 48);
        goto LABEL_12;
      case 0xDu:
        v8 = *(_QWORD *)(a1 + 56);
        goto LABEL_12;
      case 0xEu:
      case 0xFu:
        v8 = *(_QWORD *)(a1 + 104);
        goto LABEL_12;
      case 0x10u:
        v8 = *(_QWORD *)(a1 + 72);
        goto LABEL_12;
      case 0x11u:
        v8 = *(_QWORD *)(a1 + 88);
        goto LABEL_12;
      case 0x12u:
        v8 = *(_QWORD *)(a1 + 64);
        goto LABEL_12;
      case 0x13u:
        v8 = *(_QWORD *)(a1 + 80);
        goto LABEL_12;
      case 0x14u:
        v8 = *(_QWORD *)(a1 + 96);
LABEL_12:
        objc_storeStrong((id *)(*(_QWORD *)(v8 + 8) + 40), a3);
        v6 = v9;
        break;
      default:
        break;
    }
  }

}

void sub_1000AF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AF8C4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  unsigned int v13;
  id v14;

  v14 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "effectiveID"));
  v8 = v7;
  if (v7)
  {
    v9 = *(void **)(a1 + 32);
    v10 = v7;
    v11 = v9;
    if (v10 == v11)
    {

    }
    else
    {
      v12 = v11;
      if (!v11)
      {

        goto LABEL_9;
      }
      v13 = objc_msgSend(v10, "isEqual:", v11);

      if (!v13)
        goto LABEL_9;
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
LABEL_9:

}

void sub_1000AFB24(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  objc_msgSend(v4, "setAttachmentURL:", 0);
  objc_msgSend(v4, "setState:", 10);
  objc_msgSend(v4, "setNextState:", 0);
  objc_msgSend(v4, "setNotificationInfo:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_uiStopIfNeeded:reason:", v4, 0);

}

void sub_1000B0B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_1000B0B84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_1000B0C84(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "_bleActionDeviceChanged:", v2);

}

Class sub_1000B1200()
{
  Class result;

  if (qword_1007C6708 != -1)
    dispatch_once(&qword_1007C6708, &stru_100716600);
  result = objc_getClass("TUCallCenter");
  qword_1007C6700 = (uint64_t)result;
  off_1007B10D0 = (uint64_t (*)())sub_1000B125C;
  return result;
}

id sub_1000B125C()
{
  return (id)qword_1007C6700;
}

void sub_1000B1268(id a1)
{
  qword_1007C6710 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
}

Class sub_1000B1290()
{
  Class result;

  if (qword_1007C6708 != -1)
    dispatch_once(&qword_1007C6708, &stru_100716600);
  result = objc_getClass("TUMutableRoute");
  qword_1007C6718 = (uint64_t)result;
  off_1007B10D8 = (uint64_t (*)())sub_1000B12EC;
  return result;
}

id sub_1000B12EC()
{
  return (id)qword_1007C6718;
}

void sub_1000B1338(id a1)
{
  SDRapportBrowser *v1;
  void *v2;

  v1 = objc_opt_new(SDRapportBrowser);
  v2 = (void *)qword_1007C6728;
  qword_1007C6728 = (uint64_t)v1;

}

void sub_1000B186C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 96));
  _Unwind_Resume(a1);
}

void sub_1000B18BC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = airdrop_log(WeakRetained);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Rapport found person %@", (uint8_t *)&v9, 0xCu);
    }

    objc_msgSend(v5, "addOrUpdateNodesForPerson:withChanges:", v3, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v8, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.RapportChanged"), 0, 0);

  }
}

void sub_1000B19C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = airdrop_log(WeakRetained);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      sub_1000B3820((uint64_t)v5, a3, v9);

    objc_msgSend(v7, "addOrUpdateNodesForPerson:withChanges:", v5, a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v10, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.RapportChanged"), 0, 0);

  }
}

void sub_1000B1A74(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = airdrop_log(WeakRetained);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412290;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Rapport lost person %@", (uint8_t *)&v9, 0xCu);
    }

    objc_msgSend(v5, "removeNodesForPerson:", v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v8, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.RapportChanged"), 0, 0);

  }
}

void sub_1000B1B74(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v2;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    if ((objc_msgSend(WeakRetained[3], "statusFlags") & 1) != 0)
      v2 = 1;
    else
      v2 = 2;
    objc_msgSend(v3, "updateUltraWideBandStateTo:", v2);
    WeakRetained = v3;
  }

}

void sub_1000B1BBC(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = airdrop_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport people discovery interrupted", v3, 2u);
  }

}

void sub_1000B1C20(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = airdrop_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport people discovery invalidated", v3, 2u);
  }

}

void sub_1000B1C84(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _DWORD v9[2];

  v3 = a2;
  v4 = airdrop_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = (uint64_t)v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000B38E0();
    goto LABEL_8;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "discoveredPeople"));
    v9[0] = 67109120;
    v9[1] = objc_msgSend(v7, "count");
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "Rapport people discovery activated. Already discovered people %d", (uint8_t *)v9, 8u);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "statusChangedHandler"));

  if (v8)
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "statusChangedHandler"));
    (*(void (**)(void))(v6 + 16))();
LABEL_8:

  }
}

void sub_1000B239C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  id v16;
  __int16 v17;
  id v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", v4));

  v7 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v6), "deviceIsEligibleForAirDrop:", v3);
  if ((_DWORD)v7)
  {
    if (v5)
    {
      if ((*(_BYTE *)(a1 + 40) & 8) != 0)
        objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v8), "updateRangingMeasurementForDevice:inNode:", v3, v5);
    }
    else
    {
      v11 = objc_msgSend(*(id *)(a1 + 32), "createSFNodeFromMyRPDevice:", v3);
      v12 = airdrop_log(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      v14 = v13;
      if (v11)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 138412546;
          v16 = v11;
          v17 = 2112;
          v18 = v3;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SDRapportBrowser: Adding SFNode %@ for %@", (uint8_t *)&v15, 0x16u);
        }

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setObject:forKeyedSubscript:", v11, v4);
      }
      else
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1000B3A0C();

      }
    }
  }
  else if (v5)
  {
    v9 = airdrop_log(v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 138412546;
      v16 = v5;
      v17 = 2112;
      v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDRapportBrowser: Removing SFNode %@ for %@", (uint8_t *)&v15, 0x16u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setObject:forKeyedSubscript:", 0, v4);
  }

}

void sub_1000B3820(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  void *v10;

  v5 = NSPrintF("%#{flags}", a2, &unk_1005CC678);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  *(_DWORD *)buf = 138412546;
  v8 = a1;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Rapport person %@ changed %@", buf, 0x16u);

}

void sub_1000B38E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Rapport people discovery failed to activate with error %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000B3940()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "SDRapportBrowser: Failed to add SFNode because accountID is nil for %@", v1, 0xCu);
  sub_10001949C();
}

void sub_1000B39AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDRapportBrowser: createSFNodeFromRPPerson failed for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000B3A0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDRapportBrowser: createSFNodeFromMyRPDevice failed for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000B3A6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDRapportBrowser: couldn't find contact with accountID for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1000B3ACC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDRapportBrowser: meCard is nil", v1, 2u);
}

uint64_t SDAutoUnlockAuthPromptImageDataReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t Data;
  uint64_t v24;
  void *v25;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 24) |= 2u;
      while (1)
      {
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0)
          goto LABEL_42;
        v18 += 7;
        v9 = v19++ >= 9;
        if (v9)
        {
          v20 = 0;
          goto LABEL_44;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v20 = 0;
LABEL_44:
      *(_BYTE *)(a1 + 20) = v20 != 0;
    }
    else if ((_DWORD)v12 == 2)
    {
      Data = PBReaderReadData(a2);
      v24 = objc_claimAutoreleasedReturnValue(Data);
      v25 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v24;

    }
    else if ((_DWORD)v12 == 1)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          goto LABEL_38;
        v13 += 7;
        v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_40;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v15) = 0;
LABEL_40:
      *(_DWORD *)(a1 + 16) = v15;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000B479C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.AirDropUnpublished"), *(_QWORD *)(a1 + 32), 0);

  return objc_msgSend(*(id *)(a1 + 32), "updateServerState");
}

id sub_1000B5F00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

id sub_1000B6620(void *a1, uint64_t a2)
{
  return _objc_msgSend(a1, "didReceiveError:", a2);
}

id sub_1000B6628(void *a1, uint64_t a2)
{
  return _objc_msgSend(a1, "didOpenConnection:", a2);
}

id sub_1000B6630(void *a1, uint64_t a2)
{
  return _objc_msgSend(a1, "didCloseConnection:", a2);
}

id *sub_1000B6850(id *result, uint64_t a2, int a3)
{
  if (a3)
    return (id *)_objc_msgSend(result[4], "foundDevice:", a2);
  return result;
}

id sub_1000B6B44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startHTTPServer:", 8770);
}

id sub_1000B6CB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateServerState");
}

id sub_1000B6CC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateServerState");
}

id sub_1000B6E88(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "stop");
  return objc_msgSend(*(id *)(a1 + 32), "updateServerState");
}

void sub_1000B73F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "AirDrop server didReceiveError %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000B745C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "BTLE discovered duplicate hashes %@ rssi %@", (uint8_t *)&v3, 0x16u);
  sub_10001949C();
}

void sub_1000B74DC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDAirDropServer: failedToStartScanningWithError %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000B7540()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "AirDrop updateServerState with nil delegate", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000B756C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropServer: intermediate certificate not available", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000B7598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropServer: _CFHTTPServerCreateService returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000B75C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropServer: _kCFHTTPServerServicePort is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDAutoUnlockSessionConfirmationACKReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0)
          goto LABEL_40;
        v17 += 7;
        v9 = v18++ >= 9;
        if (v9)
        {
          v19 = 0;
          goto LABEL_42;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v19 = 0;
LABEL_42:
      *(_BYTE *)(a1 + 12) = v19 != 0;
    }
    else if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_36;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_38:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B8558(uint64_t a1, uint64_t a2, os_log_t log)
{
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  if ((unint64_t)(a1 - 1) > 0xE)
    v3 = CFSTR("?");
  else
    v3 = off_100716908[a1 - 1];
  v4 = 138412802;
  v5 = v3;
  v6 = 1024;
  v7 = a1;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropListener UNHANDLED EVENT %@ [%d] %@", (uint8_t *)&v4, 0x1Cu);
}

void sub_1000B8710(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const __CFString *v5;

  v2 = 138412546;
  v3 = a1;
  v4 = 2112;
  v5 = CFSTR("en0");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "IP Address = %@, Interface = %@", (uint8_t *)&v2, 0x16u);
}

id sub_1000B8EFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 168))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[SDProximityController sharedController](SDProximityController, "sharedController"));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 168);
    *(_QWORD *)(v3 + 168) = v2;

  }
  if (dword_1007B1260 <= 30 && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon activate]_block_invoke", 30, "Activate\n");
  objc_msgSend(*(id *)(a1 + 32), "_reportProgress:", 10);
  return objc_msgSend(*(id *)(a1 + 32), "_run");
}

_QWORD *sub_1000B8FFC(_QWORD *result)
{
  _QWORD *v1;

  if (!*(_BYTE *)(result[4] + 129))
  {
    v1 = result;
    if (dword_1007B1260 <= 30
      && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    {
      LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon invalidate]_block_invoke", 30, "Invalidate\n");
    }
    *(_BYTE *)(v1[4] + 129) = 1;
    return objc_msgSend((id)v1[4], "_invalidate");
  }
  return result;
}

_QWORD *sub_1000B9684(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return _objc_msgSend(result, "_bleScannerProxPairingDeviceFound:", a2);
  return result;
}

_QWORD *sub_1000B96A0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return _objc_msgSend(result, "_bleScannerProxPairingDeviceFound:", a2);
  return result;
}

void sub_1000B96BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runScannerProxPairing]_block_invoke_3", 90, "### BLE ProxPairing scanner start failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;

      goto LABEL_11;
    }
    if (dword_1007B1260 <= 30)
    {
      v8 = 0;
      if (dword_1007B1260 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B1260, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runScannerProxPairing]_block_invoke_3", 30, "BLE ProxPairing scanner started\n");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

_QWORD *sub_1000B99D4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[2])
    return _objc_msgSend(result, "_bleScannerNearbyInfoDeviceFound:", a2);
  return result;
}

_QWORD *sub_1000B99F0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[2])
    return _objc_msgSend(result, "_bleScannerNearbyInfoDeviceFound:", a2);
  return result;
}

void sub_1000B9A0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runScannerNearbyInfo]_block_invoke_3", 90, "### BLE NearbyInfo scanner start failed: %{error}\n", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;

      goto LABEL_11;
    }
    if (dword_1007B1260 <= 30)
    {
      v8 = 0;
      if (dword_1007B1260 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B1260, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runScannerNearbyInfo]_block_invoke_3", 30, "BLE NearbyInfo scanner started\n");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

void sub_1000B9CD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    if (v3)
    {
      v8 = v3;
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runAdvertiser]_block_invoke", 90, "### BLE advertiser failed: %@\n", v8);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_1007B1260 <= 30)
    {
      v8 = 0;
      if (dword_1007B1260 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B1260, 30), v4 = 0, v7))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runAdvertiser]_block_invoke", 30, "BLE advertiser started\n");
LABEL_11:
        v4 = v8;
      }
    }
  }

}

void sub_1000BA160(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112))
  {
    v9 = v3;
    if (dword_1007B1260 <= 90
      && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
    {
      LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke", 90, "### Guest iOS session error: %{error}\n", v9);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "invalidate");
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v4 + 112);
    *(_QWORD *)(v4 + 112) = 0;

    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 84) = 3;
    v6 = *(void **)(a1 + 40);
    if (v9)
    {
      objc_msgSend(v6, "_reportError:", v9);
    }
    else
    {
      v7 = NSErrorF(NSOSStatusErrorDomain, 4294960596, "?");
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      objc_msgSend(v6, "_reportError:", v8);

    }
    v3 = v9;
  }

}

uint64_t sub_1000BA270(uint64_t result)
{
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(*(_QWORD *)(result + 40) + 112) && dword_1007B1260 <= 90)
  {
    if (dword_1007B1260 != -1)
      return LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_2", 90, "### Guest iOS session interrupted\n");
    result = _LogCategory_Initialize(&dword_1007B1260, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_2", 90, "### Guest iOS session interrupted\n");
  }
  return result;
}

uint64_t sub_1000BA2E0(uint64_t result)
{
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(*(_QWORD *)(result + 40) + 112) && dword_1007B1260 <= 90)
  {
    if (dword_1007B1260 != -1)
      return LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_3", 90, "### Guest iOS session invalidated\n");
    result = _LogCategory_Initialize(&dword_1007B1260, 90);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_3", 90, "### Guest iOS session invalidated\n");
  }
  return result;
}

_QWORD *sub_1000BA350(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[5];
  if (result[4] == *(_QWORD *)(v1 + 112) && *(_DWORD *)(v1 + 84) == 1)
  {
    v2 = result;
    *(_DWORD *)(v1 + 84) = 4;
    if (dword_1007B1260 <= 30
      && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    {
      LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_4", 30, "Guest iOS session started\n");
    }
    return objc_msgSend((id)v2[5], "_run");
  }
  return result;
}

void sub_1000BA3F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112))
  {
    v7 = v3;
    v4 = v3;
    if (v4)
    {
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_5", 90, "### Guest iOS session activate failed: %@\n", v4);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "invalidate");
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(void **)(v5 + 112);
      *(_QWORD *)(v5 + 112) = 0;

      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 84) = 3;
      objc_msgSend(*(id *)(a1 + 40), "_reportError:", v4);
    }
    else if (dword_1007B1260 <= 30
           && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    {
      LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSConnect]_block_invoke_5", 30, "Guest iOS session activated\n");
    }

    v3 = v7;
  }

}

void sub_1000BA660(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112))
  {
    v5 = v3;
    v4 = v3;
    if (v4)
    {
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSPairSetupPublic]_block_invoke", 90, "### Guest iOS PairSetup failed: %{error}\n", v4);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 104) = 3;
      objc_msgSend(*(id *)(a1 + 40), "_reportError:", v4);
    }
    else
    {
      if (dword_1007B1260 <= 30
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSPairSetupPublic]_block_invoke", 30, "Guest iOS PairSetup success\n");
      }
      objc_msgSend(*(id *)(a1 + 40), "_reportProgressTriggeredDevice:", 210);
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 104) = 4;
      objc_msgSend(*(id *)(a1 + 40), "_run");
    }

    v3 = v5;
  }

}

void sub_1000BAA10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112))
  {
    if (v3)
    {
      if (dword_1007B1260 > 90)
      {
LABEL_11:
        objc_msgSend(*(id *)(a1 + 40), "_reportProgressTriggeredDevice:", 220);
        v5 = *(_QWORD *)(a1 + 48);
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 3221225472;
        v6[2] = sub_1000BAB60;
        v6[3] = &unk_1007169E8;
        v7 = *(_OWORD *)(a1 + 32);
        objc_msgSend((id)v7, "sendRequestID:options:request:responseHandler:", CFSTR("_shAu"), 0, v5, v6);
        goto LABEL_12;
      }
      if (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90))
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSShareAudioSendRequest]_block_invoke", 90, "### Guest iOS ShareAudio add proof failed: %{error}\n", v4);
    }
    if (dword_1007B1260 <= 30
      && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    {
      LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSShareAudioSendRequest]_block_invoke", 30, "Guest iOS ShareAudio request: %##.16@\n", *(_QWORD *)(a1 + 48));
    }
    goto LABEL_11;
  }
LABEL_12:

}

_QWORD *sub_1000BAB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v5 == result[14])
    return _objc_msgSend(result, "_runGuestiOSShareAudioProcessResponse:error:", a4, a2);
  return result;
}

void sub_1000BAD0C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  CFTypeID TypeID;
  uint64_t TypedValue;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;

  v6 = a2;
  v7 = a3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112))
  {
    if (dword_1007B1260 <= 30
      && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke", 30, "Guest iOS proof result: ContactID %@, %{error}\n", v8, v7);

    }
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 88), a2);
    v18 = 0;
    v9 = *(_QWORD *)(a1 + 48);
    TypeID = CFStringGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(v9, CFSTR("btAd"), TypeID, &v18);
    v12 = objc_claimAutoreleasedReturnValue(TypedValue);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 48) = CFDictionaryGetInt64Ranged(*(_QWORD *)(a1 + 48), CFSTR("colorCode"), 0, 0xFFFFFFFFLL, 0);
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 64) = CFDictionaryGetInt64Ranged(*(_QWORD *)(a1 + 48), CFSTR("productID"), 0, 0xFFFFFFFFLL, 0);
      if (dword_1007B1260 <= 30
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke", 30, "Guest iOS ShareAudio: success: DA %@, PID %u, Color %u\n", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64));
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 120) = 4;
      objc_msgSend(*(id *)(a1 + 40), "_run");
    }
    else
    {
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runGuestiOSShareAudioProcessResponse:error:]_block_invoke", 90, "### Guest iOS ShareAudio: no peer BT address: %#m\n", v18);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 120) = 3;
      v15 = *(void **)(a1 + 40);
      v16 = NSErrorF(NSOSStatusErrorDomain, 4294960535, "No peer BT Addr");
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_msgSend(v15, "_reportError:", v17);

    }
  }

}

void sub_1000BB1DC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56))
  {
    v5 = v3;
    v4 = v3;
    if (v4)
    {
      if (dword_1007B1260 <= 90
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 90)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runConnectGuestHeadphones]_block_invoke", 90, "### Guest headphone connect failed: %{error}\n", v4);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 52) = 3;
      objc_msgSend(*(id *)(a1 + 40), "_reportError:", v4);
    }
    else
    {
      if (dword_1007B1260 <= 30
        && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
      {
        LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _runConnectGuestHeadphones]_block_invoke", 30, "Guest headphone connect success\n");
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 52) = 4;
      objc_msgSend(*(id *)(a1 + 40), "_reportProgressTriggeredDevice:", 310);
      objc_msgSend(*(id *)(a1 + 40), "_run");
    }

    v3 = v5;
  }

}

id sub_1000BC438(uint64_t a1)
{
  if (dword_1007B1260 <= 30 && (dword_1007B1260 != -1 || _LogCategory_Initialize(&dword_1007B1260, 30)))
    LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon _pickableRoutesChanged:]_block_invoke", 30, "Pickable routes changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_pickableRoutesChanged");
}

id sub_1000BCE0C(id result)
{
  id v1;
  uint64_t v2;

  v1 = result;
  if (dword_1007B1260 <= 30)
  {
    if (dword_1007B1260 != -1 || (result = (id)_LogCategory_Initialize(&dword_1007B1260, 30), (_DWORD)result))
      result = (id)LogPrintF(&dword_1007B1260, "-[SFShareAudioSessionDaemon userConfirmed]_block_invoke", 30, "User confirmed\n");
  }
  v2 = *((_QWORD *)v1 + 4);
  if (*(_DWORD *)(v2 + 32) == 1)
  {
    *(_DWORD *)(v2 + 32) = 4;
    return objc_msgSend(*((id *)v1 + 4), "_run");
  }
  return result;
}

Class sub_1000BCFB0()
{
  Class result;

  if (qword_1007C6760 != -1)
    dispatch_once(&qword_1007C6760, &stru_100716A30);
  result = objc_getClass("AVSystemController");
  qword_1007C6758 = (uint64_t)result;
  off_1007B12D0[0] = (uint64_t (*)())sub_1000BD00C;
  return result;
}

id sub_1000BD00C()
{
  return (id)qword_1007C6758;
}

void sub_1000BD018(id a1)
{
  qword_1007C6768 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
}

id sub_1000BD040()
{
  id *v0;

  if (qword_1007C6760 != -1)
    dispatch_once(&qword_1007C6760, &stru_100716A30);
  v0 = (id *)dlsym((void *)qword_1007C6768, "AVSystemController_PickableRoutesDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6738, *v0);
  off_1007B12D8[0] = (uint64_t (*)())sub_1000BD0B8;
  return (id)qword_1007C6738;
}

id sub_1000BD0B8()
{
  return (id)qword_1007C6738;
}

id sub_1000BD0C4()
{
  id *v0;

  if (qword_1007C6760 != -1)
    dispatch_once(&qword_1007C6760, &stru_100716A30);
  v0 = (id *)dlsym((void *)qword_1007C6768, "AVSystemController_SubscribeToNotificationsAttribute");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6750, *v0);
  off_1007B12E0[0] = (uint64_t (*)())sub_1000BD13C;
  return (id)qword_1007C6750;
}

id sub_1000BD13C()
{
  return (id)qword_1007C6750;
}

id sub_1000BD148()
{
  id *v0;

  if (qword_1007C6760 != -1)
    dispatch_once(&qword_1007C6760, &stru_100716A30);
  v0 = (id *)dlsym((void *)qword_1007C6768, "AVSystemController_PickableRoutesAttribute");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6730, *v0);
  off_1007B12E8[0] = (uint64_t (*)())sub_1000BD1C0;
  return (id)qword_1007C6730;
}

id sub_1000BD1C0()
{
  return (id)qword_1007C6730;
}

id sub_1000BD1CC()
{
  id *v0;

  if (qword_1007C6760 != -1)
    dispatch_once(&qword_1007C6760, &stru_100716A30);
  v0 = (id *)dlsym((void *)qword_1007C6768, "AVSystemController_RouteDescriptionKey_RouteCurrentlyPicked");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6740, *v0);
  off_1007B12F0[0] = (uint64_t (*)())sub_1000BD244;
  return (id)qword_1007C6740;
}

id sub_1000BD244()
{
  return (id)qword_1007C6740;
}

id sub_1000BD250()
{
  id *v0;

  if (qword_1007C6760 != -1)
    dispatch_once(&qword_1007C6760, &stru_100716A30);
  v0 = (id *)dlsym((void *)qword_1007C6768, "AVSystemController_RouteDescriptionKey_RouteUID");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6748, *v0);
  off_1007B12F8 = (uint64_t (*)())sub_1000BD2C8;
  return (id)qword_1007C6748;
}

id sub_1000BD2C8()
{
  return (id)qword_1007C6748;
}

void sub_1000BDA20(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transfer"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Create destination for %@ failed %@", (uint8_t *)&v6, 0x16u);

}

uint64_t SDUnlockStashKeyExchangeRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Data;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = PBReaderReadData(a2);
      v19 = objc_claimAutoreleasedReturnValue(Data);
      v20 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v19;

    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v21 = 0;
        v22 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_42;
          v21 += 7;
          v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v26 = 16;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 20;
      }
      *(_DWORD *)(a1 + v26) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000BE678(NSObject *a1, int a2, int a3, void *a4)
{
  void *v8;
  dispatch_queue_t *v9;

  v8 = objc_autoreleasePoolPush();
  v9 = a4;
  dispatch_assert_queue_V2(v9[5]);
  switch(a2)
  {
    case 0:
      if (dword_1007B1300 <= 30
        && (dword_1007B1300 != -1 || _LogCategory_Initialize(&dword_1007B1300, 30)))
      {
        LogPrintF(&dword_1007B1300, "void _btSessionEventHandler(BTSession, BTSessionEvent, BTResult, void *)", 30, "BTSession attached: %#m\n", (a3 + 310000));
      }
      v9[4] = a1;
      *((_BYTE *)v9 + 8) = 0;
      break;
    case 1:
      if (dword_1007B1300 <= 30
        && (dword_1007B1300 != -1 || _LogCategory_Initialize(&dword_1007B1300, 30)))
      {
        LogPrintF(&dword_1007B1300, "void _btSessionEventHandler(BTSession, BTSessionEvent, BTResult, void *)", 30, "BTSession detached: %#m\n", (a3 + 310000));
      }
      goto LABEL_26;
    case 2:
      if (dword_1007B1300 <= 60
        && (dword_1007B1300 != -1 || _LogCategory_Initialize(&dword_1007B1300, 60)))
      {
        LogPrintF(&dword_1007B1300, "void _btSessionEventHandler(BTSession, BTSessionEvent, BTResult, void *)", 60, "### BTSession terminated (bluetoothd crash)...re-attaching\n");
      }
LABEL_26:
      v9[4] = 0;
      *((_BYTE *)v9 + 8) = 0;
      BTSessionDetachWithQueue(v9 + 4);
      CFRelease(v9);
      break;
    case 3:
      if (dword_1007B1300 <= 60
        && (dword_1007B1300 != -1 || _LogCategory_Initialize(&dword_1007B1300, 60)))
      {
        LogPrintF(&dword_1007B1300, "void _btSessionEventHandler(BTSession, BTSessionEvent, BTResult, void *)", 60, "### BTSession failed: %#m\n");
      }
      break;
    default:
      if (dword_1007B1300 <= 40
        && (dword_1007B1300 != -1 || _LogCategory_Initialize(&dword_1007B1300, 40)))
      {
        LogPrintF(&dword_1007B1300, "void _btSessionEventHandler(BTSession, BTSessionEvent, BTResult, void *)", 40, "BTSession unknown event %d, result %#m\n");
      }
      break;
  }

  objc_autoreleasePoolPop(v8);
}

void sub_1000BE8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  void *v8;
  dispatch_queue_t *v9;

  v9 = a6;
  dispatch_assert_queue_V2(v9[5]);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a4, a5));
  if (dword_1007B1300 <= 30 && (dword_1007B1300 != -1 || _LogCategory_Initialize(&dword_1007B1300, 30)))
    LogPrintF(&dword_1007B1300, "void _customMessageHandler(BTAccessoryManager, BTDevice, BTAccessoryCustomMessageType, BTData, size_t, void *)", 30, "### custom message handler engraving request data: %d\n", (_DWORD)v8);
  -[dispatch_queue_t handleEngravingData:](v9, "handleEngravingData:", v8);

}

void sub_1000BED7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "code");
    if (v8 != (id)-10814)
    {
      v9 = airdrop_log(v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1000BF284(a1, (uint64_t)v7, v10);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setAppLink:", v5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

void sub_1000BF18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BF1B4(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD);
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "completedURLs"));
  v3 = objc_msgSend(WeakRetained, "openURLs:", v2);

  v4 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionHandler"));
  ((void (**)(_QWORD, id, _QWORD, uint64_t))v4)[2](v4, v3, 0, 1);

}

void sub_1000BF284(uint64_t a1, uint64_t a2, NSObject *a3)
{
  NSString *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v6 = NSStringFromSelector(*(SEL *)(a1 + 56));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = 138412802;
  v10 = v7;
  v11 = 2112;
  v12 = v8;
  v13 = 2112;
  v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@ Failed to generate app link for %@ (%@)", (uint8_t *)&v9, 0x20u);

}

uint64_t SDAuthenticationPairingResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t String;
  uint64_t v23;
  uint64_t v24;
  uint64_t Data;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_53;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_55:
        v37 = 44;
        goto LABEL_64;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_59:
        v37 = 40;
        goto LABEL_64;
      case 3u:
        String = PBReaderReadString(a2);
        v23 = objc_claimAutoreleasedReturnValue(String);
        v24 = 24;
        goto LABEL_37;
      case 4u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = 16;
        goto LABEL_37;
      case 5u:
        v26 = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(v26);
        v24 = 32;
LABEL_37:
        v27 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        continue;
      case 6u:
        v28 = 0;
        v29 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v14 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              v9 = v29++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_63:
        v37 = 8;
LABEL_64:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 7u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 52) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v35 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1 || v35 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v34 |= (unint64_t)(v36 & 0x7F) << v32;
      if ((v36 & 0x80) == 0)
        goto LABEL_66;
      v32 += 7;
      v9 = v33++ >= 9;
      if (v9)
      {
        v34 = 0;
        goto LABEL_68;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v34 = 0;
LABEL_68:
    *(_BYTE *)(a1 + 48) = v34 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000C04F4(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v7[2];

  v1 = a1;
  memset(v7, 0, 14);
  if (objc_msgSend(v1, "length"))
  {
    v2 = objc_msgSend(v1, "length");
    if ((unint64_t)v2 >= 0xE)
      v3 = 14;
    else
      v3 = (uint64_t)v2;
    objc_msgSend(v1, "getBytes:length:", v7, v3);
  }
  else
  {
    v4 = handoff_log();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000C0C50(v1, v5);

  }
  return v7[0];
}

uint64_t sub_1000C0590(unsigned int a1)
{
  return (unsigned __int16)(a1 >> 8);
}

id sub_1000C0598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  LODWORD(v5) = a2;
  WORD2(v5) = WORD2(a2);
  v2 = 5;
  while (!*((_BYTE *)&v4 + v2))
  {
    if (++v2 == 14)
      return 0;
  }
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (char *)&v4 + 5, 9, v4, v5));
}

NSMutableDictionary *sub_1000C05FC(unint64_t a1, uint64_t a2, int a3)
{
  NSMutableDictionary *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;

  v5 = objc_opt_new(NSMutableDictionary);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a1 & 1));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v6, SFActivityAdvertiserOptionVersionKey);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (a1 >> 1) & 3));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v7, SFActivityAdvertiserOptionMinorVersionKey);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (a1 >> 3) & 1));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v8, SFActivityAdvertiserOptionFlagCopyPasteKey);

  if ((a1 & 0x100000000) != 0)
  {
    v9 = off_1007B1370();
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, v10);

  }
  if (a3)
  {
    v11 = off_1007B1378();
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, v12);

  }
  return v5;
}

id sub_1000C0734(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  if (v1)
    v2 = (void *)objc_opt_new(SFPeerDevice);
  else
    v2 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "uniqueIDOverride"));
  objc_msgSend(v2, "setUniqueID:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "modelIdentifier"));
  objc_msgSend(v2, "setModelIdentifier:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "productName"));
  objc_msgSend(v2, "setProductName:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "productVersion"));
  objc_msgSend(v2, "setProductVersion:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "productBuildVersion"));
  objc_msgSend(v2, "setProductBuildVersion:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "name"));
  objc_msgSend(v2, "setName:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "enclosureColor"));
  objc_msgSend(v2, "setEnclosureColor:", v9);

  objc_msgSend(v2, "setDefaultPairedDevice:", objc_msgSend(v1, "isDefaultPairedDevice"));
  return v2;
}

void sub_1000C0874(int a1, uint64_t a2, void *a3, uint64_t a4)
{
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  _QWORD v14[5];
  _QWORD v15[5];

  if (a1)
  {
    v14[0] = CFSTR("type");
    v6 = a3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
    v15[0] = v7;
    v14[1] = CFSTR("success");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
    v15[1] = v8;
    v14[2] = CFSTR("timeSinceLastRequest");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", 0));
    v15[2] = v9;
    v14[3] = CFSTR("errorCode");
    v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", a4));
    v11 = (void *)v10;
    v14[4] = CFSTR("errorDomain");
    v12 = &stru_10072FE60;
    if (v6)
      v12 = v6;
    v15[3] = v10;
    v15[4] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 5));

    SFMetricsLog(CFSTR("com.apple.sharing.continuity.activity.encryption.keyrequest"), v13);
  }
}

void sub_1000C09E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  _QWORD v13[4];

  v12[0] = CFSTR("oldKeyPresent");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1));
  v13[0] = v7;
  v12[1] = CFSTR("oldKeyCounter");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", a2));
  v13[1] = v8;
  v12[2] = CFSTR("newKeyCounter");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", a3));
  v13[2] = v9;
  v12[3] = CFSTR("timeBetweenKeyCreations");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", a4));
  v13[3] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 4));

  SFMetricsLog(CFSTR("com.apple.sharing.continuity.activity.encryption.replacementkey"), v11);
}

id sub_1000C0B20()
{
  id *v0;

  if (qword_1007C6780 != -1)
    dispatch_once(&qword_1007C6780, &stru_100716A78);
  v0 = (id *)dlsym((void *)qword_1007C6788, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6770, *v0);
  off_1007B1370 = (uint64_t (*)())sub_1000C0B98;
  return (id)qword_1007C6770;
}

id sub_1000C0B98()
{
  return (id)qword_1007C6770;
}

void sub_1000C0BA4(id a1)
{
  qword_1007C6788 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

id sub_1000C0BCC()
{
  id *v0;

  if (qword_1007C6780 != -1)
    dispatch_once(&qword_1007C6780, &stru_100716A78);
  v0 = (id *)dlsym((void *)qword_1007C6788, "UAUserActivityIsHighPriorityOptionKey");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6778, *v0);
  off_1007B1378 = (uint64_t (*)())sub_1000C0C44;
  return (id)qword_1007C6778;
}

id sub_1000C0C44()
{
  return (id)qword_1007C6778;
}

void sub_1000C0C50(void *a1, NSObject *a2)
{
  int v3;
  id v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218240;
  v4 = objc_msgSend(a1, "length");
  v5 = 2048;
  v6 = 14;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Ignoring advertisment data as it is of incorrect size %lu, expected %zu", (uint8_t *)&v3, 0x16u);
}

void sub_1000C0D4C(id a1)
{
  void *v1;

  v1 = (void *)qword_1007C6790;
  qword_1007C6790 = (uint64_t)&off_10074FA60;

}

void sub_1000C1878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C18A4(uint64_t a1)
{
  id WeakRetained;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "notifyDelegate");

}

void sub_1000C1C10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C1C34(uint64_t a1)
{
  id WeakRetained;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "notifyDelegate");

}

id sub_1000C2CD8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "notifyDelegate");
}

id sub_1000C2DC0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "notifyDelegate");
}

id sub_1000C2F0C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "notifyDelegate");
}

id sub_1000C2FF4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "notifyDelegate");
}

id sub_1000C31A0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "notifyDelegate");
}

void sub_1000C32C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000C3350;
  v4[3] = &unk_100716B60;
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(id *)(a1 + 32);
  objc_msgSend(v2, "listEligibleDevicesFor:completion:", v3, v4);

}

uint64_t sub_1000C3350(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C34DC(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "enableFor:device:passcode:sessionID:", a1[7], a1[4], a1[5], a1[6]);

}

void sub_1000C3684(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "disableFor:idsDeviceID:sessionID:", a1[6], a1[4], a1[5]);

}

void sub_1000C3828(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "authenticateFor:sessionID:options:", a1[6], a1[4], a1[5]);

}

void sub_1000C395C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "cancel:", *(_QWORD *)(a1 + 32));

}

void sub_1000C3AB0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "registerForApprovalRequestsFor:", *(_QWORD *)(a1 + 32));

}

void sub_1000C3BBC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "addAuthenticationStateChangesObserver:identifier:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1000C3CA8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "removeAuthenticationStateChangesObserverFor:", *(_QWORD *)(a1 + 32));

}

void sub_1000C3E20(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDAuthenticationManager shared](_TtC16DaemoniOSLibrary23SDAuthenticationManager, "shared"));
  objc_msgSend(v2, "reportApprovalResultWithAcmToken:error:sessionID:", a1[4], a1[5], a1[6]);

}

void sub_1000C44E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Client does not have proper entitlement to perform authentication", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000C450C(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  __int16 v7;
  unsigned int v8;
  __int16 v9;
  const __CFString *v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bundleID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCConnection currentConnection](NSXPCConnection, "currentConnection"));
  v5 = 138412802;
  v6 = v3;
  v7 = 1024;
  v8 = objc_msgSend(v4, "processIdentifier");
  v9 = 2112;
  v10 = CFSTR("com.apple.private.sharing.unlock-manager");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Client (%@-%d) does not have unlock manager entitlement = %@", (uint8_t *)&v5, 0x1Cu);

}

const __CFString *sub_1000C4BA8(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return CFSTR("?");
  else
    return *(&off_100716C48 + a1 - 1);
}

void sub_1000C4E3C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x20u);
}

void sub_1000C4E5C()
{
  os_log_t v0;
  int v1[6];

  v1[0] = 136315394;
  sub_1000C4E48();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s transferIdentifier: %@", (uint8_t *)v1, 0x16u);
}

void sub_1000C4ED8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropListener didReceiveError %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C4F4C(uint64_t a1, void *a2, NSObject *a3)
{
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  uint64_t v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  double v17;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", kSFOperationBytesCopiedKey));
  objc_msgSend(v6, "doubleValue");
  v8 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", kSFOperationTotalBytesKey));
  objc_msgSend(v9, "doubleValue");
  v12 = 138412802;
  v13 = CFSTR("Progress");
  v14 = 2112;
  v15 = a1;
  v16 = 2048;
  v17 = v8 / v10;
  sub_1000C4E3C((void *)&_mh_execute_header, a3, v11, "SDNetworkOperationCallBack (event = %@, recordID = %@, progress = %f)", (uint8_t *)&v12);

}

void sub_1000C5050(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v5;
  int v6;
  const __CFString *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v5 = a1;
  v6 = 138412802;
  v7 = sub_1000C4BA8(a1);
  v8 = 1024;
  v9 = v5;
  v10 = 2112;
  v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDNetworkOperationDelegate UNHANDLED EVENT %@ [%d] %@", (uint8_t *)&v6, 0x1Cu);
}

void sub_1000C5100()
{
  __int16 v0;
  uint64_t v1;
  NSObject *v2;
  int v3[5];
  __int16 v4;
  uint64_t v5;

  v3[0] = 138412802;
  sub_1000C4E48();
  v4 = v0;
  v5 = v1;
  sub_1000C4E3C((void *)&_mh_execute_header, v2, (uint64_t)v2, "SDNetworkOperationCallBack (event = %@, recordID = %@ , error = %@)", (uint8_t *)v3);
}

uint64_t SDAutoUnlockDeviceRegistrationStepReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  void *v24;
  uint64_t result;
  uint64_t v26;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        v9 = v5++ >= 9;
        if (v9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v12 = v6 >> 3;
      if ((v6 >> 3) == 3)
        break;
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_46;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 24;
        goto LABEL_45;
      }
      Data = PBReaderReadData(a2);
      v23 = objc_claimAutoreleasedReturnValue(Data);
      v24 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v23;

LABEL_46:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    *(_BYTE *)(a1 + 28) |= 1u;
    while (1)
    {
      v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_42;
      v18 += 7;
      v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_44:
    v26 = 8;
LABEL_45:
    *(_DWORD *)(a1 + v26) = v15;
    goto LABEL_46;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockDisableReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t String;
  uint64_t v18;
  void *v19;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      String = PBReaderReadString(a2);
      v18 = objc_claimAutoreleasedReturnValue(String);
      v19 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v18;

    }
    else if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_30;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_32:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000C6218(uint64_t a1, uint64_t a2)
{
  return SFLocalizedStringForKey(CFSTR("UNLOCK_EXPIRED_TEXT"), a2);
}

void sub_1000C6224(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  void *v24;
  double v25;
  void *v26;
  double v27;
  void *v28;
  double v29;
  void *v30;
  double v31;
  double v32;
  void *v33;
  double v34;
  double v35;
  void *v36;
  double v37;
  double v38;
  void *v39;
  double v40;
  double v41;
  void *v42;
  double v43;
  double v44;
  void *v45;
  double v46;
  double v47;
  void *v48;
  double v49;
  double v50;
  void *v51;
  double v52;
  void *v53;
  double v54;
  void *v55;
  uint64_t v56;
  void *v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  const __CFString *v73;
  uint64_t v74;
  const __CFString *v75;
  uint64_t v76;
  _UNKNOWN **v77;
  _UNKNOWN **v78;
  uint64_t v79;
  _UNKNOWN **v80;
  uint64_t v81;
  const __CFString *v82;
  _UNKNOWN **v83;
  uint64_t v84;
  _UNKNOWN **v85;
  uint64_t v86;
  _UNKNOWN **v87;
  uint64_t v88;
  _UNKNOWN **v89;
  _UNKNOWN **v90;
  _UNKNOWN **v91;
  uint64_t v92;
  _UNKNOWN **v93;
  uint64_t v94;
  _UNKNOWN **v95;
  _UNKNOWN **v96;
  uint64_t v97;
  _UNKNOWN **v98;
  uint64_t v99;
  _UNKNOWN **v100;
  uint64_t v101;
  _UNKNOWN **v102;
  const __CFString *v103;
  uint64_t v104;
  void *v105;
  const __CFString *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  void *v117;
  _UNKNOWN **v118;
  uint64_t v119;
  void *v120;
  _UNKNOWN **v121;
  uint64_t v122;
  void *v123;
  _UNKNOWN **v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  __CFString *v136;
  void *v137;
  void *v138;
  void *v139;
  __CFString *v140;
  __CFString *v141;
  __CFString *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  _UNKNOWN **v147;
  _UNKNOWN **v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  double v168;
  void *v169;
  double v170;
  void *v171;
  double v172;
  void *v173;
  double v174;
  void *v175;
  double v176;
  void *v177;
  double v178;
  void *v179;
  double v180;
  void *v181;
  void *v182;
  double v183;
  void *v184;
  double v185;
  void *v186;
  double v187;
  void *v188;
  double v189;
  void *v190;
  int v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  char v198;
  _QWORD v199[47];
  _BYTE buf[24];
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  _UNKNOWN **v217;
  _UNKNOWN **v218;
  const __CFString *v219;
  _UNKNOWN **v220;
  void *v221;
  _UNKNOWN **v222;
  _UNKNOWN **v223;
  _UNKNOWN **v224;
  _UNKNOWN **v225;
  _UNKNOWN **v226;
  _UNKNOWN **v227;
  void *v228;
  void *v229;
  _UNKNOWN **v230;
  _UNKNOWN **v231;
  _UNKNOWN **v232;
  void *v233;
  void *v234;
  _UNKNOWN **v235;
  _UNKNOWN **v236;
  const __CFString *v237;
  const __CFString *v238;
  void *v239;
  void *v240;
  void *v241;
  _UNKNOWN **v242;
  _UNKNOWN **v243;
  _UNKNOWN **v244;

  v1 = a1;
  v195 = 0;
  v196 = &v195;
  v197 = 0x2020000000;
  v198 = 0;
  v2 = SDAutoUnlockManagerMetricSuccessKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricSuccessKey));
  objc_msgSend(v3, "BOOLValue");

  v4 = SDAutoUnlockManagerMetricErrorCodeKey;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricErrorCodeKey));
  objc_msgSend(v5, "integerValue");

  v191 = *((unsigned __int8 *)v196 + 24);
  v6 = v1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("SDAutoUnlockBypassMetricLog")));
  v8 = objc_msgSend(v7, "BOOLValue");

  if ((v8 & 1) != 0)
  {
    v10 = auto_unlock_log(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Logging AutoUnlock attempt results bypassed.", buf, 2u);
    }
    goto LABEL_126;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothKeyDeviceDiscoveryKey));
  objc_msgSend(v12, "doubleValue");
  v189 = v13;

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothProxyDeviceDiscoveryKey));
  objc_msgSend(v14, "doubleValue");
  v187 = v15;

  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothProxyConnectionKey));
  objc_msgSend(v16, "doubleValue");
  v185 = v17;

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothKeyConnectionKey));
  objc_msgSend(v18, "doubleValue");
  v183 = v19;

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricPrewarmTimeKey));
  objc_msgSend(v20, "doubleValue");
  v176 = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothAWDLExchangeKey));
  objc_msgSend(v22, "doubleValue");
  v180 = v23;

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothKeyRequestExchangeKey));
  objc_msgSend(v24, "doubleValue");
  v178 = v25;

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothTokenExchangeKey));
  objc_msgSend(v26, "doubleValue");
  v174 = v27;

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAWDLBringUpKey));
  objc_msgSend(v28, "doubleValue");
  v172 = v29;

  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAWDLPeerFoundKey));
  objc_msgSend(v30, "doubleValue");
  v32 = v31;

  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAWDLRangingKey));
  objc_msgSend(v33, "doubleValue");
  v35 = v34;

  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricDisplayWaitKey));
  objc_msgSend(v36, "doubleValue");
  v38 = v37;

  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricClamshellWaitKey));
  objc_msgSend(v39, "doubleValue");
  v41 = v40;

  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricBluetoothConfirmationKey));
  objc_msgSend(v42, "doubleValue");
  v44 = v43;

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAttemptTimeKey));
  objc_msgSend(v45, "doubleValue");
  v47 = v46;

  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricTimeKey));
  objc_msgSend(v48, "doubleValue");
  v50 = v49;

  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricCancelTimeKey));
  objc_msgSend(v51, "doubleValue");
  v168 = v52;

  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricDistanceKey));
  objc_msgSend(v53, "doubleValue");
  v170 = v54;

  v55 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v194 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "lastDarkWakeDate"));

  if (v194)
  {
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v57, "timeIntervalSinceDate:", v194);
    v59 = v58;

    v60 = (uint64_t)v59;
    if ((uint64_t)v59 != -1 && v60 >= 100)
    {
      sub_1000C7C84((double)v60);
      v60 = (uint64_t)v61;
    }
  }
  else
  {
    v60 = -1;
  }
  v62 = auto_unlock_log(v56);
  v63 = objc_claimAutoreleasedReturnValue(v62);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v194;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v60;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Last dark wake (date: %@, rounded seconds: %lld)", buf, 0x16u);
  }

  v64 = SDAutoUnlockManagerMetricTimeSinceLastWakeKey;
  v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricTimeSinceLastWakeKey));
  if (objc_msgSend(v65, "integerValue"))
  {
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v64));
    v67 = (uint64_t)objc_msgSend(v66, "integerValue");

    if ((_DWORD)v67 != -1)
    {
      if ((int)v67 >= 100)
      {
        sub_1000C7C84((double)(int)v67);
        v67 = (int)v69;
      }
      goto LABEL_17;
    }
  }
  else
  {

  }
  v67 = 0xFFFFFFFFLL;
LABEL_17:
  v70 = auto_unlock_log(v68);
  v71 = objc_claimAutoreleasedReturnValue(v70);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Rounded time since last wake %d", buf, 8u);
  }

  v199[0] = CFSTR("deviceModel");
  v72 = SDAutoUnlockManagerMetricKeyDeviceModelKey;
  v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricKeyDeviceModelKey));
  if (v182)
    v73 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v72));
  else
    v73 = &stru_10072FE60;
  v141 = (__CFString *)v73;
  *(_QWORD *)buf = v73;
  v199[1] = CFSTR("proxyModel");
  v74 = SDAutoUnlockManagerMetricProxyDeviceModelKey;
  v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricProxyDeviceModelKey));
  if (v167)
    v75 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v74));
  else
    v75 = &stru_10072FE60;
  v140 = (__CFString *)v75;
  *(_QWORD *)&buf[8] = v75;
  v199[2] = CFSTR("usingProxy");
  v76 = SDAutoUnlockManagerMetricUsingProxyDeviceKey;
  v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricUsingProxyDeviceKey));
  if (v193)
    v77 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v76));
  else
    v77 = &off_10074B640;
  v139 = v77;
  *(_QWORD *)&buf[16] = v77;
  v199[3] = CFSTR("bleKeyDiscoveryTime");
  v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v189 * 1000.0)));
  v201 = v165;
  v199[4] = CFSTR("bleProxyDiscoveryTime");
  v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v187 * 1000.0)));
  v202 = v164;
  v199[5] = CFSTR("bleProxyConnectionTime");
  v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v185 * 1000.0)));
  v203 = v163;
  v199[6] = CFSTR("bleKeyConnectionTime");
  v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v183 * 1000.0)));
  v204 = v162;
  v199[7] = CFSTR("bleAWDLInfoXTime");
  v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v180 * 1000.0)));
  v205 = v161;
  v199[8] = CFSTR("bleKeyReqXTime");
  v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v178 * 1000.0)));
  v206 = v160;
  v199[9] = CFSTR("bleAuthTokXTime");
  v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v174 * 1000.0)));
  v207 = v159;
  v199[10] = CFSTR("awdlBringUpTime");
  v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v172 * 1000.0)));
  v208 = v158;
  v199[11] = CFSTR("awdlPeerDiscoveryTime");
  v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v32 * 1000.0)));
  v209 = v157;
  v199[12] = CFSTR("awdlRangingTime");
  v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v35 * 1000.0)));
  v210 = v156;
  v199[13] = CFSTR("displayWaitTime");
  v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v38 * 1000.0)));
  v211 = v155;
  v199[14] = CFSTR("clamshellWaitTime");
  v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v41 * 1000.0)));
  v212 = v154;
  v199[15] = CFSTR("bleConfTime");
  v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v44 * 1000.0)));
  v213 = v153;
  v199[16] = CFSTR("totalUnlockTime");
  v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v50 * 1000.0)));
  v214 = v152;
  v199[17] = CFSTR("prewarmTime");
  v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v176 * 1000.0)));
  v215 = v151;
  v199[18] = CFSTR("attemptTime");
  v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v47 * 1000.0)));
  v216 = v150;
  v199[19] = CFSTR("success");
  v181 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v2));
  if (v181)
    v78 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v2));
  else
    v78 = &off_10074B640;
  v138 = v78;
  v217 = v78;
  v199[20] = CFSTR("errorType");
  v79 = SDAutoUnlockManagerMetricErrorTypeKey;
  v179 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricErrorTypeKey));
  if (v179)
    v80 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v79));
  else
    v80 = &off_10074B658;
  v137 = v80;
  v218 = v80;
  v199[21] = CFSTR("errorDomain");
  v81 = SDAutoUnlockManagerMetricErrorDomainKey;
  v166 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricErrorDomainKey));
  if (v166)
    v82 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v81));
  else
    v82 = &stru_10072FE60;
  v136 = (__CFString *)v82;
  v219 = v82;
  v199[22] = CFSTR("errorCode");
  v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v4));
  if (v184)
    v83 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v4));
  else
    v83 = &off_10074B658;
  v135 = v83;
  v220 = v83;
  v199[23] = CFSTR("distance");
  v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v170 * 100.0)));
  v221 = v149;
  v199[24] = CFSTR("keyRSSI");
  v84 = SDAutoUnlockManagerMetricKeyDeviceRSSIKey;
  v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricKeyDeviceRSSIKey));
  if (v177)
    v85 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v84));
  else
    v85 = &off_10074B658;
  v134 = v85;
  v222 = v85;
  v199[25] = CFSTR("proxyRSSI");
  v86 = SDAutoUnlockManagerMetricProxyDeviceRSSIKey;
  v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricProxyDeviceRSSIKey));
  v87 = &off_10074B658;
  if (v175)
    v87 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v86));
  v133 = v87;
  v223 = v87;
  v199[26] = CFSTR("withinRange");
  v88 = SDAutoUnlockManagerMetricWithinRangeKey;
  v188 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricWithinRangeKey));
  if (v188)
    v89 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v88));
  else
    v89 = &off_10074B640;
  v132 = v89;
  v224 = v89;
  v199[27] = CFSTR("attemptPrewarmed");
  v148 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricPrewarmKey));
  v90 = v148;
  if (!v148)
    v90 = &off_10074B658;
  v225 = v90;
  v199[28] = CFSTR("detectedMask");
  v147 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricMaskKey));
  v91 = v147;
  if (!v147)
    v91 = &off_10074B658;
  v226 = v91;
  v199[29] = CFSTR("usingTool");
  v92 = SDAutoUnlockManagerMetricUsingToolKey;
  v190 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricUsingToolKey));
  if (v190)
    v93 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v92));
  else
    v93 = &off_10074B640;
  v131 = v93;
  v227 = v93;
  v199[30] = CFSTR("cancelTime");
  v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v168 * 1000.0)));
  v228 = v146;
  v199[31] = CFSTR("clamshellClosed");
  v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
  v229 = v145;
  v199[32] = CFSTR("btConnectedDevices");
  v94 = SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey;
  v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey));
  if (v173)
    v95 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v94));
  else
    v95 = &off_10074B640;
  v130 = v95;
  v230 = v95;
  v199[33] = CFSTR("lastWake");
  v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v64));
  if (v171)
    v96 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v67));
  else
    v96 = &off_10074B640;
  v129 = v96;
  v231 = v96;
  v199[34] = CFSTR("lastSleepType");
  v97 = SDAutoUnlockManagerMetricLastSleepTypeKey;
  v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricLastSleepTypeKey));
  if (v186)
    v98 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v97));
  else
    v98 = &off_10074B640;
  v128 = v98;
  v232 = v98;
  v199[35] = CFSTR("externalDisplay");
  v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v191 != 0));
  v233 = v144;
  v199[36] = CFSTR("lastDarkWake");
  v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v60));
  v234 = v143;
  v199[37] = CFSTR("cancelReason");
  v99 = SDAutoUnlockManagerMetricCancelReasonKey;
  v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricCancelReasonKey));
  if (v169)
    v100 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v99));
  else
    v100 = &off_10074B640;
  v127 = v100;
  v235 = v100;
  v199[38] = CFSTR("attemptType");
  v101 = SDAutoUnlockManagerMetricAttemptTypeKey;
  v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAttemptTypeKey));
  if (v192)
    v102 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v101));
  else
    v102 = &off_10074B640;
  v236 = v102;
  v199[39] = CFSTR("watchBuildVersion");
  v142 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricWatchBuildVersionKey, v102));
  v103 = v142;
  if (!v142)
    v103 = &stru_10072FE60;
  v237 = v103;
  v199[40] = CFSTR("watchOSVersion");
  v104 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricWatchOSVersionKey));
  v105 = (void *)v104;
  if (v104)
    v106 = (const __CFString *)v104;
  else
    v106 = &stru_10072FE60;
  v238 = v106;
  v199[41] = CFSTR("autoRelock");
  v107 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAutoRelockKey));
  v108 = (void *)v107;
  if (v107)
    v109 = (void *)v107;
  else
    v109 = &__kCFBooleanFalse;
  v239 = v109;
  v199[42] = CFSTR("manualRelock");
  v110 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricManualRelockKey));
  v111 = (void *)v110;
  if (v110)
    v112 = (void *)v110;
  else
    v112 = &__kCFBooleanFalse;
  v240 = v112;
  v199[43] = CFSTR("autoRelockWindowExpired");
  v113 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAutoRelockWindowExpiredKey));
  v114 = (void *)v113;
  if (v113)
    v115 = (void *)v113;
  else
    v115 = &__kCFBooleanFalse;
  v241 = v115;
  v199[44] = CFSTR("autoRelockTimerCanceled");
  v116 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricAutoRelockTimerCanceledKey));
  v117 = (void *)v116;
  if (v116)
    v118 = (_UNKNOWN **)v116;
  else
    v118 = &off_10074B658;
  v242 = v118;
  v199[45] = CFSTR("unintentionalAttempt");
  v119 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricUnintentionalAttemptKey));
  v120 = (void *)v119;
  if (v119)
    v121 = (_UNKNOWN **)v119;
  else
    v121 = &off_10074B640;
  v243 = v121;
  v199[46] = CFSTR("periocularStatus");
  v122 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", SDAutoUnlockManagerMetricPeriocularStatus));
  v123 = (void *)v122;
  if (v122)
    v124 = (_UNKNOWN **)v122;
  else
    v124 = &off_10074B658;
  v244 = v124;
  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, v199, 47));
  SFMetricsLog(CFSTR("com.apple.sharing.AutoUnlock.Attempt"), v125);

  if (v192)
  if (v169)

  if (v186)
  if (v171)

  if (v173)
  if (v190)

  if (v188)
  if (v175)

  if (v177)
  if (v184)

  if (v166)
  if (v179)

  if (v181)
  if (v193)

  if (v167)
  if (v182)

  v11 = v194;
LABEL_126:

  _Block_object_dispose(&v195, 8);
}

void sub_1000C7698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

uint64_t variable initialization expression of SDAirDropHashStoreCDB.destroyed()
{
  return 0;
}

void sub_1000C76C4(void *a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, unsigned int a7, unsigned int a8, double a9, double a10, void *a11, unsigned __int8 a12, unsigned int a13, unsigned __int8 a14, unsigned int a15, unsigned __int8 a16, unsigned __int8 a17, unsigned int a18, unsigned int a19, unsigned int a20,unsigned int a21,void *a22,void *a23,unsigned __int8 a24,unsigned __int8 a25)
{
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  id v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  const __CFString *v40;
  const __CFString *v41;
  uint64_t v42;
  const __CFString *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  const __CFString *v50;
  const __CFString *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v60;
  void *v61;
  void *v63;
  void *v64;
  void *v66;
  void *v67;
  __CFString *v68;
  void *v69;
  void *v70;
  void *v71;
  __CFString *v72;
  __CFString *v73;
  __CFString *v74;
  __CFString *v75;
  _QWORD v76[25];
  _QWORD v77[25];

  v31 = a1;
  v32 = a2;
  v33 = a6;
  v75 = a22;
  v74 = a23;
  if (a11)
  {
    v34 = a11;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v35, "timeIntervalSinceDate:", v34);
    v37 = v36;

    sub_1000C7C84((double)(unint64_t)v37);
    v39 = (unint64_t)v38;
  }
  else
  {
    v39 = 0;
  }
  v73 = (__CFString *)v31;
  if (v31)
    v40 = v31;
  else
    v40 = &stru_10072FE60;
  v76[0] = CFSTR("deviceModel");
  v76[1] = CFSTR("companionModel");
  v72 = (__CFString *)v32;
  if (v32)
    v41 = v32;
  else
    v41 = &stru_10072FE60;
  v77[0] = v40;
  v77[1] = v41;
  v76[2] = CFSTR("deviceLocked");
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3));
  v77[2] = v71;
  v76[3] = CFSTR("keyRequestXTime");
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (a9 * 1000.0)));
  v77[3] = v70;
  v76[4] = CFSTR("tokenXTime");
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (a10 * 1000.0)));
  v77[4] = v69;
  v76[5] = CFSTR("success");
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  v77[5] = v67;
  v76[6] = CFSTR("errorType");
  v42 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v66 = (void *)v42;
  v68 = (__CFString *)v33;
  if (v33)
    v43 = v33;
  else
    v43 = &stru_10072FE60;
  v77[6] = v42;
  v77[7] = v43;
  v76[7] = CFSTR("errorDomain");
  v76[8] = CFSTR("errorCode");
  v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a7));
  v77[8] = v63;
  v76[9] = CFSTR("watchExistedInUnlockList");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a8));
  v77[9] = v60;
  v76[10] = CFSTR("timeIntervalSinceLastWatch");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v39));
  v77[10] = v56;
  v76[11] = CFSTR("upsell");
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a12));
  v77[11] = v55;
  v76[12] = CFSTR("responseTimeout");
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a13));
  v77[12] = v57;
  v76[13] = CFSTR("responseServer");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a14));
  v77[13] = v58;
  v76[14] = CFSTR("messageTimeout");
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a15));
  v77[14] = v61;
  v76[15] = CFSTR("messageServer");
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a16));
  v77[15] = v64;
  v76[16] = CFSTR("setupRetry");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a17));
  v77[16] = v44;
  v76[17] = CFSTR("macOldLTKSyncStatus");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a18));
  v77[17] = v45;
  v76[18] = CFSTR("macNewLTKSyncStatus");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a19));
  v77[18] = v46;
  v76[19] = CFSTR("watchOldLTKSyncStatus");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a20));
  v77[19] = v47;
  v76[20] = CFSTR("watchNewLTKSyncStatus");
  v48 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a21));
  v49 = (void *)v48;
  if (v75)
    v50 = v75;
  else
    v50 = &stru_10072FE60;
  v77[20] = v48;
  v77[21] = v50;
  v76[21] = CFSTR("watchBuildVersion");
  v76[22] = CFSTR("watchOSVersion");
  if (v74)
    v51 = v74;
  else
    v51 = &stru_10072FE60;
  v77[22] = v51;
  v76[23] = CFSTR("receivedSetupACK");
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a24));
  v77[23] = v52;
  v76[24] = CFSTR("receivedTokenACK");
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a25));
  v77[24] = v53;
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 25));
  SFMetricsLog(CFSTR("com.apple.sharing.AutoUnlock.Setup"), v54);

}

void sub_1000C7C84(double a1)
{
  double v2;
  double v3;

  if (a1 != 0.0)
  {
    v2 = -a1;
    if (a1 >= 0.0)
      v2 = a1;
    v3 = log10(v2);
    __exp10((double)(int)(2 - vcvtpd_s64_f64(v3)));
  }
}

id sub_1000C7CE0(void *a1)
{
  id v1;
  SDAutoUnlockWiFiAWDLInfo *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_opt_new(SDAutoUnlockWiFiAWDLInfo);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AWDL_INFO_SUPPORTED_CHANNEL_FLAGS")));
    -[SDAutoUnlockWiFiAWDLInfo setChannelFlags:](v2, "setChannelFlags:", objc_msgSend(v3, "integerValue"));

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AWDL_INFO_ASSISTED_DISCOVERY_METRIC")));
    -[SDAutoUnlockWiFiAWDLInfo setDiscoveryMetric:](v2, "setDiscoveryMetric:", objc_msgSend(v4, "integerValue"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AWDL_IF_MAC_ADDRESS")));
    -[SDAutoUnlockWiFiAWDLInfo setMacAddress:](v2, "setMacAddress:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL")));
    -[SDAutoUnlockWiFiAWDLInfo setMasterChannel:](v2, "setMasterChannel:", objc_msgSend(v6, "integerValue"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AWDL_INFO_PREFERRED_CHANNEL")));
    -[SDAutoUnlockWiFiAWDLInfo setPreferredChannel:](v2, "setPreferredChannel:", objc_msgSend(v7, "integerValue"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AWDL_INFO_EXT")));
    -[SDAutoUnlockWiFiAWDLInfo setExtraInfoData:](v2, "setExtraInfoData:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockWiFiAWDLInfo data](v2, "data"));
  }
  else
  {
    v9 = 0;
  }
  return v9;
}

id sub_1000C7E44(void *a1)
{
  id v1;
  NSMutableDictionary *v2;
  SDAutoUnlockWiFiAWDLInfo *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v1 = a1;
  v2 = objc_opt_new(NSMutableDictionary);
  v3 = -[SDAutoUnlockWiFiAWDLInfo initWithData:]([SDAutoUnlockWiFiAWDLInfo alloc], "initWithData:", v1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[SDAutoUnlockWiFiAWDLInfo channelFlags](v3, "channelFlags")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v4, CFSTR("AWDL_INFO_SUPPORTED_CHANNEL_FLAGS"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[SDAutoUnlockWiFiAWDLInfo discoveryMetric](v3, "discoveryMetric")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v5, CFSTR("AWDL_INFO_ASSISTED_DISCOVERY_METRIC"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockWiFiAWDLInfo macAddress](v3, "macAddress"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, CFSTR("AWDL_IF_MAC_ADDRESS"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[SDAutoUnlockWiFiAWDLInfo masterChannel](v3, "masterChannel")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, CFSTR("AWDL_INFO_PEER_MASTER_CHANNEL"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", -[SDAutoUnlockWiFiAWDLInfo preferredChannel](v3, "preferredChannel")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v8, CFSTR("AWDL_INFO_PREFERRED_CHANNEL"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockWiFiAWDLInfo extraInfoData](v3, "extraInfoData"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, CFSTR("AWDL_INFO_EXT"));

  v10 = -[NSMutableDictionary copy](v2, "copy");
  return v10;
}

uint64_t variable initialization expression of HeadphoneProxFeatureClient.delegate()
{
  return 0;
}

BOOL sub_1000C7FF0(void *a1)
{
  return CFDictionaryGetInt64(objc_msgSend(a1, "advertisementFields"), CFSTR("ue"), 0) != 0;
}

BOOL sub_1000C801C(void *a1)
{
  return CFDictionaryGetInt64(objc_msgSend(a1, "advertisementFields"), CFSTR("uw"), 0) != 0;
}

BOOL sub_1000C8048(void *a1)
{
  return CFDictionaryGetInt64(objc_msgSend(a1, "advertisementFields"), CFSTR("wl"), 0) != 0;
}

id sub_1000C8074(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v1 = a1;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](NSLocale, "autoupdatingCurrentLocale"));
    objc_msgSend(v2, "setLocale:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "components:fromDate:", 2097404, v1));
    v5 = objc_msgSend(v4, "year");
    v6 = objc_msgSend(v4, "month");
    v7 = objc_msgSend(v4, "day");
    v8 = objc_msgSend(v4, "hour");
    v9 = objc_msgSend(v4, "minute");
    v10 = objc_msgSend(v4, "second");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "timeZone"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "abbreviation"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%02ld-%02ld-%02ld %02ld:%02ld:%02ld %@"), v5, v6, v7, v8, v9, v10, v12));

  }
  else
  {
    v13 = 0;
  }
  return v13;
}

uint64_t sub_1000C81E0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v0 = SFAutoUnlockManagerAutoUnlockTestModeDefault;
  if (sub_1000CE8D0(SFAutoUnlockManagerAutoUnlockTestModeDefault, 0))
    return 1;
  v2 = getuid();
  v3 = sub_1000C828C(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v0));
  v7 = objc_opt_class(NSNumber, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = objc_msgSend(v5, "BOOLValue");
  else
    v8 = objc_msgSend(v5, "isEqual:", CFSTR("1"));
  v1 = v8;

  return (uint64_t)v1;
}

id sub_1000C828C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = (void *)sub_1000CE9F0(SFAutoUnlockManagerAutoUnlockTestModeDictionary);
  v4 = objc_opt_class(NSDictionary, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%u"), a1));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v5));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

BOOL sub_1000C8330()
{
  return sub_1000CE8D0(SFAutoUnlockManagerAutoUnlockAuthorizationTestModeDefault, 0) != 0;
}

id sub_1000C835C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = SFAutoUnlockManagerAutoUnlockTestModeDuration;
  v1 = (id)sub_1000CE9F0(SFAutoUnlockManagerAutoUnlockTestModeDuration);
  if (!v1)
  {
    v2 = getuid();
    v3 = sub_1000C828C(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v0));
    v7 = objc_opt_class(NSNumber, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
      v8 = v5;
    else
      v8 = 0;
    v1 = v8;

  }
  return v1;
}

uint64_t sub_1000C83EC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v0 = SFAutoUnlockManagerAutoUnlockTestModeShouldFail;
  if (sub_1000CE8D0(SFAutoUnlockManagerAutoUnlockTestModeShouldFail, 0))
    return 1;
  v2 = getuid();
  v3 = sub_1000C828C(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v0));
  v7 = objc_opt_class(NSNumber, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = objc_msgSend(v5, "BOOLValue");
  else
    v8 = objc_msgSend(v5, "isEqual:", CFSTR("1"));
  v1 = v8;

  return (uint64_t)v1;
}

id sub_1000C8498()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = SFAutoUnlockManagerAutoUnlockTestModeFailureString;
  v1 = (id)sub_1000CE9F0(SFAutoUnlockManagerAutoUnlockTestModeFailureString);
  if (!v1)
  {
    v2 = getuid();
    v3 = sub_1000C828C(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v0));
    v7 = objc_opt_class(NSString, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
      v8 = v5;
    else
      v8 = 0;
    v1 = v8;

  }
  return v1;
}

id sub_1000C8528()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = SFAutoUnlockManagerAutoUnlockTestModePassword;
  v1 = (id)sub_1000CE9F0(SFAutoUnlockManagerAutoUnlockTestModePassword);
  if (!v1)
  {
    v2 = getuid();
    v3 = sub_1000C828C(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v0));
    v7 = objc_opt_class(NSString, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
      v8 = v5;
    else
      v8 = 0;
    v1 = v8;

  }
  return v1;
}

uint64_t sub_1000C85B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = IsAppleInternalBuild(a1, a2);
  if ((_DWORD)result)
    return sub_1000CE8D0(CFSTR("AUConnectionCacheEnabled"), 0) != 0;
  return result;
}

void sub_1000C85E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  uint64_t v7;
  NSObject *v8;
  const __CFString *v9;
  id v10;
  void *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  __CFString *v26;
  NSString *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint8_t buf[4];
  const __CFString *v40;
  __int16 v41;
  __CFString *v42;

  v5 = a2;
  v6 = a3;
  v7 = auto_unlock_log(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = CFSTR("NO");
    if ((_DWORD)a1)
      v9 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v40 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Updating enable state in dynamic store: %@", buf, 0xCu);
  }

  v10 = sub_1000C897C(0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (__CFString *)objc_msgSend(v11, "mutableCopy");

  v13 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v5));
  v14 = v13;
  if (!v13 || objc_msgSend(v13, "BOOLValue") != (_DWORD)a1)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1));
    -[__CFString setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v15, v5);

    v17 = auto_unlock_log(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    v20 = (const __CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
    if (v19)
    {
      *(_DWORD *)buf = 138412546;
      v40 = (const __CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
      v41 = 2112;
      v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating global dynamic store (key: %@, value: %@)", buf, 0x16u);
    }

    v21 = SCDynamicStoreSetValue(0, v20, v12);
    if (!(_DWORD)v21)
    {
      v22 = auto_unlock_log(v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        sub_1000CA500();

    }
  }
  v24 = sub_1000C897C(v6);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v26 = (__CFString *)objc_msgSend(v25, "mutableCopy");

  v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), getuid());
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v26, "objectForKeyedSubscript:", v28));

  if (v29)
  {
    v30 = objc_msgSend(v29, "BOOLValue");
    if ((_DWORD)v30 == (_DWORD)a1)
    {
      v38 = auto_unlock_log(v30);
      v37 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v40 = v26;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Enabled dictionary exists %@", buf, 0xCu);
      }
      goto LABEL_22;
    }
  }
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1));
  -[__CFString setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v31, v28);

  v33 = auto_unlock_log(v32);
  v34 = objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v40 = v6;
    v41 = 2112;
    v42 = v26;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Updating enabled dynamic store (key: %@, value: %@)", buf, 0x16u);
  }

  v35 = SCDynamicStoreSetValue(0, v6, v26);
  if (!(_DWORD)v35)
  {
    v36 = auto_unlock_log(v35);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      sub_1000CA500();
LABEL_22:

  }
}

id sub_1000C897C(void *a1)
{
  __CFString *v1;
  CFPropertyListRef v2;
  void *v3;
  CFTypeID v4;
  void *v5;
  id v6;

  v1 = a1;
  if (!v1)
    v1 = (__CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
  v2 = SCDynamicStoreCopyValue(0, v1);
  v3 = (void *)v2;
  if (v2)
  {
    v4 = CFGetTypeID(v2);
    if (v4 != CFDictionaryGetTypeID())
    {
      CFRelease(v3);
      v3 = 0;
    }
  }
  if (v3)
    v5 = v3;
  else
    v5 = &__NSDictionary0__struct;
  v6 = v5;

  return v6;
}

void sub_1000C8A18(uint64_t a1)
{
  sub_1000C85E8(a1, SFAutoUnlockDynamicStoreEnabledKey, SFAutoUnlockDynamicStoreEnabledPath);
}

void sub_1000C8A34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const __CFString *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const __CFString *v15;
  id v16;
  void *v17;
  id v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t buf[4];
  const __CFString *v27;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CFSTR("NO");
    if ((_DWORD)a1)
      v4 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating in progress state in dynamic store: %@", buf, 0xCu);
  }

  v5 = sub_1000C897C(0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v6, "mutableCopy");

  v8 = SFAutoUnlockDynamicStoreInProgressKey;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", SFAutoUnlockDynamicStoreInProgressKey));
  v10 = v9;
  if (!v9 || objc_msgSend(v9, "BOOLValue") != (_DWORD)a1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, v8);

    v12 = SCDynamicStoreSetValue(0, SFAutoUnlockDynamicStoreSharingDomainKey, v7);
    if (!(_DWORD)v12)
    {
      v13 = auto_unlock_log(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000CA568();

    }
  }
  v15 = (const __CFString *)SFAutoUnlockDynamicStoreInProgressPath;
  v16 = sub_1000C897C(SFAutoUnlockDynamicStoreInProgressPath);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v18 = objc_msgSend(v17, "mutableCopy");

  v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), getuid());
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v20));

  if (!v21 || objc_msgSend(v21, "BOOLValue") != (_DWORD)a1)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v22, v20);

    v23 = SCDynamicStoreSetValue(0, v15, v18);
    if (!(_DWORD)v23)
    {
      v24 = auto_unlock_log(v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        sub_1000CA568();

    }
  }

}

id sub_1000C8CB4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *a1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringValue"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a1[1]));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringValue"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".%@"), v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", v6));

  if ((uint64_t)a1[2] >= 1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringValue"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".%@"), v9));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAppendingString:", v10));

    v7 = (void *)v11;
  }

  return v7;
}

uint64_t sub_1000C8DEC(char a1)
{
  if ((a1 - 1) > 7u)
    return 0;
  else
    return qword_1005CC700[(char)(a1 - 1)];
}

NSString *sub_1000C8E18(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Trigger");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    v1 = CFSTR("Attempt");
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("AutoUnlock-%@"), v1);
}

uint64_t sub_1000C8E68()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  void *v3;
  uint64_t v4;

  v0 = (const __CFBoolean *)CFPreferencesCopyAppValue(CFSTR("allowAutoUnlock"), CFSTR("com.apple.applicationaccess"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
      CFBooleanGetValue(v1);
    CFRelease(v1);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
  v4 = objc_msgSend(v3, "isAutoUnlockAllowed") ^ 1;

  return v4;
}

id sub_1000C8EE4(char *a1)
{
  return sub_1000C8EFC(a1, CFSTR("au-setup-response-timeout"), CFSTR("au-setup-response-timeout-percentage"), (id)0x3C);
}

id sub_1000C8EFC(char *a1, void *a2, void *a3, id a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t isKindOfClass;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  NSObject *v24;
  char v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v31;
  int v32;
  unint64_t v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;

  v7 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](IDSServerBag, "sharedInstance"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v7));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](IDSServerBag, "sharedInstance"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", v8));

  if (!v10
    || (v15 = objc_opt_class(NSNumber, v14),
        isKindOfClass = objc_opt_isKindOfClass(v10, v15),
        (isKindOfClass & 1) == 0)
    || !v12
    || (v17 = objc_opt_class(NSNumber, v16),
        isKindOfClass = objc_opt_isKindOfClass(v12, v17),
        (isKindOfClass & 1) == 0))
  {
    v26 = auto_unlock_log(isKindOfClass);
    v24 = objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:
      v25 = 0;
      goto LABEL_16;
    }
    v32 = 134218754;
    v33 = (unint64_t)a4;
    v34 = 2112;
    v35 = v7;
    v36 = 2112;
    v37 = v10;
    v38 = 2112;
    v39 = v12;
    v27 = "Using default value for timeout (default value: %ld, timeout key: %@, server timeout: %@, timeout percentage %@)";
    v28 = v24;
    v29 = 42;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v32, v29);
    goto LABEL_15;
  }
  v18 = auto_unlock_log(isKindOfClass);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v32 = 138412802;
    v33 = (unint64_t)v7;
    v34 = 2112;
    v35 = v10;
    v36 = 2112;
    v37 = v12;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "IDS server bag contains keys (timeout key: %@, server timeout: %@, timeout percentage %@)", (uint8_t *)&v32, 0x20u);
  }

  v20 = objc_msgSend(v12, "integerValue");
  v21 = arc4random_uniform(0x64u);
  v22 = v21;
  if ((unint64_t)v20 > 0x64 || (unint64_t)v20 <= v21)
  {
    v31 = auto_unlock_log(v21);
    v24 = objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    v32 = 134217984;
    v33 = v22;
    v27 = "Using default timeout (random number: %ld)";
    v28 = v24;
    v29 = 12;
    goto LABEL_14;
  }
  a4 = objc_msgSend(v10, "integerValue");
  v23 = auto_unlock_log(a4);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v32 = 134217984;
    v33 = v22;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Using server timeout (random number: %ld)", (uint8_t *)&v32, 0xCu);
  }
  v25 = 1;
LABEL_16:

  if (a1)
    *a1 = v25;

  return a4;
}

id sub_1000C91D4(char *a1)
{
  return sub_1000C8EFC(a1, CFSTR("au-setup-message-timeout"), CFSTR("au-setup-message-timeout-percentage"), (id)0x2D);
}

double sub_1000C91F4()
{
  double v0;
  double Current;
  double v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v8;
  double v9;
  uint8_t buf[4];
  void *v11;

  v8 = 0;
  v9 = 0.0;
  v0 = 0.0;
  if (!IOPMGetLastWakeTime(&v9, &v8))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v2 = v9;
    v4 = auto_unlock_log(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v9));
      *(_DWORD *)buf = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Last machine wake date %@", buf, 0xCu);

    }
    v0 = Current - v2;

  }
  return v0;
}

const __CFString *sub_1000C92E0()
{
  return CFSTR("UnknownSleepType");
}

BOOL sub_1000C92EC(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = sub_1000C9334(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = v2;
  if (v2)
    v4 = (int)objc_msgSend(v2, "intValue") > 2;
  else
    v4 = 0;

  return v4;
}

id sub_1000C9334(void *a1)
{
  void *v1;
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(",")));
  if ((unint64_t)objc_msgSend(v1, "count") < 2)
  {
    v5 = 0;
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", 0));
    v3 = (char *)objc_msgSend(v2, "rangeOfString:", CFSTR("Watch"));
    if (v4)
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "substringFromIndex:", &v3[v4]));
    else
      v5 = 0;

  }
  return v5;
}

BOOL sub_1000C93C8(void *a1)
{
  double v1;

  objc_msgSend(a1, "doubleValue");
  return v1 >= 7.4;
}

id sub_1000C93EC(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  __CFString **v11;
  const __CFString *v12;
  uint64_t v13;
  void *v14;

  v3 = a2;
  v4 = sub_1000C9334(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("1"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("#")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByRemovingCharactersFromSet:", v7));

  v10 = (unint64_t)objc_msgSend(v8, "integerValue") - 5;
  if (!v6)
  {
    if (v10 < 0xA)
    {
      v11 = &off_100716D58;
      goto LABEL_6;
    }
LABEL_7:
    v12 = CFSTR("UNLOCK_WATCH_ALUMINUM");
    goto LABEL_8;
  }
  if (v10 >= 6)
    goto LABEL_7;
  v11 = &off_100716D28;
LABEL_6:
  v12 = v11[v10];
LABEL_8:
  v13 = SFLocalizedStringForKey(v12, v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  return v14;
}

NSMutableArray *sub_1000C94D0(void *a1)
{
  id v1;
  int v2;
  NSMutableArray *v3;
  unint64_t v4;
  _UNKNOWN **v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  __CFString *v34;
  void *v35;
  void *v36;
  const __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  const __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  __CFString *v49;
  void *v50;
  NSMutableArray *v52;
  int v53;
  unint64_t v54;
  __CFString *v55;
  id v56;
  __CFString *v57;
  __CFString *v58;
  __CFString *v59;
  unsigned int v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67[2];

  v1 = a1;
  v2 = sub_1000CE8D0(CFSTR("AUAlwaysShowModelDescription"), 0);
  v3 = objc_opt_new(NSMutableArray);
  if (objc_msgSend(v1, "count"))
  {
    v4 = 0;
    v5 = NSLocale_ptr;
    v56 = v1;
    v53 = v2;
    v52 = v3;
    do
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", v4));
      v7 = v6;
      if (v2)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "modelIdentifier"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "enclosureColor"));
        v10 = sub_1000C93EC(v8, v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "modelIdentifier"));
        v66 = 0;
        v67[0] = 0;
        sub_1000C9ABC(v12, v67, &v66);
        v13 = v67[0];
        v14 = v66;

        if (objc_msgSend(v14, "length"))
          v15 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[26], "stringWithFormat:", CFSTR(", %@"), v14));
        else
          v15 = &stru_10072FE60;

        if (objc_msgSend(v13, "length"))
          v49 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[26], "stringWithFormat:", CFSTR(", %@"), v13));
        else
          v49 = &stru_10072FE60;

        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[26], "stringWithFormat:", CFSTR("(%@%@%@)"), v11, v15, v49));
        objc_msgSend(v7, "setModelDescription:", v50);

        -[NSMutableArray addObject:](v3, "addObject:", v7);
        v1 = v56;
      }
      else
      {
        v54 = v4;
        while ((unint64_t)objc_msgSend(v1, "count") > ++v4)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", v4));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "name"));
          v19 = objc_msgSend(v17, "isEqualToString:", v18);

          if (v19)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "modelIdentifier"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "enclosureColor"));
            v22 = sub_1000C93EC(v20, v21);
            v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

            v24 = v23;
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "modelIdentifier"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "enclosureColor"));
            v27 = sub_1000C93EC(v25, v26);
            v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

            v29 = v28;
            v61 = v24;
            if (objc_msgSend(v24, "isEqualToString:", v29))
            {
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "modelIdentifier"));
              v65 = 0;
              v64 = 0;
              sub_1000C9ABC(v30, &v65, &v64);
              v58 = (__CFString *)v65;
              v31 = v64;

              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "modelIdentifier"));
              v62 = 0;
              v63 = 0;
              sub_1000C9ABC(v32, &v63, &v62);
              v59 = (__CFString *)v63;
              v33 = v62;

              if (objc_msgSend(v31, "length"))
                v34 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(", %@"), v31));
              else
                v34 = &stru_10072FE60;

              if (objc_msgSend(v33, "length"))
                v37 = (const __CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(", %@"), v33));
              else
                v37 = &stru_10072FE60;

              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringByAppendingString:", v34));
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringByAppendingString:", v37));

              v57 = (__CFString *)v37;
              v60 = -[__CFString isEqualToString:](v34, "isEqualToString:", v37);
              if (v60)
              {
                if (-[__CFString length](v58, "length"))
                  v38 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(", %@"), v58));
                else
                  v38 = &stru_10072FE60;

                v55 = v34;
                if (-[__CFString length](v59, "length"))
                  v40 = (const __CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(", %@"), v59));
                else
                  v40 = &stru_10072FE60;

                v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "stringByAppendingString:", v38));
                v42 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "stringByAppendingString:", v40));

                v35 = (void *)v41;
                v36 = (void *)v42;
                v39 = (__CFString *)v40;
                v34 = v55;
                v1 = v56;
              }
              else
              {
                v38 = v58;
                v39 = v59;
              }

            }
            else
            {
              v60 = 0;
              v35 = v24;
              v36 = v29;
            }
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "modelDescription"));
            v44 = objc_msgSend(v43, "length");
            v45 = objc_msgSend(v35, "length");

            if (v44 < v45)
              objc_msgSend(v7, "setModelDescription:", v35);
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "modelDescription"));
            v47 = objc_msgSend(v46, "length");
            v48 = objc_msgSend(v36, "length");

            if (v47 < v48)
              objc_msgSend(v16, "setModelDescription:", v36);

            if (v60)
            {

              break;
            }
          }

        }
        v3 = v52;
        -[NSMutableArray addObject:](v52, "addObject:", v7);
        v2 = v53;
        v4 = v54;
        v5 = NSLocale_ptr;
      }

      ++v4;
    }
    while ((unint64_t)objc_msgSend(v1, "count") > v4);
  }

  return v3;
}

void sub_1000C9ABC(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  int v11;
  uint64_t v12;
  const __CFString *v13;
  int v14;
  int v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  __CFString *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *i;
  void *v31;
  uint64_t v32;
  const __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __CFString *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  unsigned __int8 v45;
  uint64_t v46;
  void *j;
  void *v48;
  uint64_t v49;
  const __CFString *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  __CFString *v61;
  __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  uint8_t v74[128];
  uint8_t buf[4];
  __CFString *v76;
  __int16 v77;
  id v78;

  v5 = a1;
  if (qword_1007C67A8 != -1)
    dispatch_once(&qword_1007C67A8, &stru_100716D08);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1007C67A0, "objectForKeyedSubscript:", v5));
  v7 = (char *)objc_msgSend(v6, "integerValue");

  if ((unint64_t)(v7 - 1) > 6)
  {
    v10 = &stru_10072FE60;
  }
  else
  {
    v9 = SFLocalizedStringForKey(*(&off_100716DA8 + (_QWORD)(v7 - 1)), v8);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(v9);
  }
  if (objc_msgSend(v5, "hasPrefix:", CFSTR("Watch5,")))
  {
    v11 = SFMinorWatchHardwareVersion(v5);
    if ((v11 - 1) <= 3)
    {
      v13 = CFSTR("UNLOCK_WATCH_SERIES_FIVE");
LABEL_24:
      v19 = SFLocalizedStringForKey(v13, v12);
      v18 = objc_claimAutoreleasedReturnValue(v19);
      goto LABEL_25;
    }
    if ((v11 - 9) > 3)
      goto LABEL_30;
LABEL_23:
    v13 = CFSTR("UNLOCK_WATCH_SE");
    goto LABEL_24;
  }
  if (objc_msgSend(v5, "hasPrefix:", CFSTR("Watch6,")))
  {
    v14 = SFMinorWatchHardwareVersion(v5);
    if ((v14 - 1) <= 3)
    {
      v13 = CFSTR("UNLOCK_WATCH_SERIES_SIX");
      goto LABEL_24;
    }
    if ((v14 - 6) <= 3)
    {
      v13 = CFSTR("UNLOCK_WATCH_SERIES_SEVEN");
      goto LABEL_24;
    }
    if ((v14 - 10) > 3)
    {
      if ((v14 - 14) <= 3)
      {
        v13 = CFSTR("UNLOCK_WATCH_SERIES_EIGHT");
        goto LABEL_24;
      }
      if (v14 == 18)
      {
        v13 = CFSTR("UNLOCK_WATCH_ULTRA");
        goto LABEL_24;
      }
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  if (objc_msgSend(v5, "hasPrefix:", CFSTR("Watch7,")))
  {
    v15 = SFMinorWatchHardwareVersion(v5);
    if ((v15 - 1) > 3)
    {
      if (v15 != 5)
        goto LABEL_30;
      v16 = CFSTR("UNLOCK_WATCH_ULTRA_TWO");
    }
    else
    {
      v16 = CFSTR("UNLOCK_WATCH_SERIES_NINE");
    }
    v17 = SFLocalizedStringForKeyInStringsFileNamed(v16, CFSTR("Localizable-N210"));
    v18 = objc_claimAutoreleasedReturnValue(v17);
LABEL_25:
    v20 = (__CFString *)v18;
    goto LABEL_31;
  }
LABEL_30:
  v20 = &stru_10072FE60;
LABEL_31:
  v21 = (__CFString *)_LSCreateDeviceTypeIdentifierWithModelCode(v5);
  v22 = auto_unlock_log(v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v76 = v21;
    v77 = 2112;
    v78 = v5;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "UTI %@ for modelIdentifier %@", buf, 0x16u);
  }

  if (v21)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString componentsSeparatedByString:](v21, "componentsSeparatedByString:", CFSTR("-")));
    if (-[__CFString length](v10, "length"))
    {
      v63 = v10;
    }
    else
    {
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v26 = v25;
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
      if (!v27)
        goto LABEL_51;
      v28 = v27;
      v61 = v20;
      v64 = v10;
      v59 = a2;
      v29 = *(_QWORD *)v70;
      while (2)
      {
        for (i = 0; i != v28; i = (char *)i + 1)
        {
          if (*(_QWORD *)v70 != v29)
            objc_enumerationMutation(v26);
          v31 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v31, "containsString:", CFSTR("mm")))
          {
            if ((objc_msgSend(v31, "containsString:", CFSTR("38")) & 1) != 0)
            {
              v33 = CFSTR("UNLOCK_WATCH_COMPACT_SIZE");
              a2 = v59;
              v20 = v61;
              v10 = v64;
            }
            else
            {
              v20 = v61;
              v10 = v64;
              if ((objc_msgSend(v31, "containsString:", CFSTR("42")) & 1) == 0)
              {
                a2 = v59;
                goto LABEL_51;
              }
              v33 = CFSTR("UNLOCK_WATCH_REGULAR_SIZE");
              a2 = v59;
            }
            v34 = SFLocalizedStringForKey(v33, v32);
            v35 = objc_claimAutoreleasedReturnValue(v34);

            v10 = (__CFString *)v35;
            goto LABEL_51;
          }
        }
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
        if (v28)
          continue;
        break;
      }
      a2 = v59;
      v20 = v61;
      v10 = v64;
LABEL_51:
      v63 = v10;

    }
    v36 = a3;
    v37 = (__CFString *)UTTypeCopyDescription(v21);
    v38 = auto_unlock_log(v37);
    v39 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v76 = v37;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Description %@", buf, 0xCu);
    }

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString componentsSeparatedByCharactersInSet:](v37, "componentsSeparatedByCharactersInSet:", v40));

    if (!-[__CFString length](v20, "length"))
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v42 = v41;
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
      if (!v43)
        goto LABEL_78;
      v44 = v43;
      v60 = a2;
      v62 = v20;
      v58 = v36;
      v45 = 0;
      v46 = *(_QWORD *)v66;
      while (2)
      {
        for (j = 0; j != v44; j = (char *)j + 1)
        {
          if (*(_QWORD *)v66 != v46)
            objc_enumerationMutation(v42);
          v48 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)j);
          if ((v45 & 1) != 0)
          {
            if ((objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)j), "containsString:", CFSTR("1")) & 1) != 0)
            {
              v50 = CFSTR("UNLOCK_WATCH_SERIES_ONE");
              v36 = v58;
              a2 = v60;
              v20 = v62;
            }
            else
            {
              v36 = v58;
              v20 = v62;
              if ((objc_msgSend(v48, "containsString:", CFSTR("2")) & 1) != 0)
              {
                v50 = CFSTR("UNLOCK_WATCH_SERIES_TWO");
              }
              else if ((objc_msgSend(v48, "containsString:", CFSTR("3")) & 1) != 0)
              {
                v50 = CFSTR("UNLOCK_WATCH_SERIES_THREE");
              }
              else if ((objc_msgSend(v48, "containsString:", CFSTR("4")) & 1) != 0)
              {
                v50 = CFSTR("UNLOCK_WATCH_SERIES_FOUR");
              }
              else if ((objc_msgSend(v48, "containsString:", CFSTR("5")) & 1) != 0)
              {
                v50 = CFSTR("UNLOCK_WATCH_SERIES_FIVE");
              }
              else
              {
                if ((objc_msgSend(v48, "containsString:", CFSTR("6")) & 1) == 0)
                {
                  a2 = v60;
                  goto LABEL_78;
                }
                v50 = CFSTR("UNLOCK_WATCH_SERIES_SIX");
              }
              a2 = v60;
            }
            v51 = SFLocalizedStringForKey(v50, v49);
            v52 = objc_claimAutoreleasedReturnValue(v51);

            v20 = (__CFString *)v52;
            goto LABEL_78;
          }
          v45 = objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)j), "containsString:", CFSTR("Series"));
        }
        v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
        if (v44)
          continue;
        break;
      }
      v36 = v58;
      a2 = v60;
      v20 = v62;
LABEL_78:

    }
    a3 = v36;
    v10 = v63;
  }
  v53 = auto_unlock_log(v24);
  v54 = objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v76 = v10;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Watch Size %@", buf, 0xCu);
  }

  v56 = auto_unlock_log(v55);
  v57 = objc_claimAutoreleasedReturnValue(v56);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v76 = v20;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Series %@", buf, 0xCu);
  }

  if (a2)
    *a2 = objc_retainAutorelease(v10);
  if (a3)
    *a3 = objc_retainAutorelease(v20);

}

id sub_1000CA1EC(void *a1)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  objc_msgSend(a1, "getUUIDBytes:", v2);
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v2, 16));
}

void sub_1000CA254(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = a1;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[BMStreams discoverabilitySignal](BMStreams, "discoverabilitySignal"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "source"));
  v3 = objc_msgSend(objc_alloc((Class)BMDiscoverabilitySignalEvent), "initWithIdentifier:bundleID:context:", v1, CFSTR("com.apple.sharingd"), 0);

  objc_msgSend(v2, "sendEvent:", v3);
}

id sub_1000CA2E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v16;
  void *v17;
  void *v18;
  _QWORD v19[2];

  v19[0] = CFSTR("com.apple.faceid.face-covering.detected");
  v19[1] = CFSTR("com.apple.faceid.any-face-covering.detected");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[_DKQuery predicateForEventsWithStringValueInValues:](_DKQuery, "predicateForEventsWithStringValueInValues:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[_DKKnowledgeStore knowledgeStore](_DKKnowledgeStore, "knowledgeStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[_DKSystemEventStreams discoverabilitySignalsStream](_DKSystemEventStreams, "discoverabilitySignalsStream"));
  v18 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("startDate"), 0));
  v17 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[_DKEventQuery eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:](_DKEventQuery, "eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:", v3, v6, 0, a1, v8));

  if (v9)
  {
    v16 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeQuery:error:", v9, &v16));
    v11 = v16;
    v12 = v11;
    if (v11)
    {
      v13 = auto_unlock_log(v11);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1000CA5D0((uint64_t)v12, v14);

    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1000CA4D4(id a1)
{
  void *v1;

  v1 = (void *)qword_1007C67A0;
  qword_1007C67A0 = (uint64_t)&off_10074E378;

}

uint64_t sub_1000CA4F8()
{
  return SCError();
}

void sub_1000CA500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000CA4F8();
  sub_100020208();
  sub_10009CE04((void *)&_mh_execute_header, v0, v1, "Failed to set global enabled state %d", v2, v3, v4, v5, v6);
  sub_1000CA4EC();
}

void sub_1000CA568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000CA4F8();
  sub_100020208();
  sub_10009CE04((void *)&_mh_execute_header, v0, v1, "Failed to set in progress state %d", v2, v3, v4, v5, v6);
  sub_1000CA4EC();
}

void sub_1000CA5D0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error fetching mask detected events: %@", (uint8_t *)&v2, 0xCu);
}

uint64_t SDUnlockLockStateUpdatedReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0)
          goto LABEL_40;
        v17 += 7;
        v9 = v18++ >= 9;
        if (v9)
        {
          v19 = 0;
          goto LABEL_42;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v19 = 0;
LABEL_42:
      *(_BYTE *)(a1 + 12) = v19 != 0;
    }
    else if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_36;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_38:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000CB7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CB7E0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerImport");

}

Class sub_1000CBD40()
{
  Class result;

  if (qword_1007C67B8 != -1)
    dispatch_once(&qword_1007C67B8, &stru_100716E08);
  result = objc_getClass("EKEventStore");
  qword_1007C67B0 = (uint64_t)result;
  off_1007B1560[0] = (uint64_t (*)())sub_1000CBD9C;
  return result;
}

id sub_1000CBD9C()
{
  return (id)qword_1007C67B0;
}

void sub_1000CBDA8(id a1)
{
  qword_1007C67C0 = (uint64_t)dlopen("/System/Library/Frameworks/EventKit.framework/EventKit", 2);
}

void sub_1000CBE44(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1007C67C8;
  qword_1007C67C8 = (uint64_t)v1;

}

void sub_1000CC118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_time_t v5;
  _QWORD v6[6];

  v5 = sub_10019AAC0(5.0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000CD884;
  v6[3] = &unk_100716EC8;
  v6[4] = a2;
  v6[5] = a3;
  dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, v6);
}

id sub_1000CCEEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "cancelAllOperations");
}

void sub_1000CCEF4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32)));
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(*(id *)(a1 + 48), "addIconPropertiesWithImage:toFakeTransferData:", SFScaleAndRotateImage(540.0), v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "askEventForRecordID:withResults:", *(_QWORD *)(a1 + 56), v2);

}

id sub_1000CCF6C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_publish");
  objc_msgSend(*(id *)(a1 + 32), "setSf_transferState:", 3);
  objc_msgSend(*(id *)(a1 + 32), "setTotalUnitCount:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", 0);
}

void sub_1000CCFAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(int *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 64) * v2;
  v4 = vcvtps_s32_f32(*(float *)(a1 + 84) - (float)(*(float *)(a1 + 88) * (float)(int)v2));
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", v3);
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v4));
  objc_msgSend(v5, "setUserInfoObject:forKey:", v6, NSProgressEstimatedTimeRemainingKey);

  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 48), "addProgressPropertiesWithBytesCopied:totalBytes:timeRemaining:filesCopied:toFakeTransferData:", v3, *(_QWORD *)(a1 + 72), v4, 0, v7);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "progressEventForRecordID:withResults:", *(_QWORD *)(a1 + 56), v7);

}

void sub_1000CD088(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", *(_QWORD *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 32), "setSf_transferState:", 6);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 48), "addProgressPropertiesWithBytesCopied:totalBytes:timeRemaining:filesCopied:toFakeTransferData:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 72), 0, 0);
  if (*(_BYTE *)(a1 + 80))
    objc_msgSend(*(id *)(a1 + 48), "replaceItemsWithItems:inFakeTransferData:", *(_QWORD *)(a1 + 56), v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "finishedEventForRecordID:withResults:", *(_QWORD *)(a1 + 64), v2);

}

id sub_1000CD124(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unpublish");
}

void sub_1000CD2E4(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  dispatch_semaphore_t v10;

  usleep((float)((float)(*(float *)(a1 + 40) * 1000.0) * 1000.0));
  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = sub_1000CD3D0;
  v9 = sub_1000CD3E0;
  v10 = 0;
  v10 = dispatch_semaphore_create(1);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000CD3E8;
  v2[3] = &unk_100716E80;
  v3 = *(id *)(a1 + 32);
  v4 = &v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  dispatch_semaphore_wait((dispatch_semaphore_t)v6[5], 0xFFFFFFFFFFFFFFFFLL);

  _Block_object_dispose(&v5, 8);
}

uint64_t sub_1000CD3D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000CD3E0(uint64_t a1)
{

}

intptr_t sub_1000CD3E8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1000CD884(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v1 = *(void **)(a1 + 40);
  v2 = *(id *)(a1 + 32);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("com.apple.sharingd.fake.transfer."), &stru_10072FE60));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsSeparatedByString:", CFSTR(".")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
  v5 = objc_msgSend(v4, "integerValue");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 1));
  v7 = objc_msgSend(v6, "integerValue");

  objc_msgSend(v2, "startFakeTransferInCategory:ofType:", v5, v7);
}

void sub_1000CD94C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218240;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "startFakeTransferInCategory fakeTransfer %ld.%ld itemSources is nil", (uint8_t *)&v3, 0x16u);
}

void sub_1000CD9D0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "startFakeTransferWithItems: failed to get Downloads folder", v1, 2u);
}

void sub_1000CDA10(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "startFakeTransferWithItems createDirectoryAtURL failed %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000CDA84(id a1)
{
  const __CFURL *v1;
  const __CFURL *v2;

  qword_1007C67E0 = (uint64_t)CFBundleGetBundleWithIdentifier(CFSTR("com.apple.Sharing"));
  if (!qword_1007C67E0)
  {
    v1 = CFURLCreateWithFileSystemPath(0, CFSTR("/System/Library/PrivateFrameworks/Sharing.framework"), kCFURLPOSIXPathStyle, 1u);
    if (v1)
    {
      v2 = v1;
      qword_1007C67E0 = (uint64_t)CFBundleCreate(0, v1);
      CFRelease(v2);
    }
  }
}

CFStringRef sub_1000CDAF0(const __CFString *a1)
{
  return sub_1000CDAFC(a1, CFSTR("Localizable"));
}

CFStringRef sub_1000CDAFC(const __CFString *cf, CFStringRef tableName)
{
  const __CFAllocator *v5;

  if (qword_1007C67D8 != -1)
    dispatch_once(&qword_1007C67D8, &stru_100716FA8);
  if (qword_1007C67E0)
    return CFBundleCopyLocalizedString((CFBundleRef)qword_1007C67E0, cf, cf, tableName);
  v5 = CFGetAllocator(cf);
  return CFStringCreateCopy(v5, cf);
}

__CFSet *sub_1000CDB74(const __CFAllocator *a1, CFIndex a2, CFBagRef theBag)
{
  CFIndex Count;
  uint64_t v7;
  size_t v8;
  const void **v9;
  __CFSet *Mutable;
  const void *v11;
  uint64_t v13;

  if (!theBag)
    return 0;
  Count = CFBagGetCount(theBag);
  if (!Count)
    return 0;
  v7 = Count;
  __chkstk_darwin();
  v9 = (const void **)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v9, v8);
  CFBagGetValues(theBag, v9);
  Mutable = CFSetCreateMutable(a1, a2, &kCFTypeSetCallBacks);
  if (v7 >= 1)
  {
    do
    {
      v11 = *v9++;
      CFSetSetValue(Mutable, v11);
      --v7;
    }
    while (v7);
  }
  return Mutable;
}

void sub_1000CDC74(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (value)
    CFDictionarySetValue(theDict, key, value);
  else
    CFDictionaryRemoveValue(theDict, key);
}

uint64_t sub_1000CDC80(const void *a1)
{
  if (CFEqual(a1, kSFNodeProtocolAFP))
    return 548;
  if (CFEqual(a1, kSFNodeProtocolSMB))
    return 445;
  if (CFEqual(a1, kSFNodeProtocolVNC))
    return 5900;
  if (CFEqual(a1, kSFNodeProtocolODisk) || CFEqual(a1, kSFNodeProtocolWebDAV))
    return 80;
  if (CFEqual(a1, kSFNodeProtocolWebDAVS))
    return 443;
  if (CFEqual(a1, kSFNodeProtocolNFS))
    return 2049;
  if (CFEqual(a1, kSFNodeProtocolFTP))
    return 21;
  if (CFEqual(a1, kSFNodeProtocolFTPS))
    return 990;
  if (CFEqual(a1, kSFNodeProtocolHTTP))
    return 80;
  if (CFEqual(a1, kSFNodeProtocolHTTPS))
    return 443;
  if (CFEqual(a1, kSFNodeProtocolADisk))
    return 548;
  else
    return 0xFFFFFFFFLL;
}

const __CFURL *sub_1000CDE00(const void *a1, const __CFString *a2, const __CFString *a3, __CFString *MutableCopy, int a5, const __CFString *a6, const __CFDictionary *a7, int a8)
{
  const void **v16;
  const void *v17;
  int v18;
  CFIndex Length;
  CFMutableStringRef Mutable;
  int v21;
  const __CFString *v22;
  const __CFString *v23;
  CFStringRef v24;
  CFIndex Count;
  uint64_t v26;
  size_t v27;
  const void **v28;
  __CFString *v29;
  uint64_t v30;
  const void *v31;
  const void *Value;
  const __CFURL *v33;
  const __CFURL *v34;
  char v35;
  NSObject *v36;
  const void *v38;
  uint64_t v39;
  int v40;
  const __CFString *v41;
  int v42;
  CFErrorRef error;
  CFRange v44;
  CFRange v45;

  if (CFEqual(a1, kSFNodeProtocolWebDAV) || CFEqual(a1, kSFNodeProtocolODisk))
  {
    v16 = (const void **)&kSFNodeProtocolHTTP;
LABEL_4:
    v17 = *v16;
    goto LABEL_5;
  }
  v38 = (const void *)kSFNodeProtocolAirDrop;
  CFEqual(a1, kSFNodeProtocolAirDrop);
  if (CFEqual(a1, kSFNodeProtocolWebDAVS) || (v17 = a1, CFEqual(a1, v38)))
  {
    v16 = (const void **)&kSFNodeProtocolHTTPS;
    goto LABEL_4;
  }
LABEL_5:
  v18 = sub_1000CDC80(a1);
  if (a2)
    a2 = CFURLCreateStringByAddingPercentEscapes(0, a2, 0, CFSTR(";:@?/"), 0x8000100u);
  if (a3)
    a3 = CFURLCreateStringByAddingPercentEscapes(0, a3, 0, CFSTR(";:@?/"), 0x8000100u);
  if (CFStringHasPrefix(MutableCopy, CFSTR("[")) && CFStringHasSuffix(MutableCopy, CFSTR("]")))
  {
    Length = CFStringGetLength(MutableCopy);
    MutableCopy = CFStringCreateMutableCopy(0, Length, MutableCopy);
    v45.length = CFStringGetLength(MutableCopy);
    v45.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("%"), CFSTR("%25"), v45, 0);
  }
  else if (MutableCopy)
  {
    MutableCopy = (__CFString *)CFURLCreateStringByAddingPercentEscapes(0, MutableCopy, 0, CFSTR(";:@?/"),
                                  0x8000100u);
  }
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@://"), v17);
  if (!a2)
  {
    if (!a3)
    {
      v21 = 1;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  CFStringAppend(Mutable, a2);
  if (a3)
  {
LABEL_18:
    CFStringAppendFormat(Mutable, 0, CFSTR(":%@"), a3);
    v21 = 0;
    goto LABEL_19;
  }
  v21 = 1;
LABEL_19:
  CFStringAppend(Mutable, CFSTR("@"));
LABEL_20:
  CFStringAppend(Mutable, MutableCopy);
  if (a5 >= 1 && v18 != a5)
    CFStringAppendFormat(Mutable, 0, CFSTR(":%ld"), a5);
  if (a6)
  {
    if (CFStringHasPrefix(a6, CFSTR("/")))
    {
      v44.length = CFStringGetLength(a6) - 1;
      v44.location = 1;
      v22 = CFStringCreateWithSubstring(0, a6, v44);
    }
    else
    {
      v22 = (const __CFString *)CFRetain(a6);
    }
    v23 = v22;
    if (v22)
      v24 = CFURLCreateStringByAddingPercentEscapes(0, v22, 0, 0, 0x8000100u);
    else
      v24 = 0;
    CFStringAppendFormat(Mutable, 0, CFSTR("/%@"), v24);
    CFRelease(v23);
    CFRelease(v24);
  }
  if (a7)
  {
    Count = CFDictionaryGetCount(a7);
    if (Count)
    {
      v26 = Count;
      v40 = v21;
      v41 = a3;
      v42 = a8;
      v39 = (uint64_t)&v39;
      __chkstk_darwin(Count);
      v28 = (const void **)((char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v28, v27);
      v29 = CFStringCreateMutable(0, 0);
      CFDictionaryGetKeysAndValues(a7, v28, 0);
      v30 = v26 - 1;
      if (v26 >= 1)
      {
        while (1)
        {
          v31 = *v28;
          Value = CFDictionaryGetValue(a7, *v28);
          CFStringAppendFormat(v29, 0, CFSTR("%@=%@"), v31, Value);
          if (!v30)
            break;
          CFStringAppend(v29, CFSTR("&"));
          --v30;
          ++v28;
        }
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("?%@"), v29);
      CFRelease(v29);
      a8 = v42;
      a3 = v41;
      LOBYTE(v21) = v40;
    }
  }
  v33 = CFURLCreateWithString(0, Mutable, 0);
  v34 = v33;
  if (a8)
  {
    error = 0;
    if (!CFURLSetResourcePropertyForKey(v33, kCFURLIsDirectoryKey, kCFBooleanTrue, &error))
    {
      v35 = v21;
      v36 = utilities_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        sub_1000CF1A0((uint64_t *)&error, v36);
      CFRelease(error);
      LOBYTE(v21) = v35;
    }
  }
  CFRelease(Mutable);
  CFRelease(MutableCopy);
  if (a2)
    CFRelease(a2);
  if ((v21 & 1) == 0)
    CFRelease(a3);
  return v34;
}

CGImageRef sub_1000CE310(const __CFData *a1)
{
  return sub_1000CE318(a1, 0);
}

CGImageRef sub_1000CE318(const __CFData *a1, int a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CGImageSource *v6;
  CGImageSource *v7;
  CFStringRef Type;
  CGImageRef ImageAtIndex;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;

  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v5 = Mutable;
  if (a2)
  {
    CFDictionarySetValue(Mutable, kCGImageSourceTypeIdentifierHint, kUTTypeJPEG2000);
    CFDictionarySetValue(v5, kCGImageSourceFailForDataNotMatchingHint, kCFBooleanTrue);
  }
  v6 = CGImageSourceCreateWithData(a1, v5);
  if (v6)
  {
    v7 = v6;
    if (!CGImageSourceGetCount(v6))
    {
      v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1000CF244();
      goto LABEL_20;
    }
    if (a2)
    {
      Type = CGImageSourceGetType(v7);
      if (!CFEqual(Type, kUTTypeJPEG2000))
      {
        v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_1000CF270();
        goto LABEL_20;
      }
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        v10 = utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1000CF29C();
LABEL_20:
        ImageAtIndex = 0;
      }
    }
    else
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        v13 = utilities_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1000CF2C8();
        goto LABEL_20;
      }
    }
    CFRelease(v7);
    goto LABEL_22;
  }
  v11 = utilities_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    sub_1000CF218();
  ImageAtIndex = 0;
LABEL_22:
  CFRelease(v5);
  return ImageAtIndex;
}

CGImageRef sub_1000CE4CC(const __CFData *a1)
{
  return sub_1000CE318(a1, 1);
}

CGImageRef sub_1000CE4D4(const void *a1)
{
  CFTypeID v2;
  CGImageSource *v3;
  CGImageSource *v4;
  CGImageRef ImageAtIndex;
  NSObject *v6;
  NSObject *v7;

  v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
  {
    v3 = CGImageSourceCreateWithURL((CFURLRef)a1, 0);
  }
  else
  {
    if (v2 != CFDataGetTypeID())
      goto LABEL_8;
    v3 = CGImageSourceCreateWithData((CFDataRef)a1, 0);
  }
  v4 = v3;
  if (v3)
  {
    if (CGImageSourceGetCount(v3))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    }
    else
    {
      v7 = utilities_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1000CF320();
      ImageAtIndex = 0;
    }
    CFRelease(v4);
    return ImageAtIndex;
  }
LABEL_8:
  v6 = utilities_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1000CF2F4();
  return 0;
}

__CFData *sub_1000CE5B0(void *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFData *Mutable;
  __CFDictionary *v6;
  CFNumberRef v7;
  const void **v8;
  CGImageDestination *v9;
  CGImageDestination *v10;
  NSObject *v11;
  NSObject *v12;
  int v14;
  uint64_t valuePtr;

  v4 = CFGetAllocator(a1);
  Mutable = CFDataCreateMutable(v4, 0);
  valuePtr = a2;
  v6 = CFDictionaryCreateMutable(v4, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    v7 = CFNumberCreate(v4, kCFNumberLongType, &valuePtr);
    v8 = (const void **)&kCGImageDestinationRequestedFileSize;
  }
  else
  {
    v14 = 1065353216;
    v7 = CFNumberCreate(v4, kCFNumberFloatType, &v14);
    v8 = (const void **)&kCGImageDestinationLossyCompressionQuality;
  }
  CFDictionarySetValue(v6, *v8, v7);
  CFRelease(v7);
  v9 = CGImageDestinationCreateWithData(Mutable, kUTTypeJPEG2000, 1uLL, 0);
  if (v9)
  {
    v10 = v9;
    CGImageDestinationAddImage(v9, (CGImageRef)a1, v6);
    if (!CGImageDestinationFinalize(v10))
    {
      v11 = utilities_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1000CF378();
      CFRelease(Mutable);
      Mutable = 0;
    }
    CFRelease(v10);
  }
  else
  {
    v12 = utilities_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1000CF34C();
  }
  CFRelease(v6);
  return Mutable;
}

__CFData *sub_1000CE720(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef DeviceRGB;
  CGColorSpaceRef v5;
  CGImage *v6;
  CGImage *v7;
  size_t Width;
  size_t Height;
  void *Thumb;
  NSObject *v11;
  __CFData *v12;
  NSObject *v13;
  const void *v14;
  NSObject *v15;

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (DeviceRGB)
  {
    v5 = DeviceRGB;
    v6 = (CGImage *)CGImageCreateByMatchingToColorSpace(a1, DeviceRGB);
    if (v6)
    {
      v7 = v6;
      Width = CGImageGetWidth(v6);
      Height = CGImageGetHeight(v7);
      if (Width > 0x21C || Height >= 0x21D)
        Thumb = (void *)CGImageCreateThumb(v7, 540);
      else
        Thumb = (void *)CFRetain(v7);
      v14 = Thumb;
      if (Thumb)
      {
        v12 = sub_1000CE5B0(Thumb, a2);
        CFRelease(v14);
      }
      else
      {
        v15 = utilities_log();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_1000CF3FC();
        v12 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      v13 = utilities_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1000CF3D0();
      v12 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    v11 = utilities_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000CF3A4();
    return 0;
  }
  return v12;
}

uint64_t sub_1000CE84C(uint64_t a1, uint64_t a2)
{
  const __CFBoolean *v2;
  uint64_t v3;
  int v4;
  const CFBooleanRef *v5;

  v2 = (const __CFBoolean *)qword_1007C67E8;
  if (!qword_1007C67E8)
  {
    if ((SFDeviceIsVirtualMachine(0, a2) & 1) != 0)
      v3 = 1;
    else
      v3 = sub_1000CE8D0(CFSTR("EnableDemoMode"), 0);
    v4 = sub_1000CE8D0(CFSTR("BrowseAllInterfaces"), v3);
    v5 = &kCFBooleanTrue;
    if (!v4)
      v5 = &kCFBooleanFalse;
    v2 = *v5;
    qword_1007C67E8 = (uint64_t)*v5;
  }
  return CFBooleanGetValue(v2);
}

uint64_t sub_1000CE8C0()
{
  return sub_1000CE8D0(CFSTR("EnableDemoMode"), 0);
}

uint64_t sub_1000CE8D0(const __CFString *a1, uint64_t a2)
{
  const __CFBoolean *v3;
  const __CFBoolean *v4;
  CFTypeID v5;
  uint64_t Value;

  v3 = (const __CFBoolean *)sub_1000CE9F0(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue(v4);
    }
    else
    {
      if (v5 != CFStringGetTypeID())
      {
LABEL_7:
        CFRelease(v4);
        return a2;
      }
      Value = sub_1000CEAC8((const __CFString *)v4);
    }
    a2 = Value;
    goto LABEL_7;
  }
  return a2;
}

uint64_t sub_1000CE944()
{
  const __CFBoolean *v0;
  int v1;
  const CFBooleanRef *v2;

  v0 = (const __CFBoolean *)qword_1007C67F0;
  if (!qword_1007C67F0)
  {
    v1 = sub_1000CE8D0(CFSTR("EnableDirectIP"), 0);
    v2 = &kCFBooleanTrue;
    if (!v1)
      v2 = &kCFBooleanFalse;
    v0 = *v2;
    qword_1007C67F0 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0);
}

BOOL sub_1000CE998(CFTypeRef cf1, CFTypeRef cf2)
{
  if (cf1 && cf2)
  {
    if (!CFEqual(cf1, cf2))
      return 1;
  }
  else if (cf1 && !cf2)
  {
    return 1;
  }
  return cf2 && cf1 == 0;
}

CFPropertyListRef sub_1000CE9F0(const __CFString *a1)
{
  CFPropertyListRef result;

  result = CFPreferencesCopyAppValue(a1, CFSTR("/private/var/Managed Preferences/mobile/com.apple.Sharing"));
  if (!result)
    return CFPreferencesCopyAppValue(a1, CFSTR("com.apple.Sharing"));
  return result;
}

uint64_t sub_1000CEA34(const __CFString *a1, uint64_t a2)
{
  uint64_t v2;
  const __CFNumber *v3;
  const __CFNumber *v4;
  CFTypeID v5;
  CFTypeID v6;
  uint64_t valuePtr;

  v2 = a2;
  valuePtr = a2;
  v3 = (const __CFNumber *)sub_1000CE9F0(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongType, &valuePtr);
    }
    else
    {
      v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
        valuePtr = CFStringGetIntValue((CFStringRef)v4);
    }
    CFRelease(v4);
    return valuePtr;
  }
  return v2;
}

BOOL sub_1000CEAC8(const __CFString *a1)
{
  _BOOL8 v2;

  CFRetain(a1);
  if (CFEqual(a1, CFSTR("1")))
  {
    v2 = 1;
  }
  else
  {
    v2 = 1;
    if (CFStringCompare(a1, CFSTR("true"), 1uLL))
    {
      v2 = 1;
      if (CFStringCompare(a1, CFSTR("yes"), 1uLL))
      {
        v2 = 1;
        if (CFStringCompare(a1, CFSTR("y"), 1uLL))
          v2 = CFStringCompare(a1, CFSTR("on"), 1uLL) == kCFCompareEqualTo;
      }
    }
  }
  CFRelease(a1);
  return v2;
}

CFStringRef sub_1000CEB84(const __CFAllocator *a1)
{
  timeval v3;
  tm v4;

  memset(&v4, 0, sizeof(v4));
  v3.tv_sec = 0;
  *(_QWORD *)&v3.tv_usec = 0;
  gettimeofday(&v3, 0);
  localtime_r(&v3.tv_sec, &v4);
  return CFStringCreateWithFormat(a1, 0, CFSTR("%02d:%02d:%02d.%03d"), v4.tm_hour, v4.tm_min, v4.tm_sec, (v3.tv_usec / 1000));
}

const __CFString *sub_1000CEC14()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  const __CFString *v3;
  CFStringRef v4;
  CFTypeID v6;
  void *v7;
  const void *v8;
  CFStringRef v9;
  CFRange v10;

  v0 = (const __CFBoolean *)sub_1000CE9F0(CFSTR("AlternateService"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v1))
        v3 = CFSTR("_airdrop-alt._tcp.");
      else
        v3 = CFSTR("_airdrop._tcp.");
      goto LABEL_14;
    }
    v6 = CFGetTypeID(v1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v1, CFSTR("1")))
      {
        v3 = CFSTR("_airdrop-alt._tcp.");
LABEL_14:
        CFRelease(v1);
        return v3;
      }
      if (!CFEqual(v1, CFSTR("0")))
      {
        if (CFStringGetLength((CFStringRef)v1) < 8)
        {
          v7 = (void *)CFRetain(v1);
        }
        else
        {
          v10.location = 0;
          v10.length = 7;
          v7 = (void *)CFStringCreateWithSubstring(0, (CFStringRef)v1, v10);
        }
        v8 = v7;
        v9 = CFStringCreateWithFormat(0, 0, CFSTR("_airdrop-%@._tcp."), v7);
        v3 = (const __CFString *)CFAutorelease(v9);
        CFRelease(v8);
        goto LABEL_14;
      }
    }
    v3 = CFSTR("_airdrop._tcp.");
    goto LABEL_14;
  }
  if (sub_1000CE8D0(CFSTR("EnableDemoMode"), 0))
  {
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("_airdrop-%@._tcp."), CFSTR("demo"));
    return (const __CFString *)CFAutorelease(v4);
  }
  return CFSTR("_airdrop._tcp.");
}

CFArrayRef sub_1000CEDA0()
{
  uint64_t v0;
  uint64_t v1;
  CFArrayRef result;
  void *values;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;

  v14 = CFSTR("_adisk._tcp.");
  v15 = CFSTR("_afpovertcp._tcp.");
  v16 = CFSTR("_smb._tcp.");
  v17 = CFSTR("_rfb._tcp.");
  v18 = CFSTR("_odisk._tcp.");
  v19 = CFSTR("_http._tcp.");
  v20 = sub_1000CEC14();
  v21 = CFSTR("_file._tcp.");
  v22 = CFSTR("_netbios._udp.");
  v23 = CFSTR("_workgroups._udp.");
  v24 = CFSTR("_nwnode._tcp.");
  v0 = kSFNodeProtocolAFP;
  values = (void *)kSFNodeProtocolADisk;
  v4 = kSFNodeProtocolAFP;
  v1 = kSFNodeProtocolSMB;
  v5 = kSFNodeProtocolSMB;
  v6 = kSFNodeProtocolVNC;
  v7 = kSFNodeProtocolODisk;
  v8 = kSFNodeProtocolHTTP;
  v9 = kSFNodeProtocolAirDrop;
  v10 = kSFNodeProtocolFile;
  v11 = kSFNodeProtocolNetBIOS;
  v12 = kSFNodeProtocolWorkgroups;
  v13 = kSFNodeProtocolNWNode;
  if (sub_1000CE8D0(CFSTR("PreferSMBFileSharing"), 0))
  {
    v15 = CFSTR("_smb._tcp.");
    v16 = CFSTR("_afpovertcp._tcp.");
    v4 = v1;
    v5 = v0;
  }
  qword_1007C6808 = (uint64_t)CFArrayCreate(0, (const void **)&values, 11, &kCFTypeArrayCallBacks);
  result = CFArrayCreate(0, (const void **)&v14, 11, &kCFTypeArrayCallBacks);
  qword_1007C6800 = (uint64_t)result;
  return result;
}

const void *sub_1000CEF58(void *key)
{
  if (qword_1007C6810 != -1)
    dispatch_once(&qword_1007C6810, &stru_100717028);
  return CFDictionaryGetValue((CFDictionaryRef)qword_1007C6818, key);
}

CFDictionaryRef sub_1000CEFAC()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  size_t v4;
  char *v5;
  size_t v6;
  char *v7;
  CFDictionaryRef result;
  uint64_t v9;
  CFRange v10;
  CFRange v11;

  if (qword_1007C67F8 != -1)
    dispatch_once(&qword_1007C67F8, &stru_100716FE8);
  v0 = (const __CFArray *)qword_1007C6800;
  v1 = (const __CFArray *)qword_1007C6808;
  Count = CFArrayGetCount((CFArrayRef)qword_1007C6800);
  v3 = CFArrayGetCount(v1);
  __chkstk_darwin();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  __chkstk_darwin();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v6);
  v10.location = 0;
  v10.length = Count;
  CFArrayGetValues(v0, v10, (const void **)v5);
  v11.location = 0;
  v11.length = v3;
  CFArrayGetValues(v1, v11, (const void **)v7);
  qword_1007C6818 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, (const void **)v7, (const void **)v5, Count, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  result = CFDictionaryCreate(kCFAllocatorDefault, (const void **)v5, (const void **)v7, v3, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_1007C6820 = (uint64_t)result;
  return result;
}

const void *sub_1000CF14C(void *key)
{
  if (qword_1007C6810 != -1)
    dispatch_once(&qword_1007C6810, &stru_100717068);
  return CFDictionaryGetValue((CFDictionaryRef)qword_1007C6820, key);
}

void sub_1000CF1A0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "createURL: CFURLSetResourcePropertyForKey %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000CF218()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateWithData returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF244()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF270()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetType image format invalid", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF29C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex (requireJPEG2000) returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF2C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF2F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceCreate returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF320()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF34C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationCreateWithData returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationFinalize failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF3A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGColorSpaceCreateDeviceRGB returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF3D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateCopyWithColorSpace returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000CF3FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateThumb returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDAuthenticationPrePairingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t String;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      String = PBReaderReadString(a2);
      v19 = objc_claimAutoreleasedReturnValue(String);
      v20 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v19;

    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v21 = 0;
        v22 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_42;
          v21 += 7;
          v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v26 = 16;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 20;
      }
      *(_DWORD *)(a1 + v26) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000CFE80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_start");
}

void sub_1000D0614(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSErrorUserInfoKey v10;
  const __CFString *v11;

  objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDNearbyAgent sharedNearbyAgent](SDNearbyAgent, "sharedNearbyAgent"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bleDevice"));
  objc_msgSend(v4, "stopUnlockBLEConnectionWithDevice:", v5);

  objc_msgSend(*(id *)(a1 + 32), "setActiveConnection:", 0);
  v6 = *(void **)(a1 + 32);
  if (a2)
  {
    v7 = SFAutoUnlockErrorDomain;
    v10 = NSLocalizedDescriptionKey;
    v11 = CFSTR("Proxy trigger failed");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 141, v8));
    objc_msgSend(v6, "notifyDelegateWithError:", v9);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setState:", 3);
    objc_msgSend(*(id *)(a1 + 32), "notifyDelegateWithError:", 0);
  }
}

uint64_t SDAutoUnlockAWDLInfoReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t Data;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t String;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_77;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_77:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_79:
        v63 = 48;
        goto LABEL_88;
      case 2u:
        Data = PBReaderReadData(a2);
        v21 = objc_claimAutoreleasedReturnValue(Data);
        v22 = 24;
        goto LABEL_58;
      case 3u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 60) |= 0x80u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v10 = v24++ >= 9;
              if (v10)
              {
                v25 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v25 = 0;
LABEL_83:
        v64 = v25 != 0;
        v65 = 56;
        goto LABEL_105;
      case 4u:
        v29 = PBReaderReadData(a2);
        v21 = objc_claimAutoreleasedReturnValue(v29);
        v22 = 40;
        goto LABEL_58;
      case 5u:
        v30 = 0;
        v31 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
            v15 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v10 = v31++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_87:
        v63 = 32;
LABEL_88:
        *(_DWORD *)(a1 + v63) = v15;
        continue;
      case 6u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 60) |= 8u;
        while (2)
        {
          v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              v10 = v36++ >= 9;
              if (v10)
              {
                v37 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v37 = 0;
LABEL_92:
        v64 = v37 != 0;
        v65 = 52;
        goto LABEL_105;
      case 7u:
        v41 = 0;
        v42 = 0;
        v43 = 0;
        *(_BYTE *)(a1 + 60) |= 0x40u;
        while (2)
        {
          v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
            v43 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              v10 = v42++ >= 9;
              if (v10)
              {
                v43 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v43 = 0;
LABEL_96:
        v64 = v43 != 0;
        v65 = 55;
        goto LABEL_105;
      case 8u:
        String = PBReaderReadString(a2);
        v21 = objc_claimAutoreleasedReturnValue(String);
        v22 = 16;
LABEL_58:
        v48 = *(void **)(a1 + v22);
        *(_QWORD *)(a1 + v22) = v21;

        continue;
      case 9u:
        *(_BYTE *)(a1 + 60) |= 1u;
        v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v50 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v50 = 0;
        }
        *(_QWORD *)(a1 + 8) = v50;
        continue;
      case 0xAu:
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_BYTE *)(a1 + 60) |= 0x20u;
        while (2)
        {
          v54 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v10 = v52++ >= 9;
              if (v10)
              {
                v53 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v53 = 0;
LABEL_100:
        v64 = v53 != 0;
        v65 = 54;
        goto LABEL_105;
      case 0xBu:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_BYTE *)(a1 + 60) |= 0x10u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v61 = v60 + 1;
      if (v60 == -1 || v61 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v62 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
      v59 |= (unint64_t)(v62 & 0x7F) << v57;
      if ((v62 & 0x80) == 0)
        goto LABEL_102;
      v57 += 7;
      v10 = v58++ >= 9;
      if (v10)
      {
        v59 = 0;
        goto LABEL_104;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_102:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v59 = 0;
LABEL_104:
    v64 = v59 != 0;
    v65 = 53;
LABEL_105:
    *(_BYTE *)(a1 + v65) = v64;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000D2478()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1007C6828;
  v7 = qword_1007C6828;
  if (!qword_1007C6828)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000D5678;
    v3[3] = &unk_100714258;
    v3[4] = &v4;
    sub_1000D5678((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000D2518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D2C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1000D32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_1000D3A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D3A60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id *v6;
  id v7;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend(WeakRetained, "_loadIconForSuggestionNode:outIcon:outIconData:", v7, a3, a4);

}

void sub_1000D3D2C(os_signpost_id_t a1, int a2, int a3, int a4)
{
  id v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  os_signpost_type_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v8 = share_sheet_log();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (!a2)
  {
    if (a4)
    {
      if (a1 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v9))
        goto LABEL_27;
      v17 = 0;
      v11 = "AsyncPeopleSuggestions";
      v12 = (uint8_t *)&v17;
    }
    else if (a3)
    {
      if (a1 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v9))
        goto LABEL_27;
      v16 = 0;
      v11 = "PreheatPeopleSuggestions";
      v12 = (uint8_t *)&v16;
    }
    else
    {
      if (a1 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v9))
        goto LABEL_27;
      v15 = 0;
      v11 = "GetPeopleSuggestions";
      v12 = (uint8_t *)&v15;
    }
    v13 = v10;
    v14 = OS_SIGNPOST_INTERVAL_END;
    goto LABEL_26;
  }
  if (a4)
  {
    if (a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      v20 = 0;
      v11 = "AsyncPeopleSuggestions";
      v12 = (uint8_t *)&v20;
LABEL_21:
      v13 = v10;
      v14 = OS_SIGNPOST_INTERVAL_BEGIN;
LABEL_26:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v14, a1, v11, " enableTelemetry=YES ", v12, 2u);
    }
  }
  else if (a3)
  {
    if (a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      v19 = 0;
      v11 = "PreheatPeopleSuggestions";
      v12 = (uint8_t *)&v19;
      goto LABEL_21;
    }
  }
  else if (a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    v18 = 0;
    v11 = "GetPeopleSuggestions";
    v12 = (uint8_t *)&v18;
    goto LABEL_21;
  }
LABEL_27:

}

void sub_1000D4268(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;

  v5 = a2;
  v6 = a3;
  sub_1000D3D2C(*(_QWORD *)(a1 + 40), 0, *(unsigned __int8 *)(a1 + 48), (int)objc_msgSend(*(id *)(a1 + 32), "isAsynchronous"));
  v7 = share_sheet_log();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionID"));
    v18 = 138412546;
    v19 = v9;
    v20 = 2048;
    v21 = objc_msgSend(v5, "count");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received response from PeopleSuggester for session ID %@ with %lu suggestions", (uint8_t *)&v18, 0x16u);

  }
  if (v6)
  {
    v10 = share_sheet_log();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1000D5A14((uint64_t)v6, v11, v12, v13, v14, v15, v16, v17);

  }
  objc_msgSend(*(id *)(a1 + 32), "_didFetchDuetSuggestions:", v5);

}

void sub_1000D43B8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  id v20;
  NSObject *v21;
  os_signpost_id_t v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  _QWORD block[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[16];

  v7 = a2;
  v8 = a4;
  if (a3)
  {
    v9 = share_sheet_log();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1000D5A78(v10, v11, v12, v13, v14, v15, v16, v17);

    v18 = share_sheet_log();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    v20 = share_sheet_log();
    v21 = objc_claimAutoreleasedReturnValue(v20);
    v22 = os_signpost_id_make_with_pointer(v21, *(const void **)(a1 + 32));

    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, v22, "ShareSheetAsyncPeopleSuggestionsDidTimeout", "", buf, 2u);
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D4520;
  block[3] = &unk_100717108;
  v23 = *(NSObject **)(a1 + 40);
  v24 = *(id *)(a1 + 48);
  v29 = v8;
  v30 = v24;
  v28 = v7;
  v25 = v8;
  v26 = v7;
  dispatch_async(v23, block);

}

uint64_t sub_1000D4520(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000D4534(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "suggestInteractionsFromContext:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_1000D4C04()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1007C6850;
  v7 = qword_1007C6850;
  if (!qword_1007C6850)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000D586C;
    v3[3] = &unk_100714258;
    v3[4] = &v4;
    sub_1000D586C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000D4CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D4CBC(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  void *v13;
  double v14;
  void *v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2050000000;
  v2 = (void *)qword_1007C6858;
  v20 = qword_1007C6858;
  if (!qword_1007C6858)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000D58C0;
    v16[3] = &unk_100714258;
    v16[4] = &v17;
    sub_1000D58C0((uint64_t)v16);
    v2 = (void *)v18[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v17, 8);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "suggestionDate"));
  objc_msgSend(v5, "timeIntervalSinceDate:", v6);
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = v9[11];
  v12 = *(double *)(a1 + 56) / *(double *)(a1 + 64);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sessionID"));
  *(float *)&v14 = v12;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedbackForAction:delay:context:suggestions:numberOfVisibleSuggestions:sessionIdentifier:", v4, v11, v10, v13, v8, v14));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "provideFeedbackForSuggestions:", v15);
}

void sub_1000D4E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4E38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000D52BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D52D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000D52E4(uint64_t a1)
{

}

void sub_1000D52EC(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;
  id v12;

  v12 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
  v9 = objc_msgSend(v8, "isEqualToString:", a1[4]);

  v10 = v12;
  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    v11 = (_QWORD *)a1[6];
    if (v11)
      *v11 = a3;
    *a4 = 1;
    v10 = v12;
  }

}

void sub_1000D5478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D5490(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;
  id v12;

  v12 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
  v9 = objc_msgSend(v8, "isEqualToString:", a1[4]);

  v10 = v12;
  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    v11 = (_QWORD *)a1[6];
    if (v11)
      *v11 = a3;
    *a4 = 1;
    v10 = v12;
  }

}

Class sub_1000D5678(uint64_t a1)
{
  Class result;

  sub_1000D56CC();
  result = objc_getClass("_PSSuggester");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000D5C64();
  qword_1007C6828 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000D56CC()
{
  void *v0;
  __int128 v1;
  uint64_t v2;

  v0 = 0;
  if (!qword_1007C6830)
  {
    v1 = off_1007171F0;
    v2 = 0;
    qword_1007C6830 = _sl_dlopen(&v1, &v0);
  }
  if (!qword_1007C6830)
    sub_1000D5CDC(&v0);
  if (v0)
    free(v0);
}

Class sub_1000D5770(uint64_t a1)
{
  Class result;

  sub_1000D56CC();
  result = objc_getClass("_PSSuggesterConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000D5D58();
  qword_1007C6838 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000D57C4(uint64_t a1)
{
  Class result;

  sub_1000D56CC();
  result = objc_getClass("_PSPredictionContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000D5DD0();
  qword_1007C6840 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000D5818(uint64_t a1)
{
  Class result;

  sub_1000D56CC();
  result = objc_getClass("_PSAttachment");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000D5E48();
  qword_1007C6848 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000D586C(uint64_t a1)
{
  Class result;

  sub_1000D56CC();
  result = objc_getClass("_PSFeedbackAction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000D5EC0();
  qword_1007C6850 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000D58C0(uint64_t a1)
{
  Class result;

  sub_1000D56CC();
  result = objc_getClass("_PSFeedback");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000D5F38();
  qword_1007C6858 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000D5914(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Error: Encountered nil, while linking to PSAttachmentClass", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000D5944()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100050D98((void *)&_mh_execute_header, v0, (uint64_t)v0, "Cannot open file %@, error = %@", v1);
  sub_10001949C();
}

void sub_1000D59AC()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100050D98((void *)&_mh_execute_header, v0, (uint64_t)v0, "Cannot read from file %@, error = %@", v1);
  sub_10001949C();
}

void sub_1000D5A14(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Received error: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000D5A78(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "People suggestions fetch did timeout", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000D5AA8(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "image"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_identifier"));
  v8 = 138412546;
  v9 = a1;
  v10 = 2112;
  v11 = v6;
  sub_100050D98((void *)&_mh_execute_header, a3, v7, "Failed to fetch icon data from suggestion with conversationIdentifier {%@} and image {%@}", (uint8_t *)&v8);

}

void sub_1000D5B60(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Got invalid Share Sheet feedback type", v1, 2u);
  sub_1000161DC();
}

void sub_1000D5B9C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Couldn't provide feedback for suggestion with identifier:%@ because no suggestion was found", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000D5C00(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Couldn't provide feedback for suggestion with node identifier:%@ because no suggestion was found", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1000D5C64()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_PSSuggesterClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDSuggestionBrowser.m"), 31, CFSTR("Unable to find class %s"), "_PSSuggester");

  __break(1u);
}

void sub_1000D5CDC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *PeopleSuggesterLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDSuggestionBrowser.m"), 29, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1000D5D58()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_PSSuggesterConfigurationClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDSuggestionBrowser.m"), 33, CFSTR("Unable to find class %s"), "_PSSuggesterConfiguration");

  __break(1u);
}

void sub_1000D5DD0()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_PSPredictionContextClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDSuggestionBrowser.m"), 32, CFSTR("Unable to find class %s"), "_PSPredictionContext");

  __break(1u);
}

void sub_1000D5E48()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_PSAttachmentClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDSuggestionBrowser.m"), 30, CFSTR("Unable to find class %s"), "_PSAttachment");

  __break(1u);
}

void sub_1000D5EC0()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_PSFeedbackActionClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDSuggestionBrowser.m"), 35, CFSTR("Unable to find class %s"), "_PSFeedbackAction");

  __break(1u);
}

void sub_1000D5F38()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class get_PSFeedbackClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDSuggestionBrowser.m"), 34, CFSTR("Unable to find class %s"), "_PSFeedback");

  __break(1u);
}

uint64_t SDUnlockStateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockKeyDeviceLockedReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D7B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D7B58(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerImport");

}

void sub_1000D7C14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000D7C30(uint64_t a1, void *a2, uint64_t a3)
{
  id *v4;
  id v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD, _QWORD);
  id WeakRetained;

  v4 = (id *)(a1 + 32);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "bundleProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
  objc_msgSend(WeakRetained, "openURLs:bundleIdentifier:", v5, v7);

  v8 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionHandler"));
  v8[2](v8, a3, 0, 1);

}

void sub_1000D7D90(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setOpenAppURLs:", v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000D80F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8128(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000D8138(uint64_t a1)
{

}

void sub_1000D8140(uint64_t a1)
{
  Class v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  __int128 v7;
  _QWORD v8[4];
  id v9;
  __int128 v10;

  v2 = off_1007B1568();
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000D8204;
  v8[3] = &unk_100717260;
  v9 = v3;
  v7 = *(_OWORD *)(a1 + 56);
  v6 = (id)v7;
  v10 = v7;
  -[objc_class importRecordingWithSourceAudioURL:name:date:completionHandler:](v2, "importRecordingWithSourceAudioURL:name:date:completionHandler:", v9, v4, v5, v8);

}

void sub_1000D8204(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;

  v5 = a2;
  v6 = a3;
  v7 = airdrop_log(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000D87A0(a1, (uint64_t)v6, v9);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finished importing voice memo data from %@", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("voicememos://%@"), v5));
    v9 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v11));

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v9);
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v13 = *(_QWORD *)(a1 + 32);
  v19 = 0;
  v14 = objc_msgSend(v12, "removeItemAtURL:error:", v13, &v19);
  v15 = v19;

  if ((v14 & 1) == 0)
  {
    v17 = airdrop_log(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_1000D8704((id *)(a1 + 32), (uint64_t)v15, v18);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_1000D83D4(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  intptr_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;

  v2 = *(NSObject **)(a1 + 32);
  v3 = dispatch_time(0, 900000000000);
  v4 = dispatch_group_wait(v2, v3);
  if (v4)
  {
    v5 = airdrop_log(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1000D88CC(v6);
LABEL_7:

    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  v7 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count");
  v8 = objc_msgSend(*(id *)(a1 + 40), "count");
  if (v7 != v8)
  {
    v9 = airdrop_log(v8);
    v6 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1000D8820(a1 + 56, (id *)(a1 + 40), v6);
    goto LABEL_7;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000D8538(uint64_t a1, void *a2)
{
  id v3;
  SDAirDropHandlerImportResult *v4;

  v3 = a2;
  v4 = objc_alloc_init(SDAirDropHandlerImportResult);
  -[SDAirDropHandlerImportResult setImportedFiles:](v4, "setImportedFiles:", v3);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

Class sub_1000D8674()
{
  Class result;

  if (qword_1007C6868 != -1)
    dispatch_once(&qword_1007C6868, &stru_1007172F8);
  result = objc_getClass("RCSavedRecordingsModel");
  qword_1007C6860 = (uint64_t)result;
  off_1007B1568 = (uint64_t (*)())sub_1000D86D0;
  return result;
}

id sub_1000D86D0()
{
  return (id)qword_1007C6860;
}

void sub_1000D86DC(id a1)
{
  qword_1007C6870 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos", 2);
}

void sub_1000D8704(id *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "path"));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = a2;
  sub_100050D98((void *)&_mh_execute_header, a3, v6, "Failed to remove item at %@: %@", (uint8_t *)&v7);

  sub_100031218();
}

void sub_1000D87A0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_100050D98((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to import voice memo data from %@ with error %@", (uint8_t *)&v4);
}

void sub_1000D8820(uint64_t a1, id *a2, NSObject *a3)
{
  unsigned int v5;
  unsigned int v6;
  _DWORD v7[2];
  __int16 v8;
  unsigned int v9;

  v5 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40), "count");
  v6 = objc_msgSend(*a2, "count");
  v7[0] = 67109376;
  v7[1] = v5;
  v8 = 1024;
  v9 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Only %d/%d voice memos were imported successfully", (uint8_t *)v7, 0xEu);
  sub_100031218();
}

void sub_1000D88CC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Timed out waiting for all import operations to finish", v1, 2u);
}

void sub_1000D8E3C(id a1)
{
  SDProximityPairingAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDProximityPairingAgent);
  v2 = (void *)qword_1007C6880;
  qword_1007C6880 = (uint64_t)v1;

}

id sub_1000D961C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

void sub_1000D974C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000D976C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_bufferedBleDeviceFound:", v3);

}

id sub_1000D980C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_1000D99C0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id result;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (!v2)
  {
    v3 = objc_alloc_init((Class)NSMutableSet);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v3;

    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  }
  result = objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));
  if (dword_1007B15E0 <= 30)
  {
    if (dword_1007B15E0 != -1)
      return (id)LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent bluetoothUserInteractionStart:]_block_invoke", 30, "Bluetooth user interacton started (%ld)\n", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"));
    result = (id)_LogCategory_Initialize(&dword_1007B15E0, 30);
    if ((_DWORD)result)
      return (id)LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent bluetoothUserInteractionStart:]_block_invoke", 30, "Bluetooth user interacton started (%ld)\n", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"));
  }
  return result;
}

id sub_1000D9AF8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObject:", *(_QWORD *)(a1 + 40));
  if (dword_1007B15E0 <= 30)
  {
    if (dword_1007B15E0 != -1)
      return (id)LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent bluetoothUserInteractionStop:]_block_invoke", 30, "Bluetooth user interacton stopped (%ld)\n", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"));
    result = (id)_LogCategory_Initialize(&dword_1007B15E0, 30);
    if ((_DWORD)result)
      return (id)LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent bluetoothUserInteractionStop:]_block_invoke", 30, "Bluetooth user interacton stopped (%ld)\n", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"));
  }
  return result;
}

id sub_1000DA95C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_accountSettingsChanged");
}

id sub_1000DA964(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_accountSettingsChanged");
}

id sub_1000DA96C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_uiLockStatusChanged");
}

id sub_1000DA974(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000DA97C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

id sub_1000DA988(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceLost:", a2);
}

void sub_1000DA994(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;

  v5 = a2;
  v7 = v5;
  if (dword_1007B15E0 <= 9)
  {
    if (dword_1007B15E0 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B15E0, 9), v5 = v7, v6))
    {
      LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _ensureStarted]_block_invoke_7", 9, "Changed device: %@, %#{flags}\n", v5, a3, &algn_1005CC7E7);
      v5 = v7;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_deviceChanged:", v5);
  objc_msgSend(*(id *)(a1 + 32), "_powerSourcesUpdateForDevice:changes:", v7, a3);

}

void sub_1000DAA4C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B15E0 <= 60)
    {
      v6 = v2;
      if (dword_1007B15E0 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B15E0, 60), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _ensureStarted]_block_invoke_8", 60, "### Discovery start failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B15E0 <= 30)
  {
    v6 = 0;
    if (dword_1007B15E0 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B15E0, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _ensureStarted]_block_invoke_8", 30, "Discovery started\n");
      goto LABEL_8;
    }
  }

}

uint64_t sub_1000DBF88(void *a1)
{
  id v1;
  uint64_t v2;
  id v4;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqual:", CFSTR("AirPods1,1")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("AirPods1,3")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("AirPodsPro1,1")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("PowerbeatsPro1,1")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("Device1,8202")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v4 = objc_msgSend(objc_alloc((Class)SFHeadphoneProduct), "initWithBluetoothModel:", v1);
    v2 = (uint64_t)objc_msgSend(v4, "showsStatus");

  }
  return v2;
}

uint64_t sub_1000DC044(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqual:", CFSTR("Powerbeats4,1")) & 1) != 0)
    v2 = 1;
  else
    v2 = (uint64_t)objc_msgSend(v1, "isEqual:", CFSTR("BeatsSoloPro1,1"));

  return v2;
}

id sub_1000DC78C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fastScanStop:reset:", "timer", 0);
}

id sub_1000DCC50(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "removeObject:", *(_QWORD *)(a1 + 40));
}

id sub_1000DE204()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1007C6888;
  v7 = qword_1007C6888;
  if (!qword_1007C6888)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000E4B74;
    v3[3] = &unk_100714258;
    v3[4] = &v4;
    sub_1000E4B74((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000DE2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E0198(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;

  v2 = *(_QWORD *)(result + 32);
  v1 = *(_QWORD *)(result + 40);
  if (v2 == *(_QWORD *)(v1 + 104))
  {
    if (dword_1007B15E0 > 30)
      return result;
    if (dword_1007B15E0 == -1)
    {
      result = _LogCategory_Initialize(&dword_1007B15E0, 30);
      if (!(_DWORD)result)
        return result;
    }
    v3 = "Pairing alert DidActivate\n";
    return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidActivate:]_block_invoke", 30, v3);
  }
  if (v2 == *(_QWORD *)(v1 + 136))
  {
    if (dword_1007B15E0 > 30)
      return result;
    if (dword_1007B15E0 == -1)
    {
      result = _LogCategory_Initialize(&dword_1007B15E0, 30);
      if (!(_DWORD)result)
        return result;
    }
    v3 = "Status alert DidActivate\n";
    return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidActivate:]_block_invoke", 30, v3);
  }
  if (dword_1007B15E0 <= 50)
  {
    if (dword_1007B15E0 != -1)
      return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidActivate:]_block_invoke", 50, "### Unknown alert DidActivate\n");
    result = _LogCategory_Initialize(&dword_1007B15E0, 50);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidActivate:]_block_invoke", 50, "### Unknown alert DidActivate\n");
  }
  return result;
}

uint64_t sub_1000E0324(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;

  v2 = *(_QWORD *)(result + 32);
  v1 = *(_QWORD *)(result + 40);
  if (v2 == *(_QWORD *)(v1 + 104))
  {
    if (dword_1007B15E0 > 30)
      return result;
    if (dword_1007B15E0 == -1)
    {
      result = _LogCategory_Initialize(&dword_1007B15E0, 30);
      if (!(_DWORD)result)
        return result;
    }
    v3 = "Pairing alert DidDeactivate\n";
    return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, v3);
  }
  if (v2 == *(_QWORD *)(v1 + 136))
  {
    if (dword_1007B15E0 > 30)
      return result;
    if (dword_1007B15E0 == -1)
    {
      result = _LogCategory_Initialize(&dword_1007B15E0, 30);
      if (!(_DWORD)result)
        return result;
    }
    v3 = "Status alert DidDeactivate\n";
    return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, v3);
  }
  if (dword_1007B15E0 <= 50)
  {
    if (dword_1007B15E0 != -1)
      return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidDeactivate:]_block_invoke", 50, "### Unknown alert DidActivate\n");
    result = _LogCategory_Initialize(&dword_1007B15E0, 50);
    if ((_DWORD)result)
      return LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandleDidDeactivate:]_block_invoke", 50, "### Unknown alert DidActivate\n");
  }
  return result;
}

void sub_1000E04DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = a1[4];
  v2 = a1[5];
  if (v3 == *(_QWORD *)(v2 + 104))
  {
    if (dword_1007B15E0 <= 30
      && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 30)))
    {
      LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Pairing alert DidInvalidate: %{error}\n", a1[6]);
    }
    v4 = a1[5];
    v5 = *(void **)(v4 + 104);
    *(_QWORD *)(v4 + 104) = 0;
    goto LABEL_18;
  }
  if (v3 == *(_QWORD *)(v2 + 136))
  {
    if (dword_1007B15E0 <= 30
      && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 30)))
    {
      LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Status alert DidInvalidate: %{error}\n", a1[6]);
    }
    v6 = a1[5];
    v5 = *(void **)(v6 + 136);
    *(_QWORD *)(v6 + 136) = 0;
LABEL_18:

    return;
  }
  if (dword_1007B15E0 <= 30 && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 30)))
    LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Unknown Alert DidInvalidate: %{error}\n", a1[6]);
}

void sub_1000E06F8(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _OWORD v12[4];
  NSErrorUserInfoKey v13;
  const __CFString *v14;
  _BYTE v15[128];

  memset(v12, 0, sizeof(v12));
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 176);
  if (objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v12, v15, 16))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "objectForKeyedSubscript:", **((_QWORD **)&v12[0] + 1)));

    if (v3)
    {
      if (dword_1007B15E0 <= 50
        && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 50)))
      {
        LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent retriggerProximityPairing:]_block_invoke", 50, "Re-triggering pairing UI for %@\n", v3);
      }
      objc_msgSend(*(id *)(a1 + 32), "_startPairingUI:autoStart:repair:", v3, 1, 0);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
        (*(void (**)(uint64_t, _QWORD))(v11 + 16))(v11, 0);
      goto LABEL_19;
    }
  }
  else
  {

  }
  if (dword_1007B15E0 <= 90 && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 90)))
    LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent retriggerProximityPairing:]_block_invoke", 90, "### Re-trigger failed: no triggered devices\n");
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v13 = NSLocalizedDescriptionKey;
    v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(4294960569, 0, 0));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)v6;
    v8 = CFSTR("?");
    if (v6)
      v8 = (const __CFString *)v6;
    v14 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, -6727, v9));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v10);

  }
  v3 = 0;
LABEL_19:

}

void sub_1000E09A4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void *)v2[19];
  if (!v3)
    return;
  if (dword_1007B15E0 <= 40)
  {
    if (dword_1007B15E0 == -1)
    {
      v6 = _LogCategory_Initialize(&dword_1007B15E0, 40);
      v2 = *(_QWORD **)(a1 + 32);
      if (!v6)
        goto LABEL_8;
      v3 = (void *)v2[19];
    }
    v4 = objc_msgSend(v3, "screenOn");
    v5 = "off";
    if (v4)
      v5 = "on";
    LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _screenStateChanged]_block_invoke", 40, "Screen state changed to %s\n", v5);
    v2 = *(_QWORD **)(a1 + 32);
  }
LABEL_8:
  objc_msgSend(v2, "_update");
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v7 + 56))
    return;
  v8 = *(_QWORD *)(v7 + 48);
  if (!v8)
    return;
  if (dword_1007B15E0 > 30)
    goto LABEL_14;
  if (dword_1007B15E0 == -1)
  {
    v9 = _LogCategory_Initialize(&dword_1007B15E0, 30);
    v7 = *(_QWORD *)(a1 + 32);
    if (!v9)
      goto LABEL_14;
    v8 = *(_QWORD *)(v7 + 48);
  }
  LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _screenStateChanged]_block_invoke", 30, "Have buffered devices and will be processing them: %@\n", v8);
  v7 = *(_QWORD *)(a1 + 32);
LABEL_14:
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v7 + 48), "allValues"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        if (dword_1007B15E0 <= 10
          && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 10)))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bleDevice"));
          LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _screenStateChanged]_block_invoke", 10, "Handling buffered device: %@\n", v16);

        }
        objc_msgSend(*(id *)(a1 + 32), "_deviceFound:andIsABufferedDevice:", v15, 1);
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v12);
  }
  objc_msgSend(*(id *)(a1 + 32), "ensureTimerStartedForBufferedDevicesPurge");

}

_QWORD *sub_1000E26E4(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[20];
  if (v3)
  {
    if (dword_1007B15E0 <= 40)
    {
      if (dword_1007B15E0 != -1)
      {
LABEL_4:
        v4 = objc_msgSend(v3, "screenLocked");
        v5 = "unlocked";
        if (v4)
          v5 = "locked";
        LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent _uiLockStatusChanged]_block_invoke", 40, "UI lock status changed to %s\n", v5);
        result = *(_QWORD **)(a1 + 32);
        return objc_msgSend(result, "_update");
      }
      v6 = _LogCategory_Initialize(&dword_1007B15E0, 40);
      result = *(_QWORD **)(a1 + 32);
      if (v6)
      {
        v3 = (void *)result[20];
        goto LABEL_4;
      }
    }
    return objc_msgSend(result, "_update");
  }
  return result;
}

id sub_1000E299C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startPairingUI:autoStart:repair:", *(_QWORD *)(a1 + 40), 0, *(unsigned __int8 *)(a1 + 48));
}

id sub_1000E2B44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startStatusUI:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E3FF0(uint64_t a1)
{
  BOOL v1;
  id v3;
  id v4;

  v1 = (a1 - 8194) > 0xD || ((1 << (a1 - 2)) & 0x3001) == 0;
  if (!v1 || (_DWORD)a1 == 0x10000)
    return 1;
  v3 = objc_msgSend(objc_alloc((Class)SFHeadphoneProduct), "initWithProductID:", a1);
  v4 = objc_msgSend(v3, "isAirPods");

  return (uint64_t)v4;
}

void sub_1000E43B8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  id v10;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v10 = (id)v2;
  if (v2)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "shouldNotTriggerBecauseDeviceInformationIsTooOld:", v2))
    {
      if (dword_1007B15E0 <= 50
        && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 50)))
      {
        LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent proximityDeviceDidTrigger:]_block_invoke", 50, "Proximity triggered for device with stale cached device, ignoring it. Device: %@", *(_QWORD *)(a1 + 40));
      }
    }
    else if (_os_feature_enabled_impl("Sharing", "ni_estimator"))
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "model"));
      if ((objc_msgSend(v6, "isEqual:", CFSTR("AirPods1,1")) & 1) != 0
        || (objc_msgSend(v6, "isEqual:", CFSTR("AirPods1,3")) & 1) != 0
        || objc_msgSend(v6, "isEqual:", CFSTR("AirPodsPro1,1")))
      {

      }
      else
      {
        v8 = objc_msgSend(objc_alloc((Class)SFHeadphoneProduct), "initWithBluetoothModel:", v6);
        v9 = objc_msgSend(v8, "isAirPods");

        if (!v9)
          goto LABEL_23;
      }
      if (dword_1007B15E0 <= 50
        && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 50)))
      {
        LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent proximityDeviceDidTrigger:]_block_invoke", 50, "Proximity triggered for device with ID %@", *(_QWORD *)(a1 + 40));
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bleDevice"));
      objc_msgSend(v7, "setTriggered:", 1);

      objc_msgSend(*(id *)(a1 + 32), "_deviceChanged:", v10);
    }
  }
  else if (dword_1007B15E0 <= 50
         && (dword_1007B15E0 != -1 || _LogCategory_Initialize(&dword_1007B15E0, 50)))
  {
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "description")));
    v4 = objc_msgSend(v3, "UTF8String");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "description"));
    LogPrintF(&dword_1007B15E0, "-[SDProximityPairingAgent proximityDeviceDidTrigger:]_block_invoke", 50, "#ni_estimator pairingagent device: %s not of interest. _devices: %@", v4, v5);

  }
LABEL_23:

}

void sub_1000E471C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E473C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "removeOldBufferedSamplesFromCache");
  objc_msgSend(WeakRetained, "setBufferedDevicesPurgeBlock:", 0);

}

Class sub_1000E4B74(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6890)
  {
    v4 = off_100717380;
    v5 = 0;
    qword_1007C6890 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6890)
    sub_1000E4C50(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("HPSSpatialProfileManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000E4CCC();
  qword_1007C6888 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000E4C50(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *HeadphoneConfigsLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDProximityPairingAgent.m"), 62, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1000E4CCC()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getHPSSpatialProfileManagerClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDProximityPairingAgent.m"), 63, CFSTR("Unable to find class %s"), "HPSSpatialProfileManager");

  __break(1u);
}

void sub_1000E5334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E534C(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;

  v9 = a2;
  if ((objc_msgSend(v9, "isActive") & 1) == 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a1[7], a1[4], CFSTR("UISDActivityItemData.m"), 124, CFSTR("Security context is not active: %@"), v9);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "accessibleURLs"));
  v7 = objc_msgSend(v6, "containsObject:", a1[5]);

  if (v7)
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    *a4 = 1;
  }

}

id sub_1000E590C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1007C6898;
  v7 = qword_1007C6898;
  if (!qword_1007C6898)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000E5B28;
    v3[3] = &unk_100714258;
    v3[4] = &v4;
    sub_1000E5B28((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000E59AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000E5B28(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C68A0)
  {
    v4 = off_100717408;
    v5 = 0;
    qword_1007C68A0 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C68A0)
    sub_1000E5C04(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("PKNearbyPeerPaymentReceiverCoordinator");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1000E5C80();
  qword_1007C6898 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000E5C04(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *PassKitCoreLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDNearbyPeerPaymentReceiverCoordinator.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1000E5C80()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKNearbyPeerPaymentReceiverCoordinatorClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDNearbyPeerPaymentReceiverCoordinator.m"), 15, CFSTR("Unable to find class %s"), "PKNearbyPeerPaymentReceiverCoordinator");

  __break(1u);
}

void sub_1000E6E5C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "UIAirDropNode:%@ is restricted.", (uint8_t *)&v2, 0xCu);
}

void sub_1000E6ED0(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "suggestionNode"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to load icon for suggestionNode:%@", (uint8_t *)&v4, 0xCu);

}

id sub_1000E75B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "mount");
}

void sub_1000E7690(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDNetworkResolver: bonjourCallBack returned %d", (uint8_t *)v2, 8u);
  sub_1000161DC();
}

void sub_1000E7700(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Attempted to resolve a server with unknown protocol", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000E7730(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Attempted to resolve a server with no URL", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1000E8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E824C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerImport");

}

void sub_1000E8308(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000E8324(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void (**v7)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v3)
  {
    v8 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
    v6 = objc_msgSend(WeakRetained, "openURLs:", v5);

  }
  else
  {
    v6 = 0;
  }
  v7 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionHandler"));
  ((void (**)(_QWORD, id, _QWORD, uint64_t))v7)[2](v7, v6, 0, 1);

}

void sub_1000E879C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = a2;
    v4 = airdrop_log(a1);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1000E8AF4(v3, v5);

    v6 = 0;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastObject"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "passURL"));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000E88A8(uint64_t a1, void *a2)
{
  id v3;
  SDAirDropHandlerImportResult *v4;

  v3 = a2;
  v4 = objc_alloc_init(SDAirDropHandlerImportResult);
  -[SDAirDropHandlerImportResult setImportedFiles:](v4, "setImportedFiles:", &__NSArray0__struct);
  -[SDAirDropHandlerImportResult setOpenAppURL:](v4, "setOpenAppURL:", v3);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

Class sub_1000E892C()
{
  Class result;

  if (qword_1007C68B0 != -1)
    dispatch_once(&qword_1007C68B0, &stru_100717498);
  result = objc_getClass("PKPassLibrary");
  qword_1007C68A8 = (uint64_t)result;
  off_1007B1770 = (uint64_t (*)())sub_1000E8988;
  return result;
}

id sub_1000E8988()
{
  return (id)qword_1007C68A8;
}

void sub_1000E8994(id a1)
{
  qword_1007C68B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore", 2);
}

Class sub_1000E89BC()
{
  Class result;

  if (qword_1007C68C8 != -1)
    dispatch_once(&qword_1007C68C8, &stru_1007174B8);
  result = objc_getClass("PKAddPassesViewController");
  qword_1007C68C0 = (uint64_t)result;
  off_1007B1778 = (uint64_t (*)())sub_1000E8A18;
  return result;
}

id sub_1000E8A18()
{
  return (id)qword_1007C68C0;
}

void sub_1000E8A24(id a1)
{
  qword_1007C68D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI", 2);
}

Class sub_1000E8A4C()
{
  Class result;

  if (qword_1007C68B0 != -1)
    dispatch_once(&qword_1007C68B0, &stru_100717498);
  result = objc_getClass("PKPass");
  qword_1007C68D8 = (uint64_t)result;
  off_1007B1780 = (uint64_t (*)())sub_1000E8AA8;
  return result;
}

id sub_1000E8AA8()
{
  return (id)qword_1007C68D8;
}

void sub_1000E8AB4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Wallet not available. Abort", v1, 2u);
}

void sub_1000E8AF4(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Wallet pass add failed with status: %d", (uint8_t *)v2, 8u);
}

uint64_t SDUnlockSetupCreateRecordReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t Data;
  uint64_t v27;
  uint64_t v28;
  uint64_t String;
  void *v30;
  uint64_t v31;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_45;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_47:
        v31 = 40;
        goto LABEL_56;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_51:
        v31 = 24;
        goto LABEL_56;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        break;
      case 4u:
        Data = PBReaderReadData(a2);
        v27 = objc_claimAutoreleasedReturnValue(Data);
        v28 = 32;
        goto LABEL_43;
      case 5u:
        String = PBReaderReadString(a2);
        v27 = objc_claimAutoreleasedReturnValue(String);
        v28 = 16;
LABEL_43:
        v30 = *(void **)(a1 + v28);
        *(_QWORD *)(a1 + v28) = v27;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_53;
      v22 += 7;
      v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_55;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_55:
    v31 = 8;
LABEL_56:
    *(_DWORD *)(a1 + v31) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000EA248(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, *(_QWORD *)(a1 + 40), 0));
  v5 = kSFOperationErrorKey;
  v6 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 80));
  objc_msgSend(WeakRetained, "networkOperation:event:withResults:", *(_QWORD *)(a1 + 32), 10, v3);

}

void sub_1000EADE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "SDNetworkOperation: resume HTTPServerConnection is NULL", a5, a6, a7, a8, 0);
}

void sub_1000EAE14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "SDNetworkOperation: resume HTTPServerConnection is invalid", a5, a6, a7, a8, 0);
}

void sub_1000EB0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EB100(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000EB110(uint64_t a1)
{

}

void sub_1000EB118(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;

  v6 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", a3))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);

}

void sub_1000EB43C(id a1)
{
  SDWorkgroupBrowser *v1;
  void *v2;

  v1 = objc_alloc_init(SDWorkgroupBrowser);
  v2 = (void *)qword_1007C68E8;
  qword_1007C68E8 = (uint64_t)v1;

}

void sub_1000EB858(id a1)
{
  SDAppleIDDatabaseManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDAppleIDDatabaseManager);
  v2 = (void *)qword_1007C68F8;
  qword_1007C68F8 = (uint64_t)v1;

}

void sub_1000EC2F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EC370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EC4BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ECB64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ECCA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ECE04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ECF78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ED050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000ED0C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ED138(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ED46C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ED630(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000ED9D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EDCF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EDDCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000EDEA8(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  id v3;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, *(CFNotificationName *)(a1 + 32), 0, 0, 1u);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "postNotificationName:object:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1000EDFE0(id a1)
{
  SDXPCSession *v1;
  void *v2;

  v1 = objc_alloc_init(SDXPCSession);
  v2 = (void *)qword_1007C6900;
  qword_1007C6900 = (uint64_t)v1;

}

void sub_1000EE224(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDXPCSession:  Starting xpc session....", v1, 2u);
}

void sub_1000EE2A4(id a1)
{
  SDRemoteInteractionAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDRemoteInteractionAgent);
  v2 = (void *)qword_1007C6918;
  qword_1007C6918 = (uint64_t)v1;

}

id sub_1000EE5A0(uint64_t a1)
{
  _QWORD *v2;
  CUSystemMonitor *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[4];
  uint64_t v11;

  if (dword_1007B1C28 <= 30 && (dword_1007B1C28 != -1 || _LogCategory_Initialize(&dword_1007B1C28, 30)))
    LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent activate]_block_invoke", 30, "Activate\n");
  v2 = *(_QWORD **)(a1 + 32);
  if (!v2[21])
  {
    v3 = objc_opt_new(CUSystemMonitor);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 168);
    *(_QWORD *)(v4 + 168) = v3;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "setDispatchQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000EE6CC;
    v10[3] = &unk_1007146D8;
    v11 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(v11 + 168), "setScreenLockedChangedHandler:", v10);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 168);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000EE6D4;
    v9[3] = &unk_1007146D8;
    v9[4] = v6;
    objc_msgSend(v7, "activateWithCompletion:", v9);
    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "prefsChanged");
}

id sub_1000EE6CC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientDeviceLockStatusChanged");
}

id sub_1000EE6D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientDeviceLockStatusChanged");
}

id sub_1000EE734(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (dword_1007B1C28 <= 30 && (dword_1007B1C28 != -1 || _LogCategory_Initialize(&dword_1007B1C28, 30)))
    LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent invalidate]_block_invoke", 30, "Invalidate\n");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;

  objc_msgSend(*(id *)(a1 + 32), "_commonEnsureStopped");
  objc_msgSend(*(id *)(a1 + 32), "_clientEnsureStopped");
  return objc_msgSend(*(id *)(a1 + 32), "_serverEnsureStopped");
}

uint64_t sub_1000EEB18(uint64_t result)
{
  uint64_t v1;
  const char *v2;
  const char *v3;

  v1 = result;
  if (dword_1007B1C28 <= 40)
  {
    if (dword_1007B1C28 != -1 || (result = _LogCategory_Initialize(&dword_1007B1C28, 40), (_DWORD)result))
    {
      v2 = "yes";
      if (*(_BYTE *)(*(_QWORD *)(v1 + 32) + 176))
        v3 = "yes";
      else
        v3 = "no";
      if (!*(_BYTE *)(v1 + 40))
        v2 = "no";
      result = LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent setPreventNotifications:]_block_invoke", 40, "Prevent notifications: %s -> %s\n", v3, v2);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 32) + 176) = *(_BYTE *)(v1 + 40);
  return result;
}

id sub_1000EEF20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000EEFE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

void sub_1000EF1AC(id a1, SFSession *a2, unsigned int a3, NSDictionary *a4)
{
  NSDictionary *v4;
  CFTypeID TypeID;
  uint64_t TypedValue;
  void *v7;
  id v8;

  v4 = a4;
  TypeID = CFDictionaryGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(v4, CFSTR("rp"), TypeID, 0);
  v8 = (id)objc_claimAutoreleasedReturnValue(TypedValue);

  if (v8)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDSharedRemoteTextInputClient sharedClient](SDSharedRemoteTextInputClient, "sharedClient"));
    objc_msgSend(v7, "handleTextInputData:", v8);

  }
}

void sub_1000EF228(id a1, SFSession *a2, unsigned int a3, NSDictionary *a4, id a5)
{
  if (a5)
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))a5 + 2))(a5, 0, 0, 0);
}

id sub_1000EF248(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_legacy_serverHandleEvent:", a2);
}

id sub_1000EF254(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_legacy_serverHandleRequest:", a2);
}

void sub_1000EF260(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B1C28 <= 30)
    {
      v6 = v2;
      if (dword_1007B1C28 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B1C28, 30), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _serverEnsureStarted]_block_invoke_5", 30, "### Control service activate failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B1C28 <= 30)
  {
    v6 = 0;
    if (dword_1007B1C28 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B1C28, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _serverEnsureStarted]_block_invoke_5", 30, "Control service activated\n");
      goto LABEL_8;
    }
  }

}

id sub_1000F0080(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "advertisingTimerFired");
}

void sub_1000F025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F0274(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000F029C(uint64_t a1)
{

}

void sub_1000F02A4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v6 = v3;
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerDevice"));
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 40), "clientNotificationUpdateForDevice:rtiData:", v5, v6);
  }
  else if (dword_1007B1C28 <= 60
         && (dword_1007B1C28 != -1 || _LogCategory_Initialize(&dword_1007B1C28, 60)))
  {
    LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent sessionStart:]_block_invoke", 60, "### No peer device?\n");
  }

}

void sub_1000F0858(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (dword_1007B1C28 <= 10)
  {
    if (dword_1007B1C28 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B1C28, 10), v3 = v6, v5))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bleDevice"));
      LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke", 10, "BLE RIA Found: %@\n", v4);

      v3 = v6;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_clientDeviceFound:", v3);

}

void sub_1000F0904(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v6 = v3;
  if (dword_1007B1C28 <= 10)
  {
    if (dword_1007B1C28 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B1C28, 10), v3 = v6, v5))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bleDevice"));
      LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_2", 10, "BLE RIA Lost: %@\n", v4);

      v3 = v6;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_clientDeviceLost:", v3);

}

void sub_1000F09B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  int v7;
  id v8;

  v5 = a2;
  v8 = v5;
  if (dword_1007B1C28 <= 10)
  {
    if (dword_1007B1C28 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B1C28, 10), v5 = v8, v7))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bleDevice"));
      LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_3", 10, "BLE RIA Changed: %@, %#{flags}\n", v6, a3, &unk_1005CC907);

      v5 = v8;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_clientDeviceFound:", v5);

}

void sub_1000F0A74(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B1C28 <= 30)
    {
      v6 = v2;
      if (dword_1007B1C28 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B1C28, 30), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_4", 30, "### Discovery start failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B1C28 <= 30)
  {
    v6 = 0;
    if (dword_1007B1C28 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B1C28, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_4", 30, "Discovery started\n");
      goto LABEL_8;
    }
  }

}

void sub_1000F0B40(id a1)
{
  if (dword_1007B1C28 <= 90 && (dword_1007B1C28 != -1 || _LogCategory_Initialize(&dword_1007B1C28, 90)))
    LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_5", 90, "### ClinkClient interrupted\n");
}

void sub_1000F0BA0(id a1)
{
  if (dword_1007B1C28 <= 30 && (dword_1007B1C28 != -1 || _LogCategory_Initialize(&dword_1007B1C28, 30)))
    LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_6", 30, "ClinkClient invalidated\n");
}

id sub_1000F0C00(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientClinkDeviceFound:", a2);
}

id sub_1000F0C0C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientClinkDeviceLost:", a2);
}

id sub_1000F0C18(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_clientClinkDeviceChanged:", a2);
}

void sub_1000F0C24(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1007B1C28 <= 90)
    {
      v6 = v2;
      if (dword_1007B1C28 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B1C28, 90), v3 = v6, v4))
      {
        LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_10", 90, "### CompanionLink start failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1007B1C28 <= 30)
  {
    v6 = 0;
    if (dword_1007B1C28 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B1C28, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_10", 30, "CompanionLink started\n");
      goto LABEL_8;
    }
  }

}

void *sub_1000F145C(uint64_t a1)
{
  void *result;
  unsigned int v3;
  const char *v4;

  result = *(void **)(*(_QWORD *)(a1 + 32) + 168);
  if (result && dword_1007B1C28 <= 50)
  {
    if (dword_1007B1C28 == -1)
    {
      result = (void *)_LogCategory_Initialize(&dword_1007B1C28, 50);
      if (!(_DWORD)result)
        return result;
      result = *(void **)(*(_QWORD *)(a1 + 32) + 168);
    }
    v3 = objc_msgSend(result, "screenLocked");
    v4 = "unlocked";
    if (v3)
      v4 = "locked";
    return (void *)LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientDeviceLockStatusChanged]_block_invoke", 50, "UI lock status changed to %s\n", v4);
  }
  return result;
}

id sub_1000F22E0(uint64_t a1)
{
  void *v2;

  if (dword_1007B1C28 <= 50 && (dword_1007B1C28 != -1 || _LogCategory_Initialize(&dword_1007B1C28, 50)))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bleDevice"));
    LogPrintF(&dword_1007B1C28, "-[SDRemoteInteractionAgent _clientUpdateCoalesceTimerForDevice:identifier:]_block_invoke", 50, "Device NeedsKeyboard end coalesce: %@\n", v2);

  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 112), "removeObjectForKey:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 80), "removeObjectForKey:", *(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 48), "clientNotificationRemoveForDevice:", *(_QWORD *)(a1 + 32));
}

Class sub_1000F2B00()
{
  Class result;

  if (qword_1007C6928 != -1)
    dispatch_once(&qword_1007C6928, &stru_1007176F8);
  result = objc_getClass("ACAccountStore");
  qword_1007C6920 = (uint64_t)result;
  off_1007B1C98[0] = (uint64_t (*)())sub_1000F2B5C;
  return result;
}

id sub_1000F2B5C()
{
  return (id)qword_1007C6920;
}

void sub_1000F2B68(id a1)
{
  qword_1007C6930 = (uint64_t)dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
}

Class sub_1000F2B90()
{
  Class result;

  if (qword_1007C6940 != -1)
    dispatch_once(&qword_1007C6940, &stru_100717718);
  result = objc_getClass("TVRViewServiceConfigContext");
  qword_1007C6938 = (uint64_t)result;
  off_1007B1CA0[0] = (uint64_t (*)())sub_1000F2BEC;
  return result;
}

id sub_1000F2BEC()
{
  return (id)qword_1007C6938;
}

void sub_1000F2BF8(id a1)
{
  qword_1007C6948 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI", 2);
}

uint64_t sub_1000F2C20()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1007C6940 != -1)
    dispatch_once(&qword_1007C6940, &stru_100717718);
  v0 = (uint64_t *)dlsym((void *)qword_1007C6948, "TVRViewServiceDeviceIdentifierTypeRapport");
  if (v0)
  {
    result = *v0;
    qword_1007C6950 = result;
  }
  else
  {
    result = qword_1007C6950;
  }
  off_1007B1CA8[0] = sub_1000F2C98;
  return result;
}

uint64_t sub_1000F2C98()
{
  return qword_1007C6950;
}

Class sub_1000F2CA4()
{
  Class result;

  if (qword_1007C6940 != -1)
    dispatch_once(&qword_1007C6940, &stru_100717718);
  result = objc_getClass("TVRViewServiceManager");
  qword_1007C6958 = (uint64_t)result;
  off_1007B1CB0 = (uint64_t (*)())sub_1000F2D00;
  return result;
}

id sub_1000F2D00()
{
  return (id)qword_1007C6958;
}

void sub_1000F2D4C(id a1)
{
  SDSharedRemoteTextInputClient *v1;
  void *v2;

  v1 = objc_alloc_init(SDSharedRemoteTextInputClient);
  v2 = (void *)qword_1007C6968;
  qword_1007C6968 = (uint64_t)v1;

}

id sub_1000F2F14(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_rtiHandleEventWithData:", a2);
}

void sub_1000F2F20(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_updatedSessionInfoWithAppIcon:"));
  objc_msgSend(*(id *)(a1 + 32), "_rtiHandleInputDidBeginWithFlags:sessionInfo:", a2, v4);

}

id sub_1000F2F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_rtiHandleInputDidEndWithFlags:sessionInfo:", a2, a3);
}

id sub_1000F2FD4(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
  return _objc_msgSend(*(id *)(a1 + 32), "_ensureStarted");
}

void sub_1000F335C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "handleEventWithData:") & 1) != 0)
    objc_msgSend(v3, "handleEventWithData:", *(_QWORD *)(a1 + 32));

}

void sub_1000F3490(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "handleInputDidBeginWithFlags:sessionInfo:") & 1) != 0)
    objc_msgSend(v3, "handleInputDidBeginWithFlags:sessionInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void sub_1000F35C8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "handleInputDidEndWithFlags:sessionInfo:") & 1) != 0)
    objc_msgSend(v3, "handleInputDidEndWithFlags:sessionInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

id sub_1000F38A4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;

  }
  if (dword_1007B1CB8 <= 30 && (dword_1007B1CB8 != -1 || _LogCategory_Initialize(&dword_1007B1CB8, 30)))
    LogPrintF(&dword_1007B1CB8, "-[SDSharedRemoteTextInputClient _startClockWithResetIfNeeded]_block_invoke", 30, "Overrun timer fired, running longer than 1 hr? Start time: %@\n", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  return _objc_msgSend(*(id *)(a1 + 32), "_logEvent:stopClock:", 5, 1);
}

void sub_1000F3EC4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend(WeakRetained, "airDropInformation:didChange:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));

}

void sub_1000F42C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F42EC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handlePolicyChange");

}

void sub_1000F4370(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = *(id **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[4], "allValues"));
  objc_msgSend(v1, "_retrievePoliciesForBundleIdentifiers:", v2);

}

void sub_1000F440C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = 0;

}

void sub_1000F452C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F4544(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 40), "objectForKey:", a1[5]));
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v2, "integerValue");

}

void sub_1000F460C(uint64_t a1)
{
  void *v2;
  id v3;
  unsigned __int8 v4;
  id v5;

  v2 = *(void **)(a1 + 40);
  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = v2;
  if (v5 == v3)
  {

    return;
  }
  if ((v5 == 0) == (v3 != 0))
  {

    goto LABEL_7;
  }
  v4 = objc_msgSend(v5, "isEqual:", v3);

  if ((v4 & 1) == 0)
  {
LABEL_7:
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "_updateBundleIdentifierMappings");
    _objc_msgSend(*(id *)(a1 + 32), "_retrieveMissingPolicies");
  }
}

void sub_1000F4764(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v9 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityType"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

        if (!v11)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_bundleIDForActivity:", v8));
          if (!v11)
            continue;
        }
        objc_msgSend(v2, "addObject:", v11);
        v12 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityType"));
        objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v13);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v5);
  }

  v14 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  v19 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "requestPoliciesForBundleIdentifiers:withError:", v2, &v19));
  v16 = v19;
  if (v16)
  {
    v17 = share_sheet_log();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_1000F5418();

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_handleUpdateForPoliciesByBundleIdentifier:", v15);
  }

}

void sub_1000F4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F4A54(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:", a1[5]));
  if (v2)
  {
    v4 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 40), "objectForKey:", v2));
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v3, "integerValue");

    v2 = v4;
  }

}

void sub_1000F4FA0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v5 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:"));
  if (!v4)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);

}

void sub_1000F5104(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "allKeysForObject:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

  if (v6 && objc_msgSend(v7, "BOOLValue"))
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

}

void sub_1000F5248(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000F5264(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = share_sheet_log();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1000F54E8(a1, (uint64_t)v6, v8);

  }
  else
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000F5358;
    v10[3] = &unk_100714468;
    objc_copyWeak(&v12, (id *)(a1 + 48));
    v11 = v5;
    dispatch_sync(v9, v10);

    objc_destroyWeak(&v12);
  }

}

void sub_1000F5358(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_handleUpdateForPoliciesByBundleIdentifier:", *(_QWORD *)(a1 + 32));

}

void sub_1000F5418()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Failed requesting policies for bundleIDs:%@ with error:%@");
  sub_10001949C();
}

void sub_1000F5478()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10006CFD0();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "unexpected slow path to retrieve extension bundle identifier for activity:%@ extension:%@", v1, 0x16u);
  sub_10001949C();
}

void sub_1000F54E8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *(_QWORD *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = a2;
  sub_10006CFBC((void *)&_mh_execute_header, a2, a3, "Failed requesting policies for bundleIDS:%@ with error:%@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_10001949C();
}

void sub_1000F559C(id a1)
{
  SDServerBrowser *v1;
  void *v2;

  v1 = objc_alloc_init(SDServerBrowser);
  v2 = (void *)qword_1007C6978;
  qword_1007C6978 = (uint64_t)v1;

}

id sub_1000F5868(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotification:forNeighborhood:", CFSTR("com.apple.sharingd.AirDropStatusChanged"), 0);
}

id sub_1000F62B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotification:forNeighborhood:", CFSTR("com.apple.sharingd.AirDropStatusChanged"), 0);
}

id sub_1000F6530(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotification:forNeighborhood:", CFSTR("com.apple.sharingd.AirDropStatusChanged"), 0);
}

id sub_1000F6544(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotification:forNeighborhood:", CFSTR("com.apple.sharingd.AirDropStatusChanged"), 0);
}

id sub_1000F690C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotification:forNeighborhood:", CFSTR("com.apple.sharingd.AirDropStatusChanged"), 0);
}

void sub_1000F7378(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "incrementTransfersInitiated: No AirDrop browsers are running", v1, 2u);
}

uint64_t sub_1000F778C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000F779C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "openURLs:", a2);
}

uint64_t sub_1000F77A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000F81C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F81E8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "acceptActionTriggered");

}

void sub_1000F8314(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];

  objc_msgSend(*(id *)(a1 + 32), "setSelectedApplication:", *(_QWORD *)(a1 + 40));
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "selectedApplication"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000F83A4;
  v4[3] = &unk_1007142E0;
  v4[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "performActionWithBundleProxy:completionHandler:", v3, v4);

}

void sub_1000F83A4(uint64_t a1, uint64_t a2)
{
  void (**v3)(id, uint64_t, _QWORD, uint64_t);

  v3 = (void (**)(id, uint64_t, _QWORD, uint64_t))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
  v3[2](v3, a2, 0, 1);

}

uint64_t sub_1000F8B50(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = airdrop_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Resource open operation completed for %@", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1000F92A0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "openURLs:", a2);
}

void sub_1000F92AC(uint64_t a1, uint64_t a2)
{
  void (**v3)(id, uint64_t, _QWORD, uint64_t);

  v3 = (void (**)(id, uint64_t, _QWORD, uint64_t))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
  v3[2](v3, a2, 0, 1);

}

void sub_1000F994C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1000F99A4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "launchFilesToDefaultFolder");

}

void sub_1000F99D0(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "completedURLs"));

  objc_msgSend(WeakRetained, "launchMoveToAppShareSheetForFiles:", v2);
}

void sub_1000F9A2C(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "completedURLs"));

  objc_msgSend(WeakRetained, "launchMoveToAppShareSheetForFiles:", v2);
}

void sub_1000F9D74(_QWORD *a1, NSObject *a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  void *v6;

  v3 = SFCompactStringFromCollection(*a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = 138412290;
  v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Generic handler found available applications %@", (uint8_t *)&v5, 0xCu);

  sub_1000332E4();
}

void sub_1000F9E04(void *a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transfer"));
  sub_1000F9D64();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0xCu);

  sub_1000332E4();
}

void sub_1000F9E88(uint64_t a1, void *a2)
{
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "transfer"));
  sub_1000F9D64();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x16u);

}

void sub_1000F9F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create Files launch URL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000F9F5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No items to open with Files App", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000F9F88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not get Downloads folder", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1000F9FB4(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot generate ready-for-open actions for bundle ID %@. Error when fetching bundle record: %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000FA038(void *a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "selectedApplication"));
  sub_1000F9D64();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x20u);

}

uint64_t SDAuthenticationApprovePromptReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t String;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_46;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_48:
        v33 = 36;
        goto LABEL_53;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_52:
        v33 = 32;
LABEL_53:
        *(_DWORD *)(a1 + v33) = v14;
        continue;
      case 3u:
        String = PBReaderReadString(a2);
        v23 = objc_claimAutoreleasedReturnValue(String);
        v24 = 24;
        goto LABEL_37;
      case 4u:
        v25 = PBReaderReadString(a2);
        v23 = objc_claimAutoreleasedReturnValue(v25);
        v24 = 8;
        goto LABEL_37;
      case 5u:
        v26 = PBReaderReadString(a2);
        v23 = objc_claimAutoreleasedReturnValue(v26);
        v24 = 16;
LABEL_37:
        v27 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        continue;
      case 6u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v31 == -1 || v31 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
      v30 |= (unint64_t)(v32 & 0x7F) << v28;
      if ((v32 & 0x80) == 0)
        goto LABEL_55;
      v28 += 7;
      v9 = v29++ >= 9;
      if (v9)
      {
        v30 = 0;
        goto LABEL_57;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v30 = 0;
LABEL_57:
    *(_BYTE *)(a1 + 40) = v30 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAuthenticationPairingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t String;
  uint64_t v23;
  uint64_t v24;
  uint64_t Data;
  void *v26;
  uint64_t v27;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_38;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_40:
        v27 = 28;
        goto LABEL_45;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      case 3u:
        String = PBReaderReadString(a2);
        v23 = objc_claimAutoreleasedReturnValue(String);
        v24 = 16;
        goto LABEL_36;
      case 4u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = 8;
LABEL_36:
        v26 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_42;
      v18 += 7;
      v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_44:
    v27 = 24;
LABEL_45:
    *(_DWORD *)(a1 + v27) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000FBBB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

void sub_1000FC1D4(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  int v7;
  int v8;
  unint64_t v9;
  const __CFString *v10;
  void *v11;
  int v12;
  int v13;
  void *v14;
  NSObject *v15;
  id v16;
  _QWORD block[4];
  id v18;
  id v19;
  int v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](AKURLBag, "sharedBag"));
  v3 = v2;
  v4 = a1[6];
  switch(v4)
  {
    case 0:
      v5 = CFSTR("createCertificate");
      goto LABEL_9;
    case 1:
      v5 = CFSTR("fetchCertificate");
      goto LABEL_9;
    case 2:
      v5 = CFSTR("getMyInfo");
      goto LABEL_9;
    case 3:
      v5 = CFSTR("findPerson");
LABEL_9:
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "urlAtKey:", v5));
      v7 = 0;
      v8 = 0;
      goto LABEL_12;
    default:
      if (dword_1007B1DE8 > 60)
        goto LABEL_11;
      if (dword_1007B1DE8 != -1)
        goto LABEL_5;
      if (_LogCategory_Initialize(&dword_1007B1DE8, 60))
      {
        v4 = a1[6];
LABEL_5:
        LogPrintF(&dword_1007B1DE8, "-[SDAppleIDServerTask _urlWithCompletion:]_block_invoke", 60, "### Unhandled type %d\n", v4);
      }
LABEL_11:
      v6 = 0;
      v7 = 1;
      v8 = 201239;
LABEL_12:
      if (dword_1007B1DE8 <= 30
        && (dword_1007B1DE8 != -1 || _LogCategory_Initialize(&dword_1007B1DE8, 30)))
      {
        v9 = a1[6];
        if (v9 > 3)
          v10 = CFSTR("?");
        else
          v10 = *(&off_100717A48 + v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "absoluteString"));
        LogPrintF(&dword_1007B1DE8, "-[SDAppleIDServerTask _urlWithCompletion:]_block_invoke", 30, "URL for task type %@: %@", v10, v11);

      }
      if (v6)
        v12 = 1;
      else
        v12 = v7;
      if (v12)
        v13 = v8;
      else
        v13 = 201200;
      v14 = (void *)a1[5];
      v15 = *(NSObject **)(a1[4] + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000FC40C;
      block[3] = &unk_100717960;
      v18 = v6;
      v19 = v14;
      v20 = v13;
      v16 = v6;
      dispatch_async(v15, block);

      return;
  }
}

uint64_t sub_1000FC40C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

id sub_1000FC770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleURLIsAvailable:error:completion:", a2, a3, *(_QWORD *)(a1 + 40));
}

id sub_1000FC93C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_1000FCB14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(NSObject **)(v10 + 16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000FCBE4;
  v15[3] = &unk_100714990;
  v15[4] = v10;
  v16 = v8;
  v17 = v7;
  v18 = v9;
  v12 = v7;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

id sub_1000FCBE4(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = a1[6];
  v4 = NSErrorToOSStatus(a1[7]);
  return _objc_msgSend(v1, "_handleTaskResponse:withData:error:", v2, v3, v4);
}

void sub_1000FCCBC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 16));
  if (!(_DWORD)a3)
  {
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 32), "setUrlRequest:", v5);
      objc_msgSend(*(id *)(a1 + 32), "_handleURLRequestIsAvailable");
      goto LABEL_5;
    }
    a3 = 4294960587;
  }
  objc_msgSend(*(id *)(a1 + 32), "_callResponseHandlerWithInfo:error:", 0, a3);
LABEL_5:

}

void sub_1000FF258(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;

  v7 = a2;
  v8 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 16));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 9))
  {
    v11 = 4294960573;
LABEL_11:
    objc_msgSend(*(id *)(a1 + 32), "_callResponseHandlerWithInfo:error:", 0, v11);
    goto LABEL_5;
  }
  if ((_DWORD)a4)
  {
    v11 = 201220;
    if (dword_1007B1DE8 <= 60
      && (dword_1007B1DE8 != -1 || _LogCategory_Initialize(&dword_1007B1DE8, 60)))
    {
      LogPrintF(&dword_1007B1DE8, "-[SDAppleIDServerTask _sendRequest]_block_invoke", 60, "### Get GS token failed with error %#m\n", a4);
    }
    goto LABEL_11;
  }
  v12 = 0;
  sub_100209F1C(v7, v8, &v12);
  v9 = v12;
  if (v9)
  {
    v10 = v9;
    objc_msgSend(*(id *)(a1 + 32), "setGsToken:", v9);
    objc_msgSend(*(id *)(a1 + 32), "_handleGSTokenIsAvailable");

  }
LABEL_5:

}

void sub_1000FF4C0(id a1)
{
  SDConnectionManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDConnectionManager);
  v2 = (void *)qword_1007C6980;
  qword_1007C6980 = (uint64_t)v1;

}

void sub_1000FF7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FF7D8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_10010074C();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "xpcConnection"));
  objc_msgSend(v5, "invalidate");

}

void sub_1000FF840(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  id v6;
  _QWORD block[4];
  id v8;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_100100778();

  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "cleanUpConnections");

  v6 = objc_loadWeakRetained(v4);
  objc_msgSend(v6, "setXpcConnection:", 0);

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000FF914;
  block[3] = &unk_1007145D0;
  objc_copyWeak(&v8, v4);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v8);
}

void sub_1000FF914(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v2, "connectionManagerDidInvalidate:", v3);

}

void sub_1000FFA94(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 48);
  if (v3)
  {
    objc_msgSend(v3, "stop");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

    v2 = *(_QWORD *)(a1 + 32);
  }
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v6 = *(id *)(v2 + 72);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v23;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDStreamManager sharedManager](SDStreamManager, "sharedManager"));
        objc_msgSend(v12, "closeStreamsForIdentifier:", v11);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "removeAllObjects");
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "unlockSessions", 0));
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v19;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v19 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v17), "invalidate");
        v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v15);
  }

}

void sub_100100038(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDStreamManager sharedManager](SDStreamManager, "sharedManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10010011C;
  v7[3] = &unk_100714E80;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v4, "getContinuationStreamsForMessage:bundleID:usingID:completionHandler:", v5, v6, v3, v7);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "addObject:", v3);
}

void sub_10010011C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, id, uint64_t);
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void (**)(uint64_t, id, uint64_t))(v4 + 16);
  v6 = a2;
  v5(v4, v6, a3);
  objc_msgSend(v6, "closeFile");

}

void sub_1001004BC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  objc_msgSend(v1, "handleAppleAccountSignIn");

}

void sub_100100524(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  objc_msgSend(v1, "handleAppleAccountSignOut");

}

id sub_1001005DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "removeObject:", *(_QWORD *)(a1 + 40));
}

void sub_10010074C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDConnectionManager:  XPC connection interrupted", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100100778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDConnectionManager:  XPC connection invalidated", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001007A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create commpanion service, nil reply", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001007D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create commpanion service, nil client proxy", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001007FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create commpanion service, nil identifier", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDUnlockSetupRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_45;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_47:
        v32 = 28;
        goto LABEL_52;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_51:
        v32 = 24;
LABEL_52:
        *(_DWORD *)(a1 + v32) = v14;
        continue;
      case 3u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = 8;
        goto LABEL_36;
      case 4u:
        v25 = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(v25);
        v24 = 16;
LABEL_36:
        v26 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        continue;
      case 5u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
      v29 |= (unint64_t)(v31 & 0x7F) << v27;
      if ((v31 & 0x80) == 0)
        goto LABEL_54;
      v27 += 7;
      v9 = v28++ >= 9;
      if (v9)
      {
        v29 = 0;
        goto LABEL_56;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v29 = 0;
LABEL_56:
    *(_BYTE *)(a1 + 32) = v29 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100101C9C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + 8) = 1;
    *(_DWORD *)(*(_QWORD *)(result + 32) + 72) = 0;
    *(_DWORD *)(*(_QWORD *)(result + 32) + 40) = 0;
    *(_QWORD *)(*(_QWORD *)(result + 32) + 48) = 0;
    *(_QWORD *)(*(_QWORD *)(result + 32) + 32) = 0;
  }
  return result;
}

intptr_t sub_100101FE8(uint64_t a1)
{
  uint64_t v2;
  Bytef *v3;
  double Current;
  double v5;
  uLongf v6;
  uint64_t v7;
  NSObject *v8;
  double v9;
  CFAbsoluteTime v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  Bytef *v14;
  _QWORD block[9];
  char v17;
  uLongf destLen;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 24) && *(_BYTE *)(v2 + 8))
  {
    destLen = compressBound(*(_QWORD *)(a1 + 64));
    v3 = (Bytef *)malloc_type_malloc(destLen, 0xAFE3A0A3uLL);
    Current = CFAbsoluteTimeGetCurrent();
    compress(v3, &destLen, *(const Bytef **)(a1 + 72), *(_QWORD *)(a1 + 64));
    v5 = CFAbsoluteTimeGetCurrent() - Current;
    v6 = destLen;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = *(_QWORD *)(a1 + 64);
    v3 = *(Bytef **)(a1 + 72);
    v5 = 0.0;
  }
  v8 = *(NSObject **)(a1 + 40);
  if (v8)
    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  v9 = CFAbsoluteTimeGetCurrent();
  objc_msgSend(*(id *)(a1 + 32), "sendOutgoingChunk:length:compressed:", v3, v6, v7);
  v10 = CFAbsoluteTimeGetCurrent();
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(NSObject **)(v11 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100102134;
  block[3] = &unk_100717AD8;
  block[4] = v11;
  *(double *)&block[5] = v10 - v9;
  v17 = v7;
  v13 = *(_QWORD *)(a1 + 64);
  block[6] = v6;
  block[7] = v13;
  *(double *)&block[8] = v5;
  dispatch_sync(v12, block);
  v14 = *(Bytef **)(a1 + 72);
  if (v3 != v14)
    free(v14);
  free(v3);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

_BYTE *sub_100102134(uint64_t a1)
{
  _BYTE *result;

  *(double *)(*(_QWORD *)(a1 + 32) + 16) = *(double *)(a1 + 40) + *(double *)(*(_QWORD *)(a1 + 32) + 16);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12) += *(_DWORD *)(a1 + 48);
  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40) += *(_DWORD *)(a1 + 56);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 72) += *(_DWORD *)(a1 + 48);
    *(double *)(*(_QWORD *)(a1 + 32) + 64) = *(double *)(a1 + 64) + *(double *)(*(_QWORD *)(a1 + 32) + 64);
    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  }
  result = *(_BYTE **)(a1 + 32);
  if (result[8])
  {
    objc_msgSend(result, "processNetworkStatistics:", *(double *)(a1 + 40));
    return _objc_msgSend(*(id *)(a1 + 32), "processCompressibilityStatistics");
  }
  return result;
}

void sub_100102224(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_100102234()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFWriteStreamWrite returned %ld", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100102294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFReadStreamRead returned %ld", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001022F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFReadStreamOpen error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100102354()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFWriteStreamOpen error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001023B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002923C((void *)&_mh_execute_header, a1, a3, "Turning compression back on since it took %f seconds to send a block", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_10010241C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10010220C();
  sub_100102224((void *)&_mh_execute_header, v0, v1, "Not keeping up with network so turning compression off. Compressed send time: %f, uncompressed send time: %f", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100102480()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10010220C();
  sub_100102224((void *)&_mh_execute_header, v0, v1, "Turning compression back on. Compressed send time: %f, uncompressed send time: %f", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001024E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002923C((void *)&_mh_execute_header, a1, a3, "Compression ratio is %f, so turning compression off, at least until the next file", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_10010254C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: executeReadWithAdaptiveCompression error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001025AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: executeWriteWithAdaptiveCompression error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

uint64_t SDAutoUnlockSessionWrapperReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t Data;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 88) |= 8u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_63;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_65;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_65:
        v44 = 80;
        goto LABEL_82;
      case 2u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 72;
        goto LABEL_61;
      case 3u:
        v21 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v21);
        v20 = 56;
        goto LABEL_61;
      case 4u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 88) |= 4u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_69:
        v44 = 40;
        goto LABEL_82;
      case 5u:
        v26 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v26);
        v20 = 64;
        goto LABEL_61;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 88) |= 0x10u;
        while (2)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v9 = v28++ >= 9;
              if (v9)
              {
                v29 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v29 = 0;
LABEL_73:
        *(_BYTE *)(a1 + 84) = v29 != 0;
        continue;
      case 7u:
        v32 = 0;
        v33 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (2)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v14 |= (unint64_t)(v35 & 0x7F) << v32;
            if (v35 < 0)
            {
              v32 += 7;
              v9 = v33++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_77:
        v44 = 24;
        goto LABEL_82;
      case 8u:
        v36 = 0;
        v37 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 88) |= 1u;
        break;
      case 9u:
        v40 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v40);
        v20 = 32;
        goto LABEL_61;
      case 0xAu:
        v41 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v41);
        v20 = 16;
        goto LABEL_61;
      case 0xBu:
        v42 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v42);
        v20 = 48;
LABEL_61:
        v43 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v38 == -1 || v38 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
      v14 |= (unint64_t)(v39 & 0x7F) << v36;
      if ((v39 & 0x80) == 0)
        goto LABEL_79;
      v36 += 7;
      v9 = v37++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_81;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_79:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_81:
    v44 = 8;
LABEL_82:
    *(_DWORD *)(a1 + v44) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStartLTKTransferReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SDAutoUnlockEscrowSecretInfoReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t Data;
  uint64_t v13;
  uint64_t v14;
  uint64_t String;
  void *v16;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      if ((v6 >> 3) == 2)
        break;
      if ((v6 >> 3) == 1)
      {
        Data = PBReaderReadData(a2);
        v13 = objc_claimAutoreleasedReturnValue(Data);
        v14 = 16;
LABEL_21:
        v16 = *(void **)(a1 + v14);
        *(_QWORD *)(a1 + v14) = v13;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag(a2) & 1) == 0)
        return 0;
LABEL_23:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    String = PBReaderReadString(a2);
    v13 = objc_claimAutoreleasedReturnValue(String);
    v14 = 8;
    goto LABEL_21;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100104F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100104FBC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleAction");

}

Class sub_1001051E4()
{
  Class result;

  if (qword_1007C6998 != -1)
    dispatch_once(&qword_1007C6998, &stru_100717B20);
  result = objc_getClass("_SFSharablePasswordReceiver");
  qword_1007C6990 = (uint64_t)result;
  off_1007B1F78 = (uint64_t (*)())sub_100105240;
  return result;
}

id sub_100105240()
{
  return (id)qword_1007C6990;
}

void sub_10010524C(id a1)
{
  qword_1007C69A0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SafariServices.framework/SafariServices", 2);
}

void sub_100105274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### No credential?", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001052A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### No URL for opening received credential?", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001052CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Failed to grab myPrivateKey?", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001052F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Failed to grab myIdentity?", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100105324()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Failed to grab myAccount?", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

id sub_100105460(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setEscrowSecret:", 0);
}

void sub_10010560C(id a1)
{
  SDAutoUnlockAKSManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDAutoUnlockAKSManager);
  v2 = (void *)qword_1007C69A8;
  qword_1007C69A8 = (uint64_t)v1;

}

void sub_100106420(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100106444(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "DCRT OOB performed", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateLocalLTK");

}

id sub_10010652C(uint64_t a1)
{
  id result;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  result = (id)sub_1000C8E68();
  if ((_DWORD)result)
  {
    v3 = auto_unlock_log(result);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Profile installed disabling Auto Unlock", v5, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setAutoUnlockDisabledDueToManagement:", 1);
    return objc_msgSend(*(id *)(a1 + 32), "handleRequiredStateDisabled");
  }
  return result;
}

void sub_10010668C(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = auto_unlock_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_100112D6C();

}

uint64_t sub_100107FD8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cachedSessionKeys"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v7));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedSessionKeys"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v6));

  v12 = -1;
  if (!v9)
    v12 = 1;
  if ((v9 != 0) != (v11 == 0))
    return 0;
  else
    return v12;
}

void sub_100108C68(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  int v12;

  if (a2)
  {
    v10 = 0;
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = a2;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remoteLTKForDeviceID:", v4));
    sub_10001EBE8(v5, v6, 1, &v10);

    v8 = auto_unlock_log(v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Experimental attempt to register for MacUnlockPhone got error: %d", buf, 8u);
    }

    if (v10 == -536363002)
      objc_msgSend(*(id *)(a1 + 32), "disablePairingForAllLockPhones");

  }
}

void sub_1001090A4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  SDAutoUnlockLTKInfo *v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  int v20;
  const __CFString *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  void *v30;
  __int16 v31;
  const __CFString *v32;
  __int16 v33;
  const __CFString *v34;

  v2 = sub_10001DEF4((uint64_t)objc_msgSend(*(id *)(a1 + 32), "ltkKeyClassWithAttestation:", *(unsigned __int8 *)(a1 + 56)), *(unsigned __int8 *)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (!v3)
    goto LABEL_25;
  v4 = sub_10001D548();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_opt_new(SDAutoUnlockLTKInfo);
  -[SDAutoUnlockLTKInfo setVersion:](v6, "setVersion:", 2);
  -[SDAutoUnlockLTKInfo setLtk:](v6, "setLtk:", v3);
  if (v5)
  {
    v7 = sub_1000CA1EC(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    -[SDAutoUnlockLTKInfo setLtkID:](v6, "setLtkID:", v8);

  }
  v9 = *(unsigned __int8 *)(a1 + 56);
  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localDeviceID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "computerName"));
  if (v9)
  {
    v13 = objc_msgSend(v10, "storeAttestedLongTermKey:forDeviceID:name:", v6, v11, v12);

    if ((v13 & 1) == 0)
      goto LABEL_16;
LABEL_8:
    v17 = auto_unlock_log(v14);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localDeviceID"));
      v20 = *(unsigned __int8 *)(a1 + 56);
      v29 = 138412802;
      v30 = v19;
      if (v20)
        v21 = CFSTR("YES");
      else
        v21 = CFSTR("NO");
      v31 = 2112;
      v32 = CFSTR("YES");
      v33 = 2112;
      v34 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Saved Local LTK (device ID: %@, saved: %@ attested: %@)", (uint8_t *)&v29, 0x20u);

    }
    v22 = *(void **)(a1 + 32);
    if (*(_BYTE *)(a1 + 56))
      v14 = objc_msgSend(v22, "setLocalAttestedLTK:", v3);
    else
      v14 = objc_msgSend(v22, "setLocalLTK:", v3);
    goto LABEL_16;
  }
  v16 = objc_msgSend(v10, "storeLongTermKey:forDeviceID:name:", v6, v11, v12);

  if (v16)
    goto LABEL_8;
LABEL_16:
  v23 = SFDeviceClassCodeGet(v14, v15);
  if ((_DWORD)v23 == 7)
  {
    v26 = auto_unlock_log(v23);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "New local LTK, clearing escrow secrets", (uint8_t *)&v29, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "handleRequiredStateDisabled");
  }
  else if ((_DWORD)v23 == 1)
  {
    v24 = auto_unlock_log(v23);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "New local LTK, clearing remote LTKs and disabling Auto Unlock for all keys", (uint8_t *)&v29, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "disablePairingForAllKeyDevices");
    objc_msgSend(*(id *)(a1 + 32), "clearRemoteLTKs");
  }

LABEL_25:
  v28 = *(_QWORD *)(a1 + 48);
  if (v28)
    (*(void (**)(uint64_t, void *, _QWORD))(v28 + 16))(v28, v3, 0);

}

void sub_100109374(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  if (v3)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "isMobileActivationErrorNetworkError:", v3);
    v5 = (int)v4;
    v6 = auto_unlock_log(v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v8)
      {
        v10 = 138412290;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Got Mobile Activation network error %@", (uint8_t *)&v10, 0xCu);
      }

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", SFKAuthenticationErrorDomain, 37, 0));
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
    else
    {
      if (v8)
      {
        v10 = 138412290;
        v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Got Mobile Activation error %@", (uint8_t *)&v10, 0xCu);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_10010AF2C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Modern LTK Data")));

  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

}

void sub_10010B048(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("LTK Data")));

  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

}

void sub_10010B4E4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("LTK Data")));
  objc_msgSend(v3, "addObject:", v4);

}

void sub_10010BE4C(id a1, NSError *a2)
{
  uint64_t v2;
  NSObject *v3;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1001133E0();

}

void sub_10010C49C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 32);
  v12 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v10, 200, 0, &v12));
  if (v11)
    objc_msgSend(*(id *)(a1 + 40), "sendLTKResponseWithPayload:viewState:needsUnlock:currentlySyncing:", v11, v7, v8, v9);

}

void sub_10010C764(id *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSMutableDictionary *v15;
  void *v16;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "ltkInfoForDeviceID:modern:", v3, 0));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ltk"));
  if (objc_msgSend(v4, "hasLtkID"))
  {
    v6 = objc_alloc((Class)NSUUID);
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ltkID")));
    v8 = objc_msgSend(v6, "initWithUUIDBytes:", objc_msgSend(v7, "bytes"));

  }
  else
  {
    v8 = 0;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "modificationDataForDeviceID:modern:", v3, 0));
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "longTermKeyForDevice:modern:", v3, 1));
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "modificationDataForDeviceID:modern:", v3, 1));
  v12 = (void *)v11;
  if (v5 | v10)
  {
    if (v5 && objc_msgSend(a1[5], "version") == 1)
    {
      objc_msgSend(a1[6], "setObject:forKeyedSubscript:", v5, v3);
    }
    else
    {
      v15 = objc_opt_new(NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v5, CFSTR("LTK Data"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v9, CFSTR("LTK Mod Date"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v10, CFSTR("Modern LTK Data"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v12, CFSTR("Modern LTK Mod Date"));
      if (v8)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v16, CFSTR("LTK ID"));

      }
      objc_msgSend(a1[6], "setObject:forKeyedSubscript:", v15, v3);

    }
  }
  else
  {
    v13 = auto_unlock_log(v11);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_100113560();

  }
}

id sub_10010CC20(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Keybag assertion fired", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "releaseKeybagAssertion");
}

void sub_10010FA8C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSMutableDictionary *v8;

  v5 = a3;
  v6 = a2;
  v8 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v5, CFSTR("Companion ID"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "watchIDsToPairingRecords"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, v6);

}

id sub_10010FECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, a3);
}

Class sub_100112C24()
{
  Class result;

  if (qword_1007C69C0 != -1)
    dispatch_once(&qword_1007C69C0, &stru_100717CE8);
  result = objc_getClass("CDPStateController");
  qword_1007C69B8 = (uint64_t)result;
  off_1007B1F80 = (uint64_t (*)())sub_100112C80;
  return result;
}

id sub_100112C80()
{
  return (id)qword_1007C69B8;
}

void sub_100112C8C(id a1)
{
  qword_1007C69C8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreCDP.framework/CoreCDP", 2);
}

void sub_100112CB4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_100112CE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to fetch manatee availability (error: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100112D40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "AKS manager adding observers", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100112D6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send first unlocked message (error: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100112DCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Missing escrow", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100112DF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Escrow secret %{private}@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100112E58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Missing escrow for authorization", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100112E84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Session key is missing (device ID: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100112EE4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Encryption error %ld", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_100112F4C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to create random bytes %ld", a5, a6, a7, a8, 0);
  sub_10001949C();
}

void sub_100112FB4()
{
  uint64_t v0;
  os_log_t v1;
  const void *v2;
  const void *v3;

  sub_100029230();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Missing out variables (message: %p, authTag: %p)", v2, v3);
  sub_10001949C();
}

void sub_100113020(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "UUIDString"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "No IDS devices for bluetooth ID: %@", v5);

  sub_1000332E4();
}

void sub_1001130A0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localDeviceID"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "Unable to load LTK (local device ID: %@)", v5);

  sub_1000332E4();
}

void sub_100113120(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localDeviceID"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "Unable to load attested LTK (local device ID: %@)", v5);

  sub_1000332E4();
}

void sub_1001131A0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localDeviceID"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "Could not get ltkInfoForDeviceID localAttestedLTK (local device ID: %@)", v5);

  sub_1000332E4();
}

void sub_100113220()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Missing local device ID to check local LTK", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10011324C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Hash exists but key missing", v1, 2u);
  sub_1000161DC();
}

void sub_100113284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Unknown remote key class for device ID: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001132E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Didn't receive signed LTK. Couldn't store.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100113310(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remoteLTKs"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remoteLTKs"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Remote LTKs")));
  v8 = 138412546;
  v9 = v4;
  v10 = 2112;
  v11 = v6;
  sub_100050D98((void *)&_mh_execute_header, a2, v7, "Remote LTK list is empty (remote ltks %@, list %@)", (uint8_t *)&v8);

}

void sub_1001133E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to send LTK response", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10011340C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to store Watch LTK", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100113438()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error posting follow up %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113498(void *a1, NSObject *a2)
{
  const __CFString *v4;
  uint64_t v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  const __CFString *v10;

  if (objc_msgSend(a1, "hasLocalID"))
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  if (objc_msgSend(a1, "hasLtk"))
    v6 = CFSTR("YES");
  else
    v6 = CFSTR("NO");
  v7 = 138412546;
  v8 = v4;
  v9 = 2112;
  v10 = v6;
  sub_100050D98((void *)&_mh_execute_header, a2, v5, "LTK request missing info (local ID %@, ltk %@)", (uint8_t *)&v7);
}

void sub_100113560()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Missing ltk for deviceID: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001135C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "AKS Manager received unknown type", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001135EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Escrow secret exists %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10011364C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Remote device is iPhone", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100113678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "RemoteLTK exists for deviceID: %@, but pairing does not seem to be valid for AKS", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001136D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Remote LTK missing for deviceID: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113738(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002923C((void *)&_mh_execute_header, a1, a3, "Ranging key exists: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1001137A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error serializing remote LTKs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113808(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remoteLTKs"));
  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, a2, v4, "Saved remote LTKs: %@", v5);

  sub_1000332E4();
}

void sub_100113888()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error persisting remote LTKs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001138E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error loading LTK file: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113948()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error deserializing LTKs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001139A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error serializing watch ID to pairing record: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113A08(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "watchIDsToPairingRecords"));
  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, a2, v4, "Saved watch ID to pairing record: %@", v5);

  sub_1000332E4();
}

void sub_100113A88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error persisting watch ID to pairing record: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113AE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error loading watch IDs to pairing records file: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113B48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Falling back to new dictionary", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100113B74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Setting pairing records load error default", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100113BA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error deserializing pairing records dictionary: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113C00(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "watchIDsToPairingRecords"));
  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, a2, v4, "Loaded pairing records dictionary: %@", v5);

  sub_1000332E4();
}

void sub_100113C80(uint64_t a1, NSObject *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint8_t v6[24];

  objc_opt_class(a1, a2);
  sub_100029230();
  v4 = v3;
  sub_1000161F0((void *)&_mh_execute_header, a2, v5, "Watch IDs to paired records incorrect class (%@)", v6);

  sub_1000332E4();
}

void sub_100113D00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Creating pairing records file", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100113D2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Loading pairing records %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113D8C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Failed to delete legacy watch to companion id file (path: %@, error: %@)");
  sub_10001949C();
}

void sub_100113DEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error loading watch ID to companion ID file: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113E4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error deserializing watch ID to companion ID mapping: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113EAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Loaded watch ID to companion ID mapping: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113F0C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Failed to delete legacy companion id file (path: %@, error: %@)");
  sub_10001949C();
}

void sub_100113F6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error loading companion IDs file: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100113FCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error deserializing companion IDs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10011402C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Error creating Sharing folder for compainon IDs: (path %@, error %@)");
  sub_10001949C();
}

void sub_10011408C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Error creating Auto Unlock folder: (path %@, error %@)");
  sub_10001949C();
}

void sub_1001140EC()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  int v3;

  sub_100112CC8();
  sub_100112CB4((void *)&_mh_execute_header, v0, v1, "Failed to store keychain item (add status:%d, delete status:%d)", v2, v3);
  sub_10001949C();
}

void sub_10011414C(void *a1, NSObject *a2)
{
  unsigned int v4;
  uint64_t v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  void *v10;

  v4 = objc_msgSend(a1, "hasSecret");
  v6 = CFSTR("NO");
  if (v4)
    v6 = CFSTR("YES");
  v7 = 138412547;
  v8 = v6;
  v9 = 2113;
  v10 = a1;
  sub_100050D98((void *)&_mh_execute_header, a2, v5, "Unable to get secret from info (has secret %@, escrow info %{private}@)", (uint8_t *)&v7);
  sub_1000332E4();
}

void sub_1001141EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Received unexpected SecItem error = %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10011424C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to delete escrow secret: %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001142AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to delete all escrow secrets: %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10011430C(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;

  v3[0] = 67109378;
  v3[1] = a2;
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to delete remote LTK (status: %d, query: %@)", (uint8_t *)v3, 0x12u);
  sub_10001949C();
}

void sub_10011438C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to delete local attested LTK: %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001143EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Device ID missing for session key", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100114418()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to delete ranging key: %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100114478()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "Failed to delete all ranging keys: %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDAutoUnlockLTKRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t Data;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  BOOL v40;
  uint64_t v41;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_54;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_56:
        *(_DWORD *)(a1 + 40) = v14;
        continue;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 8;
        goto LABEL_38;
      case 3u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 16;
        goto LABEL_38;
      case 4u:
        v22 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v22);
        v20 = 24;
        goto LABEL_38;
      case 5u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              v9 = v24++ >= 9;
              if (v9)
              {
                v25 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v25 = 0;
LABEL_60:
        v40 = v25 != 0;
        v41 = 44;
        goto LABEL_69;
      case 6u:
        v28 = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(v28);
        v20 = 32;
LABEL_38:
        v29 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      case 7u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 48) |= 4u;
        while (2)
        {
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v32 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v9 = v31++ >= 9;
              if (v9)
              {
                v32 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v32 = 0;
LABEL_64:
        v40 = v32 != 0;
        v41 = 45;
        goto LABEL_69;
      case 8u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 48) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v38 == -1 || v38 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
      v37 |= (unint64_t)(v39 & 0x7F) << v35;
      if ((v39 & 0x80) == 0)
        goto LABEL_66;
      v35 += 7;
      v9 = v36++ >= 9;
      if (v9)
      {
        v37 = 0;
        goto LABEL_68;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v37 = 0;
LABEL_68:
    v40 = v37 != 0;
    v41 = 46;
LABEL_69:
    *(_BYTE *)(a1 + v41) = v40;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockLTKResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t Data;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  uint64_t v37;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_50;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_52;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_52:
        *(_DWORD *)(a1 + 16) = v14;
        continue;
      case 2u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v19;

        continue;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 24) |= 8u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                v23 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v23 = 0;
LABEL_56:
        v36 = v23 != 0;
        v37 = 22;
        goto LABEL_65;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (2)
        {
          v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                v28 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v28 = 0;
LABEL_60:
        v36 = v28 != 0;
        v37 = 21;
        goto LABEL_65;
      case 5u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
      v33 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        goto LABEL_62;
      v31 += 7;
      v9 = v32++ >= 9;
      if (v9)
      {
        v33 = 0;
        goto LABEL_64;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v33 = 0;
LABEL_64:
    v36 = v33 != 0;
    v37 = 20;
LABEL_65:
    *(_BYTE *)(a1 + v37) = v36;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001170D0(id a1)
{
  SDBroadwayAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDBroadwayAgent);
  v2 = (void *)qword_1007C69D8;
  qword_1007C69D8 = (uint64_t)v1;

}

void sub_100117224(uint64_t a1)
{
  id v2;

  if (dword_1007B1FE8 <= 30 && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
    LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent activate]_block_invoke", 30, "Activate");
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "addObserver:selector:name:object:suspensionBehavior:", *(_QWORD *)(a1 + 32), "_applePayCardDectected:", CFSTR("com.apple.stockholm.wallet.tag"), 0, 4);

}

id sub_100117328(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_1001174F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_preparePresentationWithBroadwayActivationCode:testInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100117790(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1001177AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (objc_msgSend(v9, "state") == (id)1 || *(_BYTE *)(a1 + 56))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(WeakRetained, "lookupPhysicalCardWithBroadwayActivationCode:testInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
LABEL_4:

    goto LABEL_5;
  }
  if (dword_1007B1FE8 <= 30 && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
  {
    v7 = objc_msgSend(v9, "state");
    v8 = ((uint64_t (*)(uint64_t))off_1007B2068[0])((uint64_t)v7);
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(v8);
    LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent lookUpValidAccountWithBroadwayActivationCode:testInfo:]_block_invoke", 30, "### Look up valid account failed with state: %@, error: %{error}", WeakRetained, v5);
    goto LABEL_4;
  }
LABEL_5:

}

void sub_100117B18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100117B40(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;
  id v10;
  __int16 v11;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100117C20;
  block[3] = &unk_100717D58;
  v7 = v3;
  v11 = *(_WORD *)(a1 + 64);
  v5 = v3;
  objc_copyWeak(&v10, (id *)(a1 + 56));
  v8 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_100117C20(uint64_t a1)
{
  id v2;
  id WeakRetained;
  uint64_t v4;
  id v5;

  v2 = *(id *)(a1 + 32);
  if (v2)
    goto LABEL_2;
  if (!*(_BYTE *)(a1 + 64) || *(_BYTE *)(a1 + 65))
    goto LABEL_18;
  if (dword_1007B1FE8 <= 30 && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
    LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent lookupPhysicalCardWithBroadwayActivationCode:testInfo:]_block_invoke_2", 30, "Look up valid physical card - creating fake card");
  v4 = off_1007B2060[0]();
  v2 = (id)objc_opt_new(v4);
  if (v2)
  {
LABEL_2:
    v5 = v2;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "_startUIWithPhysicalCard:activationCode:testInfo:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  else
  {
LABEL_18:
    if (dword_1007B1FE8 <= 30
      && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
    {
      LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent lookupPhysicalCardWithBroadwayActivationCode:testInfo:]_block_invoke_2", 30, "No physical card, not showing UI");
    }
  }
}

void sub_100117D50(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;
  id v10;
  __int16 v11;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100117E30;
  block[3] = &unk_100717D58;
  v7 = v3;
  v11 = *(_WORD *)(a1 + 64);
  v5 = v3;
  objc_copyWeak(&v10, (id *)(a1 + 56));
  v8 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_100117E30(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id WeakRetained;
  id v5;

  v2 = *(id *)(a1 + 32);
  if (!v2)
  {
    if (*(_BYTE *)(a1 + 64) && !*(_BYTE *)(a1 + 65))
    {
      if (dword_1007B1FE8 <= 30
        && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
      {
        LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent lookupPhysicalCardWithBroadwayActivationCode:testInfo:]_block_invoke_4", 30, "Look up valid physical card - creating fake card");
      }
      v3 = off_1007B2060[0]();
      v2 = (id)objc_opt_new(v3);
    }
    else
    {
      v2 = 0;
    }
  }
  v5 = v2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_startUIWithPhysicalCard:activationCode:testInfo:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t sub_10011831C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 8))
  {
    if (dword_1007B1FE8 <= 30)
    {
      if (dword_1007B1FE8 != -1)
        return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidActivate:]_block_invoke", 30, "Alert handle DidActivate");
      result = _LogCategory_Initialize(&dword_1007B1FE8, 30);
      if ((_DWORD)result)
        return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidActivate:]_block_invoke", 30, "Alert handle DidActivate");
    }
  }
  else
  {
    if (dword_1007B1FE8 > 60)
      return result;
    if (dword_1007B1FE8 != -1)
      return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidActivate:]_block_invoke", 60, "### Unknown alert DidActivate: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_1007B1FE8, 60);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(v2 + 32);
      return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidActivate:]_block_invoke", 60, "### Unknown alert DidActivate: %@", v1);
    }
  }
  return result;
}

uint64_t sub_100118478(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 8))
  {
    if (dword_1007B1FE8 <= 30)
    {
      if (dword_1007B1FE8 != -1)
        return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, "Alert handle DidDeactivate");
      result = _LogCategory_Initialize(&dword_1007B1FE8, 30);
      if ((_DWORD)result)
        return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, "Alert handle DidDeactivate");
    }
  }
  else
  {
    if (dword_1007B1FE8 > 60)
      return result;
    if (dword_1007B1FE8 != -1)
      return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidDeactivate:]_block_invoke", 60, "### Unknown alert DidDeactivate: %@", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_1007B1FE8, 60);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(v2 + 32);
      return LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandleDidDeactivate:]_block_invoke", 60, "### Unknown alert DidDeactivate: %@", v1);
    }
  }
  return result;
}

void sub_100118600(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  if (a1[4] == *(_QWORD *)(a1[5] + 8))
  {
    if (dword_1007B1FE8 <= 30
      && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
    {
      LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Alert handle DidInvalidate: %{error}", a1[6]);
    }
    v2 = a1[5];
    v3 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;

  }
  else if (dword_1007B1FE8 <= 30
         && (dword_1007B1FE8 != -1 || _LogCategory_Initialize(&dword_1007B1FE8, 30)))
  {
    LogPrintF(&dword_1007B1FE8, "-[SDBroadwayAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Unknown Alert DidInvalidate: %{error}", a1[6]);
  }
}

Class sub_10011873C()
{
  Class result;

  if (qword_1007C69E8 != -1)
    dispatch_once(&qword_1007C69E8, &stru_100717DA0);
  result = objc_getClass("PKAccountService");
  qword_1007C69E0 = (uint64_t)result;
  off_1007B2058[0] = (uint64_t (*)())sub_100118798;
  return result;
}

id sub_100118798()
{
  return (id)qword_1007C69E0;
}

void sub_1001187A4(id a1)
{
  qword_1007C69F0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore", 2);
}

uint64_t sub_1001187CC(uint64_t a1)
{
  if (qword_1007C69E8 != -1)
    dispatch_once(&qword_1007C69E8, &stru_100717DA0);
  off_1007B2068[0] = (uint64_t (*)())dlsym((void *)qword_1007C69F0, "PKAccountStateToString");
  return ((uint64_t (*)(uint64_t))off_1007B2068[0])(a1);
}

Class sub_100118834()
{
  Class result;

  if (qword_1007C69E8 != -1)
    dispatch_once(&qword_1007C69E8, &stru_100717DA0);
  result = objc_getClass("PKPhysicalCard");
  qword_1007C69F8 = (uint64_t)result;
  off_1007B2060[0] = (uint64_t (*)())sub_100118890;
  return result;
}

id sub_100118890()
{
  return (id)qword_1007C69F8;
}

uint64_t sub_10011889C(uint64_t a1)
{
  if (qword_1007C69E8 != -1)
    dispatch_once(&qword_1007C69E8, &stru_100717DA0);
  off_1007B2070 = (uint64_t (*)())dlsym((void *)qword_1007C69F0, "PKStringFromPhysicalCardState");
  return ((uint64_t (*)(uint64_t))off_1007B2070)(a1);
}

uint64_t SDAutoUnlockDeviceFirstUnlockedReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100119628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100119650(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerImport");

}

uint64_t SDUnlockStateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  BOOL v29;
  uint64_t v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0)
          goto LABEL_48;
        v18 += 7;
        v9 = v19++ >= 9;
        if (v9)
        {
          v20 = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v20 = 0;
LABEL_50:
      v29 = v20 != 0;
      v30 = 12;
    }
    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0)
              goto LABEL_44;
            v13 += 7;
            v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v15) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 8) = v15;
        }
        else
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
        }
        continue;
      }
      v23 = 0;
      v24 = 0;
      v25 = 0;
      *(_BYTE *)(a1 + 16) |= 4u;
      while (1)
      {
        v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
        v25 |= (unint64_t)(v27 & 0x7F) << v23;
        if ((v27 & 0x80) == 0)
          goto LABEL_52;
        v23 += 7;
        v9 = v24++ >= 9;
        if (v9)
        {
          v25 = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v25 = 0;
LABEL_54:
      v29 = v25 != 0;
      v30 = 13;
    }
    *(_BYTE *)(a1 + v30) = v29;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10011B6B4(id a1)
{
  void *v1;
  unsigned int v2;
  SDActivityPayloadManager *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "enableContinuity");

  if (v2)
  {
    v3 = objc_alloc_init(SDActivityPayloadManager);
    v4 = (void *)qword_1007C6A00;
    qword_1007C6A00 = (uint64_t)v3;

  }
}

void sub_10011B924(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10011B940(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = objc_msgSend(WeakRetained, "manateeAvailable");

}

id sub_10011BA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleEncryptionKeyRequestRapport:options:responseHandler:", a2, a3, a4);
}

id sub_10011BA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handlePayloadRequestRapport:options:responseHandler:", a2, a3, a4);
}

void sub_10011BA94(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSError *v4;
  uint64_t v5;
  NSObject *v6;

  v2 = a2;
  v4 = v2;
  if (v2)
  {
    v5 = handoff_log(v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1001235AC();

  }
}

void sub_10011BFAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  char isKindOfClass;
  __CFString *v13;
  void *v14;
  __CFString *v15;
  void *v16;
  void *v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "completionHandler"));

  v7 = handoff_log(v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v9)
      sub_100123690();

    v11 = objc_opt_class(SDActivityPayloadRequestRecord, v10);
    isKindOfClass = objc_opt_isKindOfClass(v3, v11);
    v13 = CFSTR("EncryptionKey");
    if ((isKindOfClass & 1) != 0)
      v13 = CFSTR("Request");
    v14 = *(void **)(a1 + 32);
    v15 = v13;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "requestCreatedDate"));
    objc_msgSend(v16, "timeIntervalSinceNow");
    objc_msgSend(v14, "logDashboardHandoffRequestViaTransportLinkType:type:success:rtt:", 0xFFFFFFFFLL, v15, 0);

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "completionHandler"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v17);

  }
  else if (v9)
  {
    sub_10012360C(a1);
  }

}

void sub_10011C7C8(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timeoutTimer"));
  objc_msgSend(v3, "addTimer:forMode:", v2, NSDefaultRunLoopMode);

}

id *sub_10011C830(id *result, char a2)
{
  id *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  NSDate *v10;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(result[4], "requestCreatedDate"));
    objc_msgSend(v3, "timeIntervalSinceNow");
    v5 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[4], "requestCreatedDate"));
    objc_msgSend(v6, "timeIntervalSinceNow");
    if (v5 < 0.0)
      v8 = -v7;
    else
      v8 = v7;

    v9 = (double)(uint64_t)objc_msgSend(v2[4], "timeoutTimeInterval") - v8;
    v10 = objc_opt_new(NSDate);
    objc_msgSend(v2[4], "setRequestCreatedDate:", v10);

    objc_msgSend(v2[4], "setTimeoutTimeInterval:", (uint64_t)v9);
    return (id *)_objc_msgSend(v2[5], "sendIDSEncryptionKeyRequest:withRequestRecord:desiredTimeout:", v2[6], v2[4], v9);
  }
  return result;
}

void sub_10011CC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011CCC8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void **v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, void *, void *);
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id to;
  uint64_t v26;
  void *v27;

  v3 = a2;
  to = 0;
  objc_copyWeak(&to, (id *)(a1 + 64));
  if (v3)
  {
    v6 = handoff_log(v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1001237D8();

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v26 = RPOptionTimeoutSeconds;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
    v27 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));

    v10 = objc_loadWeakRetained(&to);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "linkClient"));
    v17 = _NSConcreteStackBlock;
    v18 = 3221225472;
    v19 = sub_10011CF2C;
    v20 = &unk_100717E70;
    v12 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    objc_copyWeak(&v24, &to);
    v13 = RPDestinationIdentifierDirectPeer;
    v22 = *(id *)(a1 + 48);
    v23 = *(id *)(a1 + 56);
    objc_msgSend(v11, "sendRequestID:request:destinationID:options:responseHandler:", CFSTR("com.apple.handoff.encryption-key-request"), v12, v13, v9, &v17);

    v14 = *(void **)(a1 + 40);
    v15 = objc_loadWeakRetained(&to);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "requestIdentifier", v17, v18, v19, v20, v21));
    objc_msgSend(v14, "messageWithIdentifier:didSendWithSuccess:error:", v16, 1, 0);

    objc_destroyWeak(&v24);
  }
  objc_destroyWeak(&to);

}

void sub_10011CEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011CF2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t Int64Ranged;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  void (*v17)(void);
  void *v18;
  id v19;
  id v20;
  void *v21;
  id WeakRetained;
  uint64_t v23;
  void *v24;
  const char *v25;
  int v26;
  id v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    Int64Ranged = CFDictionaryGetInt64Ranged(v8, RPOptionDataLinkType, 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);
    v12 = handoff_log(Int64Ranged, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", RPOptionXID));
      v24 = (void *)v23;
      if (Int64Ranged > 0xB)
        v25 = "?";
      else
        v25 = off_100718048[(int)Int64Ranged];
      v26 = 138413058;
      v27 = WeakRetained;
      v28 = 2112;
      v29 = v23;
      v30 = 2080;
      v31 = v25;
      v32 = 2112;
      v33 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Encryption key request %@ with xid %@ via Rapport (%s) failed with error %@", (uint8_t *)&v26, 0x2Au);

    }
    if (objc_msgSend(v9, "code") != (id)-6714)
    {
      v14 = *(void **)(a1 + 32);
      v15 = objc_loadWeakRetained((id *)(a1 + 56));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "requestCreatedDate"));
      objc_msgSend(v16, "timeIntervalSinceNow");
      objc_msgSend(v14, "logDashboardHandoffRequestViaTransportLinkType:type:success:rtt:", Int64Ranged, CFSTR("EncryptionKey"), 0);

    }
    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  else
  {
    v18 = *(void **)(a1 + 32);
    v19 = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(v18, "handleEncryptionKeyReplyRapport:options:forRequestRecord:fromDevice:", v7, v8, v19, *(_QWORD *)(a1 + 40));

    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  v17();
  v20 = objc_loadWeakRetained((id *)(a1 + 56));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "linkClient"));
  objc_msgSend(v21, "invalidate");

}

void sub_10011E050(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timeoutTimer"));
  objc_msgSend(v3, "addTimer:forMode:", v2, NSDefaultRunLoopMode);

}

id *sub_10011E0B8(id *result, char a2)
{
  id *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  NSDate *v10;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(result[4], "requestCreatedDate"));
    objc_msgSend(v3, "timeIntervalSinceNow");
    v5 = v4;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[4], "requestCreatedDate"));
    objc_msgSend(v6, "timeIntervalSinceNow");
    if (v5 < 0.0)
      v8 = -v7;
    else
      v8 = v7;

    v9 = (double)(uint64_t)objc_msgSend(v2[4], "timeoutTimeInterval") - v8;
    v10 = objc_opt_new(NSDate);
    objc_msgSend(v2[4], "setRequestCreatedDate:", v10);

    objc_msgSend(v2[4], "setTimeoutTimeInterval:", (uint64_t)v9);
    return (id *)_objc_msgSend(v2[5], "sendIDSActivityPayloadRequest:withRequestRecord:desiredTimeout:", v2[6], v2[4], v9);
  }
  return result;
}

void sub_10011E708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10011E73C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10011E74C(uint64_t a1)
{

}

void sub_10011E754(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  __int128 v19;
  uint8_t buf[16];

  v3 = a2;
  v5 = handoff_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1001239A4();

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceIdentifier"));
  v9 = objc_msgSend(v7, "isEqualToString:", v8);

  if (v9)
  {
    v12 = handoff_log(v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found device we were looking for, attempting to send message", buf, 2u);
    }

    v15 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10011E8A4;
    v17[3] = &unk_100717EC0;
    v16 = *(_QWORD *)(a1 + 48);
    v18 = *(id *)(a1 + 56);
    v19 = *(_OWORD *)(a1 + 64);
    objc_msgSend(v14, "sendActivityPayloadRequestMessageToDevice:withRequestRecord:withDestinationDevice:completionHandler:", v16, v15, v3, v17);

  }
}

void sub_10011E8A4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  (*(void (**)(void))(a1[4] + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "invalidate");
  v2 = *(_QWORD *)(a1[5] + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_10011E900(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  dispatch_source_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD handler[5];
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a2;
  v5 = v3;
  if (v3)
  {
    v6 = handoff_log(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100123A04();

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
  if (v8)
  {
    v9 = v8;
    dispatch_source_cancel(v9);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(v10 + 112);
    *(_QWORD *)(v10 + 112) = 0;

  }
  v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(v13 + 112);
  *(_QWORD *)(v13 + 112) = v12;

  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(void **)(a1 + 40);
  v17 = *(NSObject **)(v15 + 112);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10011EA6C;
  handler[3] = &unk_100717F10;
  v18 = *(_QWORD *)(a1 + 56);
  handler[4] = v15;
  v24 = v18;
  v19 = v16;
  v20 = *(_QWORD *)(a1 + 64);
  v22 = v19;
  v25 = v20;
  v23 = *(id *)(a1 + 48);
  dispatch_source_set_event_handler(v17, handler);
  SFDispatchTimerSet(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), 6.0, -1.0, -4.0);
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 112));

}

void sub_10011EA6C(_QWORD *a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;

  v3 = *(void **)(a1[4] + 112);
  if (v3)
  {
    v4 = v3;
    dispatch_source_cancel(v4);
    v5 = a1[4];
    v6 = *(void **)(v5 + 112);
    *(_QWORD *)(v5 + 112) = 0;

  }
  if (!*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24))
  {
    v7 = handoff_log(a1, a2);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1[5];
      v12 = 138412290;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Cannot send Handoff payload request %@ via Rapport as we did not find the target device. Did not send message.", (uint8_t *)&v12, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "invalidate");
    v10 = *(_QWORD *)(a1[8] + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = 0;

    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_10011EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011EE68(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void **v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, void *, void *);
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id to;
  uint64_t v26;
  void *v27;

  v3 = a2;
  to = 0;
  objc_copyWeak(&to, (id *)(a1 + 64));
  if (v3)
  {
    v6 = handoff_log(v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1001237D8();

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v26 = RPOptionTimeoutSeconds;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
    v27 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));

    v10 = objc_loadWeakRetained(&to);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "linkClient"));
    v17 = _NSConcreteStackBlock;
    v18 = 3221225472;
    v19 = sub_10011F0CC;
    v20 = &unk_100717E70;
    v12 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    objc_copyWeak(&v24, &to);
    v13 = RPDestinationIdentifierDirectPeer;
    v22 = *(id *)(a1 + 48);
    v23 = *(id *)(a1 + 56);
    objc_msgSend(v11, "sendRequestID:request:destinationID:options:responseHandler:", CFSTR("com.apple.handoff.payload-request"), v12, v13, v9, &v17);

    v14 = *(void **)(a1 + 40);
    v15 = objc_loadWeakRetained(&to);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "requestIdentifier", v17, v18, v19, v20, v21));
    objc_msgSend(v14, "messageWithIdentifier:didSendWithSuccess:error:", v16, 1, 0);

    objc_destroyWeak(&v24);
  }
  objc_destroyWeak(&to);

}

void sub_10011F088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011F0CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t Int64Ranged;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  void (*v17)(void);
  void *v18;
  id v19;
  id v20;
  void *v21;
  id WeakRetained;
  uint64_t v23;
  void *v24;
  const char *v25;
  int v26;
  id v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    Int64Ranged = CFDictionaryGetInt64Ranged(v8, RPOptionDataLinkType, 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);
    v12 = handoff_log(Int64Ranged, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", RPOptionXID));
      v24 = (void *)v23;
      if (Int64Ranged > 0xB)
        v25 = "?";
      else
        v25 = off_100718048[(int)Int64Ranged];
      v26 = 138413058;
      v27 = WeakRetained;
      v28 = 2112;
      v29 = v23;
      v30 = 2080;
      v31 = v25;
      v32 = 2112;
      v33 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Handoff payload request %@ with xid %@ via Rapport (%s) failed with error %@", (uint8_t *)&v26, 0x2Au);

    }
    if (objc_msgSend(v9, "code") != (id)-6714)
    {
      v14 = *(void **)(a1 + 32);
      v15 = objc_loadWeakRetained((id *)(a1 + 56));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "requestCreatedDate"));
      objc_msgSend(v16, "timeIntervalSinceNow");
      objc_msgSend(v14, "logDashboardHandoffRequestViaTransportLinkType:type:success:rtt:", Int64Ranged, CFSTR("Request"), 0);

    }
    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  else
  {
    v18 = *(void **)(a1 + 32);
    v19 = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(v18, "handlePayloadReplyRapport:options:forRequestRecord:fromDevice:", v7, v8, v19, *(_QWORD *)(a1 + 40));

    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  v17();
  v20 = objc_loadWeakRetained((id *)(a1 + 56));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "linkClient"));
  objc_msgSend(v21, "invalidate");

}

void sub_10011FE4C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;

  v3 = a2;
  v5 = handoff_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v8 = 138412290;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Responding to Handoff encryption key request from \"%@\" via Rapport", (uint8_t *)&v8, 0xCu);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_10012013C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendEncryptionKeyReplyRequestToDevice:reply:requestIdentifier:", *(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 48));
}

void sub_1001209F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;

  v5 = a2;
  v6 = a3;
  v8 = handoff_log(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v21 = 138412290;
    v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Responding to Handoff payload request from \"%@\" via Rapport", (uint8_t *)&v21, 0xCu);

  }
  v13 = handoff_log(v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    sub_100123E08();

  v17 = handoff_log(v15, v16);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    sub_100123DA8();

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_msgSend(*(id *)(a1 + 40), "activityPayloadReplySuccess:", v6);
  v19 = *(void **)(a1 + 40);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "messageIdentifier"));
  objc_msgSend(v19, "messageWithIdentifier:didSendWithSuccess:error:", v20, 1, 0);

}

id sub_100120CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendIDSActivityPayloadReply:withReplyRecord:", a2, a3);
}

void sub_100120FBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  NSMutableDictionary *v32;
  void *v33;
  void *v34;
  NSUUID *v35;
  SDActivityPayloadReplyRecord *v36;
  id v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  void *v52;

  v7 = a3;
  v8 = a4;
  v9 = *(void **)(a1 + 32);
  v10 = a2;
  objc_msgSend(v9, "timeIntervalSinceNow");
  v12 = SFStringFromTimeInterval(1, -v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v15 = handoff_log(v13, v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v38 = *(_QWORD *)(a1 + 40);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v18 = v7;
    v19 = v8;
    v20 = v10;
    v21 = v13;
    v23 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(a1 + 64);
    v24 = SFHexStringForData(*(_QWORD *)(a1 + 72));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 138413826;
    v40 = v38;
    v41 = 2112;
    v42 = v17;
    v43 = 2112;
    v44 = v23;
    v13 = v21;
    v10 = v20;
    v8 = v19;
    v7 = v18;
    v45 = 2112;
    v46 = v22;
    v47 = 2112;
    v48 = v25;
    v49 = 2112;
    v50 = v26;
    v51 = 2112;
    v52 = v13;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ready to respond to handoff request via %@ from \"%@\" (%@) with requestIdentifier %@ for advertisementPayload %@, command: %@. RTT:%@", buf, 0x48u);

  }
  v29 = handoff_log(v27, v28);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  v31 = v30;
  if (v7)
  {
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      sub_100123FAC();

  }
  else
  {
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      sub_100123EF8(a1);

    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  }
  v32 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 72), CFSTR("rAdvPayload"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v7, CFSTR("rActPayload"));
  if (v8)
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "domain"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v33, CFSTR("rActPayloadErrorDomain"));

    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v8, "code")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v34, CFSTR("rActPayloadErrorCode"));

  }
  v35 = objc_opt_new(NSUUID);
  v36 = objc_opt_new(SDActivityPayloadReplyRecord);
  -[SDActivityPayloadReplyRecord setMessageIdentifier:](v36, "setMessageIdentifier:", v35);
  v37 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *(_QWORD *)(a1 + 64));
  -[SDActivityPayloadReplyRecord setRequestIdentifier:](v36, "setRequestIdentifier:", v37);

  -[SDActivityPayloadReplyRecord setActivityIdentifier:](v36, "setActivityIdentifier:", v10);
  -[SDActivityPayloadReplyRecord setDeviceIdentifier:](v36, "setDeviceIdentifier:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 88) + 88), "setObject:forKeyedSubscript:", v36, v35);
  (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();

}

void sub_1001232B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  void *v21;
  _QWORD v22[3];
  _QWORD v23[3];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("rActPayload")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "advertisementPayload"));

  if (v5 && v4)
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "count") == (id)3)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "removeLastObject");
    v8 = *(void **)(*(_QWORD *)(a1 + 40) + 120);
    v23[0] = *(_QWORD *)(a1 + 48);
    v22[0] = CFSTR("deviceIdentifier");
    v22[1] = CFSTR("advertisementPayload");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "advertisementPayload"));
    v22[2] = CFSTR("activityPayload");
    v23[1] = v9;
    v23[2] = v4;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 3));
    objc_msgSend(v8, "insertObject:atIndex:", v10, 0);

  }
  v11 = handoff_log(v6, v7);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "name"));
    if (v4)
      v14 = CFSTR("YES");
    else
      v14 = CFSTR("NO");
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
    v16 = 138412802;
    v17 = v13;
    v18 = 2112;
    v19 = v14;
    v20 = 2112;
    v21 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "from %@, is final:%@, %@", (uint8_t *)&v16, 0x20u);

  }
}

void sub_100123540(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1001235AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Rapport activation failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10012360C(uint64_t a1)
{
  void *v1;
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
  sub_100029230();
  sub_1000F9D64();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0xCu);

  sub_1000332E4();
}

void sub_100123690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Request failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001236F0()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  NSString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100085488();
  v2 = (objc_class *)objc_opt_class(v0, v1);
  v3 = NSStringFromClass(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100123578();
  sub_100123540((void *)&_mh_execute_header, v5, v6, "%@: Encryption key request - Already have request for key %@. Replacing completion block", v7, v8, v9, v10, 2u);

  sub_100031218();
}

void sub_100123778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Sending encryption key request via Rapport %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001237D8()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100123588();
  sub_100050D98((void *)&_mh_execute_header, v0, (uint64_t)v0, "failed to activate link client for destination device: %@ (%@)", v1);
  sub_10001949C();
}

void sub_100123844()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Sending encryption key request via IDS %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001238A4()
{
  NSObject *v0;
  id *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  sub_100085488();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deviceIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "devices"));
  v6 = 138412546;
  v7 = v3;
  sub_100123554();
  sub_100050D98((void *)&_mh_execute_header, v0, v5, "Encryption key: No device found for identifier %@ (Devices: %@)", (uint8_t *)&v6);

  sub_100031218();
}

void sub_100123944()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Sending payload request via Rapport %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001239A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Found Device: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100123A04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to activate link client for rapport type 16 scanning, error: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100123A64()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100088B14((void *)&_mh_execute_header, v0, (uint64_t)v0, "Sending payload request via IDS %@ to %@", v1);
  sub_10001949C();
}

void sub_100123ACC()
{
  NSObject *v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  sub_100085488();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deviceIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 16), "devices"));
  v6 = 138412546;
  v7 = v3;
  sub_100123554();
  sub_100050D98((void *)&_mh_execute_header, v0, v5, "No device found for identifier %@ (Devices: %@)", (uint8_t *)&v6);

  sub_100031218();
}

void sub_100123B6C()
{
  NSObject *v0;
  uint64_t v1;
  id *v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  sub_1001235A0();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "devices"));
  v5 = 138412546;
  v6 = v1;
  sub_100123554();
  sub_100050D98((void *)&_mh_execute_header, v0, v4, "No device found for identifier %@ (Devices: %@)", (uint8_t *)&v5);

  sub_100031218();
}

void sub_100123BFC()
{
  NSObject *v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  sub_1001235A0();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deviceIdentifier"));
  v5 = 138412546;
  v6 = v1;
  sub_100123554();
  sub_100050D98((void *)&_mh_execute_header, v0, v4, "deviceIdentifier %@ does not match %@", (uint8_t *)&v5);

  sub_100031218();
}

void sub_100123C8C()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100085488();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "UUIDString"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "uniqueIDOverride"));
  sub_100123554();
  sub_100123540((void *)&_mh_execute_header, v4, v5, "Attempting to use unrequested encryption key with requestIdentifier %@ from %@", v6, v7, v8, v9, 2u);

  sub_100031218();
}

void sub_100123D24()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100085488();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "UUIDString"));
  sub_100123578();
  sub_100123540((void *)&_mh_execute_header, v2, v3, "Discarding unrequested encryption key as it is missing the requestIdentifier %@ or device %@", v4, v5, v6, v7, 2u);

  sub_100031218();
}

void sub_100123DA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Payload reply record %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100123E08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Sending payload reply %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100123E68()
{
  NSObject *v0;
  uint64_t v1;
  id *v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  sub_1001235A0();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "devices"));
  v5 = 138412546;
  v6 = v1;
  sub_100123554();
  sub_100050D98((void *)&_mh_execute_header, v0, v4, "No IDS device found for identifier %@ (Devices: %@)", (uint8_t *)&v5);

  sub_100031218();
}

void sub_100123EF8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  v1 = SFHexStringForData(*(_QWORD *)(a1 + 72));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000F9D64();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x2Au);

  sub_100123564();
}

void sub_100123FAC()
{
  NSObject *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  unsigned int v17;

  sub_100085488();
  v3 = v2[5];
  v4 = v2[7];
  v5 = v2[8];
  v6 = SFHexStringForData(v2[9]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = 138413314;
  v9 = v3;
  v10 = 2112;
  v11 = v4;
  v12 = 2112;
  v13 = v5;
  v14 = 2112;
  v15 = v7;
  v16 = 1024;
  v17 = objc_msgSend(v1, "length");
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Responding to request via %@ from %@ with requestIdentifier %@ for advertisementPayload %@ with payload of size %d", (uint8_t *)&v8, 0x30u);

  sub_100123564();
}

void sub_10012407C()
{
  id *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  os_log_t v7;
  os_log_type_t v8;
  const char *v9;
  uint8_t *v10;

  sub_100085488();
  v2 = v1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "deviceIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v0, "devices"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "requestIdentifier"));
  sub_100123578();
  sub_1000F9D64();
  _os_log_error_impl(v6, v7, v8, v9, v10, 0x20u);

}

void sub_100124148()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100050D98((void *)&_mh_execute_header, v0, (uint64_t)v0, "Incoming unhandled protobuf, should never have been called!! protobuf:%@ context:%@", v1);
  sub_10001949C();
}

void sub_1001241B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Incoming unhandled data, should never have been called!! context:%@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100124210()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Incoming unhandled message, should never have been called!! message:%@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100124270()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Could not decode protobuf data (%@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001242D0()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100050D98((void *)&_mh_execute_header, v0, (uint64_t)v0, "Could not encode protobuf data from %@ (%@)", v1);
  sub_10001949C();
}

void sub_100124338()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100088B14((void *)&_mh_execute_header, v0, (uint64_t)v0, "Not replacing current key %@ with received key %@", v1);
  sub_10001949C();
}

void sub_1001243A0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1001235A0();
  objc_msgSend(v0, "length");
  sub_100123540((void *)&_mh_execute_header, v1, v2, "to %@, with payload of size %ld", v3, v4, v5, v6, 2u);
  sub_1000332E4();
}

void sub_1001266F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  const void *v6;

  objc_msgSend(*(id *)(a1 + 32), "_handleCertificate:intermediateCertificate:withTrustResult:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a4);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 48);
  if (v6)
    CFRelease(v6);
}

id sub_10012690C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCertificateCreateResponseWithInfo:error:", a2, a3);
}

id sub_100126B10(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCreateTimerFired");
}

id sub_100126C74(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleFetchTimerFired");
}

void sub_100126F0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[7];
  int v7;
  _QWORD v8[4];
  _QWORD v9[4];

  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v9[3] = a2;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = a3;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 168);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100126FAC;
  v6[3] = &unk_100718100;
  v7 = a4;
  v6[4] = v4;
  v6[5] = v9;
  v6[6] = v8;
  dispatch_async(v5, v6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

void sub_100126FAC(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  const void *v9;
  const void *v10;
  void *v11;
  void *v12;
  id v13;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2)
  {
    v3 = 0;
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 128))
  {
    v3 = 0;
    v2 = -6723;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (v5 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      *(_QWORD *)(v4 + 136) = v5;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136);
      v13 = 0;
      v2 = SFAppleIDCopyKeychainReferenceForKey(v6, &v13);
      v7 = v13;
      v8 = v13;
      v3 = v8;
      if (v2)
        goto LABEL_9;
      if (objc_msgSend(v8, "length"))
      {
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 144), v7);
        objc_msgSend(*(id *)(a1 + 32), "_handleKeyPairAvailable");
        v2 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v3 = 0;
    }
    v2 = -6762;
  }
LABEL_9:
  v9 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v10)
    CFRelease(v10);
  if (v2)
  {
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, v2, 0));
    objc_msgSend(v11, "_responseHandlerWithIdentity:error:", 0, v12);

  }
}

id sub_100127290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCertificateFetchResponseWithInfo:error:", a2, a3);
}

id sub_1001272F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_1001274A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_10012802C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "eject");
}

void sub_1001280F8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDNetworkEjecter: stop", v1, 2u);
}

void sub_100128178(id a1)
{
  SharingDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(SharingDaemon);
  v2 = (void *)qword_1007C6A18;
  qword_1007C6A18 = (uint64_t)v1;

}

void sub_100129920(uint64_t a1, void *a2)
{
  id v3;
  xpc_type_t type;
  uint64_t v5;
  NSObject *v6;
  void *context;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  const char *string;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;

  v3 = a2;
  type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    context = xpc_connection_get_context(*(xpc_connection_t *)(a1 + 32));
    v8 = objc_claimAutoreleasedReturnValue(context);
    v9 = (void *)v8;
    if (v3 == &_xpc_error_connection_invalid)
    {
      v17 = daemon_log(v8);
      v11 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v20 = 134217984;
        v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "XPC_ERROR_CONNECTION_INVALID <%p>", (uint8_t *)&v20, 0xCu);
      }
    }
    else if (v3 == &_xpc_error_connection_interrupted)
    {
      v18 = daemon_log(v8);
      v11 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_10012B00C();
    }
    else
    {
      v10 = daemon_log(v8);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (v3 == &_xpc_error_termination_imminent)
      {
        if (v12)
          sub_10012B070();
      }
      else if (v12)
      {
        sub_10012B0D4();
      }
    }

    if (v9)
    {
      objc_msgSend(v9, "invalidate");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectKey"));
      if (v19)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "removeObjectForKey:", v19);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "removeObject:", v9);
      xpc_connection_set_context(*(xpc_connection_t *)(a1 + 32), 0);

    }
  }
  else
  {
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      string = xpc_dictionary_get_string(v3, "Object");
      if (!string)
        goto LABEL_27;
      v14 = string;
      if (!strcmp(string, "Browser"))
      {
        objc_msgSend(*(id *)(a1 + 40), "handleBrowserMessage:forConnection:", v3, *(_QWORD *)(a1 + 32));
        goto LABEL_27;
      }
      v15 = strcmp(v14, "Operation");
      if (!(_DWORD)v15)
      {
        objc_msgSend(*(id *)(a1 + 40), "handleOperationMessage:forConnection:", v3, *(_QWORD *)(a1 + 32));
        goto LABEL_27;
      }
      v16 = daemon_log(v15);
      v6 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10012B138();
    }
    else
    {
      v5 = daemon_log(type);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10012B164();
    }

  }
LABEL_27:

}

void sub_10012A56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012A58C(uint64_t a1, void *a2)
{
  id v3;
  xpc_type_t type;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL4 v8;

  v3 = a2;
  type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    v7 = daemon_log(type);
    v6 = objc_claimAutoreleasedReturnValue(v7);
    v8 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v3 == &_xpc_error_termination_imminent)
    {
      if (v8)
        sub_10012B200();
    }
    else if (v8)
    {
      sub_10012B22C();
    }
    goto LABEL_11;
  }
  if (type != (xpc_type_t)&_xpc_type_connection)
  {
    v5 = daemon_log(type);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_10012B258();
LABEL_11:

    goto LABEL_12;
  }
  objc_msgSend(*(id *)(a1 + 32), "handleNewConnection:", v3);
LABEL_12:

}

id sub_10012A65C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "stateCapture");
}

void sub_10012A664(id a1)
{
  id v1;

  v1 = (id)GestaltCopyAnswer(CFSTR("ProductType"), 0, 0);
  byte_1007B21B8 = objc_msgSend(v1, "isEqual:", CFSTR("AppleTV5,3")) ^ 1;

}

Class sub_10012A984(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6A30)
  {
    v4 = off_100718208;
    v5 = 0;
    qword_1007C6A30 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6A30)
    sub_10012B284(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("DDUICoreAgent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10012B300();
  qword_1007C6A28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10012AA60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "stringFromXPCObject result is not a string", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AA8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "arrayFromXPCObject result is not an array", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AAB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "numberFromXPCObject result is not a number or BOOLean", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AAE4(void *a1, NSObject *a2)
{
  _xpc_connection_s *v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t pid;
  uint64_t v11;
  int v12;
  void *v13;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "connection"));
  v6 = sub_10019CD60(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = v8;
  if (!v8)
  {
    v2 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "connection"));
    pid = xpc_connection_get_pid(v2);
    v11 = NSPrintF("%#{pid}", pid);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }
  v12 = 138412290;
  v13 = v9;
  sub_1000161F0((void *)&_mh_execute_header, a2, v7, "%@ is not entitled to do AirDrop discovery", (uint8_t *)&v12);
  if (!v8)
  {

  }
}

void sub_10012ABD4(void *a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10019CD60(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v5, "%@ is not entitled to get the AirDrop discoverable mode", v6);

  sub_1000332E4();
}

void sub_10012AC54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "handleBrowserMessage functionName is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AC80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "kSharingBrowserCreate kind is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012ACAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "kSharingBrowserCreate node is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012ACD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "handleBrowserMessage browser is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AD04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "openNode returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AD64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "closeNode returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012ADC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "addNode returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AE24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "removeNode returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AE84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "handleOperationMessage functionName is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AEB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "kSharingOperationCreate kind is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AEDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "kSharingOperationCreate operation is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AF08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "handleOperationMessage operation is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AF34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "kSharingOperationSetProperty name is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012AF60(void *a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_10019CD60(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v5, "%@ is not entitled to set the AirDrop discoverable mode", v6);

  sub_1000332E4();
}

void sub_10012AFE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "kSharingOperationResume imageData is invalid", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012B00C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "Lost connection to client <%p>", v2);
  sub_10001949C();
}

void sub_10012B070()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "XPC_ERROR_TERMINATION_IMMINENT <%p>", v2);
  sub_10001949C();
}

void sub_10012B0D4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown XPC error <%p>", v2);
  sub_10001949C();
}

void sub_10012B138()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown object", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012B164()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown XPC type", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012B190(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a1, a3, "Unable to load DDUICoreAgentClass; isSupported: %d",
    a5,
    a6,
    a7,
    a8,
    0);
  sub_1000161DC();
}

void sub_10012B200()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "XPC_ERROR_TERMINATION_IMMINENT", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012B22C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Unknown XPC error", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012B258()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Unknown XPC type", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10012B284(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *DeviceDiscoveryUICoreLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SharingDaemon.m"), 82, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_10012B300()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getDDUICoreAgentClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SharingDaemon.m"), 83, CFSTR("Unable to find class %s"), "DDUICoreAgent");

  __break(1u);
}

id sub_10012C348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return _objc_msgSend(a8, "handleBrowseCallBack:interface:error:name:type:domain:", a2, a3, a4, a5, a6, a7);
}

id sub_10012C474(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateBrowserState");
}

id sub_10012C47C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateBrowserState");
}

id sub_10012D4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  return _objc_msgSend(a11, "handleQueryCallBack:error:fullname:rrtype:rdlen:rdata:", a2, a4, a5, a6, a8, a9);
}

id sub_10012DF58(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "clearCache");
  return objc_msgSend(*(id *)(a1 + 32), "notifyClient");
}

void sub_10012E944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012E970(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  id WeakRetained;
  int v9;
  uint64_t v10;

  v3 = a2;
  v4 = airdrop_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1001308C0(a1, (uint64_t)v3, v6);
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v9 = 138412290;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updated RPIdentity for %@", (uint8_t *)&v9, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "invalidate");

}

const __CFString *sub_10012EE5C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return CFSTR("?");
  else
    return (const __CFString *)*((_QWORD *)&off_100718308 + a1 - 1);
}

id sub_10012F5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleIdentity:withQueryID:emailOrPhone:error:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3);
}

void sub_100130558()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Bonjour browser failed to find awdl0 interface", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130584(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = a2;
  sub_10006CFBC((void *)&_mh_execute_header, a2, a3, "WirelessProximity foundDevice %@ rssi %@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_10001949C();
}

void sub_1001305F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDBonjourBrowser: failedToStartAdvertisingWithError %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100130658()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceSetDispatchQueue returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001306B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceBrowse returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130718()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceCreateConnection returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: _SDServiceInstanceName returned nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001307A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: CFStringGetCString failed to get fullName", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001307D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceQueryRecord returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130830()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to update RPIdentity because emailOrPhone is empty", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10013085C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to update RPIdentity because contactID is nil for %{private}@", a5, a6, a7, a8, 3u);
  sub_10001949C();
}

void sub_1001308C0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *(_QWORD *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = a2;
  sub_10006CFBC((void *)&_mh_execute_header, a2, a3, "Failed to update RPIdentity for %@ with error %@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_10001949C();
}

void sub_100130934()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Discovery validation failed because SecTrustRef is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130960(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v3 = 141558531;
  v4 = 1752392040;
  v5 = 2113;
  v6 = a1;
  v7 = 2112;
  v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDBonjourBrowse:  failed to copy identity for %{private, mask.hash}@ with error %@", (uint8_t *)&v3, 0x20u);
}

void sub_1001309F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: handleBrowseCallBack returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130A58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: handleQueryCallBack called with unexpected type %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100130AB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: handleQueryCallBack returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDAuthenticationPairingCreateRecordReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t Data;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_45;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_47:
        v32 = 32;
        goto LABEL_52;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 16;
        goto LABEL_36;
      case 3u:
        v21 = 0;
        v22 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v14 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_51:
        v32 = 8;
LABEL_52:
        *(_DWORD *)(a1 + v32) = v14;
        continue;
      case 4u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 24;
LABEL_36:
        v26 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      case 5u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
      v29 |= (unint64_t)(v31 & 0x7F) << v27;
      if ((v31 & 0x80) == 0)
        goto LABEL_54;
      v27 += 7;
      v9 = v28++ >= 9;
      if (v9)
      {
        v29 = 0;
        goto LABEL_56;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v29 = 0;
LABEL_56:
    *(_BYTE *)(a1 + 36) = v29 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100131898(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onQueue_start");
}

void sub_100131CB4(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSErrorUserInfoKey v7;
  const __CFString *v8;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v3 = *(void **)(a1 + 32);
    v4 = SFAutoUnlockErrorDomain;
    v7 = NSLocalizedDescriptionKey;
    v8 = CFSTR("Failed to send step data");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v4, 103, v5));
    objc_msgSend(v3, "notifyDelegateWithError:", v6);

  }
}

id *sub_1001320E8(id *result)
{
  id *v1;
  uint64_t v2;
  NSObject *v3;
  __int16 v4[8];

  if (*((_WORD *)result + 24) == 503)
  {
    v1 = result;
    v2 = auto_unlock_log(result);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeRegistrationStep", (uint8_t *)v4, 2u);
    }

    objc_msgSend(v1[4], "invalidateResponseTimer");
    return (id *)objc_msgSend(v1[4], "handleStepData:", v1[5]);
  }
  return result;
}

void sub_1001321C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create step data", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001321F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create AKS session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100132220()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Device is locked", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10013224C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not parse registration request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100132278()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Registration step missing step data", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001322A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not confirm session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDAuthenticationPairingDisableReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t String;
  uint64_t v23;
  void *v24;
  uint64_t result;
  uint64_t v26;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0)
          goto LABEL_11;
        v4 += 7;
        v9 = v5++ >= 9;
        if (v9)
        {
          v6 = 0;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v6 = 0;
LABEL_13:
      if (v10 || (v6 & 7) == 4)
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      v12 = v6 >> 3;
      if ((v6 >> 3) == 3)
        break;
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_46;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 20;
        goto LABEL_45;
      }
      String = PBReaderReadString(a2);
      v23 = objc_claimAutoreleasedReturnValue(String);
      v24 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v23;

LABEL_46:
      if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    *(_BYTE *)(a1 + 24) |= 1u;
    while (1)
    {
      v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_42;
      v18 += 7;
      v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_44:
    v26 = 16;
LABEL_45:
    *(_DWORD *)(a1 + v26) = v15;
    goto LABEL_46;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100132F04(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 264));
  objc_msgSend(WeakRetained, "fileZipper:event:withProperty:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t sub_100134EF8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  NSObject *v6;

  v5 = airdrop_log(a1);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_100136968(a2, a3, v6);

  return 2;
}

void sub_100134F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;

  v4 = airdrop_log(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_100136A1C();

  v6 = BOMCopierUserData(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v7, "bomCopierFatalError:", a2);

}

void sub_100134FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;

  v4 = BOMCopierUserData(a1);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v5, "notifyProgress:force:", a3, 0);

}

void sub_100135004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;

  v5 = airdrop_log(a1);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_100136A7C();

  v7 = BOMCopierUserData(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v8, "bomCopierFatalFileError:", a3);

}

void sub_10013507C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  id v10;

  v9 = BOMCopierUserData(a1);
  v10 = (id)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v10, "bomCopierCopyFileFinished:type:size:operation:", a2, a3, a4, a5);

}

uint64_t sub_1001350D8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = airdrop_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_100136AF8();

  return 2;
}

void sub_100135124(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 176);
  if (v2)
    objc_msgSend(v3, "executeReadWithAdaptiveCompression");
  else
    objc_msgSend(v3, "executeWriteWithAdaptiveCompression");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_1001355D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyProgress:force:", 0, 1);
}

uint64_t sub_1001355E4(uint64_t a1)
{
  uint64_t result;

  result = BOMCopierFree(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = 0;
  return result;
}

void sub_100135B80(uint64_t a1)
{
  id v2;
  NSMutableDictionary *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  id v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  __CFString **v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  SDAirDropCompressor *v28;
  SDAirDropCompressor *v29;
  uint64_t v30;
  void *v31;
  uint8_t v32[8];
  CFWriteStreamRef stream;
  _BYTE buf[24];

  v2 = objc_msgSend(*(id *)(a1 + 32), "initBomWithFiles");
  if ((_DWORD)v2)
  {
    stream = 0;
    v3 = objc_opt_new(NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), CFSTR("indexbom"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("copyResources"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("sourceIsAppSandboxed"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("copyExtendedAttributes"));
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "disableCompression");
    v5 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v4)
    {
      if (!*(_BYTE *)(v5 + 8))
      {
        v6 = airdrop_log(v4);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using CPIO archiving", buf, 2u);
        }

        v8 = (const __CFString *)&__kCFBooleanTrue;
        v9 = CFSTR("createCPIO");
LABEL_24:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v8, v9);
        stream = (CFWriteStreamRef)CFRetain(*(CFTypeRef *)(*(_QWORD *)(a1 + 32) + 104));
        v18 = off_100719B98;
LABEL_25:
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 248), *v18);
        v22 = (void *)sub_10019ADCC(*(const __CFArray **)(*(_QWORD *)(a1 + 32) + 224));
        if (stream)
        {
          v23 = CFWriteStreamOpen(stream);
          if ((_DWORD)v23)
          {
            -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", stream, CFSTR("outputStream"));
          }
          else
          {
            v24 = airdrop_log(v23);
            v25 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              sub_100136E5C();

          }
          CFRelease(stream);
        }
        objc_msgSend(*(id *)(a1 + 32), "startBomCopy:destination:options:", v22, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), v3);

        goto LABEL_33;
      }
    }
    else if (!*(_BYTE *)(v5 + 8))
    {
      v12 = objc_msgSend(*(id *)(v5 + 88), "enablePKZip");
      v5 = *(_QWORD *)(a1 + 32);
      if (!v12)
      {
        v19 = objc_msgSend(*(id *)(v5 + 88), "enableDVZip");
        if ((_DWORD)v19 && !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 216))
        {
          *(_QWORD *)buf = 0;
          v26 = airdrop_log(v19);
          v27 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v32 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using CPIO archiving with adaptive compression", v32, 2u);
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("createCPIO"));
          CFStreamCreateBoundPair(0, (CFReadStreamRef *)buf, &stream, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
          v28 = [SDAirDropCompressor alloc];
          v29 = -[SDAirDropCompressor initWithReadStream:writeStream:](v28, "initWithReadStream:writeStream:", *(_QWORD *)buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
          v30 = *(_QWORD *)(a1 + 32);
          v31 = *(void **)(v30 + 176);
          *(_QWORD *)(v30 + 176) = v29;

          CFRelease(*(CFTypeRef *)buf);
          v18 = off_100719BA8;
          goto LABEL_25;
        }
        v20 = airdrop_log(v19);
        v21 = objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using CPIO archiving with gzip compression", buf, 2u);
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("createCPIO"));
        v8 = CFSTR("gzip");
        v9 = CFSTR("compressCPIO");
        goto LABEL_24;
      }
    }
    v13 = objc_msgSend(*(id *)(v5 + 88), "enablePKZipCompression");
    v14 = (int)v13;
    v15 = airdrop_log(v13);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = "archiving";
      if (v14)
        v17 = "compression";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using PKZip %s", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("createPKZip"));
    if ((v14 & 1) == 0)
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &off_10074B940, CFSTR("zlibCompressionLevel"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("sequesterResources"));
    stream = (CFWriteStreamRef)CFRetain(*(CFTypeRef *)(*(_QWORD *)(a1 + 32) + 104));
    v18 = off_100719BA0;
    goto LABEL_25;
  }
  v10 = airdrop_log(v2);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    sub_100136E88();

  v3 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
  objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:withProperty:", 10, v3);
LABEL_33:

}

void sub_1001360EC(uint64_t a1)
{
  NSMutableDictionary *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  NSMutableDictionary *v7;
  const __CFString *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  SDAirDropCompressor *v12;
  SDAirDropCompressor *v13;
  uint64_t v14;
  void *v15;
  __CFReadStream *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint8_t v22[16];
  uint8_t buf[8];
  CFReadStreamRef readStream;

  readStream = 0;
  v2 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("copyResources"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("copyExtendedAttributes"));
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "isEqual:", CFSTR("pkzip"));
  if ((_DWORD)v3)
  {
    v4 = airdrop_log(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Unzip: AirDrop is using PKZip compression", buf, 2u);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("extractPKZip"));
    v6 = CFSTR("sequesterResources");
    v7 = v2;
    v8 = (const __CFString *)&__kCFBooleanTrue;
    goto LABEL_13;
  }
  v9 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 240), "isEqual:", CFSTR("dvzip"));
  if (!(_DWORD)v9)
  {
    v17 = airdrop_log(v9);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Unzip: AirDrop is using CPIO archiving with auto compression detection", buf, 2u);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("extractCPIO"));
    v8 = CFSTR("auto");
    v6 = CFSTR("compressCPIO");
    v7 = v2;
LABEL_13:
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v8, v6);
    v16 = (__CFReadStream *)CFRetain(*(CFTypeRef *)(*(_QWORD *)(a1 + 32) + 96));
    readStream = v16;
    if (!v16)
      goto LABEL_20;
    goto LABEL_14;
  }
  *(_QWORD *)buf = 0;
  v10 = airdrop_log(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unzip: AirDrop is using CPIO archiving with adaptive compression", v22, 2u);
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("extractCPIO"));
  CFStreamCreateBoundPair(0, &readStream, (CFWriteStreamRef *)buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 208));
  v12 = [SDAirDropCompressor alloc];
  v13 = -[SDAirDropCompressor initWithReadStream:writeStream:](v12, "initWithReadStream:writeStream:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(_QWORD *)buf);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 176);
  *(_QWORD *)(v14 + 176) = v13;

  CFRelease(*(CFTypeRef *)buf);
  v16 = readStream;
  if (readStream)
  {
LABEL_14:
    v19 = CFReadStreamOpen(v16);
    if ((_DWORD)v19)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", readStream, CFSTR("inputStream"));
    }
    else
    {
      v20 = airdrop_log(v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_100136F14();

    }
    CFRelease(readStream);
  }
LABEL_20:
  objc_msgSend(*(id *)(a1 + 32), "startBomCopy:destination:options:", 0, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), v2);

}

uint64_t sub_100136404(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if (result)
    return BOMCopierCancelCopy();
  return result;
}

void sub_100136604()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMFSObjectNewFromPath(\"%s\") failed", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100136664()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomInsertFSObject(\"%s\") failed", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001366C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles placeholderFiles is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001366F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles file count is zero", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10013671C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDAirDropFileZipper: createPlaceholderFiles originalName[%d] is nil", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100136780()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles originalName \"%s\" contains illegal characters", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001367E0(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10006CFB0((void *)&_mh_execute_header, a3, (uint64_t)a3, "SDAirDropFileZipper: CFURLCopyLastPathComponent returned NULL", a1);
}

void sub_100136814(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10006CFB0((void *)&_mh_execute_header, a3, (uint64_t)a3, "SDAirDropFileZipper: createPlaceholderFiles conflict not handled", a1);
}

void sub_100136848()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: moveObjectAtURL2 %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001368A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: removeObjectAtURL %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100136908()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: moveObjectAtURL %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100136968(uint64_t a1, int __errnum, NSObject *a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  __int16 v8;
  char *v9;

  v4 = 136315650;
  v5 = a1;
  v6 = 1024;
  v7 = __errnum;
  v8 = 2080;
  v9 = strerror(__errnum);
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: bomCopierFileErrorPtr - %s, errno = %d (%s)", (uint8_t *)&v4, 0x1Cu);
}

void sub_100136A1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: bomCopierFatalErrorPtr - %s", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100136A7C()
{
  int v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  int v4;

  sub_100029230();
  v3 = 1024;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: bomCopierFatalFileErrorPtr - %s (%d)", v2, 0x12u);
  sub_10001949C();
}

void sub_100136AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: bomCopierFileConflictErrorPtr - %s", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100136B58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: No files were found", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136B84(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDAirDropFileZipper: BOMCopierCopyWithOptions returned %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100136BE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136C14(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDAirDropFileZipper: startBomCopy %s", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100136C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: _bomPath is nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136CC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomNew returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136CEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMFSObjectNewFromPath failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136D18(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDAirDropFileZipper: copyCommonParent(%@) returned NULL", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100136D80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropZipper: delegate is nil, initBomWithFiles failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136DAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomInsertFSObject failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136DD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: copyUserFolder returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136E04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFURLCreateWithFileSystemPathRelativeToBase returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136E30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFURLCopyAbsoluteURL returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136E5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFWriteStreamOpen failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136E88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: initBomWithFiles failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100136EB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: _SDUniqueTemporaryFolder failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100136F14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFReadStreamOpen failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

id sub_100136FFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

void sub_1001374B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_1001374D0(uint64_t a1)
{
  if (dword_1007B21C0 <= 50 && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 50)))
    LogPrintF(&dword_1007B21C0, "-[SDXPCServer _activate]_block_invoke", 50, "Prefs changed\n");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "prefsChanged");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "prefsChanged");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "prefsChanged");
}

id sub_1001375B0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_stateDump");
}

id sub_100137610(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_100137C38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_connectionInvalidated:", *(_QWORD *)(a1 + 40));
}

void sub_100138CE4(uint64_t a1)
{
  id v2;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v2, "autoFillDismissUserNotification");

}

void sub_100138D34(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;

  v5 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v6 = a3;
  dispatch_assert_queue_V2(v5);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v7, "autoFillPairingSucceeded:completion:", a2, v6);

}

void sub_100138DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v6, "autoFillPromptForPIN:throttleSeconds:", a2, a3);

}

void sub_100139C5C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    sub_100145308(v2);

}

void sub_10013ACD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const __CFString *v23;
  _UNKNOWN **v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *j;
  uint64_t v33;
  void *v34;
  void *v35;
  BOOL v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *k;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  _UNKNOWN **v57;
  const __CFString *v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  _BYTE v82[128];
  _BYTE v83[128];
  _BYTE v84[128];
  _QWORD v85[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v85[0] = CNContactEmailAddressesKey;
  v85[1] = CNContactPhoneNumbersKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v85, 2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactIdentifier"));
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactWithContactIdentifier:", v4));
    if (v5)
    {
      v6 = (id)v5;
      if (*(_BYTE *)(a1 + 48)
        && (v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor")),
            v8 = objc_msgSend(v7, "contactIsBlocked:", v6),
            v7,
            v8))
      {
        v9 = *(_QWORD *)(a1 + 40);
        v10 = NSErrorWithOSStatusF(4294896150, "Contact is blocked");
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v11);

      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
LABEL_22:

LABEL_23:
      goto LABEL_24;
    }
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "emailAddress"));
  if (v4)
  {
    v63 = v3;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactsWithPhoneNumberOrEmail:keys:", v4, v3));
    v12 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v77, v84, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v78;
      while (2)
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v78 != v14)
            objc_enumerationMutation(v6);
          if (*(_BYTE *)(a1 + 48))
          {
            v16 = *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)i);
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
            LOBYTE(v16) = objc_msgSend(v17, "contactIsBlocked:", v16);

            if ((v16 & 1) != 0)
            {
              v20 = *(_QWORD *)(a1 + 40);
              v21 = NSErrorWithOSStatusF(4294896150, "Contact is blocked");
              v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
              (*(void (**)(uint64_t, _QWORD, void *))(v20 + 16))(v20, 0, v22);

              v18 = v6;
              goto LABEL_20;
            }
          }
        }
        v13 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v77, v84, 16);
        if (v13)
          continue;
        break;
      }
    }

    if (objc_msgSend(v6, "count"))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactWithPreferredIdentifierForContacts:", v6));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
      objc_msgSend(*(id *)(a1 + 32), "setContactIdentifier:", v19);

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_20:
      v3 = v63;
LABEL_21:

      goto LABEL_22;
    }
    v62 = v2;
    v23 = CFSTR("@icloud.com");
    if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("@icloud.com"), 13) == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v23 = CFSTR("@mac.com");
      v3 = v63;
      if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("@mac.com"), 13) == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v23 = CFSTR("@me.com");
        if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("@me.com"), 13) == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v23 = CFSTR("@gmail.com");
          if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("@gmail.com"), 13) == (id)0x7FFFFFFFFFFFFFFFLL)
          {
            v23 = CFSTR("@googlemail.com");
            if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("@googlemail.com"), 13) == (id)0x7FFFFFFFFFFFFFFFLL)
            {
              v23 = 0;
              v24 = 0;
            }
            else
            {
              v24 = &off_10074FCD0;
            }
          }
          else
          {
            v24 = &off_10074FCB8;
          }
        }
        else
        {
          v24 = &off_10074FCA0;
        }
      }
      else
      {
        v24 = &off_10074FC88;
      }
    }
    else
    {
      v24 = &off_10074FC70;
      v3 = v63;
    }
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v73, v83, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v74;
      v57 = v24;
      v58 = v23;
      v56 = *(_QWORD *)v74;
      while (2)
      {
        v27 = 0;
        v59 = v25;
        do
        {
          if (*(_QWORD *)v74 != v26)
            objc_enumerationMutation(v24);
          v60 = v27;
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", v23, *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * v27)));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactsWithPhoneNumberOrEmail:keys:", v18, v3));

          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v6 = v28;
          v29 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v69, v82, 16);
          if (v29)
          {
            v30 = v29;
            v31 = *(_QWORD *)v70;
            while (2)
            {
              for (j = 0; j != v30; j = (char *)j + 1)
              {
                if (*(_QWORD *)v70 != v31)
                  objc_enumerationMutation(v6);
                v33 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)j);
                v34 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
                LODWORD(v33) = objc_msgSend(v34, "contactIsBlocked:", v33);

                if ((_DWORD)v33)
                {
                  v51 = *(_QWORD *)(a1 + 40);
                  v52 = NSErrorWithOSStatusF(4294896150, "Contact is blocked");
                  v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
                  (*(void (**)(uint64_t, _QWORD, void *))(v51 + 16))(v51, 0, v53);

                  v54 = v6;
                  v2 = v62;
                  goto LABEL_72;
                }
              }
              v30 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v69, v82, 16);
              if (v30)
                continue;
              break;
            }
          }

          if (objc_msgSend(v6, "count"))
          {
            v2 = v62;
            v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "contactWithPreferredIdentifierForContacts:", v6));
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "identifier"));
            objc_msgSend(*(id *)(a1 + 32), "setContactIdentifier:", v55);

            objc_msgSend(*(id *)(a1 + 32), "setEmailAddress:", v18);
            (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_72:
            v3 = v63;

            goto LABEL_21;
          }

          v27 = v60 + 1;
          v2 = v62;
          v3 = v63;
          v24 = v57;
          v23 = v58;
          v26 = v56;
        }
        while ((id)(v60 + 1) != v59);
        v25 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v73, v83, 16);
        if (v25)
          continue;
        break;
      }
    }

  }
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "phoneNumber"));
  v36 = v35 != 0;
  if (v35)
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactsWithPhoneNumberOrEmail:keys:", v35, v3));
    if (objc_msgSend(v37, "count"))
    {
      v64 = v3;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v61 = v37;
      v38 = v37;
      v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v65, v81, 16);
      if (v39)
      {
        v40 = v39;
        v41 = *(_QWORD *)v66;
        while (2)
        {
          for (k = 0; k != v40; k = (char *)k + 1)
          {
            if (*(_QWORD *)v66 != v41)
              objc_enumerationMutation(v38);
            if (*(_BYTE *)(a1 + 48))
            {
              v43 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)k);
              v44 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
              LOBYTE(v43) = objc_msgSend(v44, "contactIsBlocked:", v43);

              if ((v43 & 1) != 0)
              {
                v46 = *(_QWORD *)(a1 + 40);
                v47 = NSErrorWithOSStatusF(4294896150, "Contact is blocked");
                v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
                (*(void (**)(uint64_t, _QWORD, void *))(v46 + 16))(v46, 0, v48);

                goto LABEL_67;
              }
            }
          }
          v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v65, v81, 16);
          if (v40)
            continue;
          break;
        }
      }

      v38 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactWithPreferredIdentifierForContacts:", v38));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "identifier"));
      objc_msgSend(*(id *)(a1 + 32), "setContactIdentifier:", v45);

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_67:

      v3 = v64;
      v36 = v35 != 0;
      v37 = v61;
    }
    else
    {
      v36 = 0;
    }

  }
  if (!v36)
  {
    v49 = *(_QWORD *)(a1 + 40);
    v50 = NSErrorWithOSStatusF(4294960569, "Contact not found");
    v4 = (void *)objc_claimAutoreleasedReturnValue(v50);
    (*(void (**)(uint64_t, _QWORD, void *))(v49 + 16))(v49, 0, v4);
    goto LABEL_23;
  }
LABEL_24:

}

void sub_10013B768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013B7B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10013B7C0(uint64_t a1)
{

}

uint64_t sub_10013B7C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_1007B21C0 <= 90)
    {
      if (dword_1007B21C0 == -1)
      {
        if (!_LogCategory_Initialize(&dword_1007B21C0, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_1007B21C0, "-[SDXPCConnection getDeviceAssets:completion:]_block_invoke", 90, "### GetDeviceAssets failed: %{error}\n", v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_10013B888(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  void *v8;
  const char *v9;
  id v10;
  uint64_t v11;
  id v12;
  void (*v13)(void);
  id v14;

  v14 = a5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bundlePath"));
  if (v8)
  {
    if (dword_1007B21C0 <= 30
      && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 30)))
    {
      v9 = "no";
      if (a4)
        v9 = "yes";
      LogPrintF(&dword_1007B21C0, "-[SDXPCConnection getDeviceAssets:completion:]_block_invoke_2", 30, "GetDeviceAssets complete: XID 0x%X, BundlePath '%@', Fallback %s\n", *(unsigned int *)(a1 + 40), v8, v9);
    }
    v12 = objc_alloc_init((Class)SFClientGetDeviceAssetsResults);
    objc_msgSend(v12, "setAssetBundlePath:", v8);
    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    if (v14)
    {
      v10 = v14;
    }
    else
    {
      v11 = NSErrorF(NSOSStatusErrorDomain, 4294960596, "No bundle without error");
      v10 = (id)objc_claimAutoreleasedReturnValue(v11);
    }
    v12 = v10;
    if (dword_1007B21C0 <= 90
      && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 90)))
    {
      LogPrintF(&dword_1007B21C0, "-[SDXPCConnection getDeviceAssets:completion:]_block_invoke_2", 90, "### GetDeviceAssets failed: XID 0x%X, %{error}\n", *(unsigned int *)(a1 + 40), v12);
    }
    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v13();

}

id sub_10013BBBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_getPeopleInfo:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10013BBCC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_getPeopleSuggestions:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10013C5C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (*v6)(void);
  id v7;

  v7 = a2;
  v5 = a3;
  if (v5)
  {
    if (dword_1007B21C0 <= 90
      && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 90)))
    {
      LogPrintF(&dword_1007B21C0, "-[SDXPCConnection _getPeopleSuggestions:completion:]_block_invoke", 90, "### CD-Interaction Fetch failed: %{error}\n", v5);
    }
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    if (dword_1007B21C0 <= 30
      && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 30)))
    {
      LogPrintF(&dword_1007B21C0, "-[SDXPCConnection _getPeopleSuggestions:completion:]_block_invoke", 30, "CD-Interaction suggestions got: %d results(s)\n", objc_msgSend(v7, "count"));
    }
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v6();

}

void sub_10013D058(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (dword_1007B21C0 <= 90
    && ((v5 = v2, dword_1007B21C0 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B21C0, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B21C0, "-[SDXPCConnection _handlePairedWatchWristStateChanged]_block_invoke", 90, "Could not get remote object: %@\n", v3);

  }
  else
  {

  }
}

void sub_10013F26C(uint64_t a1, uint64_t a2)
{
  id v4;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v4, "deviceDiscoveryScanStateChanged:", a2);

}

void sub_100141A08(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceEnteredImmediate:", v4);

}

void sub_100141A74(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceExitedImmediate:", v4);

}

void sub_100141AE0(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceEnteredNearby:", v4);

}

void sub_100141B4C(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceExitedNearby:", v4);

}

void sub_100141BB8(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceWasDismissedHandler:reason:", v4, 0);

}

void sub_100141C28(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  id v7;

  v5 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v6 = a2;
  dispatch_assert_queue_V2(v5);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v7, "proximityClientDeviceWasDismissedHandler:reason:", v6, a3);

}

void sub_100141C9C(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceWasSelectedHandler:", v4);

}

void sub_100141D08(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceWillTriggerHandler:", v4);

}

void sub_100141D74(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "proximityClientDeviceDidUntriggerHandler:", v4);

}

void sub_100141DE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  id v8;
  id v9;

  v7 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v8 = a2;
  dispatch_assert_queue_V2(v7);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v9, "proximityClientDeviceUpdated:rssi:state:", v8, a3, a4);

}

void sub_100142CF0(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "remoteInteractionSessionRemoteTextEvent:", v4);

}

void sub_100142D5C(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "remoteInteractionSessionTextSessionDidBegin:", v4);

}

void sub_100142DC8(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "remoteInteractionSessionTextSessionDidEnd:", v4);

}

void sub_100142E34(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "remoteInteractionSessionTextSessionDidChange:", v4);

}

void sub_100143450(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "serviceError:", v4);

}

void sub_1001434BC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (dword_1007B21C0 <= 10 && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 10)))
    LogPrintF(&dword_1007B21C0, "-[SDXPCConnection serviceActivate:completion:]_block_invoke_2", 10, "Received event: %@\n", v4);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v3, "serviceReceivedEvent:", v4);

}

void sub_100143574(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  id v8;

  v5 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v6 = a3;
  v7 = a2;
  dispatch_assert_queue_V2(v5);
  objc_msgSend(*(id *)(a1 + 32), "servicePeerDisconnected:error:", v7, v6);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v8, "servicePeerDisconnected:error:", v7, v6);

}

void sub_100143604(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  id v10;

  v7 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v8 = a4;
  v9 = a3;
  dispatch_assert_queue_V2(v7);
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v10, "serviceReceivedFrameType:data:peer:", a2, v9, v8);

}

void sub_100143694(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (dword_1007B21C0 <= 10 && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 10)))
    LogPrintF(&dword_1007B21C0, "-[SDXPCConnection serviceActivate:completion:]_block_invoke_5", 10, "Received request: %@\n", v4);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v3, "serviceReceivedRequest:", v4);

}

void sub_10014374C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (dword_1007B21C0 <= 10 && (dword_1007B21C0 != -1 || _LogCategory_Initialize(&dword_1007B21C0, 10)))
    LogPrintF(&dword_1007B21C0, "-[SDXPCConnection serviceActivate:completion:]_block_invoke_6", 10, "Received response: %@\n", v4);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v3, "serviceReceivedResponse:", v4);

}

id sub_100143804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "serviceSendFrameType:data:peer:", a2, a3, a4);
}

void sub_1001442BC(uint64_t a1, uint64_t a2)
{
  id v4;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v4, "sessionBluetoothStateChanged:", a2);

}

void sub_100144314(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "sessionError:", v4);

}

void sub_100144380(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "sessionReceivedEvent:", v4);

}

void sub_1001443EC(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;

  v5 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v6 = a3;
  dispatch_assert_queue_V2(v5);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v7, "sessionReceivedFrameType:data:", a2, v6);

}

void sub_100144460(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "sessionReceivedRequest:", v4);

}

void sub_1001444CC(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  id v5;

  v3 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) + 48);
  v4 = a2;
  dispatch_assert_queue_V2(v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "remoteObjectProxy"));
  objc_msgSend(v5, "sessionReceivedResponse:", v4);

}

id sub_100144538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sessionSendFrameType:data:", a2, a3);
}

void sub_100144CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100144D14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40);
  if (v1)
  {
    v2 = result;
    if (dword_1007B21C0 <= 90)
    {
      if (dword_1007B21C0 == -1)
      {
        if (!_LogCategory_Initialize(&dword_1007B21C0, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
        v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 40);
      }
      LogPrintF(&dword_1007B21C0, "-[SDXPCConnection shareAudioSessionActivate:completion:]_block_invoke", 90, "### %@ failed: %{error}\n", CFSTR("ShareAudioSession activate"), v1);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  }
  return result;
}

void sub_100144DD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v5;
  id v6;
  id v7;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v3 + 120))
  {
    v5 = *(void **)(v3 + 136);
    v6 = a3;
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "remoteObjectProxy"));
    objc_msgSend(v7, "shareAudioProgressEvent:info:", a2, v6);

  }
}

void sub_100145024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  (*(void (**)(uint64_t))(v7 + 16))(v7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014505C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  if (v1 && dword_1007B21C0 <= 90)
  {
    if (dword_1007B21C0 != -1)
      return LogPrintF(&dword_1007B21C0, "-[SDXPCConnection shareAudioUserConfirmed]_block_invoke", 90, "### %@ failed: %{error}\n", CFSTR("ShareAudioSession UserConfirmed"), v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_1007B21C0, 90);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 40);
      return LogPrintF(&dword_1007B21C0, "-[SDXPCConnection shareAudioUserConfirmed]_block_invoke", 90, "### %@ failed: %{error}\n", CFSTR("ShareAudioSession UserConfirmed"), v1);
    }
  }
  return result;
}

Class sub_10014522C(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6A40)
  {
    v4 = off_100718638;
    v5 = 0;
    qword_1007C6A40 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6A40)
    sub_100145348(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("UNUserNotificationCenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1001453C4();
  qword_1007C6A38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100145308(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Caller not properly entitled to receive AppleID info from sharingd: com.apple.sharing.appleidauthentication required", v1, 2u);
}

void sub_100145348(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *UserNotificationsLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDXPCServer.m"), 70, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1001453C4()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getUNUserNotificationCenterClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDXPCServer.m"), 71, CFSTR("Unable to find class %s"), "UNUserNotificationCenter");

  __break(1u);
}

void sub_100145990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;

  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1001459E0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100145A98;
  v8[3] = &unk_100714860;
  v9 = WeakRetained;
  v10 = v3;
  v6 = v3;
  v7 = WeakRetained;
  dispatch_async(v5, v8);

}

void sub_100145A98(uint64_t a1)
{
  id obj;

  obj = (id)objc_claimAutoreleasedReturnValue(+[SDShareSheetSlotManager sharedManager](SDShareSheetSlotManager, "sharedManager"));
  objc_sync_enter(obj);
  if ((objc_msgSend(*(id *)(a1 + 32), "invalidateCalled") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateRestrictedActivityTypes:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "nodesPotentiallyUpdated");
  }
  objc_sync_exit(obj);

}

void sub_100145AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100145C30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100145C44(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = objc_alloc_init((Class)UINotificationFeedbackGenerator);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "prepare");
  v5 = objc_msgSend(objc_alloc((Class)UIImpactFeedbackGenerator), "initWithStyle:", 1);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 152);
  *(_QWORD *)(v6 + 152) = v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 152), "prepare");
  v8 = objc_alloc_init((Class)UISelectionFeedbackGenerator);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 144);
  *(_QWORD *)(v9 + 144) = v8;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "prepare");
  if ((+[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled](SFAirDropUserDefaults_objc, "privateContactDiscoveryEnabled") & 1) == 0)
  {
    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peopleBrowser"));
    objc_msgSend(v11, "start");

  }
}

void sub_100145E8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100145EA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stop");
}

void sub_100146060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001462A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146600(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014688C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146994(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146AA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146BB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100146C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100147088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001471D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001471E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  __CFString *v7;
  __CFString *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  unsigned int v25;
  id v26;
  NSObject *v27;
  const char *v28;
  const char *v29;
  __CFString *v30;
  unsigned int v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  id v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  _BYTE v45[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transportBundleID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "screenTimeMonitor"));
  v6 = objc_msgSend(v5, "cachedPolicyForBundleID:", v4);

  v7 = v4;
  v30 = v7;
  v32 = v6;
  if (v7 == CFSTR("com.apple.mobilemail")
    || (v8 = v7) != 0
    && (v9 = objc_msgSend(CFSTR("com.apple.mobilemail"), "isEqual:", v7), v8, v9))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "effectiveBlockedAppBundleIDs"));
    v31 = objc_msgSend(v11, "containsObject:", CFSTR("com.apple.mobilemail"));

  }
  else
  {
    v31 = 0;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "realNameToNodeID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "realName"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peopleNodes"));
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v34;
    while (2)
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "identifier"));
        v22 = v14;
        v23 = v21;
        if (v22 == v23)
        {

LABEL_20:
          objc_msgSend(v20, "setIsDisabled:", v32 != 0);
          objc_msgSend(v20, "setIsRestricted:", v31);
          goto LABEL_21;
        }
        v24 = v23;
        if ((v14 == 0) != (v23 != 0))
        {
          v25 = objc_msgSend(v22, "isEqual:", v23);

          if (v25)
            goto LABEL_20;
        }
        else
        {

        }
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
      if (v17)
        continue;
      break;
    }
  }
LABEL_21:

  objc_msgSend(v3, "setDisabled:", v32 != 0);
  v26 = share_sheet_log();
  v27 = objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v28 = "no";
    v39 = 2112;
    *(_DWORD *)buf = 138413058;
    if (v32)
      v29 = "yes";
    else
      v29 = "no";
    v38 = v3;
    v40 = v14;
    if (v31)
      v28 = "yes";
    v41 = 2080;
    v42 = v29;
    v43 = 2080;
    v44 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Updating policy for %@/%@, isDisabled:%s, isRestricted:%s", buf, 0x2Au);
  }

}

void sub_100147530(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  _BOOL8 v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "screenTimeMonitor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transportBundleIdentifier"));
  v5 = objc_msgSend(v3, "cachedPolicyForBundleID:", v4) != 0;

  objc_msgSend(v6, "setIsRestricted:", v5);
}

void sub_1001478FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100147C1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100147CC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100147CD8(id a1, _UIActivityMatchingContext *a2)
{
  _UIActivityMatchingContext *v2;

  v2 = a2;
  -[_UIActivityMatchingContext setShouldMatchOnlyUserElectedExtensions:](v2, "setShouldMatchOnlyUserElectedExtensions:", 0);
  -[_UIActivityMatchingContext setAllowMatchingExtensionActivities:](v2, "setAllowMatchingExtensionActivities:", 1);

}

void sub_100147D44(id a1, _UIActivityMatchingContext *a2)
{
  -[_UIActivityMatchingContext setShouldMatchOnlyUserElectedExtensions:](a2, "setShouldMatchOnlyUserElectedExtensions:", 0);
}

void sub_100148734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100148990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001493E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014940C(uint64_t a1)
{
  void *v2;
  void *v3;
  __CFString *v4;
  const __CFString *PreferredIdentifierForTag;
  const __CFString *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;

  if (objc_msgSend(*(id *)(a1 + 32), "isFileURL"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "path"));
    v3 = v2;
    if (v2)
    {
      v4 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pathExtension"));
      PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v4, 0);
      if (PreferredIdentifierForTag)
      {
        v6 = PreferredIdentifierForTag;
        if (UTTypeConformsTo(PreferredIdentifierForTag, kUTTypeImage))
          v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithContentsOfFile:](UIImage, "imageWithContentsOfFile:", v3));
        else
          v7 = 0;
        CFRelease(v6);
      }
      else
      {
        v8 = airdrop_log(0);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1001609C0();

        v7 = 0;
      }

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }
  v10 = +[SFAirDropPayload newPayloadWithURL:description:previewImage:identifier:](SFAirDropPayload, "newPayloadWithURL:description:previewImage:identifier:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v7, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72));
  v11 = *(void **)(*(_QWORD *)(a1 + 48) + 112);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56)));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);

}

void sub_10014956C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = +[SFAirDropPayload newPayloadWithURL:description:previewImage:identifier:](SFAirDropPayload, "newPayloadWithURL:description:previewImage:identifier:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 72));
  v2 = *(void **)(*(_QWORD *)(a1 + 56) + 112);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, v3);

}

void sub_100149894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001498C4(uint64_t a1)
{
  NSData *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v2 = UIImageJPEGRepresentation(*(UIImage **)(a1 + 32), 1.0);
  v7 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v7, "writeToFile:atomically:", *(_QWORD *)(a1 + 40), 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", *(_QWORD *)(a1 + 40)));
  v4 = +[SFAirDropPayload newPayloadWithURL:description:previewImage:identifier:](SFAirDropPayload, "newPayloadWithURL:description:previewImage:identifier:", v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 72));

  v5 = *(void **)(*(_QWORD *)(a1 + 64) + 112);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v6);

}

void sub_100149BA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149F18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100149F48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "writeToFile:atomically:", *(_QWORD *)(a1 + 40), 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", *(_QWORD *)(a1 + 40)));
  v6 = +[SFAirDropPayload newPayloadWithURL:description:previewImage:identifier:](SFAirDropPayload, "newPayloadWithURL:description:previewImage:identifier:", v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 72));

  v3 = *(void **)(*(_QWORD *)(a1 + 64) + 112);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, v4);

  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);

}

void sub_10014A210(id a1, SFAirDropPayload *a2)
{
  -[SFAirDropPayload setWasString:](a2, "setWasString:", 1);
}

void sub_10014A7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10014AF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10014B194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014B344(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014BE64(id a1)
{
  SDShareSheetSlotManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDShareSheetSlotManager);
  v2 = (void *)qword_1007C6A48;
  qword_1007C6A48 = (uint64_t)v1;

}

void sub_10014C120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014C208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014C278(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014CE10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10014CE88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "impactOccurred");
}

id sub_10014CE90(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "notificationOccurred:", 0);
}

id sub_10014CE9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "notificationOccurred:", 1);
}

id sub_10014CEA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "notificationOccurred:", 2);
}

void sub_10014D01C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014D168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014D23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014D258(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;

  v3 = a2;
  v4 = daemon_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_100160D30(a1, (uint64_t)v3, v5);

}

void sub_10014D6C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014DBB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014DF20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014DFFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014E108(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014E1BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014E454(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014E468(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  _QWORD block[4];
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    v10 = share_sheet_log();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_100160E80();
  }
  else
  {
    objc_msgSend(a1[4], "prepareWithActivityItemData:", v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10014E590;
    block[3] = &unk_100718AA0;
    v13 = a1[5];
    v14 = v7;
    v15 = v8;
    v16 = a1[6];
    v17 = a1[7];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v11 = v13;
  }

}

id sub_10014E590(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendItems:itemData:toEndpointUUID:withNode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_10014ECB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014ED40(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_100160EE0(a1, v3, v4, v5, v6, v7, v8, v9);

}

id sub_10014ED88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  os_signpost_id_t v11;
  id WeakRetained;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  os_signpost_id_t v21;
  uint8_t v23[16];
  uint8_t buf[16];

  v5 = a3;
  v6 = a2;
  v7 = share_sheet_log();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = share_sheet_log();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = os_signpost_id_make_with_pointer(v10, *(const void **)(a1 + 32));

  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, v11, "LoadShortcutsActivities", " enableTelemetry=YES ", buf, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "urlsBeingShared"));
  v14 = objc_loadWeakRetained((id *)(a1 + 56));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "hostConfiguration"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_shortcutActivitiesForMatchingDictionaries:resolvedActivityItems:hostBundleID:configuration:", v6, v13, v5, v15));

  v17 = share_sheet_log();
  v18 = objc_claimAutoreleasedReturnValue(v17);
  v19 = share_sheet_log();
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = os_signpost_id_make_with_pointer(v20, *(const void **)(a1 + 32));

  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    *(_WORD *)v23 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v21, "LoadShortcutsActivities", " enableTelemetry=YES ", v23, 2u);
  }

  return v16;
}

void sub_10014EF38(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "handleAirDropTransferUpdated:", v3);

}

void sub_10014EF80(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "handleAirDropNodesChanged:sessionID:", v4, *(_QWORD *)(a1 + 32));

}

void sub_10014F0A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014F63C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  v13 = a2;
  if (objc_msgSend(v13, "iconImage"))
  {
    v5 = objc_msgSend(v13, "iconImage");
    objc_msgSend(v13, "iconScale");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithCGImage:scale:orientation:](UIImage, "imageWithCGImage:scale:orientation:", v5, 0));
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_alloc((Class)UIShortcutActivity);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v12 = objc_msgSend(v7, "initWithApplicationExtension:partialShortcutWithName:identifier:image:sortValue:", v8, v9, v10, v6, v11);

  objc_msgSend(*(id *)(a1 + 40), "addObject:", v12);
}

void sub_10014FD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;

  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

id sub_10014FD84(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v7[5];

  v3 = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100160744;
  v7[3] = &unk_100718F88;
  v7[4] = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexesOfObjectsPassingTest:", v7));
  if (objc_msgSend(v4, "count"))
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectsAtIndexes:", v4));
  else
    v5 = 0;

  return v5;
}

uint64_t sub_10014FE28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  NSObject *v7;
  const char *v8;
  int v10;
  id v11;
  __int16 v12;
  const char *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareUserDefaults"));
  v5 = objc_msgSend(v4, "activityIsHidden:", v3);

  v6 = share_sheet_log();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "no";
    if (v5)
      v8 = "yes";
    v10 = 138412546;
    v11 = v3;
    v12 = 2080;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%@, isHidden:%s>", (uint8_t *)&v10, 0x16u);
  }

  return v5 ^ 1;
}

void sub_10014FF24(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "dataSourceDidUpdateForSession:animated:", WeakRetained, 0);

}

void sub_100150320(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100150708(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100150744(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  int v12;
  id v13;
  __int16 v14;
  const char *v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionUserDefaults"));
  v5 = objc_msgSend(v4, "activityIsHidden:", v3);

  v6 = share_sheet_log();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "no";
    if (v5)
      v8 = "yes";
    v12 = 138412546;
    v13 = v3;
    v14 = 2080;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "<%@, isHidden:%s>", (uint8_t *)&v12, 0x16u);
  }

  if ((v5 & 1) != 0)
  {
    v9 = 0;
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "sharingExpanded"))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityType"));
    v9 = objc_msgSend(v10, "isEqualToString:", UIActivityTypeShare) ^ 1;

  }
  else
  {
    v9 = 1;
  }

  return v9;
}

void sub_100150958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100151584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  void *v21;

  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_100151628(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_configureSharingSectionsForSession:", *(_QWORD *)(a1 + 32));

}

void sub_10015170C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
  if (v4)
  {

LABEL_5:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_6;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
  v6 = objc_msgSend(v5, "isEqual:", UIActivityTypeMail);

  if (!v6)
    goto LABEL_5;
  v7 = objc_msgSend(objc_alloc((Class)SFCollaborationCloudSharingMailRequest), "initWithCloudSharingRequest:result:", *(_QWORD *)(a1 + 32), v3);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100151820;
  v8[3] = &unk_100718BB8;
  v9 = v3;
  v10 = *(id *)(a1 + 40);
  +[SFCollaborationUtilities createMailContentForRequest:completionHandler:](SFCollaborationUtilities, "createMailContentForRequest:completionHandler:", v7, v8);

LABEL_6:
}

uint64_t sub_100151820(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setMailResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1001526D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100152704(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcHelperCnx"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "perspectiveDataForNearbyBadgeWithCount:", *(_QWORD *)(a1 + 40)));

  return v3;
}

CGImageRef sub_100152748(uint64_t a1)
{
  void *v2;
  CGImageRef v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcHelperCnx"));
  v3 = CGImageRetain((CGImageRef)objc_msgSend(v2, "CGImgForNearbyBadgeWithCount:", *(_QWORD *)(a1 + 40)));

  return v3;
}

void sub_100152E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100152EDC(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "_defaultSortGroup") == (id)4)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityUUID"));
    objc_msgSend(*(id *)(a1 + 32), "setActivityIdentifierShare:", v3);
LABEL_8:

    goto LABEL_9;
  }
  if (objc_msgSend(v8, "_defaultSortGroup") == (id)5)
  {
    v5 = objc_opt_class(SUIOpenInPlaceAppActivity, v4);
    if ((objc_opt_isKindOfClass(v8, v5) & 1) != 0)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityUUID"));
      objc_msgSend(*(id *)(a1 + 32), "setActivityIdentifierOpen:", v3);
      goto LABEL_8;
    }
    v7 = objc_opt_class(SUIOpenCopyAppActivity, v6);
    if ((objc_opt_isKindOfClass(v8, v7) & 1) != 0)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityUUID"));
      objc_msgSend(*(id *)(a1 + 32), "setActivityIdentifierCopy:", v3);
      goto LABEL_8;
    }
  }
LABEL_9:

}

id sub_100152FC0(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  id v6;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = objc_msgSend(WeakRetained, "_loadSharingProxy:configuration:", v4, *(_QWORD *)(a1 + 32));

  return v6;
}

void sub_100153588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1001535F4(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  id v6;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = objc_msgSend(WeakRetained, "_loadActionProxy:configuration:", v4, *(_QWORD *)(a1 + 32));

  return v6;
}

id sub_10015473C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_createActivityTitlePerspectiveDataForActivity:foregroundColor:sessionConnection:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_10015474C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_createActivityTitleImageForActivity:foregroundColor:sessionConnection:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_100154E2C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "perspectiveDataForActionPlatterWithTitle:tintColor:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

CGImageRef sub_100154E3C(uint64_t a1)
{
  return CGImageRetain((CGImageRef)objc_msgSend(*(id *)(a1 + 32), "CGImgForActionPlatterWithTitle:tintColor:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
}

void sub_1001552E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;

  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_100155338(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id WeakRetained;
  int v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = share_sheet_log();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Created suggestion %@", (uint8_t *)&v13, 0xCu);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "suggestionBrowser"));
    objc_msgSend(v10, "provideFeedbackForPeopleSuggestion:", v5);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_100161448((uint64_t)a1, (uint64_t)v6, v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "suggestionBrowser"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "activityType"));
    objc_msgSend(v10, "provideFeedbackForNodeAtIndex:bundleID:selectedActionBundleID:abandoned:", 0, v11, 0, 0);

  }
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "_performSelectedActivity:inSession:", a1[5], a1[4]);

}

void sub_100155608(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001559E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100155A10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v7 = share_sheet_log();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      sub_10016156C(a1);

  }
  v9 = *(id *)(a1 + 40);
  objc_sync_enter(v9);
  objc_msgSend(*(id *)(a1 + 40), "_instructHostToPerformShortcutActivity:singleUseToken:session:", *(_QWORD *)(a1 + 32), v5, *(_QWORD *)(a1 + 48));
  objc_sync_exit(v9);

}

void sub_100155AB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100155F7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015631C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100156428(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100156554(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100157094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10015711C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "selectionChanged");
}

void sub_100157554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10015788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100157A9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100157ABC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  v7 = a4;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, uint64_t, id, id))(v8 + 16))(v8, a2, v9, v7);
  objc_msgSend(*(id *)(a1 + 32), "didPerformInServiceActivityWithIdentifier:completed:items:error:", *(_QWORD *)(a1 + 40), a2, v9, v7);

}

void sub_100157B38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  NSObject *v8;

  v6 = a4;
  if (v6)
  {
    v7 = share_sheet_log();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1001617CC(a1, (uint64_t)v6, v8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "prepareWithActivityItemData:", a3);
    objc_msgSend(*(id *)(a1 + 32), "performActivity");
  }

}

void sub_100157DCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100157F9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001582A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015862C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158A14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158A38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v7 = share_sheet_log();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      sub_1001619D8(a1);

  }
  v9 = *(id *)(a1 + 40);
  objc_sync_enter(v9);
  objc_msgSend(*(id *)(a1 + 40), "_instructHostToPerformShortcutActivity:singleUseToken:session:", *(_QWORD *)(a1 + 32), v5, *(_QWORD *)(a1 + 48));
  objc_sync_exit(v9);

}

void sub_100158AD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158CCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158E60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158E80(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;

  v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled](SFAirDropUserDefaults_objc, "privateContactDiscoveryEnabled");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "airDropController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hostAppBundleID"));
    objc_msgSend(v5, "activateWithBundleID:", v4);

  }
  else
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "peopleBrowser"));
    objc_msgSend(v5, "start");
  }

}

void sub_100159068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100159088(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  id v4;

  v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled](SFAirDropUserDefaults_objc, "privateContactDiscoveryEnabled");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "airDropController"));
    objc_msgSend(v4, "invalidate");
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "peopleBrowser"));
    objc_msgSend(v4, "stop");
  }

}

void sub_100159270(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100159290(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  id v4;

  v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled](SFAirDropUserDefaults_objc, "privateContactDiscoveryEnabled");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "airDropController"));
    objc_msgSend(v4, "invalidate");
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "peopleBrowser"));
    objc_msgSend(v4, "stop");
  }

}

void sub_10015945C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015947C(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;

  v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled](SFAirDropUserDefaults_objc, "privateContactDiscoveryEnabled");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "airDropController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hostAppBundleID"));
    objc_msgSend(v5, "activateWithBundleID:", v4);

  }
  else
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "peopleBrowser"));
    objc_msgSend(v5, "start");
  }

}

void sub_1001595A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100159A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_100159ACC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "shareUserDefaults"));
  v5 = objc_msgSend(v4, "activityIsHidden:", v3);

  return v5 ^ 1;
}

void sub_100159EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_100159F40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionUserDefaults"));
  if ((objc_msgSend(v4, "activityIsHidden:", v3) & 1) != 0)
  {
    v5 = 0;
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "sharingExpanded"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityType"));
    v5 = objc_msgSend(v6, "isEqualToString:", UIActivityTypeShare) ^ 1;

  }
  else
  {
    v5 = 1;
  }

  return v5;
}

uint64_t sub_10015A080(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = SFCreateCGImageFromData();

  return v3;
}

void sub_10015AC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10015AD00(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "perspectiveDataForActivityMoreListEntryForActivityTitle:labelColor:activityCategory:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_10015AD10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "CGImgDataForActivityMoreListEntryForActivityTitle:labelColor:processOppositeColor:activityCategory:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 1, *(_QWORD *)(a1 + 56));
}

void sub_10015AE2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015AED8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015B058(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015B520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015B6DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015BB68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015BE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015CC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10015CD0C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  id v6;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = objc_msgSend(WeakRetained, "_loadAirDropProxy:forAirDropNode:configuration:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  return v6;
}

void sub_10015D554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10015DA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10015E0B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10015E5A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "perspectiveDataForNameLabelWithString:textColor:maxNumberOfLines:isAirDrop:ignoreNameWrapping:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65));
}

CGImageRef sub_10015E5B8(uint64_t a1)
{
  return CGImageRetain((CGImageRef)objc_msgSend(*(id *)(a1 + 32), "CGImgForNameLabelWithString:textColor:maxNumberOfLines:isAirDrop:ignoreNameWrapping:processOppositeColor:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), 1));
}

void sub_10015E850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_10015E88C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  id to;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  to = 0;
  objc_copyWeak(&to, (id *)(a1 + 40));
  v3 = objc_loadWeakRetained(&to);
  objc_sync_enter(v3);
  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained(&to);
    objc_msgSend(v4, "connectionInvalidated:", WeakRetained);

  }
  objc_sync_exit(v3);

  objc_destroyWeak(&to);
}

void sub_10015E918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;

  objc_sync_exit(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10015F8CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015F918(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  void *v20;
  _BYTE v21[128];

  v3 = a2;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v7);
        v9 = share_sheet_log();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v20 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Deleting slots for activity proxy %@", buf, 0xCu);
        }

        v11 = objc_msgSend(v8, "iconImageSlotID");
        v12 = objc_msgSend(v8, "labelSlotID");
        if ((_DWORD)v11)
          objc_msgSend(*(id *)(a1 + 32), "deleteSlot:", v11);
        if ((_DWORD)v12)
        {
          objc_msgSend(*(id *)(a1 + 32), "deleteSlot:", v12);
          v13 = *(void **)(a1 + 40);
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v12));
          objc_msgSend(v13, "addObject:", v14);

        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    }
    while (v5);
  }

}

void sub_10015FAD8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  _BYTE v27[128];

  v3 = a2;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v7);
        v9 = share_sheet_log();
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v26 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Deleting slots for people proxy %@", buf, 0xCu);
        }

        v11 = objc_msgSend(v8, "avatarImageSlotID");
        v12 = objc_msgSend(v8, "mainLabelSlotID");
        v13 = objc_msgSend(v8, "transportImageSlotID");
        v14 = objc_msgSend(v8, "bottomLabelSlotID");
        if ((_DWORD)v11)
          objc_msgSend(*(id *)(a1 + 32), "deleteSlot:", v11);
        if ((_DWORD)v12)
        {
          objc_msgSend(*(id *)(a1 + 32), "deleteSlot:", v12);
          v15 = *(void **)(a1 + 40);
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v12));
          objc_msgSend(v15, "addObject:", v16);

        }
        if ((_DWORD)v13)
        {
          objc_msgSend(*(id *)(a1 + 32), "deleteSlot:", v13);
          v17 = *(void **)(a1 + 40);
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v13));
          objc_msgSend(v17, "addObject:", v18);

        }
        if ((_DWORD)v14)
        {
          objc_msgSend(*(id *)(a1 + 32), "deleteSlot:", v14);
          v19 = *(void **)(a1 + 40);
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14));
          objc_msgSend(v19, "addObject:", v20);

        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v5);
  }

}

void sub_100160178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001601C0(id a1, INPersonHandle *a2)
{
  INPersonHandle *v2;
  void *v3;
  BOOL v4;

  v2 = a2;
  if ((id)-[INPersonHandle type](v2, "type") == (id)1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[INPersonHandle value](v2, "value"));
    v4 = v3 != 0;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_100160464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160480(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)SFShareSheetRecipient), "initWithRealName:displayName:formattedHandles:contactIdentifier:", 0, 0, v3, 0);

  if (IsAppleInternalBuild(v5, v6))
  {
    v7 = share_sheet_log();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412546;
      v11 = v4;
      v12 = 2112;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Returning Messages recipient %@ for session ID %@", (uint8_t *)&v10, 0x16u);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

BOOL sub_100160744(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)objc_opt_class(a2, a2), "activityCategory") == *(id *)(a1 + 32);
}

Class sub_100160778()
{
  Class result;

  if (qword_1007C6A60 != -1)
    dispatch_once(&qword_1007C6A60, &stru_100718FA8);
  result = objc_getClass("_PSPredictionContext");
  qword_1007C6A58 = (uint64_t)result;
  off_1007B28F0 = (uint64_t (*)())sub_1001607D4;
  return result;
}

id sub_1001607D4()
{
  return (id)qword_1007C6A58;
}

void sub_1001607E0(id a1)
{
  qword_1007C6A68 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PeopleSuggester.framework/PeopleSuggester", 2);
}

Class sub_100160808()
{
  Class result;

  if (qword_1007C6A60 != -1)
    dispatch_once(&qword_1007C6A60, &stru_100718FA8);
  result = objc_getClass("_PSAttachment");
  qword_1007C6A70 = (uint64_t)result;
  off_1007B28F8 = (uint64_t (*)())sub_100160864;
  return result;
}

id sub_100160864()
{
  return (id)qword_1007C6A70;
}

id sub_100160870(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ss_activityTypeToReportToHost"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_1001608B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_1001608C0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1001608CC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_10016091C(uint8_t *buf, int a2, os_log_t log)
{
  *(_DWORD *)buf = 67109120;
  *((_DWORD *)buf + 1) = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "process %d tried to enable instant share sheet but it was not entitled!", buf, 8u);
}

void sub_100160960()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Invalid URL (no scheme) %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001609C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "UTTypeCreatePreferredIdentifierForTag(%@) returned NULL", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160A20()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_100160908();
  v3 = v0;
  sub_100050D98((void *)&_mh_execute_header, v1, (uint64_t)v1, "Failed to convert NSAttributedString [%@] to HTML due to: %@", v2);
  sub_10001949C();
}

void sub_100160A8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "created share sheet context is invalid.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100160AB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "transferUpdated: No userInfo for notification %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160B18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "transferUpdated: No sessionID for userInfo %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160B78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "transferUpdated: No real name for userInfo %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160BD8()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "transferUpdated: No session for ID %@", v1, 0xCu);
  sub_10001949C();
}

void sub_100160C44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "transferUpdated: No xpcHelperCnx for session %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160CA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "transferUpdated: No transferNode for realName %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160D04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Activate already called", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100160D30(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id WeakRetained;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sd_description"));
  sub_100085470();
  sub_100050D98((void *)&_mh_execute_header, a3, v6, "Failed to get remote object proxy for %@ (%@)", v7);

  sub_100031218();
}

void sub_100160DC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "failed to update remote share sheet: no proxy object.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100160DF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "failed to update host share sheet: no proxy object.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100160E20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Unable to retrieve selected person activity type:%@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160E80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "can't perform airdrop for error:%@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160EE0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDXPCHelperConnection invalidated for %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100160F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "connectUIServiceToDaemonWithSessionID: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100160FA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "SDShareSheetSlotManager failed to fetch shortcuts: %{public}@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161008()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "no configuration to configure sharing section", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100161034()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "no configuration to configure people suggestions section", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100161060()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "no configuration to configure actions section", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016108C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "requestConfigurationWithSessionID: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001610EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "sendConfiguration: No sessionID for configuration %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10016114C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "sendConfiguration: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001611AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "current connection is nil.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001611D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "_activityTitleImageForActivity: sessionConnection is nil.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100161204()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Couldn't retrieve an activity title for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161264()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "_activityTitleImagesMapForActivities: No xpcHelperCnx for session %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001612C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Loading people proxy: required xpcHelper connection is nil.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001612F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Loading sharing proxy: required xpcHelper connection is nil.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016131C(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  __int16 v7;
  uint8_t v8[14];
  void *v9;
  __int16 v10;
  uint64_t v11;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activityTitle"));
  sub_100160908();
  v9 = a1;
  v10 = v7;
  v11 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "returned nil: CGImgDataForUIActivityTitle:'%@', in: %@, textColor:%@", v8, 0x20u);

  sub_1001608E0();
}

void sub_1001613BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Loading action proxy: required xpcHelper connection is nil.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001613E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "selectedActivityAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161448(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  uint64_t v13;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recipients"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activityType"));
  v8 = 138412802;
  v9 = v6;
  v10 = 2112;
  v11 = v7;
  v12 = 2112;
  v13 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to create suggestion from provided recipients %@ and activity %@ with error: %@", (uint8_t *)&v8, 0x20u);

  sub_1001608E0();
}

void sub_10016150C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "selectedActionAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10016156C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  sub_1001608F0();
  sub_1001608CC((void *)&_mh_execute_header, v2, v3, "Failed to generate single use token for shortcut %{public}@: %{public}@", v4, v5, v6, v7, v8);

  sub_100031218();
}

void sub_1001615F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "performActivityWithType: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Not performing activity which is not supported in this Share Sheet session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100161680()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Missing entitlement to perform activity without showing Share Sheet", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001616AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "findSupportedActivities: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10016170C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "No session for ID %@, ignoring.", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10016176C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "No node for identifier %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001617CC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
  sub_100085470();
  sub_100050D98((void *)&_mh_execute_header, a3, v5, "can't perform activity:%@ error:%@", v6);

  sub_100031218();
}

void sub_100161858()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "toggledActivityWithIdentifier: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001618B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "favoritedActivity: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "movedActivityAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161978()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "selectedDefaultActivityAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001619D8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  sub_1001608F0();
  sub_1001608CC((void *)&_mh_execute_header, v2, v3, "Failed to generate single use token for shortcut %{public}@: %{public}@", v4, v5, v6, v7, v8);

  sub_100031218();
}

void sub_100161A60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "performedActivityWithSuccess: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161AC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "activityViewControllerDidAppear: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "activityViewControllerDidDisappear: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "didEnterBackground: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161BE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "willEnterForeground: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161C40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "performEditActions: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161CA0(NSObject *a1, uint64_t a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  uint8_t v6[24];

  v3 = (objc_class *)objc_opt_class(SharingXPCHelperPerspectiveDataItem, a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "Could not get %@: from vector block", v6, 0xCu);

}

void sub_100161D3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "_instructHostToPerformUserDefaultsActivityForCategory: No xpcHelperCnx for session %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161D9C(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1001608C0((void *)&_mh_execute_header, a3, (uint64_t)a3, "suggestionBrowserDidUpdateSuggestions: No session for ID %@", (uint8_t *)a2);

}

void sub_100161DE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "activitiesForActivityType: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161E48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "predictionContextForSessionID: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161EA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "share sheet context is invalid.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100161ED4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "didUpdatePeople: No session for ID %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100161F34(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_1001608C0((void *)&_mh_execute_header, a3, (uint64_t)a3, "didUpdatePeople: No session for ID %@", (uint8_t *)a2);

}

void sub_100161F80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "_createNameLabelSlotWithString: sessionConnection is nil.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001627FC(id a1)
{
  void *v1;
  unsigned int v2;
  SDActivityEncryptionManager *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "enableContinuity");

  if (v2)
  {
    v3 = objc_opt_new(SDActivityEncryptionManager);
    v4 = (void *)qword_1007C6A78;
    qword_1007C6A78 = (uint64_t)v3;

  }
}

void sub_100164828(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_100164854(void *a1, NSObject *a2)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = objc_msgSend(a1, "length");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to initialize key from data. Incorrect size %d", (uint8_t *)v3, 8u);
  sub_10001949C();
}

void sub_1001648D8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Generated new advertising encryption key %@, and saved to keychain", (uint8_t *)&v3, 0xCu);
  sub_10001949C();
}

void sub_10016494C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to deserialize encryption key from keychain (%@)", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1001649B0(void *a1, NSObject *a2)
{
  objc_class *v4;
  NSString *v5;
  void *v6;
  void *v7;
  uint8_t v8[24];

  v4 = (objc_class *)objc_opt_class(a1, a2);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "encryptionKey"));
  sub_100031200();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: Persisted last used counter and key to keychain %@", v8, 0x16u);

  sub_100031218();
}

void sub_100164A58(void *a1, NSObject *a2)
{
  objc_class *v4;
  NSString *v5;
  void *v6;
  void *v7;
  uint8_t v8[24];

  v4 = (objc_class *)objc_opt_class(a1, a2);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "encryptionKey"));
  sub_100031200();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: Encryption key invalid %@", v8, 0x16u);

  sub_100031218();
}

void sub_100164B00()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_100164828((void *)&_mh_execute_header, v0, v1, "Saved decryption key %@ for %@ to keychain");
  sub_10001949C();
}

void sub_100164B60()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Failed to save decryption key %@ for %@ to keychain");
  sub_10001949C();
}

void sub_100164BC0()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_100164828((void *)&_mh_execute_header, v0, v1, "Loaded decryption key %@ for %@ from keychain");
  sub_10001949C();
}

void sub_100164C20()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Failed to serialize encryption key from %@ (%@)");
  sub_10001949C();
}

void sub_100164C80(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to deserialize key (%@)", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_100164CE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Failed to unwrap key cause key data is missing", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100164D14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Could not unwrap key cause wrapping key is not available", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100164D44(char a1, uint64_t a2, NSObject *a3)
{
  const __CFString *v3;
  const __CFString *v4;
  _BYTE v5[24];

  v3 = CFSTR("NO");
  if ((a1 & 1) != 0)
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  if ((a2 & 1) != 0)
    v3 = CFSTR("YES");
  *(_DWORD *)v5 = 138412546;
  *(_QWORD *)&v5[4] = v4;
  *(_WORD *)&v5[12] = 2112;
  *(_QWORD *)&v5[14] = v3;
  sub_100164828((void *)&_mh_execute_header, a2, a3, "Successfully deleted encryption key:%@, decryption keys:%@", *(_QWORD *)v5, *(_QWORD *)&v5[8], *(_QWORD *)&v5[16]);
  sub_10001949C();
}

void sub_100164DD4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SecItemCopyMatching decryptionKeysQuery failed with error %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100164E38(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SecItemCopyMatching encryptionKeyQuery failed with error %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100164E9C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SecItemCopyMatching baseDict failed with error %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100164F00()
{
  uint64_t v0;
  os_log_t v1;

  sub_10016483C();
  sub_100050D6C((void *)&_mh_execute_header, v0, v1, "Failed to add keychain item with error %d for attributes %@");
  sub_10001949C();
}

void sub_100164F60()
{
  uint64_t v0;
  os_log_t v1;

  sub_10016483C();
  sub_100050D6C((void *)&_mh_execute_header, v0, v1, "Failed to delete keychain item with error %d for query %@");
  sub_10001949C();
}

void sub_100165760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100167B78(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

int *sub_100167B8C()
{
  return __error();
}

char *sub_100167B94(int *a1)
{
  return strerror(*a1);
}

void sub_100167B9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not get identity to encrypt streams (identity not available)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167BC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not get cert chain to encrypt streams (intermediate cert not available)", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167BF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not get trust from open stream", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167C20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Cert chain from remote trust does is empty", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167C4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Accounts do not match, my account identifier (common name) is not available", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167C78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Accounts do not match", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167CA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SFAppleIDCommonNameForCertificate failed with error %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100167D0C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Client cert chain not trusted. SFAppleIDVerifyCertificateChainSync failed with err=%d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100167D74(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "streamError"));
  sub_100029230();
  sub_100167B78((void *)&_mh_execute_header, v2, v3, "Network stream received error = %@", v4, v5, v6, v7, v8);

  sub_1000332E4();
}

void sub_100167DEC()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_100167B8C();
  sub_100167B94(v0);
  sub_100029230();
  sub_100167B78((void *)&_mh_execute_header, v1, v2, "setsockopt failed: %s", v3, v4, v5, v6, v7);
  sub_1000332E4();
}

void sub_100167E58(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Stream returned invalid socket %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100167EC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to evaluate certificate", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167EEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create stream data from read buffer", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167F18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Delegate does not respond to streamHandler:didReceiveStreamData:", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167F44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Read zero bytes from the network stream", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100167F70()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error writing to network output stream, writeLength = %ld", v1, 0xCu);
}

void sub_100167FE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Method not supported", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016800C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create message payload", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100168038()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Unexpected stream handler input state", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100168064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Read more bytes than the incoming message header declared", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100168090()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_100167B8C();
  sub_100167B94(v0);
  sub_100029230();
  sub_100167B78((void *)&_mh_execute_header, v1, v2, "Read error = %s", v3, v4, v5, v6, v7);
  sub_1000332E4();
}

void sub_1001680FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Zero bytes read from input stream", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100168128(uint64_t *a1, id *a2, NSObject *a3)
{
  uint64_t v4;
  unsigned int v5;
  _DWORD v6[2];
  __int16 v7;
  unsigned int v8;

  v4 = *a1;
  v5 = objc_msgSend(*a2, "length");
  v6[0] = 67109376;
  v6[1] = v4;
  v7 = 1024;
  v8 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Wrote too many bytes (byteIndex = %d, message length = %d)", (uint8_t *)v6, 0xEu);
  sub_1000332E4();
}

void sub_1001681BC()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = sub_100167B8C();
  sub_100167B94(v0);
  sub_100029230();
  sub_100167B78((void *)&_mh_execute_header, v1, v2, "Failed to write message = %s", v3, v4, v5, v6, v7);
  sub_1000332E4();
}

void sub_100168228()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Zero bytes written for message", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100168254()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No handler for message write", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100168280()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Incorrect version number in header", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDAutoUnlockLTKInfoReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t Data;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_38;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 24) = v14;
        continue;
      case 2u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 8;
        goto LABEL_29;
      case 3u:
        v21 = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(v21);
        v20 = 16;
LABEL_29:
        v22 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      case 4u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v25 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0)
        goto LABEL_42;
      v23 += 7;
      v9 = v24++ >= 9;
      if (v9)
      {
        v25 = 0;
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v25 = 0;
LABEL_44:
    *(_BYTE *)(a1 + 28) = v25 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100168EC4(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](AKDevice, "currentDevice"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "serverFriendlyDescription"));
  v2 = (void *)qword_1007C6A88;
  qword_1007C6A88 = v1;

}

void sub_100168F0C(id a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = MGCopyAnswer(CFSTR("UniqueDeviceID"), 0);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1007C6A98;
  qword_1007C6A98 = v2;

  if (!qword_1007C6A98
    && dword_1007B2C60 <= 90
    && (dword_1007B2C60 != -1 || _LogCategory_Initialize(&dword_1007B2C60, 90)))
  {
    LogPrintF(&dword_1007B2C60, "NSString * _Nullable DeviceUDID(void)_block_invoke", 90, "### AppleIDDeviceUDID failed with err %#m\n", 4294960534);
  }
}

const __CFString *SFHotspotNetworkTypeString(unsigned int a1)
{
  if (a1 < 9 && ((0x1DFu >> a1) & 1) != 0)
    return *(&off_100719050 + (char)a1);
  if (SFRemoteHotspotNetworkTypeHSDPA == a1)
    return CFSTR("HSDPA");
  return CFSTR("Unknown");
}

uint64_t SFHotspotTypeStringToType(void *a1, _BYTE *a2)
{
  void *v3;
  void *v4;
  unsigned __int8 v5;
  unsigned int v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lowercaseString"));
  v4 = v3;
  if (a2)
    *a2 = 1;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("none")) & 1) != 0)
  {
    v5 = 0;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("1x")) & 1) != 0)
  {
    v5 = 1;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("gprs")) & 1) != 0)
  {
    v5 = 2;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("edge")) & 1) != 0)
  {
    v5 = 3;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("3g")) & 1) != 0)
  {
    v5 = 4;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("4g")) & 1) != 0)
  {
    v5 = 6;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("lte")) & 1) != 0)
  {
    v5 = 7;
  }
  else
  {
    v6 = objc_msgSend(v4, "isEqualToString:", CFSTR("5g"));
    if (v6)
      v5 = 8;
    else
      v5 = -1;
    if (a2 && (v6 & 1) == 0)
    {
      *a2 = 0;
      v5 = -1;
    }
  }

  return v5;
}

id SFHotspotResponseAdvertisementString(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  void *v7;
  void *v8;

  v1 = BYTE3(a1);
  v2 = BYTE1(a1);
  v3 = a1;
  v4 = BYTE2(a1);
  v5 = BYTE5(a1);
  v6 = SFHotspotNetworkTypeString(BYTE4(a1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<version: %d, flags: %d battery life: %d, signal strength: %d, network type: %@, additional flags: %d>"), v3, v2, v4, v5, v7, v1));

  return v8;
}

uint64_t SDUnlockClassALongTermKeyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v29 = 28;
        goto LABEL_54;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_49:
        v29 = 24;
        goto LABEL_54;
      case 3u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

        continue;
      case 4u:
        v25 = 0;
        v26 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0)
        goto LABEL_51;
      v25 += 7;
      v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_53:
    v29 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10016A6E8()
{
  if (dword_1007B2CD0 <= 50 && (dword_1007B2CD0 != -1 || _LogCategory_Initialize(&dword_1007B2CD0, 50)))
    LogPrintF(&dword_1007B2CD0, "void SDAppleIDThrottleReset(void)", 50, "Reset throttle\n");
  pthread_mutex_lock(&stru_1007B2D40);
  objc_msgSend((id)qword_1007C6AA8, "removeAllObjects");
  return pthread_mutex_unlock(&stru_1007B2D40);
}

void sub_10016A770()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  pthread_mutex_lock(&stru_1007B2D40);
  v0 = (void *)qword_1007C6AA8;
  if (!qword_1007C6AA8)
  {
    v1 = objc_alloc_init((Class)NSMutableDictionary);
    v2 = (void *)qword_1007C6AA8;
    qword_1007C6AA8 = (uint64_t)v1;

    v0 = (void *)qword_1007C6AA8;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("counter")));
  v4 = (uint64_t)objc_msgSend(v3, "integerValue");

  v5 = 2 * v4;
  if (2 * v4 >= 86400)
    v5 = 86400;
  if (v4 <= 0)
    v6 = 16;
  else
    v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v6));
  objc_msgSend((id)qword_1007C6AA8, "setObject:forKeyedSubscript:", v7, CFSTR("counter"));

  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dateByAddingTimeInterval:", (double)v6));
  objc_msgSend((id)qword_1007C6AA8, "setObject:forKeyedSubscript:", v8, CFSTR("startDate"));
  if (dword_1007B2CD0 <= 50 && (dword_1007B2CD0 != -1 || _LogCategory_Initialize(&dword_1007B2CD0, 50)))
    LogPrintF(&dword_1007B2CD0, "void SDAppleIDThrottleUpdate(void)", 50, "Updated throttle: %ld -> %ld seconds\n", v4, v6);
  pthread_mutex_unlock(&stru_1007B2D40);

}

id sub_10016A8E4()
{
  id v0;
  void *v1;
  void *v2;
  uint64_t v3;

  pthread_mutex_lock(&stru_1007B2D40);
  v0 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1007C6AA8, "objectForKeyedSubscript:", CFSTR("startDate")));
  pthread_mutex_unlock(&stru_1007B2D40);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v2 = v1;
  if (!v0)
    v0 = v1;
  if (dword_1007B2CD0 <= 30 && (dword_1007B2CD0 != -1 || _LogCategory_Initialize(&dword_1007B2CD0, 30)))
  {
    objc_msgSend(v0, "timeIntervalSinceDate:", v2);
    LogPrintF(&dword_1007B2CD0, "NSDate * _Nonnull SDAppleIDThrottleCopyNextDate(void)", 30, "Next date: %@ in %f seconds\n", v0, v3);
  }

  return v0;
}

void sub_10016A9C4()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  pthread_mutex_lock(&stru_1007B2D40);
  if (!qword_1007C6AA8)
  {
    v0 = objc_alloc_init((Class)NSMutableDictionary);
    v1 = (void *)qword_1007C6AA8;
    qword_1007C6AA8 = (uint64_t)v0;

  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 86400));
  objc_msgSend((id)qword_1007C6AA8, "setObject:forKeyedSubscript:", v2, CFSTR("counter"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dateByAddingTimeInterval:", 86400.0));
  objc_msgSend((id)qword_1007C6AA8, "setObject:forKeyedSubscript:");
  if (dword_1007B2CD0 <= 50 && (dword_1007B2CD0 != -1 || _LogCategory_Initialize(&dword_1007B2CD0, 50)))
    LogPrintF(&dword_1007B2CD0, "void SDAppleIDThrottleForceMax(void)", 50, "Updated throttle to max: %ld seconds\n", 86400);
  pthread_mutex_unlock(&stru_1007B2D40);

}

id sub_10016AAFC()
{
  id v0;

  pthread_mutex_lock(&stru_1007B2D40);
  v0 = (id)qword_1007C6AB0;
  pthread_mutex_unlock(&stru_1007B2D40);
  return v0;
}

uint64_t sub_10016AB40()
{
  uint64_t v0;
  void *v1;

  pthread_mutex_lock(&stru_1007B2D40);
  v0 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v1 = (void *)qword_1007C6AB0;
  qword_1007C6AB0 = v0;

  return pthread_mutex_unlock(&stru_1007B2D40);
}

__SecKey *sub_10016AB8C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  const __CFDictionary *v5;
  __SecKey *RandomKey;
  SecKeyRef v7;
  uint64_t SelfSignedCertificate;
  const void *v9;
  __SecIdentity *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD v20[2];
  _QWORD v21[2];

  v20[0] = kSecAttrKeyType;
  v20[1] = kSecAttrKeySizeInBits;
  v21[0] = a1;
  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v21[1] = v4;
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 2));

  RandomKey = SecKeyCreateRandomKey(v5, 0);
  v7 = SecKeyCopyPublicKey(RandomKey);
  SelfSignedCertificate = SecGenerateSelfSignedCertificate(&__NSArray0__struct, &__NSDictionary0__struct, v7, RandomKey);
  v9 = (const void *)SelfSignedCertificate;
  if (v7)
    CFRelease(v7);
  if (v9)
  {
    v10 = (__SecIdentity *)SecIdentityCreate(kCFAllocatorDefault, v9, RandomKey);
    CFRelease(v9);
    if (RandomKey)
      CFRelease(RandomKey);
    if (v10)
    {
      RandomKey = (__SecKey *)sec_identity_create(v10);
      CFRelease(v10);
      if (!RandomKey)
      {
        v13 = airdrop_log(v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_10016AEC8();

      }
      goto LABEL_19;
    }
    v17 = airdrop_log(v11);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_10016AE9C();

LABEL_18:
    RandomKey = 0;
    goto LABEL_19;
  }
  v15 = airdrop_log(SelfSignedCertificate);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    sub_10016AE70();

  if (RandomKey)
  {
    CFRelease(RandomKey);
    goto LABEL_18;
  }
LABEL_19:

  return RandomKey;
}

__SecIdentity *sub_10016AD80(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  __SecIdentity *v3;
  __SecIdentity *v4;
  OSStatus v5;
  SecKeyRef v6;
  uint64_t v7;
  NSObject *v8;
  SecKeyRef v9;
  __SecIdentity *v10;
  SecKeyRef privateKeyRef;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_16;
  v3 = sec_identity_copy_ref(v1);
  v4 = v3;
  if (!v3)
    goto LABEL_17;
  privateKeyRef = 0;
  v5 = SecIdentityCopyPrivateKey(v3, &privateKeyRef);
  CFRelease(v4);
  if (v5)
  {
    v6 = privateKeyRef;
    if (privateKeyRef)
    {
      CFRelease(privateKeyRef);
      privateKeyRef = 0;
    }
    v7 = airdrop_log(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10016AEF4();

  }
  if (!privateKeyRef)
    goto LABEL_16;
  v9 = SecKeyCopyPublicKey(privateKeyRef);
  if (privateKeyRef)
  {
    CFRelease(privateKeyRef);
    privateKeyRef = 0;
  }
  if (!v9)
  {
LABEL_16:
    v4 = 0;
    goto LABEL_17;
  }
  v4 = (__SecIdentity *)SecKeyCopySubjectPublicKeyInfo(v9);
  CFRelease(v9);
  if (v4)
    v10 = v4;

LABEL_17:
  return v4;
}

void sub_10016AE70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SecGenerateSelfSignedCertificate failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016AE9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SecIdentityCreate failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016AEC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "sec_identity_create failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016AEF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SecIdentityCopyPrivateKey failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10016AF20(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a1;
  v4 = a2;
  if ((objc_opt_respondsToSelector(v3, "regenerateTemporarySelfIdentityWithCompletion:") & 1) != 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10016AFB8;
    v5[3] = &unk_100714648;
    v6 = v4;
    objc_msgSend(v3, "regenerateTemporarySelfIdentityWithCompletion:", v5);

  }
}

uint64_t sub_10016AFB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10016AFC8(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_alloc_init((Class)NSData);
  if ((objc_opt_respondsToSelector(v1, "pkData") & 1) != 0)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pkData"));

    v2 = (id)v3;
  }

  return v2;
}

id sub_10016B034(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "deviceName") & 1) != 0)
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "deviceName"));
  else
    v2 = 0;

  return v2;
}

id sub_10016B084(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "deviceModel") & 1) != 0)
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "deviceModel"));
  else
    v2 = 0;

  return v2;
}

id sub_10016B0D4(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "accountID") & 1) != 0)
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "accountID"));
  else
    v2 = 0;

  return v2;
}

id sub_10016B124(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  if ((objc_opt_respondsToSelector(v1, "bonjourListenerUUID") & 1) != 0)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bonjourListenerUUID"));

    v2 = (void *)v3;
  }

  return v2;
}

uint64_t sub_10016B194(uint64_t a1, uint64_t a2)
{
  return nw_array_append(a2, a1);
}

uint64_t sub_10016B1A4(uint64_t a1)
{
  return objc_opt_respondsToSelector(a1, "isKnownIdentity") & 1;
}

id sub_10016B1C4(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "isKnownIdentity") & 1) != 0)
    v2 = objc_msgSend(v1, "isKnownIdentity");
  else
    v2 = 0;

  return v2;
}

uint64_t sub_10016B210(uint64_t a1)
{
  return objc_opt_respondsToSelector(a1, "isUnsupportedApplicationLabel") & 1;
}

id sub_10016B230(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "isUnsupportedApplicationLabel") & 1) != 0)
    v2 = objc_msgSend(v1, "isUnsupportedApplicationLabel");
  else
    v2 = 0;

  return v2;
}

id sub_10016B910(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v2 = a1 + 32;
  v1 = *(void **)(a1 + 32);
  if (*(uint64_t *)(v2 + 8) < 1)
    return _objc_msgSend(v1, "loadRemainingProxies");
  else
    return _objc_msgSend(v1, "loadBatchWithSize:");
}

void sub_10016BCDC(id *a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  SDShareSheetProxyLoaderChangeDetails *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;

  v2 = share_sheet_log();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[4];
    v5 = a1[5];
    *(_DWORD *)buf = 138412546;
    v16 = v4;
    v17 = 2112;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "did load proxies from loader:%@ with result:%@", buf, 0x16u);
  }

  v6 = objc_msgSend(a1[5], "state");
  if (v6 != (id)1)
  {
    v7 = objc_alloc_init(SDShareSheetProxyLoaderChangeDetails);
    v8 = a1[5];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "proxySection"));
    -[SDShareSheetProxyLoaderChangeDetails addResult:forProxySection:](v7, "addResult:forProxySection:", v8, v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "delegate"));
    objc_msgSend(v10, "proxyLoaderManager:didLoadProxiesWithChangeDetails:", a1[6], v7);

  }
  v11 = objc_msgSend(a1[4], "remainingProxiesCount");
  v12 = a1[6];
  if (v6 == (id)1 || !v11)
  {
    objc_msgSend(a1[6], "_didFinishLoadingLoader:cancelled:", a1[4], v6 == (id)1);
  }
  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10016BE88;
    v13[3] = &unk_1007146D8;
    v14 = a1[4];
    objc_msgSend(v12, "_scheduleLoadingBlock:synchronously:", v13, 0);

  }
}

id sub_10016BE88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "loadRemainingProxies");
}

void sub_10016BF48(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "loader was already removed:%@", (uint8_t *)&v2, 0xCu);
}

void sub_10016BFFC(id a1)
{
  SDNotificationManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDNotificationManager);
  v2 = (void *)qword_1007C6AC0;
  qword_1007C6AC0 = (uint64_t)v1;

}

id sub_10016C4E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_10016C5D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_10016C828(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;

  if ((unint64_t)objc_msgSend(a2, "authorizationStatus") > 1)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(void))(v6 + 16))();
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
    v5 = *(NSObject **)(v3 + 112);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10016C8D0;
    v7[3] = &unk_100714F40;
    v7[4] = v3;
    v8 = v4;
    dispatch_async(v5, v7);

  }
}

void sub_10016C8D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerEnsureStarted:completion:]_block_invoke_2", 30, "Requesting TV authorization\n");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(v2 + 72);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10016C99C;
  v5[3] = &unk_1007190C0;
  v5[4] = v2;
  v6 = v3;
  objc_msgSend(v4, "requestAuthorizationWithOptions:completionHandler:", 70, v5);

}

void sub_10016C99C(uint64_t a1, int a2, void *a3)
{
  __CFString *v5;
  const char *v6;
  const __CFString *v7;
  int v8;
  uint64_t v9;
  __CFString *v10;

  v5 = a3;
  v10 = v5;
  if (dword_1007B2DE0 <= 30)
  {
    if (dword_1007B2DE0 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B2DE0, 30), v5 = v10, v8))
    {
      v6 = "no";
      if (a2)
        v6 = "yes";
      v7 = &stru_10072FE60;
      if (v5)
        v7 = v5;
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerEnsureStarted:completion:]_block_invoke_3", 30, "TV Notification granted: %s %@", v6, v7);
      v5 = v10;
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = a2;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(uint64_t, __CFString *))(v9 + 16))(v9, v5);
    v5 = v10;
  }

}

void sub_10016CBE8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;

  if ((unint64_t)objc_msgSend(a2, "authorizationStatus") > 1)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(void))(v6 + 16))();
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
    v5 = *(NSObject **)(v3 + 112);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10016CC90;
    v7[3] = &unk_100714F40;
    v7[4] = v3;
    v8 = v4;
    dispatch_async(v5, v7);

  }
}

void sub_10016CC90(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchEnsureStarted:completion:]_block_invoke_2", 30, "Requesting Watch authorization\n");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(v2 + 96);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10016CD5C;
  v5[3] = &unk_1007190C0;
  v5[4] = v2;
  v6 = v3;
  objc_msgSend(v4, "requestAuthorizationWithOptions:completionHandler:", 6, v5);

}

void sub_10016CD5C(uint64_t a1, int a2, void *a3)
{
  __CFString *v5;
  const char *v6;
  const __CFString *v7;
  int v8;
  uint64_t v9;
  __CFString *v10;

  v5 = a3;
  v10 = v5;
  if (dword_1007B2DE0 <= 30)
  {
    if (dword_1007B2DE0 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B2DE0, 30), v5 = v10, v8))
    {
      v6 = "no";
      if (a2)
        v6 = "yes";
      v7 = &stru_10072FE60;
      if (v5)
        v7 = v5;
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchEnsureStarted:completion:]_block_invoke_3", 30, "Watch Notification granted: %s %@", v6, v7);
      v5 = v10;
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 104) = a2;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(uint64_t, __CFString *))(v9 + 16))(v9, v5);
    v5 = v10;
  }

}

void sub_10016D0E8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  if ((unint64_t)objc_msgSend(a2, "authorizationStatus") > 1)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
    v5 = *(NSObject **)(v3 + 112);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10016D184;
    v6[3] = &unk_100714860;
    v6[4] = v3;
    v7 = v4;
    dispatch_async(v5, v6);

  }
}

void sub_10016D184(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_2", 30, "Requesting HomePod authorization\n");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(v2 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10016D250;
  v5[3] = &unk_100719110;
  v5[4] = v2;
  v6 = v3;
  objc_msgSend(v4, "requestAuthorizationWithOptions:completionHandler:", 6, v5);

}

void sub_10016D250(uint64_t a1, int a2, void *a3)
{
  const char *v5;
  const __CFString *v6;
  __CFString *v7;

  v7 = a3;
  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
  {
    v5 = "no";
    if (a2)
      v5 = "yes";
    v6 = &stru_10072FE60;
    if (v7)
      v6 = v7;
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_3", 30, "HomePod Notification granted: %s %@", v5, v6);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_10016D314(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  if ((unint64_t)objc_msgSend(a2, "authorizationStatus") > 1)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
    v5 = *(NSObject **)(v3 + 112);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10016D3B0;
    v6[3] = &unk_100714860;
    v6[4] = v3;
    v7 = v4;
    dispatch_async(v5, v6);

  }
}

void sub_10016D3B0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_5", 30, "Requesting HomePod mini authorization\n");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10016D47C;
  v5[3] = &unk_100719110;
  v5[4] = v2;
  v6 = v3;
  objc_msgSend(v4, "requestAuthorizationWithOptions:completionHandler:", 6, v5);

}

void sub_10016D47C(uint64_t a1, int a2, void *a3)
{
  const char *v5;
  const __CFString *v6;
  __CFString *v7;

  v7 = a3;
  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
  {
    v5 = "no";
    if (a2)
      v5 = "yes";
    v6 = &stru_10072FE60;
    if (v7)
      v6 = v7;
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_6", 30, "HomePod mini Notification granted: %s %@", v5, v6);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_10016D540(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10016DA38(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  _QWORD block[5];
  id v18;
  id v19;
  int v20;
  char v21;

  v16 = a2;
  if (v16)
  {
    if (dword_1007B2DE0 <= 60
      && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 60)))
    {
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]_block_invoke", 60, "### Error adding request %@: %@\n", *(_QWORD *)(a1 + 32), v16);
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "domain"));
    v4 = off_1007B2E60();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = v3;
    v7 = v5;
    v8 = v7;
    if (v6 == v7)
    {

    }
    else
    {
      if ((v6 == 0) == (v7 != 0))
      {

LABEL_17:
        goto LABEL_18;
      }
      v9 = objc_msgSend(v6, "isEqual:", v7);

      if (!v9)
        goto LABEL_17;
    }
    v10 = objc_msgSend(v16, "code");

    if (v10 == (id)100)
    {
      v11 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
      objc_msgSend(v11, "setAttachments:", &__NSArray0__struct);
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(void **)(a1 + 56);
      v14 = *(NSObject **)(v12 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10016DC60;
      block[3] = &unk_100719160;
      block[4] = v12;
      v18 = v13;
      v19 = v11;
      v20 = *(_DWORD *)(a1 + 64);
      v21 = *(_BYTE *)(a1 + 68);
      v15 = v11;
      dispatch_sync(v14, block);

    }
  }
  else if (dword_1007B2DE0 <= 30
         && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
  {
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]_block_invoke", 30, "Added request: %@\n", *(_QWORD *)(a1 + 32));
  }
LABEL_18:

}

id sub_10016DC60(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_addRequestWithID:content:type:isHomePodMini:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
}

void sub_10016E324(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10016E354(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10016E644(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_riServerPostIfNeeded:backgroundAction:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

id sub_10016E72C(uint64_t a1)
{
  const char *v2;

  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
  {
    if (*(_BYTE *)(a1 + 56))
      v2 = "yes";
    else
      v2 = "no";
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerPostIfNeeded:backgroundAction:]_block_invoke", 30, "TV KBPost %@ backgroundAction: %s\n", *(_QWORD *)(a1 + 32), v2);
  }
  return objc_msgSend(*(id *)(a1 + 40), "_addRequestWithID:content:type:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), 5);
}

id sub_10016E84C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_riServerRemove:", *(_QWORD *)(a1 + 40));
}

id sub_10016E9F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_riServerRemoveAll");
}

id sub_10016EB24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_riServerUpdate:info:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10016EDC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B2DE0 <= 60)
    {
      v9 = v3;
      if (dword_1007B2DE0 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B2DE0, 60), v4 = v9, v7))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
        LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerUpdate:info:]_block_invoke", 60, "### Error updating %@: %@\n", v5, v6);

LABEL_8:
        v4 = v9;
      }
    }
  }
  else if (dword_1007B2DE0 <= 30)
  {
    v9 = 0;
    if (dword_1007B2DE0 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B2DE0, 30), v4 = 0, v8))
    {
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerUpdate:info:]_block_invoke", 30, "Update %@ success\n", *(_QWORD *)(a1 + 32));
      goto LABEL_8;
    }
  }

}

id sub_10016EF74(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_riServerUpdate:rtiData:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10016F3C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B2DE0 <= 60)
    {
      v9 = v3;
      if (dword_1007B2DE0 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B2DE0, 60), v4 = v9, v7))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
        LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerUpdate:rtiData:]_block_invoke", 60, "### Error updating %@: %@\n", v5, v6);

LABEL_8:
        v4 = v9;
      }
    }
  }
  else if (dword_1007B2DE0 <= 30)
  {
    v9 = 0;
    if (dword_1007B2DE0 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B2DE0, 30), v4 = 0, v8))
    {
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _riServerUpdate:rtiData:]_block_invoke", 30, "Update %@ success\n", *(_QWORD *)(a1 + 32));
      goto LABEL_8;
    }
  }

}

id sub_10016F5A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tvAutoFillPostIfNeeded:", *(_QWORD *)(a1 + 40));
}

void sub_10016F64C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[3];
  _QWORD v16[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString"));

  v4 = objc_alloc_init(off_1007B2E90());
  v6 = SFLocalizedStringForKey(CFSTR("PROX_AUTOFILL_MESSAGE"), v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v4, "setBody:", v7);

  objc_msgSend(v4, "setCategoryIdentifier:", CFSTR("continuityRemoteCategory"));
  objc_msgSend(v4, "setShouldHideTime:", 1);
  objc_msgSend(v4, "setShouldHideDate:", 1);
  objc_msgSend(v4, "setShouldSuppressDefaultAction:", 1);
  objc_msgSend(v4, "setShouldIgnoreDoNotDisturb:", 1);
  v8 = -[objc_class soundWithAlertType:](off_1007B2E98(), "soundWithAlertType:", 23);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_msgSend(v4, "setSound:", v9);

  v11 = SFLocalizedStringForKey(CFSTR("PROX_AUTOFILL_SUBTITLE"), v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  objc_msgSend(v4, "setSubtitle:", v12);

  v15[0] = CFSTR("af");
  v15[1] = CFSTR("deviceIdentifier");
  v13 = *(_QWORD *)(a1 + 32);
  v16[0] = &__kCFBooleanTrue;
  v16[1] = v13;
  v15[2] = CFSTR("sessionID");
  v16[2] = v3;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3));
  objc_msgSend(v4, "setUserInfo:", v14);

  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _tvAutoFillPostIfNeeded:]_block_invoke", 30, "AFPost %@\n", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "_addRequestWithID:content:type:", *(_QWORD *)(a1 + 32), v4, 4);

}

id sub_10016F8E0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tvAutoFillRemove:", *(_QWORD *)(a1 + 40));
}

id sub_10016FA88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tvAutoFillRemoveAll");
}

id sub_10016FE10(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_watchKeyboardPostIfNeeded:", *(_QWORD *)(a1 + 40));
}

id sub_10016FEE0(uint64_t a1)
{
  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchKeyboardPostIfNeeded:]_block_invoke", 30, "Watch KBPost %@\n", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_addRequestWithID:content:type:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), 6);
}

id sub_10016FFE4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_watchKeyboardRemove:", *(_QWORD *)(a1 + 40));
}

id sub_10017018C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_watchKeyboardRemoveAll");
}

id sub_1001702BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_riServerUpdate:info:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100170560(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B2DE0 <= 60)
    {
      v9 = v3;
      if (dword_1007B2DE0 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B2DE0, 60), v4 = v9, v7))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
        LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchKeyboardUpdate:info:]_block_invoke", 60, "### Error updating %@: %@\n", v5, v6);

LABEL_8:
        v4 = v9;
      }
    }
  }
  else if (dword_1007B2DE0 <= 30)
  {
    v9 = 0;
    if (dword_1007B2DE0 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B2DE0, 30), v4 = 0, v8))
    {
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchKeyboardUpdate:info:]_block_invoke", 30, "Update %@ success\n", *(_QWORD *)(a1 + 32));
      goto LABEL_8;
    }
  }

}

id sub_10017070C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_watchKeyboardUpdate:rtiData:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100170B5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B2DE0 <= 60)
    {
      v9 = v3;
      if (dword_1007B2DE0 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B2DE0, 60), v4 = v9, v7))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
        LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchKeyboardUpdate:rtiData:]_block_invoke", 60, "### Error updating %@: %@\n", v5, v6);

LABEL_8:
        v4 = v9;
      }
    }
  }
  else if (dword_1007B2DE0 <= 30)
  {
    v9 = 0;
    if (dword_1007B2DE0 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B2DE0, 30), v4 = 0, v8))
    {
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _watchKeyboardUpdate:rtiData:]_block_invoke", 30, "Update %@ success\n", *(_QWORD *)(a1 + 32));
      goto LABEL_8;
    }
  }

}

id sub_1001711C0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_homePodHandoffPostIfNeeded:info:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1001712A0(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "homePodType");
  if (dword_1007B2DE0 <= 30 && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodHandoffPostIfNeeded:info:]_block_invoke", 30, "HHPost %@\n", *(_QWORD *)(a1 + 40));
  return _objc_msgSend(*(id *)(a1 + 48), "_addRequestWithID:content:type:isHomePodMini:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), objc_msgSend(*(id *)(a1 + 32), "notificationType"), v2 == (id)2);
}

id sub_1001713EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_homePodHandoffRemove:reason:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100171654(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_homePodHandoffRemoveAll");
}

id sub_1001717A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_homePodHandoffUpdateIfNeeded:info:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1001719E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  unsigned int v11;
  id v12;
  id v13;

  v13 = a2;
  if (v13)
  {
    if (dword_1007B2DE0 <= 60
      && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 60)))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedDescription"));
      LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodHandoffUpdateIfNeeded:info:]_block_invoke", 60, "### Error updating %@: %@\n", v3, v4);

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "domain"));
    v6 = off_1007B2E60();
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = v5;
    v9 = v7;
    v10 = v9;
    if (v8 == v9)
    {

    }
    else
    {
      if ((v8 == 0) == (v9 != 0))
      {

LABEL_17:
        goto LABEL_18;
      }
      v11 = objc_msgSend(v8, "isEqual:", v9);

      if (!v11)
        goto LABEL_17;
    }
    v12 = objc_msgSend(v13, "code");

    if (v12 == (id)100)
    {
      v8 = objc_msgSend(*(id *)(a1 + 40), "copy");
      objc_msgSend(v8, "setAttachmentURL:", 0);
      objc_msgSend(*(id *)(a1 + 48), "homePodHandoffUpdateIfNeeded:info:", *(_QWORD *)(a1 + 32), v8);
LABEL_18:

    }
  }
  else if (dword_1007B2DE0 <= 30
         && (dword_1007B2DE0 != -1 || _LogCategory_Initialize(&dword_1007B2DE0, 30)))
  {
    LogPrintF(&dword_1007B2DE0, "-[SDNotificationManager _homePodHandoffUpdateIfNeeded:info:]_block_invoke", 30, "Update %@ success\n", *(_QWORD *)(a1 + 32));
  }

}

void sub_100171FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100171FEC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100172468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

Class sub_100172F5C()
{
  Class result;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  result = objc_getClass("UNUserNotificationCenter");
  qword_1007C6AF8 = (uint64_t)result;
  off_1007B2E50 = (uint64_t (*)())sub_100172FB8;
  return result;
}

id sub_100172FB8()
{
  return (id)qword_1007C6AF8;
}

void sub_100172FC4(id a1)
{
  qword_1007C6B08 = (uint64_t)dlopen("/System/Library/Frameworks/UserNotifications.framework/UserNotifications", 2);
}

Class sub_100172FEC()
{
  Class result;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  result = objc_getClass("UNNotificationRequest");
  qword_1007C6B10 = (uint64_t)result;
  off_1007B2E58 = (uint64_t (*)())sub_100173048;
  return result;
}

id sub_100173048()
{
  return (id)qword_1007C6B10;
}

id sub_100173054()
{
  id *v0;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  v0 = (id *)dlsym((void *)qword_1007C6B08, "UNErrorDomain");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6AC8, *v0);
  off_1007B2E60 = (uint64_t (*)())sub_1001730CC;
  return (id)qword_1007C6AC8;
}

id sub_1001730CC()
{
  return (id)qword_1007C6AC8;
}

id sub_1001730D8()
{
  id *v0;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  v0 = (id *)dlsym((void *)qword_1007C6B08, "UNNotificationAttachmentOptionsTypeHintKey");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6AD8, *v0);
  off_1007B2E68 = (uint64_t (*)())sub_100173150;
  return (id)qword_1007C6AD8;
}

id sub_100173150()
{
  return (id)qword_1007C6AD8;
}

id sub_10017315C()
{
  id *v0;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  v0 = (id *)dlsym((void *)qword_1007C6B08, "UNNotificationAttachmentOptionsHiddenFromDefaultExpandedViewKey");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6AD0, *v0);
  off_1007B2E70 = (uint64_t (*)())sub_1001731D4;
  return (id)qword_1007C6AD0;
}

id sub_1001731D4()
{
  return (id)qword_1007C6AD0;
}

Class sub_1001731E0()
{
  Class result;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  result = objc_getClass("UNNotificationAttachment");
  qword_1007C6B18 = (uint64_t)result;
  off_1007B2E78 = (uint64_t (*)())sub_10017323C;
  return result;
}

id sub_10017323C()
{
  return (id)qword_1007C6B18;
}

id sub_100173248()
{
  id *v0;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  v0 = (id *)dlsym((void *)qword_1007C6B08, "UNNotificationDefaultActionIdentifier");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6AE0, *v0);
  off_1007B2E80 = (uint64_t (*)())sub_1001732C0;
  return (id)qword_1007C6AE0;
}

id sub_1001732C0()
{
  return (id)qword_1007C6AE0;
}

id sub_1001732CC()
{
  id *v0;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  v0 = (id *)dlsym((void *)qword_1007C6B08, "UNNotificationDismissActionIdentifier");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6AE8, *v0);
  off_1007B2E88 = (uint64_t (*)())sub_100173344;
  return (id)qword_1007C6AE8;
}

id sub_100173344()
{
  return (id)qword_1007C6AE8;
}

Class sub_100173350()
{
  Class result;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  result = objc_getClass("UNMutableNotificationContent");
  qword_1007C6B20 = (uint64_t)result;
  off_1007B2E90 = (uint64_t (*)())sub_1001733AC;
  return result;
}

id sub_1001733AC()
{
  return (id)qword_1007C6B20;
}

Class sub_1001733B8()
{
  Class result;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  result = objc_getClass("UNNotificationSound");
  qword_1007C6B28 = (uint64_t)result;
  off_1007B2E98 = (uint64_t (*)())sub_100173414;
  return result;
}

id sub_100173414()
{
  return (id)qword_1007C6B28;
}

Class sub_100173420()
{
  Class result;

  if (qword_1007C6B38 != -1)
    dispatch_once(&qword_1007C6B38, &stru_1007191F0);
  result = objc_getClass("RTIInputSystemDataPayload");
  qword_1007C6B30 = (uint64_t)result;
  off_1007B2EA0 = (uint64_t (*)())sub_10017347C;
  return result;
}

id sub_10017347C()
{
  return (id)qword_1007C6B30;
}

void sub_100173488(id a1)
{
  qword_1007C6B40 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/RemoteTextInput.framework/RemoteTextInput", 2);
}

id sub_1001734B0()
{
  id *v0;

  if (qword_1007C6B00 != -1)
    dispatch_once(&qword_1007C6B00, &stru_1007191D0);
  v0 = (id *)dlsym((void *)qword_1007C6B08, "UNNotificationSilenceActionIdentifier");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6AF0, *v0);
  off_1007B2EA8 = (uint64_t (*)())sub_100173528;
  return (id)qword_1007C6AF0;
}

id sub_100173528()
{
  return (id)qword_1007C6AF0;
}

id sub_1001738F4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "onqueue_updateTetheringSupported");
  return objc_msgSend(*(id *)(a1 + 32), "onqueue_updateHostAPNetwork");
}

id sub_100173D70(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onqueue_updateTetheringSupported");
}

id sub_100173DD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onqueue_updateTetheringSupported");
}

id sub_100173E30(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Personal hotspot settings changed", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "onqueue_updateTetheringSupported");
}

id sub_1001749B8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting tethering", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "onqueue_startTetheringWithCompletionHandler:modelID:productVersion:canConnectOn5GHz:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64));
}

void sub_10017515C(id a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  uint64_t v8;
  NSObject *v9;
  const void *v10[2];
  uint8_t buf[16];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "wifiManager");

  if (v2)
  {
    v4 = tethering_log(v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Beginning shut down of wifi discovery", buf, 2u);
    }

    *(_OWORD *)buf = *(_OWORD *)&off_1007192C0;
    v10[0] = kCFBooleanFalse;
    v10[1] = kCFBooleanFalse;
    v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buf, v10, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v6)
    {
      v7 = v6;
      WiFiManagerClientSetMISDiscoveryStateExt(v2, v6);
      CFRelease(v7);
    }
    else
    {
      v8 = tethering_log(0);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1001767DC();

    }
  }
}

void sub_1001755FC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint8_t v9[16];

  v2 = tethering_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Restarting network timer", v9, 2u);
  }

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  if (v5)
  {
    objc_msgSend(v5, "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
  }
  v6 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v4, "networkTimerFired:", 0, 0, 8.0));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 56);
  *(_QWORD *)(v7 + 56) = v6;

}

id sub_100175734(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;

  objc_msgSend(*(id *)(a1 + 32), "onqueue_cleanUpFailedNetworkBringUp");
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_captureTailspin");
}

void sub_100175AA4(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 19) = 0;
  v3 = tethering_log(objc_msgSend(*(id *)(a1 + 40), "closeFile"));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CFSTR("NO");
    if (a2)
      v5 = CFSTR("YES");
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished capturing tailspin (success: %@)", (uint8_t *)&v6, 0xCu);
  }

}

id sub_100176244(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "onqueue_updateTetheringSupported");
  return objc_msgSend(*(id *)(a1 + 32), "onqueue_handleSwitchCondtionsChanged");
}

id sub_100176340(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_handleHostAPChanged:", *(_QWORD *)(a1 + 40));
}

void sub_100176590(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.HotspotMISStateChanged"), 0, 0);

}

void sub_100176720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No wifi device to copy host networks from", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017674C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Error copying wifi networks = %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1001767B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to set MIS Discovery state, could not create a CFDictionaryRef!", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001767DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create a CFDictionaryRef!", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100176808()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Network never came up", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100176834(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to generate default personal hotspot password! (%@)", (uint8_t *)&v2, 0xCu);
}

void sub_100176B74(id a1)
{
  SDPowerChargingStatusNotifier *v1;
  void *v2;

  v1 = objc_alloc_init(SDPowerChargingStatusNotifier);
  v2 = (void *)qword_1007C6B48;
  qword_1007C6B48 = (uint64_t)v1;

}

void sub_100176BAC(id a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kSFPowerSourceStatusNotificationFromWatch, 0, 0, 0);
  v2 = charging_log();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "notifying battery status change.", v4, 2u);
  }

}

void sub_100177210(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10017731C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100177390(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001773F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100179AC4()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  int v3;

  sub_100020214();
  sub_100112CB4((void *)&_mh_execute_header, v0, v1, "Could not generate local key = %d, (output length = %d)", v2, v3);
  sub_10001949C();
}

void sub_100179B28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No local key to sign remote key", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100179B54()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  int v3;

  sub_100020214();
  sub_100112CB4((void *)&_mh_execute_header, v0, v1, "Failed to signed remote key = %d, output length = %d", v2, v3);
  sub_10001949C();
}

void sub_100179BB8()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "KeybagUUIDs have changed", v1, 2u);
  sub_1000161DC();
}

void sub_100179BF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error serializing LTKs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179C50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Set backup key", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100179C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error setting backup exclusion key: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179CDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error persisting LTKs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179D3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error loading LTK file: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179D9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error deserializing LTKs: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179DFC(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "longTermKeyStorageFilePath"));
  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Couldn't delete LTKs, no storage path: %@", v4, 0xCu);

}

void sub_100179E8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to delete LTKs %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179EEC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pairingStorePath"));
  sub_100029230();
  sub_1000311EC((void *)&_mh_execute_header, v2, v3, "Error creating unlock storage folder: (pairing path %@, error %@)", v4, v5, v6, v7, v8);

  sub_100031218();
}

void sub_100179F78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Unable to find LTK file (error: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100179FD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create escrow for stash", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A004(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localLongTermKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remoteLongTermKey"));
  sub_1000311EC((void *)&_mh_execute_header, v3, v4, "No long term keys to create session (local key = %@, remote key = %@)", v5, v6, v7, v8, 2u);

  sub_100031218();
}

void sub_10017A0A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Not privileged to use AKS SPI", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A0D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Remote peer setup, could not validate escrow", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A100()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No auth session for step", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A12C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;

  LOWORD(v3) = 1024;
  HIWORD(v3) = a2;
  sub_100112CB4((void *)&_mh_execute_header, a2, a3, "Step failed with output length = %d, error = %x", 67109376, v3);
  sub_10001949C();
}

void sub_10017A1A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Failed to create escrow secret ouput length = %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_10017A208(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a1, a3, "Failed to reset session = %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_10017A278()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No long term keys to find escrow record", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A2A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to reset escrow record", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A2D0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;

  LOWORD(v3) = 1024;
  HIWORD(v3) = a2;
  sub_100112CB4((void *)&_mh_execute_header, a2, a3, "Failed to store escrow data (add status:%d, delete status:%d)", 67109376, v3);
  sub_10001949C();
}

void sub_10017A340(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Failed to delete escrow record: %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_10017A3A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Migrating escrow data in new format failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10017A3D0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Failed to delete escrow record = %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_10017A474(id a1)
{
  SDAutoUnlockTransport *v1;
  void *v2;

  v1 = objc_alloc_init(SDAutoUnlockTransport);
  v2 = (void *)qword_1007C6B58;
  qword_1007C6B58 = (uint64_t)v1;

}

void sub_10017A73C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientMap"));
  objc_msgSend(v2, "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_10017A814(uint64_t a1)
{
  void *v2;
  NSMutableArray *v3;
  void *v4;
  NSMutableArray *v5;
  NSMutableArray *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[4];
  id v18;
  NSMutableArray *v19;
  _BYTE v20[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientMap"));
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

  v3 = objc_opt_new(NSMutableArray);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendIdentifierToSessionID"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10017A9C0;
  v17[3] = &unk_100717858;
  v18 = *(id *)(a1 + 40);
  v5 = v3;
  v19 = v5;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v17);

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = v5;
  v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v13, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendIdentifierToSessionID", (_QWORD)v13));
        objc_msgSend(v12, "removeObjectForKey:", v11);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v13, v20, 16);
    }
    while (v8);
  }

}

void sub_10017A9C0(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a2;
  if (objc_msgSend(a3, "isEqualToString:", *(_QWORD *)(a1 + 32)))
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);

}

void sub_10017AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017AC98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10017ACA8(uint64_t a1)
{

}

void sub_10017ACB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_bluetoothIDForIDSID:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10017AF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017AF3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_bluetoothDeviceIdentifiers"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10017B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017B96C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_devicesWithLTKs"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10017BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017BC44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_autoUnlockEligibleDevices:deviceType:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10017C308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10017C320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_enabledAutoUnlockDevicesUsingCache:", *(unsigned __int8 *)(a1 + 48)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10017C678(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsService", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "devices"));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "uniqueIDOverride"));
        v11 = objc_msgSend(v9, "deviceEnabledAsKeyForIDSDeviceID:", v10);

        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoUnlockDeviceForIDSDevice:cloudPaired:cached:", v8, 1, 0));
          if (v12)
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v12);

        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

void sub_10017CEE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10017D120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10017EBC0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if ((a2 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_10017EDD0(uint64_t a1)
{
  void *v2;
  char v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
  v3 = objc_opt_respondsToSelector(v2, "transportDidChangeDevices:");

  if ((v3 & 1) != 0)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
    objc_msgSend(v4, "transportDidChangeDevices:", *(_QWORD *)(a1 + 32));

  }
}

void sub_10017EF54(uint64_t a1)
{
  void *v2;
  char v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
  v3 = objc_opt_respondsToSelector(v2, "transportDidChangeNearbyState:");

  if ((v3 & 1) != 0)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
    objc_msgSend(v4, "transportDidChangeNearbyState:", *(_QWORD *)(a1 + 32));

  }
}

void sub_10017F0BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  SDAutoUnlockSessionWrapper *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  unsigned int v26;
  const __CFString *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  unsigned int v42;
  const __CFString *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  unsigned int v56;
  const __CFString *v57;
  uint64_t v58;
  int v59;
  _BYTE v60[10];
  _BYTE v61[10];
  void *v62;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsService"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deviceForFromID:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueIDOverride"));

  v6 = auto_unlock_log(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(a1 + 48), "type");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "data"));
      v11 = objc_msgSend(v10, "length");
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "outgoingResponseIdentifier"));
      v59 = 67109634;
      *(_DWORD *)v60 = v9;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v11;
      *(_WORD *)v61 = 2112;
      *(_QWORD *)&v61[2] = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received protobuf (type = %d, size = %u, identifier = %@)", (uint8_t *)&v59, 0x18u);

    }
    v13 = [SDAutoUnlockSessionWrapper alloc];
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "data"));
    v8 = -[SDAutoUnlockSessionWrapper initWithData:](v13, "initWithData:", v14);

    v15 = -[NSObject hasSessionID](v8, "hasSessionID");
    if (!(_DWORD)v15
      || (v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject sessionID](v8, "sessionID")),
          v17 = objc_msgSend(v16, "length"),
          v16,
          v17 != (id)16))
    {
      v31 = auto_unlock_log(v15);
      v21 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_100180BF8(v8, (id *)(a1 + 48), v21);
      goto LABEL_37;
    }
    v18 = objc_msgSend(*(id *)(a1 + 48), "type");
    v19 = objc_alloc((Class)NSUUID);
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[NSObject sessionID](v8, "sessionID")));
    v21 = objc_msgSend(v19, "initWithUUIDBytes:", objc_msgSend(v20, "bytes"));

    if ((int)v18 > 500)
    {
      if ((_DWORD)v18 == 501)
      {
        v53 = auto_unlock_log(v22);
        v54 = objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "serverReceivedTime"));
          v56 = objc_msgSend(*(id *)(a1 + 56), "fromServerStorage");
          v57 = CFSTR("NO");
          if (v56)
            v57 = CFSTR("YES");
          v59 = 138412546;
          *(_QWORD *)v60 = v55;
          *(_WORD *)&v60[8] = 2112;
          *(_QWORD *)v61 = v57;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Received registration request (date: %@, from storage: %@)", (uint8_t *)&v59, 0x16u);

        }
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
        v58 = *(_QWORD *)(a1 + 32);
        v30 = objc_claimAutoreleasedReturnValue(-[NSObject payload](v8, "payload"));
        objc_msgSend(v28, "transport:didReceiveRegistrationRequestWithSessionID:deviceID:requestData:", v58, v21, v4, v30);
        goto LABEL_36;
      }
      if ((_DWORD)v18 == 505)
      {
        v39 = auto_unlock_log(v22);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "serverReceivedTime"));
          v42 = objc_msgSend(*(id *)(a1 + 56), "fromServerStorage");
          v43 = CFSTR("NO");
          if (v42)
            v43 = CFSTR("YES");
          v59 = 138412546;
          *(_QWORD *)v60 = v41;
          *(_WORD *)&v60[8] = 2112;
          *(_QWORD *)v61 = v43;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Received key originating registration request (date: %@, from storage: %@)", (uint8_t *)&v59, 0x16u);

        }
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
        v44 = *(_QWORD *)(a1 + 32);
        v30 = objc_claimAutoreleasedReturnValue(-[NSObject payload](v8, "payload"));
        objc_msgSend(v28, "transport:didReceiveKeyOriginatingRegistrationRequestWithSessionID:deviceID:requestData:", v44, v21, v4, v30);
        goto LABEL_36;
      }
    }
    else
    {
      if ((_DWORD)v18 == 2)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
        v52 = *(_QWORD *)(a1 + 32);
        v30 = objc_claimAutoreleasedReturnValue(-[NSObject payload](v8, "payload"));
        objc_msgSend(v28, "transport:didReceiveDisableMessage:fromDeviceID:", v52, v30, v4);
        goto LABEL_36;
      }
      if ((_DWORD)v18 == 101)
      {
        v23 = auto_unlock_log(v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "serverReceivedTime"));
          v26 = objc_msgSend(*(id *)(a1 + 56), "fromServerStorage");
          v27 = CFSTR("NO");
          if (v26)
            v27 = CFSTR("YES");
          v59 = 138412546;
          *(_QWORD *)v60 = v25;
          *(_WORD *)&v60[8] = 2112;
          *(_QWORD *)v61 = v27;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received pairing request (date: %@, from storage: %@)", (uint8_t *)&v59, 0x16u);

        }
        if (!objc_msgSend(*(id *)(a1 + 32), "pairingRequestIsValidForDeviceID:messageContext:", v4, *(_QWORD *)(a1 + 56)))goto LABEL_37;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryClient"));
        v29 = *(_QWORD *)(a1 + 32);
        v30 = objc_claimAutoreleasedReturnValue(-[NSObject payload](v8, "payload"));
        objc_msgSend(v28, "transport:didReceivePairingRequestWithSessionID:deviceID:requestData:", v29, v21, v4, v30);
LABEL_36:

LABEL_37:
        goto LABEL_38;
      }
    }
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientMap"));
    v46 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject UUIDString](v21, "UUIDString"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectForKey:", v46));

    v47 = objc_opt_respondsToSelector(v28, "transport:didReceivePayload:type:deviceID:");
    if ((v47 & 1) != 0)
    {
      v48 = *(_QWORD *)(a1 + 32);
      v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject payload](v8, "payload"));
      objc_msgSend(v28, "transport:didReceivePayload:type:deviceID:", v48, v49, v18, v4);

    }
    v50 = auto_unlock_log(v47);
    v30 = objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientMap"));
      v59 = 138412802;
      *(_QWORD *)v60 = v28;
      *(_WORD *)&v60[8] = 2112;
      *(_QWORD *)v61 = v21;
      *(_WORD *)&v61[8] = 2112;
      v62 = v51;
      _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "client:%@, sessionID:%@, clients:%@", (uint8_t *)&v59, 0x20u);

    }
    goto LABEL_36;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_100180BC8(v8, v32, v33, v34, v35, v36, v37, v38);
LABEL_38:

}

void sub_10017F828(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendIdentifierToSessionID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientMap"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));

    v7 = auto_unlock_log(v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v11 = 138412802;
      v12 = v5;
      v13 = 2112;
      v14 = v3;
      v15 = 2112;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Calling client for ACK (client: %@, session ID: %@, identifier: %@)", (uint8_t *)&v11, 0x20u);
    }

    if ((objc_opt_respondsToSelector(v5, "transport:didReceiveMessageACKForIdentifier:") & 1) != 0)
      objc_msgSend(v5, "transport:didReceiveMessageACKForIdentifier:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendIdentifierToSessionID"));
    objc_msgSend(v10, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1001808F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void sub_100180900(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1001808F4((void *)&_mh_execute_header, a3, (uint64_t)a3, "Watch OS too old. Skipping", a1);
}

void sub_100180934(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_1001808F4((void *)&_mh_execute_header, a1, a3, "Skipping device without uniqueID", v3);
  sub_1000161DC();
}

void sub_100180968()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "IDS device not cloud paired %@", v1, 0xCu);
  sub_10001949C();
}

void sub_1001809D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Skipping Unsupported hardware: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100180A34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "Skipping unpaired device: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_100180A94()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "IDSDevice not found for deviceID: %@", v1, 0xCu);
  sub_10001949C();
}

void sub_100180B00(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  int v8;

  v3 = 136315650;
  v4 = "-[SDAutoUnlockTransport macVersionEligibleForDeviceID:]";
  v5 = 2112;
  v6 = a1;
  v7 = 1024;
  v8 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%s: called with deviceID:%@ whose deviceClass is %d", (uint8_t *)&v3, 0x1Cu);
}

void sub_100180B98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Proxy device not cloud paired", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100180BC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Incoming message from unknown device", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100180BF8(void *a1, id *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  void *v13;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sessionID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "data"));
  v8 = 138412802;
  v9 = v6;
  v10 = 2112;
  v11 = a1;
  v12 = 2112;
  v13 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Incoming message missing info (session = %@, wrapper = %@, data = %@)", (uint8_t *)&v8, 0x20u);

}

void sub_100180E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100180E44(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "handleEndpointsChanged:", v3);

}

void sub_100181548(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t type;
  uint64_t v14;
  _TtC16DaemoniOSLibrary20SDAirDropAgentClient *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;

  v5 = a2;
  v6 = a3;
  v8 = airdrop_nw_log(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v34) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AirDrop browse start handler called", (uint8_t *)&v34, 2u);
  }

  v10 = nw_agent_client_copy_browse_descriptor(v5);
  v12 = (void *)v10;
  if (v10)
  {
    type = nw_browse_descriptor_get_type(v10);
    if ((_DWORD)type == 2)
    {
      v15 = -[SDAirDropAgentClient initWithClient:browseDescriptor:browseResponse:]([_TtC16DaemoniOSLibrary20SDAirDropAgentClient alloc], "initWithClient:browseDescriptor:browseResponse:", v5, v12, v6);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endpointService"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "addClient:", v15));

      v20 = airdrop_nw_log(v18, v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "agentClient"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "id"));
        v34 = 138412290;
        v35 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Created AirDrop agent client %@", (uint8_t *)&v34, 0xCu);

      }
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientTokens"));
      objc_msgSend(v24, "addObject:", v17);

    }
    else
    {
      v26 = airdrop_nw_log(type, v14);
      v15 = (_TtC16DaemoniOSLibrary20SDAirDropAgentClient *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
        sub_100181F6C(&v15->super, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  else
  {
    v25 = airdrop_nw_log(0, v11);
    v15 = (_TtC16DaemoniOSLibrary20SDAirDropAgentClient *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR))
      sub_100181EF8((uint64_t)v5, &v15->super);
  }

}

void sub_100181768(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;

  v3 = a2;
  v5 = airdrop_nw_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AirDrop browse stop handler called", (uint8_t *)&v16, 2u);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_agentClientTokenForClient:", v3));
  if (v7)
  {
    v10 = airdrop_nw_log(v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "agentClient"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "id"));
      v16 = 138412290;
      v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removing AirDrop agent client %@", (uint8_t *)&v16, 0xCu);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endpointService"));
    objc_msgSend(v14, "removeClientWithToken:", v7);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientTokens"));
    objc_msgSend(v15, "removeObject:", v7);

  }
}

void sub_100181AC4(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  void *i;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  void (**v21)(_QWORD, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  __int128 v27;
  id obj;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[128];
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];

  v2 = objc_msgSend(*(id *)(a1 + 32), "copy");
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientTokens"));
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
  if (v3)
  {
    v5 = v3;
    v29 = *(_QWORD *)v35;
    *(_QWORD *)&v4 = 138412546;
    v27 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v35 != v29)
          objc_enumerationMutation(obj);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i), "agentClient", v27));
        v9 = airdrop_nw_log(v7, v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "id"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));
          v13 = objc_msgSend(v7, "pid");
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "startTime"));
          *(_DWORD *)buf = 138413058;
          v40 = v11;
          v41 = 2112;
          v42 = v12;
          v43 = 1024;
          v44 = v13;
          v45 = 2112;
          v46 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating browse results for client %@ - bundleID %@ - pid %d - startTime %@", buf, 0x26u);

        }
        v15 = (void *)nw_array_create();
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v16 = v2;
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v31;
          do
          {
            for (j = 0; j != v18; j = (char *)j + 1)
            {
              if (*(_QWORD *)v31 != v19)
                objc_enumerationMutation(v16);
              nw_array_append(v15, *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)j));
            }
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
          }
          while (v18);
        }

        v21 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "browseResponse"));
        ((void (**)(_QWORD, void *))v21)[2](v21, v15);

        v24 = airdrop_nw_log(v22, v23);
        v25 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "id"));
          *(_DWORD *)buf = v27;
          v40 = v26;
          v41 = 2112;
          v42 = v2;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Updated browse client %@ - endpoints %@ ", buf, 0x16u);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
    }
    while (v5);
  }

}

void sub_100181EC4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Failed to create browse agent", a5, a6, a7, a8, 0);
}

void sub_100181EF8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "No browse descriptor for client:%@", (uint8_t *)&v2, 0xCu);
}

void sub_100181F6C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Not an application service browse request", a5, a6, a7, a8, 0);
}

void sub_100184C38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;

  v5 = a2;
  v6 = a3;
  v7 = (void *)SFNodeCopyKinds(v6);
  if ((objc_msgSend(v7, "containsObject:", kSFNodeKindUnknown) & 1) == 0)
  {
    v8 = sub_100195DF4();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (!v9)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "objectForKeyedSubscript:", v5));
      if (!v9)
      {
        v10 = (double)(arc4random() % 0x64 + 1) / 100.0;
        v11 = (double)(arc4random() % 0x12D) / 100.0;
        v9 = (void *)objc_opt_new(CURangingMeasurement);
        objc_msgSend(v9, "setPtsScore:", v10);
        objc_msgSend(v9, "setFlags:", objc_msgSend(v9, "flags") | 8);
        objc_msgSend(v9, "setDistanceMeters:", v11);
        objc_msgSend(v9, "setFlags:", objc_msgSend(v9, "flags") | 1);
        if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "count"))
        {
          objc_msgSend(v9, "setHorizontalAngle:", 0.0);
          objc_msgSend(v9, "setFlags:", objc_msgSend(v9, "flags") | 2);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 248), "setObject:forKeyedSubscript:", v9, v5);
        SFNodeSetRangingData(v6, +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v9, 1, 0));
        v12 = magic_head_log();
        v13 = objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v14 = (void *)SFNodeCopyDisplayName(v6);
          v15 = 138412546;
          v16 = v9;
          v17 = 2112;
          v18 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Added fake ranging measurement %@ to %@", (uint8_t *)&v15, 0x16u);

        }
      }
    }

  }
}

int64_t sub_100185418(id a1, id a2, id a3)
{
  id v4;
  void *DisplayName;
  uint64_t v6;

  v4 = a3;
  DisplayName = (void *)SFNodeGetDisplayName(a2);
  v6 = SFNodeGetDisplayName(v4);

  return (int64_t)_objc_msgSend(DisplayName, "localizedCaseInsensitiveCompare:", v6);
}

int64_t sub_100185468(id a1, id a2, id a3)
{
  id v4;
  void *DisplayName;
  uint64_t v6;

  v4 = a3;
  DisplayName = (void *)SFNodeGetDisplayName(a2);
  v6 = SFNodeGetDisplayName(v4);

  return (int64_t)_objc_msgSend(DisplayName, "localizedCaseInsensitiveCompare:", v6);
}

void sub_100186138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100186160(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v2 = objc_loadWeakRetained(WeakRetained + 34);
    objc_msgSend(v2, "nodeBrowser:nodesChangedForParent:protocol:error:", v3, v3[2], v3[4], *((unsigned int *)v3 + 12));

    WeakRetained = v3;
  }

}

void sub_100186988(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = -[objc_class sharedManager](off_1007B30A0(), "sharedManager");
  v3 = (id)objc_claimAutoreleasedReturnValue(v1);
  if ((objc_msgSend(v3, "isMultiUser") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentUser"));
    byte_1007C6B70 = objc_msgSend(v2, "userType") == (id)1;

  }
  else
  {
    byte_1007C6B70 = 0;
  }

}

uint64_t sub_10018858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 48));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a3, a4);
  return result;
}

uint64_t sub_1001885E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, *(unsigned int *)(a1 + 40));
}

void sub_1001886C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  id obj;

  if (dword_1007B3030 <= 50 && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 50)))
    LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _ensureEduModeDevicesAreCleanedUp]_block_invoke", 50, "Keychainc cleanup tag %d < %d. Remove all items\n", *(_QWORD *)(a1 + 48), 1);
  v2 = SFAppleIDRemoveAllCertificatesFromKeychain(*(_QWORD *)(a1 + 32));
  if ((_DWORD)v2)
  {
    if (dword_1007B3030 <= 60)
    {
      if (dword_1007B3030 != -1 || (v4 = v2, v5 = _LogCategory_Initialize(&dword_1007B3030, 60), v2 = v4, v5))
        LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _ensureEduModeDevicesAreCleanedUp]_block_invoke", 60, "### SFAppleIDRemoveAllCertificatesFromKeychain failed with err=%#m\n", v2);
    }
  }
  else
  {
    v3 = SFAppleIDRemoveAllKeysFromKeychain(*(_QWORD *)(a1 + 32));
    if ((_DWORD)v3)
    {
      if (dword_1007B3030 <= 60)
      {
        if (dword_1007B3030 != -1 || (v6 = v3, v7 = _LogCategory_Initialize(&dword_1007B3030, 60), v3 = v6, v7))
          LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _ensureEduModeDevicesAreCleanedUp]_block_invoke", 60, "### SFAppleIDRemoveAllKeysFromKeychain failed with err=%#m\n", v3);
      }
    }
    else
    {
      obj = *(id *)(a1 + 40);
      objc_sync_enter(obj);
      objc_msgSend(*(id *)(a1 + 40), "_setMetaInfoValue:forKey:", &off_10074B9B8, CFSTR("KeychainCleanupTag"));
      objc_sync_exit(obj);

    }
  }
}

void sub_100188858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100188A60(uint64_t a1)
{
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(a1 + 32), "_handlePeriodicVerifyTimerFired");
  objc_sync_exit(obj);

}

void sub_100188AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100188DD8(uint64_t a1)
{
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(a1 + 32), "_handleThrottledRetryTimerFired");
  objc_sync_exit(obj);

}

void sub_100188E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100189FD0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  char v16;
  NSString *v17;
  uint64_t v18;
  const __CFString *v19;
  NSErrorUserInfoKey v20;
  const __CFString *v21;

  v6 = a2;
  v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  if ((_DWORD)a3)
  {
    if (dword_1007B3030 <= 60
      && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 60)))
    {
      LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _handleInfoResponse:forAppleID:infoRequest:certificateSerialNumber:withError:completion:]_block_invoke", 60, "### SFAppleIDParseValidationRecordData failed with error %#m\n", a3);
    }
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
      goto LABEL_25;
    goto LABEL_28;
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)) & 1) == 0)
  {
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
    {
      a3 = 4294960587;
LABEL_25:
      v20 = NSLocalizedDescriptionKey;
      v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(a3, 0, 0));
      v18 = objc_claimAutoreleasedReturnValue(v17);
      v13 = (void *)v18;
      v19 = CFSTR("?");
      if (v18)
        v19 = (const __CFString *)v18;
      v21 = v19;
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, (int)a3, v3));
      v16 = 0;
      v11 = 0;
      goto LABEL_15;
    }
LABEL_28:
    v11 = 0;
    goto LABEL_17;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("altDsID")));
  objc_msgSend(*(id *)(a1 + 48), "setAltDSID:", v8);

  objc_msgSend(*(id *)(a1 + 48), "setSuggestedValidDuration:", CFDictionaryGetInt64(v6, CFSTR("SuggestValidDuration"), 0));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ValidatedEmailHashes")));
  if (objc_msgSend(v9, "count"))
    v10 = v9;
  else
    v10 = 0;
  objc_msgSend(*(id *)(a1 + 48), "setValidatedEmailHashes:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ValidatedPhoneHashes")));

  if (objc_msgSend(v11, "count"))
    v12 = v11;
  else
    v12 = 0;
  objc_msgSend(*(id *)(a1 + 48), "setValidatedPhoneHashes:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ValidAsOf")));
  objc_msgSend(*(id *)(a1 + 48), "setValidStartDate:", v13);

  if (dword_1007B3030 <= 30 && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 30)))
    LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _handleInfoResponse:forAppleID:infoRequest:certificateSerialNumber:withError:completion:]_block_invoke", 30, "Validation record for %{mask} is valid\n", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_setCurrentAppleIDContactInfo:validationRecord:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
  {
    v15 = 0;
    v16 = 1;
LABEL_15:
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
    if ((v16 & 1) == 0)
    {

    }
  }
LABEL_17:

  objc_sync_exit(v7);
}

void sub_10018A2FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018B8C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 48));
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));
    (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, v7, v5);

  }
}

uint64_t sub_10018B948(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "connection:didReceiveIncomingMessage:", 0, 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(result + 16))(result, CFSTR("Done"), 0);
  return result;
}

uint64_t sub_10018B998(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10018B9B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10018B9C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10018B9E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  NSErrorUserInfoKey v9;
  const __CFString *v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v9 = NSLocalizedDescriptionKey;
    v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(v2, 0, 0));
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)v4;
    v6 = CFSTR("?");
    if (v4)
      v6 = (const __CFString *)v4;
    v10 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, v2, v7));
    (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(a1 + 32), 0, 0);
  }
}

void sub_10018C410(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10018C448(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a3;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10018C474(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1[4] + 48));
  v6 = v5;
  if (v6)
    v7 = 0;
  else
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Server Task Type: %d\nResponse Info: %@"), a1[6], v9));
  v8 = a1[5];
  if (v8)
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, v7, v6);

}

void sub_10018C524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  NSErrorUserInfoKey v9;
  const __CFString *v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if ((_DWORD)v2)
  {
    v9 = NSLocalizedDescriptionKey;
    v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(v2, 0, 0));
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)v4;
    v6 = CFSTR("?");
    if (v4)
      v6 = (const __CFString *)v4;
    v10 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, v2, v7));
    (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(a1 + 32), 0, 0);
  }
}

uint64_t sub_10018CA64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10018CA78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  objc_msgSend(*(id *)(a1 + 32), "_handleFindPersonResponse:forRequest:emailOrPhone:withError:queue:completion:", v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v5, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  objc_sync_exit(v6);

}

void sub_10018CAF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018CB08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  NSErrorUserInfoKey v9;
  const __CFString *v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v9 = NSLocalizedDescriptionKey;
    v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(v2, 0, 0));
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)v4;
    v6 = CFSTR("?");
    if (v4)
      v6 = (const __CFString *)v4;
    v10 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, v2, v7));
    (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(a1 + 32), 0, 0);
  }
}

void sub_10018D3E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  objc_msgSend(*(id *)(a1 + 32), "_handleInfoResponse:forAppleID:infoRequest:certificateSerialNumber:withError:completion:", v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v5, *(_QWORD *)(a1 + 64));
  objc_sync_exit(v6);

}

void sub_10018D464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10018D478(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10018D8BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  objc_msgSend(*(id *)(a1 + 32), "_handleReceivedCertificateToken:privateKeyPersistentReference:forAppleID:", v7, v5, *(_QWORD *)(a1 + 40));
  objc_sync_exit(v6);

}

void sub_10018D930(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018D944(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  objc_msgSend(*(id *)(a1 + 32), "_handleReceivedIdentity:forAppleID:identityRequest:withError:completion:", v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v5, *(_QWORD *)(a1 + 56));
  objc_sync_exit(v6);

}

void sub_10018D9BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10018D9D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10018E4A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  objc_msgSend(*(id *)(a1 + 32), "_handleServerTaskCompletionWithError:", v4);
  objc_sync_exit(v3);

}

void sub_10018E500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E514(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  objc_msgSend(*(id *)(a1 + 32), "_handleServerTaskCompletionWithError:", v4);
  objc_sync_exit(v3);

}

void sub_10018E56C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E580(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  objc_msgSend(*(id *)(a1 + 32), "_handleServerTaskCompletionWithError:", v4);
  objc_sync_exit(v3);

}

void sub_10018E5D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E5EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  objc_msgSend(*(id *)(a1 + 32), "_handleServerTaskCompletionWithError:", v4);
  objc_sync_exit(v3);

}

void sub_10018E644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E658(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[5];
  id v16;
  _QWORD v17[5];

  v5 = a2;
  v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  if ((_DWORD)a3)
  {
    if (dword_1007B3030 <= 60
      && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 60)))
    {
      LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _verifyState]_block_invoke_5", 60, "### SFAppleIDParseValidationRecordData failed with error %#m\n", a3);
    }
    v13 = *(_QWORD **)(a1 + 32);
    v14 = v13[3];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10018E85C;
    v17[3] = &unk_1007147C8;
    v17[4] = v13;
    objc_msgSend(v13, "_requestInfoForAppleID:completion:", v14, v17);
  }
  else
  {
    if (dword_1007B3030 <= 30
      && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 30)))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "appleID"));
      LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _verifyState]_block_invoke_5", 30, "Validation record for %{mask} is valid\n", v8);

    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));

    if (v9)
    {
      v10 = *(void **)(a1 + 32);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10018E8C8;
      v15[3] = &unk_100719658;
      v12 = *(void **)(a1 + 40);
      v15[4] = *(_QWORD *)(a1 + 32);
      v16 = v12;
      objc_msgSend(v10, "_checkIfAppleIDCertificateChainIsValidForIdentity:completion:", v11, v15);

    }
  }
  objc_sync_exit(v6);

}

void sub_10018E844(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E85C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  objc_msgSend(*(id *)(a1 + 32), "_handleServerTaskCompletionWithError:", v4);
  objc_sync_exit(v3);

}

void sub_10018E8B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E8C8(uint64_t a1, char a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  if ((a2 & 1) != 0)
  {
    if (dword_1007B3030 <= 30)
    {
      if (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 30))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "appleID"));
        LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _verifyState]_block_invoke_7", 30, "Certificate chain for %{mask} is trusted\n", v7);

      }
      if (dword_1007B3030 <= 30
        && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 30)))
      {
        LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _verifyState]_block_invoke_7", 30, "Agent state: all good.\n");
      }
    }
    v12 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v12, "_setMetaInfoValue:forKey:", v11, CFSTR("LastAllGoodDate"));
  }
  else
  {
    if (dword_1007B3030 <= 60
      && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 60)))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appleID"));
      LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent _verifyState]_block_invoke_7", 60, "### Invalid certificate chain for %{mask}, error %#m\n", v9, a3);

    }
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identity"));
    objc_msgSend(v10, "_handleUntrustedAppleIDCertificateChainForIdentity:", v11);
  }

  objc_sync_exit(obj);
}

void sub_10018EAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018EB30(uint64_t a1)
{
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(a1 + 32), "_verifyState");
  objc_sync_exit(obj);

}

void sub_10018EB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018ECA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018ED80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018EE74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (dword_1007B3030 <= 30 && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 30)))
    LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent verifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke", 30, "Verified identity for %{mask}: %@\n", *(_QWORD *)(a1 + 32), v6);
  SFMetricsLogUnexpectedEvent(3, 0, *(_QWORD *)(a1 + 32));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10018F0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10018F0E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10018F0F4(uint64_t a1)
{

}

void sub_10018F0FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v5 = a2;
  v9 = a3;
  if (v9
    && dword_1007B3030 <= 60
    && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 60)))
  {
    LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent verifiedIdentityForEmailOrPhone:]_block_invoke", 60, "### copyCSIdentityForEmailOrPhone:queue:completion failed with error=%{error}\n", v9);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10018F6CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018F7C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  SDAppleIDVerifiedIdentity *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (v5)
  {
    if (dword_1007B3030 <= 90
      && (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 90)))
    {
      LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent queryVerifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke", 90, "### FindPerson failed with error %@\n", v5);
    }
    v6 = 0;
    v8 = 0;
    goto LABEL_24;
  }
  if (!v9)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", SFAppleIDErrorDomain, 201236, 0));
    if (dword_1007B3030 <= 90)
    {
      if (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 90))
        LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent queryVerifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke", 90, "### FindPerson returned no person info object\n");
      goto LABEL_23;
    }
    v6 = 0;
LABEL_17:
    v7 = 0;
    goto LABEL_5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "accountIdentifier"));
  if (!v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", SFAppleIDErrorDomain, 201237, 0));
    if (dword_1007B3030 <= 90)
    {
      if (dword_1007B3030 != -1 || _LogCategory_Initialize(&dword_1007B3030, 90))
        LogPrintF(&dword_1007B3030, "-[SDAppleIDAgent queryVerifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke", 90, "### No account identifier in person info object\n");
LABEL_23:
      v6 = 0;
LABEL_24:
      v7 = 0;
      goto LABEL_5;
    }
    goto LABEL_17;
  }
  v7 = -[SDAppleIDVerifiedIdentity initWithAccountIdentifier:emailOrPhone:]([SDAppleIDVerifiedIdentity alloc], "initWithAccountIdentifier:emailOrPhone:", v6, *(_QWORD *)(a1 + 32));
  v8 = 0;
LABEL_5:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10018FA20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018FA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018FAE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018FB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018FBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018FCDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018FD34(id a1)
{
  SDAppleIDAgent *v1;
  void *v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;

  v1 = objc_alloc_init(SDAppleIDAgent);
  v2 = (void *)gSDAppleIDAgent;
  gSDAppleIDAgent = v1;

  global_queue = dispatch_get_global_queue(2, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  dispatch_async(v4, &stru_100719738);

}

void sub_10018FD90(id a1)
{
  objc_msgSend(gSDAppleIDAgent, "activate");
}

void sub_10018FDE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018FEB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018FF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10018FFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100190008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10019005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100190170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100190258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100190388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  void *v11;

  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

Class sub_10019046C()
{
  Class result;

  if (qword_1007C6BA0 != -1)
    dispatch_once(&qword_1007C6BA0, &stru_100719758);
  result = objc_getClass("UMUserManager");
  qword_1007C6B98 = (uint64_t)result;
  off_1007B30A0 = (uint64_t (*)())sub_1001904C8;
  return result;
}

id sub_1001904C8()
{
  return (id)qword_1007C6B98;
}

void sub_1001904D4(id a1)
{
  qword_1007C6BA8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
}

id sub_1001904FC()
{
  id *v0;

  if (qword_1007C6BB0 != -1)
    dispatch_once(&qword_1007C6BB0, &stru_100719778);
  v0 = (id *)dlsym((void *)qword_1007C6BB8, "APSEnvironmentProduction");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6B90, *v0);
  off_1007B30A8 = (uint64_t (*)())sub_100190574;
  return (id)qword_1007C6B90;
}

id sub_100190574()
{
  return (id)qword_1007C6B90;
}

void sub_100190580(id a1)
{
  qword_1007C6BB8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService", 2);
}

id sub_1001905A8()
{
  id *v0;

  if (qword_1007C6BB0 != -1)
    dispatch_once(&qword_1007C6BB0, &stru_100719778);
  v0 = (id *)dlsym((void *)qword_1007C6BB8, "APSEnvironmentDevelopment");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6B88, *v0);
  off_1007B30B0 = (uint64_t (*)())sub_100190620;
  return (id)qword_1007C6B88;
}

id sub_100190620()
{
  return (id)qword_1007C6B88;
}

Class sub_10019062C()
{
  Class result;

  if (qword_1007C6BB0 != -1)
    dispatch_once(&qword_1007C6BB0, &stru_100719778);
  result = objc_getClass("APSConnection");
  qword_1007C6BC0 = (uint64_t)result;
  off_1007B30B8 = (uint64_t (*)())sub_100190688;
  return result;
}

id sub_100190688()
{
  return (id)qword_1007C6BC0;
}

void sub_100190C30(id a1)
{
  SDAutoUnlockWiFiManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDAutoUnlockWiFiManager);
  v2 = (void *)qword_1007C6BC8;
  qword_1007C6BC8 = (uint64_t)v1;

}

id sub_100190D48(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_addObservers");
  return _objc_msgSend(*(id *)(a1 + 32), "_createWiFiObserver");
}

void sub_100190DDC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating ranging manager", (uint8_t *)&v12, 2u);
  }

  v4 = objc_alloc_init((Class)NISession);
  objc_msgSend(*(id *)(a1 + 32), "setNiSession:", v4);

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "niSession"));
  objc_msgSend(v6, "setDelegate:", v5);

  v8 = auto_unlock_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "niSession"));
    v11 = CFSTR("YES");
    if (!v10)
      v11 = CFSTR("NO");
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Created ranging manager %@", (uint8_t *)&v12, 0xCu);

  }
}

id sub_100191588(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "awdlInfo"));
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "queueAvailableHandler"));
    if (v4)
    {
      v5 = (void *)v4;
LABEL_8:

      goto LABEL_9;
    }
    v6 = objc_msgSend(*(id *)(a1 + 32), "invalidated");

    if ((v6 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "awdlInfo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queueAvailableHandler"));
    v10 = objc_retainBlock(v9);
    objc_msgSend(v2, "handleFailureInMethod:object:file:lineNumber:description:", v7, v8, CFSTR("SDAutoUnlockWiFiManager.m"), 289, CFSTR("Invalid request params awdlInfo: %@ queueAvailableHandler: %@ invalidated: %d"), v5, v10, objc_msgSend(*(id *)(a1 + 32), "invalidated"));

    goto LABEL_8;
  }
  if ((objc_msgSend(v3, "invalidated") & 1) == 0)
    goto LABEL_7;
LABEL_9:
  result = objc_msgSend(*(id *)(a1 + 32), "activateCalled");
  if ((result & 1) == 0)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "invalidated");
    if ((result & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setActivateCalled:", 1);
      return _objc_msgSend(*(id *)(a1 + 40), "_addWiFiRequest:", *(_QWORD *)(a1 + 32));
    }
  }
  return result;
}

id sub_100191778(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelWiFiRequest:", *(_QWORD *)(a1 + 40));
}

id sub_10019183C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setRangingPeer:", *(_QWORD *)(a1 + 40));
}

void sub_100191B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100191B54(id *a1, char a2)
{
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  char v11;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "queue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100191C08;
  v7[3] = &unk_100719888;
  v5 = a1[5];
  v11 = a2;
  v6 = a1[4];
  v8 = v5;
  v9 = v6;
  objc_copyWeak(&v10, a1 + 6);
  dispatch_async(v4, v7);

  objc_destroyWeak(&v10);
}

void sub_100191C08(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  id *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  id v13;

  v2 = *(id *)(a1 + 32);
  if (v2 && (v2 = objc_msgSend(v2, "invalidated"), !(_DWORD)v2))
  {
    v5 = *(void **)(a1 + 40);
    if (*(_BYTE *)(a1 + 56))
    {
      objc_msgSend(v5, "setAwdlStarting:", 1);
      v6 = (id *)(a1 + 48);
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend(WeakRetained, "_startAWDLWithInfo:", *(_QWORD *)(a1 + 32));

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
      v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "awdlState"));

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentRequest"));
      LODWORD(v8) = objc_msgSend(v9, "isRangingInitiator");

      if ((_DWORD)v8)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("LINK_CHANGED_IS_LINKDOWN")));
        v11 = objc_msgSend(v10, "BOOLValue");

        if ((v11 & 1) == 0)
        {
          v12 = objc_loadWeakRetained(v6);
          objc_msgSend(v12, "_startRangingIfPeerFoundInStateInfo:awdlUpSameTime:", v13, 0);

        }
      }

    }
    else
    {
      objc_msgSend(v5, "_invalidateCurrentRequest");
    }
  }
  else
  {
    v3 = auto_unlock_log(v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100194BE4();

  }
}

void sub_10019294C(uint64_t a1)
{
  _NIRangingPeerDistance *v2;
  void *v3;
  void *v4;
  void *v5;
  _NIRangingPeerDistance *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  _NIRangingPeerDistance *v12;

  v2 = [_NIRangingPeerDistance alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rangingPeer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "niRangingPeer"));
  v6 = -[_NIRangingPeerDistance initWithPeer:distanceMeters:initiator:shouldUnlock:](v2, "initWithPeer:distanceMeters:initiator:shouldUnlock:", v5, &off_10074B9E8, 1, *(unsigned __int8 *)(a1 + 40));
  v12 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "rangingCompletedHandler"));

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
    v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "rangingCompletedHandler"));
    ((void (**)(_QWORD, void *, _QWORD))v11)[2](v11, v7, 0);

  }
}

void sub_100192B2C(uint64_t a1)
{
  void *v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rangingCompletedHandler"));

  if (v3)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rangingCompletedHandler"));
    v4[2](v4, 0, *(_QWORD *)(a1 + 40));

  }
}

void sub_100192D08(uint64_t a1)
{
  void *v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rangingCompletedHandler"));

  if (v3)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentRequest"));
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rangingCompletedHandler"));
    v4[2](v4, 0, *(_QWORD *)(a1 + 40));

  }
}

void sub_100193008(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  int v25;

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a5, "wiFiManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a5, "request"));
  v10 = auto_unlock_log(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentRequest"));
    v14 = 136316418;
    v15 = "awdlNetworkStartCallback";
    v16 = 2112;
    v17 = a3;
    v18 = 2112;
    v19 = v9;
    v20 = 2112;
    v21 = v12;
    v22 = 2112;
    v23 = v13;
    v24 = 1024;
    v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s AWDL network started network: %@ request: %@ identifier: %@ currentRequest: %@ error: %d", (uint8_t *)&v14, 0x3Au);

  }
  objc_msgSend(v8, "handleNetworkStarted:request:error:", a3, v9, a2);

}

void sub_100193330(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  int v11;
  const char *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  int v18;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "wiFiManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "request"));
  v8 = auto_unlock_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
    v11 = 136315906;
    v12 = "awdlStopNetworkCallback";
    v13 = 2112;
    v14 = v7;
    v15 = 2112;
    v16 = v10;
    v17 = 1024;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s AWDL Stop network request: %@ identifier: %@ error: %d", (uint8_t *)&v11, 0x26u);

  }
  objc_msgSend(v6, "handleNetworkStoppedWithError:error:", v7, a2);

}

void sub_10019376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001937A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleAWDLTimerFired");

}

id sub_100193FA4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleVirtualInterfacesChanged:", *(_QWORD *)(a1 + 40));
}

void sub_1001943D0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v13 = 136315394;
    v14 = "-[SDAutoUnlockWiFiManager rangingReportEventForWiFiInterfaceWithName:data:error:]_block_invoke";
    v15 = 2112;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s Wi-Fi Ranging results %@", (uint8_t *)&v13, 0x16u);
  }

  v6 = auto_unlock_log(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(const char **)(a1 + 40);
    v13 = 138412290;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wi-Fi Ranging error %@", (uint8_t *)&v13, 0xCu);
  }

  v9 = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "currentRequest"));
  objc_msgSend(v10, "setWifiRangingError:", v9);

  v11 = *(_QWORD *)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "currentRequest"));
  objc_msgSend(v12, "setWifiRangingResults:", v11);

}

id sub_1001945E8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleNetworkStarted:request:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

id sub_1001948EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleNetworkStoppedWithError:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100194BE4()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Cannot process invalidated request", v1, 2u);
  sub_1000161DC();
}

void sub_100194C1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Attempting to start ranging without peer", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100194C48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Attempting to start ranging without NI peer", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100194C74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "Received ranging auth recommendation with peer is empty", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_100194CA0(void *a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_1000F9D64();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x20u);

  sub_1001608E0();
}

void sub_100194D48(void *a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_1000F9D64();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x26u);

  sub_1001608E0();
}

void sub_100194E00(void *a1)
{
  void *v1;
  os_log_t v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "currentRequest"));
  sub_1000F9D64();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x16u);

}

void sub_100194EA0()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Not ranging initiator, ignoring interfaces changed", v1, 2u);
  sub_1000161DC();
}

void sub_100194ED8(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[SDAutoUnlockWiFiManager _handleNetworkStarted:request:error:]";
  v4 = 2048;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s AWDL bring up failed (error: %ld)", (uint8_t *)&v2, 0x16u);
}

uint64_t SDUnlockClassALongTermKeyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  unint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Data;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = PBReaderReadData(a2);
      v19 = objc_claimAutoreleasedReturnValue(Data);
      v20 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v19;

    }
    else
    {
      if ((_DWORD)v12 == 2)
      {
        v21 = 0;
        v22 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0)
            goto LABEL_42;
          v21 += 7;
          v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_44:
        v26 = 16;
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v17 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            goto LABEL_38;
          v13 += 7;
          v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_40:
        v26 = 20;
      }
      *(_DWORD *)(a1 + v26) = v15;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

__CFString *sub_1001958B4(unint64_t a1)
{
  if (a1 >= 8)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown (%ld)"), a1));
  else
    return *(&off_100719970 + a1);
}

void sub_100195904()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", kCFBooleanTrue, CFSTR("LockDeviceNow")));
  MKBLockDevice();

}

SDContactFetchResult *sub_1001959A4(uint64_t a1, void *a2, _QWORD *a3)
{
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  SDContactFetchResult *v9;
  NSMutableArray *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;

  v22 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "enumeratorForChangeHistoryFetchRequest:error:", a1, &v22));
  v5 = v22;
  v6 = v5;
  if (v5)
  {
    v7 = airdrop_log(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to get change history with error %@", buf, 0xCu);
    }

    v9 = 0;
    if (a3)
      *a3 = objc_retainAutorelease(v6);
  }
  else
  {
    v10 = objc_opt_new(NSMutableArray);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "value", 0));
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v14)
            objc_enumerationMutation(v11);
          -[NSMutableArray addObject:](v10, "addObject:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i));
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v13);
    }

    v9 = objc_alloc_init(SDContactFetchResult);
    -[SDContactFetchResult setEvents:](v9, "setEvents:", v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentHistoryToken"));
    -[SDContactFetchResult setCurrentHistoryToken:](v9, "setCurrentHistoryToken:", v16);

  }
  return v9;
}

NSMutableSet *sub_100195B94(void *a1)
{
  id v1;
  NSMutableSet *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = a1;
  v2 = objc_opt_new(NSMutableSet);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "identifier", (_QWORD)v10));
        -[NSMutableSet addObject:](v2, "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id sub_100195CB8(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3 || (v6 = v3, v4))
  {
    if (v3 || (v6 = v4) == 0)
    {
      objc_msgSend(v3, "horizontalAngle");
      v8 = v7;
      objc_msgSend(v3, "horizontalAngle");
      if (v8 >= 0.0)
        v10 = v9;
      else
        v10 = -v9;
      objc_msgSend(v5, "horizontalAngle");
      v12 = v11;
      objc_msgSend(v5, "horizontalAngle");
      if (v12 < 0.0)
        v13 = -v13;
      v6 = v3;
      if (v10 >= v13)
      {
        objc_msgSend(v3, "horizontalAngle");
        v15 = v14;
        objc_msgSend(v3, "horizontalAngle");
        if (v15 >= 0.0)
          v17 = v16;
        else
          v17 = -v16;
        objc_msgSend(v5, "horizontalAngle");
        v19 = v18;
        objc_msgSend(v5, "horizontalAngle");
        if (v19 < 0.0)
          v20 = -v20;
        v6 = v5;
        if (v17 <= v20)
        {
          objc_msgSend(v3, "ptsScore");
          v22 = v21;
          objc_msgSend(v5, "ptsScore");
          v6 = v3;
          if (v22 <= v23)
          {
            objc_msgSend(v3, "ptsScore");
            v25 = v24;
            objc_msgSend(v5, "ptsScore");
            if (v25 >= v26)
              v6 = v3;
            else
              v6 = v5;
          }
        }
      }
    }
  }
  v27 = v6;

  return v27;
}

id sub_100195DF4()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;

  v0 = (void *)SFNodeCopyRangingData();
  if (objc_msgSend(v0, "length"))
  {
    v2 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(CURangingMeasurement, v1), v0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id sub_100195E5C(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a2;
  v4 = objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v4, "addEntriesFromDictionary:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v4));
  return v5;
}

id sub_100195EB8(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v8;
  id v9;

  v9 = 0;
  v8 = 0;
  objc_msgSend(a1, "getResourceValue:forKey:error:", &v9, NSURLVolumeAvailableCapacityKey, &v8);
  v3 = v9;
  v4 = v8;
  v5 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) == 0)
  {
    if (v4)
    {
      if (a2)
      {
LABEL_5:
        v4 = objc_retainAutorelease(v4);
        v6 = 0;
        *a2 = v4;
        goto LABEL_8;
      }
    }
    else
    {
      v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("SFErrorDomain"), -1007, 0));
      if (a2)
        goto LABEL_5;
    }
    v6 = 0;
    goto LABEL_8;
  }
  v6 = v3;
LABEL_8:

  return v6;
}

void sub_100195F9C(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  dispatch_queue_t queue;
  id obj;
  _QWORD block[4];
  id v31;
  id v32;
  _QWORD v33[4];
  id v34;
  NSObject *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  id v41;
  NSObject *v42;
  id v43;
  _BYTE v44[128];

  v5 = a1;
  queue = a2;
  v27 = a3;
  v6 = dispatch_group_create();
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = v5;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "personHandle"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "value"));

        if (v14)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "aliases"));
          v16 = objc_msgSend(v15, "count");

          if (v16)
          {
            dispatch_group_enter(v6);
            v33[0] = _NSConcreteStackBlock;
            v33[1] = 3221225472;
            v33[2] = sub_1001962B4;
            v33[3] = &unk_1007198D8;
            v34 = v7;
            v35 = v6;
            v17 = v12;
            v18 = queue;
            v19 = v33;
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "personHandle"));
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472;
            v40[2] = sub_100196544;
            v40[3] = &unk_100719928;
            v42 = v18;
            v43 = v19;
            v41 = v17;
            v21 = v17;
            v22 = v18;
            sub_100196358(v20, v22, v40);

            v23 = v34;
          }
          else
          {
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "personHandle"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "value"));
            objc_msgSend(v7, "addObject:", v24);

          }
        }
      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    }
    while (v9);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001962E4;
  block[3] = &unk_1007159D0;
  v31 = v7;
  v32 = v27;
  v25 = v7;
  v26 = v27;
  dispatch_group_notify(v6, queue, block);

}

void sub_1001962B4(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1001962E4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(*(id *)(a1 + 32), "copy");
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

NSString *sub_100196324(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("photos://asset?albumname=camera-roll&identifier=%@"), a1);
}

void sub_100196358(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(id, _QWORD);
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[4];
  void (**v20)(id, _QWORD);
  uint8_t buf[4];
  void *v22;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
  if (!v8)
    goto LABEL_11;
  v9 = (void *)v8;
  v10 = objc_msgSend(v5, "type");

  if (!v10)
    goto LABEL_11;
  v11 = objc_msgSend(v5, "type");
  if (v11 == (id)1)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v13 = _IDSCopyIDForEmailAddress();
  }
  else
  {
    if (v11 != (id)2)
    {
LABEL_11:
      v7[2](v7, 0);
      goto LABEL_12;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "value"));
    v13 = _IDSCopyIDForPhoneNumberWithOptions(v12, 0, 0);
  }
  v14 = (void *)v13;

  if (!v14)
    goto LABEL_11;
  v15 = share_sheet_log();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Querying IDS for destination %@", buf, 0xCu);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSIDQueryController sharedInstance](IDSIDQueryController, "sharedInstance"));
  v18 = IDSServiceNameiMessage;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100196898;
  v19[3] = &unk_100719950;
  v20 = v7;
  objc_msgSend(v17, "refreshIDStatusForDestination:service:listenerID:queue:completionBlock:", v14, v18, v18, v6, v19);

LABEL_12:
}

void sub_100196544(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  NSObject *v14;
  id v15;
  _QWORD block[4];
  id v17;
  _QWORD *v18;
  _QWORD v19[5];
  NSObject *v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[5];
  id v27;
  _BYTE v28[128];

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personHandle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "value"));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

  }
  else
  {
    v5 = dispatch_group_create();
    v26[0] = 0;
    v26[1] = v26;
    v26[2] = 0x3032000000;
    v26[3] = sub_100196810;
    v26[4] = sub_100196820;
    v27 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "aliases"));
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "value"));
          v12 = v11 == 0;

          if (!v12)
          {
            dispatch_group_enter(v5);
            v13 = *(void **)(a1 + 40);
            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472;
            v19[2] = sub_100196828;
            v19[3] = &unk_100719900;
            v21 = v26;
            v19[4] = v10;
            v20 = v5;
            sub_100196358(v10, v13, v19);

          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
      }
      while (v7);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100196880;
    block[3] = &unk_100716E80;
    v14 = *(NSObject **)(a1 + 40);
    v17 = *(id *)(a1 + 48);
    v18 = v26;
    dispatch_group_notify(v5, v14, block);

    _Block_object_dispose(v26, 8);
  }
}

void sub_1001967E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100196810(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100196820(uint64_t a1)
{

}

void sub_100196828(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    v3 = 1;
  else
    v3 = a2 == 0;
  if (!v3)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "value"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_100196880(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

uint64_t sub_100196898(uint64_t a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  int v7;
  uint64_t v8;

  v4 = share_sheet_log();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134217984;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Async query returned status %ld", (uint8_t *)&v7, 0xCu);
  }

  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 == 1);
}

uint64_t sub_100196D08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100197908(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001979AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001979BC(uint64_t a1)
{

}

void sub_1001979C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  void *v16;
  SDAirDropConvertMediaItemsResult *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  const void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  id v49;
  uint8_t buf[16];
  id v51;
  id v52;
  _BYTE v53[128];
  _QWORD v54[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v52 = 0;
  v51 = 0;
  objc_msgSend(v7, "getResourceValue:forKey:error:", &v52, NSURLIsAliasFileKey, &v51);
  v10 = v52;
  v11 = v51;
  v12 = v11;
  if (v11)
  {
    v13 = airdrop_log(v11);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_10019A44C();
LABEL_4:

    goto LABEL_5;
  }
  v28 = objc_msgSend(v10, "BOOLValue");
  if ((_DWORD)v28)
  {
    v29 = airdrop_log(v28);
    v14 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to send alias file, keeping original URL", buf, 2u);
    }
    goto LABEL_4;
  }
LABEL_5:
  if (objc_msgSend(v10, "BOOLValue"))
    v15 = v7;
  else
    v15 = (id)objc_claimAutoreleasedReturnValue(+[SDAirDropLegacyHelper realPathURL:](SDAirDropLegacyHelper, "realPathURL:", v7));
  v16 = v15;
  if (v15)
  {
    v44 = v10;
    v17 = objc_alloc_init(SDAirDropConvertMediaItemsResult);
    -[SDAirDropConvertMediaItemsResult setUrl:](v17, "setUrl:", v16);
    -[SDAirDropConvertMediaItemsResult setConversionNeeded:](v17, "setConversionNeeded:", v9);
    -[SDAirDropConvertMediaItemsResult setConversionDestination:](v17, "setConversionDestination:", v8);
    pthread_mutex_lock(&stru_1007B3120);
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v17);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);
    if (v8)
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v8);
    pthread_mutex_unlock(&stru_1007B3120);
    v49 = 0;
    objc_msgSend(v16, "getResourceValue:forKey:error:", &v49, NSURLIsDirectoryKey, 0);
    v18 = v49;
    if (objc_msgSend(v18, "BOOLValue"))
    {
      v40 = v12;
      v41 = v9;
      v42 = v8;
      v43 = v7;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v54[0] = NSURLIsDirectoryKey;
      v54[1] = NSURLIsReadableKey;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v54, 2));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v16, v20, 7, 0));

      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v22 = v21;
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v46;
        do
        {
          for (i = 0; i != v24; i = (char *)i + 1)
          {
            if (*(_QWORD *)v46 != v25)
              objc_enumerationMutation(v22);
            v27 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
            pthread_mutex_lock(&stru_1007B3120);
            if ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", v27) & 1) == 0)
              objc_msgSend(*(id *)(a1 + 40), "addObject:", v27);
            pthread_mutex_unlock(&stru_1007B3120);
          }
          v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
        }
        while (v24);
      }

      v8 = v42;
      v7 = v43;
      v12 = v40;
      v9 = v41;
    }

    v10 = v44;
  }
  else
  {
    v30 = v12;
    v31 = (const void *)sub_10019B628((const __CFURL *)v7);
    if (v31)
    {
      v32 = v31;
      v33 = sub_10005081C(-6, v31);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      CFRelease(v32);
    }
    else
    {
      v36 = sub_10005081C(-5, 0);
      v35 = objc_claimAutoreleasedReturnValue(v36);
      v34 = v35;
    }
    v12 = v30;
    v37 = airdrop_log(v35);
    v38 = objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      sub_10019A3D0();

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 10;
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v17 = *(SDAirDropConvertMediaItemsResult **)(v39 + 40);
    *(_QWORD *)(v39 + 40) = v34;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100197DEC(_QWORD *a1, void *a2)
{
  NSObject *v3;
  id v4;

  v3 = a1[4];
  v4 = a2;
  dispatch_group_enter(v3);
  +[SDAirDropLegacyHelper convertMediaItemFromURL:forMediaCapabilities:conversionManager:progressHandler:completionHandler:](SDAirDropLegacyHelper, "convertMediaItemFromURL:forMediaCapabilities:conversionManager:progressHandler:completionHandler:", v4, a1[5], a1[6], a1[7], a1[8]);

}

void sub_100197E40(uint64_t a1, void *a2, id obj, void *a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  id v13;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), obj);
  v10 = obj;
  v11 = a5;
  v12 = a4;
  v13 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100197EE8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;

  dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) == 10)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 48);
    v8 = 0;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDAirDropLegacyHelper convertWideGamutToClampedPhotoForURLs:outTmpDirectory:](SDAirDropLegacyHelper, "convertWideGamutToClampedPhotoForURLs:outTmpDirectory:", v2, &v8));
    v4 = v8;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100198064;
    v5[3] = &unk_100719A98;
    v6 = *(id *)(a1 + 48);
    v7 = *(id *)(a1 + 56);
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40));

  }
}

void sub_100198064(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = *(id *)(a1 + 40);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "url", (_QWORD)v15));
        v14 = objc_msgSend(v13, "isEqual:", v5);

        if (v14)
        {
          objc_msgSend(v12, "setUrl:", v6);
          goto LABEL_11;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_10019828C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100198370;
  v15[3] = &unk_100714EF0;
  v16 = v7;
  v10 = *(NSObject **)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v18 = v9;
  v19 = v11;
  v17 = v8;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  dispatch_async(v10, v15);

}

void sub_100198370(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v2 = (_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = objc_msgSend(objc_alloc((Class)PFVideoComplement), "initWithBundleAtURL:", *v2);
    v4 = v3;
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imagePath"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v5));
      v16 = 0;
      objc_msgSend(v6, "getResourceValue:forKey:error:", &v16, NSURLTypeIdentifierKey, 0);
      v7 = v16;

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", -[NSObject isEqual:](v7, "isEqual:", kUTTypeJPEG)));
    }
    else
    {
      v9 = airdrop_log(0);
      v7 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_10019A4AC((uint64_t)v2, v7, v10, v11, v12, v13, v14, v15);
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100198928(uint64_t a1)
{
  id *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  uint64_t v32;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    v5 = airdrop_log(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_10019A514(v2, v6);

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v7 = objc_msgSend(*v2, "backwardsCompatibilityStatus");
    v8 = airdrop_log(v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = v9;
    if (v7 == (id)2)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v32 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Conversion required for %@", buf, 0xCu);
      }

      v12 = *(_QWORD *)(a1 + 80);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "progress"));
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);

      v14 = *(void **)(a1 + 56);
      v15 = *(void **)(a1 + 32);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100198C50;
      v25[3] = &unk_100719B10;
      v26 = v15;
      v27 = *(id *)(a1 + 48);
      v30 = *(id *)(a1 + 72);
      v28 = *(id *)(a1 + 64);
      v29 = *(id *)(a1 + 40);
      objc_msgSend(v14, "enqueueConversionRequest:completionHandler:", v26, v25);

    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v32 = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No conversion needed for %@", buf, 0xCu);
      }

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "fileURL"));
      v18 = v17;
      if (!v17)
        v18 = *(void **)(a1 + 40);
      v19 = v18;

      if (*(_BYTE *)(a1 + 88))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "livePhotoConversionRequest"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "imageConversionRequest"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "source"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v22, "containsHEIFImage")));

      }
      else
      {
        if ((objc_msgSend(*(id *)(a1 + 64), "containsVideoWithFormatEligibleForTranscoding") & 1) != 0)
          v24 = 1;
        else
          v24 = (uint64_t)objc_msgSend(*(id *)(a1 + 64), "containsHEIFImage");
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v24));
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

    }
  }
}

void sub_100198C50(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void *v25;

  if (objc_msgSend(*(id *)(a1 + 32), "status") == (id)4)
  {
    v2 = airdrop_log(4);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destination"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "fileURL"));
      *(_DWORD *)buf = 138412546;
      v23 = v4;
      v24 = 2112;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Converted %@ to %@", buf, 0x16u);

    }
    v7 = *(_QWORD *)(a1 + 64);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destination"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fileURL"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destination"));
    (*(void (**)(uint64_t, void *, void *, _QWORD))(v7 + 16))(v7, v9, v10, 0);

  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "domain"));
    if ((objc_msgSend(v12, "isEqual:", PHMediaFormatConversionErrorDomain) & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      v14 = objc_msgSend(v13, "code");

      if (v14 == (id)2)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "fileURL"));
        (*(void (**)(uint64_t))(v16 + 16))(v16);

        return;
      }
    }
    else
    {

    }
    v17 = airdrop_log(v15);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 40);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      *(_DWORD *)buf = 138412546;
      v23 = v19;
      v24 = 2112;
      v25 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "failed to convert %@ with error %@", buf, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
}

id sub_10019A168()
{
  id *v0;

  if (qword_1007C6BE0 != -1)
    dispatch_once(&qword_1007C6BE0, &stru_100719B58);
  v0 = (id *)dlsym((void *)qword_1007C6BE8, "SFSharablePasswordURLSchemeForAirDrop");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6BD8, *v0);
  off_1007B3160 = (uint64_t (*)())sub_10019A1E0;
  return (id)qword_1007C6BD8;
}

id sub_10019A1E0()
{
  return (id)qword_1007C6BD8;
}

void sub_10019A1EC(id a1)
{
  qword_1007C6BE8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation", 2);
}

void sub_10019A214(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDAirDropClient: CFURLCreateFilePathURL %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10019A27C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLGetFileSystemRepresentation(%@) failed", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019A2DC(uint64_t a1, NSObject *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;

  v4 = *__error();
  v5 = 136315394;
  v6 = a1;
  v7 = 1024;
  v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropClient: realpath(%s) failed with error %d", (uint8_t *)&v5, 0x12u);
  sub_1000332E4();
}

void sub_10019A370()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLCreateFromFileSystemRepresentation(%s) returned NULL", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019A3D0()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_100029230();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "realPathURL returned NULL for file URL %@. Failing transfer with error %@", v2, 0x16u);
  sub_10001949C();
}

void sub_10019A44C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Could not determine if URL is alias: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019A4AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "failed to get a video complement for fileURL:%@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10019A514(id *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "error"));
  sub_100029230();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Conversion preflight failed with error %@", v4, 0xCu);

  sub_1000332E4();
}

void sub_10019A5A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "failed to create temporary directory %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019A600(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10006CFB0((void *)&_mh_execute_header, a3, (uint64_t)a3, "SDAirDropClient: internetLocationFile returned nil", a1);
}

void sub_10019A634(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_10006CFB0((void *)&_mh_execute_header, a3, (uint64_t)a3, "Sending credentials to non-contacts is not permitted", a1);
}

void sub_10019A668()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: copyUserFolder returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A694()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLCopyHostName returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A6C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLCreateWithFileSystemPathRelativeToBase returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A6EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFWriteStreamCreateWithFile returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A718()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFWriteStreamOpen failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A744(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDAirDropClient: CFPropertyListWrite %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10019A7AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Cannot get receiver's public key, no AppleID", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A7D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Cannot get receiver's public key, no cached cert", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Cannot get receiver's public key from cached cert", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019A830(const void *a1)
{
  const __CFAllocator *v2;
  CFDateRef v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  CFErrorRef v7;
  const __CFString *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  __CFData *MutableCopy;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  CFDataRef theData;
  CFErrorRef error;

  error = 0;
  if (sub_10019A9F0((const __CFURL *)a1))
  {
    v2 = CFGetAllocator(a1);
    v3 = CFDateCreate(v2, -534528000.0);
    v4 = CFURLSetResourcePropertyForKey((CFURLRef)a1, kCFURLCreationDateKey, v3, &error);
    if (!(_DWORD)v4)
    {
      v5 = airdrop_log(v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10019D8D8();

      CFRelease(error);
    }
    v7 = v3;
LABEL_17:
    CFRelease(v7);
    return;
  }
  theData = 0;
  v8 = (const __CFString *)_kCFURLFinderInfoKey;
  v9 = CFURLCopyResourcePropertyForKey((CFURLRef)a1, _kCFURLFinderInfoKey, &theData, &error);
  if (!(_DWORD)v9)
  {
    v15 = airdrop_log(v9);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_10019D938();

    v7 = error;
    goto LABEL_17;
  }
  if (theData)
  {
    v10 = CFGetAllocator(a1);
    MutableCopy = CFDataCreateMutableCopy(v10, 0, theData);
    *(_QWORD *)CFDataGetMutableBytePtr(MutableCopy) = 0x4D41435362726F6BLL;
    v12 = CFURLSetResourcePropertyForKey((CFURLRef)a1, v8, MutableCopy, &error);
    if (!(_DWORD)v12)
    {
      v13 = airdrop_log(v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_10019D9C4();

      CFRelease(error);
    }
    CFRelease(MutableCopy);
    v7 = theData;
    goto LABEL_17;
  }
  v17 = airdrop_log(v9);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    sub_10019D998();

}

BOOL sub_10019A9F0(const __CFURL *a1)
{
  BOOL v1;
  CFBooleanRef propertyValueTypeRefPtr;

  propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsDirectoryKey, &propertyValueTypeRefPtr, 0))
    v1 = propertyValueTypeRefPtr == 0;
  else
    v1 = 1;
  return !v1 && CFBooleanGetValue(propertyValueTypeRefPtr) != 0;
}

id sub_10019AA4C(signed int a1)
{
  void *v1;
  char v3[8];
  uint64_t v4;

  if (a1 < 1)
  {
    v1 = 0;
  }
  else
  {
    *(_QWORD *)v3 = 0;
    v4 = 0;
    if_indextoname(a1, v3);
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  }
  return v1;
}

dispatch_time_t sub_10019AAC0(double a1)
{
  return dispatch_time(0, (uint64_t)(a1 * 1000000000.0));
}

NSObject *sub_10019AAD8(int a1, NSObject *a2, void *a3)
{
  id v5;
  NSObject *v6;
  int64_t v7;
  dispatch_time_t v8;

  v5 = a3;
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
  if (a1)
    v7 = 0;
  else
    v7 = 2147483647000000000;
  v8 = dispatch_time(0, v7);
  dispatch_source_set_timer(v6, v8, 0x1DCD64FFC4653600uLL, 0);
  dispatch_source_set_event_handler(v6, v5);

  return v6;
}

void sub_10019AB78(NSObject *a1, dispatch_time_t a2)
{
  if (a1)
    dispatch_source_set_timer(a1, a2, 0x1DCD64FFC4653600uLL, 0);
}

dispatch_queue_global_t sub_10019AB98()
{
  return dispatch_get_global_queue(0, 0);
}

uint64_t sub_10019ABA4()
{
  pthread_mutex_lock(&stru_1007B3168);
  --dword_1007D7F40;
  return pthread_mutex_unlock(&stru_1007B3168);
}

void sub_10019ABE0(__CFDictionary *a1, const void *a2, const void *a3)
{
  sub_1000CDC74(a1, a2, a3);
  if (a3)
    CFRelease(a3);
}

CFNumberRef sub_10019AC14(const __CFAllocator *a1, CFStringRef theString)
{
  uint64_t valuePtr;
  char buffer[16];
  __int128 v6;

  if (!theString)
    return 0;
  *(_OWORD *)buffer = 0u;
  v6 = 0u;
  if (!CFStringGetCString(theString, buffer, 32, 0x8000100u))
    return 0;
  valuePtr = strtoll(buffer, 0, 0);
  return CFNumberCreate(a1, kCFNumberSInt64Type, &valuePtr);
}

__CFArray *sub_10019ACBC(const void *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  const __CFURL *i;
  CFStringRef v5;
  CFStringRef v6;
  int v7;
  uint64_t Count;
  __CFArray *v9;
  unint64_t v10;
  const void *ValueAtIndex;

  v2 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v2, 0, &kCFTypeArrayCallBacks);
  for (i = CFURLCopyAbsoluteURL((CFURLRef)a1); ; i = CFURLCreateCopyDeletingLastPathComponent(v2, i))
  {
    CFArrayAppendValue(Mutable, i);
    CFRelease(i);
    v5 = CFURLCopyFileSystemPath(i, kCFURLPOSIXPathStyle);
    if (v5)
    {
      v6 = v5;
      v7 = CFEqual(v5, CFSTR("/"));
      CFRelease(v6);
      if (v7)
        break;
    }
  }
  Count = CFArrayGetCount(Mutable);
  v9 = CFArrayCreateMutable(v2, Count, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    v10 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v10 - 2);
      CFArrayAppendValue(v9, ValueAtIndex);
      --v10;
    }
    while (v10 > 1);
  }
  CFRelease(Mutable);
  return v9;
}

CFTypeRef sub_10019ADCC(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  const __CFAllocator *v4;
  const __CFURL *ValueAtIndex;
  CFURLRef PathComponent;
  CFTypeRef v7;
  CFIndex i;
  __CFArray *v9;
  const void *v10;
  __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  CFIndex v15;
  const void *v16;
  const void *v17;
  const void *v18;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = CFGetAllocator(a1);
  ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, 0);
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(v4, ValueAtIndex);
  v7 = PathComponent;
  if (v3 != 1 && PathComponent)
  {
    for (i = 1; i != v3; ++i)
    {
      v9 = sub_10019ACBC(v7);
      v10 = CFArrayGetValueAtIndex(a1, i);
      v11 = sub_10019ACBC(v10);
      v12 = CFArrayGetCount(v9);
      v13 = CFArrayGetCount(v11);
      if (v12 >= v13)
        v14 = v13;
      else
        v14 = v12;
      if (v14 >= 1)
      {
        v15 = 0;
        while (1)
        {
          v16 = CFArrayGetValueAtIndex(v9, v15);
          v17 = CFArrayGetValueAtIndex(v11, v15);
          if (!CFEqual(v16, v17))
            break;
          if (v14 == ++v15)
          {
            v15 = v14;
            break;
          }
        }
        if (v15)
        {
          CFRelease(v7);
          v18 = CFArrayGetValueAtIndex(v11, v15 - 1);
          v7 = CFRetain(v18);
        }
      }
      CFRelease(v9);
      CFRelease(v11);
    }
  }
  return v7;
}

void *sub_10019AF1C(const void *a1, const __CFURL *a2)
{
  const __CFAllocator *v4;
  CFMutableStringRef Mutable;
  __CFArray *v6;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  CFStringRef PathComponent;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const __CFString *ValueAtIndex;
  CFIndex v18;
  const __CFString *v19;
  void *v20;
  const __CFURL *v22;
  const __CFURL *v23;
  CFStringRef v24;

  v4 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v4, 0);
  v6 = CFArrayCreateMutable(v4, 0, &kCFTypeArrayCallBacks);
  v7 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  v8 = CFURLCopyFileSystemPath((CFURLRef)a1, kCFURLPOSIXPathStyle);
  v9 = v8;
  if (v7 && v8)
  {
    v10 = (const __CFString *)CFRetain(v8);
    if (CFEqual(v10, v7))
    {
      v11 = v10;
LABEL_5:
      v12 = v11;
      goto LABEL_9;
    }
    while (1)
    {
      v22 = sub_10019B118(v10);
      if (v22)
      {
        v23 = v22;
        CFArrayAppendValue(v6, v22);
        CFRelease(v23);
      }
      v24 = sub_10019B164(v10);
      if (!v24)
        break;
      v11 = v24;
      if (CFEqual(v24, CFSTR("/")))
      {
        CFRelease(v11);
        break;
      }
      CFRelease(v10);
      v10 = v11;
      if (CFEqual(v11, v7))
        goto LABEL_5;
    }
LABEL_8:
    v12 = v10;
LABEL_9:
    CFRelease(v12);
    goto LABEL_10;
  }
  PathComponent = CFURLCopyLastPathComponent((CFURLRef)a1);
  if (PathComponent)
  {
    v10 = PathComponent;
    CFArrayAppendValue(v6, PathComponent);
    goto LABEL_8;
  }
LABEL_10:
  CFArrayAppendValue(v6, CFSTR("."));
  Count = CFArrayGetCount(v6);
  v15 = Count - 1;
  if (Count >= 1)
  {
    v16 = Count;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v15);
    CFStringAppend(Mutable, ValueAtIndex);
    if (v15)
    {
      v18 = v16 - 2;
      do
      {
        CFStringAppend(Mutable, CFSTR("/"));
        v19 = (const __CFString *)CFArrayGetValueAtIndex(v6, v18);
        CFStringAppend(Mutable, v19);
        --v18;
      }
      while (v18 != -1);
    }
  }
  v20 = sub_10019B1EC(Mutable);
  CFRelease(v6);
  CFRelease(Mutable);
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  return v20;
}

const __CFURL *sub_10019B118(const __CFString *a1)
{
  const __CFAllocator *v2;
  const __CFURL *result;
  const __CFURL *v4;
  CFStringRef PathComponent;

  v2 = CFGetAllocator(a1);
  result = CFURLCreateWithFileSystemPath(v2, a1, kCFURLPOSIXPathStyle, 0);
  if (result)
  {
    v4 = result;
    PathComponent = CFURLCopyLastPathComponent(result);
    CFRelease(v4);
    return (const __CFURL *)PathComponent;
  }
  return result;
}

CFStringRef sub_10019B164(const __CFString *a1)
{
  const __CFAllocator *v2;
  const __CFURL *v3;
  const __CFURL *v4;
  const __CFURL *PathComponent;
  const __CFURL *v6;
  CFStringRef v7;

  v2 = CFGetAllocator(a1);
  v3 = CFURLCreateWithFileSystemPath(v2, a1, kCFURLPOSIXPathStyle, 0);
  if (!v3)
    return 0;
  v4 = v3;
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(v2, v3);
  if (PathComponent)
  {
    v6 = PathComponent;
    v7 = CFURLCopyFileSystemPath(PathComponent, kCFURLPOSIXPathStyle);
    CFRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v4);
  return v7;
}

void *sub_10019B1EC(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  void *v4;

  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = malloc_type_malloc(v3, 0x64F17C99uLL);
  if (!CFStringGetCString(a1, (char *)v4, v3, 0x8000100u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

id sub_10019B264(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "aa_primaryAppleAccount"));

  return v2;
}

id sub_10019B308(void *a1)
{
  id v1;
  id v2;
  CC_LONG v3;
  __int128 v5;

  if (a1)
  {
    v1 = objc_retainAutorelease(a1);
    v2 = objc_msgSend(v1, "bytes", 0, 0, 0, 0);
    v3 = objc_msgSend(v1, "length");

    CC_SHA256(v2, v3, (unsigned __int8 *)&v5);
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v5, 32));
  }
  return a1;
}

id sub_10019B3B8(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;

  if (a1)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dataUsingEncoding:", 4));
    v2 = v1;
    if (v1)
    {
      v3 = sub_10019B308(v1);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id sub_10019B410(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = sub_10019B308(a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    v3 = v2;
    if (v2)
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "base64EncodedStringWithOptions:", 0));
    else
      v4 = 0;

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t sub_10019B468(const __CFString *a1)
{
  const __CFAllocator *v2;
  CFDataRef ExternalRepresentation;
  CFDataRef v4;
  id v5;
  uint64_t v6;

  v2 = CFGetAllocator(a1);
  ExternalRepresentation = CFStringCreateExternalRepresentation(v2, a1, 0x8000100u, 0);
  if (!ExternalRepresentation)
    return 0;
  v4 = ExternalRepresentation;
  v5 = sub_10019B410(ExternalRepresentation);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  CFRelease(v4);
  return v6;
}

void *sub_10019B4C4(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;
  const __CFString *v3;
  const __CFString *v4;
  void *v5;

  if (!a1)
    return 0;
  v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  if (v3)
  {
    v4 = v3;
    v5 = sub_10019B1EC(v3);
    CFRelease(v4);
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

uint64_t sub_10019B530(const __CFURL *a1, _OWORD *a2)
{
  BOOL v4;
  uint64_t result;
  __int128 v6;
  _OWORD v7[2];
  CFBooleanRef propertyValueTypeRefPtr;

  propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsReadableKey, &propertyValueTypeRefPtr, 0))
    v4 = propertyValueTypeRefPtr == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  result = CFBooleanGetValue(propertyValueTypeRefPtr);
  if ((_DWORD)result)
  {
    -[__CFURL fileSystemRepresentation](objc_retainAutorelease(a1), "fileSystemRepresentation");
    v6 = a2[1];
    v7[0] = *a2;
    v7[1] = v6;
    return sandbox_check_by_audit_token(v7, "file-read-data", 1) == 0;
  }
  return result;
}

BOOL sub_10019B5CC(const __CFURL *a1)
{
  BOOL v1;
  CFBooleanRef propertyValueTypeRefPtr;

  propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsWritableKey, &propertyValueTypeRefPtr, 0))
    v1 = propertyValueTypeRefPtr == 0;
  else
    v1 = 1;
  return !v1 && CFBooleanGetValue(propertyValueTypeRefPtr) != 0;
}

uint64_t sub_10019B628(const __CFURL *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v5;
  CFErrorRef error;

  v5 = 0;
  error = 0;
  v1 = CFURLCopyResourcePropertyForKey(a1, kCFURLLocalizedNameKey, &v5, &error);
  if (!(_DWORD)v1)
  {
    v2 = daemon_log(v1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10019DA84();

    CFRelease(error);
  }
  return v5;
}

id sub_10019B6A0()
{
  void *v0;
  void *v1;

  v0 = (void *)SFNodeCopyProtocols();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "firstObject"));

  return v1;
}

id sub_10019B6D4(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSFileAttributeKey v29;
  NSFileProtectionType v30;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, v3, 1, a2));

  v7 = daemon_log(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_10019DC04();

  if (v5)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));

    v12 = objc_retainAutorelease(v11);
    v13 = objc_msgSend(v12, "UTF8String");
    if (!v13
      || (v14 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:](NSURL, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v13, 1, v5))) == 0)
    {
      v22 = 0;
      if (a2)
        *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 12, 0));
      goto LABEL_27;
    }
    v15 = (void *)v14;
    v29 = NSFileProtectionKey;
    v30 = NSFileProtectionCompleteUntilFirstUserAuthentication;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "absoluteURL"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v19 = objc_msgSend(v18, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v17, 0, v16, a2);

    if (v19)
    {
      v21 = v17;
      v22 = v21;
      if (!a2 || v21)
        goto LABEL_26;
      v23 = daemon_log(0);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_10019DB44();
    }
    else
    {
      if (!a2 || *a2)
      {
        v22 = 0;
LABEL_26:

LABEL_27:
        goto LABEL_28;
      }
      v27 = daemon_log(v20);
      v24 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_10019DBA4();
    }

    v22 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 12, 0));
    goto LABEL_26;
  }
  if (a2 && !*a2)
  {
    v25 = daemon_log(v9);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_10019DAE4();

    v22 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 12, 0));
  }
  else
  {
    v22 = 0;
  }
LABEL_28:

  return v22;
}

id sub_10019BA08()
{
  NSArray *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v13;

  v0 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "firstObject"));

  if (!v2)
  {
    v11 = daemon_log(v3);
    v10 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10019DC70();
    v7 = 0;
    v4 = 0;
    goto LABEL_8;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("Sharing")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v13 = 0;
  v6 = objc_msgSend(v5, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v4, 1, 0, &v13);
  v7 = v13;

  if ((v6 & 1) == 0)
  {
    v9 = daemon_log(v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_10019DC9C();
LABEL_8:

  }
  return v4;
}

void sub_10019BB20(void *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;

  v1 = a1;
  sub_10019BB74(v1, 0);
  v2 = (const __CFURL *)objc_claimAutoreleasedReturnValue(-[__CFURL URLByDeletingLastPathComponent](v1, "URLByDeletingLastPathComponent"));

  sub_10019BB74(v2, 0);
}

BOOL sub_10019BB74(const __CFURL *a1, _QWORD *a2)
{
  int v4;
  UInt8 buffer[1024];

  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    if (!removefile((const char *)buffer, 0, 1u))
    {
      v4 = 0;
      return v4 == 0;
    }
    v4 = *__error();
    if (!a2)
      return v4 == 0;
  }
  else
  {
    v4 = 2;
    if (!a2)
      return v4 == 0;
  }
  if (v4)
  {
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v4, 0));
    v4 = 1;
  }
  return v4 == 0;
}

CFURLRef sub_10019BC64(const __CFAllocator *a1, int a2)
{
  size_t v4;
  uint64_t v6;
  NSObject *v7;
  char __s[1024];

  bzero(__s, 0x400uLL);
  if (confstr(a2, __s, 0x400uLL))
  {
    v4 = strlen(__s);
    return CFURLCreateFromFileSystemRepresentation(a1, (const UInt8 *)__s, v4, 1u);
  }
  else
  {
    v6 = daemon_log(0);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10019DCC8(a2, v7);

    return 0;
  }
}

id sub_10019BD30()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v0 = SFAirDropDownloadsURL();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = v1;
  if (v1)
    v3 = v1;

  return v2;
}

BOOL sub_10019BD64(const __CFURL *a1, _QWORD *a2)
{
  int v4;
  int v5;
  UInt8 buffer[1024];

  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    if (CFURLHasDirectoryPath(a1))
    {
      if (mkdir((const char *)buffer, 0x180u) < 0)
      {
LABEL_10:
        v4 = *__error();
        if (!a2)
          return v4 == 0;
        goto LABEL_11;
      }
    }
    else
    {
      v5 = open((const char *)buffer, 2564, 384);
      if (v5 < 0)
        goto LABEL_10;
      close(v5);
    }
    sub_10019A830(a1);
    v4 = 0;
    return v4 == 0;
  }
  v4 = 2;
  if (!a2)
    return v4 == 0;
LABEL_11:
  if (v4)
  {
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v4, 0));
    v4 = 1;
  }
  return v4 == 0;
}

BOOL sub_10019BE84(const __CFURL *a1, const __CFURL *a2, _QWORD *a3)
{
  std::error_code *v6;
  int v7;
  int v8;
  std::__fs::filesystem::path v10[42];
  std::__fs::filesystem::path buffer[42];

  bzero(buffer, 0x400uLL);
  bzero(v10, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024)
    && CFURLGetFileSystemRepresentation(a2, 1u, (UInt8 *)v10, 1024))
  {
    rename(buffer, v10, v6);
    if (!v7)
    {
      v8 = 0;
      return v8 == 0;
    }
    v8 = *__error();
    if (!a3)
      return v8 == 0;
  }
  else
  {
    v8 = 2;
    if (!a3)
      return v8 == 0;
  }
  if (v8)
  {
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v8, 0));
    v8 = 1;
  }
  return v8 == 0;
}

id sub_10019BF98(void *a1)
{
  id v1;
  NSMutableArray *v2;
  id v3;
  __CFString *v4;
  const __CFString *PreferredIdentifierForTag;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  void *v8;
  id v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int64_t v15;
  void *v16;
  void *v17;
  int v18;
  float v19;
  BOOL v20;
  BOOL v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  uint64_t v27;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  v1 = a1;
  v2 = objc_opt_new(NSMutableArray);
  v3 = objc_msgSend(v1, "copy");
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pathExtension"));
  if ((-[__CFString isEqualToString:](v4, "isEqualToString:", &stru_10072FE60) & 1) == 0)
  {
    while (1)
    {
      PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v4, 0);
      v6 = UTTypeCopyDeclaration(PreferredIdentifierForTag);
      if (!v6)
        break;
      v7 = v6;
      -[NSMutableArray addObject:](v2, "addObject:", v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByDeletingPathExtension"));

      CFRelease(v7);
      CFRelease(PreferredIdentifierForTag);

      v4 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pathExtension"));
      v3 = v8;
      if (-[__CFString isEqualToString:](v4, "isEqualToString:", &stru_10072FE60))
        goto LABEL_7;
    }
    CFRelease(PreferredIdentifierForTag);
  }
  v8 = v3;
LABEL_7:

  v9 = objc_msgSend(v8, "mutableCopy");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  v11 = objc_msgSend(v9, "rangeOfCharacterFromSet:options:", v10, 4);
  v13 = v12;

  if (v13)
  {
    v14 = objc_msgSend(v9, "length");
    v15 = v14 - v11;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v11, v14 - v11));
    v17 = v16;
    if (v16
      && (v18 = objc_msgSend(v16, "intValue"), objc_msgSend(v17, "floatValue"), v18)
      && (v19 == (float)v18 ? (v20 = v18 == -2147483647) : (v20 = 1), !v20 ? (v21 = v18 == 0x7FFFFFFF) : (v21 = 1), !v21))
    {
      objc_msgSend(v9, "deleteCharactersInRange:", v11, v15);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" %ld"), v18 + 1));
      objc_msgSend(v9, "appendString:", v29);

    }
    else
    {
      objc_msgSend(v9, "appendString:", CFSTR(" 2"));
    }

  }
  else
  {
    objc_msgSend(v9, "appendString:", CFSTR(" 2"));
  }
  if (-[NSMutableArray count](v2, "count"))
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray reverseObjectEnumerator](v2, "reverseObjectEnumerator"));
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v24; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v25)
            objc_enumerationMutation(v22);
          v27 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v9, "appendString:", CFSTR("."));
          objc_msgSend(v9, "appendString:", v27);
        }
        v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v24);
    }

  }
  return v9;
}

id sub_10019C2B8(void *a1, void *a2, _BYTE *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  void *i;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  void *v41;
  char v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  _BYTE *v47;
  id v48;
  _QWORD *v49;
  char v50;
  id obj;
  void *v52;
  uint64_t v53;
  id v54;
  id v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  id v60;
  uint8_t buf[4];
  id v62;
  __int16 v63;
  void *v64;
  _BYTE v65[128];

  v7 = a1;
  v8 = a2;
  v9 = daemon_log(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v62 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Saving files to %@", buf, 0xCu);
    }

    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "path"));
    v14 = objc_msgSend(v12, "fileExistsAtPath:", v13);

    if ((v14 & 1) == 0)
    {
      v60 = 0;
      v15 = objc_msgSend(v12, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v8, 1, 0, &v60);
      v16 = v60;
      v17 = v16;
      if ((v15 & 1) == 0)
      {
        v44 = daemon_log(v16);
        v45 = objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          sub_10019DDB0();

        if (a4)
        {
          v17 = objc_retainAutorelease(v17);
          v42 = 0;
          *a4 = v17;
        }
        else
        {
          v42 = 0;
        }
LABEL_46:

        if (a3)
          *a3 = v42 & 1;
        v43 = objc_msgSend(v52, "copy");

        goto LABEL_49;
      }

    }
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v17 = v7;
    v54 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
    if (v54)
    {
      v49 = a4;
      v47 = a3;
      v48 = v7;
      v53 = *(_QWORD *)v57;
      v50 = 1;
      obj = v17;
      do
      {
        for (i = 0; i != v54; i = (char *)i + 1)
        {
          if (*(_QWORD *)v57 != v53)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent", v47, v48));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "URLByAppendingPathComponent:", v20));

          v55 = 0;
          v22 = objc_msgSend(v12, "moveItemAtURL:toURL:error:", v19, v21, &v55);
          v23 = v55;
          v24 = v23;
          if ((v22 & 1) != 0)
          {
LABEL_13:
            v25 = daemon_log(v23);
            v26 = objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent"));
              v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "lastPathComponent"));
              *(_DWORD *)buf = 138412546;
              v62 = v40;
              v63 = 2112;
              v64 = v41;
              _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "SDMoveFilesToFolder moved '%@' to folder as '%@'", buf, 0x16u);

            }
            objc_msgSend(v52, "addObject:", v21);
          }
          else
          {
            while (1)
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "domain"));
              if (!objc_msgSend(v27, "isEqual:", NSCocoaErrorDomain))
                break;
              v28 = objc_msgSend(v24, "code");

              if (v28 != (id)516)
                goto LABEL_22;
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "lastPathComponent"));
              v31 = sub_10019BF98(v30);
              v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
              v33 = objc_msgSend(v30, "isEqual:", v32);
              if ((_DWORD)v33)
              {
                v38 = daemon_log(v33);
                v39 = objc_claimAutoreleasedReturnValue(v38);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v62 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Failed to move item to folder. Could not resolve name conflict. Error: %@", buf, 0xCu);
                }

                if (v49)
                  *v49 = objc_retainAutorelease(v24);

                goto LABEL_31;
              }
              v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "URLByAppendingPathComponent:", v32));

              v55 = 0;
              v35 = objc_msgSend(v12, "moveItemAtURL:toURL:error:", v19, v34, &v55);
              v23 = v55;
              v24 = v23;
              v21 = (void *)v34;
              if ((v35 & 1) != 0)
                goto LABEL_13;
            }

LABEL_22:
            v36 = daemon_log(v29);
            v37 = objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v62 = v24;
              _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to move item to folder. Error: %@", buf, 0xCu);
            }

            if (v49)
            {
              v24 = objc_retainAutorelease(v24);
              v50 = 0;
              *v49 = v24;
              goto LABEL_32;
            }
LABEL_31:
            v50 = 0;
          }
LABEL_32:

        }
        v17 = obj;
        v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
      }
      while (v54);
      a3 = v47;
      v7 = v48;
      v42 = v50;
    }
    else
    {
      v42 = 1;
    }
    goto LABEL_46;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    sub_10019DD84();

  if (a3)
    *a3 = 0;
  v43 = &__NSArray0__struct;
LABEL_49:

  return v43;
}

BOOL sub_10019C838(const __CFURL *a1, const __CFURL *a2, id *a3)
{
  _BOOL8 v4;
  _BOOL8 v5;
  void *v6;
  unsigned int v7;

  v4 = sub_10019BE84(a1, a2, a3);
  v5 = v4;
  if (a3)
  {
    if (!v4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a3, "domain"));
      v7 = objc_msgSend(v6, "isEqual:", NSPOSIXErrorDomain);

      if (v7)
        objc_msgSend(*a3, "code");
    }
  }
  return v5;
}

__CFString *sub_10019C8A4(void *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  __CFString *v10;
  _BYTE v12[136];
  unsigned __int8 v13[3976];

  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = (char *)sub_10019B4C4(v1)) != 0)
  {
    v4 = v3;
    bzero(v12, 0x1010uLL);
    v5 = fsctl(v4, 0xD0107A0CuLL, v12, 0);
    if ((_DWORD)v5)
    {
      v7 = v5;
      v8 = browser_log(v5, v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_10019DE2C(v7, v9);

      v10 = 0;
    }
    else
    {
      v10 = (__CFString *)CFStringCreateWithPascalString(0, v13, 0x8000100u);
    }
    free(v4);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_10019C9C8(void *a1)
{
  unsigned __int8 v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v9;
  id v10;

  v10 = 0;
  v9 = 0;
  v1 = objc_msgSend(a1, "getResourceValue:forKey:error:", &v10, NSURLVolumeNameKey, &v9);
  v2 = v10;
  v3 = v9;
  v5 = v3;
  if ((v1 & 1) == 0)
  {
    v6 = browser_log(v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10019DEC8();

  }
  return v2;
}

BOOL sub_10019CA64()
{
  const __CFBoolean *v0;
  int v1;
  const CFBooleanRef *v2;

  v0 = (const __CFBoolean *)qword_1007C6BF0;
  if (!qword_1007C6BF0)
  {
    v1 = sub_1000CE8D0(CFSTR("DisableAWDL"), 0);
    v2 = &kCFBooleanTrue;
    if (!v1)
      v2 = &kCFBooleanFalse;
    v0 = *v2;
    qword_1007C6BF0 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0) != 0;
}

id sub_10019CAC4(void *a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lowercaseString"));
  v4 = v3;
  if (a2
    && ((objc_msgSend(v3, "hasSuffix:", CFSTR("@me.com")) & 1) != 0
     || objc_msgSend(v4, "hasSuffix:", CFSTR("@mac.com"))))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("@")));
    if (objc_msgSend(v5, "count"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@@icloud.com"), v6));

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = v4;
  }

  return v7;
}

id sub_10019CBA4(void *a1)
{
  id v1;
  void *active;
  void *v3;
  uint64_t v4;
  const void *v5;
  uint64_t String;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  active = (void *)CPPhoneNumberCopyActiveCountryCode();
  v3 = (void *)PNCopyBestGuessNormalizedNumberForCountry(v1, active);

  if (v3)
  {
    v4 = CFPhoneNumberCreate(0, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), active);
    if (v4)
    {
      v5 = (const void *)v4;
      String = CFPhoneNumberCreateString(0, v4, 2);
      if (String)
      {
        v7 = (void *)String;
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("+")));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByTrimmingCharactersInSet:", v8));

      }
      else
      {
        v9 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      v9 = 0;
    }
    free(v3);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t sub_10019CC9C(const __CFString *a1, uint64_t a2)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  CFTypeID v5;
  CFTypeID v6;
  CFTypeID TypeID;
  SInt32 IntValue;
  unsigned int valuePtr;

  v2 = a2;
  valuePtr = a2;
  v3 = (const __CFString *)sub_1000CE9F0(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
        if ((valuePtr & 0x80000000) == 0)
        {
LABEL_10:
          CFRelease(v4);
          return valuePtr;
        }
      }
      else
      {
        valuePtr = v2;
        if ((v2 & 0x80000000) == 0)
          goto LABEL_10;
      }
    }
    else
    {
      v6 = CFGetTypeID(v4);
      TypeID = CFStringGetTypeID();
      IntValue = v2;
      if (v6 == TypeID)
      {
        IntValue = CFStringGetIntValue(v4);
        valuePtr = IntValue;
      }
      if ((IntValue & 0x80000000) == 0)
        goto LABEL_10;
    }
    valuePtr = v2;
    goto LABEL_10;
  }
  return v2;
}

id sub_10019CD60(void *a1)
{
  _xpc_connection_s *v1;
  __SecTask *v2;
  __SecTask *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  unsigned int v7;
  _BOOL4 v9;
  id v11;
  uint64_t pid;
  uint64_t v13;
  NSObject *v14;
  audit_token_t v16[2];

  v1 = a1;
  memset(&v16[1], 0, sizeof(audit_token_t));
  xpc_connection_get_audit_token();
  v16[0] = v16[1];
  v2 = SecTaskCreateWithAuditToken(0, v16);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)SecTaskCopyValueForEntitlement(v2, CFSTR("application-identifier"), 0);
    if (v4)
    {
      v5 = v4;
      if ((unint64_t)objc_msgSend(v4, "length") < 0xB
        || objc_msgSend(v5, "characterAtIndex:", 10) != 46)
      {
        goto LABEL_19;
      }
      v6 = 0;
      do
      {
        v7 = objc_msgSend(v5, "characterAtIndex:", v6);
        v9 = v7 - 65 < 0x1A || v7 - 48 < 0xA;
      }
      while (v9 && v6++ < 9);
      if (!v9
        || (v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringWithRange:", 11, (char *)objc_msgSend(v5, "length") - 11))) == 0)
      {
LABEL_19:
        v11 = v5;
      }

    }
    else
    {
      v11 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    pid = xpc_connection_get_pid(v1);
    v13 = daemon_log(pid);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_10019DF28(pid, v14);

    v11 = 0;
  }

  return v11;
}

const __CFString *sub_10019CEB4()
{
  const __CFString *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v9;
  const char *CStringPtr;

  v0 = (const __CFString *)CFPreferencesCopyValue(CFSTR("StreamID"), kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (!v0)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "UUIDString"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "substringWithRange:", 24, 12));
    v0 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lowercaseString"));

    CFPreferencesSetValue(CFSTR("StreamID"), v0, kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
    v4 = CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
    v6 = streams_log(v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315138;
      CStringPtr = CFStringGetCStringPtr(v0, 0x600u);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Created new Stream ID (%s)", (uint8_t *)&v9, 0xCu);
    }

  }
  return v0;
}

uint64_t sub_10019D034()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _BOOL4 v4;
  const char *v5;
  size_t v6;
  ifaddrs *v7;
  const char *ifa_name;
  ifaddrs *v9;
  ifaddrs *v11;

  v11 = 0;
  v0 = getifaddrs(&v11);
  if ((_DWORD)v0)
  {
    v1 = airdrop_log(v0);
    v2 = objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10019DFC8();

    return 0;
  }
  else
  {
    v4 = sub_10019CA64();
    if (v4)
      v5 = "en0";
    else
      v5 = "awdl0";
    if (v4)
      v6 = 3;
    else
      v6 = 5;
    v7 = v11;
    if (v11)
    {
      v3 = 0;
      do
      {
        if (v7->ifa_addr->sa_family == 30)
        {
          ifa_name = v7->ifa_name;
          if (!strncasecmp(ifa_name, v5, v6))
            v3 = if_nametoindex(ifa_name);
        }
        v7 = v7->ifa_next;
      }
      while (v7);
      v9 = v11;
    }
    else
    {
      v9 = 0;
      v3 = 0;
    }
    freeifaddrs(v9);
  }
  return v3;
}

__CFString *sub_10019D12C(const __CFString *a1)
{
  const __CFAllocator *v2;
  CFIndex Length;
  __CFString *MutableCopy;

  v2 = CFGetAllocator(a1);
  Length = CFStringGetLength(a1);
  MutableCopy = CFStringCreateMutableCopy(v2, Length, a1);
  CFStringTrim(MutableCopy, CFSTR("."));
  return MutableCopy;
}

CFMutableStringRef sub_10019D17C(const __CFAllocator *a1, CFStringRef theString)
{
  CFMutableStringRef MutableCopy;
  CFRange v4;
  CFRange v5;

  MutableCopy = CFStringCreateMutableCopy(a1, 0, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("\\"), CFSTR("\\\\"), v4, 0);
  v5.length = CFStringGetLength(MutableCopy);
  v5.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("."), CFSTR("\\."), v5, 0);
  return MutableCopy;
}

__CFString *sub_10019D1FC(void *a1, void *a2, void *a3, int a4)
{
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  CFMutableStringRef v13;
  CFMutableStringRef v14;
  __CFString *v15;
  char fullName[1009];
  char domain[1009];
  char regtype[1009];
  _OWORD buffer[4];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  v11 = 0;
  if (v7 && v8 && v9)
  {
    memset(buffer, 0, sizeof(buffer));
    if (!CFStringGetCString(v7, (char *)buffer, 64, 0x8000100u))
      goto LABEL_8;
    bzero(regtype, 0x3F1uLL);
    if (!CFStringGetCString(v8, regtype, 1009, 0x8000100u))
      goto LABEL_8;
    bzero(domain, 0x3F1uLL);
    if (!CFStringGetCString(v10, domain, 1009, 0x8000100u))
      goto LABEL_8;
    bzero(fullName, 0x3F1uLL);
    if (DNSServiceConstructFullName(fullName, (const char *const)buffer, regtype, domain))
      goto LABEL_8;
    if (!a4)
    {
      v11 = (__CFString *)CFStringCreateWithCString(0, fullName, 0x8000100u);
      goto LABEL_9;
    }
    v13 = sub_10019D17C(0, v7);
    if (v13)
    {
      v14 = v13;
      v15 = sub_10019D12C(v10);
      v11 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("%@.%@%@"), v14, v8, v15);
      CFRelease(v15);
      CFRelease(v14);
    }
    else
    {
LABEL_8:
      v11 = 0;
    }
  }
LABEL_9:

  return v11;
}

__CFString *sub_10019D3BC(uint64_t a1)
{
  __CFNetService *v1;
  __CFNetService *v2;
  const __CFString *Domain;
  CFIndex Length;
  __CFString *MutableCopy;

  v1 = (__CFNetService *)_CFNetServiceCreateFromURL(0, a1);
  if (v1)
  {
    v2 = v1;
    Domain = CFNetServiceGetDomain(v1);
    Length = CFStringGetLength(Domain);
    MutableCopy = CFStringCreateMutableCopy(0, Length, Domain);
    CFStringLowercase(MutableCopy, 0);
    CFStringTrim(MutableCopy, CFSTR("."));
    CFRelease(v2);
  }
  else
  {
    MutableCopy = 0;
  }
  return MutableCopy;
}

id sub_10019D434(uint64_t a1)
{
  __CFString *v1;
  void *v2;
  id v3;

  v1 = sub_10019D3BC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("local"));

  return v3;
}

__CFDictionary *sub_10019D474(unsigned int a1, const UInt8 *a2)
{
  __CFDictionary *Mutable;
  CFStringRef v5;
  const __CFString *v6;
  __CFArray *v7;
  CFIndex Length;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  int CharacterAtIndex;
  char v13;
  uint64_t v14;
  CFStringRef v15;
  CFStringRef v16;
  CFStringRef v17;
  CFStringRef v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFRange v23;
  CFStringRef v24;
  const __CFString *v25;
  CFIndex v26;
  const __CFString *v27;
  const __CFString *v28;
  CFMutableStringRef MutableCopy;
  CFRange v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;

  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    v5 = CFStringCreateWithBytes(0, a2, a1, 0x8000100u, 0);
    if (v5)
    {
      v6 = v5;
      v7 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      Length = CFStringGetLength(v6);
      v9 = Length - 1;
      if (Length < 1)
      {
        v10 = Length - 1;
      }
      else
      {
        v10 = Length - 1;
        do
        {
          v11 = v9;
          CharacterAtIndex = CFStringGetCharacterAtIndex(v6, v9--);
          if (CharacterAtIndex == 44)
          {
            if (v11 < 1)
              goto LABEL_12;
            v13 = 0;
            v14 = v11;
            while (CFStringGetCharacterAtIndex(v6, --v14) == 92)
            {
              ++v13;
              if (v14 <= 0)
              {
                v13 = v11;
                break;
              }
            }
            if ((v13 & 1) == 0)
            {
LABEL_12:
              v31.location = v11 + 1;
              v31.length = v10 - v11;
              v15 = CFStringCreateWithSubstring(0, v6, v31);
              v10 = v9;
              if (v15)
              {
                v16 = v15;
                CFArrayAppendValue(v7, v15);
                CFRelease(v16);
                v10 = v9;
              }
            }
          }
        }
        while (v11 > 0);
        v9 = -1;
      }
      v32.location = v9 + 1;
      v32.length = v10 - v9;
      v17 = CFStringCreateWithSubstring(0, v6, v32);
      if (v17)
      {
        v18 = v17;
        CFArrayAppendValue(v7, v17);
        CFRelease(v18);
      }
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v20 = Count;
        for (i = 0; i != v20; ++i)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, i);
          v23 = CFStringFind(ValueAtIndex, CFSTR("="), 0);
          if (v23.length >= 1)
          {
            v33.location = 0;
            v33.length = v23.location;
            v24 = CFStringCreateWithSubstring(0, ValueAtIndex, v33);
            if (v24)
            {
              v25 = v24;
              v26 = CFStringGetLength(ValueAtIndex);
              v34.length = v26 + ~CFStringGetLength(v25);
              v34.location = v23.location + 1;
              v27 = CFStringCreateWithSubstring(0, ValueAtIndex, v34);
              if (v27)
              {
                v28 = v27;
                MutableCopy = CFStringCreateMutableCopy(0, 0, v27);
                v35.length = CFStringGetLength(MutableCopy);
                v35.location = 0;
                CFStringFindAndReplace(MutableCopy, CFSTR("\\,"), CFSTR(","), v35, 0);
                v36.length = CFStringGetLength(MutableCopy);
                v36.location = 0;
                CFStringFindAndReplace(MutableCopy, CFSTR("\\\\"), CFSTR("\\"), v36, 0);
                CFDictionarySetValue(Mutable, v25, MutableCopy);
                CFRelease(MutableCopy);
                CFRelease(v28);
              }
              CFRelease(v25);
            }
          }
        }
      }
      CFRelease(v7);
      CFRelease(v6);
    }
  }
  return Mutable;
}

void sub_10019D748()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  __CFString *v11;
  __int16 v12;
  __CFString *v13;
  __int16 v14;
  __CFString *v15;
  __int16 v16;
  __CFString *v17;
  __int16 v18;
  __CFString *v19;

  if (SFDeviceSupportsAirDrop())
    v0 = CFSTR("YES");
  else
    v0 = CFSTR("NO");
  v1 = v0;
  if (SFDeviceSupportsAutoUnlock())
    v2 = CFSTR("YES");
  else
    v2 = CFSTR("NO");
  v3 = v2;
  if (SFDeviceSupportsContinuity())
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  v5 = v4;
  if (SFDeviceSupportsRemoteDisc())
    v6 = CFSTR("YES");
  else
    v6 = CFSTR("NO");
  v7 = v6;
  v8 = daemon_log(v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138413314;
    v11 = v3;
    v12 = 2112;
    v13 = v5;
    v14 = 2112;
    v15 = v5;
    v16 = 2112;
    v17 = v1;
    v18 = 2112;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device Capabilities (Auto Unlock:%@, Handoff:%@, Instant Hotspot:%@, AirDrop:%@, Remote Disc:%@)", (uint8_t *)&v10, 0x34u);
  }

}

uint64_t sub_10019D888()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.retain)();
}

uint64_t sub_10019D898()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.release)();
}

BOOL sub_10019D8A8(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 1uLL) == kCFCompareEqualTo;
}

void sub_10019D8CC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_10019D8D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: kCFURLCreationDateKey %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019D938()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: CFURLCopyResourcePropertyForKey %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019D998()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: finderInfoData is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019D9C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: _kCFURLFinderInfoKey %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DA24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Exception caught trying to retrieve primary iCloud account : %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DA84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "copyLocalizedFileName %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DAE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "NSItemReplacementDirectory appropriateForURL:%@ returned nil error", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DB44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "absoluteURL was nil for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DBA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "createDirectoryAtURL:%@ returned nil error", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DC04()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Unique temporary folder: %@", v1, 0xCu);
  sub_10001949C();
}

void sub_10019DC70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Missing Library folder", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019DC9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create Sharing folder", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019DCC8(int a1, NSObject *a2)
{
  int v4;
  int *v5;
  char *v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;

  v4 = *__error();
  v5 = __error();
  v6 = strerror(*v5);
  v7[0] = 67109634;
  v7[1] = a1;
  v8 = 1024;
  v9 = v4;
  v10 = 2080;
  v11 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "copyUserFolder: confstr(%d) failed with error %d (%s)", (uint8_t *)v7, 0x18u);
}

void sub_10019DD84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Cannot move files to nil folder", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10019DDB0()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_100029230();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to create folder %@ with error: %@", v2, 0x16u);
  sub_10001949C();
}

void sub_10019DE2C(int a1, NSObject *a2)
{
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;

  v4 = *__error();
  v5[0] = 67109376;
  v5[1] = a1;
  v6 = 1024;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "This is not a valid AFP volume (FSCTL returned %d errno = %d)\n", (uint8_t *)v5, 0xEu);
}

void sub_10019DEC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "_SDVolumeNameForMountPoint: NSURLVolumeNameKey %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10019DF28(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  void *v4;
  uint8_t buf[4];
  void *v6;

  v3 = NSPrintF("%#{pid}", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  *(_DWORD *)buf = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SecTaskCreateWithAuditToken returned NULL for %@", buf, 0xCu);

}

void sub_10019DFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __error();
  sub_10009CE04((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0);
  sub_10001949C();
}

void sub_10019E4BC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  _QWORD v7[4];
  id v8;
  char v9;
  uint8_t buf[4];
  const __CFString *v11;

  v2 = a2;
  v4 = streams_log(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = CFSTR("NO");
    if (v2)
      v6 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SDServiceManager: Accept Reply = %@", buf, 0xCu);
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10019E5D4;
  v7[3] = &unk_100719CA8;
  v8 = *(id *)(a1 + 32);
  v9 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

}

uint64_t sub_10019E5D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10019E724(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A0004(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  SDAItemSource *v5;

  v3 = a2;
  v5 = -[SDAItemSource initWithAttributedString:previewImage:subject:]([SDAItemSource alloc], "initWithAttributedString:previewImage:subject:", v3, 0, 0);

  -[SDAItemSource setFakeBundleID:](v5, "setFakeBundleID:", CFSTR("com.apple.mobilemail"));
  -[SDAItemSource setFakeBytes:](v5, "setFakeBytes:", 200);
  LODWORD(v4) = 0.5;
  -[SDAItemSource setFakeDuration:](v5, "setFakeDuration:", v4);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

}

void sub_1001A0140(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  SDAItemSource *v5;

  v3 = a2;
  v5 = -[SDAItemSource initWithString:previewImage:subject:]([SDAItemSource alloc], "initWithString:previewImage:subject:", v3, 0, CFSTR("some subject"));

  -[SDAItemSource setFakeBundleID:](v5, "setFakeBundleID:", CFSTR("com.apple.mobilemail"));
  -[SDAItemSource setFakeBytes:](v5, "setFakeBytes:", 200);
  LODWORD(v4) = 0.5;
  -[SDAItemSource setFakeDuration:](v5, "setFakeDuration:", v4);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

}

void sub_1001A02C0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  SDAItemSource *v7;
  double v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kSDAItemSourcesURL")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kSDAItemSourcesPreviewImage")));
  if (v5)
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kSDAItemSourcesPreviewImage")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kSDAItemSourcesSubject")));

  if (v6)
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kSDAItemSourcesSubject")));
  v7 = -[SDAItemSource initWithURL:previewImage:subject:]([SDAItemSource alloc], "initWithURL:previewImage:subject:", v4, v5, v6);
  -[SDAItemSource setFakeBundleID:](v7, "setFakeBundleID:", *(_QWORD *)(a1 + 32));
  -[SDAItemSource setFakeBytes:](v7, "setFakeBytes:", *(_QWORD *)(a1 + 48));
  LODWORD(v8) = *(_DWORD *)(a1 + 56);
  -[SDAItemSource setFakeDuration:](v7, "setFakeDuration:", v8);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);

}

void sub_1001A0518(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  __CFString *PreferredIdentifierForTag;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  SDAItemSource *v14;
  void *v15;
  SDAItemSource *v16;
  double v17;
  id v18;

  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "componentsSeparatedByString:", CFSTR(".")));
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLForResource:withExtension:", v4, v5));

  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pathExtension"));
  PreferredIdentifierForTag = (__CFString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v7, 0);

  if (UTTypeConformsTo(PreferredIdentifierForTag, kUTTypeImage))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "path"));
    v10 = objc_claimAutoreleasedReturnValue(+[UIImage imageWithContentsOfFile:](UIImage, "imageWithContentsOfFile:", v9));
  }
  else
  {
    v11 = *(void **)(a1 + 40);
    v12 = v11;
    if (!v11)
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 0));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-preview.png"), v12));
    if (!v11)

    v10 = objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:inBundle:](UIImage, "imageNamed:inBundle:", v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)));
  }
  v13 = (void *)v10;

  v14 = [SDAItemSource alloc];
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 0));
  v16 = -[SDAItemSource initWithURL:previewImage:subject:](v14, "initWithURL:previewImage:subject:", v6, v13, v15);

  -[SDAItemSource setFakeBundleID:](v16, "setFakeBundleID:", *(_QWORD *)(a1 + 48));
  -[SDAItemSource setFakeBytes:](v16, "setFakeBytes:", *(_QWORD *)(a1 + 64));
  LODWORD(v17) = *(_DWORD *)(a1 + 72);
  -[SDAItemSource setFakeDuration:](v16, "setFakeDuration:", v17);
  objc_msgSend(*(id *)(a1 + 56), "addObject:", v16);

}

void sub_1001A07CC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "activityViewController:itemForActivityType:", 0, UIActivityTypeAirDrop));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001A1528(id a1)
{
  SDDomainBrowser *v1;
  void *v2;

  v1 = objc_alloc_init(SDDomainBrowser);
  v2 = (void *)qword_1007C6C08;
  qword_1007C6C08 = (uint64_t)v1;

}

unsigned __int8 *sub_1001A18A8(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  v2 = 0;
  while (1)
  {
    v3 = *result;
    if (!*result || v3 == 46)
      break;
    v4 = result + 1;
    if (v3 == 92)
    {
      v5 = (char)*v4;
      if (*v4)
      {
        LOBYTE(v3) = *v4;
        v4 = result + 2;
        if ((v5 - 48) <= 9)
        {
          v6 = (char)*v4;
          if ((v6 - 48) <= 9)
          {
            v7 = (char)result[3];
            if ((v7 - 48) <= 9)
            {
              v8 = 10 * v6 + 100 * v5 + v7 - 5328;
              if (!v8)
                v8 = 45;
              if (v8 < 0x100)
              {
                LOBYTE(v3) = v8;
                v4 = result + 4;
              }
            }
          }
        }
      }
      else
      {
        LOBYTE(v3) = 92;
      }
    }
    *(_BYTE *)(a2 + v2++) = v3;
    result = v4;
    if (v2 == 64)
    {
      result = 0;
      *(_BYTE *)(a2 + 63) = 0;
      return result;
    }
  }
  *(_BYTE *)(a2 + v2) = 0;
  if (!v2)
    return 0;
  if (*result)
    ++result;
  return result;
}

CFComparisonResult sub_1001A1DB4(const __CFString *a1, const __CFString *a2)
{
  unsigned int v4;
  unsigned int v5;

  v4 = sub_1001A2160(a1);
  v5 = sub_1001A2160(a2);
  if (v4 == v5)
    return CFStringCompare(a1, a2, 1uLL);
  if (v4 > v5)
    return 1;
  return -1;
}

id sub_1001A2064(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "restart");
  return objc_msgSend(*(id *)(a1 + 32), "postNotification");
}

uint64_t sub_1001A2160(const __CFString *a1)
{
  CFIndex Length;
  char *v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  _BYTE v7[64];

  Length = CFStringGetLength(a1);
  v3 = (char *)malloc_type_malloc(Length + 1, 0xAED758B5uLL);
  CFStringGetCString(a1, v3, Length + 1, 0x8000100u);
  v4 = 0;
  v3[Length - 1] = 0;
  v5 = (unsigned __int8 *)v3;
  do
  {
    if (!*v5)
      break;
    ++v4;
    v5 = sub_1001A18A8(v5, (uint64_t)v7);
  }
  while (v5);
  free(v3);
  return v4;
}

void sub_1001A2224(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDDomainBrowser: didNotSearch %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001A22D8(id a1)
{
  SDSubCredentialAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDSubCredentialAgent);
  v2 = (void *)qword_1007C6C18;
  qword_1007C6C18 = (uint64_t)v1;

}

id sub_1001A2410(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activate");
}

id sub_1001A24E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_1001A2888(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_uiPresentWithParams:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1001A3048(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 8))
  {
    if (dword_1007B3268 <= 30)
    {
      if (dword_1007B3268 != -1)
        return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidActivate:]_block_invoke", 30, "Alert handle DidActivate\n");
      result = _LogCategory_Initialize(&dword_1007B3268, 30);
      if ((_DWORD)result)
        return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidActivate:]_block_invoke", 30, "Alert handle DidActivate\n");
    }
  }
  else
  {
    if (dword_1007B3268 > 60)
      return result;
    if (dword_1007B3268 != -1)
      return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidActivate:]_block_invoke", 60, "### Unknown alert DidActivate: %@\n", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_1007B3268, 60);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(v2 + 32);
      return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidActivate:]_block_invoke", 60, "### Unknown alert DidActivate: %@\n", v1);
    }
  }
  return result;
}

uint64_t sub_1001A31A4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1 == *(_QWORD *)(*(_QWORD *)(result + 40) + 8))
  {
    if (dword_1007B3268 <= 30)
    {
      if (dword_1007B3268 != -1)
        return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, "Alert handle DidDeactivate\n");
      result = _LogCategory_Initialize(&dword_1007B3268, 30);
      if ((_DWORD)result)
        return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidDeactivate:]_block_invoke", 30, "Alert handle DidDeactivate\n");
    }
  }
  else
  {
    if (dword_1007B3268 > 60)
      return result;
    if (dword_1007B3268 != -1)
      return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidDeactivate:]_block_invoke", 60, "### Unknown alert DidDeactivate: %@\n", v1);
    v2 = result;
    result = _LogCategory_Initialize(&dword_1007B3268, 60);
    if ((_DWORD)result)
    {
      v1 = *(_QWORD *)(v2 + 32);
      return LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandleDidDeactivate:]_block_invoke", 60, "### Unknown alert DidDeactivate: %@\n", v1);
    }
  }
  return result;
}

void sub_1001A332C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  if (a1[4] == *(_QWORD *)(a1[5] + 8))
  {
    if (dword_1007B3268 <= 30
      && (dword_1007B3268 != -1 || _LogCategory_Initialize(&dword_1007B3268, 30)))
    {
      LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Alert handle DidInvalidate: %{error}\n", a1[6]);
    }
    v2 = a1[5];
    v3 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;

  }
  else if (dword_1007B3268 <= 30
         && (dword_1007B3268 != -1 || _LogCategory_Initialize(&dword_1007B3268, 30)))
  {
    LogPrintF(&dword_1007B3268, "-[SDSubCredentialAgent remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Unknown Alert DidInvalidate: %{error}\n", a1[6]);
  }
}

BOOL sub_1001A39A4(id a1, id a2, NSDictionary *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = a2;
  v5 = objc_opt_class(NSURL, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
    v6 = objc_msgSend(v3, "isFileURL");
  else
    v6 = 0;

  return v6;
}

id sub_1001A3D38(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = _ShareSheetBundleIDFromAuditToken(objc_msgSend(objc_retainAutorelease(a1), "bytes"));
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

void sub_1001A3D5C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A3DB8;
  block[3] = &unk_1007146D8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1001A3DB8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
}

void sub_1001A4010(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = objc_msgSend(a2, "copy");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A40EC;
  block[3] = &unk_100719E20;
  v11 = objc_msgSend(a3, "copy");
  v15 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v8 = v5;
  v9 = v11;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1001A40EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[2];
  _QWORD v5[2];

  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 0);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    v4[0] = LSFileProviderStringKey;
    v4[1] = LSRequireOpenInPlaceKey;
    v5[0] = v2;
    v5[1] = &__kCFBooleanTrue;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2));
    objc_msgSend(*(id *)(a1 + 48), "_performLaunchServicesOpenWithDocumentOpenURL:launchServiceOptions:completion:", *(_QWORD *)(a1 + 56), v3, *(_QWORD *)(a1 + 64));

  }
}

BOOL sub_1001A44C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v3 = a2;
  v5 = objc_opt_class(UISUIOpenInByCopySecurityScopedResource, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "url"));
    if (objc_msgSend(v6, "isEqual:", *(_QWORD *)(a1 + 32)))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bookmarkExportDataEncodedAsString"));
      v8 = objc_msgSend(v7, "length") != 0;

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_1001A472C(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "securityScopedResources", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "url"));
        objc_msgSend(v2, "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

id sub_1001A4FB8(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;

  v5 = a1;
  if (a3)
    v6 = objc_msgSend(objc_retainAutorelease(a3), "bytes");
  else
    v6 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[LSDocumentProxy documentProxyForURL:isContentManaged:sourceAuditToken:](LSDocumentProxy, "documentProxyForURL:isContentManaged:sourceAuditToken:", v5, a2, v6));

  return v7;
}

void sub_1001A5028(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  int CanOpenInPlaceByReferenceOriginalFile;
  void *v8;
  void *v9;
  objc_class *v10;
  id v11;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  CanOpenInPlaceByReferenceOriginalFile = _UIApplicationCanOpenInPlaceByReferenceOriginalFile(v6, v5);
  v8 = *(void **)(a1 + 40);
  v9 = *(void **)(a1 + 72);
  if (CanOpenInPlaceByReferenceOriginalFile)
    v10 = (objc_class *)objc_msgSend(v9, "classForOpenInPlaceActivity");
  else
    v10 = (objc_class *)objc_msgSend(v9, "classForOpenByCopyActivity");
  v11 = objc_msgSend([v10 alloc], "initWithApplicationProxy:documentProxy:isContentManaged:sourceApplicationAuditTokenData:appIsDocumentTypeOwner:supportedTypeIdentifiers:", v6, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 56), a3, *(_QWORD *)(a1 + 64));

  objc_msgSend(v8, "addObject:", v11);
}

id sub_1001A5794(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", a2);
}

id sub_1001A58F4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", a2);
}

void sub_1001A590C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;

  v5 = qword_1007C6C20;
  v6 = a3;
  if (v5 != -1)
    dispatch_once(&qword_1007C6C20, &stru_100719EB8);
  off_1007B3338 = (uint64_t (*)())dlsym((void *)qword_1007C6C28, "FPExtendBookmarkForDocumentURL");
  ((void (*)(uint64_t, uint64_t, id))off_1007B3338)(a1, a2, v6);

}

void sub_1001A59A0(id a1)
{
  qword_1007C6C28 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FileProvider.framework/FileProvider", 2);
}

void sub_1001A59C8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v4 = objc_opt_class(UISUISecurityContext, v3);
  if ((objc_opt_isKindOfClass(v7, v4) & 1) != 0)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "securityScopedResources"));
    objc_msgSend(v5, "addObjectsFromArray:", v6);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_1001A5A48(uint64_t a1, uint64_t a2)
{
  return objc_opt_class(a1, a2);
}

void sub_1001A5AF0(id a1)
{
  SDManagedBrowser *v1;
  void *v2;

  v1 = objc_alloc_init(SDManagedBrowser);
  v2 = (void *)qword_1007C6C38;
  qword_1007C6C38 = (uint64_t)v1;

}

id sub_1001A5C4C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "buildNodesAndNotify");
}

uint64_t SDAuthenticationConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v30 = 24;
        goto LABEL_54;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

        continue;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              v9 = v22++ >= 9;
              if (v9)
              {
                v23 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v23 = 0;
LABEL_49:
        *(_BYTE *)(a1 + 28) = v23 != 0;
        continue;
      case 4u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v14 |= (unint64_t)(v29 & 0x7F) << v26;
      if ((v29 & 0x80) == 0)
        goto LABEL_51;
      v26 += 7;
      v9 = v27++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_53:
    v30 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v30) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001A73CC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Error sending %@, error:%@");
}

void sub_1001A7430()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006CFD0();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "Failed to create destination (deviceID: %@, IDS device: %@)");
}

id sub_1001A7658(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_1001A7758()
{
  if (qword_1007C6C48 != -1)
    dispatch_once(&qword_1007C6C48, &stru_100719F28);
  return (id)qword_1007C6C40;
}

id sub_1001A77F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_ensureStarted");
}

void sub_1001A7C88(NSObject *a1, int a2, uint64_t a3, void *a4)
{
  dispatch_queue_t *v6;
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  id v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  dispatch_queue_t v21;
  id v22;
  _BOOL4 v23;
  id v24;
  uint32_t v25;
  id v26;
  int v27;
  uint8_t buf[8];
  __int16 v29;

  v6 = a4;
  dispatch_assert_queue_V2(v6[9]);
  switch(a2)
  {
    case 0:
      v7 = sub_1001A7758();
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 6291714;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTSession attached: %#m\n", buf, 4u);
      }

      v6[2] = a1;
      goto LABEL_24;
    case 1:
      v15 = sub_1001A7758();
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      *(_DWORD *)buf = 6291714;
      v17 = "BTSession detached: %#m\n";
      v18 = buf;
      v19 = v16;
      v20 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_15;
    case 2:
      v21 = v6[2];
      v22 = sub_1001A7758();
      v16 = objc_claimAutoreleasedReturnValue(v22);
      v23 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (!v21)
      {
        if (v23)
        {
          *(_WORD *)buf = 0;
          v17 = "### BTSession terminated (bluetoothd crash) when stopping\n";
          v18 = buf;
          v19 = v16;
          v20 = OS_LOG_TYPE_ERROR;
          v25 = 2;
LABEL_22:
          _os_log_impl((void *)&_mh_execute_header, v19, v20, v17, v18, v25);
        }
LABEL_23:

        CFRelease(v6);
        goto LABEL_24;
      }
      if (v23)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "### BTSession terminated (bluetoothd crash)...re-attaching\n", buf, 2u);
      }

      v6[2] = 0;
      *(_QWORD *)buf = sub_1001A7C88;
      if (off_1007B3348((uint64_t)"SDProximityPairingBufferedScanner", (uint64_t)buf, (uint64_t)v6, v6[9]))
      {
        v24 = sub_1001A7758();
        v16 = objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v27 = 6291714;
          v17 = "### BTSession re-attach failed: %#m\n";
          v18 = (uint8_t *)&v27;
          v19 = v16;
          v20 = OS_LOG_TYPE_ERROR;
LABEL_15:
          v25 = 4;
          goto LABEL_22;
        }
        goto LABEL_23;
      }
LABEL_24:

      return;
    case 3:
      v26 = sub_1001A7758();
      v10 = objc_claimAutoreleasedReturnValue(v26);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
      *(_DWORD *)buf = 6291714;
      v11 = "### BTSession failed: %#m\n";
      v12 = v10;
      v13 = OS_LOG_TYPE_ERROR;
      v14 = 4;
      goto LABEL_18;
    default:
      v9 = sub_1001A7758();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        goto LABEL_19;
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = a2;
      v29 = 96;
      v11 = "### BTSession unknown event %d, result %#m\n";
      v12 = v10;
      v13 = OS_LOG_TYPE_INFO;
      v14 = 10;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, buf, v14);
LABEL_19:

      goto LABEL_24;
  }
}

void sub_1001A8194(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1001A81E4(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (_os_feature_enabled_impl("Sharing", "AirPodsProxUseBufferedSamples"))
    objc_msgSend(WeakRetained, "foundBufferedPairingDevices:", v4);

}

void sub_1001A8248(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "proxPairingLoggerAndInvalidationHandler:withLogLevel:andError:", CFSTR("Invalidation Handler"), 16, 0);

}

void sub_1001A8284(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "proxPairingLoggerAndInvalidationHandler:withLogLevel:andError:", CFSTR("Interruption Handler"), 16, 0);

}

void sub_1001A82C0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "proxPairingLoggerAndInvalidationHandler:withLogLevel:andError:", CFSTR("Error Handler"), 16, v3);

}

void sub_1001A859C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1001A85B8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "proxPairingLoggerAndInvalidationHandler:withLogLevel:andError:", CFSTR("ActivateWithCompletion Handler"), 16, v3);

}

uint64_t sub_1001AB87C(uint64_t a1)
{
  id v2;
  id v3;

  if (a1 >> 1 == 4103)
    return 1;
  v2 = objc_msgSend(objc_alloc((Class)SFHeadphoneProduct), "initWithProductID:", a1);
  v3 = objc_msgSend(v2, "supportsOptimizedBatteryCharging");

  return (uint64_t)v3;
}

void sub_1001AC0C4(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t Int64;
  id v6;
  NSObject *v7;
  int v8;
  id v9;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "advertisementFields"));
  v4 = CFDictionaryGetInt64Ranged(v3, CFSTR("hsStatus"), 0, 0xFFFFFFFFLL, 0) & 0x24;
  Int64 = CFDictionaryGetInt64(v3, CFSTR("lc"), 0);
  if (v4 | Int64)
  {
    if (Int64 && objc_msgSend(v2, "proxPairingTicks"))
    {
      objc_msgSend(v2, "setProxPairingTicks:", 0);
      v6 = sub_1001A7758();
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 138412290;
        v9 = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing up ticks %@", (uint8_t *)&v8, 0xCu);
      }

    }
  }
  else if (!objc_msgSend(v2, "proxPairingTicks"))
  {
    objc_msgSend(v2, "setProxPairingTicks:", mach_absolute_time());
  }

}

void sub_1001AC42C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.sharing", "ProximityPairingBufferedScanner");
  v2 = (void *)qword_1007C6C40;
  qword_1007C6C40 = (uint64_t)v1;

}

uint64_t sub_1001AC45C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;

  v7 = qword_1007C6C50;
  v8 = a4;
  if (v7 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3348 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTSessionAttachWithQueue");
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))off_1007B3348)(a1, a2, a3, v8);

  return v9;
}

void sub_1001AC500(id a1)
{
  qword_1007C6C58 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
}

uint64_t sub_1001AC528(uint64_t a1)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3350 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))off_1007B3350)(a1);
}

Class sub_1001AC590()
{
  Class result;

  if (qword_1007C6C68 != -1)
    dispatch_once(&qword_1007C6C68, &stru_100719F68);
  result = objc_getClass("CBDiscovery");
  qword_1007C6C60 = (uint64_t)result;
  off_1007B3340 = (uint64_t (*)())sub_1001AC5EC;
  return result;
}

id sub_1001AC5EC()
{
  return (id)qword_1007C6C60;
}

void sub_1001AC5F8(id a1)
{
  qword_1007C6C70 = (uint64_t)dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
}

uint64_t sub_1001AC620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3358 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceFromIdentifier");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1007B3358)(a1, a2, a3);
}

uint64_t sub_1001AC6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3360 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceGetName");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1007B3360)(a1, a2, a3);
}

uint64_t sub_1001AC720(uint64_t a1, uint64_t a2)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3368 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceGetPairingStatus");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1007B3368)(a1, a2);
}

uint64_t sub_1001AC790(uint64_t a1, uint64_t a2)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3370 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceIsTemporaryPaired");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1007B3370)(a1, a2);
}

uint64_t sub_1001AC800(uint64_t a1, uint64_t a2)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3378 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceGetConnectedServices");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1007B3378)(a1, a2);
}

uint64_t sub_1001AC870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3380 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))off_1007B3380)(a1, a2, a3);
}

uint64_t sub_1001AC8F0(uint64_t a1, uint64_t a2)
{
  if (qword_1007C6C50 != -1)
    dispatch_once(&qword_1007C6C50, &stru_100719F48);
  off_1007B3388 = (uint64_t (*)())dlsym((void *)qword_1007C6C58, "BTDeviceAddressFromString");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1007B3388)(a1, a2);
}

id sub_1001ACB78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_start");
}

void sub_1001ACC18(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (v3 && *(_QWORD *)(a1 + 40))
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "setAttemptError:");
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v3 = v4;
  }

}

void sub_1001ACFF0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSErrorUserInfoKey v9;
  const __CFString *v10;

  v3 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v3, "setErrorType:", 4);
    v4 = *(void **)(a1 + 32);
    v5 = SFAutoUnlockErrorDomain;
    v9 = NSLocalizedDescriptionKey;
    v10 = CFSTR("AWDL info exchange failed");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, 103, v6));
    objc_msgSend(v4, "notifyDelegateWithError:", v7);

  }
  else
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "delegate"));
    objc_msgSend(v8, "sessionDidSendInitialData:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1001AD11C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSErrorUserInfoKey v7;
  const __CFString *v8;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setAttemptError:", a2);
    v3 = *(void **)(a1 + 32);
    v4 = SFAutoUnlockErrorDomain;
    v7 = NSLocalizedDescriptionKey;
    v8 = CFSTR("Proxy message failed");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v4, 103, v5));
    objc_msgSend(v3, "notifyDelegateWithError:", v6);

  }
}

void sub_1001AE0FC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing AWDL Info", v1, 2u);
}

void sub_1001AE13C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Session missing device ID for encrypted send", v1, 2u);
}

void sub_1001AE17C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138477827;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Ranging key data: %{private}@", (uint8_t *)&v2, 0xCu);
}

uint64_t SDUnlockSetupSessionCreatedReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 8u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_74;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_76;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_76:
        v49 = 48;
        goto LABEL_101;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 4u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_80:
        v49 = 32;
        goto LABEL_101;
      case 3u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = 40;
        goto LABEL_72;
      case 4u:
        v25 = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(v25);
        v24 = 16;
        goto LABEL_72;
      case 5u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_84:
        v49 = 8;
        goto LABEL_101;
      case 6u:
        v30 = 0;
        v31 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_88:
        v49 = 12;
        goto LABEL_101;
      case 7u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 64) |= 0x40u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              v9 = v35++ >= 9;
              if (v9)
              {
                v36 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v36 = 0;
LABEL_92:
        *(_BYTE *)(a1 + 60) = v36 != 0;
        continue;
      case 8u:
        v39 = 0;
        v40 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 0x20u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v14 |= (unint64_t)(v42 & 0x7F) << v39;
            if (v42 < 0)
            {
              v39 += 7;
              v9 = v40++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_96:
        v49 = 56;
        goto LABEL_101;
      case 9u:
        v43 = 0;
        v44 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 64) |= 0x10u;
        break;
      case 0xAu:
        v47 = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(v47);
        v24 = 24;
LABEL_72:
        v48 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v45 == -1 || v45 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
      v14 |= (unint64_t)(v46 & 0x7F) << v43;
      if ((v46 & 0x80) == 0)
        goto LABEL_98;
      v43 += 7;
      v9 = v44++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_100;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_100:
    v49 = 52;
LABEL_101:
    *(_DWORD *)(a1 + v49) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1001AFB78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unpublish");
}

id sub_1001AFBD8(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 16) = 1;
  return _objc_msgSend(*(id *)(a1 + 32), "handleClosedConnection");
}

id sub_1001AFE50(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stop");
}

void sub_1001B046C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "setSf_transferState:", 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationTotalBytesKey));
  objc_msgSend(v4, "setTotalUnitCount:", objc_msgSend(v3, "longLongValue"));

  objc_msgSend(v4, "setCompletedUnitCount:", 0);
}

void sub_1001B04E4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (!objc_msgSend(v6, "totalUnitCount"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationTotalBytesKey));
    objc_msgSend(v6, "setTotalUnitCount:", objc_msgSend(v3, "longLongValue"));

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationBytesCopiedKey));
  objc_msgSend(v6, "setCompletedUnitCount:", objc_msgSend(v4, "longLongValue"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationTimeRemainingKey));
  objc_msgSend(v6, "setUserInfoObject:forKey:", v5, NSProgressEstimatedTimeRemainingKey);

}

void sub_1001B05C0(id a1, NSProgress *a2)
{
  -[NSProgress setSf_transferState:](a2, "setSf_transferState:", 6);
}

void sub_1001B05CC(id a1, NSProgress *a2)
{
  -[NSProgress setSf_transferState:](a2, "setSf_transferState:", 4);
}

void sub_1001B05D8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
  v3 = kSFOperationErrorKey;
  v4 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedDescription"));
  objc_msgSend(v4, "sf_failedWithError:", v5);

}

void sub_1001B0768(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = kSFOperationConvertMediaFormatsKey;
  v4[0] = objc_opt_class(NSNumber);
  v3[1] = kSFOperationFileBomPathKey;
  v4[1] = objc_opt_class(NSString);
  v3[2] = kSFOperationFileIsDirectoryKey;
  v4[2] = objc_opt_class(NSNumber);
  v3[3] = kSFOperationFileNameKey;
  v4[3] = objc_opt_class(NSString);
  v3[4] = kSFOperationtFileSubTypeKey;
  v4[4] = objc_opt_class(NSString);
  v3[5] = kSFOperationFileTypeKey;
  v4[5] = objc_opt_class(NSString);
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6));
  v2 = (void *)qword_1007C6C80;
  qword_1007C6C80 = v1;

}

uint64_t sub_1001B1C6C(uint64_t a1)
{
  return IOPMAssertionRelease(*(_DWORD *)(a1 + 32));
}

id sub_1001B2794(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "silentlyCancelRequest");
}

id sub_1001B2818(id a1, id a2)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  int IsSupported;

  v2 = a2;
  v3 = objc_opt_class(NSURL);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = v2;
  }
  else
  {
    v5 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v2, v5) & 1) == 0)
    {
      v7 = 0;
      v6 = 0;
      goto LABEL_10;
    }
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", v2, 0));
  }
  v6 = v4;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "scheme"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "scheme"));
    IsSupported = SFAirDropUrlSchemeIsSupported();

    if (IsSupported)
    {
      v7 = v6;
      v6 = v7;
    }
    else
    {
      v7 = 0;
    }
  }
LABEL_10:

  return v7;
}

id sub_1001B3594(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:", 2);
}

id sub_1001B39B0(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "handleReadStreamEvent:event:", a1, a2);
}

void sub_1001B3D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B3D34(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "startPublishingProgressForPlaceholderFiles:", v3);

}

const __CFURL *sub_1001B4354(uint64_t a1)
{
  const __CFURL *result;
  const __CFURL *v2;
  CFStringRef v3;

  result = (const __CFURL *)_CFHTTPServerRequestCopyProperty(a1, _kCFHTTPServerRequestURL);
  if (result)
  {
    v2 = result;
    v3 = CFURLCopyStrictPath(result, 0);
    CFRelease(v2);
    return (const __CFURL *)v3;
  }
  return result;
}

void sub_1001B4814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B483C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001B484C(uint64_t a1)
{

}

void sub_1001B4854(uint64_t a1)
{
  _QWORD block[7];

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B48D4;
  block[3] = &unk_10071A058;
  block[6] = *(_QWORD *)(a1 + 48);
  dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 56), block);
}

void sub_1001B48D4(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  BOOL v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  CFDataRef v31;
  CFDataRef v32;
  id obj;
  uint8_t buf[4];
  void *v35;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 208));
  if (WeakRetained)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v3 + 144))
    {

      goto LABEL_5;
    }
    v4 = *(unsigned __int8 *)(v3 + 11);

    if (v4)
    {
LABEL_5:
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationFilesKey));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationItemsKey));
      v7 = objc_msgSend(v5, "count");
      v8 = v7 == 0;
      if (v7)
        v9 = v5;
      else
        v9 = v6;
      if (v8)
        v10 = CFSTR("%lu items");
      else
        v10 = CFSTR("%lu files");
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, objc_msgSend(v9, "count")));
      v12 = airdrop_log(v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v35 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received Upload request for %@", buf, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "storeRequestValue:forKey:convertToNumber:", *(_QWORD *)(a1 + 48), CFSTR("Content-Type"), 0);
      objc_msgSend(*(id *)(a1 + 32), "storeRequestValue:forKey:convertToNumber:", *(_QWORD *)(a1 + 48), kSFOperationTotalBytesKey, 1);
      v14 = objc_msgSend(*(id *)(a1 + 32), "thereIsEnoughFreeSpace");
      if ((_DWORD)v14)
      {
        if (objc_msgSend(*(id *)(a1 + 32), "oneHundredContinue:", *(_QWORD *)(a1 + 48)))
          objc_msgSend(*(id *)(a1 + 32), "enqueueResponse:code:body:", *(_QWORD *)(a1 + 48), 100, 0);
        v15 = *(_QWORD *)(a1 + 48);
        v16 = *(void **)(a1 + 32);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        obj = *(id *)(v17 + 40);
        v18 = objc_msgSend(v16, "startReceivingFile:error:", v15, &obj);
        objc_storeStrong((id *)(v17 + 40), obj);
        if ((v18 & 1) != 0)
          goto LABEL_31;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), kSFOperationErrorKey);
        v19 = *(void **)(a1 + 32);
        v20 = 500;
      }
      else
      {
        v25 = airdrop_log(v14);
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          sub_1001B6DB0();

        v27 = sub_10005081C(-2, 0);
        v28 = objc_claimAutoreleasedReturnValue(v27);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v30 = *(void **)(v29 + 40);
        *(_QWORD *)(v29 + 40) = v28;

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), kSFOperationErrorKey);
        if (objc_msgSend(*(id *)(a1 + 32), "oneHundredContinue:", *(_QWORD *)(a1 + 48)))
        {
          buf[0] = 0;
          v31 = CFDataCreate(0, buf, 1);
          if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "enableBugs"))
            v32 = 0;
          else
            v32 = v31;
          objc_msgSend(*(id *)(a1 + 32), "enqueueResponse:code:body:", *(_QWORD *)(a1 + 48), 417, v32);
          CFRelease(v31);
          goto LABEL_31;
        }
        v19 = *(void **)(a1 + 32);
        v20 = 507;
      }
      objc_msgSend(v19, "sendUploadResponse:", v20);
LABEL_31:

      return;
    }
  }
  v21 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 208));

  if (v21)
  {
    v23 = airdrop_log(v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      sub_1001B6D84();

    objc_msgSend(*(id *)(a1 + 32), "enqueueResponse:code:body:", *(_QWORD *)(a1 + 48), 400, 0);
  }
}

id sub_1001B4D40(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), kSFOperationBytesCopiedKey);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), kSFOperationTimeRemainingKey);
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:", 7);
}

void sub_1001B4E0C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v20[5];
  _QWORD block[5];

  v2 = kSFOperationTotalBytesKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKeyedSubscript:", kSFOperationTotalBytesKey));
  v4 = (uint64_t)objc_msgSend(v3, "longLongValue");

  if (!v4)
  {
    v4 = 128;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 128));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKeyedSubscript:", v5, v2);

  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B5048;
  block[3] = &unk_1007146D8;
  block[4] = v6;
  dispatch_async(v7, block);
  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v4 / 5));
  objc_msgSend(v8, "notifyClientOfBytesCopied:timeRemaining:", v9, &off_10074BA00);

  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 2 * v4 / 5));
  objc_msgSend(v10, "notifyClientOfBytesCopied:timeRemaining:", v11, &off_10074BA00);

  v12 = *(void **)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 3 * v4 / 5));
  objc_msgSend(v12, "notifyClientOfBytesCopied:timeRemaining:", v13, &off_10074BA00);

  v14 = *(void **)(a1 + 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", 4 * v4 / 5));
  objc_msgSend(v14, "notifyClientOfBytesCopied:timeRemaining:", v15, &off_10074BA18);

  v16 = *(void **)(a1 + 32);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v4));
  objc_msgSend(v16, "notifyClientOfBytesCopied:timeRemaining:", v17, &off_10074BA18);

  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(NSObject **)(v18 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001B5054;
  v20[3] = &unk_1007146D8;
  v20[4] = v18;
  dispatch_async(v19, v20);
}

id sub_1001B5048(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:", 5);
}

id sub_1001B5054(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:", 9);
}

id sub_1001B5A6C(void *a1, uint64_t a2)
{
  return _objc_msgSend(a1, "didReceiveError:", a2);
}

id sub_1001B5A74(void *a1, uint64_t a2)
{
  return _objc_msgSend(a1, "didReceiveRequest:", a2);
}

id sub_1001B5A7C(void *a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(a1, "didSendResponse:forRequest:", a3, a2);
}

void sub_1001B5AE4(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 11) = 1;
    objc_msgSend(*(id *)(a1 + 32), "sendAskResponse:", 200);
    objc_msgSend(*(id *)(a1 + 32), "notifyClientForEvent:", 6);
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKeyedSubscript:", v3, kSFOperationErrorKey);
    objc_msgSend(*(id *)(a1 + 32), "sendAskResponse:", 500);

  }
}

void sub_1001B5ECC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B5F2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveError suppressed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B5F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveError %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B5FB8()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10006CFD0();
  sub_100050D98((void *)&_mh_execute_header, v0, (uint64_t)v0, "SDAirDropConnection: invalid value for %@: %@", v1);
  sub_10001949C();
}

void sub_1001B6020(uint64_t a1, uint64_t a2, NSObject *a3)
{
  objc_class *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;

  v5 = (objc_class *)objc_opt_class(a1);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = 138412546;
  v10 = v7;
  v11 = 2112;
  v12 = a2;
  sub_100050D98((void *)&_mh_execute_header, a3, v8, "SDAirDropConnection: unexpected class %@ for file info key %@", (uint8_t *)&v9);

}

void sub_1001B60C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: Files array has invalid items", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B60F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: unhandled key %@ for storeArrayValue", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6154()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeArrayValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B61B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: _CFHTTPServerRequestCopyProperty returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B61E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFURLCreateStringByReplacingPercentEscapes returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B620C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeRequestValue value is not a string", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeDataValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6298()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeStringValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B62F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeNumberValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeBooleanValue value for key %@ is invalid", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B63B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: createCGImageWithJPEG2000Data returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B63E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeIconValue fileIconData is invalid", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6410()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFPropertyListCreateData failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6470()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,createPersonForAskRequest: computerName is invalid", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B649C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: createPersonForAskRequest senderIcon is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B64C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: _SDHashStringFromData returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B64F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: icon hashes don't match", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,createPersonForAskRequest: validAirDropID(%@) returned NO", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6580(void *a1, void *a2, NSObject *a3)
{
  id v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v5 = objc_msgSend(a1, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = 134218755;
  v8 = v5;
  v9 = 2160;
  v10 = 1752392040;
  v11 = 2113;
  v12 = v6;
  v13 = 2113;
  v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Sender is blocked. [number of contacts:%lu] [contact Identifier: %{private, mask.hash}@] [contact:%{private}@]", (uint8_t *)&v7, 0x2Au);

}

void sub_1001B6654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: no certificate chain for %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B66B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,senderIsTrusted: userIdentity is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B66E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: SDAppleIDAuthenticateCertificateChainSync failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6740()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: copyCertificateChainFromTrust returned %s array", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B67B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: myAccountIdentifier is an empty string", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B67E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDAirDropConnection: SFAppleIDCommonNameForCertificate failed with error %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1001B684C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDAirDropConnection: client cert chain not trusted. SFAppleIDVerifyCertificateChainSync failed with err=%d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1001B68B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFPropertyListCreateWithData failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6914()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFPropertyListCreateWithData returned invalid dictionary", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6940()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,allowAskRequestFromPerson: person is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B696C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,allowAskRequestFromPerson: appleID is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6998()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,handleAskRequest: senderID is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B69C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,handleAskRequest: no files or items", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B69F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "AirDrop failed to validate Apple ID certificate of sender", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6A1C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDAirDropConnection: kCFStreamEventUnknown(%d)", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1001B6A80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFReadStreamRead returned %ld", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6AE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: _CFHTTPServerRequestCopyBodyStream returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6B0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFReadStreamOpen failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6B38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: startReceivingFile destination is nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6B64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019D8CC(__stack_chk_guard);
  sub_10006CFE8();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: thereIsEnoughFreeSpace failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6BC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "makeDestinationDirectory: createDirectoryAtURL failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001B6C24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Ask already in progress", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6C50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Bad Upload request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Upload already in progress", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6CA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Discover already in progress", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6CD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest method is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6D00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest unknown method", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6D2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest operation is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6D58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest unknown operation", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6D84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest askRequest NULL userAccepted false", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6DB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: kSFOperationErrorNotEnoughSpace", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6DDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse method is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6E08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse method is unknown", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6E34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse operation is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6E60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse operation is unknown", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001B6E8C()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100029230();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Connection from %@ closed but transfer is finished", v1, 0xCu);
  sub_10001949C();
}

uint64_t SDAutoUnlockStartAdvertisingReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001B7778(id a1)
{
  void *v1;
  unsigned int v2;
  SDActivityScanner *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v2 = objc_msgSend(v1, "enableContinuity");

  if (v2)
  {
    v3 = objc_alloc_init(SDActivityScanner);
    v4 = (void *)qword_1007C6C88;
    qword_1007C6C88 = (uint64_t)v3;

  }
}

void sub_1001B7F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  objc_sync_exit(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B7FB4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001B7FC4(uint64_t a1)
{

}

void sub_1001B7FCC(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "lostAllDevices");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_1001B82F0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "clientAdvertisement"));
  objc_msgSend(v3, "receivedAdvertisement:", v4);

}

id sub_1001B8340(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "pairedDevicesChanged:", *(_QWORD *)(a1 + 32));
}

void sub_1001B8740(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  NSObject *v26;
  _QWORD v27[4];
  id v28;
  uint8_t buf[4];
  id v30;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (v5)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "deviceTracked") & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setDeviceTracked:", 1);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_1001B8984;
      v27[3] = &unk_10071A168;
      v9 = *(void **)(a1 + 40);
      v28 = *(id *)(a1 + 32);
      objc_msgSend(v9, "_enumerateRemoteObjectProxiesUsingBlock:", v27);

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "options"));
    v11 = off_1007B3390();
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v12));
    v14 = objc_msgSend(v13, "BOOLValue");

    if (v14 && (v15 = objc_msgSend(*(id *)(a1 + 48), "isDefaultPairedDevice"), !(_DWORD)v15))
    {
      v24 = handoff_log(v15, v16);
      v22 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        sub_1001BA664();
    }
    else
    {
      v17 = handoff_log(v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v30 = v5;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received a new advertisement %@", buf, 0xCu);
      }

      v19 = *(void **)(a1 + 40);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1001B89E4;
      v25[3] = &unk_10071A168;
      v20 = v5;
      v26 = v20;
      objc_msgSend(v19, "_enumerateRemoteObjectProxiesUsingBlock:", v25);
      v21 = *(_QWORD *)(a1 + 72);
      if (v21)
        (*(void (**)(uint64_t, NSObject *))(v21 + 16))(v21, v20);
      v22 = v26;
    }
  }
  else
  {
    v23 = handoff_log(v6, v7);
    v22 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_1001BA5A4(a1, (uint64_t)v8, v22);
  }

}

void sub_1001B8984(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "idsDevice"));
  v4 = sub_1000C0734(v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "foundDeviceWithDevice:", v5);

}

id sub_1001B89E4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "receivedAdvertisement:", *(_QWORD *)(a1 + 32));
}

void sub_1001B8D10(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "clientAdvertisement"));
  objc_msgSend(v3, "receivedAdvertisement:", v4);

}

id sub_1001B8E44(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dumpState");
}

void sub_1001B9884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1001B9970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1001B9A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1001B9BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1001B9E5C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "idsDevice"));
  v4 = sub_1000C0734(v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "lostDeviceWithDevice:", v5);

}

id sub_1001BA180(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = *(_QWORD *)(a1 + 40);
  return objc_msgSend(*(id *)(a1 + 32), "restart");
}

void sub_1001BA28C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  void *v13;

  v2 = kdebug_trace(722141192, 0, 0, 0, 0);
  v4 = handoff_log(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = a1[4];
    v7 = SFHexStringForData(a1[5]);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v10 = 138412546;
    v11 = v6;
    v12 = 2112;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Requesting payload from %@ for %@", (uint8_t *)&v10, 0x16u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDActivityPayloadManager sharedPayloadManager](SDActivityPayloadManager, "sharedPayloadManager"));
  objc_msgSend(v9, "sendActivityPayloadRequestToDeviceIdentifier:withAdvertisementPayload:command:timeout:completionHandler:", a1[4], a1[5], a1[6], a1[8], a1[7]);

}

id sub_1001BA428()
{
  id *v0;

  if (qword_1007C6CA0 != -1)
    dispatch_once(&qword_1007C6CA0, &stru_10071A1F8);
  v0 = (id *)dlsym((void *)qword_1007C6CA8, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6C98, *v0);
  off_1007B3390 = (uint64_t (*)())sub_1001BA4A0;
  return (id)qword_1007C6C98;
}

id sub_1001BA4A0()
{
  return (id)qword_1007C6C98;
}

void sub_1001BA4AC(id a1)
{
  qword_1007C6CA8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

void sub_1001BA4D4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  __CFString *v6;
  uint64_t v7;
  int v8;
  __CFString *v9;

  v3 = a1;
  v5 = objc_msgSend(a1, "count");
  if (v5)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "valueForKeyPath:", CFSTR("@unionOfObjects.uniqueIDOverride")));
    v7 = SFCompactStringFromCollection(v3);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(v7);
  }
  else
  {
    v6 = CFSTR("[]");
  }
  v8 = 138412290;
  v9 = v6;
  sub_1000332D8((void *)&_mh_execute_header, a2, v4, "nearbyServiceDevicesChanged: %@", (uint8_t *)&v8);
  if (v5)
  {

  }
}

void sub_1001BA5A4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v6 = SFHexStringForData(*(_QWORD *)(a1 + 56));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = 138412802;
  v10 = v7;
  v11 = 2112;
  v12 = v8;
  v13 = 2112;
  v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to update with raw advertisementData %@ from %@ (%@)", (uint8_t *)&v9, 0x20u);

}

void sub_1001BA664()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Ignoring new advertisement as it is for default pair only which is not me", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001BA690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Scanning client arrived", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001BA6BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Scanning client went away", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001BA6E8()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "continuityDidUpdateState: Unknown", v1, 2u);
  sub_1000161DC();
}

void sub_1001BA720(unint64_t a1, NSObject *a2, uint64_t a3)
{
  const char *v3;
  int v4;
  const char *v5;

  if (a1 > 3)
    v3 = "UnexpectedType";
  else
    v3 = off_10071A1B0[a1];
  v4 = 136315138;
  v5 = v3;
  sub_1000332D8((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStartScanningForType: %s", (uint8_t *)&v4);
  sub_10001949C();
}

void sub_1001BA7A8(unint64_t a1, NSObject *a2, uint64_t a3)
{
  const char *v3;
  int v4;
  const char *v5;

  if (a1 > 3)
    v3 = "UnexpectedType";
  else
    v3 = off_10071A1B0[a1];
  v4 = 136315138;
  v5 = v3;
  sub_1000332D8((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStopScanningForType: %s", (uint8_t *)&v4);
  sub_10001949C();
}

void sub_1001BA830(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "IDSContinuity didFailToStartScanningForType: %s withError: (%@)", buf, 0x16u);

}

void sub_1001BA894(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Saw device %@ but cannot find mathing IDSDevice", (uint8_t *)&v2, 0xCu);
  sub_10001949C();
}

void sub_1001BA904()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "lostAllDevices", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001BA97C(id a1)
{
  SDConnectedBrowser *v1;
  void *v2;

  v1 = objc_alloc_init(SDConnectedBrowser);
  v2 = (void *)qword_1007C6CB8;
  qword_1007C6CB8 = (uint64_t)v1;

}

void sub_1001BB68C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.ConnectedChanged"), *(_QWORD *)(a1 + 32), 0);

}

void sub_1001BB798(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:userInfo:", CFSTR("com.apple.sharingd.ConnectedChanged"), 0, 0);

}

void sub_1001BB868(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeAirDropPersonInternal:", *(_QWORD *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

id sub_1001BB970(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "buildNodesAndNotify:", 1);
}

void sub_1001BBA44(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDConnectedBrowser: _CFURLGetVolumePropertyFlags returned %@", a5, a6, a7, a8, 2u);
}

void sub_1001BBAB0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDConnectedBrowser: getResourceValue %@", a5, a6, a7, a8, 2u);
}

uint64_t SDAutoUnlockDeviceRegistrationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_28;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001BCD84(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Attempting to intialize _NIRangingPeer with nil macAddress", v1, 2u);
}

void sub_1001BCF18(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "traitCollection"));
  v14[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithUserInterfaceIdiom:](UITraitCollection, "traitCollectionWithUserInterfaceIdiom:", objc_msgSend(v3, "userInterfaceIdiom")));
  v14[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v14, 2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithTraitsFromCollections:](UITraitCollection, "traitCollectionWithTraitsFromCollections:", v5));

  v9 = sub_10020CE1C(v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:inBundle:compatibleWithTraitCollection:](UIImage, "imageNamed:inBundle:compatibleWithTraitCollection:", CFSTR("UIActivityUserDefaults"), v10, v6));
  v12 = objc_claimAutoreleasedReturnValue(+[UIActivity _activityImageForActionRepresentationImage:](UIActivity, "_activityImageForActionRepresentationImage:", v11));
  v13 = (void *)qword_1007C6CC0;
  qword_1007C6CC0 = v12;

}

void sub_1001BD6B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 10))
  {
    *(_BYTE *)(v1 + 10) = 1;
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v3 + 9))
    {
      objc_msgSend((id)v3, "setSessionKeepAliveTransactionIdentifier:", 0);
      v3 = *(_QWORD *)(a1 + 32);
    }
    objc_msgSend(*(id *)(v3 + 24), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = 0;

    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 88);
    *(_QWORD *)(v8 + 88) = 0;

  }
}

void sub_1001BD738(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5) + 16))(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_1001BD92C(id a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = daemon_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1001C29C8();

}

void sub_1001BDD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BDDA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001BDDB4(uint64_t a1)
{

}

void sub_1001BDDBC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C29F4();

}

void sub_1001BDE0C(uint64_t a1, void *a2, char a3)
{
  _BYTE *v6;
  id v7;

  v7 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v6 = *(_BYTE **)(a1 + 40);
  if (v6)
    *v6 = a3;

}

void sub_1001BE490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001BE4EC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2AB4();

}

void sub_1001BE53C(uint64_t a1, void *a2, char a3)
{
  _BYTE *v6;
  id v7;

  v7 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v6 = *(_BYTE **)(a1 + 40);
  if (v6)
    *v6 = a3;

}

id sub_1001BE890(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "contactIDs"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", CFSTR(",")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringByAppendingFormat:", CFSTR("%@,%li,%f,%i,%li"), v4, *(_QWORD *)(a1 + 40), floor(*(double *)(a1 + 48)), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56)));

  return v5;
}

SharingXPCHelperImageItem *__cdecl sub_1001BE920(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  SharingXPCHelperImageItem *v4;
  SharingXPCHelperGroupContactIcon *v5;
  void *v6;
  id v7;
  void *v8;
  SharingXPCHelperGroupContactIcon *v9;

  v4 = a2;
  v5 = [SharingXPCHelperGroupContactIcon alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem contacts](v4, "contacts"));
  v7 = -[SharingXPCHelperImageItem iconIndex](v4, "iconIndex");
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem cacheLookupKey](v4, "cacheLookupKey"));

  v9 = -[SharingXPCHelperGroupContactIcon initWithContacts:icon:atIndex:cacheLookupKey:](v5, "initWithContacts:icon:atIndex:cacheLookupKey:", v6, a3, v7, v8);
  return (SharingXPCHelperImageItem *)v9;
}

id sub_1001BE9C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void ***v11;
  id v12;
  void **v14;
  uint64_t v15;
  id (*v16)(uint64_t, uint64_t);
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v3 = a2;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = sub_1001BDDA4;
  v28 = sub_1001BDDB4;
  v29 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "synchronousRemoteObjectProxyWithErrorHandler:", &stru_10071A370));
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(double *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 *)(a1 + 64);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1001BEBC0;
  v23[3] = &unk_10071A398;
  v23[4] = &v24;
  objc_msgSend(v4, "groupMonogramImageDataForContactsSync:style:diameter:backgroundStyle:monogramsAsFlatImages:replyHandler:", v3, v5, v7, v8, v23, v6);

  if (*(_BYTE *)(a1 + 65))
  {
    v9 = *(id *)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queuedBlocks"));
    v14 = _NSConcreteStackBlock;
    v15 = 3221225472;
    v16 = sub_1001BEBD0;
    v17 = &unk_10071A3C0;
    v18 = v3;
    v19 = v9;
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_BYTE *)(a1 + 64);
    v11 = objc_retainBlock(&v14);
    objc_msgSend(v10, "addObject:", v11, v14, v15, v16, v17);

  }
  v12 = (id)v25[5];
  _Block_object_dispose(&v24, 8);

  return v12;
}

void sub_1001BEB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001BEB70(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2B80();

}

void sub_1001BEBC0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_1001BEBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = sharingXPCHelperLog(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cache miss for %@ -> creating cache for opposite color too", (uint8_t *)&v7, 0xCu);
  }

  return objc_msgSend(*(id *)(a1 + 40), "groupMonogramImageDataForContacts:style:diameter:monogramsAsFlatImages:processOppositeBackgroundStyle:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), 0, *(double *)(a1 + 56));
}

void sub_1001BEE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001BEE80(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2BEC();

}

void sub_1001BEED0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_1001BF10C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[5];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "contactIDs", *(_QWORD *)(a1 + 32)));
  v10[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 40)));
  v10[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", floor(*(double *)(a1 + 48))));
  v10[3] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  v10[4] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v10, 5));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", CFSTR(",")));
  return v8;
}

SharingXPCHelperImageItem *__cdecl sub_1001BF224(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  SharingXPCHelperImageItem *v4;
  SharingXPCHelperContactIcon *v5;
  void *v6;
  id v7;
  void *v8;
  SharingXPCHelperContactIcon *v9;

  v4 = a2;
  v5 = [SharingXPCHelperContactIcon alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem contact](v4, "contact"));
  v7 = -[SharingXPCHelperImageItem iconIndex](v4, "iconIndex");
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem cacheLookupKey](v4, "cacheLookupKey"));

  v9 = -[SharingXPCHelperContactIcon initWithContact:icon:atIndex:cacheLookupKey:](v5, "initWithContact:icon:atIndex:cacheLookupKey:", v6, a3, v7, v8);
  return (SharingXPCHelperImageItem *)v9;
}

id sub_1001BF2C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  id v13;
  id obj;
  _QWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  _BYTE v28[128];

  v3 = a2;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = sub_1001BDDA4;
  v25 = sub_1001BDDB4;
  v26 = 0;
  v26 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v28, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "synchronousRemoteObjectProxyWithErrorHandler:", &stru_10071A498));
        v27 = v7;
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
        v10 = *(_QWORD *)(a1 + 40);
        v11 = *(double *)(a1 + 48);
        v12 = *(unsigned __int8 *)(a1 + 56);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_1001BF54C;
        v16[3] = &unk_10071A4C0;
        v16[4] = &v21;
        objc_msgSend(v8, "monogramImagesForMultipleContactsSync:style:diameter:monogramAsFlatImages:replyHandler:", v9, v10, v12, v16, v11);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v28, 16);
    }
    while (v4);
  }

  v13 = (id)v22[5];
  _Block_object_dispose(&v21, 8);

  return v13;
}

void sub_1001BF4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001BF4FC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2C58();

}

void sub_1001BF54C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSObject *v6;

  v4 = a2;
  if (!v4)
  {
    v5 = sharingXPCHelperLog(0, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1001C2CC4();

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObjectsFromArray:", v4);

}

void sub_1001BFC54(uint64_t a1, void *a2)
{
  id v3;
  SharingXPCHelperImageItem *v4;

  v3 = a2;
  v4 = -[SharingXPCHelperImageItem initWithImageTitle:]([SharingXPCHelperImageItem alloc], "initWithImageTitle:", v3);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
}

id sub_1001BFCB8(uint64_t a1, void *a2)
{
  int v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = *(void **)(a1 + 32);
  v5 = a2;
  if (v3)
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "keyDerivedFromRelevantTraitCollectionProperties"));
  else
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "keyDerivedFromRelevantTraitCollectionPropertiesWithOppositeUserInterfaceStyle"));
  v7 = (void *)v6;
  v8 = *(void **)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageTitle"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDXPCHelperConnection identifierForColor:](SDXPCHelperConnection, "identifierForColor:", *(_QWORD *)(a1 + 48)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByAppendingFormat:", CFSTR(",%@,%@,%@,"), v9, v10, v7));

  return v11;
}

SharingXPCHelperImageItem *__cdecl sub_1001BFD7C(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  SharingXPCHelperImageItem *v4;
  SharingXPCHelperImageItem *v5;
  void *v6;
  void *v7;
  SharingXPCHelperImageItem *v8;

  v4 = a2;
  v5 = [SharingXPCHelperImageItem alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem imageTitle](v4, "imageTitle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem cacheLookupKey](v4, "cacheLookupKey"));

  v8 = -[SharingXPCHelperImageItem initWithImageTitle:image:cacheLookupKey:](v5, "initWithImageTitle:image:cacheLookupKey:", v6, a3, v7);
  return v8;
}

id sub_1001BFE0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void ***v8;
  id v9;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v3 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = sub_1001BDDA4;
  v23 = sub_1001BDDB4;
  v24 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "synchronousRemoteObjectProxyWithErrorHandler:", &stru_10071A550));
  v5 = *(_QWORD *)(a1 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001C0000;
  v18[3] = &unk_10071A4C0;
  v18[4] = &v19;
  objc_msgSend(v4, "CGImgDataForUIActivityTitles:foregroundColor:replyHandler:", v3, v5, v18);

  if (*(_BYTE *)(a1 + 48))
  {
    v6 = *(id *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "queuedBlocks"));
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_1001C0010;
    v14 = &unk_100715138;
    v15 = v6;
    v16 = *(id *)(a1 + 40);
    v17 = v3;
    v8 = objc_retainBlock(&v11);
    objc_msgSend(v7, "addObject:", v8, v11, v12, v13, v14, v15);

  }
  v9 = (id)v20[5];
  _Block_object_dispose(&v19, 8);

  return v9;
}

void sub_1001BFF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001BFFB0(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2D6C();

}

void sub_1001C0000(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C0010(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getOppositeColor:", *(_QWORD *)(a1 + 40)));
  if (v2)
  {
    v3 = objc_alloc_init((Class)NSMutableArray);
    v4 = *(void **)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001C0150;
    v11[3] = &unk_10071A578;
    v5 = v3;
    v12 = v5;
    v6 = objc_msgSend(v4, "enumerateObjectsUsingBlock:", v11);
    v8 = sharingXPCHelperLog(v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Cache miss for %@ -> creating cache for opposite color too", buf, 0xCu);
    }

    v10 = objc_msgSend(*(id *)(a1 + 32), "CGImgForUIActivityTitles:foregroundColor:processOppositeColor:", v5, v2, 0);
  }

}

void sub_1001C0150(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "imageTitle"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1001C0194(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  if (objc_msgSend(v3, "image"))
  {
    v7 = (id)CFRetain(objc_msgSend(v3, "image"));
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageData"));
    v7 = (id)SFCreateCGImageFromData(v4);

  }
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageTitle"));

  objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, v6);
}

void sub_1001C05B8(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "MD5HashOfStrings:", *(_QWORD *)(a1 + 40)));
  v2 = +[SDXPCHelperImageCache cacheCount](_TtC16DaemoniOSLibrary21SDXPCHelperImageCache, "cacheCount");
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 64));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "mutableCopy");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeAllObjects");
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 64));
  if (*(_QWORD *)(a1 + 48))
    objc_msgSend(v5, "addEntriesFromDictionary:");
  v6 = objc_alloc_init((Class)SFShareSheetInvokedEvent);
  objc_msgSend(v6, "setAppBundleId:", *(_QWORD *)(a1 + 56));
  objc_msgSend(v6, "setNumberOfSuggestions:", *(_QWORD *)(a1 + 64));
  objc_msgSend(v6, "setSuggestionsHash:", v7);
  objc_msgSend(v6, "setDaemonPID:", getpid());
  objc_msgSend(v6, "setDurationInMS:", *(_QWORD *)(a1 + 72));
  objc_msgSend(v6, "setIsDarkMode:", *(unsigned __int8 *)(a1 + 80));
  objc_msgSend(v6, "setCacheFileCount:", v2);
  objc_msgSend(v6, "setTotalCacheAccessCount:", v4);
  objc_msgSend(v6, "setIsCollaborative:", *(unsigned __int8 *)(a1 + 81));
  objc_msgSend(v6, "setCacheAccessInfo:", v5);
  objc_msgSend(v6, "submitEvent");

}

void sub_1001C0B70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001C0B98(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2E04();

}

void sub_1001C0BE8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C0BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getOppositeColor:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)v2;
  if (v2)
  {
    v5 = sharingXPCHelperLog(v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = 138412290;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cache miss for text %@ -> creating cache for opposite color too", (uint8_t *)&v8, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "CGImgForNameLabelWithString:textColor:maxNumberOfLines:isAirDrop:ignoreNameWrapping:processOppositeColor:", *(_QWORD *)(a1 + 48), v4, *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), 0);
  }

}

void sub_1001C1028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1001C1048(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2E70();

}

void sub_1001C1098(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C10A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  int v9;
  uint64_t v10;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getOppositeColor:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)v2;
  if (v2)
  {
    v5 = sharingXPCHelperLog(v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v9 = 138412290;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cache miss for label %@ -> creating cache for opposite color too", (uint8_t *)&v9, 0xCu);
    }

    v8 = objc_msgSend(*(id *)(a1 + 32), "CGImgDataForActivityMoreListEntryForActivityTitle:labelColor:processOppositeColor:activityCategory:", *(_QWORD *)(a1 + 48), v4, 0, *(_QWORD *)(a1 + 56));
  }

}

void sub_1001C1420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C143C(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2EDC();

}

void sub_1001C148C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C16F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C170C(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2F48();

}

void sub_1001C175C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C1ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C1EE4(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C2FB4();

}

void sub_1001C1F34(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C206C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C2084(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C3020();

}

void sub_1001C20D4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C21E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C21FC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C308C();

}

void sub_1001C224C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C2384(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C30F8();

}

void sub_1001C23D4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C24C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C24DC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C3164();

}

void sub_1001C252C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1001C2694(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C31FC();

}

void sub_1001C2768(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  NSObject *v4;

  v2 = a2;
  v3 = daemon_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001C3268();

}

Class sub_1001C2878()
{
  Class result;

  if (qword_1007C6CD8 != -1)
    dispatch_once(&qword_1007C6CD8, &stru_10071A7C0);
  result = objc_getClass("INImageServiceConnection");
  qword_1007C6CD0 = (uint64_t)result;
  off_1007B34B8 = (uint64_t (*)())sub_1001C28D4;
  return result;
}

id sub_1001C28D4()
{
  return (id)qword_1007C6CD0;
}

void sub_1001C28E0(id a1)
{
  qword_1007C6CE0 = (uint64_t)dlopen("/System/Library/Frameworks/Intents.framework/Intents", 2);
}

double sub_1001C2908()
{
  __int128 *v0;

  if (qword_1007C6CD8 != -1)
    dispatch_once(&qword_1007C6CD8, &stru_10071A7C0);
  v0 = (__int128 *)dlsym((void *)qword_1007C6CE0, "INImageDefaultScaledSize");
  if (v0)
    xmmword_1007C6CE8 = *v0;
  off_1007B34C0 = (uint64_t (*)())sub_1001C297C;
  return *(double *)&xmmword_1007C6CE8;
}

double sub_1001C297C()
{
  return *(double *)&xmmword_1007C6CE8;
}

void sub_1001C298C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1001C299C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection deallocated without -invalidate call", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C29C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection makeActivatedConnection invalidationHandler", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C29F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2A60(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "copyConversationIdentityImageIconDataForImage: image does not exist at url (%@)", buf, 0xCu);

}

void sub_1001C2AB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_1001608B0((void *)&_mh_execute_header, v0, v1, "Share sheet host app config not set on %@ as expected.", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001C2B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2BEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2C58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2CC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "monogramImagesForMultipleContactsSync failed to return images", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C2CF0()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_100029230();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to fetch icon data from INImage %@ with error %@", v2, 0x16u);
  sub_10001949C();
}

void sub_1001C2D6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2DD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "CGImgForNameLabelWithString called with nil string.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C2E04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2EDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C2FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C3020()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C308C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C30F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C3164()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C31D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100039A84((void *)&_mh_execute_header, v0, v1, "_latestHostConfig = nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C31FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

void sub_1001C3268()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000C4E48();
  sub_1001C298C((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
  sub_10001949C();
}

Class sub_1001C38A8()
{
  Class result;

  if (qword_1007C6D00 != -1)
    dispatch_once(&qword_1007C6D00, &stru_10071A7E0);
  result = objc_getClass("LPLinkMetadata");
  qword_1007C6CF8 = (uint64_t)result;
  off_1007B34C8 = (uint64_t (*)())sub_1001C3904;
  return result;
}

id sub_1001C3904()
{
  return (id)qword_1007C6CF8;
}

void sub_1001C3910(id a1)
{
  qword_1007C6D08 = (uint64_t)dlopen("/System/Library/Frameworks/LinkPresentation.framework/LinkPresentation", 2);
}

Class sub_1001C3938()
{
  Class result;

  if (qword_1007C6D00 != -1)
    dispatch_once(&qword_1007C6D00, &stru_10071A7E0);
  result = objc_getClass("LPImage");
  qword_1007C6D10 = (uint64_t)result;
  off_1007B34D0 = (uint64_t (*)())sub_1001C3994;
  return result;
}

id sub_1001C3994()
{
  return (id)qword_1007C6D10;
}

void sub_1001C40C4(uint64_t a1, char a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSErrorUserInfoKey v13;
  const __CFString *v14;

  v5 = a3;
  v7 = v5;
  if ((a2 & 1) == 0)
  {
    v8 = streams_log(v5, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1001C5D10();

    v10 = *(void **)(a1 + 32);
    v13 = NSLocalizedDescriptionKey;
    v14 = CFSTR("Could not send request to other device");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 55, v11));
    objc_msgSend(v10, "notifyStreamRequestWithError:", v12);

    objc_msgSend(*(id *)(a1 + 32), "stop");
  }

}

void sub_1001C43DC(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;

  v5 = a3;
  v7 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "switchToStreaming");
  }
  else
  {
    v8 = streams_log(v5, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1001C5D74();

    objc_msgSend(*(id *)(a1 + 32), "stop");
  }

}

uint64_t sub_1001C4964(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  result = objc_opt_respondsToSelector(a3, "stream:handleEvent:");
  if ((result & 1) != 0)
    return (uint64_t)_objc_msgSend(a3, "stream:handleEvent:", a1, a2);
  return result;
}

id sub_1001C4E6C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendInitialResponse:", a2);
}

void sub_1001C5D10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "Error sending initial request = %@", v2);
  sub_10001949C();
}

void sub_1001C5D74()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "Error sending initial response = %@", v2);
  sub_10001949C();
}

void sub_1001C5DD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Creating file handle failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C5E04()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "Error getting streams = %@", v2);
  sub_10001949C();
}

void sub_1001C5E68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to set buffer size on socket", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C5E94(NSObject *a1)
{
  int *v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = __error();
  strerror(*v2);
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a1, v3, "Could not create sock pair = %s", v4);
  sub_1000332E4();
}

void sub_1001C5F10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "Unarchiving stream handler failed: %@", v2);
  sub_10001949C();
}

void sub_1001C5F74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No type in stream handler message", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C5FA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No service in request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C5FCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create file handles", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C5FF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Received NSStreamEventHasBytesAvailable on a stream other than an input stream", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C6024(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "streamError"));
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a2, v4, "Client stream received error = %@", v5);

  sub_1000332E4();
}

void sub_1001C60A4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, v0, v1, "Error writing to client output stream, writeLength = %ld", v2);
  sub_10001949C();
}

void sub_1001C6108()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Read zero bytes from the client stream", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001C6134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No stream data to write to network", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

uint64_t SDUnlockLongTermKeyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t String;
  uint64_t v19;
  uint64_t v20;
  uint64_t Data;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_38;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 24) = v14;
        continue;
      case 2u:
        String = PBReaderReadString(a2);
        v19 = objc_claimAutoreleasedReturnValue(String);
        v20 = 16;
        goto LABEL_29;
      case 3u:
        Data = PBReaderReadData(a2);
        v19 = objc_claimAutoreleasedReturnValue(Data);
        v20 = 8;
LABEL_29:
        v22 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        continue;
      case 4u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v25 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0)
        goto LABEL_42;
      v23 += 7;
      v9 = v24++ >= 9;
      if (v9)
      {
        v25 = 0;
        goto LABEL_44;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v25 = 0;
LABEL_44:
    *(_BYTE *)(a1 + 28) = v25 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1001C747C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Retry setup device timer fired", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setSetupRetryDeviceTimer:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setSetupRetryDeviceID:", 0);
}

int64_t sub_1001C76A0(id a1, SFAutoUnlockDevice *a2, SFAutoUnlockDevice *a3)
{
  SFAutoUnlockDevice *v4;
  SFAutoUnlockDevice *v5;
  id v6;
  int64_t v7;
  id v8;

  v4 = a2;
  v5 = a3;
  v6 = -[SFAutoUnlockDevice type](v4, "type");
  if ((uint64_t)v6 >= (uint64_t)-[SFAutoUnlockDevice type](v5, "type"))
  {
    v8 = -[SFAutoUnlockDevice type](v4, "type");
    v7 = (uint64_t)v8 > (uint64_t)-[SFAutoUnlockDevice type](v5, "type");
  }
  else
  {
    v7 = -1;
  }

  return v7;
}

id sub_1001C7970(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suggested device timer fired", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setDeviceTimer:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setSuggestedDeviceID:", 0);
}

id sub_1001C7C54(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suggestion service timer fired", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "invalidateSuggestionService");
}

void sub_1001C81DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001C821C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = objc_msgSend(v3, "copy");

  objc_msgSend(WeakRetained, "handleFoundPeer:", v4);
}

void sub_1001C8278(id a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = auto_unlock_log(a1);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scanner invalidated", v3, 2u);
  }

}

void sub_1001C82DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13[16];

  v3 = a2;
  v4 = auto_unlock_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1001C9A30((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);

    objc_msgSend(*(id *)(a1 + 32), "invalidateScanner");
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scanner started", v13, 2u);
    }

  }
}

id sub_1001C888C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suggestion scan timer fired", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "postNotificationIfNeeded");
  return objc_msgSend(*(id *)(a1 + 32), "invalidateScanner");
}

void sub_1001C8AC8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1001C9A98(a1, v3, v4, v5, v6, v7, v8, v9);

}

void sub_1001C8BDC(uint64_t a1)
{
  SDAutoUnlockStartAdvertising *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const __CFString *v8;
  id v9;
  void *v10;
  unsigned int v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint8_t buf[4];
  const __CFString *v17;
  __int16 v18;
  SDAutoUnlockStartAdvertising *v19;

  if (*(_WORD *)(a1 + 56) == 401 && *(_QWORD *)(a1 + 32))
  {
    v2 = -[SDAutoUnlockStartAdvertising initWithData:]([SDAutoUnlockStartAdvertising alloc], "initWithData:", *(_QWORD *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v4 = objc_msgSend(v3, "deviceRequiresNewRanging");

    v6 = auto_unlock_log(v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = CFSTR("NO");
      if (v4)
        v8 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v17 = v8;
      v18 = 2112;
      v19 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeStartAdvertising (new ranging required: %@, message: %@)", buf, 0x16u);
    }

    if (v4 && (v9 = (id)-[SDAutoUnlockStartAdvertising version](v2, "version"), (_DWORD)v9 != 2))
    {
      v14 = auto_unlock_log(v9);
      v13 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Skipping response advertisement because Mac OS version is too old", buf, 2u);
      }
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
      v11 = objc_msgSend(v10, "ltkExistsForKeyDevice:", *(_QWORD *)(a1 + 32));

      if (v11)
      {
        v12 = *(void **)(a1 + 48);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_1001C8DD8;
        v15[3] = &unk_1007142E0;
        v15[4] = v12;
        objc_msgSend(v12, "watchAvailableForUnlockWithCompletionHandler:", v15);
LABEL_15:

        return;
      }
      v13 = objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](SDAutoUnlockAKSManager, "sharedManager"));
      -[NSObject updateLTKs](v13, "updateLTKs");
    }

    goto LABEL_15;
  }
}

id *sub_1001C8DD8(id *result, int a2)
{
  if (a2)
    return (id *)_objc_msgSend(result[4], "updateSuggestionService");
  return result;
}

id sub_1001C97D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidateScanner");
}

id sub_1001C9838(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "triggerDevicesIfNeeded");
}

void sub_1001C9A30(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Scanner error: %@", a5, a6, a7, a8, 2u);
}

void sub_1001C9A98(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error sending message to start advertising to %@", a5, a6, a7, a8, 2u);
}

void sub_1001C9FBC(id a1)
{
  SDStatusMonitor *v1;
  void *v2;

  v1 = objc_alloc_init(SDStatusMonitor);
  v2 = (void *)qword_1007C6D20;
  qword_1007C6D20 = (uint64_t)v1;

}

void sub_1001CBB80(_QWORD *a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[5];

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    v7 = (void *)a1[4];
    v8 = a1[5];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001CBC30;
    v11[3] = &unk_1007148C8;
    v11[4] = a1[6];
    objc_msgSend(v7, "saveVerifiedAccount:withCompletionHandler:", v8, v11);
  }
  else
  {
    v9 = tethering_log(v5);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1001D8DB0();

  }
}

void sub_1001CBC30(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;

  v4 = a3;
  v5 = tethering_log(v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1001D8E10();

  objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.AltDSIDChanged"));
}

void sub_1001CD62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CD654(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001CD664(uint64_t a1)
{

}

void sub_1001CD66C(uint64_t a1, void *a2, _BYTE *a3)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  *a3 = 1;
}

id sub_1001CDB90(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v8;
  uint64_t v9;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v8 = 138412290;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Reset meCard called with reason: %@", (uint8_t *)&v8, 0xCu);
  }

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(v5 + 688);
  *(_QWORD *)(v5 + 688) = 0;

  return objc_msgSend(*(id *)(a1 + 40), "meCard");
}

void sub_1001CE31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001CE35C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  _UNKNOWN **v8;
  void *v9;
  unint64_t v10;
  const char *v11;
  void *v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  void *v18;
  unint64_t v19;
  const char *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("FamilyHotspotIdentifier")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("FamilyHotspotDisplayName")));
  v8 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("FamilyHotspotSharingMode")));

  if ((uint64_t)objc_msgSend(v8, "integerValue") >= 3)
  {

    v8 = &off_10074BAA8;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v9 = *(void **)(a1 + 32);
    v10 = (unint64_t)objc_msgSend(v8, "integerValue");
    if (v10 > 2)
      v11 = "?";
    else
      v11 = off_10071ADB0[v10];
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("'%@' -> %s"), v7, v11));
    objc_msgSend(v9, "appendString:", v18);

    if ((char *)objc_msgSend(*(id *)(a1 + 40), "count") - 1 != a3)
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(", "));
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 408), "objectForKeyedSubscript:", v6));
    v13 = (unint64_t)objc_msgSend(v12, "integerValue");

    v14 = objc_msgSend(v8, "integerValue");
    if ((id)v13 != v14)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      v15 = daemon_log(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (v13 > 2)
          v17 = "?";
        else
          v17 = off_10071ADB0[v13];
        v19 = (unint64_t)objc_msgSend(v8, "integerValue");
        if (v19 > 2)
          v20 = "?";
        else
          v20 = off_10071ADB0[v19];
        *(_DWORD *)buf = 138412802;
        v22 = v7;
        v23 = 2080;
        v24 = v17;
        v25 = 2080;
        v26 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Family hotspot state updated: '%@' : %s -> %s", buf, 0x20u);
      }

    }
  }
  if (!objc_msgSend(v8, "integerValue"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 408), "setObject:forKeyedSubscript:", v8, v6);

}

id sub_1001CE948(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Added reason to prevent locale change exit (reason %@)", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 512), "addReason:", *(_QWORD *)(a1 + 32));
}

id sub_1001CEAB8(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[4];
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Pushed expiration date of reason to prevent locale change exit (reason %@)", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(a1[5] + 512), "pushPreventionDateForReason:newDate:", a1[4], a1[6]);
}

id sub_1001CEC04(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removed reason to prevent locale change exit (reason %@)", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 512), "removeReason:", *(_QWORD *)(a1 + 32));
}

void sub_1001CF34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CF36C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "bluetoothDidSetPowerStateWithError:", v3);

}

void sub_1001CF418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001D182C(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = -[objc_class sharedManager](off_1007B3778(), "sharedManager");
  v3 = (id)objc_claimAutoreleasedReturnValue(v1);
  if ((objc_msgSend(v3, "isMultiUser") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentUser"));
    byte_1007C6D28 = objc_msgSend(v2, "userType") == (id)1;

  }
  else
  {
    byte_1007C6D28 = 0;
  }

}

id sub_1001D2154(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "clearMyAppleIDInfo");
  objc_msgSend(a2, "updateDiscoverableMode");
  return objc_msgSend(a2, "postNotification:", CFSTR("com.apple.sharingd.AppleIDChanged"));
}

void sub_1001D2B7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  id v8;
  int v9;
  const char *v10;

  v5 = daemon_log(a1);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "non-null";
    if (!a2)
      v7 = "null";
    v9 = 136315138;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SDStatusMonitor: wirelessDeviceCallBack(device %s)", (uint8_t *)&v9, 0xCu);
  }

  v8 = a3;
  objc_msgSend(v8, "forceAWDLDeviceRefresh:", a2);
  objc_msgSend(v8, "updateWirelessDevice");

}

void sub_1001D2C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v10;
  uint64_t v11;

  v7 = daemon_log(a1);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412290;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WiFiManagerClientRegisterVirtInterfaceChangeCallback called for WiFiDeviceClient device %@", (uint8_t *)&v10, 0xCu);
  }

  v9 = a5;
  objc_msgSend(v9, "forceAWDLDeviceRefresh:", a2);
  objc_msgSend(v9, "updateWirelessDevice");

}

id sub_1001D2D24(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "logWiFiPowerState");
  objc_msgSend(a2, "clearWirelessState");
  objc_msgSend(a2, "updateAWDLStateInfo");
  objc_msgSend(a2, "updateDiscoverableMode");
  return objc_msgSend(a2, "postNotification:", CFSTR("com.apple.sharingd.WirelessPowerChanged"));
}

id sub_1001D2D6C(uint64_t a1, uint64_t a2, void *a3)
{
  objc_msgSend(a3, "handleAWDLState:", a2);
  return objc_msgSend(a3, "postNotification:", CFSTR("com.apple.sharingd.VirtualInterfacesChanged"));
}

void sub_1001D2DA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  uint8_t buf[4];
  const __CFString *v12;

  v5 = daemon_log(a1);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("YES");
    if (!a2)
      v7 = CFSTR("NO");
    *(_DWORD *)buf = 138412290;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Host AP state changed (event data: %@)", buf, 0xCu);
  }

  v9 = CFSTR("HostAPEventData");
  v10 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
  objc_msgSend(a3, "postNotification:userInfo:", CFSTR("com.apple.sharingd.HotspotHostAPStateChanged"), v8);

}

id sub_1001D2EA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  int v9;
  const __CFString *v10;

  v5 = daemon_log(a1);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    if ((_DWORD)a2)
      v7 = CFSTR("YES");
    v9 = 138412290;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "wirelessCriticalCallback inCriticalState=%@", (uint8_t *)&v9, 0xCu);
  }

  return objc_msgSend(a3, "updateWirelessCritical:", a2);
}

void sub_1001D2FF4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id location;

  v2 = objc_alloc_init((Class)CWFInterface);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 664);
  *(_QWORD *)(v3 + 664) = v2;

  location = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001D31E4;
  v20[3] = &unk_10071AAF0;
  objc_copyWeak(&v21, &location);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 664), "setEventHandler:", v20);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 664), "activate");
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 664);
  v19 = 0;
  objc_msgSend(v5, "startMonitoringEventType:error:", 3, &v19);
  v6 = v19;
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 664);
  v18 = v6;
  objc_msgSend(v7, "startMonitoringEventType:error:", 8, &v18);
  v8 = v18;

  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 664);
  v17 = v8;
  objc_msgSend(v9, "startMonitoringEventType:error:", 1, &v17);
  v10 = v17;

  if (v10)
  {
    v12 = daemon_log(v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1001D9468();

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 664), "invalidate");
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(v14 + 664);
    *(_QWORD *)(v14 + 664) = 0;

  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1001D3314;
  v16[3] = &unk_1007146D8;
  v16[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v16);

  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);
}

void sub_1001D31C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1001D31E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001D3288;
  v5[3] = &unk_100714468;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_1001D3288(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Got BSSID event, checking channel and wifi state\n", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "updateWifiState:", objc_msgSend(*(id *)(a1 + 32), "type"));

}

id sub_1001D3314(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateWifiState:", 1);
}

id sub_1001D365C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t state64;

  state64 = 0;
  notify_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 72), &state64);
  v2 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", state64 != 0));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;

  return objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.BacklightChanged"));
}

void sub_1001D382C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1001D3848(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "d2dEncryptionChanged");

}

void sub_1001D3A9C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_1001D3ADC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "bluetoothStateChanged");

}

void sub_1001D3B08(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "bluetoothMonitorInvalidated");

}

void sub_1001D3B34(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "bluetoothActivatedWithError:", v3);

}

void sub_1001D3B7C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "bluetoothStateChanged");

}

void sub_1001D3F7C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "installBluetoothMonitor");

}

id sub_1001D4088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return _objc_msgSend(a7, "handleNameMonitorCallBack:flags:error:", a4, a2, a3);
}

void sub_1001D4598(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  objc_msgSend(*(id *)(a1 + 32), "updateDiscoverableMode");
  v2 = daemon_log(objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.WirelessCarPlayChanged")));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless CarPlay session state changed.", v4, 2u);
  }

}

uint64_t sub_1001D480C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Contact store did change notification received", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.ContactsChanged"));
  return notify_post("com.apple.sharing.privacy-changed");
}

uint64_t sub_1001D48E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MeCard changed notification received", v5, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "clearMyIconAndHash");
  objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.ContactsChanged"));
  return notify_post("com.apple.sharing.privacy-changed");
}

void sub_1001D4B68(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    objc_msgSend(v3, "fetchLTEShows4GWithContext:", v4);
    objc_msgSend(*(id *)(a1 + 32), "fetchDataStatusWithContext:", v4);
    objc_msgSend(*(id *)(a1 + 32), "fetchSIMStatusWithContext:", v4);
    objc_msgSend(*(id *)(a1 + 32), "fetchSignalStrengthWithContext:", v4);

  }
}

void sub_1001D4C50(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v8 = daemon_log(v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v12 = 138412290;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched preferred data context %@", (uint8_t *)&v12, 0xCu);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
  }
  else
  {
    v10 = daemon_log(v6);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1001D9588();

  }
}

void sub_1001D4E04(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = daemon_log(v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1001D95E8();

  }
  else
  {
    v10 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v5, v10) & 1) != 0)
      v11 = objc_msgSend(v5, "isEqualToString:", CFSTR("4G"));
    else
      v11 = 0;
    objc_msgSend(*(id *)(a1 + 32), "updateLTEShows4G:", v11);
  }

}

void sub_1001D4F10(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateSIMStatus:", a2);
  }
  else
  {
    v7 = daemon_log(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1001D9648();

  }
}

void sub_1001D4FDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateDataStatus:", a2);
  }
  else
  {
    v7 = daemon_log(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1001D96A8();

  }
}

void sub_1001D50A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateSignalStrength:", a2);
  }
  else
  {
    v7 = daemon_log(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1001D9708();

  }
}

void sub_1001D5630(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    objc_msgSend(v3, "fetchLTEShows4GWithContext:", v4);
    objc_msgSend(*(id *)(a1 + 32), "fetchDataStatusWithContext:", v4);
    objc_msgSend(*(id *)(a1 + 32), "fetchSIMStatusWithContext:", v4);
    objc_msgSend(*(id *)(a1 + 32), "fetchSignalStrengthWithContext:", v4);

  }
}

id *sub_1001D56EC(id *result, uint64_t a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "fetchSIMStatusWithContext:", a2);
  return result;
}

id *sub_1001D5750(id *result, uint64_t a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "fetchDataStatusWithContext:", a2);
  return result;
}

id *sub_1001D57B4(id *result, uint64_t a2)
{
  if (a2)
    return (id *)objc_msgSend(result[4], "fetchSignalStrengthWithContext:", a2);
  return result;
}

id sub_1001D5C80(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "handleDynamicStoreCallback:changedKeys:", a1, a2);
}

id sub_1001D5D0C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSNumber *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 192))
  {
    v3 = MKBDeviceUnlockedSinceBoot(a1);
    v2 = *(_QWORD *)(a1 + 32);
    if (v3 == 1)
    {
      *(_BYTE *)(v2 + 192) = 1;
      objc_msgSend(*(id *)(a1 + 32), "installContactsMonitor");
      objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.KeyBagFirstUnlock"));
      v2 = *(_QWORD *)(a1 + 32);
    }
  }
  v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", MKBGetDeviceLockState(*(_QWORD *)(v2 + 656)));
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 168);
  *(_QWORD *)(v6 + 168) = v5;

  return objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.KeyBagLockStatusChanged"));
}

void sub_1001D5E14(id a1, BOOL a2)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sharingd Exiting...", v4, 2u);
  }

  exit(0);
}

void sub_1001D5E70(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD block[4];
  id v10;
  uint8_t buf[16];

  v3 = daemon_log(a1);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current language changed", buf, 2u);
  }

  +[SDXPCHelperImageCache clearCacheWithSync:](_TtC16DaemoniOSLibrary21SDXPCHelperImageCache, "clearCacheWithSync:", 1);
  v5 = a2;
  v6 = objc_opt_self(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_sync_enter(v7);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D8CCC;
  block[3] = &unk_1007146D8;
  v10 = v5;
  v8 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_sync_exit(v7);
}

id sub_1001D6504(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.PowerSourceChanged"));
}

void sub_1001D697C(uint64_t a1, const void *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const void *v14;

  v4 = daemon_log(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_1001D9950();

  if (!CFEqual(a2, SBSEventObserverEventDimmed) && !CFEqual(a2, SBSEventObserverEventUndimmed))
  {
    if (CFEqual(a2, SBSEventObserverEventContinuityUIWasObscured))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(void **)(v6 + 224);
      v8 = &__kCFBooleanFalse;
LABEL_9:
      *(_QWORD *)(v6 + 224) = v8;

      objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.HandoffVisibilityChanged"));
      goto LABEL_10;
    }
    v9 = CFEqual(a2, SBSEventObserverEventContinuityUIBecameVisible);
    if ((_DWORD)v9)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(void **)(v6 + 224);
      v8 = &__kCFBooleanTrue;
      goto LABEL_9;
    }
    v11 = daemon_log(v9);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SDStatusMonitor: SBSEventObserved unknown event %@", (uint8_t *)&v13, 0xCu);
    }

  }
LABEL_10:
  if (CFEqual(a2, SBSEventObserverEventContinuityUIBecameVisible))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.sharing.SpringBoard.startDiscovery"), 0, 0, 1u);
  }
}

void sub_1001D7360(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  void *v10;
  _DWORD v11[2];

  v4 = a3;
  v5 = v4 != 0;
  v6 = daemon_log(v4);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = v4 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Mirroring active state changed: %d", (uint8_t *)v11, 8u);
  }

  pthread_mutex_lock(&stru_1007B3728);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(unsigned __int8 *)(v8 + 680);
  *(_BYTE *)(v8 + 680) = v5;
  pthread_mutex_unlock(&stru_1007B3728);
  if (v9 != v5)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v10, "postNotificationName:object:", CFSTR("com.apple.sharingd.MirroringStateChanged"), 0);

  }
}

void sub_1001D74EC(uint64_t a1)
{
  uint64_t state;
  int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t state64;
  uint8_t buf[4];
  uint64_t v14;

  state64 = 0;
  state = notify_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 492), &state64);
  v3 = state;
  v4 = daemon_log(state);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1001D9AA0();

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v14 = state64;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "UI locked state changed %llu", buf, 0xCu);
    }

    v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", state64 == 0));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 184);
    *(_QWORD *)(v8 + 184) = v7;

    if (state64)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(v10 + 472);
      *(_QWORD *)(v10 + 472) = 0;

    }
    objc_msgSend(*(id *)(a1 + 32), "postNotification:", CFSTR("com.apple.sharingd.UILockStatusChanged"));
  }
}

void sub_1001D7A44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  NSObject *v5;
  id *v6;
  id v7;
  uint8_t v8[16];

  v4 = daemon_log(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WiFi Preferences changed callback, purging ssid cache", v8, 2u);
  }

  v6 = a3;
  pthread_mutex_lock(&stru_1007B3728);
  objc_msgSend(v6[59], "removeAllObjects");
  v7 = v6[59];
  v6[59] = 0;

  pthread_mutex_unlock(&stru_1007B3728);
  objc_msgSend(v6, "updateAutoHotspotState");
  objc_msgSend(v6, "updateFamilyHotspotState");

}

id sub_1001D82F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_expireEveryoneModeAndOnlySetDefault:", 0);
}

Class sub_1001D87C0()
{
  Class result;

  if (qword_1007C6D60 != -1)
    dispatch_once(&qword_1007C6D60, &stru_10071ACB8);
  result = objc_getClass("TUPrivacyManager");
  qword_1007C6D58 = (uint64_t)result;
  off_1007B3768 = (uint64_t (*)())sub_1001D881C;
  return result;
}

id sub_1001D881C()
{
  return (id)qword_1007C6D58;
}

void sub_1001D8828(id a1)
{
  qword_1007C6D68 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
}

Class sub_1001D8850()
{
  Class result;

  if (qword_1007C6D60 != -1)
    dispatch_once(&qword_1007C6D60, &stru_10071ACB8);
  result = objc_getClass("TUPhoneNumber");
  qword_1007C6D70 = (uint64_t)result;
  off_1007B3770 = (uint64_t (*)())sub_1001D88AC;
  return result;
}

id sub_1001D88AC()
{
  return (id)qword_1007C6D70;
}

uint64_t sub_1001D88B8()
{
  if (qword_1007C6D60 != -1)
    dispatch_once(&qword_1007C6D60, &stru_10071ACB8);
  off_1007B3990 = (uint64_t (*)())dlsym((void *)qword_1007C6D68, "TUHomeCountryCode");
  return off_1007B3990();
}

Class sub_1001D890C()
{
  Class result;

  if (qword_1007C6D80 != -1)
    dispatch_once(&qword_1007C6D80, &stru_10071ACD8);
  result = objc_getClass("UMUserManager");
  qword_1007C6D78 = (uint64_t)result;
  off_1007B3778 = (uint64_t (*)())sub_1001D8968;
  return result;
}

id sub_1001D8968()
{
  return (id)qword_1007C6D78;
}

void sub_1001D8974(id a1)
{
  qword_1007C6D88 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
}

Class sub_1001D899C()
{
  Class result;

  if (qword_1007C6D98 != -1)
    dispatch_once(&qword_1007C6D98, &stru_10071ACF8);
  result = objc_getClass("BLSBacklight");
  qword_1007C6D90 = (uint64_t)result;
  off_1007B3780 = (uint64_t (*)())sub_1001D89F8;
  return result;
}

id sub_1001D89F8()
{
  return (id)qword_1007C6D90;
}

void sub_1001D8A04(id a1)
{
  qword_1007C6DA0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BacklightServices.framework/BacklightServices", 2);
}

Class sub_1001D8A2C()
{
  Class result;

  if (qword_1007C6DB0 != -1)
    dispatch_once(&qword_1007C6DB0, &stru_10071AD18);
  result = objc_getClass("AVSystemController");
  qword_1007C6DA8 = (uint64_t)result;
  off_1007B3788 = (uint64_t (*)())sub_1001D8A88;
  return result;
}

id sub_1001D8A88()
{
  return (id)qword_1007C6DA8;
}

void sub_1001D8A94(id a1)
{
  qword_1007C6DB8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
}

id sub_1001D8ABC()
{
  id *v0;

  if (qword_1007C6DB0 != -1)
    dispatch_once(&qword_1007C6DB0, &stru_10071AD18);
  v0 = (id *)dlsym((void *)qword_1007C6DB8, "AVSystemController_CarPlayIsConnectedAttribute");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6D40, *v0);
  off_1007B3790 = (uint64_t (*)())sub_1001D8B34;
  return (id)qword_1007C6D40;
}

id sub_1001D8B34()
{
  return (id)qword_1007C6D40;
}

id sub_1001D8B40()
{
  id *v0;

  if (qword_1007C6DB0 != -1)
    dispatch_once(&qword_1007C6DB0, &stru_10071AD18);
  v0 = (id *)dlsym((void *)qword_1007C6DB8, "AVSystemController_ServerConnectionDiedNotification");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6D38, *v0);
  off_1007B3798 = (uint64_t (*)())sub_1001D8BB8;
  return (id)qword_1007C6D38;
}

id sub_1001D8BB8()
{
  return (id)qword_1007C6D38;
}

id sub_1001D8BC4()
{
  id *v0;

  if (qword_1007C6DB0 != -1)
    dispatch_once(&qword_1007C6DB0, &stru_10071AD18);
  v0 = (id *)dlsym((void *)qword_1007C6DB8, "AVSystemController_CarPlayIsConnectedDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6D48, *v0);
  off_1007B37A0 = (uint64_t (*)())sub_1001D8C3C;
  return (id)qword_1007C6D48;
}

id sub_1001D8C3C()
{
  return (id)qword_1007C6D48;
}

id sub_1001D8C48()
{
  id *v0;

  if (qword_1007C6DB0 != -1)
    dispatch_once(&qword_1007C6DB0, &stru_10071AD18);
  v0 = (id *)dlsym((void *)qword_1007C6DB8, "AVSystemController_SubscribeToNotificationsAttribute");
  if (v0)
    objc_storeStrong((id *)&qword_1007C6D50, *v0);
  off_1007B37A8 = (uint64_t (*)())sub_1001D8CC0;
  return (id)qword_1007C6D50;
}

id sub_1001D8CC0()
{
  return (id)qword_1007C6D50;
}

id sub_1001D8CCC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = daemon_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "currentLocalChanged", v5, 2u);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 512), "scheduleOperation");
}

uint64_t sub_1001D8D50()
{
  return SCError();
}

void sub_1001D8D58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SecCertificateCopyCommonNames returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D8D84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SecCertificateCopyCommonNames returned empty array", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D8DB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Could not fix Alt-DSID error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D8E10()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_1001D8D40();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x12u);
  sub_10001949C();
}

void sub_1001D8E8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "addAdditionalInformationToMeCard: _myAppleID = nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D8EB8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;

  v2 = 141558275;
  v3 = 1752392040;
  v4 = 2113;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "addAdditionalInformationToMeCard: accountForAppleID (%{private, mask.hash}@) = nil", (uint8_t *)&v2, 0x16u);
  sub_10001949C();
}

void sub_1001D8F3C()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100029230();
  sub_1001D8D40();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x16u);
  sub_10001949C();
}

void sub_1001D8FB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Adding additional information to me-card if needed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D8FDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "No me-card set", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9008()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to retrieve me-card due to %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D9068()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100020208();
  sub_1001D8D40();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0xEu);
  sub_10001949C();
}

void sub_1001D90DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Tethering active but no ssid found for hotspot.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9108()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: setWirelessEnabled _wifiManager is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "_awdlDevice is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9160()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "WiFiDeviceClientCopyInterfaceStateInfo returned NULL state", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D918C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "WiFiDeviceClientCopyInterfaceStateInfo returned error %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D91EC(NSObject *a1)
{
  int v2;
  _DWORD v3[2];

  v2 = *__error();
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "sysctl returned %d", (uint8_t *)v3, 8u);
  sub_10001949C();
}

void sub_1001D9274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SecIdentityCopyCertificate returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D92D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "altDSID is nil", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "altDSID is equal to primary email", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D932C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "altDSID is equal to Apple ID account", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: SBGetScreenLockStatus returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D93B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFiManagerClientCreate returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D93E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFi device found on startup", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9410()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFiManagerClientCopyDevices returned NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D943C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFiManagerClientCopyDevices is empty", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D94C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: DNSServiceSetDispatchQueue returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: DNSServiceRegister returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9588()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CoreTelephony missing data preferred context %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D95E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CoreTelephony copyCarrierBundleValueWithDefault failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D9648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CoreTelephony getSIMStatus failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D96A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CoreTelephony getDataStatus failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D9708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "CoreTelephony getSignalStrengthInfo failed %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001D9768(NSObject *a1)
{
  int v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = sub_1001D8D50();
  SCErrorString(v2);
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a1, v3, "SCDynamicStoreCreate failed: %s", v4);
  sub_1000332E4();
}

void sub_1001D97DC(NSObject *a1)
{
  int v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = sub_1001D8D50();
  SCErrorString(v2);
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a1, v3, "SCDynamicStoreSetNotificationKeys failed: %s", v4);
  sub_1000332E4();
}

void sub_1001D9850(NSObject *a1)
{
  int v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = sub_1001D8D50();
  SCErrorString(v2);
  sub_100029230();
  sub_1000161F0((void *)&_mh_execute_header, a1, v3, "SCDynamicStoreCreateRunLoopSource failed: %s", v4);
  sub_1000332E4();
}

void sub_1001D98C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: handleNameMonitorCallBack returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9924()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: IORegisterForSystemPower failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9950()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100029230();
  sub_1000332D8((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: SBSEventObserved %@", v2);
  sub_10001949C();
}

void sub_1001D99B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Backlight activating", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D99E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_100088B04((void *)&_mh_execute_header, v0, v1, "Backlight deactivating", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9A0C(void *a1, uint64_t a2, NSObject *a3)
{
  unsigned int v4;
  uint64_t v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;

  v4 = objc_msgSend(a1, "isScreenOnForBacklightState:", a2);
  v6 = CFSTR("Off");
  if (v4)
    v6 = CFSTR("On");
  v7 = 138412290;
  v8 = v6;
  sub_1000332D8((void *)&_mh_execute_header, a3, v5, "Backlight didCompleteUpdatingScreenOnState to %@", (uint8_t *)&v7);
  sub_1000332E4();
}

void sub_1001D9AA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100020208();
  sub_1000201C4((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: notify_get_state returned %d", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9B00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "### Failed to make ssid prefs?", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001D9CBC(id a1)
{
  SDUnlockKeyManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDUnlockKeyManager);
  v2 = (void *)qword_1007C6DC0;
  qword_1007C6DC0 = (uint64_t)v1;

}

void sub_1001DA5CC(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getWatchNameForTesting"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDHUDManager shared](SDHUDManager, "shared"));
  objc_msgSend(v1, "postPairedUnlockBannerFor:needsLockButton:needsUpdate:", v2, 0, 0);

}

void sub_1001DA628(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getWatchNameForTesting"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDHUDManager shared](SDHUDManager, "shared"));
  objc_msgSend(v1, "postPairedUnlockBannerFor:needsLockButton:needsUpdate:", v2, 1, 1);

}

void sub_1001DA684(id a1, int a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDHUDManager shared](SDHUDManager, "shared"));
  objc_msgSend(v2, "updatePairedUnlockBannerToUnlocked");

}

void sub_1001DA6B8(id a1, int a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[SDHUDManager shared](SDHUDManager, "shared"));
  objc_msgSend(v2, "dismissPairedUnlockBanner");

}

id sub_1001DA888(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const __CFString *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t v20[24];

  objc_msgSend(*(id *)(a1 + 32), "setAutoUnlockEnabledUpdatedAfterFirstUnlock:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = objc_msgSend(v2, "deviceKeyBagUnlocked");

  if (v3)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "shouldUseTwoPartPill") & 1) == 0)
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "waitingForAutoUnlockStateUpdateToStartPairedUnlock");
      if ((_DWORD)v4)
      {
        v6 = paired_unlock_log(v4, v5);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Auto Unlock not enabled. Starting unlock", v20, 2u);
        }

        v8 = objc_msgSend(*(id *)(a1 + 32), "startUnlockIfNeeded");
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 68) = (_BYTE)v8;
        v10 = paired_unlock_log(v8, v9);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          goto LABEL_15;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 68))
          v12 = CFSTR("YES");
        else
          v12 = CFSTR("NO");
        *(_DWORD *)v20 = 138412290;
        *(_QWORD *)&v20[4] = v12;
        v13 = "Paired Unlock started: %@";
        v14 = v11;
        v15 = 12;
        goto LABEL_14;
      }
    }
  }
  v16 = objc_msgSend(*(id *)(a1 + 32), "waitingForAutoUnlockStateUpdateToStartPairedUnlock");
  if ((_DWORD)v16)
  {
    v18 = paired_unlock_log(v16, v17);
    v11 = objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:

      return objc_msgSend(*(id *)(a1 + 32), "setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:", 0, *(_OWORD *)v20);
    }
    *(_WORD *)v20 = 0;
    v13 = "Auto Unlock enabled. Not performing Paired Unlock";
    v14 = v11;
    v15 = 2;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, v20, v15);
    goto LABEL_15;
  }
  return objc_msgSend(*(id *)(a1 + 32), "setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:", 0, *(_OWORD *)v20);
}

void sub_1001DB248(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = objc_msgSend(v2, "pairedWatchWristState");

  if (v3 == (id)2)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "needsOffWristBeforePairedUnlock");
    if ((_DWORD)v4)
    {
      v6 = paired_unlock_log(v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Eligible for Paired Unlock after off wrist event", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "setNeedsOffWristBeforePairedUnlock:", 0);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delayedStartTimer"));

    if (v8)
    {
      v11 = paired_unlock_log(v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Watch off wrist while waiting to start Paired Unlock. Cancelling operation and dismissing banner", v13, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "invalidateDelayedStartTimer");
      objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
    }
  }
}

void sub_1001DB3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Paired Unlock Banner dismissed", buf, 2u);
  }

  v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v7 + 104))
  {
    v8 = paired_unlock_log(v5, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Banner dismissed while waiting for user response. Cancelling Paired Unlock", v18, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "invalidateDelayedStartTimer");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));

    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
      objc_msgSend(v11, "setFailureReason:", 16);

    }
    objc_msgSend(*(id *)(a1 + 32), "sendResetMessage:reason:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "unlockSessionID"), 16);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v7 + 68);
    v13 = paired_unlock_log(v5, v6);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v15)
      {
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Dismissed while performing Paired Unlock. Cancelling or relocking watch if necessary", v17, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "sendRelockRequestWithReset:", 1);
    }
    else
    {
      if (v15)
      {
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Banner dismissed after Paired Unlock finished. Doing nothing according to policy.", v16, 2u);
      }

    }
  }
}

id sub_1001DB5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t v15[16];
  uint8_t v16[16];
  uint8_t buf[16];

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Paired Unlock Banner lock button tapped. Disabling Paired unlock until watch off wrist or unlocked", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setNeedsOffWristBeforePairedUnlock:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delayedStartTimer"));

  v8 = paired_unlock_log(v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v10)
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Lock button tapped before starting Paired Unlock. Not starting Paired Unlock", v16, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "invalidateDelayedStartTimer");
  }
  else
  {
    if (v10)
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Lock button tapped during or after Paired Unlock. Relocking watch if necessary", v15, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "sendRelockRequestWithReset:", 1);
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
    objc_msgSend(v12, "setRelockedWatch:", 1);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
    objc_msgSend(v13, "setFailureReason:", 17);

  }
  return objc_msgSend(*(id *)(a1 + 32), "sendResetMessage:reason:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "unlockSessionID"), 17);
}

id sub_1001DBD78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t v7[16];

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Delayed start timer fired", v7, 2u);
  }

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(void))(v5 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "invalidateDelayedStartTimer");
}

id sub_1001DBF68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Long-term key timer fired, resetting state", v6, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 67) = 0;
  objc_msgSend(*(id *)(a1 + 32), "releaseKeyBagAssertion");
  return objc_msgSend(*(id *)(a1 + 32), "abortDevicePairingWithReason:", CFSTR("com.apple.sharingd.abort-reason.response.timeout"));
}

void sub_1001DC294(uint64_t a1)
{
  void *v2;
  NSDate *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint8_t v11[16];

  objc_msgSend(*(id *)(a1 + 32), "setRemoteDeviceLocked:", 1);
  objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
  objc_msgSend(*(id *)(a1 + 32), "setSecurityManager:", 0);
  objc_msgSend(*(id *)(a1 + 32), "updateSecurityManager");
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
  v3 = objc_opt_new(NSDate);
  objc_msgSend(v2, "timeIntervalSinceDate:", v3);
  v5 = v4;

  if (v5 > 0.0 && !objc_msgSend(*(id *)(a1 + 32), "unlockingState"))
  {
    v7 = paired_unlock_log(0, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Retrying unlock after switch", v11, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "startUnlockIfNeeded");
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 96);
    *(_QWORD *)(v9 + 96) = 0;

  }
}

void sub_1001DC900(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint8_t v9[8];
  NSErrorUserInfoKey v10;
  const __CFString *v11;

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "State timer fired, assuming devices are not connected", v9, 2u);
  }

  v5 = *(void **)(a1 + 32);
  v6 = SFUnlockErrorDomian;
  v10 = NSLocalizedDescriptionKey;
  v11 = CFSTR("Remote never responded with state");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, 113, v7));
  objc_msgSend(v5, "notifyUnlockStateWithState:error:", 0, v8);

}

void sub_1001DCCB0(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSErrorUserInfoKey v13;
  const __CFString *v14;
  NSErrorUserInfoKey v15;
  const __CFString *v16;

  if (*(_QWORD *)(a1 + 40))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "unlockEnabled"))
    {
      v2 = objc_msgSend(*(id *)(a1 + 32), "initiateStashBagCreationWithManifest:", 0);
      v3 = *(_QWORD *)(a1 + 40);
      if (v2)
      {
        v4 = objc_msgSend(*(id *)(a1 + 40), "copy");
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(void **)(v5 + 144);
        *(_QWORD *)(v5 + 144) = v4;

        return;
      }
      v11 = SFUnlockErrorDomian;
      v15 = NSLocalizedDescriptionKey;
      v16 = CFSTR("Could not initiate stash creation");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
      v9 = v11;
      v10 = 101;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 40);
      v7 = SFUnlockErrorDomian;
      v13 = NSLocalizedDescriptionKey;
      v14 = CFSTR("Paired Unlock disabled");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
      v9 = v7;
      v10 = 109;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, v10, v8));
    (*(void (**)(uint64_t, _QWORD, void *))(v3 + 16))(v3, 0, v12);

  }
}

void sub_1001DCF08(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSErrorUserInfoKey v13;
  const __CFString *v14;
  NSErrorUserInfoKey v15;
  const __CFString *v16;

  if (*(_QWORD *)(a1 + 48))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "unlockEnabled"))
    {
      v2 = objc_msgSend(*(id *)(a1 + 32), "initiateStashBagCreationWithManifest:", *(_QWORD *)(a1 + 40));
      v3 = *(_QWORD *)(a1 + 48);
      if (v2)
      {
        v4 = objc_msgSend(*(id *)(a1 + 48), "copy");
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(void **)(v5 + 144);
        *(_QWORD *)(v5 + 144) = v4;

        return;
      }
      v11 = SFUnlockErrorDomian;
      v15 = NSLocalizedDescriptionKey;
      v16 = CFSTR("Could not initiate stash creation with manifest");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
      v9 = v11;
      v10 = 101;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 48);
      v7 = SFUnlockErrorDomian;
      v13 = NSLocalizedDescriptionKey;
      v14 = CFSTR("Paired Unlock disabled");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
      v9 = v7;
      v10 = 109;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, v10, v8));
    (*(void (**)(uint64_t, _QWORD, void *))(v3 + 16))(v3, 0, v12);

  }
}

void sub_1001DD5D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001DECB4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t v14[16];
  uint8_t v15[16];
  uint8_t buf[16];

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 68);
  v4 = paired_unlock_log(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Telling watch to finish unlocking", buf, 2u);
    }

    v7 = objc_msgSend(*(id *)(a1 + 32), "sendSessionAuthenticationToken:sessionID:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "sessionID"));
    v9 = paired_unlock_log(v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Preemptively assuming watch will succeed in unlock. Updating pill to \"Unlocked\"", v15, 2u);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SDHUDManager shared](SDHUDManager, "shared"));
    objc_msgSend(v11, "updatePairedUnlockBannerToUnlocked");

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metricDates"));
    objc_msgSend(v13, "setPillUpdated:", v12);

  }
  else
  {
    if (v6)
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Attempt cancelled. Not sending auth token. Dismissing banner just in case", v14, 2u);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDHUDManager shared](SDHUDManager, "shared"));
    objc_msgSend(v12, "dismissPairedUnlockBanner");
  }

}

id sub_1001DF9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id result;
  uint64_t v6;

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001E2628();

  result = objc_msgSend(*(id *)(a1 + 32), "releaseKeyBagAssertion");
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v6 + 67))
  {
    *(_BYTE *)(v6 + 67) = 0;
    objc_msgSend(*(id *)(a1 + 32), "invalidateLongTermKeyTimer");
    return objc_msgSend(*(id *)(a1 + 32), "abortDevicePairingWithReason:", CFSTR("com.apple.sharingd.abort-reason.send.request"));
  }
  return result;
}

id sub_1001DFB60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001E2654();

  return objc_msgSend(*(id *)(a1 + 32), "abortDevicePairingWithReason:", CFSTR("com.apple.sharingd.abort-reason.send.response"));
}

id sub_1001DFCF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "disableUnlockPairing");
}

id sub_1001DFE54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "disableUnlockPairing");
}

id sub_1001DFF90(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "disableUnlockPairing");
}

id sub_1001E00E0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
    objc_msgSend(v3, "setFailureReason:", 24);

  }
  return objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
}

void sub_1001E028C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v5 = paired_unlock_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412290;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resetting state. Error: %@", (uint8_t *)&v9, 0xCu);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
    objc_msgSend(v8, "setFailureReason:", 24);

  }
  objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");

}

void sub_1001E04A4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSErrorUserInfoKey v5;
  const __CFString *v6;

  v1 = *(void **)(a1 + 32);
  v2 = SFUnlockErrorDomian;
  v5 = NSLocalizedDescriptionKey;
  v6 = CFSTR("Message failed to send");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 103, v3));
  objc_msgSend(v1, "notifyStashStateWithError:", v4);

}

void sub_1001E06A0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSErrorUserInfoKey v5;
  const __CFString *v6;

  v1 = *(void **)(a1 + 32);
  v2 = SFUnlockErrorDomian;
  v5 = NSLocalizedDescriptionKey;
  v6 = CFSTR("Message failed to send");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 103, v3));
  objc_msgSend(v1, "notifyStashStateWithError:", v4);

}

void sub_1001E0870(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;

  v3 = a2;
  v5 = paired_unlock_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1001E2680();

  v7 = *(void **)(a1 + 32);
  v8 = SFUnlockErrorDomian;
  v11 = NSLocalizedDescriptionKey;
  v12 = CFSTR("State request failed to send");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 103, v9));
  objc_msgSend(v7, "notifyUnlockStateWithState:error:", 0, v10);

}

void sub_1001E0ABC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;

  v2 = a2;
  v4 = paired_unlock_log(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1001E26E0();

}

void sub_1001E1FF4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void sub_1001E2000(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1001E2020()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1001E2014();
  objc_msgSend(v1, "pairingCompatibilityState");
  objc_msgSend(v0, "deviceIsPaired");
  sub_1001E2000((void *)&_mh_execute_header, v2, v3, "Received notification out of state (state = %d, isPaired = %@)", v4, v5, v6, v7, 2u);
  sub_100031218();
}

void sub_1001E20C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No device in un-pair notification", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E20F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No device in pairing failed notification", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E211C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  sub_1001E2014();
  objc_msgSend(v1, "hasLongTermKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "longTermKey"));
  sub_1000311EC((void *)&_mh_execute_header, v2, v3, "Failed to sign remote key (has remote key = %@, remote key = %@)", v4, v5, v6, v7, 2u);

  sub_100031218();
}

void sub_1001E21C8(void *a1, NSObject *a2)
{
  uint64_t v3;
  _DWORD v4[2];

  v4[0] = 67109120;
  v4[1] = objc_msgSend(a1, "pairingCompatibilityState");
  sub_1001E1FF4((void *)&_mh_execute_header, a2, v3, "Failed to setup long-term key, incorrect state = %d", (uint8_t *)v4);
  sub_10001949C();
}

void sub_1001E2244()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleClassALongTermKeyRequest: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E22A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleSetupRequest: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E2304()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleCreateEscrowSecret: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E2364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Bad signature for the auth step, disabling unlock. User will need to re-enable", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E2390()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create auth token", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E23BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Exchange response failed. Retrying", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E23E8(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend(a1, "unlockingState");
  objc_msgSend(a2, "hasKey");
  sub_1001E2000((void *)&_mh_execute_header, v3, v4, "Failed in exchange response (unlocking state = %d, has key = %@)", v5, v6, v7, v8, 2u);
  sub_100031218();
}

void sub_1001E2490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create stash token", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E24BC(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = a1;
  sub_1001E1FF4((void *)&_mh_execute_header, a2, a3, "Error in stash key response = %d", (uint8_t *)v3);
  sub_1000161DC();
}

void sub_1001E2524()
{
  NSObject *v0;
  void *v1;
  id v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  const __CFString *v10;
  __int16 v11;
  const __CFString *v12;
  __int16 v13;
  const __CFString *v14;

  sub_1001E2014();
  if (objc_msgSend(v2, "hasUnlockEnabled"))
    v3 = CFSTR("YES");
  else
    v3 = CFSTR("NO");
  if (objc_msgSend(v1, "unlockEnabled"))
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  if (objc_msgSend(v1, "hasPasscodeEnabled"))
    v5 = CFSTR("YES");
  else
    v5 = CFSTR("NO");
  v7 = 138413058;
  if (objc_msgSend(v1, "passcodeEnabled"))
    v6 = CFSTR("YES");
  else
    v6 = CFSTR("NO");
  v8 = v3;
  v9 = 2112;
  v10 = v4;
  v11 = 2112;
  v12 = v5;
  v13 = 2112;
  v14 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "State response is missing information (has unlock enabled = %@, unlock enabled = %@, has passcode enabled = %@, passcode enabled = %@", (uint8_t *)&v7, 0x2Au);
}

void sub_1001E2628()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to start LTK transfer", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E2654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Transferring long-term keys failed. Paired Unlock will not work until devices completely re-pair", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E2680()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send state request with error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E26E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "### Unable to send relock request: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E2740()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not generate ephmeral key data", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E276C()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000161E4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Local LTK corrupted. Deleting LTKs, disabling Unlock with iPhone", v1, 2u);
  sub_1000161DC();
}

void sub_1001E27A4(int *a1, NSObject *a2, uint64_t a3)
{
  int v3;
  _DWORD v4[2];

  v3 = *a1;
  v4[0] = 67109120;
  v4[1] = v3;
  sub_1001E1FF4((void *)&_mh_execute_header, a2, a3, "Could not create AKS session (errorCode: %x)", (uint8_t *)v4);
  sub_1000161DC();
}

void sub_1001E2810()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No stored passcode", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E283C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Not unlocking, active devices don't match (window: %@)", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E289C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_1001E2014();
  objc_msgSend(v0, "unlockingState");
  sub_100029230();
  sub_1000311EC((void *)&_mh_execute_header, v1, v2, "Initiating unlock out of state without record (state = %ld, record = %@)", v3, v4, v5, v6, v7);
}

void sub_1001E2928()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Missing escrow secret for stash session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E2954()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create stash bag session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E2FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E3010(uint64_t a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD);
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionHandler"));
  v1[2](v1, 1, 0, 1);

  objc_msgSend(WeakRetained, "openLinks");
}

void sub_1001E3374(id a1)
{
  SDUnlockLockManager *v1;
  void *v2;

  v1 = objc_alloc_init(SDUnlockLockManager);
  v2 = (void *)qword_1007C6DD0;
  qword_1007C6DD0 = (uint64_t)v1;

}

void sub_1001E3754(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  unsigned int v27;
  void *v28;
  void *v29;
  int v30;
  id v31;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v3 = objc_msgSend(v2, "deviceKeyBagState");

  v6 = paired_unlock_log(v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v30 = 134217984;
    v31 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "keyBagLockStateChange: %ld", (uint8_t *)&v30, 0xCu);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  v9 = objc_msgSend(v8, "deviceKeyBagLocked");

  if (v9)
    objc_msgSend(*(id *)(a1 + 32), "setLastUnlockedByPairedUnlock:", 0);
  v10 = objc_msgSend(*(id *)(a1 + 32), "unlockEnabled");
  if ((_DWORD)v10)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v13 = objc_msgSend(v12, "deviceKeyBagLocking");

    if (v13)
    {
      objc_msgSend(*(id *)(a1 + 32), "sendDeviceLockStateChanged:", 0);
      v14 = *(void **)(a1 + 32);
      v15 = 1;
LABEL_24:
      objc_msgSend(v14, "setSentLockedState:", v15);
      return;
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v19 = objc_msgSend(v18, "deviceKeyBagDisabled");

    if (v19)
    {
      v22 = paired_unlock_log(v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v30) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Passcode disabled", (uint8_t *)&v30, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "disableUnlockPairing");
      objc_msgSend(*(id *)(a1 + 32), "sendDisableMessage");
      return;
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    if (objc_msgSend(v24, "deviceKeyBagLocked"))
    {
      v25 = objc_msgSend(*(id *)(a1 + 32), "sentLockedState");

      if ((v25 & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "sendDeviceLockStateChanged:", 0);
LABEL_23:
        v14 = *(void **)(a1 + 32);
        v15 = 0;
        goto LABEL_24;
      }
    }
    else
    {

    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v27 = objc_msgSend(v26, "deviceKeyBagUnlocked");

    if (v27)
    {
      objc_msgSend(*(id *)(a1 + 32), "sendDeviceLockStateChanged:", 1);
      if (objc_msgSend(*(id *)(a1 + 32), "lastUnlockedByPairedUnlock"))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
        objc_msgSend(v28, "setSuccessfulAttempts:", (char *)objc_msgSend(v28, "successfulAttempts") + 1);

      }
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v29, "setTotalUnlocks:", (char *)objc_msgSend(v29, "totalUnlocks") + 1);

    }
    goto LABEL_23;
  }
  v16 = paired_unlock_log(v10, v11);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Paired unlock disabled not sending lock state", (uint8_t *)&v30, 2u);
  }

}

void sub_1001E3EE8(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(id, uint64_t);
  uint64_t v5;
  void *v6;
  unsigned int v7;
  void *v8;
  _BYTE *v9;
  void *v10;
  int64_t v11;
  void *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  int64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  id v31;
  uint8_t v32[16];

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dailyMetrics"));
  if (v5)
  {
    v6 = (void *)v5;
    v7 = objc_msgSend(*(id *)(a1 + 32), "unlockEnabled");

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      v9 = objc_msgSend(v8, "totalAttempts");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      v11 = v9 - (_BYTE *)objc_msgSend(v10, "successfulAttempts");
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v12, "setFailedAttempts:", v11);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      v14 = objc_msgSend(v13, "totalUnlocks");
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      v16 = v14 - (_BYTE *)objc_msgSend(v15, "successfulAttempts");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v17, "setPasscodeUnlocks:", v16);

      v18 = +[SFAutoUnlockManager autoUnlockEnabled](SFAutoUnlockManager, "autoUnlockEnabled");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v19, "setPhoneAutoUnlockEnabled:", v18);

      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsController"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "activeIDSDevice"));

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "productBuildVersion"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v23, "setPhoneSoftwareVersion:", v22);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "modelIdentifier"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v25, "setPhoneHardwareModel:", v24);

      v28 = paired_unlock_log(v26, v27);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Submitting daily metrics", v32, 2u);
      }

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dailyMetrics"));
      objc_msgSend(v30, "submitEvent");

    }
  }
  v31 = objc_alloc_init((Class)SFPairedUnlockDailyEvent);
  objc_msgSend(*(id *)(a1 + 32), "setDailyMetrics:", v31);

  v4[2](v4, 1);
}

id sub_1001E43D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Long-term key timer fired, resetting state", v6, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "resetLongTermKeyRequest");
}

void sub_1001E4594(id *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  id v11;
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  void (**v24)(id, _QWORD, void *);
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  __int16 v33;
  NSErrorUserInfoKey v34;
  const __CFString *v35;
  NSErrorUserInfoKey v36;
  const __CFString *v37;

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client enabling unlock", (uint8_t *)&v33, 2u);
  }

  v6 = a1[4];
  if (v6 && (v6 = objc_msgSend(v6, "length")) != 0 && a1[7])
  {
    v7 = objc_msgSend(a1[5], "isEqualToString:", IDSDefaultPairedDevice);
    if ((_DWORD)v7)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "idsController"));
      v10 = objc_msgSend(v9, "hasDefaultDevice");

      if (v10)
      {
        v11 = objc_msgSend(a1[4], "copy");
        v12 = a1[6];
        v13 = (void *)v12[15];
        v12[15] = v11;

        v14 = objc_msgSend(a1[7], "copy");
        v15 = a1[6];
        v16 = (void *)v15[27];
        v15[27] = v14;

        *((_BYTE *)a1[6] + 66) = 1;
        v19 = paired_unlock_log(v17, v18);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Preventing exit for enable", (uint8_t *)&v33, 2u);
        }

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
        objc_msgSend(v21, "addPreventExitForLocaleReason:", CFSTR("SDUnlockSetupSessionPreventExitReason"));

        *((_BYTE *)a1[6] + 70) = 1;
        objc_msgSend(a1[6], "enableUnlockForcingLTKTransfer:", 0);
        return;
      }
    }
    v30 = paired_unlock_log(v7, v8);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      sub_1001E83AC((uint64_t)(a1 + 5), (uint64_t)a1);

    v24 = (void (**)(id, _QWORD, void *))a1[7];
    if (v24)
    {
      v32 = SFUnlockErrorDomian;
      v36 = NSLocalizedDescriptionKey;
      v37 = CFSTR("Bad device identifier");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1));
      v27 = v32;
      v28 = 104;
      goto LABEL_15;
    }
  }
  else
  {
    v22 = paired_unlock_log(v6, v5);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1001E8304(a1 + 4, (uint64_t)a1, v23);

    v24 = (void (**)(id, _QWORD, void *))a1[7];
    if (v24)
    {
      v25 = SFUnlockErrorDomian;
      v34 = NSLocalizedDescriptionKey;
      v35 = CFSTR("Invalid password");
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
      v27 = v25;
      v28 = 112;
LABEL_15:
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, v28, v26));
      v24[2](v24, 0, v29);

    }
  }
}

void sub_1001E4CD0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
  objc_msgSend(v1, "removePreventExitForLocaleReason:", CFSTR("SDUnlockSetupSessionPreventExitReason"));

}

void sub_1001E64C4(uint64_t a1, int a2, int a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  int v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  _BYTE v30[22];
  __int16 v31;
  uint64_t v32;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metricDates"));
  objc_msgSend(v7, "setMotionCheckEnded:", v6);

  v10 = a3 ^ 1;
  if (((a2 ^ 1) & 1) != 0
    || (v10 & 1) != 0
    || (v8 = objc_msgSend(*(id *)(a1 + 40), "hasKey"), !(_DWORD)v8)
    || (v8 = objc_msgSend(*(id *)(a1 + 40), "hasUsingRecord"), !(_DWORD)v8))
  {
    v20 = paired_unlock_log(v8, v9);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v23 = CFSTR("NO");
      v24 = *(_QWORD *)(a1 + 40);
      if (a2)
        v25 = CFSTR("YES");
      else
        v25 = CFSTR("NO");
      *(_DWORD *)v30 = 138412802;
      *(_QWORD *)&v30[4] = v25;
      *(_WORD *)&v30[12] = 2112;
      if (a3)
        v23 = CFSTR("YES");
      *(_QWORD *)&v30[14] = v23;
      v31 = 2112;
      v32 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Resetting (on wrist = %@, motion detected = %@, exchange request = %@)", v30, 0x20u);
    }

    if ((a2 & 1) != 0 || a3)
    {
      if ((v10 | a2) == 1)
      {
        if ((a2 ^ 1 | a3) == 1)
          v22 = !objc_msgSend(*(id *)(a1 + 40), "hasKey")
             || (objc_msgSend(*(id *)(a1 + 40), "hasUsingRecord") & 1) == 0;
        else
          v22 = 6;
      }
      else
      {
        v22 = 5;
      }
    }
    else
    {
      v22 = 7;
    }
    objc_msgSend(*(id *)(a1 + 32), "sendResetMessage:reason:", objc_msgSend(*(id *)(a1 + 40), "sessionID", *(_OWORD *)v30), v22);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "securityManager"));
    objc_msgSend(*(id *)(a1 + 32), "setUnlockAuthSession:", objc_msgSend(v11, "unlockSessionAsOriginator:usingEscrow:escrowSecret:", 0, objc_msgSend(*(id *)(a1 + 40), "usingRecord"), 0));

    v12 = (unint64_t)objc_msgSend(*(id *)(a1 + 32), "unlockAuthSession");
    if ((v12 & 0x8000000000000000) != 0)
    {
      v26 = paired_unlock_log(v12, v13);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        sub_1001E8B94();

      objc_msgSend(*(id *)(a1 + 32), "sendKeyExchangeResponse:sessionID:", 0, objc_msgSend(*(id *)(a1 + 40), "sessionID"));
      objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "securityManager"));
      v15 = objc_msgSend(*(id *)(a1 + 32), "unlockAuthSession");
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "key"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stepWithAuthSession:data:", v15, v16));

      if (v17)
      {
        objc_msgSend(*(id *)(a1 + 32), "sendKeyExchangeResponse:sessionID:", v17, objc_msgSend(*(id *)(a1 + 40), "sessionID"));
        objc_msgSend(*(id *)(a1 + 32), "setWaitingForAuthToken:", 1);
      }
      else
      {
        v28 = paired_unlock_log(v18, v19);
        v29 = objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          sub_1001E8B68();

        objc_msgSend(*(id *)(a1 + 32), "sendKeyExchangeResponse:sessionID:", 0, objc_msgSend(*(id *)(a1 + 40), "sessionID"));
        objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
      }

    }
  }
}

void sub_1001E6EDC(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;

  v2 = a2;
  v4 = paired_unlock_log(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1001E8D18();

}

id sub_1001E7060(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1001E8D78();

  objc_msgSend(*(id *)(a1 + 32), "invalidateLongTermKeyTimer");
  return objc_msgSend(*(id *)(a1 + 32), "resetLongTermKeyRequest");
}

void sub_1001E71FC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;

  v3 = a2;
  v5 = paired_unlock_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1001E8DA4();

  v7 = *(void **)(a1 + 32);
  v8 = SFUnlockErrorDomian;
  v11 = NSLocalizedDescriptionKey;
  v12 = CFSTR("Failed to send to other device");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 106, v9));
  objc_msgSend(v7, "notifyEnableStateWithError:", v10);

}

void sub_1001E744C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;

  v3 = a2;
  v5 = paired_unlock_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1001E8E04();

  v7 = *(void **)(a1 + 32);
  v8 = SFUnlockErrorDomian;
  v11 = NSLocalizedDescriptionKey;
  v12 = CFSTR("Failed to send to other device");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 106, v9));
  objc_msgSend(v7, "notifyEnableStateWithError:", v10);

}

void sub_1001E769C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;

  v3 = a2;
  v5 = paired_unlock_log(v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    sub_1001E8E64();

  v7 = *(void **)(a1 + 32);
  v8 = SFUnlockErrorDomian;
  v11 = NSLocalizedDescriptionKey;
  v12 = CFSTR("Failed to send to other device");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 106, v9));
  objc_msgSend(v7, "notifyEnableStateWithError:", v10);

}

id sub_1001E7910(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
}

id sub_1001E7A2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
}

id sub_1001E7B64(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetStashState");
}

id sub_1001E7C80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "resetStashState");
}

void sub_1001E7D68(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;

  v2 = a2;
  v4 = paired_unlock_log(v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1001E8EC4();

}

void sub_1001E8270(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1001E829C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to get long term information (key = %@)", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1001E8304(_QWORD *a1, uint64_t a2, os_log_t log)
{
  const __CFString *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  __int16 v7;
  const __CFString *v8;

  v3 = CFSTR("YES");
  if (*a1)
    v4 = CFSTR("YES");
  else
    v4 = CFSTR("NO");
  if (!*(_QWORD *)(a2 + 56))
    v3 = CFSTR("NO");
  v5 = 138412546;
  v6 = v4;
  v7 = 2112;
  v8 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid parameters (passcode = %@, handler = %@)", (uint8_t *)&v5, 0x16u);
  sub_10001949C();
}

void sub_1001E83AC(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 48), "idsController"));
  objc_msgSend(v2, "hasDefaultDevice");
  sub_1000311EC((void *)&_mh_execute_header, v3, v4, "Failed to create unlock session (identifier = %@, has default paired device = %@)", v5, v6, v7, v8, 2u);

  sub_100031218();
}

void sub_1001E845C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Received start ltk with request outstanding", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8488()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Long-Term key failed on the other side", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E84B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to sign remote key", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E84E0(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a1, "hasLongTermKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "longTermKey"));
  sub_1001E8284();
  sub_1000311EC((void *)&_mh_execute_header, v3, v4, "Long-Term key response is missing information (has remote key = %@, remote key = %{private}@)", v5, v6, v7, v8, v9);

  sub_100031218();
}

void sub_1001E8580(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend(a1, "hasRequestID");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "requestID"));
  sub_1001E8270((void *)&_mh_execute_header, v2, v3, "Incorrect request ID in response (has request ID = %@, response request ID = %@, local request ID  = %@)", v4, v5, v6, v7, 2u);

}

void sub_1001E8654(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Error in class A LTK transfer = %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1001E86B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to sign remote key for enable", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E86E4(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a1, "hasLongTermKey");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "longTermKey"));
  sub_1001E8284();
  sub_1000311EC((void *)&_mh_execute_header, v3, v4, "Long term key response is missing information for enable (has remote key = %@, remote key = %{private}@)", v5, v6, v7, v8, v9);

  sub_100031218();
}

void sub_1001E8784(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "Error in session created response = %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1001E87E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Enabling with keys", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not sign remote key", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8840(void *a1, void *a2, NSObject *a3)
{
  const __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;

  if (objc_msgSend(a1, "hasToken"))
    v6 = CFSTR("YES");
  else
    v6 = CFSTR("NO");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "token"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "securityManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localLongTermKey"));
  if (v9)
    v10 = CFSTR("YES");
  else
    v10 = CFSTR("NO");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "securityManager"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "remoteLongTermKey"));
  v14 = 138413058;
  if (v12)
    v13 = CFSTR("YES");
  else
    v13 = CFSTR("NO");
  v15 = v6;
  v16 = 2112;
  v17 = v7;
  v18 = 2112;
  v19 = v10;
  v20 = 2112;
  v21 = v13;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Missing information for escrow session (has token = %@, token = %@, local long-term key = %@, remote long-term key = %@)", (uint8_t *)&v14, 0x2Au);

}

void sub_1001E8990()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not setup escrow session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E89BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to create session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E89E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Creating escrow record failed = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E8A48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Bad signature error indicated bad LTKs on phone side, enabling with new keys", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Final step failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8AA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No session ID in request", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8ACC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a1, a3, "Lost mode = %@; not unlocking.", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_1001E8B3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Unlock pairing is disabled", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8B68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not step for ephemeral key response", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8B94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Could not create unlock session", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8BC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Device went off wrist waiting for auth token", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8BEC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(a1, "inPosition");
  objc_msgSend(a1, "waitingForAuthToken");
  sub_1001E8270((void *)&_mh_execute_header, v2, v3, "Resetting (position = %@, waiting on auth = %@, session auth token = %@)", v4, v5, v6, v7, 2u);
}

void sub_1001E8CB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Stash: No key is exchange request = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E8D18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send device unlocked message: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E8D78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Transferring long-term keys failed.", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001E8DA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send class A long term key request: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E8E04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send device enable request: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E8E64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send request to create escrow key: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_1001E8EC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send state response with error = %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

uint64_t SDUnlockSessionAuthTokenReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t Data;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 4u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_43;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_45:
        v29 = 24;
        goto LABEL_54;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_49:
        v29 = 20;
        goto LABEL_54;
      case 3u:
        Data = PBReaderReadData(a2);
        v23 = objc_claimAutoreleasedReturnValue(Data);
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

        continue;
      case 4u:
        v25 = 0;
        v26 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0)
        goto LABEL_51;
      v25 += 7;
      v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v14) = 0;
LABEL_53:
    v29 = 16;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

__CFString *sub_1001E9E98(unsigned int a1)
{
  if (a1 >= 0x1A)
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown reason %hu"), a1));
  else
    return *(&off_10071B070 + (__int16)a1);
}

void sub_1001EAB2C(uint64_t a1)
{
  void *v2;
  void *v3;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "securityManager"));
  objc_msgSend(v2, "disableUnlockPairingForSecManager:", v3);

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, SFPairedUnlockStateChangedNotification, 0, 0, 1u);
}

uint64_t sub_1001EAD04(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "disableUnlockPairing");
  objc_msgSend(*(id *)(a1 + 32), "sendDisableMessage");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

id sub_1001EAF40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint8_t v8[16];

  v3 = paired_unlock_log(a1, a2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Session timer fired, resetting state", v8, 2u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
    objc_msgSend(v6, "setFailureReason:", 19);

  }
  return objc_msgSend(*(id *)(a1 + 32), "resetAndClearState");
}

void sub_1001EB124(id a1, NSError *a2)
{
  uint64_t v2;
  NSObject *v3;

  v2 = paired_unlock_log(a1, a2);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1001EBBEC();

}

void sub_1001EB1F4(id a1, NSError *a2)
{
  uint64_t v2;
  NSObject *v3;

  v2 = paired_unlock_log(a1, a2);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1001EBC18();

}

void sub_1001EBBEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to send device reset message", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBC18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Failed to send disable message", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBC44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Long-Term Keys failed to transfer, aborting pairing", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBC70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No active NR device", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBC9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No active IDS device", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBCC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "No active NR device for IDS device", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBCF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Switch incomplete, active devices don't match", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_1001EBD64(id a1)
{
  SDNearbyAgent *v1;
  void *v2;

  v1 = objc_alloc_init(SDNearbyAgent);
  v2 = (void *)gSFNearbyAgent;
  gSFNearbyAgent = v1;

}

void sub_1001EBE4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001ED2D0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3A0], 8);
  _Unwind_Resume(a1);
}

const char *sub_1001ED33C(unsigned int a1)
{
  if (a1 > 0xF)
    return "?";
  else
    return off_10071B620[a1];
}

void sub_1001ED360(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "identity"));

  if (v4)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

_QWORD *sub_1001ED82C(_QWORD *result)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  const char *v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;

  v1 = result[4];
  v2 = *(_DWORD *)(v1 + 928);
  if (*((_DWORD *)result + 10) != v2)
  {
    v3 = result;
    if (dword_1007B3A28 <= 40)
    {
      if (dword_1007B3A28 != -1)
      {
LABEL_4:
        if (v2 > 0xF)
          v4 = "?";
        else
          v4 = off_10071B620[v2];
        v6 = *((int *)v3 + 10);
        if (v6 > 0xF)
          v7 = "?";
        else
          v7 = off_10071B620[v6];
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent setAudioRoutingScore:]_block_invoke", 40, "Audio routing score changed: %s -> %s\n", v4, v7);
        v1 = v3[4];
        goto LABEL_13;
      }
      v5 = _LogCategory_Initialize(&dword_1007B3A28, 40);
      v1 = v3[4];
      if (v5)
      {
        v2 = *(_DWORD *)(v1 + 928);
        goto LABEL_4;
      }
    }
LABEL_13:
    *(_DWORD *)(v1 + 928) = *((_DWORD *)v3 + 10);
    v8 = v3[4];
    v9 = *(void **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = 0;

    return objc_msgSend((id)v3[4], "_update");
  }
  return result;
}

_QWORD *sub_1001ED988(_QWORD *result)
{
  int v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  const char *v5;
  const char *v6;
  int v7;

  v1 = *((unsigned __int8 *)result + 40);
  v2 = result[4];
  v3 = *(unsigned __int8 *)(v2 + 920);
  if (v1 != v3)
  {
    v4 = result;
    if (dword_1007B3A28 <= 30)
    {
      if (dword_1007B3A28 != -1)
      {
LABEL_4:
        if (v3)
          v5 = "yes";
        else
          v5 = "no";
        if (v1)
          v6 = "yes";
        else
          v6 = "no";
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent setAutoUnlockActive:]_block_invoke", 30, "AutoUnlocking: %s -> %s\n", v5, v6);
        LOBYTE(v1) = *((_BYTE *)v4 + 40);
        v2 = v4[4];
        goto LABEL_12;
      }
      v7 = _LogCategory_Initialize(&dword_1007B3A28, 30);
      v1 = *((unsigned __int8 *)v4 + 40);
      v2 = v4[4];
      if (v7)
      {
        v3 = *(unsigned __int8 *)(v2 + 920);
        goto LABEL_4;
      }
    }
LABEL_12:
    *(_BYTE *)(v2 + 920) = v1;
    return objc_msgSend((id)v4[4], "_update");
  }
  return result;
}

_QWORD *sub_1001EDAC0(_QWORD *result)
{
  int v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  const char *v5;
  const char *v6;
  int v7;

  v1 = *((unsigned __int8 *)result + 40);
  v2 = result[4];
  v3 = *(unsigned __int8 *)(v2 + 921);
  if (v1 != v3)
  {
    v4 = result;
    if (dword_1007B3A28 <= 30)
    {
      if (dword_1007B3A28 != -1)
      {
LABEL_4:
        if (v3)
          v5 = "yes";
        else
          v5 = "no";
        if (v1)
          v6 = "yes";
        else
          v6 = "no";
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent setBoostNearbyInfo:]_block_invoke", 30, "BoostNearbyInfo: %s -> %s\n", v5, v6);
        LOBYTE(v1) = *((_BYTE *)v4 + 40);
        v2 = v4[4];
        goto LABEL_12;
      }
      v7 = _LogCategory_Initialize(&dword_1007B3A28, 30);
      v1 = *((unsigned __int8 *)v4 + 40);
      v2 = v4[4];
      if (v7)
      {
        v3 = *(unsigned __int8 *)(v2 + 921);
        goto LABEL_4;
      }
    }
LABEL_12:
    *(_BYTE *)(v2 + 921) = v1;
    return objc_msgSend((id)v4[4], "_update");
  }
  return result;
}

_QWORD *sub_1001EDBF8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  int v12;
  uint64_t v13;

  v1 = result;
  v2 = result[4];
  v3 = *(_DWORD *)(v2 + 516);
  if (*((_BYTE *)result + 40))
    v4 = v3 + 1;
  else
    v4 = v3 - 1;
  *(_DWORD *)(v2 + 516) = v4;
  v5 = result[4];
  v6 = *(_DWORD *)(v5 + 516);
  v7 = v6 != 0;
  v8 = *(unsigned __int8 *)(v5 + 922);
  if (v8 != v7)
  {
    if (dword_1007B3A28 <= 30)
    {
      if (dword_1007B3A28 != -1)
      {
LABEL_13:
        v10 = "yes";
        if (v8)
          v11 = "yes";
        else
          v11 = "no";
        if (!v6)
          v10 = "no";
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent setEnhancedDiscovery:]_block_invoke", 30, "EnhancedDiscovery: %s -> %s\n", v11, v10);
        v5 = v1[4];
        goto LABEL_22;
      }
      v12 = _LogCategory_Initialize(&dword_1007B3A28, 30);
      v5 = v1[4];
      if (v12)
      {
        v8 = *(unsigned __int8 *)(v5 + 922);
        goto LABEL_13;
      }
    }
LABEL_22:
    *(_BYTE *)(v5 + 922) = v7;
    return objc_msgSend((id)v1[4], "_update");
  }
  if (dword_1007B3A28 > 30)
    return result;
  if (dword_1007B3A28 == -1)
  {
    result = (_QWORD *)_LogCategory_Initialize(&dword_1007B3A28, 30);
    if (!(_DWORD)result)
      return result;
    v13 = v1[4];
    v8 = *(unsigned __int8 *)(v13 + 922);
    v6 = *(_DWORD *)(v13 + 516);
  }
  if (v8)
    v9 = "enabled";
  else
    v9 = "disabled";
  return (_QWORD *)LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent setEnhancedDiscovery:]_block_invoke", 30, "Enhanced discovery %s, reference count %d\n", v9, v6);
}

_DWORD *sub_1001EDDCC(_DWORD *result)
{
  int v1;
  uint64_t v2;
  int v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  void *v7;

  v1 = result[10];
  v2 = *((_QWORD *)result + 4);
  v3 = *(_DWORD *)(v2 + 932);
  if (v1 != v3)
  {
    v4 = result;
    if (dword_1007B3A28 <= 20)
    {
      if (dword_1007B3A28 == -1)
      {
        v5 = _LogCategory_Initialize(&dword_1007B3A28, 20);
        v1 = v4[10];
        v2 = *((_QWORD *)v4 + 4);
        if (!v5)
          goto LABEL_6;
        v3 = *(_DWORD *)(v2 + 932);
      }
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent setHotspotInfo:]_block_invoke", 20, "HotspotInfo: 0x%X -> 0x%X\n", v3, v1);
      v1 = v4[10];
      v2 = *((_QWORD *)v4 + 4);
    }
LABEL_6:
    *(_DWORD *)(v2 + 932) = v1;
    v6 = *((_QWORD *)v4 + 4);
    v7 = *(void **)(v6 + 112);
    *(_QWORD *)(v6 + 112) = 0;

    return objc_msgSend(*((id *)v4 + 4), "_update");
  }
  return result;
}

_BYTE *sub_1001EDEF0(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (!result[8])
    return objc_msgSend(result, "_activate");
  return result;
}

id sub_1001EE5A8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleBluetoothDeviceConnected:", a2);
}

id sub_1001EE5B4(uint64_t a1)
{
  int v2;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 552);
  state64 = 0;
  notify_get_state(v2, &state64);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 544) = state64;
  if (dword_1007B3A28 <= 30 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_2", 30, "Family flags changed: 0x%llX\n", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 544));
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1001EE65C(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_3", 50, "Bluetooth address changed\n");
  return _objc_msgSend(*(id *)(a1 + 32), "_bleAdvertisingAddressChanged");
}

id sub_1001EE6CC(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_4", 50, "Call info changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1001EE73C(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_5", 50, "First unlock state changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

uint64_t sub_1001EE7AC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (dword_1007B3A28 <= 50)
  {
    if (dword_1007B3A28 != -1 || (result = _LogCategory_Initialize(&dword_1007B3A28, 50), (_DWORD)result))
      result = LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_6", 50, "Manatee state changed\n");
  }
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 676) = -1;
  return result;
}

id sub_1001EE824(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_7", 50, "Me device state changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_idsMeDeviceChanged");
}

id sub_1001EE894(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_8", 50, "Primary AppleID changed\n");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) = -1;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1001EE910(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_9", 50, "ScreenOn state changed\n");
  objc_msgSend(*(id *)(a1 + 32), "_updateCameraState");
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldDeliverDonStateUpdates"))
    objc_msgSend(*(id *)(a1 + 32), "_updateDonState");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1001EE99C(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_10", 50, "Screen saver changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1001EEA0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateCameraState");
}

id sub_1001EEA14(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_12", 50, "WiFi state changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

void sub_1001EEA84(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 952);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001EEADC;
  block[3] = &unk_1007146D8;
  block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1001EEADC(uint64_t a1)
{
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_14", 50, "System monitor activation completed\n");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 676) = -1;
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldDeliverDonStateUpdates"))
    objc_msgSend(*(id *)(a1 + 32), "_updateDonState");
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

void sub_1001EEB6C(id a1, CUBluetoothDevice *a2, id a3)
{
  id v4;
  SDHeadphoneEngravingRequest *v5;
  void *v6;
  SDHeadphoneEngravingRequest *v7;
  CUBluetoothDevice *v8;

  v8 = a2;
  v4 = a3;
  if (dword_1007B3A28 <= 30 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activate]_block_invoke_15", 30, "Fetching engraving data for %@\n", v8);
  v5 = [SDHeadphoneEngravingRequest alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[CUBluetoothDevice addressString](v8, "addressString"));
  v7 = -[SDHeadphoneEngravingRequest initWithBluetoothAddress:](v5, "initWithBluetoothAddress:", v6);

  -[SDHeadphoneEngravingRequest setCompletion:](v7, "setCompletion:", v4);
  -[SDHeadphoneEngravingRequest start](v7, "start");

}

id sub_1001EECAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_1001EF244(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001EF2B8(_QWORD *result)
{
  _QWORD *v1;

  if (*(_QWORD *)(result[4] + 784))
  {
    v1 = result;
    if (dword_1007B3A28 <= 40
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 40)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _handleAirDropDiscoverableModeChanged:]_block_invoke", 40, "AirDrop discoverable mode changed\n");
    }
    return objc_msgSend((id)v1[4], "_update");
  }
  return result;
}

_QWORD *sub_1001EF398(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  if (*(_QWORD *)(result[4] + 784))
  {
    v1 = result;
    if (dword_1007B3A28 <= 40
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 40)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _handleAppleIDChanged:]_block_invoke", 40, "AppleID changed\n");
    }
    v2 = v1[4];
    v3 = *(void **)(v2 + 392);
    *(_QWORD *)(v2 + 392) = 0;

    return objc_msgSend((id)v1[4], "_update");
  }
  return result;
}

id sub_1001F0E84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1001F1204(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_activityMonitorUpdate");
}

_QWORD *sub_1001F151C(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[98];
  if (v3)
  {
    if (dword_1007B3A28 <= 40)
    {
      if (dword_1007B3A28 != -1)
      {
LABEL_4:
        v4 = objc_msgSend(v3, "carplayConnected");
        v5 = "off";
        if (v4)
          v5 = "on";
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activityMonitorCarPlayStatusChanged:]_block_invoke", 40, "CarPlay changed to %s\n", v5);
        result = *(_QWORD **)(a1 + 32);
        return objc_msgSend(result, "_update");
      }
      v6 = _LogCategory_Initialize(&dword_1007B3A28, 40);
      result = *(_QWORD **)(a1 + 32);
      if (v6)
      {
        v3 = (void *)result[98];
        goto LABEL_4;
      }
    }
    return objc_msgSend(result, "_update");
  }
  return result;
}

_QWORD *sub_1001F1664(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  unsigned int v4;
  const char *v5;
  int v6;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[98];
  if (v3)
  {
    if (dword_1007B3A28 <= 40)
    {
      if (dword_1007B3A28 != -1)
      {
LABEL_4:
        v4 = objc_msgSend(v3, "multipleUsersLoggedIn");
        v5 = "no";
        if (v4)
          v5 = "yes";
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activityMonitorMultipleUsersLoggedInChanged:]_block_invoke", 40, "Multiple users logged in changed: %s\n", v5);
        result = *(_QWORD **)(a1 + 32);
        return objc_msgSend(result, "_update");
      }
      v6 = _LogCategory_Initialize(&dword_1007B3A28, 40);
      result = *(_QWORD **)(a1 + 32);
      if (v6)
      {
        v3 = (void *)result[98];
        goto LABEL_4;
      }
    }
    return objc_msgSend(result, "_update");
  }
  return result;
}

unsigned __int8 *sub_1001F179C(unsigned __int8 *result)
{
  uint64_t v1;
  id *v2;

  v1 = *((_QWORD *)result + 4);
  if (*(_QWORD *)(v1 + 784))
  {
    v2 = (id *)result;
    *(_BYTE *)(v1 + 44) = result[40];
    objc_msgSend(*((id *)result + 4), "_enhancedDiscoveryScreenChange:", result[40]);
    return (unsigned __int8 *)objc_msgSend(v2[4], "_update");
  }
  return result;
}

id sub_1001F1840(uint64_t a1)
{
  uint64_t v2;
  id result;
  int v4;
  const char *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(id *)(v2 + 784);
  if (result)
  {
    v4 = *(unsigned __int8 *)(v2 + 56);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = objc_msgSend(result, "deviceUIUnlocked");
    if (dword_1007B3A28 <= 40
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 40)))
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 56))
        v5 = "unlocked";
      else
        v5 = "locked";
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activityMonitorUILockStatusChanged:]_block_invoke", 40, "UI lock status changed to %s\n", v5);
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (!v4)
    {
      if (*(_BYTE *)(v6 + 56))
      {
        *(_QWORD *)(v6 + 408) = 0;
        v6 = *(_QWORD *)(a1 + 32);
      }
    }
    return objc_msgSend((id)v6, "_update");
  }
  return result;
}

_QWORD *sub_1001F19A4(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  int v4;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[98];
  if (v3)
  {
    if (dword_1007B3A28 <= 40)
    {
      if (dword_1007B3A28 == -1)
      {
        v4 = _LogCategory_Initialize(&dword_1007B3A28, 40);
        result = *(_QWORD **)(a1 + 32);
        if (!v4)
          return objc_msgSend(result, "_update");
        v3 = (void *)result[98];
      }
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activityMonitorMediaAccessControlSettingChanged:]_block_invoke", 40, "Media access control setting state changed: %d\n", objc_msgSend(v3, "mediaAccessControlSetting"));
      result = *(_QWORD **)(a1 + 32);
    }
    return objc_msgSend(result, "_update");
  }
  return result;
}

_QWORD *sub_1001F1AAC(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  int v4;

  result = *(_QWORD **)(a1 + 32);
  v3 = (void *)result[98];
  if (v3)
  {
    if (dword_1007B3A28 <= 40)
    {
      if (dword_1007B3A28 == -1)
      {
        v4 = _LogCategory_Initialize(&dword_1007B3A28, 40);
        result = *(_QWORD **)(a1 + 32);
        if (!v4)
          goto LABEL_7;
        v3 = (void *)result[98];
      }
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _activityMonitorWatchWristStateChanged:]_block_invoke", 40, "Watch wrist state changed: %d\n", objc_msgSend(v3, "pairedWatchWristState"));
      result = *(_QWORD **)(a1 + 32);
    }
LABEL_7:
    objc_msgSend(result, "_idsMeDeviceChanged");
    return objc_msgSend(*(id *)(a1 + 32), "_update");
  }
  return result;
}

uint64_t sub_1001F1BE0(uint64_t a1)
{
  char v3;

  v3 = 0;
  objc_msgSend(*(id *)(a1 + 32), "_activityMonitorCurrentLevelAndNeedsPoll:recentUserActivity:", 0, &v3);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1001F1C3C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]_block_invoke", 60, "### Start NearbyAction advertiser failed: %@\n", v3);

  }
  else
  {

  }
}

void sub_1001F1CC0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  if (dword_1007B3A28 <= 30 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]_block_invoke_2", 30, "BLE NearbyAction linger advertise ended\n");
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 136);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 136);
    *(_QWORD *)(v4 + 136) = 0;

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96) = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "invalidate");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 120);
  *(_QWORD *)(v6 + 120) = 0;

}

void sub_1001F1E44(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v10 = v3;
  if (dword_1007B39B8 <= 50)
  {
    if (dword_1007B39B8 != -1 || (v4 = _LogCategory_Initialize(&dword_1007B39B8, 50), v3 = v10, v4))
    {
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke", 50, "BLE NearbyAction found %@\n", v3);
      v3 = v10;
    }
  }
  v5 = *(_QWORD **)(a1 + 32);
  if (!v5[18])
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 144);
    *(_QWORD *)(v7 + 144) = v6;

    v3 = v10;
    v5 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v5, "_deviceDiscoveryBLEDeviceFound:type:", v3, 15);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
  if (v9)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "setObject:forKeyedSubscript:", v10, v9);

}

void sub_1001F1F38(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (dword_1007B39B8 <= 50 && (dword_1007B39B8 != -1 || _LogCategory_Initialize(&dword_1007B39B8, 50)))
    LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_2", 50, "BLE NearbyAction lost %@\n", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  if (v3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "removeObjectForKey:", v3);
  objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceLost:type:", v4, 15);

}

void sub_1001F1FF8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;

  v5 = a2;
  v7 = v5;
  if (dword_1007B39B8 <= 20)
  {
    if (dword_1007B39B8 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B39B8, 20), v5 = v7, v6))
    {
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_3", 20, "BLE NearbyAction changed %@\n", v5);
      v5 = v7;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceChanged:type:changes:", v5, 15, a3);

}

id sub_1001F209C(uint64_t a1, uint64_t a2)
{
  const char *v4;

  if (dword_1007B3A28 <= 20 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 20)))
  {
    v4 = "?";
    if (a2 == 1)
      v4 = "Scanning";
    if (!a2)
      v4 = "Unknown";
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_4", 20, "BLE NearbyAction scan state changed: %s\n", v4);
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEScanStateChanged:type:", a2, 15);
}

void sub_1001F214C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_5", 60, "### Start NearbyAction scanner failed: %@\n", v3);

  }
  else
  {

  }
}

uint64_t sub_1001F248C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001F249C(uint64_t a1)
{

}

void sub_1001F24A4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7;

  v7 = a3;
  if ((objc_msgSend(v7, "sessionFlags") & 0x100) == 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }

}

const char *sub_1001F2514(int a1)
{
  const char *result;

  result = "Invalid";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "ContinuityRemote";
      break;
    case 2:
      result = "iOSSetup";
      break;
    case 3:
      result = "Repair";
      break;
    case 4:
      result = "Setup2";
      break;
    case 5:
      result = "AudioTuning";
      break;
    case 6:
      result = "PasswordGranting";
      break;
    case 7:
      result = "PasswordSharing";
      break;
    case 8:
      result = "System";
      break;
    case 9:
      result = "AutoUnlock";
      break;
    case 10:
      result = "WHASetup";
      break;
    case 11:
      result = "AppleTVSetup";
      break;
    case 12:
      result = "DeviceDiagnostics";
      break;
    case 13:
      result = "RemoteAutoFill";
      break;
    case 14:
      result = "ApplePay";
      break;
    case 15:
      result = "CompanionLinkProx";
      break;
    case 16:
      result = "RemoteManagement";
      break;
    case 17:
      result = "RemoteAutoFillPong";
      break;
    case 18:
      result = "RemoteDisplay";
      break;
    case 19:
      result = "ContinuityKeyboard";
      break;
    case 20:
      result = "PhoneCallHandoff";
      break;
    case 21:
      result = "ShareAudio";
      break;
    case 22:
      result = "AuthenticateAccounts";
      break;
    case 23:
      goto LABEL_5;
    case 24:
      result = "HasInvitations";
      break;
    case 25:
      result = "AcceptedInvitation";
      break;
    default:
      if (a1 == 127)
        result = "Debug";
      else
LABEL_5:
        result = "?";
      break;
  }
  return result;
}

void sub_1001F2F00(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoAdvertiserUpdate]_block_invoke", 60, "### Start NearbyInfo advertiser failed: %@\n", v3);

  }
  else
  {

  }
}

_QWORD *sub_1001F38C8(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  if (result[4] == *(_QWORD *)(result[5] + 208))
  {
    v1 = result;
    if (dword_1007B3A28 <= 30
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoAdvertiserLingerStart:]_block_invoke", 30, "NearbyInfo Linger advertise stop: %@\n", v1[6]);
    }
    v2 = *(void **)(v1[5] + 208);
    if (v2)
    {
      v3 = v2;
      dispatch_source_cancel(v3);
      v4 = v1[5];
      v5 = *(void **)(v4 + 208);
      *(_QWORD *)(v4 + 208) = 0;

    }
    return objc_msgSend((id)v1[5], "_update");
  }
  return result;
}

const char *sub_1001F407C(unsigned int a1)
{
  if (a1 > 0x41)
    return "?";
  else
    return off_10071B8F8[(char)a1];
}

void sub_1001F52B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B3A28 <= 90)
    {
      v10 = v3;
      if (dword_1007B3A28 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B3A28, 90), v4 = v10, v7))
      {
        v5 = *(char *)(a1 + 56);
        if (v5 > 0x41)
          v6 = "?";
        else
          v6 = off_10071B8F8[v5];
        v8 = *(unsigned __int8 *)(a1 + 57);
        v9 = sub_1001F2514(*(unsigned __int8 *)(a1 + 58));
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent bleNearbyInfoSendFrameType:serviceType:data:peer:isSession:]_block_invoke", 90, "### BLE Nearby send frame type %s, fragment %u, service %s, %ld of %ld bytes, peer %@ failed: %@\n", v6, v8, v9, objc_msgSend(*(id *)(a1 + 32), "length"), objc_msgSend(*(id *)(a1 + 40), "length"), *(_QWORD *)(a1 + 48), v10);
        v4 = v10;
      }
    }
  }

}

void sub_1001F53AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B3A28 <= 90)
    {
      v10 = v3;
      if (dword_1007B3A28 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B3A28, 90), v4 = v10, v7))
      {
        v5 = *(char *)(a1 + 56);
        if (v5 > 0x41)
          v6 = "?";
        else
          v6 = off_10071B8F8[v5];
        v8 = *(unsigned __int8 *)(a1 + 57);
        v9 = sub_1001F2514(*(unsigned __int8 *)(a1 + 58));
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent bleNearbyInfoSendFrameType:serviceType:data:peer:isSession:]_block_invoke_2", 90, "### BLE Nearby send frame type %s, last fragment %u, service %s, %ld of %ld bytes, peer %@ failed: %@\n", v6, v8, v9, objc_msgSend(*(id *)(a1 + 32), "length"), objc_msgSend(*(id *)(a1 + 40), "length"), *(_QWORD *)(a1 + 48), v10);
        v4 = v10;
      }
    }
  }

}

void sub_1001F54A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B3A28 <= 90)
    {
      v9 = v3;
      if (dword_1007B3A28 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B3A28, 90), v4 = v9, v7))
      {
        v5 = *(char *)(a1 + 48);
        if (v5 > 0x41)
          v6 = "?";
        else
          v6 = off_10071B8F8[v5];
        v8 = sub_1001F2514(*(unsigned __int8 *)(a1 + 49));
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent bleNearbyInfoSendFrameType:serviceType:data:peer:isSession:]_block_invoke_3", 90, "### BLE Nearby send frame type %s, service %s, %ld bytes, peer %@ failed: %@\n", v6, v8, objc_msgSend(*(id *)(a1 + 32), "length"), *(_QWORD *)(a1 + 40), v9);
        v4 = v9;
      }
    }
  }

}

void sub_1001F5778(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_2", 50, "BLE NearbyInfo lost %@\n", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  if (v3)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "removeObjectForKey:", v3);
  objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceLost:type:", v4, 16);

}

id sub_1001F5838(uint64_t a1, uint64_t a2)
{
  const char *v4;

  if (dword_1007B3A28 <= 20 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 20)))
  {
    v4 = "?";
    if (a2 == 1)
      v4 = "Scanning";
    if (!a2)
      v4 = "Unknown";
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_4", 20, "BLE NearbyInfo scan state changed: %s\n", v4);
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEScanStateChanged:type:", a2, 16);
}

void sub_1001F58E8(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_5", 60, "### Start NearbyInfo scanner failed: %@\n", v3);

  }
  else
  {

  }
}

void sub_1001F596C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  id v8;

  v8 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 952));
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v3 + 280))
  {
    if (*(_BYTE *)(v3 + 704))
    {
      v4 = v8;
      if (dword_1007B39B8 > 30)
        goto LABEL_13;
      if (dword_1007B39B8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_1007B39B8, 30);
        v4 = v8;
        if (!v6)
          goto LABEL_13;
      }
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "advertisementFields"));
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke", 30, "BLE Prox found %@\n%@\n", v8, v5);

    }
    else
    {
      v4 = v8;
      if (dword_1007B39B8 > 30)
        goto LABEL_13;
      if (dword_1007B39B8 == -1)
      {
        v7 = _LogCategory_Initialize(&dword_1007B39B8, 30);
        v4 = v8;
        if (!v7)
          goto LABEL_13;
      }
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke", 30, "BLE Prox found %@\n", v4);
    }
    v4 = v8;
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceFound:type:", v4, 7);
  }

}

void sub_1001F5A9C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 952));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 704))
  {
    if (dword_1007B39B8 <= 30
      && (dword_1007B39B8 != -1 || _LogCategory_Initialize(&dword_1007B39B8, 30)))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "advertisementFields"));
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_2", 30, "BLE Prox lost %@\n%@\n", v4, v3);

    }
  }
  else if (dword_1007B39B8 <= 30
         && (dword_1007B39B8 != -1 || _LogCategory_Initialize(&dword_1007B39B8, 30)))
  {
    LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_2", 30, "BLE Prox lost %@\n", v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceLost:type:", v4, 7);

}

void sub_1001F5BB4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  id v10;

  v10 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 952));
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v5 + 280))
  {
    if (*(_BYTE *)(v5 + 704))
    {
      v6 = v10;
      if (dword_1007B39B8 > 30)
        goto LABEL_13;
      if (dword_1007B39B8 == -1)
      {
        v8 = _LogCategory_Initialize(&dword_1007B39B8, 30);
        v6 = v10;
        if (!v8)
          goto LABEL_13;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "advertisementFields"));
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_3", 30, "BLE Prox changed %@\n%@\n", v10, v7);

    }
    else
    {
      v6 = v10;
      if (dword_1007B39B8 > 30)
        goto LABEL_13;
      if (dword_1007B39B8 == -1)
      {
        v9 = _LogCategory_Initialize(&dword_1007B39B8, 30);
        v6 = v10;
        if (!v9)
          goto LABEL_13;
      }
      LogPrintF(&dword_1007B39B8, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_3", 30, "BLE Prox changed %@\n", v6);
    }
    v6 = v10;
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEDeviceChanged:type:changes:", v6, 7, a3);
  }

}

id sub_1001F5CF4(uint64_t a1, uint64_t a2)
{
  const char *v4;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 952));
  if (dword_1007B3A28 <= 20 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 20)))
  {
    v4 = "?";
    if (a2 == 1)
      v4 = "Scanning";
    if (!a2)
      v4 = "Unknown";
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_4", 20, "BLE Prox scan state changed: %s\n", v4);
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryBLEScanStateChanged:type:", a2, 7);
}

void sub_1001F5DB0(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_5", 60, "### BLE Prox scanner start failed: %@\n", v3);

  }
  else
  {

  }
}

id sub_1001F5FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_btPipeHandleFrameType:data:", a2, a3);
}

void sub_1001F6544(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _btPipeHandleFrameType:data:]_block_invoke", 60, "### BTPipe ping response failed: %@\n", v3);

  }
  else
  {

  }
}

id sub_1001F6684(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

_QWORD *sub_1001F67F0(_QWORD *result)
{
  _QWORD *v1;

  if (*(_QWORD *)(result[4] + 784))
  {
    v1 = result;
    if (dword_1007B3A28 <= 40
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 40)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _mirroringStateChanged:]_block_invoke", 40, "Mirroring state changed\n");
    }
    return objc_msgSend((id)v1[4], "_update");
  }
  return result;
}

void sub_1001F7868(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];
  id v10;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (dword_1007B3A28 <= 30
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _registerForMagicMountUpdates]_block_invoke", 30, "Magic mount manager failed to start: %@\n", v6);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(NSObject **)(v7 + 952);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001F7960;
    block[3] = &unk_100714860;
    block[4] = v7;
    v10 = v5;
    dispatch_async(v8, block);

  }
}

id sub_1001F7960(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 693) = objc_msgSend(*(id *)(a1 + 40), "isMounted");
  return objc_msgSend(*(id *)(a1 + 32), "_cameraStateChanged");
}

_QWORD *sub_1001F7DC4(_QWORD *result)
{
  uint64_t v1;
  float v2;
  _QWORD *v3;
  int v4;
  float v5;
  float v6;
  const char *v7;
  BOOL v8;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 693))
    return result;
  v2 = *(float *)(v1 + 696);
  if (v2 == -1.0)
    return result;
  v3 = result;
  v4 = *(unsigned __int8 *)(v1 + 792);
  v5 = *(float *)(v1 + 696);
  if (*(_BYTE *)(v1 + 792))
  {
    v6 = *(float *)(v1 + 700);
    if (v6 == -1.0)
      return result;
    v5 = *(float *)(v1 + 696);
    if (v6 > v2)
      v5 = *(float *)(v1 + 700);
  }
  if (dword_1007B3A28 <= 30)
  {
    if (dword_1007B3A28 != -1)
    {
LABEL_10:
      if (v4)
        v7 = "yes";
      else
        v7 = "no";
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _useLuxValue]_block_invoke", 30, "supportsRearLux: %s ALSLux: %f RearLux: %f usingLux: %f\n", v7, v2, *(float *)(v1 + 700), v5);
      goto LABEL_15;
    }
    if (_LogCategory_Initialize(&dword_1007B3A28, 30))
    {
      v1 = v3[4];
      v4 = *(unsigned __int8 *)(v1 + 792);
      v2 = *(float *)(v1 + 696);
      goto LABEL_10;
    }
  }
LABEL_15:
  v8 = v5 > 7.0 || v5 < 0.0;
  *(_BYTE *)(v3[4] + 694) = v8;
  return objc_msgSend((id)v3[4], "_updateCameraState");
}

void sub_1001F816C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001F8184(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  void *v11;
  int v12;
  id v13;

  v13 = a2;
  v5 = a3;
  if (objc_msgSend(v13, "isEqualToString:", CFSTR("RLuxOutput")))
  {
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("status")));
    v8 = objc_msgSend(v7, "intValue");
    if (v8)
    {
      if (dword_1007B3A28 <= 30)
      {
        v9 = v8;
        if (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30))
          LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _checkBrightnessLuxValue]_block_invoke", 30, "Received error while sampling rear lux: %d\n", v9);
      }
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("lux")));
      objc_msgSend(v11, "floatValue");
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 700) = v12;
      if (dword_1007B3A28 <= 30
        && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
      {
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _checkBrightnessLuxValue]_block_invoke", 30, "Received rear lux value %f\n", *(float *)(*(_QWORD *)(a1 + 32) + 700));
      }
      objc_msgSend(*(id *)(a1 + 32), "_useLuxValue");

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "unregisterNotificationForKey:", CFSTR("RLuxOutput"));

  }
  else if (objc_msgSend(v13, "isEqualToString:", CFSTR("Lux")))
  {
    objc_msgSend(v5, "floatValue");
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 696) = v10;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "setProperty:forKey:", &__kCFBooleanFalse, CFSTR("ActivateALS"));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 296), "unregisterNotificationForKey:", CFSTR("Lux"));
    if (dword_1007B3A28 <= 30
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _checkBrightnessLuxValue]_block_invoke", 30, "Received ALS lux value %f\n", *(float *)(*(_QWORD *)(a1 + 32) + 696));
    }
    objc_msgSend(*(id *)(a1 + 32), "_useLuxValue");
  }

}

id sub_1001F8440(uint64_t a1)
{
  id result;
  uint64_t state64;

  result = (id)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 856);
  if ((_DWORD)result != -1)
  {
    state64 = 0;
    result = (id)notify_get_state((int)result, &state64);
    if ((_DWORD)state64 == 3)
    {
      return objc_msgSend(*(id *)(a1 + 32), "_notifyCameraConfigChange");
    }
    else if ((_DWORD)state64 == 2)
    {
      return objc_msgSend(*(id *)(a1 + 32), "_checkConditionsForEnhancedDiscovery");
    }
    else if ((state64 & 0xFFFFFFFE) == 4)
    {
      objc_msgSend(*(id *)(a1 + 32), "_discoverySessionStateChange:", (_DWORD)state64 == 4);
      objc_msgSend(*(id *)(a1 + 32), "_checkConditionsForEnhancedDiscovery");
      return objc_msgSend(*(id *)(a1 + 32), "_cameraStateChanged");
    }
  }
  return result;
}

void sub_1001F87F4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  id v16;
  uint64_t v17;
  int8x16_t v18;
  _QWORD v19[4];
  NSObject *v20;
  id v21;
  uint64_t v22;
  _QWORD handler[4];
  int8x16_t v24;

  v3 = a2;
  if (!v3)
  {
    if (dword_1007B3A28 <= 30
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDonnedEventToDevice:allowRetry:]_block_invoke", 30, "Sending DONNED state to %@\n", *(_QWORD *)(a1 + 40));
    }
    v15 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001F8AF8;
    v19[3] = &unk_10071B3D8;
    v20 = v15;
    v16 = *(id *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    v21 = v16;
    v22 = v17;
    -[NSObject sendRequestID:request:options:responseHandler:](v20, "sendRequestID:request:options:responseHandler:", CFSTR("com.sharing.donState"), &off_10074F908, 0, v19);

    v6 = v20;
    goto LABEL_23;
  }
  if (dword_1007B3A28 <= 90 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 90)))
  {
    if (*(_BYTE *)(a1 + 56))
      v4 = "yes";
    else
      v4 = "no";
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDonnedEventToDevice:allowRetry:]_block_invoke", 90, "### Error activating don state send client: %@. Retry allowed: %s.\n", v3, v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDeviceIdentifier"));

    if (v5)
    {
      v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(_QWORD *)(a1 + 48) + 952));
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1001F8AEC;
      handler[3] = &unk_100714860;
      v18 = *(int8x16_t *)(a1 + 40);
      v7 = (id)v18.i64[0];
      v24 = vextq_s8(v18, v18, 8uLL);
      dispatch_source_set_event_handler(v6, handler);
      SFDispatchTimerSet(v6, 3.0, -1.0, -4.0);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 504))
      {
        v8 = objc_alloc_init((Class)NSMutableDictionary);
        v9 = *(_QWORD *)(a1 + 48);
        v10 = *(void **)(v9 + 504);
        *(_QWORD *)(v9 + 504) = v8;

      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDeviceIdentifier"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 504), "objectForKeyedSubscript:", v11));

      if (v12)
      {
        v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 504), "objectForKeyedSubscript:", v11));
        v14 = v13;
        if (v13)
        {
          dispatch_source_cancel(v13);

        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 504), "setObject:forKeyedSubscript:", 0, v11);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 504), "setObject:forKeyedSubscript:", v6, v11);
      dispatch_resume(v6);

LABEL_23:
    }
  }

}

id sub_1001F8AEC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleRetryTimerForDevice:", *(_QWORD *)(a1 + 40));
}

void sub_1001F8AF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v7 = a3;
  v8 = a4;
  if (v8)
  {
    if (dword_1007B3A28 <= 90
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 90)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDonnedEventToDevice:allowRetry:]_block_invoke", 90, "### Error sending donned status: %@\n", v8, v14);
    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDeviceIdentifier"));
    if (v9)
    {
      v10 = *(void **)(*(_QWORD *)(a1 + 48) + 480);
      if (!v10)
      {
        v11 = objc_alloc_init((Class)NSMutableSet);
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(void **)(v12 + 480);
        *(_QWORD *)(v12 + 480) = v11;

        v10 = *(void **)(*(_QWORD *)(a1 + 48) + 480);
      }
      objc_msgSend(v10, "addObject:", v9);
    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");

  }
}

void sub_1001F8D08(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  int v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "model"));
  v4 = objc_msgSend(v3, "containsString:", CFSTR("Watch"));

  v5 = v8;
  if (v4)
  {
    if (dword_1007B3A28 <= 30)
    {
      if (dword_1007B3A28 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B3A28, 30), v5 = v8, v6))
      {
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDonnedEventsStart]_block_invoke", 30, "Found watch while donned: %@\n", v5);
        v5 = v8;
      }
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsDeviceIdentifier"));
    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 480), "containsObject:", v7) & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "_deliverDonnedEventToDevice:allowRetry:", v8, 1);

    v5 = v8;
  }

}

void sub_1001F8DFC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "idsDeviceIdentifier"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 480), "removeObject:", v3);
    v3 = v4;
  }

}

void sub_1001F8E4C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v6 = v3;
    if (dword_1007B3A28 <= 90
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 90)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDonnedEventsStart]_block_invoke_3", 90, "### Error activating donned discovery client: %@\n", v6);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "invalidate");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0;

    v3 = v6;
  }

}

void sub_1001F90C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  int8x16_t v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    if (dword_1007B3A28 <= 90
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 90)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDoffedEvent]_block_invoke", 90, "### Error activating send client: %@\n", v3);
    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    if (*(_QWORD *)(a1 + 40))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 480), "removeObject:");
    objc_msgSend(*(id *)(a1 + 48), "_invalidateWatchDiscoveryIfNeeded");
  }
  else
  {
    if (dword_1007B3A28 <= 30
      && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    {
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDoffedEvent]_block_invoke", 30, "Sending DOFFED state to %@\n", *(_QWORD *)(a1 + 56));
    }
    v4 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001F9228;
    v5[3] = &unk_10071B3D8;
    v6 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
    v7 = v4;
    objc_msgSend(v7, "sendRequestID:request:options:responseHandler:", CFSTR("com.sharing.donState"), &off_10074F930, 0, v5);

  }
}

void sub_1001F9228(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;

  v12 = a2;
  v7 = a3;
  v8 = a4;
  if (v8
    && dword_1007B3A28 <= 90
    && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 90)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _deliverDoffedEvent]_block_invoke", 90, "### Error sending doffed status: %@\n", v8, v12);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 504), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v9)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 504), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    v11 = v10;
    if (v10)
    {
      dispatch_source_cancel(v10);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 504), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 40));
  }
  objc_msgSend(*(id *)(a1 + 48), "invalidate");
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 480), "removeObject:");
  objc_msgSend(*(id *)(a1 + 32), "_invalidateWatchDiscoveryIfNeeded");

}

void sub_1001FA138(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void (**v5)(_QWORD, _QWORD);
  id v6;

  v6 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bluetoothStateChangedHandler"));

  if (v4)
  {
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bluetoothStateChangedHandler"));
    v5[2](v5, *(_QWORD *)(a1 + 32));

  }
}

id sub_1001FBFC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_enhancedDiscoveryTimerFired");
}

void sub_1001FC394(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;

  objc_msgSend(*(id *)(a1 + 32), "_checkConditionsForEnhancedDiscovery");
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 344);
  if (v2)
  {
    v5 = v2;
    dispatch_source_cancel(v5);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 344);
    *(_QWORD *)(v3 + 344) = 0;

  }
}

id sub_1001FC4B0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceDiscoveryRequestStart:", *(_QWORD *)(a1 + 40));
}

void sub_1001FD240(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = NSPrintF("Timeout-%@", a1[6]);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v1, "_deviceDiscoveryFastScanStop:reset:reason:", v2, 0, v4);

}

void sub_1001FD490(_QWORD *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  unsigned int v9;
  id v10;

  v10 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rapportIdentifier"));
  v9 = objc_msgSend(v8, "isEqual:", a1[4]);

  if (v9 && (objc_msgSend(v10, "isEqual:", a1[5]) & 1) == 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a3);
    *a4 = 1;
  }

}

const char *sub_1001FD530(int a1)
{
  const char *result;

  if (a1 > 99)
  {
    switch(a1)
    {
      case 'd':
        return "B238SetupAfterWiFi";
      case 'e':
        return "B389SetupFromFindMy";
      case 'f':
        return "B389SetupDone";
      default:
        return "?";
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "ATVSetup";
        break;
      case 4:
        result = "MobileBackup";
        break;
      case 5:
        result = "WatchSetup";
        break;
      case 6:
        result = "ATVPair";
        break;
      case 7:
        result = "InternetRelay";
        break;
      case 8:
        result = "WiFiPassword";
        break;
      case 9:
        result = "iOSSetup";
        break;
      case 10:
        result = "Repair";
        break;
      case 11:
        result = "LegacyHomePodSetup";
        break;
      case 12:
        result = "ApplePay";
        break;
      case 13:
        result = "WHASetup";
        break;
      case 14:
        result = "DevToolsPair";
        break;
      case 17:
        result = "DDPing";
        break;
      case 18:
        result = "DDPong";
        break;
      case 19:
        result = "RemoteAutoFill";
        break;
      case 20:
        result = "CompanionLinkProx";
        break;
      case 21:
        result = "RemoteManagement";
        break;
      case 22:
        result = "RemoteAutoFillPong";
        break;
      case 24:
        result = "AccessorySetup";
        break;
      case 25:
        result = "TVLS";
        break;
      case 27:
        result = "ShareAudio";
        break;
      case 28:
        result = "AppSignIn";
        break;
      case 29:
        result = "Fitness";
        break;
      case 30:
        result = "TVCCS";
        break;
      case 31:
        result = "TVSA";
        break;
      case 32:
        result = "AuthenticateAccounts";
        break;
      case 33:
        result = "HomePodSetup";
        break;
      case 34:
        result = "CompanionAuthentication";
        break;
      case 36:
        result = "dovePeace";
        break;
      case 43:
        result = "AuthenticateAccountsV2";
        break;
      case 50:
        result = "NeedsRDLink";
        break;
      case 51:
        result = "NeedsCLink";
        break;
      case 52:
        result = "Goodbye";
        break;
      case 53:
        result = "PointToShare";
        break;
      case 55:
        result = "AUAction";
        break;
      case 56:
        result = "AcceptedInvitations";
        break;
      case 84:
        result = "HasInvitations";
        break;
      default:
        return "?";
    }
  }
  return result;
}

id sub_1001FE018(uint64_t a1)
{
  if (dword_1007B3A28 <= 30 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationEnsureStarted]_block_invoke", 30, "Identities changed\n");
  return objc_msgSend(*(id *)(a1 + 32), "_identificationGetIdentities");
}

void sub_1001FE228(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 952);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001FE2E8;
  v11[3] = &unk_100714990;
  v12 = v7;
  v13 = v6;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, v11);

}

void sub_1001FE2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  void *v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *j;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (dword_1007B3A28 > 90)
      return;
    if (dword_1007B3A28 == -1)
    {
      if (!_LogCategory_Initialize(&dword_1007B3A28, 90))
        return;
      v2 = *(_QWORD *)(a1 + 40);
    }
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2", 90, "### Identification get identities failed: %{error}\n", v2);
    return;
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(void **)(v3 + 968);
  *(_QWORD *)(v3 + 968) = 0;

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v5 = *(id *)(a1 + 56);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_24;
  }
  v7 = v6;
  v8 = 0;
  v9 = *(_QWORD *)v41;
  do
  {
    for (i = 0; i != v7; i = (char *)i + 1)
    {
      if (*(_QWORD *)v41 != v9)
        objc_enumerationMutation(v5);
      v11 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v11, "type") == 1)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = *(void **)(v12 + 960);
        if (v13)
        {
          v8 = (uint64_t)objc_msgSend(v13, "compareWithRPIdentity:", v11);
          v12 = *(_QWORD *)(a1 + 48);
        }
        else
        {
          v8 = 2048;
        }
        v14 = (id *)(v12 + 960);
        goto LABEL_17;
      }
      if (objc_msgSend(v11, "type") == 14)
      {
        v14 = (id *)(*(_QWORD *)(a1 + 48) + 968);
LABEL_17:
        objc_storeStrong(v14, v11);
      }
      v15 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v15 + 960) && *(_QWORD *)(v15 + 968))
        goto LABEL_24;
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  }
  while (v7);
LABEL_24:

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 960);
  if (v16)
  {
    if (dword_1007B3A28 <= 30)
    {
      if (dword_1007B3A28 != -1)
        goto LABEL_27;
      if (_LogCategory_Initialize(&dword_1007B3A28, 30))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 960);
LABEL_27:
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2", 30, "Self identity: %@, %#{flags}\n", v16, v8, &unk_1005CD15F);
      }
    }
  }
  else if (dword_1007B3A28 <= 60
         && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 60)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2", 60, "### Self identity not found\n");
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 968);
  if (v17)
  {
    if (dword_1007B3A28 <= 30)
    {
      if (dword_1007B3A28 != -1)
        goto LABEL_39;
      if (_LogCategory_Initialize(&dword_1007B3A28, 30))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 968);
LABEL_39:
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2", 30, "Temporary self identity: %@\n", v17);
      }
    }
  }
  else if (dword_1007B3A28 <= 60
         && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 60)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2", 60, "### Temporary self identity not found\n", v35);
  }
  if ((_DWORD)v8)
  {
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *(void **)(v18 + 72);
    *(_QWORD *)(v18 + 72) = 0;

    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(void **)(v20 + 936);
    *(_QWORD *)(v20 + 936) = 0;

    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(void **)(v22 + 112);
    *(_QWORD *)(v22 + 112) = 0;

  }
  v24 = objc_alloc_init((Class)NSMutableArray);
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v25 = *(id *)(a1 + 56);
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v37;
    do
    {
      for (j = 0; j != v27; j = (char *)j + 1)
      {
        if (*(_QWORD *)v37 != v28)
          objc_enumerationMutation(v25);
        v30 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v30, "type") != 1 && objc_msgSend(v30, "type") != 14)
          objc_msgSend(v24, "addObject:", v30);
      }
      v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    }
    while (v27);
  }

  v31 = objc_msgSend(v24, "copy");
  v32 = *(_QWORD *)(a1 + 48);
  v33 = *(void **)(v32 + 880);
  *(_QWORD *)(v32 + 880) = v31;

  if (dword_1007B3A28 <= 30 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 30)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2", 30, "Identification identities: %d total\n", objc_msgSend(*(id *)(a1 + 56), "count"));
  objc_msgSend(*(id *)(a1 + 48), "_identificationReIdentify");
  objc_msgSend(*(id *)(a1 + 48), "_identificationCheckFlagsAndACL");
  objc_msgSend(*(id *)(a1 + 48), "_update");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v34, "postNotificationName:object:", off_1007B39B0, 0);

}

void sub_1001FEB34(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = (unint64_t)objc_msgSend(v6, "discoveryFlags");
  v5 = (void *)(v4 & ~*(_QWORD *)(a1 + 32));
  if (v5 != (void *)v4)
  {
    objc_msgSend(v6, "setDiscoveryFlags:", v5);
    if (!v5)
      objc_msgSend(v6, "setLastUpdateTicks:", mach_absolute_time());
  }

}

void sub_1001FF9CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FFB24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FFFD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002006F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100200B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 64), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100200B60(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7));
        if (v8)
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100200DEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100202F70(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  BOOL v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v10;

  v10 = a3;
  v6 = objc_msgSend(v10, "serviceType") == *(unsigned __int8 *)(a1 + 48);
  v7 = v10;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "receivedFramePeerHandler"));

    if (v8)
    {
      v9 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "receivedFramePeerHandler"));
      v9[2](v9, *(unsigned __int8 *)(a1 + 49), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    }
    *a4 = 1;
    v7 = v10;
  }

}

void sub_1002038BC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  id v13;

  v13 = a3;
  v6 = objc_msgSend(v13, "serviceType") == *(unsigned __int8 *)(a1 + 48);
  v7 = v13;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "peerDevice"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
    v10 = objc_msgSend(v9, "isEqual:", *(_QWORD *)(a1 + 32));

    v7 = v13;
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "receivedFrameHandler"));

      if (v11)
      {
        v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "receivedFrameHandler"));
        v12[2](v12, *(unsigned __int8 *)(a1 + 49), *(_QWORD *)(a1 + 40));

      }
      *a4 = 1;
      v7 = v13;
    }
  }

}

void sub_100203CC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (dword_1007B3A28 <= 90)
    {
      v6 = v3;
      if (dword_1007B3A28 != -1 || (v5 = _LogCategory_Initialize(&dword_1007B3A28, 90), v4 = v6, v5))
      {
        LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent sessionSendEvent:session:]_block_invoke", 90, "### Sent %ld bytes to %@ failed: %@\n", objc_msgSend(*(id *)(a1 + 32), "length"), *(_QWORD *)(a1 + 40), v6);
        v4 = v6;
      }
    }
  }

}

void sub_100204858(uint64_t a1, void *a2)
{
  __CFString *v3;
  __CFString *v4;
  const __CFString *v5;
  int v6;
  __CFString *v7;

  v3 = a2;
  v4 = v3;
  if (dword_1007B3A28 <= 20)
  {
    v7 = v3;
    if (dword_1007B3A28 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B3A28, 20), v4 = v7, v6))
    {
      v5 = CFSTR("success");
      if (v4)
        v5 = v4;
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _sendMessage:frameType:service:session:]_block_invoke", 20, "Sent message to %@, %@, %@\n", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v5);
      v4 = v7;
    }
  }

}

void sub_1002048FC(uint64_t a1, void *a2)
{
  __CFString *v3;
  __CFString *v4;
  const __CFString *v5;
  int v6;
  __CFString *v7;

  v3 = a2;
  v4 = v3;
  if (dword_1007B3A28 <= 20)
  {
    v7 = v3;
    if (dword_1007B3A28 != -1 || (v6 = _LogCategory_Initialize(&dword_1007B3A28, 20), v4 = v7, v6))
    {
      v5 = CFSTR("success");
      if (v4)
        v5 = v4;
      LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _sendMessage:frameType:service:session:]_block_invoke_2", 20, "Sent message to %@, %@, %@\n", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v5);
      v4 = v7;
    }
  }

}

id sub_1002062B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_startUnlockBLEConnectionWithDevice:encrypted:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

id sub_10020652C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_stopUnlockBLEConnectionWithDevice:", *(_QWORD *)(a1 + 40));
}

id sub_1002066E8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sendUnlockData:toBLEDevice:direct:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 56));
}

void sub_100206A90(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v8;

  v8 = a3;
  if (objc_msgSend(v8, "serviceType") == 9)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "receivedFramePeerHandler"));

    if (v6)
    {
      v7 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "receivedFramePeerHandler"));
      v7[2](v7, 7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

      *a4 = 1;
    }
  }

}

id sub_100206B74(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 472);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v7, "discoveryFlags", (_QWORD)v9) & 0x1000000) != 0)
          objc_msgSend(*(id *)(a1 + 32), "_unlockDeviceFilterChangedForRequest:", v7);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100206FE0(id result)
{
  id v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  if (dword_1007B3A28 <= 50)
  {
    if (dword_1007B3A28 != -1 || (result = (id)_LogCategory_Initialize(&dword_1007B3A28, 50), (_DWORD)result))
      result = (id)LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent unlockUpdateAdvertising:mask:]_block_invoke", 50, "Unlock advertise update: 0x%X flags, 0x%X mask\n", *((_DWORD *)v1 + 10), *((_DWORD *)v1 + 11));
  }
  v2 = *((_DWORD *)v1 + 11);
  if ((v2 & 1) != 0 && (v3 = *((_QWORD *)v1 + 4), (*((_DWORD *)v1 + 10) & 1) != *(_BYTE *)(v3 + 834)))
  {
    *(_BYTE *)(v3 + 834) = *((_DWORD *)v1 + 10) & 1;
    v4 = 1;
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v4 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  v5 = *((_QWORD *)v1 + 4);
  if (((*((_DWORD *)v1 + 10) >> 1) & 1) != *(_BYTE *)(v5 + 836))
  {
    *(_BYTE *)(v5 + 836) = (*((_DWORD *)v1 + 10) & 2) != 0;
    v4 = 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 2) & 1) != *(_BYTE *)(v6 + 833))
    {
      *(_BYTE *)(v6 + 833) = (*((_DWORD *)v1 + 10) & 4) != 0;
      v4 = 1;
    }
  }
  if ((v2 & 8) != 0)
  {
    v7 = *((_QWORD *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 3) & 1) != *(_BYTE *)(v7 + 837))
    {
      *(_BYTE *)(v7 + 837) = (*((_DWORD *)v1 + 10) & 8) != 0;
      v4 = 1;
    }
  }
  if ((v2 & 0x10) != 0)
  {
    v8 = *((_QWORD *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 4) & 1) != *(_BYTE *)(v8 + 832))
    {
      *(_BYTE *)(v8 + 832) = (*((_DWORD *)v1 + 10) & 0x10) != 0;
      v4 = 1;
    }
  }
  if ((v2 & 0x20) != 0)
  {
    v9 = *((_QWORD *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 5) & 1) != *(_BYTE *)(v9 + 835))
    {
      *(_BYTE *)(v9 + 835) = (*((_DWORD *)v1 + 10) & 0x20) != 0;
      return objc_msgSend(*((id *)v1 + 4), "_update");
    }
  }
  if (v4)
    return objc_msgSend(*((id *)v1 + 4), "_update");
  return result;
}

void sub_100207310(uint64_t a1)
{
  void *v2;
  void *v3;
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &Current, 8));
  objc_msgSend(v2, "sendUnlockData:toBLEDevice:completion:", v3, *(_QWORD *)(a1 + 40), &stru_10071B550);

}

void sub_100207380(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  const __CFString *v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (dword_1007B3A28 <= 50
    && ((v6 = v2, dword_1007B3A28 != -1) || (v5 = _LogCategory_Initialize(&dword_1007B3A28, 50), v3 = v6, v5)))
  {
    v4 = CFSTR("success");
    if (v3)
      v4 = (const __CFString *)v3;
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent unlockStartTestClientWithDevice:]_block_invoke_2", 50, "Unlock test send: %@\n", v4);

  }
  else
  {

  }
}

void sub_100207410(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "stopUnlockBLEConnectionWithDevice:", *(_QWORD *)(a1 + 40));
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 848);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 848);
    *(_QWORD *)(v4 + 848) = 0;

  }
  if (dword_1007B3A28 <= 50 && (dword_1007B3A28 != -1 || _LogCategory_Initialize(&dword_1007B3A28, 50)))
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent unlockStartTestClientWithDevice:]_block_invoke_3", 50, "Unlock test client timer stopped\n");
}

id sub_100207678(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 896) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1002076E4(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 896) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1002079E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100207A48(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_testPipePing");
}

void sub_100207B2C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1007B3A28 <= 60
    && ((v5 = v2, dword_1007B3A28 != -1) || (v4 = _LogCategory_Initialize(&dword_1007B3A28, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1007B3A28, "-[SDNearbyAgent _testPipePing]_block_invoke", 60, "### BTPipe ping request failed: %@\n", v3);

  }
  else
  {

  }
}

Class sub_100208214(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6DF8)
  {
    v4 = off_10071B590;
    v5 = 0;
    qword_1007C6DF8 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6DF8)
    sub_1002085C4(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("SSAccountStore");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_100208640();
  qword_1007C6DF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1002082F0(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6E08)
  {
    v4 = off_10071B5A8;
    v5 = 0;
    qword_1007C6E08 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6E08)
    sub_1002086B8(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("AKAccountManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_100208734();
  qword_1007C6E00 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1002083CC(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6E18)
  {
    v4 = off_10071B5C0;
    v5 = 0;
    qword_1007C6E18 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6E18)
    sub_1002087AC(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("BrightnessSystemClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_100208828();
  qword_1007C6E10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1002084A8(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1007C6E28)
  {
    v4 = off_10071B5D8;
    v5 = 0;
    qword_1007C6E28 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_1007C6E28)
    sub_1002088A0(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("ANAnnounce");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_10020891C();
  qword_1007C6E20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100208584(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Auto Unlock advertise rate background", v1, 2u);
}

void sub_1002085C4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *StoreServicesLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDNearbyAgent.m"), 86, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_100208640()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSSAccountStoreClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDNearbyAgent.m"), 88, CFSTR("Unable to find class %s"), "SSAccountStore");

  __break(1u);
}

void sub_1002086B8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AuthKitLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDNearbyAgent.m"), 79, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_100208734()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getAKAccountManagerClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDNearbyAgent.m"), 81, CFSTR("Unable to find class %s"), "AKAccountManager");

  __break(1u);
}

void sub_1002087AC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreBrightnessLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDNearbyAgent.m"), 95, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_100208828()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBrightnessSystemClientClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDNearbyAgent.m"), 96, CFSTR("Unable to find class %s"), "BrightnessSystemClient");

  __break(1u);
}

void sub_1002088A0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AnnounceLibrary(void)"));
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("SDNearbyAgent.m"), 109, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_10020891C()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getANAnnounceClass(void)_block_invoke"));
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SDNearbyAgent.m"), 111, CFSTR("Unable to find class %s"), "ANAnnounce");

  __break(1u);
}

void sub_100208994(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  int v9;
  _QWORD v10[4];
  id v11;
  id v12;
  int v13;

  v1 = a1;
  v13 = 0;
  if (v1)
  {
    if (dword_1007B3B00 <= 30
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 30)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)", 30, "Removing GS token cache entry for %{mask}\n", v1);
    }
    v2 = sub_100208CC4(v1, &v13);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = v3;
    if (v13)
    {
      v5 = 0;
    }
    else
    {
      v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "username"));
      if (v5)
      {
        pthread_mutex_lock(&stru_1007B3B70);
        objc_msgSend((id)qword_1007C6E30, "removeObjectForKey:", v5);
        pthread_mutex_unlock(&stru_1007B3B70);
        if (dword_1007B3B00 <= 30
          && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 30)))
        {
          LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)", 30, "Removing Account token cache entry for %{mask}\n", v1);
        }
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "accountStore"));
        v12 = 0;
        objc_msgSend(v6, "setCredential:forAccount:serviceID:error:", 0, v4, CFSTR("com.apple.gs.authagent.auth"), &v12);
        v7 = v12;

        if (v7
          && dword_1007B3B00 <= 90
          && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
        {
          LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)", 90, "### Remove Account token cache entry for %{mask} failed: %@\n", v1, v7);
        }
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "accountStore"));
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_100209134;
        v10[3] = &unk_1007148C8;
        v5 = v5;
        v11 = v5;
        objc_msgSend(v8, "saveAccount:withCompletionHandler:", v4, v10);

      }
      else
      {
        v13 = 201201;
      }
    }
    v9 = v13;
    if (v13 && dword_1007B3B00 <= 90)
    {
      if (dword_1007B3B00 == -1)
      {
        if (!_LogCategory_Initialize(&dword_1007B3B00, 90))
          goto LABEL_29;
        v9 = v13;
      }
      LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)", 90, "### Remove GS token cache entry failed: %d\n", v9);
    }
  }
  else
  {
    if (dword_1007B3B00 <= 30
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 30)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)", 30, "Removing all GS token cache entries\n");
    }
    pthread_mutex_lock(&stru_1007B3B70);
    objc_msgSend((id)qword_1007C6E30, "removeAllObjects");
    pthread_mutex_unlock(&stru_1007B3B70);
    v4 = 0;
    v5 = 0;
    v13 = 0;
  }
LABEL_29:

}

id sub_100208CC4(void *a1, int *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *i;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;
  void *v28;
  void *v29;
  int *v30;
  id obj;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];

  v3 = a1;
  if (!v3)
  {
    v5 = 0;
    v7 = 0;
    v11 = 0;
    v10 = 0;
    obj = 0;
    v9 = 0;
    v8 = 0;
    v25 = -6705;
    goto LABEL_44;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](AKAccountManager, "sharedInstance"));
  v5 = v4;
  if (!v4)
  {
    v7 = 0;
    v11 = 0;
LABEL_53:
    v10 = 0;
    goto LABEL_54;
  }
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "appleIDAccountWithAppleID:", v3));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = 0;
    v9 = 0;
    obj = 0;
    v10 = 0;
    v11 = 0;
LABEL_39:
    if (dword_1007B3B00 <= 50
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50)))
    {
      LogPrintF(&dword_1007B3B00, "ACAccount * _Nullable AccountForAppleID(NSString * _Nonnull __strong, OSStatus * _Nullable)", 50, "AccountForAppleID found account %@\n", v7);
    }
    v25 = 0;
    goto LABEL_44;
  }
  if (dword_1007B3B00 <= 50 && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50)))
    LogPrintF(&dword_1007B3B00, "ACAccount * _Nullable AccountForAppleID(NSString * _Nonnull __strong, OSStatus * _Nullable)", 50, "AccountForAppleID falling back to account aliases\n");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "store"));
  v11 = v12;
  if (!v12)
  {
    v7 = 0;
    goto LABEL_53;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "accountTypeWithAccountTypeIdentifier:", ACAccountTypeIdentifierIDMS));
  if (!v10
    || (v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "accountsWithAccountType:", v10))) == 0)
  {
    v7 = 0;
LABEL_54:
    obj = 0;
    v9 = 0;
    v8 = 0;
    v25 = 201204;
    goto LABEL_44;
  }
  v28 = v10;
  v29 = v11;
  v30 = a2;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v13;
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
  if (v14)
  {
    v15 = v14;
    v9 = 0;
    v16 = 0;
    v32 = *(_QWORD *)v38;
    while (2)
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v38 != v32)
          objc_enumerationMutation(obj);
        v18 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "aliasesForAccount:", v18));

        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v9 = v19;
        v20 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
        if (v20)
        {
          v21 = v20;
          v22 = v5;
          v23 = *(_QWORD *)v34;
LABEL_19:
          v24 = 0;
          while (1)
          {
            if (*(_QWORD *)v34 != v23)
              objc_enumerationMutation(v9);
            if (!objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * v24), "caseInsensitiveCompare:", v3))
              break;
            if (v21 == (id)++v24)
            {
              v21 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
              if (v21)
                goto LABEL_19;
              v5 = v22;
              goto LABEL_34;
            }
          }
          v5 = v22;
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "altDSIDForAccount:", v18));

          if (!v8)
          {
            if (dword_1007B3B00 <= 90
              && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
            {
              LogPrintF(&dword_1007B3B00, "ACAccount * _Nullable AccountForAppleID(NSString * _Nonnull __strong, OSStatus * _Nullable)", 90, "### AccountForAppleID altDSIDForAccount:%@ returned nil\n", v18);
            }
            v16 = 0;
            goto LABEL_34;
          }
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "appleIDAccountWithAltDSID:", v8));

          if (!v7)
          {
            v16 = v8;
            continue;
          }

          v11 = v29;
          a2 = v30;
          v10 = v28;
          goto LABEL_39;
        }
LABEL_34:

      }
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      if (v15)
        continue;
      break;
    }
  }
  else
  {
    v9 = 0;
    v16 = 0;
  }

  v7 = 0;
  v25 = 201204;
  v8 = v16;
  v11 = v29;
  a2 = v30;
  v10 = v28;
LABEL_44:
  if (a2)
    *a2 = v25;
  v26 = v7;

  return v26;
}

void sub_100209134(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  int v8;
  id v9;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    if (dword_1007B3B00 <= 30)
    {
      v9 = v5;
      if (dword_1007B3B00 != -1 || (v7 = _LogCategory_Initialize(&dword_1007B3B00, 30), v6 = v9, v7))
      {
        LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)_block_invoke", 30, "Saved Account '%@ for token remove\n", *(_QWORD *)(a1 + 32));
LABEL_8:
        v6 = v9;
      }
    }
  }
  else if (dword_1007B3B00 <= 90)
  {
    v9 = v5;
    if (dword_1007B3B00 != -1 || (v8 = _LogCategory_Initialize(&dword_1007B3B00, 90), v6 = v9, v8))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)_block_invoke", 90, "### Save Account %@ for token remove failed: %@\n", *(_QWORD *)(a1 + 32), v6);
      goto LABEL_8;
    }
  }

}

void sub_100209224(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  dispatch_queue_global_t global_queue;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[4];
  id v41;
  unsigned int v42;
  _QWORD v43[4];
  id v44;
  id v45;
  NSObject *v46;
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  _QWORD block[4];
  id v53;
  id v54;
  id v55;
  unsigned int v56[3];

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v8 = objc_claimAutoreleasedReturnValue(global_queue);
  }
  v10 = v8;
  v56[0] = 0;
  v38 = v6;
  v39 = v5;
  if (!v5)
  {
    v37 = 0;
    v24 = 0;
    v27 = 0;
    v26 = 0;
    v13 = 0;
    v36 = 4294960591;
    goto LABEL_46;
  }
  if (!v7)
  {
    v13 = 0;
    v26 = 0;
    v25 = 0;
    v15 = 0;
    v27 = 0;
    v28 = 0;
    v24 = 0;
    v5 = 0;
    v37 = 0;
    goto LABEL_62;
  }
  v11 = sub_100208CC4(v5, (int *)v56);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "username"));
  if (!v13)
    v13 = v5;
  pthread_mutex_lock(&stru_1007B3B70);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1007C6E30, "objectForKeyedSubscript:", v13));
  v37 = v12;
  if (v14)
  {
    v15 = v14;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("altDSID")));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("gsToken")));
    if (dword_1007B3B00 <= 40
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 40)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 40, "Reusing cached altDSID and gstoken for %@\n", v13);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100209AA0;
    block[3] = &unk_100717108;
    v55 = v7;
    v24 = v16;
    v53 = v24;
    v25 = v17;
    v54 = v25;
    dispatch_async(v10, block);

    pthread_mutex_unlock(&stru_1007B3B70);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v5 = 0;
    goto LABEL_62;
  }
  pthread_mutex_unlock(&stru_1007B3B70);
  if (!v12)
  {
    v23 = 0;
    v18 = 0;
    goto LABEL_36;
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "aa_altDSID"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "accountType"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
  v21 = objc_msgSend(v20, "isEqualToString:", ACAccountTypeIdentifierAppleIDAuthentication);

  if (!v21)
  {
    if (dword_1007B3B00 <= 90
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "accountType"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "identifier"));
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 90, "### account identifier is %@ for %@\n", v30, v13);

    }
    goto LABEL_35;
  }
  if ((objc_opt_respondsToSelector(v12, "aida_tokenForService:") & 1) == 0)
  {
    if (dword_1007B3B00 <= 90
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 90, "### ACAccount <%@> doesn't respond to selector aida_tokenForService:\n", v12);
    }
LABEL_35:
    v23 = 0;
    goto LABEL_36;
  }
  v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "aida_tokenForService:", CFSTR("com.apple.gs.authagent.auth")));
  v23 = (void *)v22;
  if (v18 && v22)
  {
    if (dword_1007B3B00 <= 50
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 50, "Reusing Account-cached altDSID and gstoken for %{mask}\n", v13);
    }
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100209AB8;
    v48[3] = &unk_100717108;
    v51 = v7;
    v24 = v18;
    v49 = v24;
    v5 = v23;
    v50 = v5;
    dispatch_async(v10, v48);

    v26 = 0;
    v25 = 0;
    v15 = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_62;
  }
  if (dword_1007B3B00 <= 90 && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
    LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 90, "### aida_tokenForService failed altDSID=%d, accountToken=%d\n", v18 != 0, v23 != 0);
LABEL_36:
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v31 = sub_10016AAFC();
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  objc_msgSend(v26, "timeIntervalSinceDate:", v32);
  v34 = fabs(v33);

  if (v34 <= 5.0)
  {
    v5 = v23;
    v24 = v18;
    if (dword_1007B3B00 <= 50
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 50, "Throttling request that's too soon after user cancel (%f)\n", v34);
    }
    v27 = 0;
    v36 = 201229;
    goto LABEL_46;
  }
  v35 = BYSetupAssistantNeedsToRun();
  if (!v35)
    goto LABEL_54;
  if (dword_1007B3B00 <= 50)
  {
    if (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50))
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 50, "Requesting silent GS token auth because we're in a Setup Assistant\n");
LABEL_54:
    if (dword_1007B3B00 <= 50
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 50, "Asking server for GS token for %@\n", v13);
    }
  }
  v5 = v23;
  v28 = objc_alloc_init((Class)AKAppleIDAuthenticationContext);
  objc_msgSend(v28, "setServiceType:", 1);
  objc_msgSend(v28, "setServiceIdentifier:", CFSTR("com.apple.gs.authagent.auth"));
  objc_msgSend(v28, "setUsername:", v13);
  objc_msgSend(v28, "_setPassword:", 0);
  v24 = v18;
  objc_msgSend(v28, "setAltDSID:", v18);
  objc_msgSend(v28, "setIsUsernameEditable:", 0);
  if (v35)
    objc_msgSend(v28, "setAuthenticationType:", 1);
  objc_msgSend(v28, "setShouldUpdatePersistentServiceTokens:", 1);
  v27 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
  if (v28)
  {
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_100209AD0;
    v43[3] = &unk_10071BF28;
    v24 = v24;
    v44 = v24;
    v13 = v13;
    v45 = v13;
    v47 = v7;
    v46 = v10;
    objc_msgSend(v27, "authenticateWithContext:completion:", v28, v43);

    v25 = 0;
    v15 = 0;
LABEL_62:
    v56[0] = 0;
    goto LABEL_63;
  }
  v36 = 4294960534;
LABEL_46:
  v56[0] = v36;
  if (dword_1007B3B00 <= 90)
  {
    if (dword_1007B3B00 == -1)
    {
      if (!_LogCategory_Initialize(&dword_1007B3B00, 90))
        goto LABEL_50;
      v36 = v56[0];
    }
    LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)", 90, "### Request GS token for %{mask} failed: %d\n", v39, v36);
  }
LABEL_50:
  if (v7)
  {
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100209F00;
    v40[3] = &unk_100716EA8;
    v41 = v7;
    v42 = v56[0];
    dispatch_async(v10, v40);

  }
  v25 = 0;
  v15 = 0;
  v28 = 0;
LABEL_63:

}

uint64_t sub_100209AA0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t sub_100209AB8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void sub_100209AD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  _QWORD block[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  _QWORD v27[2];
  _QWORD v28[2];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", AKAuthenticationAlternateDSIDKey));
    if (!v8)
      v8 = *(id *)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", AKAuthenticationIDMSTokenKey));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("com.apple.gs.authagent.auth")));
    v11 = (void *)v10;
    if (v8)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (v12)
    {
      if (dword_1007B3B00 <= 90
        && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
      {
        LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)_block_invoke_3", 90, "### authenticateWithContext completion called with AltDSID = %@, token = %d\n", v8, v11 != 0);
      }
    }
    else
    {
      pthread_mutex_lock(&stru_1007B3B70);
      if (!qword_1007C6E30)
      {
        v13 = objc_alloc_init((Class)NSMutableDictionary);
        v14 = (void *)qword_1007C6E30;
        qword_1007C6E30 = (uint64_t)v13;

      }
      v27[0] = CFSTR("altDSID");
      v27[1] = CFSTR("gsToken");
      v28[0] = v8;
      v28[1] = v11;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v28, v27, 2));
      objc_msgSend((id)qword_1007C6E30, "setObject:forKeyedSubscript:", v15, *(_QWORD *)(a1 + 40));

      pthread_mutex_unlock(&stru_1007B3B70);
      if (dword_1007B3B00 <= 50)
      {
        if (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 50))
          LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)_block_invoke_3", 50, "AltDSID for %@: %@\n", *(_QWORD *)(a1 + 40), v8);
        if (dword_1007B3B00 <= 10
          && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 10)))
        {
          LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)_block_invoke_3", 10, "GS token for %@: %@\n", *(_QWORD *)(a1 + 40), v11);
        }
      }
    }
    v18 = *(void **)(a1 + 56);
    if (v18)
    {
      v19 = *(NSObject **)(a1 + 48);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100209EA8;
      v23[3] = &unk_100717108;
      v26 = v18;
      v24 = v8;
      v25 = v11;
      dispatch_async(v19, v23);

    }
    goto LABEL_34;
  }
  if (objc_msgSend(v6, "code") == (id)-7003)
  {
    sub_10016A9C4();
    sub_10016AB40();
  }
  if (dword_1007B3B00 <= 90 && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
    LogPrintF(&dword_1007B3B00, "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompletion  _Nullable __strong)_block_invoke_3", 90, "### Request GS token for %@ failed: %@\n", *(_QWORD *)(a1 + 40), v7);
  v16 = *(void **)(a1 + 56);
  if (v16)
  {
    v17 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100209ECC;
    block[3] = &unk_1007159D0;
    v22 = v16;
    v21 = v7;
    dispatch_async(v17, block);

    v8 = v22;
LABEL_34:

  }
}

uint64_t sub_100209EA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100209ECC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, objc_msgSend(*(id *)(a1 + 32), "code"));
}

uint64_t sub_100209F00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 0, *(unsigned int *)(a1 + 40));
}

uint64_t sub_100209F1C(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = a1;
  v6 = a2;
  v7 = 0;
  v8 = 4294960591;
  v9 = 0;
  v10 = 0;
  if (v5 && v6)
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@"), v5, v6));
    v7 = v10;
    if (v10)
    {
      v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataUsingEncoding:", 4));
      v9 = v10;
      if (v10
        && (v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "base64EncodedStringWithOptions:", 0))) != 0)
      {
        if (a3)
        {
          v10 = objc_retainAutorelease(v10);
          v8 = 0;
          *a3 = v10;
        }
        else
        {
          v8 = 0;
        }
      }
      else
      {
        v8 = 4294960534;
      }
    }
    else
    {
      v9 = 0;
      v8 = 4294960568;
    }
  }

  return v8;
}

uint64_t sub_10020A010(void *a1, int a2, _QWORD *a3)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  CC_LONG v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  _QWORD *v31;
  void *v32;
  id obj;
  id v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];

  v4 = a1;
  v5 = v4;
  if (!v4)
  {
    v29 = 4294960591;
    goto LABEL_29;
  }
  if (!a3)
    goto LABEL_28;
  if (!objc_msgSend(v4, "count"))
  {
    v8 = 0;
    v9 = 0;
    v27 = objc_retainAutorelease(0);
LABEL_27:
    v28 = v27;
    *a3 = v27;

LABEL_28:
    v29 = 0;
    goto LABEL_29;
  }
  v34 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (v34)
  {
    v31 = a3;
    v32 = v5;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    obj = v5;
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    if (!v6)
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_26;
    }
    v7 = v6;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)v37;
    while (1)
    {
      v11 = 0;
      v12 = v9;
      do
      {
        if (*(_QWORD *)v37 != v10)
          objc_enumerationMutation(obj);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v11), "lowercaseString"));

        if (a2)
        {
          v14 = v13;
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
          v15 = objc_msgSend(v14, "length");
          v16 = v15 - 1;
          if ((int)(v15 - 1) >= 0)
          {
            do
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "substringWithRange:", v16, 1));
              objc_msgSend(v13, "appendString:", v17);

              --v16;
            }
            while (v16 != -1);
          }

        }
        v8 = v13;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 32));
        if (v18)
        {
          v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataUsingEncoding:", 4)));
          v20 = objc_msgSend(v19, "bytes");
          v21 = objc_msgSend(v19, "length");
          v22 = objc_retainAutorelease(v18);
          CC_SHA256(v20, v21, (unsigned __int8 *)objc_msgSend(v22, "mutableBytes"));
          v23 = malloc_type_malloc((2 * (_QWORD)objc_msgSend(v22, "length")) | 1, 0x100004077774924uLL);
          if (v23)
          {
            v24 = v23;
            v25 = objc_retainAutorelease(v22);
            DataToHexCStringEx(objc_msgSend(v25, "bytes"), objc_msgSend(v25, "length"), v24, "0123456789abcdef");
            v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24));
            free(v24);
            goto LABEL_17;
          }
        }
        else
        {
          v19 = 0;
        }
        v9 = 0;
LABEL_17:

        if (v9)
          objc_msgSend(v34, "addObject:", v9);
        v11 = (char *)v11 + 1;
        v12 = v9;
      }
      while (v11 != v7);
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      v7 = v26;
      if (!v26)
      {
LABEL_26:

        a3 = v31;
        v5 = v32;
        v27 = objc_retainAutorelease(v34);
        goto LABEL_27;
      }
    }
  }
  v29 = 4294960568;
LABEL_29:

  return v29;
}

void sub_10020A34C(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  dispatch_queue_global_t global_queue;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (v9)
  {
    v11 = v9;
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v11 = (id)objc_claimAutoreleasedReturnValue(global_queue);
  }
  v13 = v11;
  v14 = objc_msgSend(v7, "count");
  if (v8 && v14)
  {
    if (v10)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10020A47C;
      v15[3] = &unk_10071BF50;
      v16 = v7;
      v17 = v8;
      v18 = v10;
      SFAppleIDVerifyCertificateChain(v16, v13, v15);

    }
  }
  else if (v10)
  {
    (*((void (**)(id, _QWORD, uint64_t))v10 + 2))(v10, 0, 4294960591);
  }

}

void sub_10020A47C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v5;
  int v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v11;

  if ((a3 & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0));

    if (v5)
    {
      v11 = 0;
      v6 = SFAppleIDCommonNameForCertificate(v5, &v11);
      v7 = v11;
      if (!v6)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountIdentifier"));
        v9 = objc_msgSend(v7, "isEqualToString:", v8);

        if ((v9 & 1) == 0
          && dword_1007B3B00 <= 90
          && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
        {
          LogPrintF(&dword_1007B3B00, "void SDAppleIDAuthenticateCertificateChain(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDCertificateChainAuthenticationHandler  _Nonnull __strong)_block_invoke", 90, "Account identifier check failed");
        }
      }
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    if (dword_1007B3B00 <= 90
      && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
    {
      LogPrintF(&dword_1007B3B00, "void SDAppleIDAuthenticateCertificateChain(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDCertificateChainAuthenticationHandler  _Nonnull __strong)_block_invoke", 90, "SFAppleIDVerifyCertificateChain failed with err=%#m", a4);
    }
    v7 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_10020A608(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  int v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  NSString *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  int v21;
  id v22;
  int v23;
  NSErrorUserInfoKey v24;
  const __CFString *v25;

  v5 = a1;
  v6 = a2;
  v23 = 0;
  if (objc_msgSend(v5, "count") && v6)
  {
    if ((SFAppleIDVerifyCertificateChainSync(v5, &v23) & 1) == 0)
    {
      if (dword_1007B3B00 <= 90
        && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
      {
        LogPrintF(&dword_1007B3B00, "BOOL SDAppleIDAuthenticateCertificateChainSync(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)", 90, "SFAppleIDVerifyCertificateChainSync failed with err=%#m", v23);
      }
LABEL_5:
      v7 = 0;
      v8 = 0;
      if (!a3)
        goto LABEL_19;
      goto LABEL_13;
    }
    if (v23)
      goto LABEL_5;
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));

    if (v8)
    {
      v22 = 0;
      v9 = SFAppleIDCommonNameForCertificate(v8, &v22);
      v8 = v22;
      v23 = v9;
      if (v9)
      {
        v7 = 0;
        if (!a3)
          goto LABEL_19;
        goto LABEL_13;
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountIdentifier"));
      v11 = objc_msgSend(v8, "isEqualToString:", v10);

      if ((v11 & 1) != 0)
      {
        v23 = 0;
        v7 = 1;
        if (!a3)
          goto LABEL_19;
        goto LABEL_13;
      }
      if (dword_1007B3B00 <= 90
        && (dword_1007B3B00 != -1 || _LogCategory_Initialize(&dword_1007B3B00, 90)))
      {
        LogPrintF(&dword_1007B3B00, "BOOL SDAppleIDAuthenticateCertificateChainSync(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnull __strong, NSError * _Nullable __autoreleasing * _Nullable)", 90, "Account identifier check failed");
      }
      v7 = 0;
      v21 = 201238;
    }
    else
    {
      v7 = 0;
      v21 = -6762;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v21 = -6705;
  }
  v23 = v21;
  if (!a3)
    goto LABEL_19;
LABEL_13:
  v12 = v23;
  if (v23)
  {
    v24 = NSLocalizedDescriptionKey;
    v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", DebugGetErrorString(v23, 0, 0));
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = (void *)v14;
    v16 = CFSTR("?");
    if (v14)
      v16 = (const __CFString *)v14;
    v25 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, v12, v17));

  }
  else
  {
    v18 = 0;
  }
  v19 = objc_retainAutorelease(v18);
  *a3 = v19;

LABEL_19:
  return v7;
}

uint64_t SDAuthenticationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t String;
  uint64_t v26;
  uint64_t v27;
  uint64_t Data;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 64) |= 8u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_46;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_48:
        v35 = 60;
        goto LABEL_53;
      case 2u:
        v20 = 0;
        v21 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 64) |= 4u;
        break;
      case 3u:
        String = PBReaderReadString(a2);
        v26 = objc_claimAutoreleasedReturnValue(String);
        v27 = 48;
        goto LABEL_41;
      case 4u:
        Data = PBReaderReadData(a2);
        v26 = objc_claimAutoreleasedReturnValue(Data);
        v27 = 32;
        goto LABEL_41;
      case 5u:
        v29 = PBReaderReadData(a2);
        v26 = objc_claimAutoreleasedReturnValue(v29);
        v27 = 40;
        goto LABEL_41;
      case 6u:
        *(_BYTE *)(a1 + 64) |= 2u;
        v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v31 = 0;
        }
        v36 = 16;
        goto LABEL_58;
      case 7u:
        v32 = PBReaderReadData(a2);
        v26 = objc_claimAutoreleasedReturnValue(v32);
        v27 = 24;
LABEL_41:
        v33 = *(void **)(a1 + v27);
        *(_QWORD *)(a1 + v27) = v26;

        continue;
      case 8u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v31 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v31 = 0;
        }
        v36 = 8;
LABEL_58:
        *(_QWORD *)(a1 + v36) = v31;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v23 = v22 + 1;
      if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
      v15 |= (unint64_t)(v24 & 0x7F) << v20;
      if ((v24 & 0x80) == 0)
        goto LABEL_50;
      v20 += 7;
      v10 = v21++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_52;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_52:
    v35 = 56;
LABEL_53:
    *(_DWORD *)(a1 + v35) = v15;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10020C4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v19 - 128));
  _Unwind_Resume(a1);
}

void sub_10020C548(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "alertManager:cancelingTransferWithRecordID:withFailureReason:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(_QWORD *)(a1 + 40), 0);

}

id sub_10020C594(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_unpublish");

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 40));
}

void sub_10020C6FC(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v5 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dispatchQueue"));
  dispatch_assert_queue_V2(v4);

  objc_msgSend(v5, "transferWithIdentifierWasAccepted:", *(_QWORD *)(a1 + 40));
}

void sub_10020C888(_QWORD *a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v3 = (void *)a1[4];
  v5 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dispatchQueue"));
  dispatch_assert_queue_V2(v4);

  objc_msgSend(v5, "transferWithIdentifierWasDeclined:withFailureReason:", a1[5], a1[6]);
}

void sub_10020CC80(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "SDAirDropClassroomTransferManager: failed to get access to Downloads folder with error: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10020CCE8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "makeDestinationDirectoryWithIdentifier failed %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10020CD50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "SDAirDropClassroomTransferManager: createCGImageWithData returned NULL", a5, a6, a7, a8, 0);
}

void sub_10020CD84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "SDAirDropClassroomTransferManager: replaceIconValue fileIconData is invalid", a5, a6, a7, a8, 0);
}

void sub_10020CDB8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Failed to update %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

id sub_10020CE1C(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSBundle *v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)qword_1007C6E38;
  if (!qword_1007C6E38)
  {
    v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(UIActivity, a2));
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)qword_1007C6E38;
    qword_1007C6E38 = v4;

    v2 = (void *)qword_1007C6E38;
  }
  return v2;
}

id _ShareSheetBundleIDFromAuditToken(_OWORD *a1)
{
  __int128 v2;
  void *v3;
  void *v4;
  _OWORD v6[2];
  void *v7;

  v7 = 0;
  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  if (CPCopyBundleIdentifierAndTeamFromAuditToken(v6, &v7, 0))
  {
    v3 = v7;
  }
  else
  {
    LOBYTE(v6[0]) = 0;
    v4 = (void *)CPCopyBundleIdentifierFromAuditToken(a1, v6);
    v3 = v4;
    v7 = v4;
    if (v4 && LOBYTE(v6[0]))
    {
      CFRelease(v4);
      v3 = 0;
    }
  }
  if (!v3)
    NSLog(CFSTR("Cannot get bundle ID from audit token."));
  return v3;
}

id share_sheet_log()
{
  if (qword_1007C6E58[0] != -1)
    dispatch_once(qword_1007C6E58, &stru_10071C008);
  return (id)qword_1007C6E50;
}

id magic_head_log()
{
  if (qword_1007C6E48 != -1)
    dispatch_once(&qword_1007C6E48, &stru_10071BFE8);
  return (id)qword_1007C6E40;
}

void sub_10020CF84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.sharing", "MagicHead");
  v2 = (void *)qword_1007C6E40;
  qword_1007C6E40 = (uint64_t)v1;

}

void sub_10020CFB4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.ShareSheet", "ShareSheet");
  v2 = (void *)qword_1007C6E50;
  qword_1007C6E50 = (uint64_t)v1;

}

id sub_10020CFE4(void *a1)
{
  id v1;
  NSMutableOrderedSet *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  CFDictionaryRef (__cdecl **v8)(CFErrorRef);
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v1 = a1;
  v2 = objc_opt_new(NSMutableOrderedSet);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v34;
    v8 = &CFErrorCopyUserInfo_ptr;
    v26 = *(_QWORD *)v34;
    v27 = v3;
    do
    {
      v9 = 0;
      v28 = v6;
      do
      {
        if (*(_QWORD *)v34 != v7)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v9);
        v11 = objc_opt_class(NSDictionary, v5);
        if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("attachments")));
          v14 = objc_opt_class(v8[484], v13);
          if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0)
          {
            v31 = 0u;
            v32 = 0u;
            v29 = 0u;
            v30 = 0u;
            v15 = v12;
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
            if (v16)
            {
              v18 = v16;
              v19 = *(_QWORD *)v30;
              do
              {
                v20 = 0;
                do
                {
                  if (*(_QWORD *)v30 != v19)
                    objc_enumerationMutation(v15);
                  v21 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v20);
                  v22 = objc_opt_class(NSDictionary, v17);
                  if ((objc_opt_isKindOfClass(v21, v22) & 1) != 0)
                  {
                    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", CFSTR("registeredTypeIdentifiers")));
                    if (v23)
                      -[NSMutableOrderedSet addObjectsFromArray:](v2, "addObjectsFromArray:", v23);

                  }
                  v20 = (char *)v20 + 1;
                }
                while (v18 != v20);
                v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
              }
              while (v18);
            }

            v7 = v26;
            v3 = v27;
            v8 = &CFErrorCopyUserInfo_ptr;
            v6 = v28;
          }

        }
        v9 = (char *)v9 + 1;
      }
      while (v9 != v6);
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v6);
  }

  v24 = -[NSMutableOrderedSet copy](v2, "copy");
  return v24;
}

id sub_10020D244(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v1 = sub_10020CFE4(a1);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        if (!SFIsImage(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6)))
        {

          v7 = 0;
          goto LABEL_11;
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
        continue;
      break;
    }
  }

  v7 = v2;
LABEL_11:

  return v7;
}

id sub_10020D400(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onQueue_start");
}

void sub_10020D5AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = auto_unlock_log(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_10020E000((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);

    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", SFAutoUnlockErrorDomain, 151, 0));
    objc_msgSend(v13, "notifyDelegateWithError:", v14);

  }
}

void sub_10020DA20(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSErrorUserInfoKey v7;
  const __CFString *v8;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v3 = *(void **)(a1 + 32);
    v4 = SFAutoUnlockErrorDomain;
    v7 = NSLocalizedDescriptionKey;
    v8 = CFSTR("Step failed");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v4, 151, v5));
    objc_msgSend(v3, "notifyDelegateWithError:", v6);

  }
}

id *sub_10020DEC0(id *result)
{
  id *v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  __int16 v7[8];
  uint8_t buf[16];

  v1 = result;
  v2 = *((unsigned __int16 *)result + 24);
  if (v2 == 504)
  {
    v5 = auto_unlock_log(result);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeRegistrationFinalize", (uint8_t *)v7, 2u);
    }

    objc_msgSend(v1[4], "invalidateResponseTimer");
    return (id *)objc_msgSend(v1[4], "handleFinalize:", v1[5]);
  }
  else if (v2 == 502)
  {
    v3 = auto_unlock_log(result);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeRegistrationResponse", buf, 2u);
    }

    objc_msgSend(v1[4], "invalidateResponseTimer");
    return (id *)objc_msgSend(v1[4], "handleInitialResponse:", v1[5]);
  }
  return result;
}

void sub_10020E000(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error sending initial request for registration: %@", a5, a6, a7, a8, 2u);
}

void sub_10020E068(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a2, a3, "Error finalizing registration (%lu)", a5, a6, a7, a8, 0);
}

void sub_10020E0D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Failed to do final step in registration", a5, a6, a7, a8, 0);
}

void sub_10020E104(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Received SDAutoUnlockDeviceRegistrationStep without step data", a5, a6, a7, a8, 0);
}

void sub_10020F020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10020F048(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "triggerImport");

}

void sub_10020F2BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD);
  uint64_t v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD);
  void *v17;

  v5 = a2;
  v6 = a3;
  if (!v6 && v5)
  {
    if (objc_msgSend(v5, "success"))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "openAppURL"));

      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "openAppURL"));
        v17 = v9;
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transfer"));
        objc_msgSend(v11, "setCompletedURLs:", v10);

        if (+[SFAirDropUserDefaults_objc moveToAppEnabled](SFAirDropUserDefaults_objc, "moveToAppEnabled")&& objc_msgSend(v5, "shouldOfferOpenAction"))
        {
          v12 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateTransferStateHandler"));
          v12[2](v12, 7);
          v13 = 1;
LABEL_14:

          goto LABEL_15;
        }
        if ((+[SFAirDropUserDefaults_objc moveToAppEnabled](SFAirDropUserDefaults_objc, "moveToAppEnabled") & 1) == 0&& (objc_msgSend(v5, "shouldOfferOpenAction") & 1) == 0)
        {
          v14 = *(void **)(a1 + 32);
          v12 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "openAppURL"));
          v16 = v12;
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
          v13 = (uint64_t)objc_msgSend(v14, "openURLs:", v15);

          goto LABEL_14;
        }
      }
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
LABEL_15:
    v7 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
    ((void (**)(_QWORD, uint64_t, id, id))v7)[2](v7, v13, objc_msgSend(v5, "shouldOfferOpenAction"), objc_msgSend(v5, "shouldCleanupItems"));
    goto LABEL_16;
  }
  v7 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandler"));
  v7[2](v7, 0, 0, 1);
LABEL_16:

}

void sub_10020F7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020F7F8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10020F808(uint64_t a1)
{

}

void sub_10020F810(uint64_t a1)
{
  void *v2;
  void *i;
  void *v4;
  __CFString *v5;
  __CFString *PreferredIdentifierForTag;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id obj;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  _BYTE v49[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = *(id *)(a1 + 32);
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
  if (v39)
  {
    v37 = *(_QWORD *)v42;
    v35 = v2;
    do
    {
      for (i = 0; i != v39; i = (char *)i + 1)
      {
        if (*(_QWORD *)v42 != v37)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
        v5 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathExtension"));
        PreferredIdentifierForTag = (__CFString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v5, 0);
        if (SFIsPhotosAssetBundle(PreferredIdentifierForTag))
        {
          v7 = objc_msgSend(objc_alloc((Class)PFAssetBundle), "initWithAssetBundleAtURL:", v4);
          if (v7)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetCreationRequest creationRequestForAssetFromAssetBundle:](PHAssetCreationRequest, "creationRequestForAssetFromAssetBundle:", v7));
          }
          else
          {
            v10 = airdrop_log(0);
            v11 = objc_claimAutoreleasedReturnValue(v10);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v46 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "PFAssetBundle initWithAssetBundleAtURL(%@) returned nil", buf, 0xCu);
            }

            v8 = 0;
          }
          if (*(_BYTE *)(a1 + 72))
          {
            v12 = *(_QWORD *)(a1 + 40);
            v40 = 0;
            v13 = objc_claimAutoreleasedReturnValue(-[NSObject writeDowngradedRepresentationToDirectory:error:](v7, "writeDowngradedRepresentationToDirectory:error:", v12, &v40));
            v14 = v40;
            v15 = v14;
            if (v13)
            {
              objc_msgSend(v2, "addObject:", v13);
            }
            else
            {
              v17 = airdrop_log(v14);
              v18 = objc_claimAutoreleasedReturnValue(v17);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v46 = v4;
                v47 = 2112;
                v48 = v15;
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to downgrade asset bundle %@ with error: %@", buf, 0x16u);
              }

              v2 = v35;
            }
            goto LABEL_38;
          }
        }
        else if (SFIsLivePhotos(PreferredIdentifierForTag))
        {
          v7 = objc_msgSend(objc_alloc((Class)PFVideoComplement), "initWithBundleAtURL:", v4);
          if (v7)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetCreationRequest creationRequestForAssetFromVideoComplementBundle:](PHAssetCreationRequest, "creationRequestForAssetFromVideoComplementBundle:", v7));
          }
          else
          {
            v19 = airdrop_log(0);
            v20 = objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v46 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "PFVideoComplement initWithBundleAtURL(%@) returned nil", buf, 0xCu);
            }

            v8 = 0;
          }
          if (*(_BYTE *)(a1 + 72))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject videoPath](v7, "videoPath"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v21));

            if (v15)
            {
              objc_msgSend(v2, "addObject:", v15);
LABEL_39:

              goto LABEL_40;
            }
            v24 = airdrop_log(v22);
            v13 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v46 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "No video URL exists for Live Photo %@", buf, 0xCu);
            }
LABEL_38:

            goto LABEL_39;
          }
        }
        else
        {
          if ((SFIsVideo(PreferredIdentifierForTag) & 1) != 0)
          {
            v9 = 2;
            goto LABEL_22;
          }
          v16 = SFIsImage(PreferredIdentifierForTag);
          if ((_DWORD)v16)
          {
            v9 = 1;
LABEL_22:
            v8 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetCreationRequest creationRequestForAsset](PHAssetCreationRequest, "creationRequestForAsset"));
            v7 = objc_alloc_init((Class)PHAssetResourceCreationOptions);
            objc_msgSend(v8, "addResourceWithType:fileURL:options:", v9, v4, v7);
            if (*(_BYTE *)(a1 + 72))
              objc_msgSend(v2, "addObject:", v4);
            goto LABEL_40;
          }
          v23 = airdrop_log(v16);
          v7 = objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v46 = v4;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Not a Photos type %@. Ignoring", buf, 0xCu);
          }
          v8 = 0;
        }
LABEL_40:

        objc_msgSend(v8, "setImportSessionID:", *(_QWORD *)(a1 + 48));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "placeholderForCreatedAsset"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "localIdentifier"));
        objc_msgSend(v38, "addObject:", v26);

        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "placeholderForCreatedAsset"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "localIdentifier"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("photos://asset?albumname=camera-roll&identifier=%@"), v28));

          v30 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v29));
          v31 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
          v32 = *(void **)(v31 + 40);
          *(_QWORD *)(v31 + 40) = v30;

        }
      }
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
    }
    while (v39);
  }

  v33 = objc_msgSend(v2, "copy");
  objc_msgSend(*(id *)(a1 + 56), "setUnprivatizedURLs:", v33);

  v34 = objc_msgSend(v38, "copy");
  objc_msgSend(*(id *)(a1 + 56), "setAssetIdentifiers:", v34);

}

void sub_10020FDDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  unsigned __int16 v12;
  SDAirDropHandlerPhotosImportResult *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  SDAirDropHandlerPhotosImportResult *v17;
  _DWORD v18[2];

  v5 = a3;
  v6 = airdrop_log(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(a1 + 32), "count");
      v18[0] = 67109120;
      v18[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PHPhotoLibrary performChanges reported success for %d items", (uint8_t *)v18, 8u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_10021084C();
  }

  v10 = a2;
  if ((+[SFAirDropUserDefaults_objc moveToAppEnabled](SFAirDropUserDefaults_objc, "moveToAppEnabled") & 1) == 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
    v12 = (unsigned __int16)objc_msgSend(v11, "systemUIFlags");

    v10 = (v12 & 0x3006) != 0;
    if (_os_feature_enabled_impl("Sharing", "AirDropUISessions"))
      v10 = _os_feature_enabled_impl("Sharing", "AirDropUISessionsOpenInPhotos");
  }
  v13 = [SDAirDropHandlerPhotosImportResult alloc];
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "unprivatizedURLs"));
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "assetIdentifiers"));
  v17 = -[SDAirDropHandlerPhotosImportResult initWithImportedFiles:openAppURL:assetIdentifiers:success:shouldOfferOpenAction:shouldCleanupItems:](v13, "initWithImportedFiles:openAppURL:assetIdentifiers:success:shouldOfferOpenAction:shouldCleanupItems:", v14, v15, v16, a2, v10, 1);

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10021017C(uint64_t a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  _DWORD v10[2];

  v5 = a3;
  v6 = airdrop_log(v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (a2)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = objc_msgSend(*(id *)(a1 + 32), "count");
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PHPhotoLibrary expunge reported success for %d items", (uint8_t *)v10, 8u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_1002108F4();
  }

}

void sub_100210524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10021056C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transfer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "completedURLs"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));

  if (v4)
  {
    v7 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    objc_msgSend(WeakRetained, "openURLs:", v5);

  }
  v6 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "completionHandler"));
  v6[2](v6, 1, 0, 1);

}

void sub_10021065C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "unprivatizedURLs"));
  objc_msgSend(WeakRetained, "launchMoveToAppShareSheetForFiles:", v1);

}

void sub_10021084C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100210834();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "PHPhotoLibrary performChanges failed with error %@ for items %@");
}

void sub_1002108B4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "PHPhotoLibrary skipping expunge of 0 assets", v1, 2u);
}

void sub_1002108F4()
{
  uint64_t v0;
  os_log_t v1;

  sub_100210834();
  sub_10006CFBC((void *)&_mh_execute_header, v0, v1, "PHPhotoLibrary expunge failed with error %@ for assets %@");
}

void sub_100210D10(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_100210D44(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  id WeakRetained;
  uint64_t v10;
  void *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;

  if (a2 == 1)
  {
    v3 = airdrop_log(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 48);
      v6 = *(unsigned __int8 *)(a1 + 49);
      v12[0] = 67109376;
      v12[1] = v5;
      v13 = 1024;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Turning on AirDrop, turning on WLAN=%d, Bluetooth=%d", (uint8_t *)v12, 0xEu);
    }

    if (*(_BYTE *)(a1 + 48))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
      objc_msgSend(v7, "setWirelessEnabled:", 1);

    }
    if (*(_BYTE *)(a1 + 49))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](SDStatusMonitor, "sharedMonitor"));
      objc_msgSend(v8, "setBluetoothEnabled:", 1);

    }
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "invalidate");

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = 0;

}

void sub_100210E78(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = airdrop_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412290;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error presenting enable radios alert %@", (uint8_t *)&v9, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "invalidate");

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

}

void sub_100211138(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10021116C(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  uint8_t v9[16];

  if (a2 == 1)
  {
    v3 = airdrop_log(a1);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Turning on AirDrop, disabling Personal Hotspot", v9, 2u);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[SDHotspotAgent sharedAgent](SDHotspotAgent, "sharedAgent"));
    objc_msgSend(v5, "disableTethering");

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "invalidate");

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = 0;

}

void sub_10021121C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = airdrop_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412290;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error presenting disable Personal Hotspot alert %@", (uint8_t *)&v9, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "invalidate");

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = 0;

}

void sub_1002114AC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
  objc_msgSend(WeakRetained, "airDropController:didChange:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));

}

uint64_t SDAutoUnlockAuthPromptRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  BOOL v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  uint64_t Data;
  uint64_t v19;
  uint64_t v20;
  uint64_t String;
  uint64_t v22;
  void *v23;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0)
            goto LABEL_11;
          v4 += 7;
          v9 = v5++ >= 9;
          if (v9)
          {
            v6 = 0;
            v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v6 = 0;
LABEL_13:
        if (v10)
          v11 = 1;
        else
          v11 = (v6 & 7) == 4;
        if (!v11)
        {
          switch((v6 >> 3))
          {
            case 1u:
              v12 = 0;
              v13 = 0;
              v14 = 0;
              *(_BYTE *)(a1 + 36) |= 1u;
              break;
            case 2u:
              Data = PBReaderReadData(a2);
              v19 = objc_claimAutoreleasedReturnValue(Data);
              v20 = 16;
              goto LABEL_30;
            case 3u:
              String = PBReaderReadString(a2);
              v19 = objc_claimAutoreleasedReturnValue(String);
              v20 = 8;
              goto LABEL_30;
            case 4u:
              v22 = PBReaderReadString(a2);
              v19 = objc_claimAutoreleasedReturnValue(v22);
              v20 = 24;
LABEL_30:
              v23 = *(void **)(a1 + v20);
              *(_QWORD *)(a1 + v20) = v19;

              goto LABEL_35;
            default:
              result = PBReaderSkipValueWithTag(a2);
              if (!(_DWORD)result)
                return result;
LABEL_35:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
          }
          while (1)
          {
            v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
            v14 |= (unint64_t)(v16 & 0x7F) << v12;
            if ((v16 & 0x80) == 0)
              goto LABEL_32;
            v12 += 7;
            v9 = v13++ >= 9;
            if (v9)
            {
              LODWORD(v14) = 0;
              goto LABEL_34;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v14) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 32) = v14;
          goto LABEL_35;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1002126CC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: loadIconHandler is nil.", (uint8_t *)&v2, 0xCu);
}

id sub_100212F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, void *a10)
{
  if ((_DWORD)a4)
    return objc_msgSend(a10, "notifyClient:", a4);
  else
    return _objc_msgSend(a10, "parseResults:port:txtLen:txtRecord:interface:", a6, __rev16(a7), a8, a9, a3);
}

id sub_100212FCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyClient:", 4294901728);
}

void sub_100213158(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Resolved a Bonjour server with unknown protocol", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100213188(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDBonjourResolver: DNSServiceSetDispatchQueue returned %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_1002131EC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDBonjourResolver: DNSServiceResolve returned %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100213250(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000161CC((void *)&_mh_execute_header, a1, a3, "Bonjour resolver failed to find awdl0 interface", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

void sub_100213280(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000201C4((void *)&_mh_execute_header, a2, a3, "SDBonjourResolver: DNSServiceCreateConnection returned %d", a5, a6, a7, a8, 0);
  sub_1000161DC();
}

id sub_100213744(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockWiFiManager sharedManager](SDAutoUnlockWiFiManager, "sharedManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequest"));
  objc_msgSend(v2, "cancelWiFiRequest:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "setWifiRequest:", 0);
}

id sub_100213848(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  double v5;
  id result;
  uint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Asked to complete attempt if necessary", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setShouldWaitToCompleteUnlock:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "prewarmIdleStartDate"));
  objc_msgSend(v4, "timeIntervalSinceNow");
  objc_msgSend(*(id *)(a1 + 32), "setPrewarmIdleTime:", -v5);

  result = objc_msgSend(*(id *)(a1 + 32), "isWaitingToCompleteUnlock");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "isAuthenticatingForSiri");
    if ((result & 1) == 0)
    {
      v7 = auto_unlock_log(result);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Completing waiting unlock attempt", v9, 2u);
      }

      return objc_msgSend(*(id *)(a1 + 32), "consumeAuthTokenIfReady");
    }
  }
  return result;
}

void sub_1002139B0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  SDAutoUnlockCleanUpAWDL *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "isWaitingToCompleteUnlock");
  if ((_DWORD)v2)
  {
    v3 = auto_unlock_log(v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Tearing down AWDL", v8, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "cancelWiFiRequest");
    v5 = objc_alloc_init(SDAutoUnlockCleanUpAWDL);
    -[SDAutoUnlockCleanUpAWDL setVersion:](v5, "setVersion:", 1);
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockCleanUpAWDL data](v5, "data"));
    objc_msgSend(v6, "sendData:type:completionHandler:", v7, 15, &stru_10071C118);

  }
}

void sub_100213A80(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  uint64_t v4;
  NSObject *v5;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    v4 = auto_unlock_log(v2);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10021C238();

  }
}

id sub_100213B40(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_cancel");
}

id sub_100213F2C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockWiFiManager sharedManager](SDAutoUnlockWiFiManager, "sharedManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequest"));
  objc_msgSend(v2, "cancelWiFiRequest:", v3);

  return objc_msgSend(*(id *)(a1 + 32), "setWifiRequest:", 0);
}

id sub_1002140A4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleCanceledAfterSuccess");
}

void sub_100215B34(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  const __CFString *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  const __CFString *v23;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoUnlockDevice"));
  v3 = objc_msgSend(v2, "supportsApproveIcon");

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setImageData:", *(_QWORD *)(a1 + 40));
    v5 = auto_unlock_log(objc_msgSend(*(id *)(a1 + 32), "setImageHash:", *(_QWORD *)(a1 + 48)));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceID"));
      v22 = 138412290;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Image data updated (%@)", (uint8_t *)&v22, 0xCu);

    }
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appName"));
    objc_msgSend(v8, "sendAuthPromptRequestWithImageHash:appName:", v9, v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iconTransferStore"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageHash"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceID"));
    objc_msgSend(*(id *)(a1 + 32), "setImageDataAlreadyCached:", objc_msgSend(v11, "imageCachedForHash:device:", v12, v13));

    v15 = auto_unlock_log(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = objc_msgSend(*(id *)(a1 + 32), "imageDataAlreadyCached");
      v18 = CFSTR("NO");
      if (v17)
        v18 = CFSTR("YES");
      v22 = 138412290;
      v23 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Image already cached: %@", (uint8_t *)&v22, 0xCu);
    }

    v19 = *(void **)(a1 + 32);
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "imageData"));
    objc_msgSend(v19, "sendAuthPromptImageDataIfReady:", v20);
  }
  else
  {
    v21 = auto_unlock_log(v4);
    v20 = objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Not updating icon, watch doesn't support icons", (uint8_t *)&v22, 2u);
    }
  }

}

void sub_100215E00(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  const __CFString *v9;
  __int16 v10;
  void *v11;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 301) = *(_BYTE *)(a1 + 40);
  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "chosenDevice"))
      v4 = CFSTR("YES");
    else
      v4 = CFSTR("NO");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceID"));
    v8 = 138412546;
    v9 = v4;
    v10 = 2112;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Chosen device updated: %@ (%@)", (uint8_t *)&v8, 0x16u);

  }
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageData"));
  objc_msgSend(v6, "sendAuthPromptImageDataIfReady:", v7);

}

id sub_100215F9C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 303) = *(_BYTE *)(a1 + 40);
  return objc_msgSend(*(id *)(a1 + 32), "setShouldWaitToCompleteUnlock:", *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100216038(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 304) = *(_BYTE *)(result + 40);
  return result;
}

void sub_100216E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100216E2C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Confirmation timer fired", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "notifyDelegateWithError:", *(_QWORD *)(a1 + 32));

}

id sub_100216FF0(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  int v31;

  kdebug_trace(725286956, 0, 0, 0, 0);
  v2 = objc_msgSend(*(id *)(a1 + 32), "rangingDisabled");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "setInRange:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setDistance:", &off_100750058);
    return objc_msgSend(*(id *)(a1 + 32), "handlePeerInRange");
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "wifiRequest"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "wifiRangingResults"));
  objc_msgSend(*(id *)(a1 + 32), "setWifiRangingResults:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequest"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "wifiRangingError"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "domain"));
  objc_msgSend(*(id *)(a1 + 32), "setWifiErrorDomain:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequest"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "wifiRangingError"));
  objc_msgSend(*(id *)(a1 + 32), "setWifiRangingErrorCode:", objc_msgSend(v11, "code"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rangingStart"));
  objc_msgSend(v12, "timeIntervalSinceDate:", v13);
  objc_msgSend(*(id *)(a1 + 32), "setRangingInterval:");

  v15 = auto_unlock_log(v14);
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 40);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiErrorDomain"));
    v19 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    v27 = v17;
    v28 = 2112;
    v29 = v18;
    v30 = 1024;
    v31 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "AWDL ranging results returned %@, domain: %@, error %d", buf, 0x1Cu);

  }
  if (*(_QWORD *)(a1 + 48))
    goto LABEL_6;
  v22 = objc_msgSend(*(id *)(a1 + 32), "peerInRange:", *(_QWORD *)(a1 + 40));
  if (!(_DWORD)v22)
  {
    if (!*(_QWORD *)(a1 + 48))
      return objc_msgSend(*(id *)(a1 + 32), "handlePeerOutOfRange");
LABEL_6:
    objc_msgSend(*(id *)(a1 + 32), "setRangingTimedOut:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setRangingErrorString:", CFSTR("Ranging Timeout"));
    if (objc_msgSend(*(id *)(a1 + 32), "wifiRangingErrorCode"))
    {
      v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rangingErrorString"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject stringByAppendingFormat:](v20, "stringByAppendingFormat:", CFSTR(" (%ld)"), objc_msgSend(*(id *)(a1 + 32), "wifiRangingErrorCode")));
      objc_msgSend(*(id *)(a1 + 32), "setRangingErrorString:", v21);

    }
    else
    {
      v25 = auto_unlock_log(0);
      v20 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_10021C2C4();
    }

    return objc_msgSend(*(id *)(a1 + 32), "handlePeerOutOfRange");
  }
  v23 = auto_unlock_log(v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Peer in range", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "setInRange:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "handlePeerInRange");
}

void sub_100219894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13, id *a14)
{
  uint64_t v14;

  objc_destroyWeak((id *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_1002198E4(id a1, id a2)
{
  void (**v2)(id, uint64_t);
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = (void (**)(id, uint64_t))a2;
  v3 = auto_unlock_log(v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting wifi request", v5, 2u);
  }

  v2[2](v2, 1);
}

void sub_100219964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  void *v7;
  id *v8;
  id WeakRetained;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSErrorUserInfoKey v14;
  const __CFString *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  int v21;

  v5 = auto_unlock_log(a1);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "wifiRequest"));
    *(_DWORD *)buf = 136315650;
    v17 = "-[SDAutoUnlockLockSession startAWDL]_block_invoke";
    v18 = 2112;
    v19 = v7;
    v20 = 1024;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s AWDL started request:%@ error:%d", buf, 0x1Cu);

  }
  v8 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (a3)
  {
    objc_msgSend(WeakRetained, "invalidateResponseTimer");

    v10 = objc_loadWeakRetained(v8);
    v11 = SFAutoUnlockErrorDomain;
    v14 = NSLocalizedDescriptionKey;
    v15 = CFSTR("AWDL network failed to start");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, 192, v12));
    objc_msgSend(v10, "notifyDelegateWithError:", v13);

  }
  else
  {
    objc_msgSend(WeakRetained, "handleAWDLUp");
  }

}

void sub_100219AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  id WeakRetained;
  int v8;
  const __CFString *v9;

  v4 = auto_unlock_log(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = CFSTR("NO");
    if ((_DWORD)a2)
      v6 = CFSTR("YES");
    v8 = 138412290;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Peer found (awdl up same time : %@)", (uint8_t *)&v8, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handlePeerFound:", a2);

}

void sub_100219BD0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  uint8_t v5[16];

  v2 = auto_unlock_log(a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ranging started", v5, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleRangingStarted");

}

void sub_100219C4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  id v10;
  uint8_t v11[16];

  v5 = a3;
  v6 = a2;
  v7 = auto_unlock_log(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Ranging completed", v11, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10 = objc_msgSend(v5, "code");

  objc_msgSend(WeakRetained, "handleRangingResults:errorCode:", v6, v10);
}

void sub_100219D04(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleWiFiRequestInvalidated");

}

void sub_10021A4B4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;

  v3 = a2;
  if (v3)
  {
    v4 = auto_unlock_log(objc_msgSend(*(id *)(a1 + 32), "setAttemptError:", v3));
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_10021C774();

    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }

}

void sub_10021A7A4(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSErrorUserInfoKey v7;
  const __CFString *v8;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v3 = *(void **)(a1 + 32);
    v4 = SFAutoUnlockErrorDomain;
    v7 = NSLocalizedDescriptionKey;
    v8 = CFSTR("Auth prompt request failed");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v4, 200, v5));
    objc_msgSend(v3, "notifyDelegateWithError:", v6);

  }
}

void sub_10021AD48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSErrorUserInfoKey v11;
  const __CFString *v12;
  uint8_t buf[4];
  void *v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = auto_unlock_log(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error sending image data %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
    v7 = *(void **)(a1 + 32);
    v8 = SFAutoUnlockErrorDomain;
    v11 = NSLocalizedDescriptionKey;
    v12 = CFSTR("Image data message failed");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 202, v9));
    objc_msgSend(v7, "notifyDelegateWithError:", v10);

  }
}

void sub_10021B00C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSErrorUserInfoKey v6;
  const __CFString *v7;

  objc_msgSend(*(id *)(a1 + 32), "setErrorType:", 5);
  objc_msgSend(*(id *)(a1 + 32), "invalidateResponseTimer");
  v2 = *(void **)(a1 + 32);
  v3 = SFAutoUnlockErrorDomain;
  v6 = NSLocalizedDescriptionKey;
  v7 = CFSTR("Exchange response failed");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v3, 103, v4));
  objc_msgSend(v2, "notifyDelegateWithError:", v5);

}

id sub_10021B174(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendUnlockConfirmation:withError:suppressNotification:", 1, 0, *(_BYTE *)(a1 + 40) == 0);
}

void sub_10021B4A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v17[8];
  NSErrorUserInfoKey v18;
  const __CFString *v19;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "setAttemptError:");
    objc_msgSend(*(id *)(a1 + 40), "invalidateConfirmationTimer");
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
LABEL_7:
    objc_msgSend(v4, "notifyDelegateWithError:", v5);
    goto LABEL_8;
  }
  v6 = *(void **)(a1 + 40);
  if (v3)
  {
    objc_msgSend(v6, "setAttemptError:", v3);
    v7 = auto_unlock_log(objc_msgSend(*(id *)(a1 + 40), "invalidateConfirmationTimer"));
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error sending confirmation", v17, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "lockKeyBagIfNeeded");
    v4 = *(void **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    goto LABEL_7;
  }
  v9 = objc_msgSend(v6, "canceled");
  v10 = *(void **)(a1 + 40);
  if (v9)
  {
    objc_msgSend(v10, "invalidateConfirmationTimer");
    v11 = SFAutoUnlockErrorDomain;
    v18 = NSLocalizedDescriptionKey;
    v19 = CFSTR("Attempt Cancelled");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, 118, v12));

    objc_msgSend(*(id *)(a1 + 40), "notifyDelegateWithError:", v13);
  }
  else
  {
    v14 = objc_msgSend(v10, "supportsConfirmationACK");
    if ((_DWORD)v14)
    {
      v15 = auto_unlock_log(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Waiting for confirmation ack", v17, 2u);
      }

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "handleConfirmationACK");
    }
  }
LABEL_8:

}

void sub_10021C238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Failed to send clean up AWDL message: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C298()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Updating image data for non-auth prompt attempt", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C2C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Ranging timeout with no error code", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C2F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handlePeerOutOfRange %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C350()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "AWDL ranging timeout is %ld", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C3B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Deserializing AWDL info failed", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C3DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C43C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Already received auth prompt response", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleSessionKeyExchangeRequest: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C4C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Watch locked on wrist from connection", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C4F4(void *a1, NSObject *a2)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = objc_msgSend(a1, "attemptType");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unexpected attempt type: %d", (uint8_t *)v3, 8u);
  sub_10001949C();
}

void sub_10021C578()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "handleSessionAuthToken: %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C5D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10002923C((void *)&_mh_execute_header, v0, v1, "peer discovery timeout is %ld", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Auth token: Already received auth token", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C664(char a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Skip ranging is %d", (uint8_t *)v2, 8u);
  sub_1000161DC();
}

void sub_10021C6D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001948C((void *)&_mh_execute_header, a1, a3, "consumeAuthTokenIfReady: %@", a5, a6, a7, a8, 2u);
  sub_10001949C();
}

void sub_10021C748()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Not sending data, local device ID is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C774()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100029230();
  sub_10001948C((void *)&_mh_execute_header, v0, v1, "Error sending AWDL info %@", v2, v3, v4, v5, v6);
  sub_10001949C();
}

void sub_10021C7D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Not sending data for auth prompt, local device ID is NULL", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C800()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000161E4();
  sub_1000161CC((void *)&_mh_execute_header, v0, v1, "Sending SDAutoUnlockAuthPromptRequest", v2, v3, v4, v5, v6);
  sub_1000161DC();
}

void sub_10021C95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10021C9EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_enumerateRemoteObjectProxiesUsingBlock:", *(_QWORD *)(a1 + 40));
}

void sub_10021CBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10021CBEC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;

  v3 = a2;
  v4 = daemon_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_10021DC50(a1);

}

id sub_10021CCF4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_remoteObjectProxyForConnection:usingBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10021CDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10021CDFC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;

  v3 = a2;
  v4 = daemon_log(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_10021DC50(a1);

}

id sub_10021CEC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_activate");
}

id sub_10021D074(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_invalidate");
}

void sub_10021D418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_10021D454(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v2, "onqueue_connectionInvalidated:", WeakRetained);

  }
}

void sub_10021D668(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 32);
  dispatch_queue_set_specific(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 40) + 32), "SDXPCDaemonConnection", v2, 0);
  objc_msgSend(*(id *)(a1 + 48), "invoke");
  dispatch_queue_set_specific(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 40) + 32), "SDXPCDaemonConnection", 0, 0);
  CFRelease(v2);
}

id sub_10021DC44(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 32));
}

void sub_10021DC50(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = sub_10021DC44(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "sd_description"));
  sub_100085470();
  sub_1000311EC((void *)&_mh_execute_header, v3, v4, "Failed to get remote object proxy for %@ (%@)", v5, v6, v7, v8, v9);

  sub_100031218();
}

void sub_10021DCD8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Activate already called", v1, 2u);
}

uint64_t sub_10021DD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B3CD8);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B3CD8);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10021DDA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[22] = a1;
  v2[23] = a2;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v2[24] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[25] = v4;
  v2[26] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008384((uint64_t *)&unk_1007B5200);
  v2[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v2[28] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[29] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[30] = swift_task_alloc(v8);
  v2[31] = swift_task_alloc(v8);
  v2[32] = swift_task_alloc(v8);
  return swift_task_switch(sub_10021DE9C, 0, 0);
}

uint64_t sub_10021DE9C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  NSString *v7;
  const char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  const char *v13;
  const char *v14;
  Class v15;
  double v16;
  unsigned int v17;
  void *v18;
  uint64_t *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  unint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t inited;
  NSString *v40;
  NSString *v41;
  const char *v42;
  id v43;
  NSURL *v44;
  void *v45;
  void *v46;
  const char *v47;
  const char *v48;
  Class isa;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t (*v57)(void);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v72)(uint64_t, uint64_t, uint64_t);

  v1 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v2 = (void *)static NSUserDefaults.airdrop.getter(v1);
  v3 = SFAirDropUserDefaults.overrideReceivedFilesPathiOS.getter();

  if ((v3 & 1) == 0)
  {
    v21 = sub_10019BD30();
    if (v21)
    {
      v22 = v21;
      v24 = v0[29];
      v23 = v0[30];
      v26 = v0[27];
      v25 = v0[28];
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
      v27(v26, v23, v25);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v25);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) != 1)
      {
        v19 = v0 + 31;
        v28 = v0[25];
        v29 = v0[26];
        v30 = v0[24];
        v72 = v27;
        v27(v0[31], v0[27], v0[28]);
        v0[16] = 0xD000000000000011;
        v0[17] = 0x80000001006117D0;
        v31 = enum case for URL.DirectoryHint.isDirectory(_:);
        v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 104);
        v32(v29, enum case for URL.DirectoryHint.isDirectory(_:), v30);
        v33 = sub_100221E10();
        URL.append<A>(path:directoryHint:)(v0 + 16, v29, &type metadata for String, v33);
        v34 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
        v35 = v34(v29, v30);
        v0[18] = UUID.uuidString.getter(v35);
        v0[19] = v36;
        v32(v29, v31, v30);
        URL.append<A>(path:directoryHint:)(v0 + 18, v29, &type metadata for String, v33);
        v34(v29, v30);
        v37 = swift_bridgeObjectRelease((const char *)v0[19]);
        v0[14] = 0x73656C6946;
        v0[15] = 0xE500000000000000;
        ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v32)(v29, v31, v30, v37);
        URL.append<A>(path:directoryHint:)(v0 + 14, v29, &type metadata for String, v33);
        v34(v29, v30);
        v38 = sub_100008384(&qword_1007B4C78);
        inited = swift_initStackObject(v38, v0 + 2);
        *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
        *(_QWORD *)(inited + 32) = NSFileProtectionKey;
        *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
        v40 = NSFileProtectionKey;
        v41 = NSFileProtectionCompleteUntilFirstUserAuthentication;
        v42 = (const char *)sub_10021E4F0(inited);
        v43 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
        URL._bridgeToObjectiveC()(v44);
        v46 = v45;
        sub_100322CB4((uint64_t)v42);
        v48 = v47;
        swift_bridgeObjectRelease(v42);
        type metadata accessor for FileAttributeKey(0);
        sub_100220D78(&qword_1007B4C80, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE808);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v50 = swift_bridgeObjectRelease(v48).n128_u64[0];
        v0[20] = 0;
        LOBYTE(v48) = objc_msgSend(v43, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v46, 1, isa, v0 + 20, v50);

        v18 = (void *)v0[20];
        if ((v48 & 1) != 0)
        {
          v20 = v72;
          goto LABEL_8;
        }
        v58 = v0[31];
        goto LABEL_13;
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[29] + 56))(v0[27], 1, 1, v0[28]);
    }
    sub_10000D0F0(v0[27], (uint64_t *)&unk_1007B5200);
    v59 = type metadata accessor for SFAirDropReceive.Failure(0);
    v60 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v59, v60, 0, 0);
    v62 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v61, enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:), v59);
    swift_willThrow(v62);
LABEL_14:
    v67 = v0[31];
    v68 = v0[30];
    v70 = v0[26];
    v69 = v0[27];
    swift_task_dealloc(v0[32]);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    v57 = (uint64_t (*)(void))v0[1];
    return v57();
  }
  URL.init(fileURLWithPath:)(0xD00000000000002ALL, 0x80000001006117F0);
  v4 = sub_100008384(&qword_1007B4C78);
  v5 = swift_initStackObject(v4, v0 + 8);
  *(_OWORD *)(v5 + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(v5 + 32) = NSFileProtectionKey;
  *(_QWORD *)(v5 + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v6 = NSFileProtectionKey;
  v7 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v8 = (const char *)sub_10021E4F0(v5);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  sub_100322CB4((uint64_t)v8);
  v14 = v13;
  swift_bridgeObjectRelease(v8);
  type metadata accessor for FileAttributeKey(0);
  sub_100220D78(&qword_1007B4C80, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE808);
  v15 = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v16 = swift_bridgeObjectRelease(v14).n128_u64[0];
  v0[21] = 0;
  v17 = objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, v15, v0 + 21, v16);

  v18 = (void *)v0[21];
  if (!v17)
  {
    v58 = v0[32];
LABEL_13:
    v63 = v0[28];
    v64 = v0[29];
    v65 = v18;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow(v66);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v58, v63);
    goto LABEL_14;
  }
  v19 = v0 + 32;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[29] + 32);
LABEL_8:
  v52 = v0[31];
  v51 = v0[32];
  v53 = v0[30];
  v54 = v0[27];
  v55 = v0[26];
  v20(v0[22], *v19, v0[28]);
  v56 = v18;
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  v57 = (uint64_t (*)(void))v0[1];
  return v57();
}

unint64_t sub_10021E4F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B4C88);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_10045C150((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021E5F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B4AF0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100221F28(v7, (uint64_t)v16, &qword_1007B4AF8);
    result = sub_10045C1D0((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10022138C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021E738(uint64_t a1)
{
  return sub_10021F23C(a1, &qword_1007B4CE0);
}

unint64_t sub_10021E744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B5AF0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100221F28(v7, (uint64_t)&v16, &qword_1007B4B10);
    v8 = v16;
    v9 = v17;
    result = sub_10045C200(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10022138C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021E878(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B4B18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100221F28(v7, (uint64_t)&v14, &qword_1007B4B20);
    v8 = v14;
    result = sub_10045C214(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10022138C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021E9A4(uint64_t a1)
{
  return sub_10021EF04(a1, &qword_1007B4BF8, &qword_1007B4C00, type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
}

unint64_t sub_10021E9C0(uint64_t a1)
{
  return sub_10021F23C(a1, (uint64_t *)&unk_1007B4B00);
}

unint64_t sub_10021E9CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B4E58);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_10045C214((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021EAD4(uint64_t a1)
{
  return sub_10021FA6C(a1, &qword_1007B4CD0, &qword_1007B4CD8);
}

unint64_t sub_10021EAE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384((uint64_t *)&unk_1007B4C60);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10045C200(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021EBF8(uint64_t a1)
{
  return sub_10021F23C(a1, &qword_1007B4CC8);
}

unint64_t sub_10021EC04(uint64_t a1)
{
  return sub_10021F36C(a1, &qword_1007B4C38, &qword_1007B4C40, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer);
}

unint64_t sub_10021EC20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100008384(&qword_1007B4C08);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100008384((uint64_t *)&unk_1007B4C10);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100221F28(v13, (uint64_t)v5, &qword_1007B4C08);
    result = sub_10045C2DC((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for SFNWInterfaceType(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10021EDD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B4B90);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10045C200(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021EEE8(uint64_t a1)
{
  return sub_10021EF04(a1, &qword_1007B4BA8, &qword_1007B4BB0, type metadata accessor for RegistrationState);
}

unint64_t sub_10021EF04(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v34 = a2;
  v7 = sub_100008384(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v13;
  }
  sub_100008384(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = (uint64_t)v10 + *(int *)(v7 + 48);
  v32 = a1;
  v33 = v15;
  v16 = v12 + 64;
  v17 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v18 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_100221F28(v17, (uint64_t)v10, v34);
    v19 = *v10;
    v20 = v10[1];
    result = sub_10045C200(*v10, v20);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = (uint64_t *)(v13[6] + 16 * result);
    *v24 = v19;
    v24[1] = v20;
    v25 = v13[7];
    v26 = a4(0);
    result = sub_100221DB4(v33, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, a4);
    v27 = v13[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v13[2] = v29;
    v17 += v18;
    if (!--v14)
    {
      swift_release(v13);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10021F09C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100008384(&qword_1007B4B98);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100008384(&qword_1007B4BA0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100221F28(v13, (uint64_t)v5, &qword_1007B4B98);
    result = sub_10045C2DC((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10021F230(uint64_t a1)
{
  return sub_10021F23C(a1, &qword_1007B4B88);
}

unint64_t sub_10021F23C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_10045C200(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021F350(uint64_t a1)
{
  return sub_10021F36C(a1, &qword_1007B4C48, &qword_1007B4C50, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer);
}

unint64_t sub_10021F36C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  const char *v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100008384(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v13;
  }
  sub_100008384(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = (const char *)a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_100221F28(v18, (uint64_t)v10, a2);
    result = sub_10045C244((uint64_t)v10);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = v13[6];
    v24 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v10, v24);
    v25 = v13[7];
    v26 = v31(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v22, v15, v26);
    v27 = v13[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v13[2] = v29;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      swift_bridgeObjectRelease(v30);
      return (unint64_t)v13;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10021F520(uint64_t a1)
{
  return sub_10021F6E8(a1, &qword_1007B4AE8);
}

unint64_t sub_10021F52C(uint64_t a1)
{
  return sub_10021F930(a1, &qword_1007B4CB8, &qword_1007B4CC0, (uint64_t (*)(uint64_t))sub_10045C150);
}

unint64_t sub_10021F548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;

  v2 = sub_100008384(&qword_1007B4CA8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v8;
  }
  sub_100008384(&qword_1007B4CB0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24 = (const char *)a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100221F28(v13, (uint64_t)v5, &qword_1007B4CA8);
    result = sub_10045C374((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_BYTE *)(v8[7] + v17) = v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      swift_bridgeObjectRelease(v24);
      return (unint64_t)v8;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10021F6DC(uint64_t a1)
{
  return sub_10021F6E8(a1, &qword_1007B4C58);
}

unint64_t sub_10021F6E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  const char *v9;
  char v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 2);
    v9 = (const char *)*((_QWORD *)v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    result = sub_10045C200(v8, (uint64_t)v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = (uint64_t)v9;
    *(_BYTE *)(v5[7] + result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v7 += 24;
    v5[2] = v16;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021F7F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  const char **v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  double v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(&qword_1007B4CA0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (const char **)(a1 + 56);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 3);
    v8 = *(v6 - 2);
    v10 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    *(_QWORD *)&v11 = swift_bridgeObjectRetain(v8).n128_u64[0];
    swift_bridgeObjectRetain(v9, v11);
    result = sub_10045C200(v7, (uint64_t)v8);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 16 * result);
    *v14 = v7;
    v14[1] = (uint64_t)v8;
    v15 = (_QWORD *)(v4[7] + 16 * result);
    *v15 = v10;
    v15[1] = v9;
    v16 = v4[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v18;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021F914(uint64_t a1)
{
  return sub_10021F930(a1, &qword_1007B4C90, &qword_1007B4C98, (uint64_t (*)(uint64_t))sub_10045C150);
}

unint64_t sub_10021F930(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008384(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease((const char *)a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100221F28(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_10022138C(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10021FA58(uint64_t a1)
{
  return sub_10021FA6C(a1, &qword_1007B4BE8, &qword_1007B4BF0);
}

unint64_t sub_10021FA6C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_100008384(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v12;
  }
  sub_100008384(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_9;
  v14 = *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain(v11);
  while (1)
  {
    sub_100221F28(v17, (uint64_t)v9, a2);
    result = sub_10045C2DC((uint64_t)v9);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v9, v23);
    *(_QWORD *)(v12[7] + 8 * v21) = *(_QWORD *)&v9[v14];
    v24 = v12[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10021FBF8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t variable initialization expression of HeadphoneProxFeatureClient.manager()
{
  type metadata accessor for HeadphoneProxFeatureManager(0);
  return static HeadphoneProxFeatureManager.shared.getter();
}

unint64_t variable initialization expression of SDB389BubbleMonitor.bubbleDevices()
{
  return sub_10021FA6C((uint64_t)_swiftEmptyArrayStorage, &qword_1007B4CD0, &qword_1007B4CD8);
}

uint64_t variable initialization expression of SDB389BubbleMonitor.updateHandler()
{
  return 0;
}

id variable initialization expression of SDB389BubbleMonitor.bubbleScanner()
{
  return objc_msgSend(objc_allocWithZone((Class)SFDeviceDiscovery), "init");
}

id variable initialization expression of SDAirDropService.deviceStatus()
{
  return sub_10021FCB4(off_1007112E0, (SEL *)&selRef_sharedMonitor);
}

id variable initialization expression of SDAirDropService.nearbyAgent()
{
  return sub_10021FCB4(off_1007112D8, (SEL *)&selRef_sharedNearbyAgent);
}

id sub_10021FCB4(_QWORD *a1, SEL *a2)
{
  return objc_msgSend((id)objc_opt_self(*a1), *a2);
}

id variable initialization expression of SDAirDropService.bleController()
{
  if (qword_1007B41A8 != -1)
    swift_once(&qword_1007B41A8, sub_1004A2368);
  return (id)qword_1007D84C0;
}

void *variable initialization expression of SDAirDropHashStoreCDB.stagedDeletedIDs()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of SDAirDropHashStoreCDB.stagedAdditions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of SDAirDropService.queue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100221EDC(0, (unint64_t *)&qword_1007B42D0, OS_dispatch_queue_ptr);
  static DispatchQoS.default.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_100220D78((unint64_t *)&unk_1007BD2A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_100008384((uint64_t *)&unk_1007B42E0);
  v12 = sub_10021FF50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x8000000100611710, v9, v6, v3, 0);
}

id variable initialization expression of SDAirDropHashStoreCDB.reader()
{
  uint64_t v0;
  id v1;
  uint64_t ObjCClassFromMetadata;

  v0 = sub_100221EDC(0, (unint64_t *)&qword_1007B42F0, NSData_ptr);
  v1 = objc_allocWithZone((Class)CUKeyValueStoreReader);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  return objc_msgSend(v1, "initWithKeyType:valueType:", ObjCClassFromMetadata, ObjCClassFromMetadata);
}

unint64_t sub_10021FF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007BD2B0;
  if (!qword_1007BD2B0)
  {
    v1 = sub_10021FF9C((uint64_t *)&unk_1007B42E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1007BD2B0);
  }
  return result;
}

uint64_t sub_10021FF9C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id variable initialization expression of SDB389SetupAgent.queue()
{
  return (id)CUMainQueue();
}

uint64_t type metadata accessor for SDAirDropDownloadDestinationProviderFactory()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary43SDAirDropDownloadDestinationProviderFactory);
}

uint64_t type metadata accessor for SDAirDropDownloadDestinationProvideriOS()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary39SDAirDropDownloadDestinationProvideriOS);
}

void type metadata accessor for SFAutoUnlockDeviceType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B49E0, (uint64_t)&unk_10071D450);
}

void type metadata accessor for SFB389NFCResponse(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B49E8, (uint64_t)&unk_10071D470);
}

void type metadata accessor for BSInterfaceOrientation(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B49F0, (uint64_t)&unk_10071D490);
}

void type metadata accessor for SFPencilDeviceType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B49F8, (uint64_t)&unk_10071D4B0);
}

void type metadata accessor for CBPairingType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A00, (uint64_t)&unk_10071D4D0);
}

void type metadata accessor for SecTrust(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A08, (uint64_t)&unk_10071D4F0);
}

void type metadata accessor for SFAirDropNodeSelectionReason(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A10, (uint64_t)&unk_10071D520);
}

void type metadata accessor for RPControlFlags(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A18, (uint64_t)&unk_10071D540);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A20, (uint64_t)&unk_10071D568);
}

void type metadata accessor for SFAirDropTransferUserResponse(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A28, (uint64_t)&unk_10071D590);
}

void type metadata accessor for SDAirDropDiscoveryLevel(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A30, (uint64_t)&unk_10071D5B0);
}

void type metadata accessor for SFWatchWristState(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A38, (uint64_t)&unk_10071D5D0);
}

void type metadata accessor for SDRPNearFieldPollingType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A40, (uint64_t)&unk_10071D5F0);
}

void type metadata accessor for SFAuthenticationError(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A48, (uint64_t)&unk_10071D610);
}

void type metadata accessor for SDAirDropFlags(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A50, (uint64_t)&unk_10071D630);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A58, (uint64_t)&unk_10071D658);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4A60, (uint64_t)&unk_10071D680);
}

uint64_t sub_10022018C(uint64_t a1, uint64_t a2)
{
  return sub_100221110(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1002201AC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1005CEA64, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1002201E8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1005CEA64, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100220230(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_1005CEA64, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100220288(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_1005CEA64, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1002202D4(uint64_t a1, uint64_t a2)
{
  return sub_100221110(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

_QWORD *sub_1002202E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1002202EC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1002202F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100220308@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_10022031C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100220330(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100220360@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10022038C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1002203B0(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1002203C4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1002203D8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1002203EC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100220400(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100220414(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100220428(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10022043C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_10022044C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100220464(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_100220478(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10022048C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100220500(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10022057C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

Swift::Int sub_1002205BC(uint64_t a1, uint64_t a2)
{
  int *v2;
  _QWORD v6[9];
  int v7;

  v7 = *v2;
  Hasher.init(_seed:)(v6);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10022061C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100220D78(&qword_1007B4AE0, (uint64_t (*)(uint64_t))type metadata accessor for SFAuthenticationError, (uint64_t)&protocol conformance descriptor for SFAuthenticationError);
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10022066C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  _QWORD v7[9];
  int v8;

  v8 = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_DWORD *sub_1002206C8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1002206D8(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void sub_1002206E4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_1002206EC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_100220700@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_100220714@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100220728(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_100220758@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_100220784@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_1002207A8(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_1002207BC(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_1002207D0(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_1002207E4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1002207F8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10022080C(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100220820(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100220834()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *sub_100220844(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

_BYTE *sub_100220858@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

id sub_100220864()
{
  id *v0;

  return *v0;
}

uint64_t sub_10022086C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100220878@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100221D7C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_1002208B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1002208C4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_1002208D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1002208E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  uint64_t result;

  v4 = sub_100221D44(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_100220920@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100220930(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_10022093C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(LAErrorDomain);
}

uint64_t sub_10022094C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10022098C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1002209CC(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100220A30()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100220A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100220AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100220B14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100220D78(&qword_1007B4C80, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE808);
  v3 = sub_100220D78(&qword_1007B4E80, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE4C4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100220B98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100220D78(&qword_1007B4E70, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1005CE638);
  v3 = sub_100220D78(&qword_1007B4E78, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1005CE5D8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100220C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100220D78(&qword_1007B4BC8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1005CDA58);
  v3 = sub_100220D78(&qword_1007B4BD0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1005CD9F8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100220CA0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100220CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100220D78(&qword_1007B4BD8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1005CD62C);
  v3 = sub_100220D78(&qword_1007B4BE0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1005CD5CC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100220D4C()
{
  return sub_100220D78(&qword_1007B4A68, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1005CD590);
}

uint64_t sub_100220D78(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100220DB8()
{
  return sub_100220D78(&qword_1007B4A70, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1005CD564);
}

uint64_t sub_100220DE4()
{
  return sub_100220D78(&qword_1007B4A78, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1005CD600);
}

uint64_t sub_100220E10()
{
  return sub_100220D78(&qword_1007B4A80, (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags, (uint64_t)&unk_1005CDDA0);
}

uint64_t sub_100220E3C()
{
  return sub_100220D78(&qword_1007B4A88, (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags, (uint64_t)&unk_1005CD6BC);
}

uint64_t sub_100220E68()
{
  return sub_100220D78(&qword_1007B4A90, (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags, (uint64_t)&unk_1005CD6EC);
}

uint64_t sub_100220E94()
{
  return sub_100220D78(&qword_1007B4A98, (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags, (uint64_t)&unk_1005CD724);
}

uint64_t sub_100220EC0()
{
  return sub_100220D78(&qword_1007B4AA0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1005CD9BC);
}

uint64_t sub_100220EEC()
{
  return sub_100220D78(&qword_1007B4AA8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1005CD990);
}

BOOL sub_100220F18(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100220F2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100220F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100220D78((unint64_t *)&qword_1007B4E60, (uint64_t (*)(uint64_t))type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey, (uint64_t)&unk_1005CE7C8);
  v3 = sub_100220D78(&qword_1007B4E68, (uint64_t (*)(uint64_t))type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey, (uint64_t)&unk_1005CE728);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100220FF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100220D78(&qword_1007B4E08, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE9DC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100221034(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100220D78(&qword_1007B4E08, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE9DC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100221078(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1002210B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100221110(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10022114C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10022118C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1002211FC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100221284()
{
  return sub_100220D78(&qword_1007B4AB0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1005CDA2C);
}

uint64_t sub_1002212B0()
{
  return sub_100220D78(&qword_1007B4AB8, (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags, (uint64_t)&unk_1005CDB18);
}

uint64_t sub_1002212DC()
{
  return sub_100220D78(&qword_1007B4AC0, (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags, (uint64_t)&unk_1005CDAE8);
}

uint64_t sub_100221308()
{
  return sub_100220D78(&qword_1007B4AC8, (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags, (uint64_t)&unk_1005CDB40);
}

uint64_t sub_100221334()
{
  return sub_100220D78(&qword_1007B4AD0, (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags, (uint64_t)&unk_1005CDB78);
}

uint64_t sub_100221360()
{
  return sub_100220D78(&qword_1007B4AD8, (uint64_t (*)(uint64_t))type metadata accessor for SFAuthenticationError, (uint64_t)&unk_1005CD82C);
}

_OWORD *sub_10022138C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10022139C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  unint64_t v16;
  id v17;
  const char *v18;
  const char *v19;
  NSString v20;
  id v21;
  __int128 v22;
  id v23;
  id v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  NSURL *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  id v63;
  uint64_t v64;
  id v65;
  char *v66;
  _QWORD v67[2];
  _OWORD v68[2];
  id v69[4];

  v0 = type metadata accessor for URL.DirectoryHint(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384((uint64_t *)&unk_1007B5200);
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v66 = (char *)&v60 - v12;
  v13 = sub_10019BD30();
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_21;
  }
  v14 = v13;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v15 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v15(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_21:
    sub_10000D0F0((uint64_t)v6, (uint64_t *)&unk_1007B5200);
    if (qword_1007B3CD0 != -1)
      swift_once(&qword_1007B3CD0, sub_10021DD18);
    v50 = type metadata accessor for Logger(0);
    v51 = sub_100221DF8(v50, (uint64_t)qword_1007B3CD8);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to get downloads real path failed to cleanup directory", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    return;
  }
  v15(v66, v6, v7);
  v69[0] = (id)0xD000000000000011;
  v69[1] = (id)0x80000001006117D0;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.isDirectory(_:), v0);
  v16 = sub_100221E10();
  URL.append<A>(path:directoryHint:)(v69, v3, &type metadata for String, v16);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v63 = (id)objc_opt_self(NSFileManager);
  v17 = objc_msgSend(v63, "defaultManager");
  URL.relativePath.getter();
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v17, "enumeratorAtPath:", v20, swift_bridgeObjectRelease(v19).n128_f64[0]);

  v65 = v21;
  if (v21)
  {
    v64 = v8;
    v62 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v22 = 136315138;
    v61 = v22;
    *(_QWORD *)&v22 = 136315394;
    v60 = v22;
    while (1)
    {
      v23 = objc_msgSend(v65, "nextObject", v60);
      if (v23)
      {
        v24 = v23;
        _bridgeAnyObjectToAny(_:)(v68, v23);
        swift_unknownObjectRelease(v24);
      }
      else
      {
        memset(v68, 0, sizeof(v68));
      }
      sub_100221E54((uint64_t)v68, (uint64_t)v69);
      if (!v69[3])
      {

        sub_10000D0F0((uint64_t)v69, (uint64_t *)&unk_1007B6890);
        goto LABEL_33;
      }
      if ((swift_dynamicCast(v67, v69, v62, &type metadata for String, 6) & 1) == 0)
        break;
      v25 = v67[0];
      v26 = (const char *)v67[1];
      if (qword_1007B3CD0 != -1)
        swift_once(&qword_1007B3CD0, sub_10021DD18);
      v27 = type metadata accessor for Logger(0);
      sub_100221DF8(v27, (uint64_t)qword_1007B3CD8);
      v28 = swift_bridgeObjectRetain_n(v26, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(12, -1);
        v32 = (void *)swift_slowAlloc(32, -1);
        v69[0] = v32;
        *(_DWORD *)v31 = v61;
        swift_bridgeObjectRetain(v26);
        *(_QWORD *)(v31 + 4) = sub_100228BD8(v25, (unint64_t)v26, (uint64_t *)v69);
        swift_bridgeObjectRelease_n(v26, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Removing stale AirDrop download %s", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v26, 2);
      }
      v33 = objc_msgSend(v63, "defaultManager");
      URL.appendingPathComponent(_:)(v25, v26);
      URL._bridgeToObjectiveC()(v34);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v7);
      v69[0] = 0;
      v37 = objc_msgSend(v33, "removeItemAtURL:error:", v36, v69);

      v38 = v69[0];
      if (v37)
      {
        swift_bridgeObjectRelease(v26);
      }
      else
      {
        v39 = v38;
        v40 = _convertNSErrorToError(_:)(v38);

        swift_willThrow(v41);
        swift_errorRetain(v40);
        swift_bridgeObjectRetain(v26);
        v42 = swift_errorRetain(v40);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.error.getter(v43);
        if (os_log_type_enabled(v43, v44))
        {
          v45 = swift_slowAlloc(22, -1);
          v46 = (uint64_t *)swift_slowAlloc(8, -1);
          v47 = (void *)swift_slowAlloc(32, -1);
          v69[0] = v47;
          *(_DWORD *)v45 = v60;
          swift_bridgeObjectRetain(v26);
          *(_QWORD *)(v45 + 4) = sub_100228BD8(v25, (unint64_t)v26, (uint64_t *)v69);
          swift_bridgeObjectRelease_n(v26, 3);
          *(_WORD *)(v45 + 12) = 2112;
          swift_errorRetain(v40);
          v48 = _swift_stdlib_bridgeErrorToNSError(v40);
          *(_QWORD *)(v45 + 14) = v48;
          *v46 = v48;
          swift_errorRelease(v40);
          swift_errorRelease(v40);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to delete file %s %@", (uint8_t *)v45, 0x16u);
          v49 = sub_100008384(&qword_1007B4C30);
          swift_arrayDestroy(v46, 1, v49);
          swift_slowDealloc(v46, -1, -1);
          swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v45, -1, -1);

          swift_errorRelease(v40);
        }
        else
        {
          swift_errorRelease(v40);
          swift_bridgeObjectRelease_n(v26, 2);
          swift_errorRelease(v40);
          swift_errorRelease(v40);

        }
      }
    }

LABEL_33:
    (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v7);
  }
  else
  {
    if (qword_1007B3CD0 != -1)
      swift_once(&qword_1007B3CD0, sub_10021DD18);
    v55 = type metadata accessor for Logger(0);
    v56 = sub_100221DF8(v55, (uint64_t)qword_1007B3CD8);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failed to create enumerator for AirDropHashDB directory", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v66, v7);
  }
}

unint64_t sub_100221C04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  unsigned int v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008384(&qword_1007B4BB8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = a1 + 32; ; i += 40)
    {
      sub_100221F28(i, (uint64_t)&v11, &qword_1007B4BC0);
      v5 = v11;
      result = sub_10045C4DC(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      result = (unint64_t)sub_10022138C(&v12, (_OWORD *)(v3[7] + 32 * result));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100221D0C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100221D44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100221D7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100221DB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100221DF8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_100221E10()
{
  unint64_t result;

  result = qword_1007B4C20;
  if (!qword_1007B4C20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1007B4C20);
  }
  return result;
}

uint64_t sub_100221E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384((uint64_t *)&unk_1007B6890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100221E9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100221EDC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4CF8, (uint64_t)&unk_10071D720);
}

uint64_t sub_100221F28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008384(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4CE8, (uint64_t)&unk_10071D6D0);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4CF0, (uint64_t)&unk_10071D6F8);
}

void type metadata accessor for SFHUDBannerType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D00, (uint64_t)&unk_10071D748);
}

void type metadata accessor for ACCBLEPairing_Status_t(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D08, (uint64_t)&unk_10071D768);
}

void type metadata accessor for ACCBLEPairing_Types_t(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D10, (uint64_t)&unk_10071D790);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D18, (uint64_t)&unk_10071D7B8);
}

void type metadata accessor for SFUnlockErrorCode(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D20, (uint64_t)&unk_10071D7D8);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D28, (uint64_t)&unk_10071D7F8);
}

void type metadata accessor for SFAirDropMapsLinkType(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D30, (uint64_t)&unk_10071D820);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D38, (uint64_t)&unk_10071D840);
}

void type metadata accessor for RPStatusFlags(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D40, (uint64_t)&unk_10071D870);
}

void type metadata accessor for RPFeatureFlags(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D48, (uint64_t)&unk_10071D898);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D50, (uint64_t)&unk_10071D8C0);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D58, (uint64_t)&unk_10071D8F0);
}

void type metadata accessor for WiFiP2PError(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D60, (uint64_t)&unk_10071D920);
}

uint64_t _s10AskRequestV8FileInfoVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for SDAirDropReceiveStateMachineAdaptor.Pipeline(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LongHash(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LongHash(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4D68, (uint64_t)&unk_10071D998);
}

uint64_t sub_100222138()
{
  return sub_100220D78(&qword_1007B4D70, (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags, (uint64_t)&unk_1005CE04C);
}

uint64_t sub_100222164()
{
  return sub_100220D78(&qword_1007B4D78, (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags, (uint64_t)&unk_1005CE01C);
}

uint64_t sub_100222190()
{
  return sub_100220D78(&qword_1007B4D80, (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags, (uint64_t)&unk_1005CE074);
}

uint64_t sub_1002221BC()
{
  return sub_100220D78(&qword_1007B4D88, (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags, (uint64_t)&unk_1005CE0AC);
}

uint64_t sub_1002221E8()
{
  return sub_100220D78(&qword_1007B4D90, (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags, (uint64_t)&unk_1005CE1DC);
}

uint64_t sub_100222214()
{
  return sub_100220D78(&qword_1007B4D98, (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags, (uint64_t)&unk_1005CE1AC);
}

uint64_t sub_100222240()
{
  return sub_100220D78(&qword_1007B4DA0, (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags, (uint64_t)&unk_1005CE204);
}

uint64_t sub_10022226C()
{
  return sub_100220D78(&qword_1007B4DA8, (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags, (uint64_t)&unk_1005CE23C);
}

uint64_t sub_100222298()
{
  return sub_100220D78(&qword_1007B4DB0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE488);
}

uint64_t sub_1002222C4()
{
  return sub_100220D78(&qword_1007B4DB8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE45C);
}

uint64_t sub_1002222F0()
{
  return sub_100220D78(&qword_1007B4DC0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1005CE59C);
}

uint64_t sub_10022231C()
{
  return sub_100220D78(&qword_1007B4DC8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1005CE570);
}

uint64_t sub_100222348()
{
  return sub_100220D78(&qword_1007B4DD0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1005CE60C);
}

uint64_t sub_100222374()
{
  return sub_100220D78(&qword_1007B4DD8, (uint64_t (*)(uint64_t))type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey, (uint64_t)&unk_1005CE6F0);
}

uint64_t sub_1002223A0()
{
  return sub_100220D78(&qword_1007B4DE0, (uint64_t (*)(uint64_t))type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey, (uint64_t)&unk_1005CE6C8);
}

uint64_t sub_1002223CC()
{
  return sub_100220D78(&qword_1007B4DE8, (uint64_t (*)(uint64_t))type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey, (uint64_t)&unk_1005CE758);
}

uint64_t sub_1002223F8()
{
  return sub_100220D78(&qword_1007B4DF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE4F8);
}

uint64_t sub_100222424()
{
  return sub_100220D78(&qword_1007B4DF8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1005CE394);
}

uint64_t sub_100222450()
{
  return sub_100220D78(&qword_1007B4E00, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE888);
}

void type metadata accessor for LAError(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4E88, (uint64_t)&unk_10071D9C0);
}

uint64_t sub_100222490()
{
  return sub_100220D78(&qword_1007B4E08, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE9DC);
}

uint64_t sub_1002224BC()
{
  return sub_100220D78(&qword_1007B4E10, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE964);
}

uint64_t sub_1002224E8()
{
  return sub_100220D78(&qword_1007B4E18, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE8F4);
}

uint64_t sub_100222514()
{
  return sub_100220D78(&qword_1007B4E20, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1005CE84C);
}

uint64_t sub_100222540()
{
  return sub_100220D78(&qword_1007B4E28, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1005CE3C0);
}

unint64_t sub_100222570()
{
  unint64_t result;

  result = qword_1007B4E30;
  if (!qword_1007B4E30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1007B4E30);
  }
  return result;
}

uint64_t sub_1002225B4()
{
  return sub_100220D78(&qword_1007B4E38, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE938);
}

uint64_t sub_1002225E0()
{
  return sub_100220D78(&qword_1007B4E40, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1005CE998);
}

uint64_t sub_10022260C()
{
  return sub_100220D78(&qword_1007B4E48, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CE34C);
}

uint64_t sub_100222638()
{
  return sub_100220D78(&qword_1007B4E50, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1005CEA20);
}

void type metadata accessor for CBAdvertiseRate(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4E90, (uint64_t)&unk_10071D9E8);
}

void type metadata accessor for CBAirDropConfigData(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4E98, (uint64_t)&unk_10071DA08);
}

void type metadata accessor for CBAirDropFlags(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4EA0, (uint64_t)&unk_10071DA30);
}

__n128 initializeWithTake for SDAirDropAppleIDState(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1002226AC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1002226CC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4EA8, (uint64_t)&unk_10071DAB0);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10022271C(a1, &qword_1007B4EB0, (uint64_t)&unk_10071DB30);
}

void sub_10022271C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100222760()
{
  return sub_100220D78(&qword_1007B4EB8, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags, (uint64_t)&unk_1005CEB24);
}

uint64_t sub_10022278C()
{
  return sub_100220D78(&qword_1007B4EC0, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags, (uint64_t)&unk_1005CEAF4);
}

uint64_t sub_1002227B8()
{
  return sub_100220D78(&qword_1007B4EC8, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags, (uint64_t)&unk_1005CEB4C);
}

uint64_t sub_1002227E4()
{
  return sub_100220D78(&qword_1007B4ED0, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags, (uint64_t)&unk_1005CEB84);
}

uint64_t sub_100222810()
{
  return sub_100220D78(&qword_1007B4ED8, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData, (uint64_t)&unk_1005CECB4);
}

uint64_t sub_10022283C()
{
  return sub_100220D78(&qword_1007B4EE0, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData, (uint64_t)&unk_1005CEC84);
}

uint64_t sub_100222868()
{
  return sub_100220D78(&qword_1007B4EE8, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData, (uint64_t)&unk_1005CECDC);
}

uint64_t sub_100222894()
{
  return sub_100220D78((unint64_t *)&unk_1007B4EF0, (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData, (uint64_t)&unk_1005CED14);
}

uint64_t sub_100222980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B50E0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007B50E0);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100222A10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100222B00, static AirDropActor.shared, 0);
}

uint64_t sub_100222B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_t log;
  NSObject *loga;
  uint64_t (*v71)(uint64_t, unint64_t, uint64_t);
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = ((uint64_t (*)(void))SFAirDropReceive.AskRequest.files.getter)();
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease(v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8 = v7(v2, v1, v3);
  v9 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  v66 = v0 + 32;
  if (v6 < 2)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    goto LABEL_13;
  }
  v65 = (void (*)(uint64_t, uint64_t, uint64_t))v7;
  v12 = SFAirDropReceive.AskRequest.urlItems.getter(v8);
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease(v12);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v15 = v14(v9, v10);
  if (v13)
  {
LABEL_13:
    v34 = 0;
    goto LABEL_14;
  }
  v16 = SFAirDropReceive.AskRequest.files.getter(v15);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease(v16);
    goto LABEL_13;
  }
  v64 = (void (*)(uint64_t, uint64_t))v14;
  v18 = 0;
  v63 = v0 + 24;
  v19 = *(_QWORD *)(v0 + 80);
  v20 = v16 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v71 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
  v73 = v19;
  v67 = *(_QWORD *)(v19 + 72);
  log = (os_log_t)(v17 - 1);
  LOBYTE(v21) = 1;
  v75 = v0;
  do
  {
    v22 = v16;
    v23 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 72);
    v25 = v71(v23, v20, v24);
    SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v25);
    v27 = v26;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    v29 = SFIsePub(v28);

    SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v30);
    v32 = v31;
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    LOBYTE(v32) = SFIsPDF(v33);

    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v23, v24);
    if ((v32 & 1) == 0 && (v29 & 1) == 0)
    {
      swift_bridgeObjectRelease(v22);
      v34 = 0;
      v0 = v75;
      goto LABEL_14;
    }
    if ((v21 & 1) != 0)
    {
      v16 = v22;
      v0 = v75;
      if (log == v18)
      {
        swift_bridgeObjectRelease(v22);
        if ((v29 & 1) != 0)
          goto LABEL_13;
        goto LABEL_20;
      }
    }
    else
    {
      v16 = v22;
      v0 = v75;
      if (log == v18)
      {
        swift_bridgeObjectRelease(v22);
LABEL_20:
        v39 = objc_allocWithZone((Class)LSApplicationRecord);
        v40 = sub_100528FF4(0xD000000000000010, 0x80000001006111F0, 1);
        v61 = *(_QWORD *)(v0 + 40);
        v62 = *(void **)(v61 + 16);
        *(_QWORD *)(v61 + 16) = v40;

        goto LABEL_24;
      }
      v29 = 0;
    }
    v18 = ((char *)v18 + 1);
    v20 += v67;
    v21 = v29;
  }
  while ((unint64_t)v18 < *(_QWORD *)(v16 + 16));
  __break(1u);
  swift_once(&qword_1007B3CF0, sub_100222980);
  v41 = *(_QWORD *)(v0 + 112);
  v42 = *(_QWORD *)(v0 + 96);
  v43 = *(_QWORD *)(v0 + 32);
  v44 = type metadata accessor for Logger(0);
  sub_100221DF8(v44, (uint64_t)qword_1007B50E0);
  v65(v41, v43, v42);
  swift_errorRetain(v21);
  v45 = swift_errorRetain(v21);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  v48 = os_log_type_enabled(v46, v47);
  v49 = *(_QWORD *)(v0 + 112);
  v50 = *(_QWORD *)(v0 + 96);
  if (v48)
  {
    v68 = *(_QWORD *)(v0 + 96);
    v51 = *(_QWORD *)(v0 + 56);
    v52 = *(_QWORD *)(v0 + 64);
    v53 = *(_QWORD *)(v0 + 48);
    v54 = swift_slowAlloc(22, -1);
    v72 = (uint64_t *)swift_slowAlloc(8, -1);
    v74 = swift_slowAlloc(32, -1);
    v76 = v74;
    *(_DWORD *)v54 = 136315394;
    loga = v46;
    SFAirDropReceive.AskRequest.id.getter();
    v55 = sub_1002232C0();
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v53, v55);
    v58 = v57;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
    *(_QWORD *)(v75 + 16) = sub_100228BD8(v56, v58, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v66 - 16, v63, v54 + 4);
    v0 = v75;
    swift_bridgeObjectRelease(v58);
    v64(v49, v68);
    *(_WORD *)(v54 + 12) = 2112;
    swift_errorRetain(v21);
    v59 = _swift_stdlib_bridgeErrorToNSError(v21);
    *(_QWORD *)(v75 + 24) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, v66, v54 + 14);
    *v72 = v59;
    swift_errorRelease(v21);
    swift_errorRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, loga, v47, "Failed to get Books app for ask request %s: %@", (uint8_t *)v54, 0x16u);
    v60 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v72, 1, v60);
    swift_slowDealloc(v72, -1, -1);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v54, -1, -1);

    swift_errorRelease(v21);
  }
  else
  {
    swift_errorRelease(v21);
    v64(v49, v50);
    swift_errorRelease(v21);
    swift_errorRelease(v21);

  }
LABEL_24:
  v34 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) != 0;
LABEL_14:
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v34);
}

uint64_t sub_100223048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v7 = sub_100008384((uint64_t *)&unk_1007C5DE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  v11 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  v13 = v10;
  sub_100323EA0(a1, v10, 1, a3);

  return sub_100223280((uint64_t)v9);
}

uint64_t sub_10022313C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for SDAirDropContentHandleriBooksItems()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary34SDAirDropContentHandleriBooksItems);
}

uint64_t sub_100223180()
{
  return 1;
}

uint64_t sub_100223188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SDAirDropContentHandleriBooksItems();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1002231BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007B5124);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10022320C;
  return sub_100222A10(a1);
}

uint64_t sub_10022320C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100223260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100223048(a1, a2, a3);
}

uint64_t sub_100223280(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008384((uint64_t *)&unk_1007C5DE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002232C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B7E60;
  if (!qword_1007B7E60)
  {
    v1 = type metadata accessor for SFAirDrop.TransferIdentifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SFAirDrop.TransferIdentifier, v1);
    atomic_store(result, &qword_1007B7E60);
  }
  return result;
}

uint64_t sub_100223308()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007B51E0);
  sub_100221DF8(v0, (uint64_t)qword_1007B51E0);
  return static Logger.airDropNWClient.getter();
}

uint64_t SFAirDropReceive.AskRequest.init(recordID:initialInfo:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  char *v45;
  char *countAndFlagsBits;
  uint64_t result;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t *v68;
  os_log_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  Swift::String v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  Swift::String *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  objc_class *v89;
  objc_class *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(os_log_t, uint64_t, uint64_t);
  os_log_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  NSObject *v110;
  uint64_t v111;
  unint64_t v112;
  NSObject *v113;
  char *v114;
  id v115;
  id v116;
  unint64_t v117;
  unint64_t v118;
  id *v119;
  Swift::String v120;
  _QWORD *v121;
  unint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  Swift::String *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Class v129;
  unsigned int *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t TypeID;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _QWORD *v147;
  NSObject *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  NSObject *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  NSObject *v168;
  NSObject *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  NSObject *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  NSObject *v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  NSObject *v190;
  char *v191;
  unint64_t v192;
  char *v193;
  unsigned int v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  NSObject *v201;
  uint64_t v202;
  NSObject *v203;
  NSObject *isa;
  NSObject *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  NSObject *v215;
  uint64_t v216;
  NSObject *v217;
  char *v218;
  os_log_t v219;
  char *v220;
  char *v221;
  char *v222;
  NSObject *v223;
  NSObject *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  id v230;
  _QWORD v231[3];
  char v232[8];
  _QWORD v233[3];
  uint64_t v234;
  uint64_t v235;
  NSObject *v236;
  unint64_t v237;
  char v238[8];

  v230 = a3;
  v209 = a4;
  v205 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  isa = v205[-1].isa;
  __chkstk_darwin(v205);
  v203 = ((char *)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v202 = type metadata accessor for String.Encoding(0);
  v201 = *(NSObject **)(v202 - 8);
  __chkstk_darwin(v202);
  v200 = (char *)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B51F8);
  v9 = __chkstk_darwin(v8);
  v207 = (uint64_t)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v210 = (uint64_t)&v182 - v11;
  v211 = type metadata accessor for SFAirDrop.TransferType(0);
  v213 = *(_QWORD *)(v211 - 8);
  v12 = __chkstk_darwin(v211);
  v208 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v214 = (char *)&v182 - v14;
  v216 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v215 = *(NSObject **)(v216 - 8);
  __chkstk_darwin(v216);
  v217 = ((char *)&v182 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100008384((uint64_t *)&unk_1007B5200);
  v17 = __chkstk_darwin(v16);
  v221 = (char *)&v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v212 = (char *)&v182 - v19;
  v20 = type metadata accessor for URL(0);
  v224 = *(NSObject **)(v20 - 8);
  v225 = v20;
  v21 = __chkstk_darwin(v20);
  v220 = (char *)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v222 = (char *)&v182 - v24;
  v25 = __chkstk_darwin(v23);
  v218 = (char *)&v182 - v26;
  v27 = __chkstk_darwin(v25);
  v223 = ((char *)&v182 - v28);
  __chkstk_darwin(v27);
  v219 = (os_log_t)((char *)&v182 - v29);
  v226 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v228 = *(_QWORD *)(v226 - 8);
  v30 = __chkstk_darwin(v226);
  v206 = (char *)&v182 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v227 = (char *)&v182 - v32;
  v33 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v33);
  v35 = (char *)&v182 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = __chkstk_darwin(v36);
  v40 = (uint64_t)&v182 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (uint64_t)&v182 - v41;
  UUID.init(uuidString:)(a1, a2);
  v236 = 0;
  v237 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v237);
  v236 = 0xD000000000000013;
  v237 = 0x8000000100611C90;
  v43._countAndFlagsBits = a1;
  v43._object = a2;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(a2);
  v44 = v237;
  v45 = (char *)v229;
  Optional.tryUnwrap(_:file:line:)(v236, v237, 0xD000000000000070, 0x8000000100611CB0, 21, v33);
  countAndFlagsBits = v45;
  if (v45)
  {

    swift_bridgeObjectRelease(v44);
    return sub_10000D0F0((uint64_t)v35, &qword_1007B7280);
  }
  v229 = (uint64_t)"UUID from recordID ";
  sub_10000D0F0((uint64_t)v35, &qword_1007B7280);
  swift_bridgeObjectRelease(v44);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v37 + 16))(v40, v42, v36);
  SFAirDrop.TransferIdentifier.init(_:)(v40);
  if (!kSFOperationVerifiableIdentityKey)
  {
    __break(1u);
    goto LABEL_128;
  }
  v40 = v36;
  v35 = (char *)v42;
  v44 = v229;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationVerifiableIdentityKey, &type metadata for Bool, 0xD000000000000070, v229 | 0x8000000000000000, 25, &type metadata for Bool);
  v36 = v226;
  v42 = v228;
  v199 = v40;
  v48 = (_QWORD *)kSFOperationSenderIsMeKey;
  if (!kSFOperationSenderIsMeKey)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v40 = v236;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderIsMeKey, &type metadata for Bool, 0xD000000000000070, v44 | 0x8000000000000000, 26, &type metadata for Bool);
  v196 = v40;
  v195 = v236;
  v49 = sub_100221EDC(0, (unint64_t *)&qword_1007B5210, NSUserDefaults_ptr);
  v50 = (void *)static NSUserDefaults.airdrop.getter(v49);
  v44 = SFAirDropUserDefaults.alwaysAutoAccept.getter();

  if ((v44 & 1) != 0)
  {
    v51 = 1;
  }
  else
  {
    v52 = (_QWORD *)kSFOperationAutoAcceptKey;
    if (!kSFOperationAutoAcceptKey)
    {
      __break(1u);
      goto LABEL_151;
    }
    NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationAutoAcceptKey, &type metadata for Bool, 0xD000000000000070, v229 | 0x8000000000000000, 28, &type metadata for Bool);
    v51 = v236 & 1;
  }
  v194 = v51;
  v44 = kSFOperationItemsKey;
  if (!kSFOperationItemsKey)
  {
    __break(1u);
    goto LABEL_147;
  }
  v53 = sub_100221EDC(0, &qword_1007B6880, NSArray_ptr);
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, v44, v53, 0xD000000000000070, v229 | 0x8000000000000000, 31, v53);
  v192 = v53;
  v54 = (uint64_t)v236;
  v193 = v35;
  v198 = v37;
  if (v236)
  {
    v55 = sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
    v197 = NSArray.tryCastElements<A>(as:)(v55, v55);
    v222 = (char *)v54;
    v191 = 0;
    if ((unint64_t)v197 >> 62)
    {
      if (v197 < 0)
        v126 = v197;
      else
        v126 = v197 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v197);
      v73 = _CocoaArrayWrapper.endIndex.getter(v126);
    }
    else
    {
      v73 = *(_QWORD *)((v197 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v197);
    }
    v54 = (uint64_t)v212;
    if (v73)
    {
      if (v73 < 1)
      {
        __break(1u);
        goto LABEL_92;
      }
      if ((v197 & 0xC000000000000001) != 0)
      {
        v74 = 0;
        v75 = _swiftEmptyArrayStorage;
        do
        {
          v76 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v197);
          v77 = String.init(_:)(v76);
          countAndFlagsBits = (char *)v77._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
            v75 = sub_100227A68(0, v75[2] + 1, 1, v75);
          v78 = v75;
          v79 = v75[2];
          v80 = v78;
          v81 = v78[3];
          if (v79 >= v81 >> 1)
            v80 = sub_100227A68((_QWORD *)(v81 > 1), v79 + 1, 1, v80);
          ++v74;
          v80[2] = v79 + 1;
          v82 = (Swift::String *)&v80[2 * v79];
          v75 = v80;
          v82[2] = v77;
        }
        while (v73 != v74);
      }
      else
      {
        v119 = (id *)(v197 + 32);
        v75 = _swiftEmptyArrayStorage;
        do
        {
          v120 = String.init(_:)(*v119);
          countAndFlagsBits = (char *)v120._object;
          if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
            v75 = sub_100227A68(0, v75[2] + 1, 1, v75);
          v121 = v75;
          v122 = v75[2];
          v123 = v121;
          v124 = v121[3];
          if (v122 >= v124 >> 1)
            v123 = sub_100227A68((_QWORD *)(v124 > 1), v122 + 1, 1, v123);
          v123[2] = v122 + 1;
          v125 = (Swift::String *)&v123[2 * v122];
          v75 = v123;
          v125[2] = v120;
          ++v119;
          --v73;
        }
        while (v73);
      }
    }
    else
    {
      v75 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n(v197, 2);
    v98 = v75[2];
    if (v98)
    {
      swift_bridgeObjectRetain(v75);
      v99 = v75;
      v100 = v75 + 5;
      v101 = _swiftEmptyArrayStorage;
      v37 = v198;
      do
      {
        v102 = *(v100 - 1);
        v103 = *v100;
        swift_bridgeObjectRetain(*v100);
        URL.init(string:)(v102, v103);
        swift_bridgeObjectRelease(v103);
        countAndFlagsBits = (char *)v224;
        v104 = v225;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v224[6].isa)(v54, 1, v225) == 1)
        {
          sub_10000D0F0(v54, (uint64_t *)&unk_1007B5200);
        }
        else
        {
          v105 = (void (*)(os_log_t, uint64_t, uint64_t))*((_QWORD *)countAndFlagsBits + 4);
          v106 = v219;
          v105(v219, v54, v104);
          v105(v223, (uint64_t)v106, v104);
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = (_QWORD *)sub_100227CA8(0, v101[2] + 1, 1, (unint64_t)v101, &qword_1007B5318, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
          v108 = v101[2];
          v107 = v101[3];
          countAndFlagsBits = (char *)(v108 + 1);
          if (v108 >= v107 >> 1)
            v101 = (_QWORD *)sub_100227CA8(v107 > 1, v108 + 1, 1, (unint64_t)v101, &qword_1007B5318, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
          v101[2] = countAndFlagsBits;
          v105((os_log_t)((char *)v101+ ((LOBYTE(v224[10].isa) + 32) & ~(unint64_t)LOBYTE(v224[10].isa))+ (unint64_t)v224[9].isa * v108), (uint64_t)v223, v225);
          v37 = v198;
        }
        v100 += 2;
        --v98;
      }
      while (v98);
      v75 = v99;
      swift_bridgeObjectRelease(v99);
    }
    else
    {
      v101 = _swiftEmptyArrayStorage;
      v37 = v198;
    }
    swift_bridgeObjectRelease(v75);
    v44 = sub_10022CBA0((uint64_t)v101);

    swift_bridgeObjectRelease(v101);
    v35 = v193;
    v36 = v226;
  }
  else
  {
    v191 = 0;
    v44 = (uint64_t)&_swiftEmptySetSingleton;
  }
  v40 = (uint64_t)v230;
LABEL_59:
  if (!kSFOperationFilesKey)
  {
    __break(1u);
    goto LABEL_155;
  }
  v109 = (char *)v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationFilesKey, v192, 0xD000000000000070, v229 | 0x8000000000000000, 46, v192);
  countAndFlagsBits = v109;
  v54 = (uint64_t)v227;
  if (v109)
  {
    swift_bridgeObjectRelease(v44);

    (*(void (**)(uint64_t, unint64_t))(v42 + 8))(v54, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v35, v199);
  }
  v110 = v236;
  if (!v236)
  {
    v225 = v44;
    v113 = &_swiftEmptySetSingleton;
    v37 = v199;
    goto LABEL_103;
  }
  v111 = sub_100221EDC(0, (unint64_t *)&unk_1007B5230, NSDictionary_ptr);
  v112 = NSArray.tryCastElements<A>(as:)(v111, v111);
  v42 = v112;
  v224 = v110;
  v225 = v44;
  if (v112 >> 62)
  {
    while (1)
    {
      if (v42 < 0)
        v128 = v42;
      else
        v128 = v42 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v42);
      v40 = _CocoaArrayWrapper.endIndex.getter(v128);
      swift_bridgeObjectRelease(v42);
      v44 = 0;
      if (!v40)
        goto LABEL_101;
LABEL_67:
      v236 = _swiftEmptyArrayStorage;
      v48 = (_QWORD *)sub_10022983C(0, v40 & ~(v40 >> 63), 0);
      if (v40 < 0)
        break;
      v114 = 0;
      v110 = v236;
      v36 = v42 & 0xC000000000000001;
      while ((char *)v40 != v114)
      {
        if (v36)
          v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v114, v42);
        else
          v115 = *(id *)(v42 + 8 * (_QWORD)v114 + 32);
        v116 = v115;
        sub_100225CAC(v116, (uint64_t)v217);

        v236 = v110;
        v118 = (unint64_t)v110[2].isa;
        v117 = (unint64_t)v110[3].isa;
        if (v118 >= v117 >> 1)
        {
          sub_10022983C(v117 > 1, v118 + 1, 1);
          v110 = v236;
        }
        ++v114;
        v110[2].isa = (Class)(v118 + 1);
        ((void (*)(unint64_t, NSObject *, uint64_t))v215[4].isa)((unint64_t)v110+ ((LOBYTE(v215[10].isa) + 32) & ~(unint64_t)LOBYTE(v215[10].isa))+ (unint64_t)v215[9].isa * v118, v217, v216);
        v35 = v193;
        if ((char *)v40 == v114)
        {
          swift_bridgeObjectRelease(v42);
          v37 = v199;
          v36 = v226;
          goto LABEL_102;
        }
      }
      __break(1u);
      swift_once(&qword_1007B3CF8, sub_100223308);
      v56 = type metadata accessor for Logger(0);
      sub_100221DF8(v56, (uint64_t)qword_1007B51E0);
      v57 = (id)v54;
      swift_errorRetain(v114);
      v44 = (uint64_t)v57;
      v58 = swift_errorRetain(v114);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.fault.getter();
      v61 = os_log_type_enabled(v59, v60);
      v212 = v114;
      if (v61)
      {
        v62 = swift_slowAlloc(22, -1);
        v63 = (uint64_t *)swift_slowAlloc(8, -1);
        v223 = swift_slowAlloc(32, -1);
        v236 = v223;
        *(_DWORD *)v62 = 136315394;
        swift_getErrorValue(v114, v232, v231);
        v219 = v59;
        v64 = Error.localizedDescription.getter(v231[1], v231[2]);
        v66 = v65;
        v234 = sub_100228BD8(v64, v65, (uint64_t *)&v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v62 + 4);
        swift_bridgeObjectRelease(v66);
        swift_errorRelease(v114);
        swift_errorRelease(v114);
        *(_WORD *)(v62 + 12) = 2112;
        v234 = v44;
        v67 = (id)v44;
        v35 = v193;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v62 + 14);
        v68 = v63;
        *v63 = v54;

        v42 = v228;
        v69 = v219;
        _os_log_impl((void *)&_mh_execute_header, v219, v60, "Failed to get items as strings, trying again as URLs {error: %s, rawURLItems: %@}", (uint8_t *)v62, 0x16u);
        v70 = sub_100008384(&qword_1007B4C30);
        swift_arrayDestroy(v68, 1, v70);
        swift_slowDealloc(v68, -1, -1);
        v71 = v223;
        swift_arrayDestroy(v223, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        v72 = v62;
        v36 = v226;
        swift_slowDealloc(v72, -1, -1);

      }
      else
      {
        swift_errorRelease(v114);
        swift_errorRelease(v114);

      }
      v37 = v198;
      v40 = (uint64_t)v230;
      v83 = sub_100221EDC(0, (unint64_t *)&unk_1007B5240, NSURL_ptr);
      v84 = NSArray.tryCastElements<A>(as:)(v83, v83);
      v54 = v84;
      v191 = 0;
      if (!(v84 >> 62))
      {
        v85 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v84);
        goto LABEL_30;
      }
LABEL_92:
      if (v54 < 0)
        v127 = v54;
      else
        v127 = v54 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v54);
      v85 = _CocoaArrayWrapper.endIndex.getter(v127);
LABEL_30:
      v86 = v222;
      v223 = v54;
      if (!v85)
      {
        v197 = v44;
        countAndFlagsBits = (char *)_swiftEmptyArrayStorage;
LABEL_78:
        swift_bridgeObjectRelease_n(v223, 2);
        v44 = sub_10022CBA0((uint64_t)countAndFlagsBits);

        swift_bridgeObjectRelease(countAndFlagsBits);
        swift_errorRelease(v212);
        v35 = v193;
        v36 = v226;
        goto LABEL_59;
      }
      if (v85 >= 1)
      {
        v197 = v44;
        v87 = 0;
        v219 = (os_log_t)(v54 & 0xC000000000000001);
        countAndFlagsBits = (char *)_swiftEmptyArrayStorage;
        v88 = v224;
        do
        {
          v54 = v85;
          if (v219)
            v89 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(v87, v223);
          else
            v89 = v223[v87 + 4].isa;
          v90 = v89;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v89);
          v91 = (void (*)(char *, char *, uint64_t))v88[4].isa;
          v92 = (uint64_t)v221;
          v93 = v86;
          v94 = v225;
          v91(v221, v93, v225);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v88[7].isa)(v92, 0, 1, v94);

          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v88[6].isa)(v92, 1, v94) == 1)
          {
            sub_10000D0F0(v92, (uint64_t *)&unk_1007B5200);
            v40 = (uint64_t)v230;
            v86 = v222;
          }
          else
          {
            v95 = v218;
            v91(v218, (char *)v92, v94);
            v91(v220, v95, v94);
            if ((swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits) & 1) == 0)
              countAndFlagsBits = (char *)sub_100227CA8(0, *((_QWORD *)countAndFlagsBits + 2) + 1, 1, (unint64_t)countAndFlagsBits, &qword_1007B5318, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
            v86 = v222;
            v97 = *((_QWORD *)countAndFlagsBits + 2);
            v96 = *((_QWORD *)countAndFlagsBits + 3);
            if (v97 >= v96 >> 1)
              countAndFlagsBits = (char *)sub_100227CA8(v96 > 1, v97 + 1, 1, (unint64_t)countAndFlagsBits, &qword_1007B5318, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
            *((_QWORD *)countAndFlagsBits + 2) = v97 + 1;
            v91(&countAndFlagsBits[((LOBYTE(v224[10].isa) + 32) & ~(unint64_t)LOBYTE(v224[10].isa))+ (unint64_t)v224[9].isa * v97], v220, v225);
            v37 = v198;
            v40 = (uint64_t)v230;
          }
          ++v87;
          v42 = v228;
        }
        while (v85 != v87);
        goto LABEL_78;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_132;
  }
  v40 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFF8) + 0x10);
  v44 = 0;
  if (v40)
    goto LABEL_67;
LABEL_101:
  swift_bridgeObjectRelease(v42);
  v110 = _swiftEmptyArrayStorage;
  v37 = v199;
LABEL_102:
  v113 = sub_10022CD70((uint64_t)v110);

  swift_bridgeObjectRelease(v110);
  v42 = v228;
  countAndFlagsBits = 0;
LABEL_103:
  v129 = v113[2].isa;
  v44 = v211;
  v224 = v113;
  if (v129 || !*(_QWORD *)(v225 + 16))
    v130 = (unsigned int *)&enum case for SFAirDrop.TransferType.files(_:);
  else
    v130 = (unsigned int *)&enum case for SFAirDrop.TransferType.links(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v213 + 104))(v214, *v130, v211);
  v40 = kSFOperationItemsDescriptionKey;
  if (!kSFOperationItemsDescriptionKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_160;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationItemsDescriptionKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 56, &type metadata for String);
  if (!kSFOperationBundleIDKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
LABEL_172:
    v177 = v236;
    if (v236)
    {
      v229 = (uint64_t)sub_1000CE4D4(v236);
      swift_unknownObjectRelease(v177);
LABEL_176:
      LODWORD(v203) = v195 & 1;
      LODWORD(v202) = v196 & 1;
      v178 = v206;
      (*(void (**)(char *, char *, uint64_t))(v228 + 16))(v206, v227, v226);
      v179 = v208;
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v208, v214, v211);
      v180 = v210;
      v181 = v207;
      sub_100221F28(v210, v207, &qword_1007B51F8);
      SFAirDropReceive.AskRequest.init(id:type:transferTypes:canAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderModelName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:urlItems:items:customPayload:)(v178, v179, 2, v194, v202, v203, v186, v187, v44, v42, v222, v223, v37, v221, v219, v220, v217, v218, v215,
        v216,
        v197,
        v212,
        v190,
        v192,
        v188,
        v189,
        v229,
        v205,
        isa,
        v35,
        v36,
        v181,
        v225,
        v224,
        0,
        0xF000000000000000);

      v176 = v180;
      goto LABEL_167;
    }
LABEL_175:
    v229 = 0;
    goto LABEL_176;
  }
  v44 = (uint64_t)v236;
  v36 = v237;
  NSDictionary.sf_value<A>(_:as:file:line:)(&v236, kSFOperationBundleIDKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 57, &type metadata for String);
  if (!kSFOperationSenderComputerNameKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_175;
  }
  v35 = (char *)v44;
  v44 = (uint64_t)v236;
  v42 = v237;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderComputerNameKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 58, &type metadata for String);
  v131 = v237;
  if (v237)
    v132 = (uint64_t)v236;
  else
    v132 = 63;
  if (!v237)
    v131 = 0xE100000000000000;
  v222 = (char *)v132;
  v223 = v131;
  if (!kSFOperationSenderModelNameKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
LABEL_178:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_179;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderModelNameKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 59, &type metadata for String);
  v133 = v237;
  if (v237)
    v37 = (uint64_t)v236;
  else
    v37 = 63;
  if (!v237)
    v133 = 0xE100000000000000;
  v221 = (char *)v133;
  if (!kSFOperationSenderEmailKey)
    goto LABEL_178;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderEmailKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 60, &type metadata for String);
  if (!kSFOperationSenderEmailHashKey)
  {
LABEL_179:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_180;
  }
  v219 = v236;
  v220 = (char *)v237;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderEmailHashKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 61, &type metadata for String);
  if (!kSFOperationSenderCompositeNameKey)
  {
LABEL_180:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_181;
  }
  v217 = v236;
  v218 = (char *)v237;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderCompositeNameKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 62, &type metadata for String);
  v191 = 0;
  if (!kSFOperationSenderFirstNameKey)
  {
LABEL_181:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_182;
  }
  v215 = v236;
  v216 = v237;
  v134 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderFirstNameKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 63, &type metadata for String);
  v191 = v134;
  if (!kSFOperationSenderLastNameKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_184;
  }
  v197 = (uint64_t)v236;
  v212 = (char *)v237;
  v135 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderLastNameKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 64, &type metadata for String);
  v191 = v135;
LABEL_128:
  if (!kSFOperationSenderIDKey)
  {
LABEL_184:
    swift_bridgeObjectRelease(v224);
    __break(1u);
LABEL_185:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_186;
  }
  v190 = v236;
  v192 = v237;
  v136 = v191;
  v48 = NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderIDKey, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 65, &type metadata for String);
  v191 = v136;
  if (v136)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    v137 = v221;
LABEL_140:
    swift_bridgeObjectRelease(v137);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v218);
    swift_bridgeObjectRelease(v216);
    swift_bridgeObjectRelease(v212);
    v143 = &v225;
LABEL_141:
    swift_bridgeObjectRelease(*(v143 - 32));
LABEL_142:
    (*(void (**)(char *, uint64_t))(v213 + 8))(v214, v211);
    (*(void (**)(char *, uint64_t))(v228 + 8))(v227, v226);
    return (*(uint64_t (**)(char *, uint64_t))(v198 + 8))(v193, v199);
  }
LABEL_133:
  v139 = (uint64_t)v236;
  v138 = v237;
  if (!v237)
    v139 = 63;
  v188 = v139;
  if (!v237)
    v138 = 0xE100000000000000;
  v189 = v138;
  v140 = kSFOperationSenderNodeKey;
  if (!kSFOperationSenderNodeKey)
    goto LABEL_185;
  TypeID = SFNodeGetTypeID(v48);
  v142 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:cfTypeID:file:line:)(&v236, v140, &type metadata for OpaquePointer, TypeID, 0xD000000000000070, v229 | 0x8000000000000000, 68, &type metadata for OpaquePointer);
  v191 = v142;
  if (v142)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    swift_bridgeObjectRelease(v221);
    v137 = (char *)v189;
    goto LABEL_140;
  }
  if (v236)
  {
    v144 = SFNodeCopyContactIdentifier(v236);
    if (v144)
    {
      v145 = (void *)v144;
      v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
      v187 = v146;

      goto LABEL_148;
    }
  }
LABEL_147:
  v186 = 0;
  v187 = 0;
LABEL_148:
  v147 = v191;
  v52 = NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, v40, &type metadata for String, 0xD000000000000070, v229 | 0x8000000000000000, 81, &type metadata for String);
  v191 = v147;
  if (v147)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    swift_bridgeObjectRelease(v221);
    swift_bridgeObjectRelease(v189);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v218);
    swift_bridgeObjectRelease(v216);
    swift_bridgeObjectRelease(v212);
    swift_bridgeObjectRelease(v192);
    v143 = (uint64_t *)&v220;
    goto LABEL_141;
  }
LABEL_151:
  countAndFlagsBits = (char *)v237;
  if (v237)
  {
    v148 = v236;
    v149 = v200;
    static String.Encoding.utf8.getter(v52);
    v185 = v148;
    v40 = String.data(using:allowLossyConversion:)(v149, 0, v148, countAndFlagsBits);
    v54 = v150;
    ((void (*)(char *, uint64_t))v201[1].isa)(v149, v202);
    v234 = v40;
    v235 = v54;
    v151 = sub_100008384(&qword_1007B5220);
    v152 = v191;
    Optional.tryUnwrap(_:file:line:)(0xD00000000000002ALL, 0x8000000100611D30, 0xD000000000000070, v229 | 0x8000000000000000, 82, v151);
    v191 = v152;
    if (v152)
    {
      swift_bridgeObjectRelease(v225);
      swift_bridgeObjectRelease(v224);
      swift_bridgeObjectRelease(v223);
      swift_bridgeObjectRelease(v221);
      swift_bridgeObjectRelease(v189);

      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v220);
      swift_bridgeObjectRelease(v218);
      swift_bridgeObjectRelease(v216);
      swift_bridgeObjectRelease(v212);
      swift_bridgeObjectRelease(v192);
      swift_bridgeObjectRelease(v187);
      sub_100225AA0(v40, v54);
      goto LABEL_142;
    }
LABEL_155:
    sub_100225AA0(v40, v54);
    v154 = v236;
    v153 = v237;
    v155 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v155, *(unsigned int *)(v155 + 48), *(unsigned __int16 *)(v155 + 52));
    v110 = JSONDecoder.init()();
    v156 = sub_100220D78(&qword_1007B5228, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    v201 = v154;
    v202 = v153;
    v157 = v191;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v205, v154, v153, v205, v156);
    v191 = v157;
    if (v157)
    {
      swift_release(v110);
      if (qword_1007B3CF8 == -1)
      {
LABEL_157:
        v158 = type metadata accessor for Logger(0);
        sub_100221DF8(v158, (uint64_t)qword_1007B51E0);
        v159 = v191;
        swift_errorRetain((char *)v191);
        swift_bridgeObjectRetain(countAndFlagsBits);
        v160 = swift_errorRetain(v159);
        v161 = Logger.logObject.getter(v160);
        v162 = static os_log_type_t.fault.getter();
        v203 = v161;
        LODWORD(v200) = v162;
        if (os_log_type_enabled(v161, v162))
        {
          v163 = swift_slowAlloc(22, -1);
          v184 = swift_slowAlloc(64, -1);
          v236 = v184;
          *(_DWORD *)v163 = 136315394;
          v183 = v163 + 4;
          v164 = v191;
          swift_getErrorValue((char *)v191, v238, v233);
          v165 = Error.localizedDescription.getter(v233[1], v233[2]);
          v167 = v166;
          v234 = sub_100228BD8(v165, v166, (uint64_t *)&v236);
          v182 = &v235;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v183);
          swift_bridgeObjectRelease(v167);
          swift_errorRelease(v164);
          swift_errorRelease(v164);
          *(_WORD *)(v163 + 12) = 2080;
          swift_bridgeObjectRetain(countAndFlagsBits);
          v234 = sub_100228BD8((uint64_t)v185, (unint64_t)countAndFlagsBits, (uint64_t *)&v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, v182, v163 + 14);
          swift_bridgeObjectRelease_n(countAndFlagsBits, 3);
          v168 = v203;
          _os_log_impl((void *)&_mh_execute_header, v203, (os_log_type_t)v200, "Failed to decode advanced items description {error: %s, itemsDescription: %s}", (uint8_t *)v163, 0x16u);
          v169 = v184;
          swift_arrayDestroy(v184, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v169, -1, -1);
          swift_slowDealloc(v163, -1, -1);
          sub_100225AB4((uint64_t)v201, v202);

          swift_errorRelease((char *)v191);
        }
        else
        {
          sub_100225AB4((uint64_t)v201, v202);
          v171 = v191;
          swift_errorRelease((char *)v191);
          swift_errorRelease(v171);
          swift_errorRelease(v171);

          swift_bridgeObjectRelease_n(countAndFlagsBits, 2);
        }
        v191 = 0;
        goto LABEL_163;
      }
LABEL_182:
      swift_once(&qword_1007B3CF8, sub_100223308);
      goto LABEL_157;
    }
LABEL_160:
    sub_100225AB4((uint64_t)v201, v202);
    swift_release(v110);
    swift_bridgeObjectRelease(countAndFlagsBits);
    ((void (*)(uint64_t, NSObject *, NSObject *))isa[4].isa)(v210, v203, v205);
    v170 = 0;
    goto LABEL_164;
  }
LABEL_163:
  v170 = 1;
LABEL_164:
  ((void (*)(uint64_t, uint64_t, uint64_t, NSObject *))isa[7].isa)(v210, v170, 1, v205);
  v172 = kSFOperationSmallFileIconKey;
  if (!kSFOperationSmallFileIconKey)
  {
LABEL_186:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v187);
    __break(1u);
LABEL_187:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v187);
    __break(1u);
    goto LABEL_188;
  }
  type metadata accessor for CGImage(0);
  v174 = v173;
  v175 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, v172, v174, 0xD000000000000070, v229 | 0x8000000000000000, 95, v174);
  v191 = v175;
  if (v175)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    swift_bridgeObjectRelease(v221);
    swift_bridgeObjectRelease(v189);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v218);
    swift_bridgeObjectRelease(v216);
    swift_bridgeObjectRelease(v212);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v187);
    v176 = v210;
LABEL_167:
    sub_10000D0F0(v176, &qword_1007B51F8);
    goto LABEL_142;
  }
  if (!kSFOperationFileIconKey)
    goto LABEL_187;
  v205 = v236;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationFileIconKey, v174, 0xD000000000000070, v229 | 0x8000000000000000, 96, v174);
  if (kSFOperationSenderIconKey)
  {
    isa = v236;
    NSDictionary.sf_optionalValue<A>(_:as:file:line:)(&v236, kSFOperationSenderIconKey, (char *)&type metadata for Swift.AnyObject + 8, 0xD000000000000070, v229 | 0x8000000000000000, 99, (char *)&type metadata for Swift.AnyObject + 8);
    v191 = 0;
    goto LABEL_172;
  }
LABEL_188:
  swift_bridgeObjectRelease(v224);
  result = swift_bridgeObjectRelease(v187);
  __break(1u);
  return result;
}

