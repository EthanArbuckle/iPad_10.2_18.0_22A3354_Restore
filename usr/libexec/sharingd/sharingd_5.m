unint64_t sub_1004437CC()
{
  return 0xD00000000000001CLL;
}

void sub_1004437E8()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v23 = 0;
      swift_stdlib_random(&v23, 8);
      v6 = (v23 * (unsigned __int128)v2) >> 64;
      if (v2 > v23 * v2)
      {
        v7 = -(uint64_t)v2 % v2;
        if (v7 > v23 * v2)
        {
          do
          {
            v23 = 0;
            swift_stdlib_random(&v23, 8);
          }
          while (v7 > v23 * v2);
          v6 = (v23 * (unsigned __int128)v2) >> 64;
        }
      }
      v8 = v4 + v6;
      if (__OFADD__(v4, v6))
        break;
      if (v4 != v8)
      {
        v9 = *(_QWORD *)(v1 + 16);
        if (v4 >= v9)
          goto LABEL_19;
        if (v8 >= v9)
          goto LABEL_20;
        v10 = (uint64_t *)(v1 + 32 + 16 * v4);
        v11 = *v10;
        v12 = v10[1];
        v13 = (uint64_t *)(v1 + 32 + 16 * v8);
        v14 = *v13;
        v15 = v13[1];
        sub_10022E4A8(*v10, v12);
        sub_10022E4A8(v14, v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
          v1 = sub_1003A9B5C(v1);
        if (v4 >= *(_QWORD *)(v1 + 16))
          goto LABEL_21;
        v16 = (uint64_t *)(v1 + 32 + 16 * v4);
        v17 = *v16;
        v18 = v16[1];
        *v16 = v14;
        v16[1] = v15;
        sub_100225AB4(v17, v18);
        if (v8 >= *(_QWORD *)(v1 + 16))
          goto LABEL_22;
        v19 = (uint64_t *)(v1 + 32 + 16 * v8);
        v20 = *v19;
        v21 = v19[1];
        *v19 = v11;
        v19[1] = v12;
        sub_100225AB4(v20, v21);
        *v22 = v1;
      }
      --v2;
      if (v4++ == v3)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

void sub_100443978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  const char **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  double v16;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = swift_bridgeObjectRetain((const char *)a1).n128_u64[0];
    v6 = (const char **)(a1 + 40);
    do
    {
      v8 = (uint64_t)*(v6 - 1);
      v9 = *v6;
      swift_bridgeObjectRetain(*v6, *(double *)&v5);
      v10 = sub_10043F9FC(v8, v9);
      if (v2)
      {
        *(_QWORD *)&v15 = swift_bridgeObjectRelease((const char *)a1).n128_u64[0];
        *(_QWORD *)&v16 = swift_bridgeObjectRelease(v9, v15).n128_u64[0];
        swift_bridgeObjectRelease((const char *)_swiftEmptyArrayStorage, v16);
        return;
      }
      v11 = v10;
      v5 = swift_bridgeObjectRelease(v9).n128_u64[0];
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized Array._endMutation()(v7);
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease((const char *)a1);
  }
}

_QWORD *sub_100443AA0(uint64_t a1, uint64_t a2, const char *a3)
{
  int64_t v3;
  uint64_t v6;
  Swift::String v7;
  const char *object;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_100229940(0, v3, 0);
    v6 = a1 + 32;
    do
    {
      v6 += 8;
      swift_bridgeObjectRetain(a3);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = (const char *)v7._object;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(object);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_100229940(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = a2;
      v11[5] = a3;
      --v3;
    }
    while (v3);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Int sub_100443BBC(Swift::Int result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::Int v15;
  double v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  Swift::UInt64 *v21;
  Swift::Int v22;
  _QWORD *v23;
  char v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::UInt64 v34;
  Swift::UInt64 v35;
  _QWORD v36[10];
  _QWORD *v37;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (Swift::Int)_swiftEmptyArrayStorage;
  v3 = 0;
  v21 = (Swift::UInt64 *)(a2 + 56);
  v22 = result + 32;
  v23 = _swiftEmptyArrayStorage;
  v30 = *(_QWORD *)(result + 16);
  v31 = a2;
  do
  {
    if (v3 <= v2)
      v4 = v2;
    else
      v4 = v3;
    v32 = v4;
    v5 = v3;
    while (1)
    {
      if (v5 == v32)
      {
        __break(1u);
        return result;
      }
      v33 = v5 + 1;
      v6 = *(_QWORD *)(a2 + 16);
      if (v6)
        break;
LABEL_7:
      v5 = v33;
      a2 = v31;
      if (v33 == v30)
        return (Swift::Int)v23;
    }
    v7 = v22 + 72 * v5;
    v27 = *(const char **)(v7 + 8);
    v28 = *(_QWORD *)v7;
    v25 = *(const char **)(v7 + 24);
    v26 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 40);
    v9 = *(_QWORD *)(v7 + 48);
    v34 = *(_QWORD *)(v7 + 56);
    v35 = *(_QWORD *)(v7 + 32);
    v29 = *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16);
    v24 = *(_BYTE *)(v7 + 67);
    v10 = v21;
    while (1)
    {
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = *(v10 - 3);
      v14 = *(v10 - 2);
      Hasher.init(_seed:)(v36);
      Hasher._combine(_:)(v13);
      Hasher._combine(_:)(v14);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v11);
      v15 = Hasher._finalize()();
      Hasher.init(_seed:)(v36);
      Hasher._combine(_:)(v35);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v34);
      result = Hasher._finalize()();
      if (v15 == result)
        break;
      v10 += 4;
      if (!--v6)
        goto LABEL_7;
    }
    *(_QWORD *)&v16 = swift_bridgeObjectRetain(v27).n128_u64[0];
    swift_bridgeObjectRetain(v25, v16);
    result = swift_isUniquelyReferenced_nonNull_native(v23);
    v17 = v23;
    v37 = v23;
    if ((result & 1) == 0)
    {
      result = sub_100229B38(0, v23[2] + 1, 1);
      v17 = v37;
    }
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
    {
      result = sub_100229B38(v18 > 1, v19 + 1, 1);
      v17 = v37;
    }
    v17[2] = v19 + 1;
    v23 = v17;
    v20 = &v17[9 * v19];
    v20[4] = v28;
    v20[5] = v27;
    v20[6] = v26;
    v20[7] = v25;
    v20[8] = v35;
    v20[9] = v8;
    v20[10] = v9;
    v20[11] = v34;
    *((_BYTE *)v20 + 98) = BYTE2(v29);
    *((_WORD *)v20 + 48) = v29;
    *((_BYTE *)v20 + 99) = v24;
    v2 = v30;
    a2 = v31;
    v3 = v33;
  }
  while (v33 != v30);
  return (Swift::Int)v23;
}

void sub_100443E54()
{
  void *v0;
  char v1;
  uint64_t v2;
  _UNKNOWN **v3;
  const char **v4;
  const char *v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  NSString v17;
  char v18;
  _OWORD v19[2];

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = 0;
  v2 = 0;
LABEL_2:
  v18 = v1;
  v3 = &off_10071CCD0 + 2 * v2++;
  v4 = (const char **)(v3 + 5);
  do
  {
    if ((unint64_t)(v2 - 1) >= 4)
    {
      __break(1u);
      goto LABEL_16;
    }
    v5 = *v4;
    v6 = objc_msgSend(v0, "standardUserDefaults", swift_bridgeObjectRetain(*v4).n128_f64[0]);
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "valueForKey:", v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)(v19, v8);
      swift_unknownObjectRelease(v8);
      sub_10000D0F0((uint64_t)v19, (uint64_t *)&unk_1007B6890);
      v9 = objc_msgSend(v0, "standardUserDefaults");
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "removeObjectForKey:", v10, swift_bridgeObjectRelease(v5).n128_f64[0]);

      v1 = 1;
      if (v2 != 4)
        goto LABEL_2;
      swift_arrayDestroy(&unk_10071CCF0, 4, &type metadata for String);
      goto LABEL_10;
    }
    memset(v19, 0, sizeof(v19));
    swift_bridgeObjectRelease(v5);
    sub_10000D0F0((uint64_t)v19, (uint64_t *)&unk_1007B6890);
    ++v2;
    v4 += 2;
  }
  while (v2 != 5);
  swift_arrayDestroy(&unk_10071CCF0, 4, &type metadata for String);
  if ((v18 & 1) == 0)
    return;
LABEL_10:
  if (qword_1007B40C0 == -1)
    goto LABEL_11;
LABEL_16:
  swift_once(&qword_1007B40C0, sub_1004372E4);
LABEL_11:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100221DF8(v11, (uint64_t)qword_1007C0CF0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Found some deprecated state, resetting history token", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = objc_msgSend(v0, "standardUserDefaults");
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setObject:forKey:", 0, v17);

}

id sub_100444140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id result;
  void *v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  __n128 (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  id v30;
  const char *v31;
  const char *v32;
  NSString v33;
  id v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  char **v41;
  __n128 v42;
  id v43;
  id v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  char *v68;
  uint8_t *v69;
  uint8_t *v70;
  uint64_t v71;
  __n128 (*v72)(char *, uint64_t);
  __n128 v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  _OWORD v81[2];
  uint64_t v82[5];

  v0 = sub_100008384(&qword_1007C3390);
  __chkstk_darwin(v0);
  v78 = (char *)&v71 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD **)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v76 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v71 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v71 - v9;
  v11 = sub_100008384((uint64_t *)&unk_1007C0E50);
  v12 = __chkstk_darwin(v11);
  v77 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v71 - v14;
  result = sub_10019BA08();
  if (result)
  {
    v17 = result;
    v18 = &v15[*(int *)(v11 + 48)];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v21 = v20;

    URL.init(fileURLWithPath:)(v19, v21);
    swift_bridgeObjectRelease(v21);
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    v22 = v11;
    v23 = (__n128 (*)(char *, uint64_t))v3[1];
    v23(v10, v2);
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
    v75 = v8;
    v23(v8, v2);
    v74 = (char *)v22;
    v24 = *(int *)(v22 + 48);
    v25 = v77;
    v26 = &v77[v24];
    v27 = (void (*)(char *, char *, uint64_t))v3[2];
    v27(v77, v15, v2);
    v73.n128_u64[0] = (unint64_t)v18;
    v27(v26, v18, v2);
    v28 = (void (*)(char *, char *, uint64_t))v3[4];
    v29 = v76;
    v28(v76, v25, v2);
    v23(v26, v2);
    v30 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL.relativePath.getter();
    v32 = v31;
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v30, "enumeratorAtPath:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

    if (v34)
    {
      v35 = v77;
      v36 = &v77[*((int *)v74 + 12)];
      v74 = v15;
      v27(v77, v15, v2);
      v37 = ((uint64_t (*)(char *, unint64_t, uint64_t))v27)(v36, v73.n128_u64[0], v2);
      v38 = URL.lastPathComponent.getter(v37);
      v40 = v39;
      v23(v36, v2);
      v77 = (char *)v2;
      v42 = v23(v35, v2);
      v41 = &selRef_connection_didReceivePublicToken_;
      v42.n128_u64[0] = 136315138;
      v73 = v42;
      while (1)
      {
        v43 = objc_msgSend(v34, v41[415], v42.n128_f64[0]);
        if (v43)
        {
          v44 = v43;
          _bridgeAnyObjectToAny(_:)(v81, v43);
          swift_unknownObjectRelease(v44);
        }
        else
        {
          memset(v81, 0, sizeof(v81));
        }
        sub_100221E54((uint64_t)v81, (uint64_t)v82);
        if (!v82[3])
        {

          swift_bridgeObjectRelease(v40);
          sub_10000D0F0((uint64_t)v82, (uint64_t *)&unk_1007B6890);
          goto LABEL_29;
        }
        if ((swift_dynamicCast(&v79, v82, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
          break;
        v46 = v79;
        v45 = v80;
        if (v79 == v38 && v80 == v40)
        {
          v42.n128_u64[0] = swift_bridgeObjectRelease(v40).n128_u64[0];
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v38, v40, 0) & 1) != 0)
        {
          v42.n128_u64[0] = swift_bridgeObjectRelease(v45).n128_u64[0];
        }
        else
        {
          v82[0] = v46;
          v82[1] = (uint64_t)v45;
          *(_QWORD *)&v81[0] = v38;
          *((_QWORD *)&v81[0] + 1) = v40;
          v47 = type metadata accessor for Locale(0);
          v48 = (uint64_t)v78;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v78, 1, 1, v47);
          v49 = sub_100221E10();
          StringProtocol.range<A>(of:options:range:locale:)(v81, 0, 0, 0, 1, v48, &type metadata for String, &type metadata for String, v49, v49);
          v51 = v50;
          sub_10000D0F0(v48, &qword_1007C3390);
          if ((v51 & 1) != 0)
          {
            v42.n128_u64[0] = swift_bridgeObjectRelease(v45).n128_u64[0];
            v41 = &selRef_connection_didReceivePublicToken_;
          }
          else
          {
            if (qword_1007B40C0 != -1)
              swift_once(&qword_1007B40C0, sub_1004372E4);
            v52 = type metadata accessor for Logger(0);
            sub_100221DF8(v52, (uint64_t)qword_1007C0CF0);
            v53 = swift_bridgeObjectRetain_n(v45, 2);
            v54 = Logger.logObject.getter(v53);
            v55 = static os_log_type_t.default.getter(v54);
            if (os_log_type_enabled(v54, v55))
            {
              v56 = swift_slowAlloc(12, -1);
              v57 = swift_slowAlloc(32, -1);
              v72 = v23;
              v58 = v57;
              v82[0] = v57;
              *(_DWORD *)v56 = v73.n128_u32[0];
              swift_bridgeObjectRetain(v45);
              *(_QWORD *)(v56 + 4) = sub_100228BD8(v46, (unint64_t)v45, v82);
              swift_bridgeObjectRelease_n(v45, 3);
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "Removing failed db state %s", (uint8_t *)v56, 0xCu);
              swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
              v59 = v58;
              v23 = v72;
              swift_slowDealloc(v59, -1, -1);
              v60 = v56;
              v29 = v76;
              swift_slowDealloc(v60, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v45, 2);
            }
            v61 = v75;
            URL.appendingPathComponent(_:)(v46, v45);
            swift_bridgeObjectRelease(v45);
            sub_100438A68();
            v23(v61, (uint64_t)v77);
            v41 = &selRef_connection_didReceivePublicToken_;
          }
        }
      }

      swift_bridgeObjectRelease(v40);
LABEL_29:
      v63 = (uint64_t)v74;
      v23(v29, (uint64_t)v77);
    }
    else
    {
      v62 = (void (*)(char *, uint64_t))v23;
      v63 = (uint64_t)v15;
      if (qword_1007B40C0 != -1)
        swift_once(&qword_1007B40C0, sub_1004372E4);
      v64 = type metadata accessor for Logger(0);
      v65 = sub_100221DF8(v64, (uint64_t)qword_1007C0CF0);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.error.getter(v66);
      if (os_log_type_enabled(v66, v67))
      {
        v68 = v29;
        v69 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v69 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to create enumerator for AirDropHashDB directory", v69, 2u);
        v70 = v69;
        v29 = v68;
        swift_slowDealloc(v70, -1, -1);
      }

      v62(v29, v2);
    }
    return (id)sub_10000D0F0(v63, (uint64_t *)&unk_1007C0E50);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100444888()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100221E54((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_10000D0F0((uint64_t)v6, (uint64_t *)&unk_1007B6890);
    return 0;
  }
}

uint64_t sub_1004449A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10027ACA0(a1, (uint64_t)v4);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_10000D0F0(a1, &qword_1007C4330);
}

uint64_t sub_100444AE0()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100221E54((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_10000D0F0((uint64_t)v6, (uint64_t *)&unk_1007B6890);
    return 0;
  }
}

uint64_t sub_100444C00(const char *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = sub_100442D84(a1, 2, 4);
  v3 = v2;
  sub_10022E4A8(v1, v2);
  sub_100343938(v1, v3);
  v4 = swift_bridgeObjectRetain((const char *)&off_10071CD80);
  v5 = &off_10071CD80;
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    v5 = sub_100227EB4(0, 2, 1, &off_10071CD80);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = sub_100227EB4((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  *((_BYTE *)v5 + v7 + 32) = 0;
  swift_bridgeObjectRelease((const char *)&off_10071CD80);
  v8 = sub_100474E80((const char *)v5);
  swift_bridgeObjectRelease((const char *)v5);
  sub_100225AB4(v1, v3);
  return v8;
}

uint64_t sub_100444D0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100444D30()
{
  uint64_t v0;

  sub_100442B38(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100444D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100444D48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100444D50()
{
  uint64_t v0;

  sub_10043DC90(*(_QWORD *)(v0 + 16));
}

void sub_100444D68(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_100442688(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_100444D80()
{
  uint64_t v0;

  sub_100438988(*(_QWORD *)(v0 + 16), "First unlock handler called");
}

void sub_100444DA0()
{
  uint64_t v0;

  sub_1004380EC(*(_QWORD *)(v0 + 16));
}

void sub_100444DA8()
{
  uint64_t v0;

  sub_100438988(*(_QWORD *)(v0 + 16), "System monitor activated.");
}

uint64_t sub_100444DC8()
{
  return sub_100439AC4();
}

void sub_100444DE8()
{
  sub_100439278();
}

void sub_100444E08()
{
  sub_10043905C();
}

void sub_100444E28(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  sub_1004420C4(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_100444E44()
{
  unint64_t result;

  result = qword_1007C0E60;
  if (!qword_1007C0E60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SDAirDropHashError, &type metadata for SDAirDropHashError);
    atomic_store(result, (unint64_t *)&qword_1007C0E60);
  }
  return result;
}

uint64_t sub_100444E88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100444E98@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100440920(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100444EA0()
{
  uint64_t v0;

  sub_100225AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100444EC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = Data.subdata(in:)(*a1, a1[1], *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_100444EF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100444F20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  void (*v3)(_QWORD *__return_ptr, uint64_t *);
  _QWORD v5[2];
  uint64_t v6;

  v2 = *(uint64_t (**)(_QWORD *))(v1 + 16);
  v3 = *(void (**)(_QWORD *__return_ptr, uint64_t *))(v1 + 56);
  v6 = *a1;
  v3(v5, &v6);
  return v2(v5);
}

uint64_t sub_100444F78(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 32));
  return a1;
}

void sub_100444FA0(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  sub_100441D20(v1[2], v1[3], v1[4], (uint64_t (*)(uint64_t, uint64_t))sub_10043FF90, "Not activated in hashesNeedUpdating. Bailing.", "Hash manager: failed to get contact indentifier for medium hashes with error (%s)", a1);
}

uint64_t sub_100444FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

void sub_100445004(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  sub_100441D20(v1[2], v1[3], v1[4], (uint64_t (*)(uint64_t, uint64_t))sub_10043FDF0, "Not activated in addressOrNumForHash. Bailing.", "Hash manager: failed to get email/phone for combined hash with error (%s)", a1);
}

void *sub_100445038@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1004418E0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(const char **)(v1 + 32), a1);
}

uint64_t sub_100445054@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100441588(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(const char **)(v1 + 32), a1);
}

uint64_t sub_100445070()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10044509C()
{
  uint64_t v0;

  sub_100440FE4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void *sub_1004450A4(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1004450D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100439E1C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_100445108()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardUpdateCoalescer), "trigger");
}

id sub_100445124()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactUpdateCoalescer), "trigger");
}

uint64_t sub_100445140(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for SDAirDropContactHashManagerContext(a2, a1);
  return a2;
}

uint64_t sub_10044517C(uint64_t a1)
{
  destroy for SDAirDropContactHashManagerContext(a1);
  return a1;
}

uint64_t sub_100445234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C0E80);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C0E80);
  if (qword_1007B3E70 != -1)
    swift_once(&qword_1007B3E70, sub_1002E9ECC);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8220);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004452C4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v6 = type metadata accessor for NWEndpoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_allEndpoints) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  swift_bridgeObjectRetain(a2);
  sub_1004FB77C((uint64_t)v12, a1, (uint64_t)a2, (uint64_t)v16);
  sub_10000D0F0((uint64_t)v12, &qword_1007B7280);
  v31 = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_connectableUUID, v16, v13);
  *v9 = nw_endpoint_create_application_service("com.apple.AirDrop", v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for NWEndpoint.opaque(_:), v6);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_displayEndpoint, v9, v6);
  v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID);
  *v17 = a1;
  v17[1] = (uint64_t)a2;
  if (qword_1007B4100 != -1)
    swift_once(&qword_1007B4100, sub_100445234);
  v18 = type metadata accessor for Logger(0);
  sub_100221DF8(v18, (uint64_t)qword_1007C0E80);
  v19 = swift_retain(v3);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v33 = v23;
    *(_DWORD *)v22 = 136315138;
    v30 = v22 + 4;
    v24 = v13;
    v26 = *(_QWORD *)(v3 + 16);
    v25 = *(const char **)(v3 + 24);
    swift_bridgeObjectRetain(v25);
    v27 = v26;
    v13 = v24;
    v32 = sub_100228BD8(v27, (unint64_t)v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v30);
    swift_release(v3);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Creating Classroom %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v13);
  return v3;
}

id sub_10044563C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  id v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = type metadata accessor for SFAirDrop.DeviceRelationship(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for SFAirDrop.TXTRecord(0);
  v8 = *(_QWORD *)(v30 - 8);
  v9 = __chkstk_darwin(v30);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)NWEndpoint.nw.getter(v9);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = result;
  result = objc_msgSend(a1, "displayName");
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v14 = result;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v17 = v16;

  v18 = String.utf8CString.getter(v15, v17);
  swift_bridgeObjectRelease(v17);
  nw_endpoint_set_device_name(v13, v18 + 32);
  swift_release(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for SFAirDrop.DeviceRelationship.classroom(_:), v4);
  SFAirDrop.TXTRecord.init(deviceRelationship:)(v7);
  SFAirDrop.TXTRecord.addToEndpoint(_:)(v13);
  if (qword_1007B4100 != -1)
    swift_once(&qword_1007B4100, sub_100445234);
  v19 = type metadata accessor for Logger(0);
  sub_100221DF8(v19, (uint64_t)qword_1007C0E80);
  v20 = swift_retain_n(v2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v32 = v24;
    v28 = v8;
    v29 = v11;
    *(_DWORD *)v23 = 136315138;
    v25 = *(_QWORD *)(v2 + 16);
    v26 = *(const char **)(v2 + 24);
    swift_bridgeObjectRetain(v26);
    v31 = sub_100228BD8(v25, (unint64_t)v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v23 + 4);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "DiscoveredClassroom Updated %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    swift_unknownObjectRelease(v13);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  }
  else
  {
    swift_release_n(v2, 2);

    swift_unknownObjectRelease(v13);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v30);
  }
}

uint64_t sub_100445938()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_connectableUUID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_displayEndpoint;
  v4 = type metadata accessor for NWEndpoint(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_allEndpoints));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1004459DC()
{
  return type metadata accessor for SDAirDropDiscoveredClassroom(0);
}

uint64_t type metadata accessor for SDAirDropDiscoveredClassroom(uint64_t a1)
{
  uint64_t result;

  result = qword_1007C0EC8;
  if (!qword_1007C0EC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropDiscoveredClassroom);
  return result;
}

uint64_t sub_100445A20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = &unk_1005D84B0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for NWEndpoint(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_1005D84B0;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100445AC4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(void **)(*(_QWORD *)v0 + 24);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  return 0x6F6F727373616C43;
}

uint64_t sub_100445B34@<X0>(uint64_t a1@<X8>)
{
  return sub_1003488E0(&OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_displayEndpoint, (uint64_t (*)(_QWORD))&type metadata accessor for NWEndpoint, a1);
}

uint64_t sub_100445B48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v2[7] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v4);
  v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100445BF0, static AirDropActor.shared, 0);
}

id sub_100445BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  id *v4;
  id v5;
  id result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  sub_10022E534(*(_QWORD *)(v0 + 40), v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  v4 = *(id **)(v0 + 80);
  if (EnumCaseMultiPayload != 3)
  {
    sub_10022E578((uint64_t)v4);
    goto LABEL_16;
  }
  v5 = *v4;
  result = objc_msgSend(*v4, "identifier");
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(v0 + 48);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    v12 = *(_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID);
    v13 = *(const char **)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID + 8);
    if (v12 == v9 && v13 == v11)
    {
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v9, v11, 0);
      swift_bridgeObjectRelease(v11);
      if ((v15 & 1) == 0)
      {
        if (qword_1007B4100 != -1)
          swift_once(&qword_1007B4100, sub_100445234);
        v16 = type metadata accessor for Logger(0);
        v17 = sub_100221DF8(v16, (uint64_t)qword_1007C0E80);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.error.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "ClassroomID Mis-Match", v20, 2u);
          swift_slowDealloc(v20, -1, -1);
        }

        goto LABEL_16;
      }
    }
    v21 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    v23 = *(_QWORD *)(v0 + 48);
    sub_10022E534(*(_QWORD *)(v0 + 40), v21);
    swift_beginAccess(v23 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_allEndpoints, v0 + 16, 33, 0);
    sub_10045DA0C(v22, v21);
    swift_endAccess(v0 + 16);
    sub_10022E578(v22);
    sub_10044563C(v5);

LABEL_16:
    v24 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_100445E14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = sub_100008384(&qword_1007B7760);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100445EC4, static AirDropActor.shared, 0);
}

uint64_t sub_100445EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  sub_10022E534(*(_QWORD *)(v0 + 40), v2);
  if (swift_getEnumCaseMultiPayload(v2, v1) == 3)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = **(void ***)(v0 + 72);
    swift_beginAccess(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_allEndpoints, v0 + 16, 33, 0);
    sub_100472B6C(v4, v3);
    swift_endAccess(v0 + 16);
    sub_10000D0F0(v3, &qword_1007B7760);
    sub_10044563C(v5);

  }
  else
  {
    sub_10022E578(*(_QWORD *)(v0 + 72));
  }
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100445FAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1003488E0(&OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_connectableUUID, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, a1);
}

uint64_t sub_100445FC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100446028, static AirDropActor.shared, 0);
}

uint64_t sub_100446028()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  v1 = (_QWORD *)(**(_QWORD **)(v0 + 40) + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_allEndpoints);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v2 = swift_bridgeObjectRetain(*v1);
  return v4(v2);
}

uint64_t sub_100446088(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007C0F9C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D12C;
  return sub_100445B48(a1);
}

uint64_t sub_1004460D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007C0F94);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  return sub_100445E14(a1);
}

unint64_t sub_100446128(uint64_t a1)
{
  unint64_t result;

  result = sub_10044614C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10044614C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007C0F88;
  if (!qword_1007C0F88)
  {
    v1 = type metadata accessor for SDAirDropDiscoveredClassroom(255);
    result = swift_getWitnessTable(&unk_1005D851C, v1);
    atomic_store(result, &qword_1007C0F88);
  }
  return result;
}

uint64_t sub_100446194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v8 | (v6 << 6); ; i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
      else
        v19 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v13, 3);
      result = _CocoaArrayWrapper.endIndex.getter(v19);
      v14 = result;
      if (!result)
      {
LABEL_38:
        v16 = 1;
        goto LABEL_39;
      }
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v13, 3);
      if (!v14)
        goto LABEL_38;
    }
    if (v14 < 1)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if ((v13 & 0xC000000000000001) != 0)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
        if ((v16 & 1) != 0)
          v16 = *(_BYTE *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_applicationServiceEndpointsOnly);
        else
          v16 = 0;
        swift_unknownObjectRelease(v17);
        ++v15;
      }
      while (v14 != v15);
    }
    else
    {
      v18 = (_QWORD *)(v13 + 32);
      v16 = 1;
      do
      {
        if ((v16 & 1) != 0)
          v16 = *(_BYTE *)(*v18
                         + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_applicationServiceEndpointsOnly);
        else
          v16 = 0;
        ++v18;
        --v14;
      }
      while (v14);
    }
LABEL_39:
    swift_bridgeObjectRelease_n(v13, 3);
    result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1002280FC(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v21 = v7[2];
    v20 = v7[3];
    if (v21 >= v20 >> 1)
    {
      result = (uint64_t)sub_1002280FC((_QWORD *)(v20 > 1), v21 + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v7[2] = v21 + 1;
    *((_BYTE *)v7 + v21 + 32) = v16;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_47;
    if (v10 >= v23)
      goto LABEL_45;
    v11 = *(_QWORD *)(v22 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v23)
        goto LABEL_45;
      v11 = *(_QWORD *)(v22 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v23)
          goto LABEL_45;
        v11 = *(_QWORD *)(v22 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 3;
          if (v10 + 3 >= v23)
            goto LABEL_45;
          v11 = *(_QWORD *)(v22 + 8 * v6);
          if (!v11)
          {
            v12 = v10 + 4;
            if (v12 >= v23)
            {
LABEL_45:
              swift_release(a1);
              return (uint64_t)v7;
            }
            v11 = *(_QWORD *)(v22 + 8 * v12);
            v6 = v12;
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v11 - 1) & v11;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v23)
      goto LABEL_45;
    v11 = *(_QWORD *)(v22 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_19;
  }
LABEL_48:
  __break(1u);
  return result;
}

void sub_10044647C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  id *v66;
  char *v67;
  _QWORD *v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t (*v85)(char *, char *, char *);
  char *v86;
  uint64_t v87;
  id *v88;
  char *v89;
  _QWORD *v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  void (*v94)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*info)(char *, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __CFString *v101;
  __CFString *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  Swift::String v108;
  NSString v109;
  NSString v110;
  uint64_t v111;
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  id *v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  char *v139;
  double v140;
  uint64_t v141;
  double v142;
  unint64_t v143;
  unint64_t v144;
  Swift::String v145;
  double v146;
  NSString v147;
  NSString v148;
  id *v149;
  id v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id *v165;
  char *v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  int *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void (*v178)(char *, uint64_t);
  uint64_t v179;
  int *v180;
  void (*v181)(uint64_t, uint64_t);
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  Class v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  NSString v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  void *v200;
  char *v201;
  uint64_t v202;
  void (*v203)(uint64_t, uint64_t);
  unsigned int v204;
  double v205;
  unint64_t v206;
  Class isa;
  __CFError *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  Class v213;
  void (*v214)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  Class v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  Class v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  int *v259;
  int *v260;
  __CFString *v261;
  uint64_t v262;
  id *v263;
  uint64_t v264;
  char v265[8];
  char v266[8];

  v2 = type metadata accessor for SFAirDropSend.Failure(0);
  v256 = *(_QWORD *)(v2 - 8);
  v257 = (char *)v2;
  v3 = __chkstk_darwin(v2);
  v239 = (char *)&v231 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v258 = (char *)&v231 - v5;
  v252 = type metadata accessor for Date(0);
  v253 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v236 = (char *)&v231 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007C4330);
  v8 = __chkstk_darwin(v7);
  v245 = (uint64_t)&v231 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v238 = (uint64_t)&v231 - v10;
  v11 = (int *)type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  v259 = (int *)*((_QWORD *)v11 - 1);
  v260 = v11;
  v12 = __chkstk_darwin(v11);
  v243 = (uint64_t)&v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v251 = (char *)&v231 - v15;
  v16 = __chkstk_darwin(v14);
  v237 = (uint64_t)&v231 - v17;
  v18 = __chkstk_darwin(v16);
  v242 = (uint64_t)&v231 - v19;
  v20 = __chkstk_darwin(v18);
  v244 = (uint64_t)&v231 - v21;
  __chkstk_darwin(v20);
  v246 = (uint64_t)&v231 - v22;
  v235 = type metadata accessor for SFNWInterfaceType(0);
  v234 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v233 = (char *)&v231 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = type metadata accessor for UUID(0);
  v248 = *(_QWORD *)(v249 - 8);
  __chkstk_darwin(v249);
  v247 = (char *)&v231 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008384(&qword_1007BD950);
  v26 = __chkstk_darwin(v25);
  v255 = (uint64_t)&v231 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v241 = (uint64_t)&v231 - v28;
  v29 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v261 = *(__CFString **)(v29 - 8);
  v262 = v29;
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v231 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v250 = (char *)&v231 - v34;
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v231 - v36;
  v38 = __chkstk_darwin(v35);
  v254 = (char *)&v231 - v39;
  __chkstk_darwin(v38);
  v240 = (char *)&v231 - v40;
  v41 = type metadata accessor for SFAirDrop.Progress(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v231 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v47 = (char *)&v231 - v46;
  v48 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = __chkstk_darwin(v48);
  v52 = (char *)&v231 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = a1;
  SFAirDropSend.Transfer.state.getter(v50);
  v53 = (*(uint64_t (**)(char *, uint64_t))(v49 + 88))(v52, v48);
  if (v53 != enum case for SFAirDropSend.Transfer.State.transferring(_:))
  {
    if (v53 == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
    {
      (*(void (**)(char *, uint64_t))(v49 + 96))(v52, v48);
      v82 = sub_100008384(&qword_1007B8858);
      v84 = v256;
      v83 = v257;
      v85 = *(uint64_t (**)(char *, char *, char *))(v256 + 32);
      v86 = v258;
      v87 = v85(v258, &v52[*(int *)(v82 + 48)], v257);
      SFAirDropSend.Transfer.id.getter(v87);
      v88 = v263;
      v89 = (char *)(v263 + 5);
      swift_beginAccess(v263 + 5, v266, 32, 0);
      v90 = v88[5];
      if (v90[2] && (v91 = sub_10045C244((uint64_t)v32), (v92 & 1) != 0))
      {
        v93 = v243;
        sub_10044A94C(v90[7] + *((_QWORD *)v259 + 9) * v91, v243);
        v94 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v251;
        sub_10044A990(v93, (uint64_t)v251);
        swift_endAccess(v266);
        info = (void (*)(char *, uint64_t))v261->info;
        info(v32, v262);
        v96 = v245;
        sub_10027ACA0((uint64_t)v94 + v260[7], v245);
        LODWORD(v93) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 48))(v96, 1, v252);
        sub_10000D0F0(v96, &qword_1007C4330);
        if ((_DWORD)v93 == 1)
        {
          v97 = v239;
          (*(void (**)(char *, char *, char *))(v84 + 16))(v239, v258, v83);
          v98 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
          v99 = swift_allocError(v83, v98, 0, 0);
          v85(v100, v97, v83);
          v101 = (__CFString *)_convertErrorToNSError(_:)(v99);
          swift_errorRelease(v99);
          v102 = (__CFString *)-[__CFString domain](v101, "domain");
          if (!v102)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0);
            v104 = v103;
            v102 = (__CFString *)String._bridgeToObjectiveC()();
            v105 = v104;
            v88 = v263;
            swift_bridgeObjectRelease(v105);
          }
          v263 = (id *)CFErrorCreate(kCFAllocatorDefault, v102, (CFIndex)-[__CFString code](v101, "code"), 0);

          SFAirDropSend.Transfer.bundleIdentifier.getter();
          v261 = v101;
          if (v106)
          {
            v107 = v106;
            v108._countAndFlagsBits = 0x6C7070612E6D6F63;
            v108._object = (void *)0xEA00000000002E65;
            if (String.hasPrefix(_:)(v108))
            {
LABEL_18:
              v109 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v107);
              v110 = String._bridgeToObjectiveC()();
              v253 = v260[5];
              v111 = *(_QWORD *)&v251[v253];
              v112 = objc_msgSend(v88[2], "discoverableLevel");
              swift_beginAccess(v88 + 4, v266, 0, 0);
              v113 = v88[4];
              v114 = swift_bridgeObjectRetain(v113);
              v115 = sub_100446194(v114);
              swift_bridgeObjectRelease(v113);
              v116 = *(_QWORD *)(v115 + 16);
              if (v116)
              {
                v117 = 0;
                v118 = v116 - 1;
                v119 = 1;
                while (1)
                {
                  while ((v119 & 1) == 0)
                  {
                    if (v118 == v117)
                    {
                      swift_bridgeObjectRelease(v115);
                      goto LABEL_70;
                    }
                    v119 = 0;
                    ++v117;
                  }
                  v119 = *(_BYTE *)(v115 + v117 + 32);
                  if (v118 == v117)
                    break;
                  ++v117;
                }
                swift_bridgeObjectRelease(v115);
                if ((v119 & 1) != 0)
                {
                  v203 = (void (*)(uint64_t, uint64_t))info;
                  v204 = 1;
                  goto LABEL_71;
                }
LABEL_70:
                v203 = (void (*)(uint64_t, uint64_t))info;
                v204 = 0;
              }
              else
              {
                v203 = (void (*)(uint64_t, uint64_t))info;
                swift_bridgeObjectRelease(v115);
                v204 = 1;
              }
LABEL_71:
              v205 = (double)v111;
              v206 = sub_10021E5F8((uint64_t)_swiftEmptyArrayStorage);
              isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v206);
              v208 = (__CFError *)v263;
              sub_100044784(v109, v110, 1, (__CFError *)v263, (uint64_t)v112, v204, isa, v205);

              v209 = (uint64_t)v254;
              v211 = SFAirDropSend.Transfer.id.getter(v210);
              v212 = v247;
              SFAirDrop.TransferIdentifier.id.getter(v211);
              v203(v209, v262);
              v213 = UUID._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v248 + 8))(v212, v249);
              v214 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v251;
              sub_100045470((uint64_t)CFSTR("Send"), (uint64_t)CFSTR("Failed"), v213, 0, (double)*(uint64_t *)&v251[v253]);

              SFAirDropSend.Transfer.id.getter(v215);
              v216 = v255;
              (*((void (**)(uint64_t, uint64_t, uint64_t, int *))v259 + 7))(v255, 1, 1, v260);
              swift_beginAccess(v89, v265, 33, 0);
              sub_100394F28(v216, v209);
              swift_endAccess(v265);

              sub_10044A9D4((uint64_t)v214);
              (*(void (**)(char *, char *))(v256 + 8))(v258, v257);
              goto LABEL_47;
            }
            swift_bridgeObjectRelease(v107);
          }
          v107 = 0xE000000000000000;
          goto LABEL_18;
        }
        sub_10044A9D4((uint64_t)v94);
        v86 = v258;
      }
      else
      {
        swift_endAccess(v266);
        ((void (*)(char *, uint64_t))v261->info)(v32, v262);
      }
      (*(void (**)(char *, char *))(v84 + 8))(v86, v83);
    }
    else
    {
      if (v53 != enum case for SFAirDropSend.Transfer.State.completedSuccessfully(_:))
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
        return;
      }
      (*(void (**)(char *, uint64_t))(v49 + 96))(v52, v48);
      v158 = sub_100008384((uint64_t *)&unk_1007BCFD0);
      v159 = ((uint64_t (*)(_QWORD))swift_bridgeObjectRelease)(*(_QWORD *)&v52[*(int *)(v158 + 48) + 8]);
      v160 = (uint64_t)v254;
      SFAirDropSend.Transfer.id.getter(v159);
      v161 = v255;
      (*((void (**)(uint64_t, uint64_t, uint64_t, int *))v259 + 7))(v255, 1, 1, v260);
      swift_beginAccess(v263 + 5, v266, 33, 0);
      sub_100394F28(v161, v160);
      swift_endAccess(v266);
    }
LABEL_47:
    v162 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v162 - 8) + 8))(v52, v162);
    return;
  }
  (*(void (**)(char *, uint64_t))(v49 + 96))(v52, v48);
  swift_bridgeObjectRelease(*((_QWORD *)v52 + 1));
  v54 = (int *)sub_100008384((uint64_t *)&unk_1007C3410);
  v55 = &v52[v54[12]];
  swift_bridgeObjectRelease(*(_QWORD *)&v52[v54[16] + 8]);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v47, v55, v41);
  v56 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v258 = v47;
  v56(v45, v47, v41);
  v57 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v45, v41);
  v58 = v52;
  v59 = v41;
  if ((_DWORD)v57 == enum case for SFAirDrop.Progress.transferring(_:))
  {
    v257 = v52;
    v60 = v54;
    v61 = v42;
    v62 = (*(uint64_t (**)(char *, uint64_t))(v42 + 96))(v45, v41);
    v63 = *(_QWORD *)v45;
    v64 = *((_QWORD *)v45 + 1);
    v65 = v45[16];
    SFAirDropSend.Transfer.id.getter(v62);
    v66 = v263;
    v67 = (char *)(v263 + 5);
    swift_beginAccess(v263 + 5, v266, 32, 0);
    v68 = v66[5];
    if (v68[2] && (v69 = sub_10045C244((uint64_t)v37), (v70 & 1) != 0))
    {
      v71 = v68[7];
      v72 = v259;
      v73 = v244;
      sub_10044A94C(v71 + *((_QWORD *)v259 + 9) * v69, v244);
      v74 = v73;
      v75 = v246;
      sub_10044A990(v74, v246);
      swift_endAccess(v266);
      v76 = ((uint64_t (*)(char *, uint64_t))v261->info)(v37, v262);
      v77 = v258;
      if ((v65 & 1) == 0)
      {
        v78 = v260;
        *(_QWORD *)(v75 + v260[5]) = v64;
        *(_QWORD *)(v75 + v78[6]) = v63;
        v79 = (uint64_t)v254;
        v80 = v72;
        SFAirDropSend.Transfer.id.getter(v76);
        v81 = v255;
        sub_10044A94C(v75, v255);
        (*((void (**)(uint64_t, _QWORD, uint64_t, int *))v80 + 7))(v81, 0, 1, v78);
        swift_beginAccess(v67, v266, 33, 0);
        sub_100394F28(v81, v79);
        swift_endAccess(v266);
      }
      sub_10044A9D4(v75);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v77, v59);
    }
    else
    {
      swift_endAccess(v266);
      ((void (*)(char *, uint64_t))v261->info)(v37, v262);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v258, v59);
    }
    v54 = v60;
    goto LABEL_44;
  }
  v120 = v57;
  if ((_DWORD)v57 != enum case for SFAirDrop.Progress.completed(_:))
  {
    v163 = v262;
    if ((_DWORD)v57 != enum case for SFAirDrop.Progress.notStarted(_:))
    {
      v177 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
      v178 = *(void (**)(char *, uint64_t))(v42 + 8);
      v178(v258, v41);
      if (v120 != v177)
        v178(v45, v41);
      goto LABEL_65;
    }
    v164 = (uint64_t)v240;
    SFAirDropSend.Transfer.id.getter(v57);
    v165 = v263;
    v166 = (char *)(v263 + 5);
    swift_beginAccess(v263 + 5, v266, 32, 0);
    v167 = v165[5];
    v168 = v167[2];
    v232 = v41;
    if (v168)
    {
      v169 = sub_10045C244(v164);
      v170 = v241;
      if ((v171 & 1) != 0)
      {
        v172 = v167[7];
        v173 = v259;
        sub_10044A94C(v172 + *((_QWORD *)v259 + 9) * v169, v241);
        v174 = (char *)*((_QWORD *)v173 + 7);
        v175 = v170;
        v176 = 0;
LABEL_61:
        v180 = v260;
        v251 = v174;
        ((void (*)(uint64_t, uint64_t, uint64_t, int *))v174)(v175, v176, 1, v260);
        swift_endAccess(v266);
        v181 = (void (*)(uint64_t, uint64_t))v261->info;
        v181(v164, v163);
        v182 = (*((uint64_t (**)(uint64_t, uint64_t, int *))v173 + 6))(v170, 1, v180);
        v183 = sub_10000D0F0(v170, &qword_1007BD950);
        if (v182 != 1)
        {
          (*(void (**)(char *, uint64_t))(v42 + 8))(v258, v232);
          goto LABEL_65;
        }
        v259 = v54;
        v257 = v58;
        v261 = CFSTR("Send");
        v260 = (int *)CFSTR("Start");
        v184 = (uint64_t)v254;
        v256 = v42;
        v185 = SFAirDropSend.Transfer.id.getter(v183);
        v186 = v247;
        SFAirDrop.TransferIdentifier.id.getter(v185);
        v181(v184, v163);
        v187 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v248 + 8))(v186, v249);
        v188 = v234;
        v189 = v233;
        v190 = v235;
        v191 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v234 + 104))(v233, enum case for SFNWInterfaceType.awdl(_:), v235);
        SFNWInterfaceType.description.getter(v191);
        v193 = v192;
        (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v190);
        v194 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v193);
        sub_100045470((uint64_t)v261, (uint64_t)v260, v187, (uint64_t)v194, 0.0);

        v196 = SFAirDropSend.Transfer.id.getter(v195);
        v197 = v255;
        Date.init()(v196);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v197 + v180[7], 1, 1, v252);
        *(_QWORD *)(v197 + v180[5]) = 0;
        *(_QWORD *)(v197 + v180[6]) = 0;
        ((void (*)(uint64_t, _QWORD, uint64_t, int *))v251)(v197, 0, 1, v180);
        swift_beginAccess(v166, v266, 33, 0);
        sub_100394F28(v197, v184);
        swift_endAccess(v266);
        (*(void (**)(char *, uint64_t))(v256 + 8))(v258, v232);
        v198 = *(uint64_t *)((char *)v263
                          + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
        v199 = __OFADD__(v198, 1);
        v200 = (void *)(v198 + 1);
        if (!v199)
        {
          *(id *)((char *)v263 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = v200;
          v58 = v257;
          v54 = v259;
          goto LABEL_65;
        }
        __break(1u);
        goto LABEL_83;
      }
      v173 = v259;
      v174 = (char *)*((_QWORD *)v259 + 7);
    }
    else
    {
      v173 = v259;
      v174 = (char *)*((_QWORD *)v259 + 7);
      v170 = v241;
    }
    v175 = v170;
    v176 = 1;
    goto LABEL_61;
  }
  v256 = v42;
  (*(void (**)(char *, uint64_t))(v42 + 96))(v45, v41);
  v121 = ((uint64_t (*)(_QWORD))swift_bridgeObjectRelease)(*(_QWORD *)v45);
  v122 = (uint64_t)v250;
  SFAirDropSend.Transfer.id.getter(v121);
  v123 = v263;
  v124 = (char *)(v263 + 5);
  swift_beginAccess(v263 + 5, v266, 32, 0);
  v125 = v123[5];
  v126 = v262;
  v127 = v253;
  if (!v125[2] || (v128 = sub_10045C244(v122), (v129 & 1) == 0))
  {
    swift_endAccess(v266);
    ((void (*)(uint64_t, uint64_t))v261->info)(v122, v126);
    (*(void (**)(char *, uint64_t))(v256 + 8))(v258, v59);
    goto LABEL_65;
  }
  v257 = v52;
  v130 = v125[7] + *((_QWORD *)v259 + 9) * v128;
  v131 = v237;
  sub_10044A94C(v130, v237);
  v132 = v242;
  sub_10044A990(v131, v242);
  swift_endAccess(v266);
  v261 = (__CFString *)v261->info;
  ((void (*)(uint64_t, uint64_t))v261)(v122, v126);
  v133 = v260;
  v134 = v132 + v260[7];
  v135 = v238;
  sub_10027ACA0(v134, v238);
  v136 = v252;
  v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v135, 1, v252);
  v138 = sub_10000D0F0(v135, &qword_1007C4330);
  if (v137 != 1)
  {
    (*(void (**)(char *, uint64_t))(v256 + 8))(v258, v59);
    v179 = v132;
LABEL_81:
    sub_10044A9D4(v179);
LABEL_44:
    v58 = v257;
LABEL_65:
    v201 = &v58[v54[20]];
    v202 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v202 - 8) + 8))(v201, v202);
    return;
  }
  v232 = v59;
  v139 = v236;
  Date.init()(v138);
  sub_10000D0F0(v134, &qword_1007C4330);
  (*(void (**)(uint64_t, char *, uint64_t))(v127 + 16))(v134, v139, v136);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v127 + 56))(v134, 0, 1, v136);
  v140 = Date.timeIntervalSince(_:)(v132);
  v141 = v133[5];
  v142 = (double)*(uint64_t *)(v132 + v141);
  SFAirDropSend.Transfer.bundleIdentifier.getter();
  if (v143)
  {
    v144 = v143;
    v145._countAndFlagsBits = 0x6C7070612E6D6F63;
    v145._object = (void *)0xEA00000000002E65;
    if (String.hasPrefix(_:)(v145))
      goto LABEL_33;
    swift_bridgeObjectRelease(v144);
  }
  v144 = 0xE000000000000000;
LABEL_33:
  v146 = v142 / v140;
  v147 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v144);
  v148 = String._bridgeToObjectiveC()();
  v149 = v263;
  v150 = objc_msgSend(v263[2], "discoverableLevel");
  swift_beginAccess(v149 + 4, v266, 0, 0);
  v151 = v149[4];
  v152 = swift_bridgeObjectRetain(v151);
  v153 = sub_100446194(v152);
  swift_bridgeObjectRelease(v151);
  v154 = *(_QWORD *)(v153 + 16);
  if (v154)
  {
    v155 = 0;
    v156 = v154 - 1;
    v157 = 1;
    while (1)
    {
      while ((v157 & 1) == 0)
      {
        if (v156 == v155)
        {
          swift_bridgeObjectRelease(v153);
          goto LABEL_76;
        }
        v157 = 0;
        ++v155;
      }
      v157 = *(_BYTE *)(v153 + v155 + 32);
      if (v156 == v155)
        break;
      ++v155;
    }
    swift_bridgeObjectRelease(v153);
    if ((v157 & 1) != 0)
    {
      v217 = 1;
      goto LABEL_77;
    }
LABEL_76:
    v217 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v153);
    v217 = 1;
  }
LABEL_77:
  v218 = sub_10021E5F8((uint64_t)_swiftEmptyArrayStorage);
  v219 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v218);
  sub_1000443E0(v147, v148, 1, (uint64_t)v150, v217, v219, v146, v142);

  v220 = *(_QWORD *)(v242 + v260[6]);
  if (v220 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (v220 > 0x7FFFFFFF)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  sub_100044AF8(1, v220);
  v221 = (uint64_t)v254;
  v223 = SFAirDropSend.Transfer.id.getter(v222);
  v224 = v247;
  SFAirDrop.TransferIdentifier.id.getter(v223);
  ((void (*)(uint64_t, uint64_t))v261)(v221, v262);
  v225 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v248 + 8))(v224, v249);
  v226 = v242;
  sub_100045470((uint64_t)CFSTR("Send"), (uint64_t)CFSTR("Stop"), v225, 0, (double)*(uint64_t *)(v242 + v141));

  SFAirDropSend.Transfer.id.getter(v227);
  v228 = v255;
  sub_10044A94C(v226, v255);
  (*((void (**)(uint64_t, _QWORD, uint64_t, int *))v259 + 7))(v228, 0, 1, v260);
  swift_beginAccess(v124, v265, 33, 0);
  sub_100394F28(v228, v221);
  swift_endAccess(v265);
  (*(void (**)(char *, uint64_t))(v253 + 8))(v236, v252);
  (*(void (**)(char *, uint64_t))(v256 + 8))(v258, v232);
  v229 = *(uint64_t *)((char *)v263 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
  v199 = __OFADD__(v229, 1);
  v230 = (void *)(v229 + 1);
  if (!v199)
  {
    *(id *)((char *)v263 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted) = v230;
    v179 = v226;
    goto LABEL_81;
  }
LABEL_85:
  __break(1u);
}

void sub_1004479FC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  id v24;
  _BYTE v25[24];
  _BYTE v26[24];

  v3 = sub_100008384(&qword_1007C4330);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v23 - v14;
  if (a1)
  {
    if (a1 == 1)
    {
      v16 = String._bridgeToObjectiveC()();
      v17 = getpid();
      sub_100045388((uint64_t)CFSTR("BonjourAdvertise"), (uint64_t)CFSTR("Stop"), (uint64_t)v16, v17);

      v18 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate;
      swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate, v26, 0, 0);
      sub_10027ACA0(v18, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_10000D0F0((uint64_t)v8, &qword_1007C4330);
      }
      else
      {
        v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
        Date.init()(v20);
        v21 = Date.timeIntervalSince(_:)(v15);
        v22 = *(void (**)(char *, uint64_t))(v10 + 8);
        v22(v13, v9);
        sub_100044A24(v21);
        v22(v15, v9);
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
      swift_beginAccess(v18, v25, 33, 0);
      sub_1002D4998((uint64_t)v6, v18);
      swift_endAccess(v25);
    }
  }
  else
  {
    v24 = String._bridgeToObjectiveC()();
    v19 = getpid();
    sub_100045388((uint64_t)CFSTR("ApplicationServiceAdvertise"), (uint64_t)CFSTR("Stop"), (uint64_t)v24, v19);

  }
}

void sub_100447CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (**v42)(char *, char *, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int *v54;
  char *v55;
  __n128 v56;
  void (*v57)(char *, char *, uint64_t, __n128);
  int v58;
  _QWORD *v59;
  void (**v60)(char *, char *, uint64_t, __n128);
  void (**v61)(char *, char *, uint64_t, __n128);
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  const __CFString *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  char *v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  const __CFString *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  CFErrorRef v102;
  int v103;
  uint64_t v104;
  char *v105;
  double v106;
  uint64_t v107;
  double v108;
  double v109;
  NSString v110;
  NSString v111;
  id v112;
  double v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t (*v126)(char *, char *, int *);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  void *v142;
  __CFString *v143;
  double v144;
  const char *v145;
  const char *v146;
  NSString v147;
  NSString v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  double v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  unint64_t v167;
  const __CFString *v168;
  uint64_t v169;
  char v170;
  void (*length)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  void (*v176)(char *, char *, uint64_t, __n128);
  uint64_t v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  int *v184;
  void (*v185)(uint64_t, uint64_t);
  int v186;
  uint64_t v187;
  uint64_t v188;
  int *v189;
  uint64_t v190;
  char *v191;
  Class v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  const char *v198;
  NSString v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  void (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  const char *v210;
  Class v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  Class v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  double v223;
  const char *v224;
  Class isa;
  __CFError *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  Class v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void (**v252)(char *, uint64_t);
  const __CFString *v253;
  uint64_t v254;
  CFErrorRef v255;
  uint64_t v256;
  int *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  const __CFString *v261;
  int *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char v267[8];
  char v268[8];

  v2 = type metadata accessor for SFAirDropReceive.Failure(0);
  v256 = *(_QWORD *)(v2 - 8);
  v257 = (int *)v2;
  v3 = __chkstk_darwin(v2);
  v235 = (char *)&v235 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v258 = (char *)&v235 - v5;
  v255 = (CFErrorRef)type metadata accessor for Date(0);
  v254 = *((_QWORD *)v255 - 1);
  __chkstk_darwin(v255);
  v239 = (char *)&v235 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007C4330);
  v8 = __chkstk_darwin(v7);
  v242 = (uint64_t)&v235 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v243 = (uint64_t)&v235 - v10;
  v11 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  v261 = *(const __CFString **)(v11 - 8);
  v262 = (int *)v11;
  v12 = __chkstk_darwin(v11);
  v240 = (uint64_t)&v235 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v251 = (uint64_t)&v235 - v15;
  v16 = __chkstk_darwin(v14);
  v241 = (uint64_t)&v235 - v17;
  v18 = __chkstk_darwin(v16);
  v244 = (uint64_t)&v235 - v19;
  v20 = __chkstk_darwin(v18);
  v249 = (uint64_t)&v235 - v21;
  __chkstk_darwin(v20);
  v250 = (uint64_t)&v235 - v22;
  v238 = type metadata accessor for SFNWInterfaceType(0);
  v237 = *(_QWORD *)(v238 - 8);
  __chkstk_darwin(v238);
  v236 = (char *)&v235 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for UUID(0);
  v247 = *(_QWORD *)(v248 - 8);
  __chkstk_darwin(v248);
  v246 = (char *)&v235 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008384(&qword_1007BD950);
  v26 = __chkstk_darwin(v25);
  v260 = (uint64_t)&v235 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v245 = (uint64_t)&v235 - v28;
  v29 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v263 = *(_QWORD **)(v29 - 8);
  v264 = v29;
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v235 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v253 = (const __CFString *)((char *)&v235 - v34);
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v235 - v36;
  v38 = __chkstk_darwin(v35);
  v259 = (char *)&v235 - v39;
  __chkstk_darwin(v38);
  v252 = (void (**)(char *, uint64_t))((char *)&v235 - v40);
  v41 = type metadata accessor for SFAirDrop.Progress(0);
  v42 = *(void (***)(char *, char *, uint64_t, __n128))(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v235 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v47 = (char *)&v235 - v46;
  v48 = type metadata accessor for SFAirDropReceive.Transfer.State(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = __chkstk_darwin(v48);
  v52 = (char *)&v235 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = a1;
  SFAirDropReceive.Transfer.state.getter(v50);
  v53 = (*(uint64_t (**)(char *, uint64_t))(v49 + 88))(v52, v48);
  if (v53 != enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    if (v53 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
    {
      (*(void (**)(char *, uint64_t))(v49 + 96))(v52, v48);
      v78 = (int *)sub_100008384((uint64_t *)&unk_1007BCFB0);
      v79 = &v52[v78[12]];
      *(_QWORD *)&v80 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v52[v78[16] + 8]).n128_u64[0];
      *(_QWORD *)&v81 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v52[v78[20]], v80).n128_u64[0];
      *(_QWORD *)&v82 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v52[v78[24]], v81).n128_u64[0];
      swift_bridgeObjectRelease(*(const char **)&v52[v78[28]], v82);
      v83 = (uint64_t)v259;
      SFAirDropReceive.Transfer.id.getter(v84);
      v85 = v260;
      ((void (*)(uint64_t, uint64_t, uint64_t, int *))v261[1].length)(v260, 1, 1, v262);
      swift_beginAccess(v266 + 48, v268, 33, 0);
      sub_100394F28(v85, v83);
      swift_endAccess(v268);
      v86 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(v79, v86);
LABEL_9:
      v87 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v52, v87);
      return;
    }
    if (v53 != enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
      return;
    }
    v122 = *(void (**)(char *, uint64_t))(v49 + 96);
    v59 = v52;
    v122(v52, v48);
    v123 = sub_100008384(&qword_1007B9BB0);
    v125 = v256;
    v124 = v257;
    v126 = *(uint64_t (**)(char *, char *, int *))(v256 + 32);
    v127 = v258;
    v128 = v126(v258, &v52[*(int *)(v123 + 48)], v257);
    SFAirDropReceive.Transfer.id.getter(v128);
    v129 = v266;
    v130 = v266 + 48;
    swift_beginAccess(v266 + 48, v268, 32, 0);
    v131 = *(_QWORD *)(v129 + 48);
    if (*(_QWORD *)(v131 + 16) && (v132 = sub_10045C244((uint64_t)v32), (v133 & 1) != 0))
    {
      v134 = v240;
      sub_10044A94C(*(_QWORD *)(v131 + 56) + v261[2].info * v132, v240);
      v135 = v251;
      sub_10044A990(v134, v251);
      swift_endAccess(v268);
      v136 = (void (*)(char *, uint64_t))v263[1];
      v136(v32, v264);
      v137 = v242;
      sub_10027ACA0(v135 + v262[7], v242);
      LODWORD(v134) = (*(uint64_t (**)(uint64_t, uint64_t, CFErrorRef))(v254 + 48))(v137, 1, v255);
      sub_10000D0F0(v137, &qword_1007C4330);
      if ((_DWORD)v134 == 1)
      {
        v138 = v235;
        (*(void (**)(char *, char *, int *))(v125 + 16))(v235, v258, v124);
        v139 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        v140 = swift_allocError(v124, v139, 0, 0);
        v126(v141, v138, v124);
        v142 = (void *)_convertErrorToNSError(_:)(v140);
        swift_errorRelease(v140);
        v143 = (__CFString *)objc_msgSend(v142, "domain");
        if (!v143)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v146 = v145;
          v143 = (__CFString *)String._bridgeToObjectiveC()();
          *(_QWORD *)&v144 = swift_bridgeObjectRelease(v146).n128_u64[0];
        }
        v263 = v142;
        v255 = CFErrorCreate(kCFAllocatorDefault, v143, (CFIndex)objc_msgSend(v142, "code", v144), 0);

        v147 = String._bridgeToObjectiveC()();
        v148 = String._bridgeToObjectiveC()();
        v149 = v262[5];
        v150 = *(_QWORD *)(v251 + v149);
        v151 = v266;
        v152 = objc_msgSend(*(id *)(v266 + 16), "discoverableLevel");
        *(_QWORD *)&v153 = swift_beginAccess(v151 + 32, v268, 0, 0).n128_u64[0];
        v154 = *(const char **)(v151 + 32);
        v155 = swift_bridgeObjectRetain(v154, v153);
        v156 = sub_100446194(v155);
        *(_QWORD *)&v157 = swift_bridgeObjectRelease(v154).n128_u64[0];
        v158 = *(_QWORD *)(v156 + 16);
        v254 = v149;
        if (v158)
        {
          v159 = 0;
          v160 = v158 - 1;
          v161 = 1;
          while (1)
          {
            while ((v161 & 1) == 0)
            {
              if (v160 == v159)
              {
                v208 = (void (*)(uint64_t, uint64_t))v136;
                swift_bridgeObjectRelease((const char *)v156, v157);
                goto LABEL_74;
              }
              v161 = 0;
              ++v159;
            }
            v161 = *(_BYTE *)(v156 + v159 + 32);
            if (v160 == v159)
              break;
            ++v159;
          }
          v208 = (void (*)(uint64_t, uint64_t))v136;
          swift_bridgeObjectRelease((const char *)v156, v157);
          if ((v161 & 1) != 0)
            goto LABEL_72;
LABEL_74:
          v222 = 0;
        }
        else
        {
          v208 = (void (*)(uint64_t, uint64_t))v136;
          swift_bridgeObjectRelease((const char *)v156, v157);
LABEL_72:
          v222 = 1;
        }
        v223 = (double)v150;
        v224 = (const char *)sub_10021E5F8((uint64_t)_swiftEmptyArrayStorage);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v224);
        v226 = v255;
        sub_100044784(v147, v148, 0, v255, (uint64_t)v152, v222, isa, v223);

        v227 = (uint64_t)v259;
        v229 = SFAirDropReceive.Transfer.id.getter(v228);
        v230 = v246;
        SFAirDrop.TransferIdentifier.id.getter(v229);
        v208(v227, v264);
        v231 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v247 + 8))(v230, v248);
        v232 = v251;
        sub_100045470((uint64_t)CFSTR("Receive"), (uint64_t)CFSTR("Failed"), v231, 0, (double)*(uint64_t *)(v251 + v254));

        SFAirDropReceive.Transfer.id.getter(v233);
        v234 = v260;
        ((void (*)(uint64_t, uint64_t, uint64_t, int *))v261[1].length)(v260, 1, 1, v262);
        swift_beginAccess(v130, v267, 33, 0);
        sub_100394F28(v234, v227);
        swift_endAccess(v267);

        sub_10044A9D4(v232);
        (*(void (**)(char *, int *))(v256 + 8))(v258, v257);
        goto LABEL_9;
      }
      sub_10044A9D4(v135);
      v127 = v258;
    }
    else
    {
      swift_endAccess(v268);
      ((void (*)(char *, uint64_t))v263[1])(v32, v264);
    }
    (*(void (**)(char *, int *))(v125 + 8))(v127, v124);
    v174 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
LABEL_50:
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v174 - 8) + 8))(v59, v174);
    return;
  }
  (*(void (**)(char *, uint64_t))(v49 + 96))(v52, v48);
  v54 = (int *)sub_100008384(&qword_1007BB650);
  v55 = &v52[v54[12]];
  v56 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v52[v54[16] + 8]);
  v42[4](v47, v55, v41, v56);
  v57 = v42[2];
  v258 = v47;
  ((void (*)(char *, char *, uint64_t))v57)(v45, v47, v41);
  v58 = ((uint64_t (*)(char *, uint64_t))v42[11])(v45, v41);
  v59 = v52;
  v60 = v42;
  if (v58 == enum case for SFAirDrop.Progress.transferring(_:))
  {
    v257 = v54;
    v61 = v42;
    v62 = ((uint64_t (*)(char *, uint64_t))v42[12])(v45, v41);
    v63 = *(const char **)v45;
    v64 = *((_QWORD *)v45 + 1);
    v65 = v45[16];
    SFAirDropReceive.Transfer.id.getter(v62);
    v66 = v266;
    v67 = v266 + 48;
    swift_beginAccess(v266 + 48, v268, 32, 0);
    v68 = *(_QWORD *)(v66 + 48);
    if (*(_QWORD *)(v68 + 16) && (v69 = sub_10045C244((uint64_t)v37), (v70 & 1) != 0))
    {
      v71 = v261;
      v72 = *(_QWORD *)(v68 + 56) + v261[2].info * v69;
      v73 = v249;
      sub_10044A94C(v72, v249);
      v74 = v73;
      v75 = v250;
      sub_10044A990(v74, v250);
      swift_endAccess(v268);
      v76 = ((uint64_t (*)(char *, uint64_t))v263[1])(v37, v264);
      if ((v65 & 1) != 0)
      {
        v77 = v75;
      }
      else
      {
        v178 = v262;
        *(_QWORD *)(v75 + v262[5]) = v64;
        *(_QWORD *)(v75 + v178[6]) = v63;
        v179 = (uint64_t)v259;
        v180 = v75;
        SFAirDropReceive.Transfer.id.getter(v76);
        v181 = v260;
        sub_10044A94C(v180, v260);
        ((void (*)(uint64_t, _QWORD, uint64_t, int *))v71[1].length)(v181, 0, 1, v178);
        swift_beginAccess(v67, v268, 33, 0);
        sub_100394F28(v181, v179);
        swift_endAccess(v268);
        v77 = v180;
      }
      sub_10044A9D4(v77);
    }
    else
    {
      swift_endAccess(v268);
      ((void (*)(char *, uint64_t))v263[1])(v37, v264);
    }
    ((void (*)(char *, uint64_t))v61[1])(v258, v41);
    v59 = v52;
    goto LABEL_48;
  }
  v88 = v58;
  if (v58 != enum case for SFAirDrop.Progress.completed(_:))
  {
    v256 = v41;
    v162 = v266;
    v163 = v264;
    if (v58 != enum case for SFAirDrop.Progress.notStarted(_:))
    {
      v175 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
      v176 = v60[1];
      v177 = v256;
      ((void (*)(char *, uint64_t))v176)(v258, v256);
      if (v88 != v175)
        ((void (*)(char *, uint64_t))v176)(v45, v177);
      goto LABEL_49;
    }
    v164 = (uint64_t)v252;
    SFAirDropReceive.Transfer.id.getter(v258);
    v165 = (int *)(v162 + 48);
    swift_beginAccess(v162 + 48, v268, 32, 0);
    v166 = *(_QWORD *)(v162 + 48);
    if (*(_QWORD *)(v166 + 16))
    {
      v167 = sub_10045C244(v164);
      v168 = v261;
      v169 = v245;
      if ((v170 & 1) != 0)
      {
        sub_10044A94C(*(_QWORD *)(v166 + 56) + v261[2].info * v167, v245);
        length = (void (*)(uint64_t, uint64_t, uint64_t, int *))v168[1].length;
        v172 = v169;
        v173 = 0;
LABEL_56:
        v184 = v262;
        length(v172, v173, 1, v262);
        swift_endAccess(v268);
        v185 = (void (*)(uint64_t, uint64_t))v263[1];
        v185((uint64_t)v252, v163);
        v186 = ((uint64_t (*)(uint64_t, uint64_t, int *))v168[1].data)(v169, 1, v184);
        v187 = sub_10000D0F0(v169, &qword_1007BD950);
        if (v186 != 1)
        {
          ((void (*)(char *, uint64_t))v60[1])(v258, v256);
          goto LABEL_49;
        }
        v257 = v54;
        v263 = v59;
        v261 = CFSTR("Receive");
        v253 = CFSTR("Start");
        v188 = (uint64_t)v259;
        v262 = v165;
        v189 = v184;
        v252 = (void (**)(char *, uint64_t))v60;
        v190 = SFAirDropReceive.Transfer.id.getter(v187);
        v191 = v246;
        SFAirDrop.TransferIdentifier.id.getter(v190);
        v185(v188, v163);
        v192 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v247 + 8))(v191, v248);
        v193 = v237;
        v194 = v236;
        v195 = v238;
        v196 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v237 + 104))(v236, enum case for SFNWInterfaceType.awdl(_:), v238);
        SFNWInterfaceType.description.getter(v196);
        v198 = v197;
        (*(void (**)(char *, uint64_t))(v193 + 8))(v194, v195);
        v199 = String._bridgeToObjectiveC()();
        v200 = v198;
        v201 = v266;
        swift_bridgeObjectRelease(v200);
        sub_100045470((uint64_t)v261, (uint64_t)v253, v192, (uint64_t)v199, 0.0);

        v203 = SFAirDropReceive.Transfer.id.getter(v202);
        v204 = v260;
        Date.init()(v203);
        (*(void (**)(uint64_t, uint64_t, uint64_t, CFErrorRef))(v254 + 56))(v204 + v189[7], 1, 1, v255);
        *(_QWORD *)(v204 + v189[5]) = 0;
        *(_QWORD *)(v204 + v189[6]) = 0;
        length(v204, 0, 1, v189);
        swift_beginAccess(v262, v268, 33, 0);
        sub_100394F28(v204, v188);
        swift_endAccess(v268);
        v252[1](v258, v256);
        v205 = *(_QWORD *)(v201 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
        v206 = __OFADD__(v205, 1);
        v207 = v205 + 1;
        if (!v206)
        {
          *(_QWORD *)(v201 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = v207;
          v59 = v263;
LABEL_48:
          v54 = v257;
          goto LABEL_49;
        }
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      length = (void (*)(uint64_t, uint64_t, uint64_t, int *))v261[1].length;
    }
    else
    {
      v168 = v261;
      length = (void (*)(uint64_t, uint64_t, uint64_t, int *))v261[1].length;
      v169 = v245;
    }
    v172 = v169;
    v173 = 1;
    goto LABEL_56;
  }
  v252 = (void (**)(char *, uint64_t))v42;
  ((void (*)(char *, uint64_t))v42[12])(v45, v41);
  swift_bridgeObjectRelease(*(const char **)v45);
  v89 = v253;
  SFAirDropReceive.Transfer.id.getter(v90);
  v91 = v266;
  swift_beginAccess(v266 + 48, v268, 32, 0);
  v92 = *(_QWORD *)(v91 + 48);
  v93 = v264;
  if (!*(_QWORD *)(v92 + 16) || (v94 = sub_10045C244((uint64_t)v89), (v95 & 1) == 0))
  {
    swift_endAccess(v268);
    ((void (*)(const __CFString *, uint64_t))v263[1])(v89, v93);
    v252[1](v258, v41);
LABEL_49:
    v182 = (char *)v59 + v54[20];
    v183 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v183 - 8) + 8))(v182, v183);
    v174 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    goto LABEL_50;
  }
  v256 = v41;
  v257 = (int *)(v91 + 48);
  v96 = v241;
  sub_10044A94C(*(_QWORD *)(v92 + 56) + v261[2].info * v94, v241);
  v97 = v244;
  sub_10044A990(v96, v244);
  swift_endAccess(v268);
  v253 = (const __CFString *)v263[1];
  ((void (*)(const __CFString *, uint64_t))v253)(v89, v93);
  v98 = v262;
  v99 = v97 + v262[7];
  v100 = v243;
  sub_10027ACA0(v99, v243);
  v101 = v254;
  v102 = v255;
  v103 = (*(uint64_t (**)(uint64_t, uint64_t, CFErrorRef))(v254 + 48))(v100, 1, v255);
  v104 = sub_10000D0F0(v100, &qword_1007C4330);
  if (v103 != 1)
  {
    v252[1](v258, v256);
LABEL_70:
    sub_10044A9D4(v97);
    goto LABEL_49;
  }
  v263 = v59;
  v105 = v239;
  Date.init()(v104);
  sub_10000D0F0(v99, &qword_1007C4330);
  (*(void (**)(uint64_t, char *, CFErrorRef))(v101 + 16))(v99, v105, v102);
  (*(void (**)(uint64_t, _QWORD, uint64_t, CFErrorRef))(v101 + 56))(v99, 0, 1, v102);
  v106 = Date.timeIntervalSince(_:)(v97);
  v107 = v98[5];
  v108 = (double)*(uint64_t *)(v97 + v107);
  v109 = v108 / v106;
  v110 = String._bridgeToObjectiveC()();
  v111 = String._bridgeToObjectiveC()();
  v112 = objc_msgSend(*(id *)(v91 + 16), "discoverableLevel");
  *(_QWORD *)&v113 = swift_beginAccess(v91 + 32, v268, 0, 0).n128_u64[0];
  v114 = *(const char **)(v91 + 32);
  v115 = swift_bridgeObjectRetain(v114, v113);
  v116 = sub_100446194(v115);
  *(_QWORD *)&v117 = swift_bridgeObjectRelease(v114).n128_u64[0];
  v118 = *(_QWORD *)(v116 + 16);
  if (v118)
  {
    v119 = 0;
    v120 = v118 - 1;
    v121 = 1;
    while (1)
    {
      while ((v121 & 1) == 0)
      {
        if (v120 == v119)
        {
          swift_bridgeObjectRelease((const char *)v116, v117);
          goto LABEL_65;
        }
        v121 = 0;
        ++v119;
      }
      v121 = *(_BYTE *)(v116 + v119 + 32);
      if (v120 == v119)
        break;
      ++v119;
    }
    swift_bridgeObjectRelease((const char *)v116, v117);
    if ((v121 & 1) != 0)
      goto LABEL_63;
LABEL_65:
    v209 = 0;
  }
  else
  {
    swift_bridgeObjectRelease((const char *)v116, v117);
LABEL_63:
    v209 = 1;
  }
  v210 = (const char *)sub_10021E5F8((uint64_t)_swiftEmptyArrayStorage);
  v211 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v210);
  sub_1000443E0(v110, v111, 0, (uint64_t)v112, v209, v211, v109, v108);

  v212 = *(_QWORD *)(v97 + v262[6]);
  if (v212 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_77;
  v59 = v263;
  if (v212 > 0x7FFFFFFF)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  sub_100044AF8(0, v212);
  v213 = (uint64_t)v259;
  v215 = SFAirDropReceive.Transfer.id.getter(v214);
  v216 = v246;
  SFAirDrop.TransferIdentifier.id.getter(v215);
  ((void (*)(uint64_t, uint64_t))v253)(v213, v264);
  v217 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v247 + 8))(v216, v248);
  v97 = v244;
  sub_100045470((uint64_t)CFSTR("Receive"), (uint64_t)CFSTR("Stop"), v217, 0, (double)*(uint64_t *)(v244 + v107));

  SFAirDropReceive.Transfer.id.getter(v218);
  v219 = v260;
  sub_10044A94C(v97, v260);
  ((void (*)(uint64_t, _QWORD, uint64_t, int *))v261[1].length)(v219, 0, 1, v262);
  swift_beginAccess(v257, v267, 33, 0);
  sub_100394F28(v219, v213);
  swift_endAccess(v267);
  (*(void (**)(char *, CFErrorRef))(v254 + 8))(v239, v255);
  v252[1](v258, v256);
  v220 = *(_QWORD *)(v266 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
  v206 = __OFADD__(v220, 1);
  v221 = v220 + 1;
  if (!v206)
  {
    *(_QWORD *)(v266 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted) = v221;
    goto LABEL_70;
  }
LABEL_79:
  __break(1u);
}

uint64_t sub_1004491F4(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  const char **v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  const char *v11;
  double v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  double v19;
  double v20;
  char isUniquelyReferenced_nonNull_native;
  const char *v22;
  double v23;
  const char *v25;
  _BYTE v26[24];
  const char *v27;

  v2 = v1;
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID];
  v4 = *(const char **)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
  v6 = (const char **)(v1 + 32);
  *(_QWORD *)&v7 = swift_beginAccess(v1 + 32, v26, 32, 0).n128_u64[0];
  v8 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(v4, v7);
    v9 = sub_10045C200(v5, (uint64_t)v4);
    if ((v10 & 1) != 0)
    {
      v11 = *(const char **)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_endAccess(v26);
      *(_QWORD *)&v12 = swift_bridgeObjectRetain(v11).n128_u64[0];
      swift_bridgeObjectRelease(v4, v12);
      goto LABEL_6;
    }
    swift_bridgeObjectRelease(v4);
  }
  swift_endAccess(v26);
  v11 = (const char *)_swiftEmptyArrayStorage;
LABEL_6:
  v27 = v11;
  v13 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v15 = *(_QWORD *)(((unint64_t)v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v14 = *(_QWORD *)(((unint64_t)v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v15 >= v14 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
  v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
  specialized Array._endMutation()(v16);
  v17 = v27;
  if (!*((_QWORD *)*v6 + 2))
  {
    v18 = *(const char **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v27;
    *(_QWORD *)&v19 = swift_bridgeObjectRetain(v17).n128_u64[0];
    swift_bridgeObjectRelease(v18, v19);
  }
  *(_QWORD *)&v20 = swift_beginAccess(v6, v26, 33, 0).n128_u64[0];
  swift_bridgeObjectRetain(v4, v20);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v25 = *v6;
  *v6 = (const char *)0x8000000000000000;
  sub_10046CE54((uint64_t)v17, v5, v4, isUniquelyReferenced_nonNull_native);
  v22 = *v6;
  *v6 = v25;
  *(_QWORD *)&v23 = swift_bridgeObjectRelease(v4).n128_u64[0];
  swift_bridgeObjectRelease(v22, v23);
  return swift_endAccess(v26);
}

void sub_1004493B4(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  double v27;
  char isUniquelyReferenced_nonNull_native;
  const char *v29;
  double v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  double v52;
  uint64_t v53;
  char *v54;
  char *v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  double v62;
  double v63;
  void (*v64)(char *, uint64_t);
  double v65;
  const char *v66;
  __CFString *v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  unint64_t v82;
  uint64_t v83;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007C4330);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v75 - v11;
  v14 = *(_QWORD *)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID];
  v13 = *(const char **)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
  v15 = (uint64_t *)(v1 + 32);
  *(_QWORD *)&v16 = swift_beginAccess(v1 + 32, v81, 32, 0).n128_u64[0];
  v17 = *(_QWORD *)(v1 + 32);
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_13;
  swift_bridgeObjectRetain(v13, v16);
  v18 = sub_10045C200(v14, (uint64_t)v13);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease(v13);
LABEL_13:
    swift_endAccess(v81);
    if (qword_1007B4108 != -1)
      swift_once(&qword_1007B4108, sub_100449E18);
    v31 = type metadata accessor for Logger(0);
    sub_100221DF8(v31, (uint64_t)qword_1007C0FA0);
    v32 = a1;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (!os_log_type_enabled(v33, v34))
    {

      return;
    }
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v81[0] = v36;
    *(_DWORD *)v35 = 136315138;
    swift_bridgeObjectRetain(v13);
    v82 = sub_100228BD8(v14, (unint64_t)v13, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 4);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "No existing clients for bundleID %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v37 = v35;
    goto LABEL_17;
  }
  v76 = v4;
  v77 = v2;
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
  v82 = v20;
  swift_endAccess(v81);
  swift_bridgeObjectRetain_n(v20, 2);
  swift_bridgeObjectRelease(v13);
  v21 = a1;
  v22 = sub_10044AA10(v20, (uint64_t)v21);
  v24 = v23;

  if ((v24 & 1) != 0)
  {
    swift_bridgeObjectRelease((const char *)v20);
    if (qword_1007B4108 != -1)
      swift_once(&qword_1007B4108, sub_100449E18);
    v38 = type metadata accessor for Logger(0);
    sub_100221DF8(v38, (uint64_t)qword_1007C0FA0);
    v39 = v21;
    v33 = Logger.logObject.getter(v39);
    v40 = static os_log_type_t.error.getter(v33);
    if (!os_log_type_enabled(v33, v40))
    {

      swift_bridgeObjectRelease((const char *)v82);
      return;
    }
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    *(_DWORD *)v41 = 136315138;
    v81[0] = v42;
    v43 = type metadata accessor for UUID(0);
    v44 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    v47 = (const char *)v46;
    v79 = sub_100228BD8(v45, v46, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v41 + 4);
    swift_bridgeObjectRelease(v47);
    v48 = (const char *)v82;

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v33, v40, "No existing client for id %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v37 = v41;
LABEL_17:
    swift_slowDealloc(v37, -1, -1);

    return;
  }
  if ((v20 & 0xC000000000000001) == 0)
  {
    if (v22 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v22 < *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v25 = (char *)*(id *)(v20 + 8 * v22 + 32);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_27;
  }
  v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
LABEL_8:
  v24 = v25;
  swift_bridgeObjectRelease((const char *)v20);

  v22 = v82;
  if (!(v82 >> 62))
  {
    v26 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26)
      goto LABEL_10;
LABEL_31:
    *(_QWORD *)&v27 = swift_beginAccess(v15, v81, 33, 0).n128_u64[0];
    goto LABEL_32;
  }
LABEL_27:
  if (v22 < 0)
    v49 = v22;
  else
    v49 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v22);
  v26 = _CocoaArrayWrapper.endIndex.getter(v49);
  swift_bridgeObjectRelease((const char *)v22);
  if (!v26)
    goto LABEL_31;
LABEL_10:
  swift_bridgeObjectRetain((const char *)v22);
  *(_QWORD *)&v27 = swift_beginAccess(v15, v81, 33, 0).n128_u64[0];
  if (v22)
  {
    swift_bridgeObjectRetain(v13, v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v79 = *v15;
    *v15 = 0x8000000000000000;
    sub_10046CE54(v22, v14, v13, isUniquelyReferenced_nonNull_native);
    v29 = (const char *)*v15;
    *v15 = v79;
    *(_QWORD *)&v30 = swift_bridgeObjectRelease(v13).n128_u64[0];
    swift_bridgeObjectRelease(v29, v30);
    swift_endAccess(v81);
LABEL_33:
    swift_bridgeObjectRelease((const char *)v22);
LABEL_55:
    sub_100449F6C();

    return;
  }
LABEL_32:
  swift_bridgeObjectRetain(v13, v27);
  v50 = v26;
  v51 = (const char *)sub_10026AE40(v14, (uint64_t)v13);
  *(_QWORD *)&v52 = swift_bridgeObjectRelease(v13).n128_u64[0];
  swift_bridgeObjectRelease(v51, v52);
  v53 = swift_endAccess(v81);
  if (v50)
    goto LABEL_33;
  v54 = v24;
  v55 = &v24[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_startTime];
  v56 = Date.timeIntervalSinceNow.getter(v53);
  v57 = v77 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
  swift_beginAccess(v77 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate, v81, 0, 0);
  sub_10027ACA0(v57, (uint64_t)v12);
  v58 = v78;
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  v60 = v76;
  v61 = v59(v12, 1, v76);
  sub_10000D0F0((uint64_t)v12, &qword_1007C4330);
  if (v61 == 1)
  {
    swift_bridgeObjectRelease((const char *)v82);
    v62 = 0.0;
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v6, v55, v60);
  sub_10027ACA0(v57, (uint64_t)v10);
  if (v59(v10, 1, v60) != 1)
  {
    swift_bridgeObjectRelease((const char *)v82);
    v63 = Date.timeIntervalSince(_:)(v10);
    v64 = *(void (**)(char *, uint64_t))(v58 + 8);
    v64(v6, v60);
    v64(v10, v60);
    v62 = v63 * -1000.0;
LABEL_38:
    if (v62 > 0.0)
      v65 = v62;
    else
      v65 = 0.0;
    v66 = *(const char **)&v54[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain(v66);
    v67 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v66);
    v69 = Date.timeIntervalSince1970.getter(v68);
    if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) != 0)
    {
      if (v69 > -1.0)
      {
        if (v69 < 1.84467441e19)
        {
          v70 = *(_QWORD *)(v77
                          + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount);
          if (v70 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v70 <= 0x7FFFFFFF)
            {
              v71 = *(_QWORD *)(v77
                              + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount);
              if (v71 >= (uint64_t)0xFFFFFFFF80000000)
              {
                if (v71 <= 0x7FFFFFFF)
                {
                  v72 = *(_QWORD *)(v77
                                  + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
                  if (v72 >= (uint64_t)0xFFFFFFFF80000000)
                  {
                    if (v72 <= 0x7FFFFFFF)
                    {
                      v73 = *(_QWORD *)(v77
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
                      if (v73 >= (uint64_t)0xFFFFFFFF80000000)
                      {
                        if (v73 <= 0x7FFFFFFF)
                        {
                          v74 = (uint64_t)objc_msgSend(*(id *)(v77 + 16), "discoverableLevel");
                          if (v74 >= (uint64_t)0xFFFFFFFF80000000)
                          {
                            if (v74 <= 0x7FFFFFFF)
                            {
                              sub_100044F90(0, 0, v67, (unint64_t)v69, v70, v71, v72, v73, v56 * -1000.0, v65, v74);

                              v24 = v54;
                              goto LABEL_55;
                            }
                            goto LABEL_68;
                          }
LABEL_67:
                          __break(1u);
LABEL_68:
                          __break(1u);
                          goto LABEL_69;
                        }
LABEL_66:
                        __break(1u);
                        goto LABEL_67;
                      }
LABEL_65:
                      __break(1u);
                      goto LABEL_66;
                    }
LABEL_64:
                    __break(1u);
                    goto LABEL_65;
                  }
LABEL_63:
                  __break(1u);
                  goto LABEL_64;
                }
LABEL_62:
                __break(1u);
                goto LABEL_63;
              }
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
LABEL_69:
  __break(1u);
}

uint64_t sub_100449C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = sub_100008384(&qword_1007C4330);
  v4 = __chkstk_darwin(v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v16[-v7];
  v9 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate, v17, 0, 0);
  sub_10027ACA0(v9, (uint64_t)v6);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10);
  v13 = sub_10000D0F0((uint64_t)v6, &qword_1007C4330);
  if (v12 == 1)
  {
    Date.init()(v13);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    sub_10027ACA0(v9, (uint64_t)v8);
  }
  swift_beginAccess(v9, v16, 33, 0);
  sub_1002D4998((uint64_t)v8, v9);
  result = swift_endAccess(v16);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount) = a1;
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount);
  if (v15 <= a1)
    v15 = a1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount) = v15;
  return result;
}

uint64_t sub_100449E18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C0FA0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C0FA0);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

char *sub_100449EA8(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t, uint64_t);

  *((_QWORD *)v1 + 3) = 0;
  *((_QWORD *)v1 + 4) = &_swiftEmptyDictionarySingleton;
  *((_QWORD *)v1 + 5) = &_swiftEmptyDictionarySingleton;
  *((_QWORD *)v1 + 6) = &_swiftEmptyDictionarySingleton;
  v3 = &v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate];
  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  *(_QWORD *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted] = 0;
  v5(&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate], 1, 1, v4);
  *((_QWORD *)v1 + 2) = a1;
  return v1;
}

__n128 sub_100449F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _BYTE v8[24];
  _BYTE v9[24];

  v1 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result.n128_u64[0] = swift_beginAccess(v0 + 32, v9, 0, 0).n128_u64[0];
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount) = 0;
    *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount) = 0;
    *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = 0;
    *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted) = 0;
    v5 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    v6 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
    swift_beginAccess(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate, v8, 33, 0);
    sub_1002D4998((uint64_t)v3, v6);
    swift_endAccess(v8);
    v7 = *(const char **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = 0;
    return swift_bridgeObjectRelease(v7);
  }
  return result;
}

uint64_t sub_10044A080()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;

  *(_QWORD *)&v1 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 24)).n128_u64[0];
  *(_QWORD *)&v2 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 32), v1).n128_u64[0];
  *(_QWORD *)&v3 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 40), v2).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(v0 + 48), v3);
  sub_10000D0F0(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate, &qword_1007C4330);
  sub_10000D0F0(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate, &qword_1007C4330);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10044A100()
{
  return type metadata accessor for SDAirDropLegacySessionLogger(0);
}

uint64_t type metadata accessor for SDAirDropLegacySessionLogger(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C1010, (uint64_t)&nominal type descriptor for SDAirDropLegacySessionLogger);
}

void sub_10044A11C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10023EB48(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = (char *)&value witness table for Builtin.Int64 + 64;
    v7 = (char *)&value witness table for Builtin.Int64 + 64;
    v8 = (char *)&value witness table for Builtin.Int64 + 64;
    v9 = (char *)&value witness table for Builtin.Int64 + 64;
    v10 = v5;
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

uint64_t *sub_10044A1C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    v11 = a3[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7))
    {
      v14 = sub_100008384(&qword_1007C4330);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v12, (uint64_t *)v13, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10044A2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v6 = a1 + *(int *)(a2 + 28);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *sub_10044A368(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
  {
    v13 = sub_100008384(&qword_1007C4330);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10044A448(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100008384(&qword_1007C4330);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *sub_10044A578(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
  {
    v13 = sub_100008384(&qword_1007C4330);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10044A658(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t (*v13)(const void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v14 = v13(&a1[v10], 1, v6);
  v15 = v13(v12, 1, v6);
  if (!v14)
  {
    if (!v15)
    {
      v8(v11, v12, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100008384(&qword_1007C4330);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  return a1;
}

uint64_t sub_10044A784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10044A790);
}

uint64_t sub_10044A790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100008384(&qword_1007C4330);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10044A808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044A814);
}

uint64_t sub_10044A814(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100008384(&qword_1007C4330);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SDAirDropLegacySessionLogger.Transfer(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C1140, (uint64_t)&nominal type descriptor for SDAirDropLegacySessionLogger.Transfer);
}

void sub_10044A8A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10023EB48(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for SDAirDropLegacySessionLogger.Session()
{
  return &type metadata for SDAirDropLegacySessionLogger.Session;
}

uint64_t sub_10044A94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10044A990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10044A9D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10044AA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
  {
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
    v5 = 0;
    if (!v4)
      return v5;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = 0;
    if (!v4)
      return v5;
  }
  a2 += OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_id;
  while (1)
  {
    v6 = (a1 & 0xC000000000000001) != 0
       ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1)
       : (char *)*(id *)(a1 + 8 * v5 + 32);
    v7 = v6;
    v8 = static UUID.== infix(_:_:)(&v6[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_id], a2);

    if ((v8 & 1) != 0)
      return v5;
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v9 == v4)
      return 0;
  }
}

uint64_t sub_10044AB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1180);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1180);
  if (qword_1007B3EA8 != -1)
    swift_once(&qword_1007B3EA8, sub_1002E9FB8);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D82C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10044ABB4()
{
  void *v0;
  NSString v1;
  unsigned int v2;
  NSString v4;
  unsigned int v5;
  NSString v6;
  unsigned int v7;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  if (!v2 || (sub_10044ACAC() & 1) != 0)
    return 1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v0, "BOOLForKey:", v4);

  if (!v5 || (sub_10044ADDC() & 1) == 0)
    return 0;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v0, "BOOLForKey:", v6);

  return v7 ^ 1;
}

uint64_t sub_10044ACAC()
{
  void *v0;
  NSString v1;
  unsigned int v2;
  NSString v3;
  uint64_t v4;
  NSString v6;
  unsigned int v7;
  NSString v8;
  unsigned int v9;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  if (!v2)
    return 0;
  v3 = String._bridgeToObjectiveC()();
  v4 = (uint64_t)objc_msgSend(v0, "integerForKey:", v3);

  if (v4 < 2)
    return 1;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v0, "BOOLForKey:", v6);

  if (!v7 || (sub_10044ADDC() & 1) == 0)
    return 0;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v0, "BOOLForKey:", v8);

  return v9 ^ 1;
}

uint64_t sub_10044ADDC()
{
  void *v0;
  void *v1;
  NSString v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)();
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  NSString v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  __int128 v27;
  __int128 v28;
  uint64_t (*v29)();
  uint64_t v30;

  v1 = v0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "valueForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(&v27, v3);
    swift_unknownObjectRelease(v3);
    sub_10035BE24((uint64_t)&v27);
LABEL_5:
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v1, "BOOLForKey:", v6);

    return (uint64_t)v7;
  }
  v27 = 0u;
  v28 = 0u;
  sub_10035BE24((uint64_t)&v27);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v0, "valueForKey:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v27, v5);
    swift_unknownObjectRelease(v5);
    sub_10035BE24((uint64_t)&v27);
    goto LABEL_5;
  }
  v27 = 0u;
  v28 = 0u;
  sub_10035BE24((uint64_t)&v27);
  if (qword_1007B4110 != -1)
    swift_once(&qword_1007B4110, sub_10044AB24);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100221DF8(v9, (uint64_t)qword_1007C1180);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Requesting value of PKTextInputSettings.supportedKeyboardLocaleExists on main thread...", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    sub_10044B208();
    v14 = 0;
    v15 = 0;
LABEL_14:
    v22 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v1, "BOOLForKey:", v22);

    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 67109120;
      LODWORD(v27) = (_DWORD)v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v26 + 4);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received value of PKTextInputSettings.supportedKeyboardLocaleExists: %{BOOL}d", v26, 8u);
      swift_slowDealloc(v26, -1, -1);
    }

    sub_1002845F4((uint64_t)v14, v15);
    return (uint64_t)v7;
  }
  v16 = sub_1002741DC();
  v17 = static OS_dispatch_queue.main.getter(v16);
  v15 = swift_allocObject(&unk_100729010, 24, 7);
  *(_QWORD *)(v15 + 16) = v1;
  v18 = swift_allocObject(&unk_100729038, 32, 7);
  v14 = sub_10044C044;
  *(_QWORD *)(v18 + 16) = sub_10044C044;
  *(_QWORD *)(v18 + 24) = v15;
  v29 = sub_10044C074;
  v30 = v18;
  *(_QWORD *)&v27 = _NSConcreteStackBlock;
  *((_QWORD *)&v27 + 1) = 1107296256;
  *(_QWORD *)&v28 = sub_1005477CC;
  *((_QWORD *)&v28 + 1) = &unk_100729050;
  v19 = _Block_copy(&v27);
  v20 = v30;
  v21 = v1;
  swift_retain();
  swift_release(v20);
  dispatch_sync(v17, v19);

  _Block_release(v19);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v18, "", 87, 67, 29, 1);
  result = swift_release(v18);
  if ((v17 & 1) == 0)
    goto LABEL_14;
  __break(1u);
  return result;
}

void sub_10044B208()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  id v8;
  id v9;
  NSString v10;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1002741DC();
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    v8 = objc_msgSend((id)objc_opt_self(PKTextInputSettings), "sharedSettings");
    v9 = objc_msgSend(v8, "supportedKeyboardLocaleExists");

    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setBool:forKey:", v9, v10);

  }
  else
  {
    __break(1u);
  }
}

void sub_10044B338(uint64_t a1)
{
  void *v1;
  NSString v3;
  id v4;
  NSString v5;
  id v6;
  NSString v7;
  id v8;

  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setInteger:forKey:", a1, v3);

  v4 = objc_allocWithZone((Class)NSUserDefaults);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithSuiteName:", v5);

  if (v6)
  {
    v8 = v6;
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setInteger:forKey:", a1, v7);

  }
}

void sub_10044B468(char a1)
{
  sub_10044B514(a1);
}

void sub_10044B4A0(char a1)
{
  sub_10044B514(a1);
}

void sub_10044B4D8(char a1)
{
  sub_10044B514(a1);
}

void sub_10044B514(char a1)
{
  void *v1;
  void *v2;
  NSString v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  NSString v9;
  id v10;

  v2 = v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = a1 & 1;
  objc_msgSend(v2, "setBool:forKey:", v5, v4);

  v6 = objc_allocWithZone((Class)NSUserDefaults);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithSuiteName:", v7);

  if (v8)
  {
    v10 = v8;
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setBool:forKey:", v5, v9);

  }
}

double sub_10044B630()
{
  void *v0;
  NSString v1;
  id v2;
  NSString v3;
  double v4;
  double v5;
  _OWORD v7[2];

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v7, v2);
    swift_unknownObjectRelease(v2);
    sub_10035BE24((uint64_t)v7);
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "doubleForKey:", v3);
    v5 = v4;

  }
  else
  {
    memset(v7, 0, sizeof(v7));
    sub_10035BE24((uint64_t)v7);
    return 1.5;
  }
  return v5;
}

void sub_10044B714()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  unsigned int v8;
  id v9;

  v1 = v0;
  if (qword_1007B4110 != -1)
    swift_once(&qword_1007B4110, sub_10044AB24);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C1180);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "setting Last Seen UI to Current", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_10044B514(1);
  sub_10044B338(2);
  sub_10044B514(0);
  v7 = objc_msgSend((id)objc_opt_self(PKTextInputSettings), "sharedSettings");
  v8 = objc_msgSend(v7, "supportedKeyboardLocaleExists");

  if (v8)
    sub_10044B514(1);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "removeObjectForKey:", v9);

}

void sub_10044B918()
{
  void *v0;
  NSString v1;
  NSString v2;
  NSString v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  NSString v11;
  NSString v12;
  NSString v13;
  id v14;

  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v1);

  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v2);

  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v3);

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v4);

  v5 = objc_allocWithZone((Class)NSUserDefaults);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "initWithSuiteName:", v6);

  if (v7)
  {
    v8 = v7;
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "removeObjectForKey:", v9);

    v10 = v8;
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "removeObjectForKey:", v11);

    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "removeObjectForKey:", v12);

    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "removeObjectForKey:", v13);

  }
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v14);

}

void sub_10044BB8C()
{
  void *v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  id v19;
  NSString v20;
  id v21;
  NSString v22;
  NSString v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  NSString v28;
  __int128 v29;
  __int128 v30;

  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "removeObjectForKey:", v1);

  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v0, "objectForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(&v29, v6);
    swift_unknownObjectRelease(v6);
    sub_10035BE24((uint64_t)&v29);
    if (v4)
    {
      v7 = v4;
      v8 = String._bridgeToObjectiveC()();
      v9 = objc_msgSend(v0, "BOOLForKey:", v8);

      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setBool:forKey:", v9, v10);

    }
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    sub_10035BE24((uint64_t)&v29);
  }
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v0, "objectForKey:", v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(&v29, v12);
    swift_unknownObjectRelease(v12);
    sub_10035BE24((uint64_t)&v29);
    if (v4)
    {
      v13 = v4;
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(v0, "integerForKey:", v14);

      v16 = String._bridgeToObjectiveC()();
      objc_msgSend(v13, "setInteger:forKey:", v15, v16);

    }
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    sub_10035BE24((uint64_t)&v29);
  }
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v0, "objectForKey:", v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(&v29, v18);
    swift_unknownObjectRelease(v18);
    sub_10035BE24((uint64_t)&v29);
    if (v4)
    {
      v19 = v4;
      v20 = String._bridgeToObjectiveC()();
      v21 = objc_msgSend(v0, "BOOLForKey:", v20);

      v22 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "setBool:forKey:", v21, v22);

    }
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    sub_10035BE24((uint64_t)&v29);
  }
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v0, "objectForKey:", v23);

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)(&v29, v24);
    swift_unknownObjectRelease(v24);
    sub_10035BE24((uint64_t)&v29);
    if (v4)
    {
      v25 = v4;
      v26 = String._bridgeToObjectiveC()();
      v27 = objc_msgSend(v0, "BOOLForKey:", v26);

      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v25, "setBool:forKey:", v27, v28);

    }
  }
  else
  {
    v29 = 0u;
    v30 = 0u;

    sub_10035BE24((uint64_t)&v29);
  }
}

uint64_t sub_10044C020()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10044C044()
{
  sub_10044B208();
}

uint64_t sub_10044C064()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10044C074()
{
  uint64_t v0;

  return sub_1005477AC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10044C07C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10044C08C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10044C094(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t *v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  const char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  const char *v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(const void *, uint64_t, uint64_t, __n128);
  double v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  const char *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(const void *, uint64_t, uint64_t, __n128);
  double v66;
  __n128 v67;
  uint64_t v68;
  const char *v69;
  _OWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  _OWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  _OWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  double v104;
  int *v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  const char *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  const char *v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  _OWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  _OWORD *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  const char *v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  const char *v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  const char *v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  const char *v180;
  uint64_t v181;
  unint64_t v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  const char *v215;
  uint64_t *v216;
  uint64_t v217;
  void *__dst;
  void *__dsta;
  const char *__dstb;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain(v10);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = _s12HelloRequestVMa(0);
        *(_DWORD *)(a1 + *(int *)(v9 + 20)) = *(_DWORD *)(a2 + *(int *)(v9 + 20));
        *(_BYTE *)(a1 + *(int *)(v9 + 24)) = *(_BYTE *)(a2 + *(int *)(v9 + 24));
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 2u:
        v12 = *(_QWORD *)(a2 + 8);
        if (v12 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v81 = *(_QWORD *)a2;
          sub_10022E4A8(v81, v12);
          *(_QWORD *)a1 = v81;
          *(_QWORD *)(a1 + 8) = v12;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v13 = *(_QWORD *)(a2 + 8);
        if (v13 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v82 = *(_QWORD *)a2;
          sub_10022E4A8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
          *(_QWORD *)a1 = v82;
          *(_QWORD *)(a1 + 8) = v13;
        }
        v83 = *(const char **)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v83;
        v84 = (_OWORD *)(a2 + 32);
        v85 = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain(v83);
        if (v85 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 32) = *v84;
        }
        else
        {
          v93 = *(_QWORD *)v84;
          sub_10022E4A8(v93, v85);
          *(_QWORD *)(a1 + 32) = v93;
          *(_QWORD *)(a1 + 40) = v85;
        }
        v94 = *(const char **)(a2 + 56);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = v94;
        v95 = (_OWORD *)(a2 + 64);
        v96 = *(_QWORD *)(a2 + 72);
        swift_bridgeObjectRetain(v94);
        if (v96 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *v95;
        }
        else
        {
          v97 = *(_QWORD *)v95;
          sub_10022E4A8(v97, v96);
          *(_QWORD *)(a1 + 64) = v97;
          *(_QWORD *)(a1 + 72) = v96;
        }
        v98 = (uint64_t *)(a2 + 80);
        v99 = *(_QWORD *)(a2 + 88);
        if (v99 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 80) = *(_OWORD *)v98;
        }
        else
        {
          v100 = *v98;
          sub_10022E4A8(*v98, *(_QWORD *)(a2 + 88));
          *(_QWORD *)(a1 + 80) = v100;
          *(_QWORD *)(a1 + 88) = v99;
        }
        v101 = *(const char **)(a2 + 104);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 104) = v101;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        v102 = *(_QWORD *)(a2 + 128);
        v103 = *(const char **)(a2 + 136);
        *(_QWORD *)(a1 + 128) = v102;
        *(_QWORD *)(a1 + 136) = v103;
        *(_QWORD *)&v104 = swift_bridgeObjectRetain(v101).n128_u64[0];
        swift_bridgeObjectRetain(v103, v104);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v14 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
        {
          v16 = sub_100008384((uint64_t *)&unk_1007B7E50);
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
        }
        v105 = (int *)_s10AskRequestVMa(0);
        v106 = v105[5];
        v107 = (void *)(a1 + v106);
        v108 = (const void *)(a2 + v106);
        v109 = type metadata accessor for SFAirDrop.TransferType(0);
        v110 = *(_QWORD *)(v109 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
        {
          v111 = sub_100008384(&qword_1007B7E48);
          memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v110 + 16))(v107, v108, v109);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
        }
        v153 = v105[6];
        v154 = a1 + v153;
        v155 = (uint64_t *)(a2 + v153);
        v156 = v155[1];
        if (v156 >> 60 == 15)
        {
          *(_OWORD *)v154 = *(_OWORD *)v155;
        }
        else
        {
          v157 = *v155;
          sub_10022E4A8(*v155, v155[1]);
          *(_QWORD *)v154 = v157;
          *(_QWORD *)(v154 + 8) = v156;
        }
        v158 = v105[7];
        v159 = (_QWORD *)(a1 + v158);
        v160 = (_QWORD *)(a2 + v158);
        v161 = (const char *)v160[1];
        *v159 = *v160;
        v159[1] = v161;
        v162 = v105[8];
        v163 = (_QWORD *)(a1 + v162);
        v164 = (_QWORD *)(a2 + v162);
        __dstb = (const char *)v164[1];
        *v163 = *v164;
        v163[1] = __dstb;
        v165 = v105[9];
        v166 = (_QWORD *)(a1 + v165);
        v167 = (_QWORD *)(a2 + v165);
        v168 = (const char *)v167[1];
        *v166 = *v167;
        v166[1] = v168;
        v169 = v105[10];
        v170 = (_QWORD *)(a1 + v169);
        v171 = (_QWORD *)(a2 + v169);
        v172 = (const char *)v171[1];
        *v170 = *v171;
        v170[1] = v172;
        v173 = v105[11];
        v174 = *(const char **)(a2 + v173);
        *(_QWORD *)(a1 + v173) = v174;
        v175 = v105[12];
        v176 = *(const char **)(a2 + v175);
        *(_QWORD *)(a1 + v175) = v176;
        v177 = v105[13];
        v178 = (_QWORD *)(a1 + v177);
        v179 = (_QWORD *)(a2 + v177);
        v180 = (const char *)v179[1];
        *v178 = *v179;
        v178[1] = v180;
        v181 = v105[14];
        v216 = (uint64_t *)(a2 + v181);
        v217 = a1 + v181;
        v182 = *(_QWORD *)(a2 + v181 + 8);
        *(_QWORD *)&v183 = swift_bridgeObjectRetain(v161).n128_u64[0];
        *(_QWORD *)&v184 = swift_bridgeObjectRetain(__dstb, v183).n128_u64[0];
        *(_QWORD *)&v185 = swift_bridgeObjectRetain(v168, v184).n128_u64[0];
        *(_QWORD *)&v186 = swift_bridgeObjectRetain(v172, v185).n128_u64[0];
        *(_QWORD *)&v187 = swift_bridgeObjectRetain(v174, v186).n128_u64[0];
        *(_QWORD *)&v188 = swift_bridgeObjectRetain(v176, v187).n128_u64[0];
        swift_bridgeObjectRetain(v180, v188);
        if (v182 >> 60 == 15)
        {
          *(_OWORD *)v217 = *(_OWORD *)v216;
        }
        else
        {
          v189 = *v216;
          sub_10022E4A8(*v216, v182);
          *(_QWORD *)v217 = v189;
          *(_QWORD *)(v217 + 8) = v182;
        }
        v190 = v105[15];
        v191 = a1 + v190;
        v192 = (uint64_t *)(a2 + v190);
        v193 = v192[1];
        if (v193 >> 60 == 15)
        {
          *(_OWORD *)v191 = *(_OWORD *)v192;
        }
        else
        {
          v194 = *v192;
          sub_10022E4A8(*v192, v192[1]);
          *(_QWORD *)v191 = v194;
          *(_QWORD *)(v191 + 8) = v193;
        }
        *(_BYTE *)(a1 + v105[16]) = *(_BYTE *)(a2 + v105[16]);
        v195 = v105[17];
        v196 = a1 + v195;
        v197 = (uint64_t *)(a2 + v195);
        v198 = v197[1];
        if (v198 >> 60 == 15)
        {
          *(_OWORD *)v196 = *(_OWORD *)v197;
        }
        else
        {
          v199 = *v197;
          sub_10022E4A8(*v197, v197[1]);
          *(_QWORD *)v196 = v199;
          *(_QWORD *)(v196 + 8) = v198;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v17 = *(const char **)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v17;
        v18 = *(const char **)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v18;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        v19 = *(const char **)(a2 + 48);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = v19;
        v20 = *(const char **)(a2 + 64);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 64) = v20;
        v21 = *(const char **)(a2 + 80);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 80) = v21;
        v22 = (uint64_t *)(a2 + 88);
        v23 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)&v24 = swift_bridgeObjectRetain(v17).n128_u64[0];
        *(_QWORD *)&v25 = swift_bridgeObjectRetain(v18, v24).n128_u64[0];
        *(_QWORD *)&v26 = swift_bridgeObjectRetain(v19, v25).n128_u64[0];
        *(_QWORD *)&v27 = swift_bridgeObjectRetain(v20, v26).n128_u64[0];
        swift_bridgeObjectRetain(v21, v27);
        if (v23 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v22;
        }
        else
        {
          v86 = *v22;
          sub_10022E4A8(*v22, v23);
          *(_QWORD *)(a1 + 88) = v86;
          *(_QWORD *)(a1 + 96) = v23;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v28 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(a2, 1, v28))
        {
          v30 = sub_100008384((uint64_t *)&unk_1007B7E50);
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 16))(a1, a2, v28);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(a1, 0, 1, v28);
        }
        v112 = (int *)_s13UploadRequestVMa(0);
        *(_QWORD *)(a1 + v112[5]) = *(_QWORD *)(a2 + v112[5]);
        v113 = v112[6];
        v114 = (_QWORD *)(a1 + v113);
        v115 = (_QWORD *)(a2 + v113);
        v116 = (const char *)v115[1];
        *v114 = *v115;
        v114[1] = v116;
        v117 = v112[7];
        v118 = a1 + v117;
        v119 = (_OWORD *)(a2 + v117);
        v120 = *(_QWORD *)(a2 + v117 + 8);
        swift_bridgeObjectRetain(v116);
        if (v120 >> 60 == 15)
        {
          *(_OWORD *)v118 = *v119;
        }
        else
        {
          v121 = *(_QWORD *)v119;
          sub_10022E4A8(v121, v120);
          *(_QWORD *)v118 = v121;
          *(_QWORD *)(v118 + 8) = v120;
        }
        *(_BYTE *)(a1 + v112[8]) = *(_BYTE *)(a2 + v112[8]);
        v122 = v112[9];
        v123 = (_QWORD *)(a1 + v122);
        v124 = (_QWORD *)(a2 + v122);
        v125 = (const char *)v124[1];
        *v123 = *v124;
        v123[1] = v125;
        v126 = v112[10];
        v127 = (_QWORD *)(a1 + v126);
        v128 = (_QWORD *)(a2 + v126);
        v129 = (const char *)v128[1];
        *v127 = *v128;
        v127[1] = v129;
        *(_QWORD *)&v130 = swift_bridgeObjectRetain(v125).n128_u64[0];
        swift_bridgeObjectRetain(v129, v130);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v32 = *(_QWORD *)a2;
        v31 = *(_QWORD *)(a2 + 8);
        sub_10022E4A8(v32, v31);
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v31;
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        v33 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
        v34 = (int *)_s15ExchangeRequestVMa(0);
        v35 = v34[5];
        v36 = (_QWORD *)(a1 + v35);
        v37 = (_QWORD *)(a2 + v35);
        v38 = (const char *)v37[1];
        *v36 = *v37;
        v36[1] = v38;
        v39 = v34[6];
        v40 = (_QWORD *)(a1 + v39);
        v41 = (_QWORD *)(a2 + v39);
        v42 = (const char *)v41[1];
        *v40 = *v41;
        v40[1] = v42;
        v43 = v34[7];
        __dst = (void *)(a1 + v43);
        v44 = (const void *)(a2 + v43);
        v45 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
        v46 = *(_QWORD *)(v45 - 8);
        v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v46 + 48);
        *(_QWORD *)&v48 = swift_bridgeObjectRetain(v38).n128_u64[0];
        v49 = swift_bridgeObjectRetain(v42, v48);
        if (v47(v44, 1, v45, v49))
        {
          v50 = sub_100008384(&qword_1007C11B0);
          memcpy(__dst, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(__dst, v44, v45);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
        }
        v131 = v34[8];
        v132 = a1 + v131;
        v133 = (uint64_t *)(a2 + v131);
        v134 = v133[1];
        if (v134 >> 60 == 15)
        {
          *(_OWORD *)v132 = *(_OWORD *)v133;
        }
        else
        {
          v135 = *v133;
          sub_10022E4A8(*v133, v133[1]);
          *(_QWORD *)v132 = v135;
          *(_QWORD *)(v132 + 8) = v134;
        }
        v136 = v34[9];
        v137 = a1 + v136;
        v138 = a2 + v136;
        if (*(_QWORD *)(a2 + v136 + 72))
        {
          v139 = *(const char **)(v138 + 8);
          *(_QWORD *)v137 = *(_QWORD *)v138;
          *(_QWORD *)(v137 + 8) = v139;
          v140 = (_OWORD *)(v138 + 16);
          v141 = *(_QWORD *)(v138 + 24);
          swift_bridgeObjectRetain(v139);
          if (v141 >> 60 == 15)
          {
            *(_OWORD *)(v137 + 16) = *v140;
          }
          else
          {
            v204 = *(_QWORD *)v140;
            sub_10022E4A8(v204, v141);
            *(_QWORD *)(v137 + 16) = v204;
            *(_QWORD *)(v137 + 24) = v141;
          }
          v205 = *(_QWORD *)(v138 + 32);
          v206 = *(_QWORD *)(v138 + 40);
          sub_10022E4A8(v205, v206);
          *(_QWORD *)(v137 + 32) = v205;
          *(_QWORD *)(v137 + 40) = v206;
          v207 = *(_QWORD *)(v138 + 48);
          v208 = *(_QWORD *)(v138 + 56);
          sub_10022E4A8(v207, v208);
          *(_QWORD *)(v137 + 48) = v207;
          *(_QWORD *)(v137 + 56) = v208;
          v209 = *(const char **)(v138 + 72);
          *(_QWORD *)(v137 + 64) = *(_QWORD *)(v138 + 64);
          *(_QWORD *)(v137 + 72) = v209;
          *(_QWORD *)(v137 + 80) = *(_QWORD *)(v138 + 80);
          swift_bridgeObjectRetain(v209);
        }
        else
        {
          v200 = *(_OWORD *)(v138 + 48);
          *(_OWORD *)(v137 + 32) = *(_OWORD *)(v138 + 32);
          *(_OWORD *)(v137 + 48) = v200;
          *(_OWORD *)(v137 + 64) = *(_OWORD *)(v138 + 64);
          *(_QWORD *)(v137 + 80) = *(_QWORD *)(v138 + 80);
          v201 = *(_OWORD *)(v138 + 16);
          *(_OWORD *)v137 = *(_OWORD *)v138;
          *(_OWORD *)(v137 + 16) = v201;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v51 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(a1, a2, v51);
        v52 = (int *)_s16ExchangeResponseVMa(0);
        v53 = v52[5];
        v54 = (_QWORD *)(a1 + v53);
        v55 = (_QWORD *)(a2 + v53);
        v56 = (const char *)v55[1];
        *v54 = *v55;
        v54[1] = v56;
        v57 = v52[6];
        v58 = (_QWORD *)(a1 + v57);
        v59 = (_QWORD *)(a2 + v57);
        v60 = (const char *)v59[1];
        *v58 = *v59;
        v58[1] = v60;
        v61 = v52[7];
        __dsta = (void *)(a1 + v61);
        v62 = (const void *)(a2 + v61);
        v63 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
        v64 = *(_QWORD *)(v63 - 8);
        v65 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v64 + 48);
        *(_QWORD *)&v66 = swift_bridgeObjectRetain(v56).n128_u64[0];
        v67 = swift_bridgeObjectRetain(v60, v66);
        if (v65(v62, 1, v63, v67))
        {
          v68 = sub_100008384(&qword_1007C11B0);
          memcpy(__dsta, v62, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(__dsta, v62, v63);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dsta, 0, 1, v63);
        }
        v142 = v52[8];
        v143 = a1 + v142;
        v144 = (uint64_t *)(a2 + v142);
        v145 = v144[1];
        if (v145 >> 60 == 15)
        {
          *(_OWORD *)v143 = *(_OWORD *)v144;
        }
        else
        {
          v146 = *v144;
          sub_10022E4A8(*v144, v144[1]);
          *(_QWORD *)v143 = v146;
          *(_QWORD *)(v143 + 8) = v145;
        }
        v147 = v52[9];
        v148 = a1 + v147;
        v149 = a2 + v147;
        if (*(_QWORD *)(a2 + v147 + 72))
        {
          v150 = *(const char **)(v149 + 8);
          *(_QWORD *)v148 = *(_QWORD *)v149;
          *(_QWORD *)(v148 + 8) = v150;
          v151 = (_OWORD *)(v149 + 16);
          v152 = *(_QWORD *)(v149 + 24);
          swift_bridgeObjectRetain(v150);
          if (v152 >> 60 == 15)
          {
            *(_OWORD *)(v148 + 16) = *v151;
          }
          else
          {
            v210 = *(_QWORD *)v151;
            sub_10022E4A8(v210, v152);
            *(_QWORD *)(v148 + 16) = v210;
            *(_QWORD *)(v148 + 24) = v152;
          }
          v211 = *(_QWORD *)(v149 + 32);
          v212 = *(_QWORD *)(v149 + 40);
          sub_10022E4A8(v211, v212);
          *(_QWORD *)(v148 + 32) = v211;
          *(_QWORD *)(v148 + 40) = v212;
          v213 = *(_QWORD *)(v149 + 48);
          v214 = *(_QWORD *)(v149 + 56);
          sub_10022E4A8(v213, v214);
          *(_QWORD *)(v148 + 48) = v213;
          *(_QWORD *)(v148 + 56) = v214;
          v215 = *(const char **)(v149 + 72);
          *(_QWORD *)(v148 + 64) = *(_QWORD *)(v149 + 64);
          *(_QWORD *)(v148 + 72) = v215;
          *(_QWORD *)(v148 + 80) = *(_QWORD *)(v149 + 80);
          swift_bridgeObjectRetain(v215);
        }
        else
        {
          v202 = *(_OWORD *)(v149 + 48);
          *(_OWORD *)(v148 + 32) = *(_OWORD *)(v149 + 32);
          *(_OWORD *)(v148 + 48) = v202;
          *(_OWORD *)(v148 + 64) = *(_OWORD *)(v149 + 64);
          *(_QWORD *)(v148 + 80) = *(_QWORD *)(v149 + 80);
          v203 = *(_OWORD *)(v149 + 16);
          *(_OWORD *)v148 = *(_OWORD *)v149;
          *(_OWORD *)(v148 + 16) = v203;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        v69 = *(const char **)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v69;
        v70 = (_OWORD *)(a2 + 16);
        v71 = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRetain(v69);
        if (v71 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 16) = *v70;
        }
        else
        {
          v87 = *(_QWORD *)v70;
          sub_10022E4A8(v87, v71);
          *(_QWORD *)(a1 + 16) = v87;
          *(_QWORD *)(a1 + 24) = v71;
        }
        v88 = *(_QWORD *)(a2 + 32);
        v89 = *(_QWORD *)(a2 + 40);
        sub_10022E4A8(v88, v89);
        *(_QWORD *)(a1 + 32) = v88;
        *(_QWORD *)(a1 + 40) = v89;
        v90 = *(_QWORD *)(a2 + 48);
        v91 = *(_QWORD *)(a2 + 56);
        sub_10022E4A8(v90, v91);
        *(_QWORD *)(a1 + 48) = v90;
        *(_QWORD *)(a1 + 56) = v91;
        v92 = *(const char **)(a2 + 72);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = v92;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        swift_bridgeObjectRetain(v92);
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 0xBu:
        v73 = *(_QWORD *)a2;
        v72 = *(_QWORD *)(a2 + 8);
        sub_10022E4A8(v73, v72);
        *(_QWORD *)a1 = v73;
        *(_QWORD *)(a1 + 8) = v72;
        swift_storeEnumTagMultiPayload(a1, a3, 11);
        break;
      case 0xCu:
        v74 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(a1, a2, v74);
        v75 = *(int *)(_s12ErrorRequestVMa(0) + 20);
        v76 = a1 + v75;
        v77 = a2 + v75;
        v78 = type metadata accessor for CodableError(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
        swift_storeEnumTagMultiPayload(a1, a3, 12);
        break;
      case 0xDu:
        v80 = *(_QWORD *)a2;
        v79 = *(_QWORD *)(a2 + 8);
        sub_10022E4A8(v80, v79);
        *(_QWORD *)a1 = v80;
        *(_QWORD *)(a1 + 8) = v79;
        swift_storeEnumTagMultiPayload(a1, a3, 13);
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_10044CD34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v5 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      goto LABEL_48;
    case 2u:
      v4 = *(_QWORD *)(v2 + 8);
      if (v4 >> 60 == 15)
        return;
      v3 = *(_QWORD *)v2;
      goto LABEL_3;
    case 3u:
      v6 = *(_QWORD *)(v2 + 8);
      if (v6 >> 60 != 15)
        sub_100225AB4(*(_QWORD *)v2, v6);
      swift_bridgeObjectRelease(*(const char **)(v2 + 24));
      v7 = *(_QWORD *)(v2 + 40);
      if (v7 >> 60 != 15)
        sub_100225AB4(*(_QWORD *)(v2 + 32), v7);
      swift_bridgeObjectRelease(*(const char **)(v2 + 56));
      v8 = *(_QWORD *)(v2 + 72);
      if (v8 >> 60 != 15)
        sub_100225AB4(*(_QWORD *)(v2 + 64), v8);
      v9 = *(_QWORD *)(v2 + 88);
      if (v9 >> 60 != 15)
        sub_100225AB4(*(_QWORD *)(v2 + 80), v9);
      v10 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + 104)).n128_u64[0];
      v11 = *(const char **)(v2 + 136);
      goto LABEL_45;
    case 4u:
      v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v13 = *(_QWORD *)(v12 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v2, 1, v12))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v12);
      v14 = (int *)_s10AskRequestVMa(0);
      v15 = v2 + v14[5];
      v16 = type metadata accessor for SFAirDrop.TransferType(0);
      v17 = *(_QWORD *)(v16 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      v18 = (uint64_t *)(v2 + v14[6]);
      v19 = v18[1];
      if (v19 >> 60 != 15)
        sub_100225AB4(*v18, v19);
      *(_QWORD *)&v20 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v14[7] + 8)).n128_u64[0];
      *(_QWORD *)&v21 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v14[8] + 8), v20).n128_u64[0];
      *(_QWORD *)&v22 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v14[9] + 8), v21).n128_u64[0];
      *(_QWORD *)&v23 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v14[10] + 8), v22).n128_u64[0];
      *(_QWORD *)&v24 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v14[11]), v23).n128_u64[0];
      *(_QWORD *)&v25 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v14[12]), v24).n128_u64[0];
      swift_bridgeObjectRelease(*(const char **)(v2 + v14[13] + 8), v25);
      v26 = (uint64_t *)(v2 + v14[14]);
      v27 = v26[1];
      if (v27 >> 60 != 15)
        sub_100225AB4(*v26, v27);
      v28 = (uint64_t *)(v2 + v14[15]);
      v29 = v28[1];
      if (v29 >> 60 != 15)
        sub_100225AB4(*v28, v29);
      v30 = (uint64_t *)(v2 + v14[17]);
      v4 = v30[1];
      if (v4 >> 60 == 15)
        return;
      v3 = *v30;
      goto LABEL_3;
    case 5u:
      *(_QWORD *)&v31 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + 8)).n128_u64[0];
      *(_QWORD *)&v32 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + 24), v31).n128_u64[0];
      *(_QWORD *)&v33 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + 48), v32).n128_u64[0];
      *(_QWORD *)&v34 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + 64), v33).n128_u64[0];
      swift_bridgeObjectRelease(*(const char **)(v2 + 80), v34);
      v4 = *(_QWORD *)(v2 + 96);
      if (v4 >> 60 == 15)
        return;
      v3 = *(_QWORD *)(v2 + 88);
LABEL_3:
      sub_100225AB4(v3, v4);
      return;
    case 6u:
      v35 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v36 = *(_QWORD *)(v35 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v2, 1, v35))
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v2, v35);
      v37 = (int *)_s13UploadRequestVMa(0);
      swift_bridgeObjectRelease(*(const char **)(v2 + v37[6] + 8));
      v38 = (uint64_t *)(v2 + v37[7]);
      v39 = v38[1];
      if (v39 >> 60 != 15)
        sub_100225AB4(*v38, v39);
      v10 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + v37[9] + 8)).n128_u64[0];
      v11 = *(const char **)(v2 + v37[10] + 8);
      goto LABEL_45;
    case 7u:
    case 0xBu:
    case 0xDu:
      v3 = *(_QWORD *)v2;
      v4 = *(_QWORD *)(v2 + 8);
      goto LABEL_3;
    case 8u:
      v40 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v2, v40);
      v41 = _s15ExchangeRequestVMa(0);
      goto LABEL_37;
    case 9u:
      v42 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v2, v42);
      v41 = _s16ExchangeResponseVMa(0);
LABEL_37:
      v43 = (int *)v41;
      *(_QWORD *)&v44 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v2 + *(int *)(v41 + 20) + 8)).n128_u64[0];
      swift_bridgeObjectRelease(*(const char **)(v2 + v43[6] + 8), v44);
      v45 = v2 + v43[7];
      v46 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
      v47 = *(_QWORD *)(v46 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
      v48 = (uint64_t *)(v2 + v43[8]);
      v49 = v48[1];
      if (v49 >> 60 != 15)
        sub_100225AB4(*v48, v49);
      v2 += v43[9];
      if (*(_QWORD *)(v2 + 72))
        goto LABEL_42;
      return;
    case 0xAu:
LABEL_42:
      swift_bridgeObjectRelease(*(const char **)(v2 + 8));
      v50 = *(_QWORD *)(v2 + 24);
      if (v50 >> 60 != 15)
        sub_100225AB4(*(_QWORD *)(v2 + 16), v50);
      sub_100225AB4(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
      sub_100225AB4(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
      v11 = *(const char **)(v2 + 72);
LABEL_45:
      swift_bridgeObjectRelease(v11, *(double *)&v10);
      break;
    case 0xCu:
      v51 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v2, v51);
      v2 += *(int *)(_s12ErrorRequestVMa(0) + 20);
      v5 = type metadata accessor for CodableError(0);
LABEL_48:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
      break;
    default:
      return;
  }
}

uint64_t sub_10044D204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(const void *, uint64_t, uint64_t, __n128);
  double v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  const char *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(const void *, uint64_t, uint64_t, __n128);
  double v67;
  __n128 v68;
  uint64_t v69;
  const char *v70;
  _OWORD *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  double v105;
  int *v106;
  uint64_t v107;
  void *v108;
  const void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  const char *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  const char *v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  _OWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  _OWORD *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  const char *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  const char *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  const char *v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  const char *v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  const char *v217;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = _s12HelloRequestVMa(0);
      *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
      *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_85;
    case 2u:
      v11 = *(_QWORD *)(a2 + 8);
      if (v11 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v82 = *(_QWORD *)a2;
        sub_10022E4A8(v82, v11);
        *(_QWORD *)a1 = v82;
        *(_QWORD *)(a1 + 8) = v11;
      }
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_85;
    case 3u:
      v12 = *(_QWORD *)(a2 + 8);
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v83 = *(_QWORD *)a2;
        sub_10022E4A8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        *(_QWORD *)a1 = v83;
        *(_QWORD *)(a1 + 8) = v12;
      }
      v84 = *(const char **)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v84;
      v85 = (uint64_t *)(a2 + 32);
      v86 = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain(v84);
      if (v86 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 32) = *(_OWORD *)v85;
      }
      else
      {
        v94 = *v85;
        sub_10022E4A8(*v85, v86);
        *(_QWORD *)(a1 + 32) = v94;
        *(_QWORD *)(a1 + 40) = v86;
      }
      v95 = *(const char **)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v95;
      v96 = (uint64_t *)(a2 + 64);
      v97 = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain(v95);
      if (v97 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v96;
      }
      else
      {
        v98 = *v96;
        sub_10022E4A8(*v96, v97);
        *(_QWORD *)(a1 + 64) = v98;
        *(_QWORD *)(a1 + 72) = v97;
      }
      v99 = (uint64_t *)(a2 + 80);
      v100 = *(_QWORD *)(a2 + 88);
      if (v100 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v99;
      }
      else
      {
        v101 = *v99;
        sub_10022E4A8(*v99, *(_QWORD *)(a2 + 88));
        *(_QWORD *)(a1 + 80) = v101;
        *(_QWORD *)(a1 + 88) = v100;
      }
      v102 = *(const char **)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v102;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      v103 = *(_QWORD *)(a2 + 128);
      v104 = *(const char **)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v103;
      *(_QWORD *)(a1 + 136) = v104;
      *(_QWORD *)&v105 = swift_bridgeObjectRetain(v102).n128_u64[0];
      swift_bridgeObjectRetain(v104, v105);
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_85;
    case 4u:
      v13 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
      {
        v15 = sub_100008384((uint64_t *)&unk_1007B7E50);
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a1, a2, v13);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
      }
      v106 = (int *)_s10AskRequestVMa(0);
      v107 = v106[5];
      v108 = (void *)(a1 + v107);
      v109 = (const void *)(a2 + v107);
      v110 = type metadata accessor for SFAirDrop.TransferType(0);
      v111 = *(_QWORD *)(v110 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
      {
        v112 = sub_100008384(&qword_1007B7E48);
        memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v111 + 16))(v108, v109, v110);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
      }
      v154 = v106[6];
      v155 = a1 + v154;
      v156 = (uint64_t *)(a2 + v154);
      v157 = v156[1];
      v223 = a3;
      if (v157 >> 60 == 15)
      {
        *(_OWORD *)v155 = *(_OWORD *)v156;
      }
      else
      {
        v158 = *v156;
        sub_10022E4A8(*v156, v157);
        *(_QWORD *)v155 = v158;
        *(_QWORD *)(v155 + 8) = v157;
      }
      v159 = v106[7];
      v160 = (_QWORD *)(a1 + v159);
      v161 = (_QWORD *)(a2 + v159);
      v162 = (const char *)v161[1];
      *v160 = *v161;
      v160[1] = v162;
      v163 = v106[8];
      v164 = (_QWORD *)(a1 + v163);
      v165 = (_QWORD *)(a2 + v163);
      v220 = (const char *)v165[1];
      *v164 = *v165;
      v164[1] = v220;
      v166 = v106[9];
      v167 = (_QWORD *)(a1 + v166);
      v168 = (_QWORD *)(a2 + v166);
      v169 = (const char *)v168[1];
      *v167 = *v168;
      v167[1] = v169;
      v170 = v106[10];
      v171 = (_QWORD *)(a1 + v170);
      v172 = (_QWORD *)(a2 + v170);
      v173 = (const char *)v172[1];
      *v171 = *v172;
      v171[1] = v173;
      v174 = v106[11];
      v175 = *(const char **)(a2 + v174);
      *(_QWORD *)(a1 + v174) = v175;
      v176 = v106[12];
      v177 = *(const char **)(a2 + v176);
      *(_QWORD *)(a1 + v176) = v177;
      v178 = v106[13];
      v179 = (_QWORD *)(a1 + v178);
      v180 = (_QWORD *)(a2 + v178);
      v181 = (const char *)v180[1];
      *v179 = *v180;
      v179[1] = v181;
      v182 = v106[14];
      v219 = a1 + v182;
      v183 = (uint64_t *)(a2 + v182);
      v184 = *(_QWORD *)(a2 + v182 + 8);
      *(_QWORD *)&v185 = swift_bridgeObjectRetain(v162).n128_u64[0];
      *(_QWORD *)&v186 = swift_bridgeObjectRetain(v220, v185).n128_u64[0];
      *(_QWORD *)&v187 = swift_bridgeObjectRetain(v169, v186).n128_u64[0];
      *(_QWORD *)&v188 = swift_bridgeObjectRetain(v173, v187).n128_u64[0];
      *(_QWORD *)&v189 = swift_bridgeObjectRetain(v175, v188).n128_u64[0];
      *(_QWORD *)&v190 = swift_bridgeObjectRetain(v177, v189).n128_u64[0];
      swift_bridgeObjectRetain(v181, v190);
      if (v184 >> 60 == 15)
      {
        *(_OWORD *)v219 = *(_OWORD *)v183;
      }
      else
      {
        v191 = *v183;
        sub_10022E4A8(*v183, v184);
        *(_QWORD *)v219 = v191;
        *(_QWORD *)(v219 + 8) = v184;
      }
      v192 = v106[15];
      v193 = a1 + v192;
      v194 = (uint64_t *)(a2 + v192);
      v195 = v194[1];
      if (v195 >> 60 == 15)
      {
        *(_OWORD *)v193 = *(_OWORD *)v194;
      }
      else
      {
        v196 = *v194;
        sub_10022E4A8(*v194, v194[1]);
        *(_QWORD *)v193 = v196;
        *(_QWORD *)(v193 + 8) = v195;
      }
      *(_BYTE *)(a1 + v106[16]) = *(_BYTE *)(a2 + v106[16]);
      v197 = v106[17];
      v198 = a1 + v197;
      v199 = (uint64_t *)(a2 + v197);
      v200 = v199[1];
      if (v200 >> 60 == 15)
      {
        *(_OWORD *)v198 = *(_OWORD *)v199;
      }
      else
      {
        v201 = *v199;
        sub_10022E4A8(*v199, v199[1]);
        *(_QWORD *)v198 = v201;
        *(_QWORD *)(v198 + 8) = v200;
      }
      v8 = a1;
      v9 = v223;
      v10 = 4;
      goto LABEL_85;
    case 5u:
      v16 = *(const char **)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v16;
      v17 = *(const char **)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v17;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v18 = *(const char **)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v18;
      v19 = *(const char **)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v19;
      v20 = *(const char **)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v20;
      v21 = (uint64_t *)(a2 + 88);
      v22 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)&v23 = swift_bridgeObjectRetain(v16).n128_u64[0];
      *(_QWORD *)&v24 = swift_bridgeObjectRetain(v17, v23).n128_u64[0];
      *(_QWORD *)&v25 = swift_bridgeObjectRetain(v18, v24).n128_u64[0];
      *(_QWORD *)&v26 = swift_bridgeObjectRetain(v19, v25).n128_u64[0];
      swift_bridgeObjectRetain(v20, v26);
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v21;
      }
      else
      {
        v87 = *v21;
        sub_10022E4A8(*v21, v22);
        *(_QWORD *)(a1 + 88) = v87;
        *(_QWORD *)(a1 + 96) = v22;
      }
      v8 = a1;
      v9 = a3;
      v10 = 5;
      goto LABEL_85;
    case 6u:
      v27 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(a2, 1, v27))
      {
        v29 = sub_100008384((uint64_t *)&unk_1007B7E50);
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, a2, v27);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
      }
      v113 = (int *)_s13UploadRequestVMa(0);
      *(_QWORD *)(a1 + v113[5]) = *(_QWORD *)(a2 + v113[5]);
      v114 = v113[6];
      v115 = (_QWORD *)(a1 + v114);
      v116 = (_QWORD *)(a2 + v114);
      v117 = (const char *)v116[1];
      *v115 = *v116;
      v115[1] = v117;
      v118 = v113[7];
      v119 = a1 + v118;
      v120 = (_OWORD *)(a2 + v118);
      v121 = *(_QWORD *)(a2 + v118 + 8);
      swift_bridgeObjectRetain(v117);
      if (v121 >> 60 == 15)
      {
        *(_OWORD *)v119 = *v120;
      }
      else
      {
        v122 = *(_QWORD *)v120;
        sub_10022E4A8(v122, v121);
        *(_QWORD *)v119 = v122;
        *(_QWORD *)(v119 + 8) = v121;
      }
      *(_BYTE *)(a1 + v113[8]) = *(_BYTE *)(a2 + v113[8]);
      v123 = v113[9];
      v124 = (_QWORD *)(a1 + v123);
      v125 = (_QWORD *)(a2 + v123);
      v126 = (const char *)v125[1];
      *v124 = *v125;
      v124[1] = v126;
      v127 = v113[10];
      v128 = (_QWORD *)(a1 + v127);
      v129 = (_QWORD *)(a2 + v127);
      v130 = (const char *)v129[1];
      *v128 = *v129;
      v128[1] = v130;
      *(_QWORD *)&v131 = swift_bridgeObjectRetain(v126).n128_u64[0];
      swift_bridgeObjectRetain(v130, v131);
      v8 = a1;
      v9 = a3;
      v10 = 6;
      goto LABEL_85;
    case 7u:
      v30 = *(_QWORD *)a2;
      v31 = *(_QWORD *)(a2 + 8);
      sub_10022E4A8(v30, v31);
      *(_QWORD *)a1 = v30;
      *(_QWORD *)(a1 + 8) = v31;
      v8 = a1;
      v9 = a3;
      v10 = 7;
      goto LABEL_85;
    case 8u:
      v221 = a3;
      v32 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(a1, a2, v32);
      v33 = (int *)_s15ExchangeRequestVMa(0);
      v34 = v33[5];
      v35 = (_QWORD *)(a1 + v34);
      v36 = (_QWORD *)(a2 + v34);
      v37 = (const char *)v36[1];
      *v35 = *v36;
      v35[1] = v37;
      v38 = v33[6];
      v39 = (_QWORD *)(a1 + v38);
      v40 = (_QWORD *)(a2 + v38);
      v41 = (const char *)v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = v33[7];
      v43 = (void *)(a1 + v42);
      v44 = (const void *)(a2 + v42);
      v45 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
      v46 = *(_QWORD *)(v45 - 8);
      v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v46 + 48);
      *(_QWORD *)&v48 = swift_bridgeObjectRetain(v37).n128_u64[0];
      v49 = swift_bridgeObjectRetain(v41, v48);
      if (v47(v44, 1, v45, v49))
      {
        v50 = sub_100008384(&qword_1007C11B0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(v43, v44, v45);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      v132 = v33[8];
      v133 = a1 + v132;
      v134 = (uint64_t *)(a2 + v132);
      v135 = v134[1];
      if (v135 >> 60 == 15)
      {
        *(_OWORD *)v133 = *(_OWORD *)v134;
      }
      else
      {
        v136 = *v134;
        sub_10022E4A8(*v134, v134[1]);
        *(_QWORD *)v133 = v136;
        *(_QWORD *)(v133 + 8) = v135;
      }
      v137 = v33[9];
      v138 = a1 + v137;
      v139 = a2 + v137;
      if (*(_QWORD *)(a2 + v137 + 72))
      {
        v140 = *(const char **)(v139 + 8);
        *(_QWORD *)v138 = *(_QWORD *)v139;
        *(_QWORD *)(v138 + 8) = v140;
        v141 = (_OWORD *)(v139 + 16);
        v142 = *(_QWORD *)(v139 + 24);
        swift_bridgeObjectRetain(v140);
        if (v142 >> 60 == 15)
        {
          *(_OWORD *)(v138 + 16) = *v141;
        }
        else
        {
          v206 = *(_QWORD *)v141;
          sub_10022E4A8(v206, v142);
          *(_QWORD *)(v138 + 16) = v206;
          *(_QWORD *)(v138 + 24) = v142;
        }
        v207 = *(_QWORD *)(v139 + 32);
        v208 = *(_QWORD *)(v139 + 40);
        sub_10022E4A8(v207, v208);
        *(_QWORD *)(v138 + 32) = v207;
        *(_QWORD *)(v138 + 40) = v208;
        v209 = *(_QWORD *)(v139 + 48);
        v210 = *(_QWORD *)(v139 + 56);
        sub_10022E4A8(v209, v210);
        *(_QWORD *)(v138 + 48) = v209;
        *(_QWORD *)(v138 + 56) = v210;
        v211 = *(const char **)(v139 + 72);
        *(_QWORD *)(v138 + 64) = *(_QWORD *)(v139 + 64);
        *(_QWORD *)(v138 + 72) = v211;
        *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
        swift_bridgeObjectRetain(v211);
      }
      else
      {
        v202 = *(_OWORD *)(v139 + 48);
        *(_OWORD *)(v138 + 32) = *(_OWORD *)(v139 + 32);
        *(_OWORD *)(v138 + 48) = v202;
        *(_OWORD *)(v138 + 64) = *(_OWORD *)(v139 + 64);
        *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
        v203 = *(_OWORD *)(v139 + 16);
        *(_OWORD *)v138 = *(_OWORD *)v139;
        *(_OWORD *)(v138 + 16) = v203;
      }
      v8 = a1;
      v9 = v221;
      v10 = 8;
      goto LABEL_85;
    case 9u:
      v222 = a3;
      v51 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(a1, a2, v51);
      v52 = (int *)_s16ExchangeResponseVMa(0);
      v53 = v52[5];
      v54 = (_QWORD *)(a1 + v53);
      v55 = (_QWORD *)(a2 + v53);
      v56 = (const char *)v55[1];
      *v54 = *v55;
      v54[1] = v56;
      v57 = v52[6];
      v58 = (_QWORD *)(a1 + v57);
      v59 = (_QWORD *)(a2 + v57);
      v60 = (const char *)v59[1];
      *v58 = *v59;
      v58[1] = v60;
      v61 = v52[7];
      v62 = (void *)(a1 + v61);
      v63 = (const void *)(a2 + v61);
      v64 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
      v65 = *(_QWORD *)(v64 - 8);
      v66 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v65 + 48);
      *(_QWORD *)&v67 = swift_bridgeObjectRetain(v56).n128_u64[0];
      v68 = swift_bridgeObjectRetain(v60, v67);
      if (v66(v63, 1, v64, v68))
      {
        v69 = sub_100008384(&qword_1007C11B0);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v62, v63, v64);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      v143 = v52[8];
      v144 = a1 + v143;
      v145 = (uint64_t *)(a2 + v143);
      v146 = v145[1];
      if (v146 >> 60 == 15)
      {
        *(_OWORD *)v144 = *(_OWORD *)v145;
      }
      else
      {
        v147 = *v145;
        sub_10022E4A8(*v145, v145[1]);
        *(_QWORD *)v144 = v147;
        *(_QWORD *)(v144 + 8) = v146;
      }
      v148 = v52[9];
      v149 = a1 + v148;
      v150 = a2 + v148;
      if (*(_QWORD *)(a2 + v148 + 72))
      {
        v151 = *(const char **)(v150 + 8);
        *(_QWORD *)v149 = *(_QWORD *)v150;
        *(_QWORD *)(v149 + 8) = v151;
        v152 = (_OWORD *)(v150 + 16);
        v153 = *(_QWORD *)(v150 + 24);
        swift_bridgeObjectRetain(v151);
        if (v153 >> 60 == 15)
        {
          *(_OWORD *)(v149 + 16) = *v152;
        }
        else
        {
          v212 = *(_QWORD *)v152;
          sub_10022E4A8(v212, v153);
          *(_QWORD *)(v149 + 16) = v212;
          *(_QWORD *)(v149 + 24) = v153;
        }
        v213 = *(_QWORD *)(v150 + 32);
        v214 = *(_QWORD *)(v150 + 40);
        sub_10022E4A8(v213, v214);
        *(_QWORD *)(v149 + 32) = v213;
        *(_QWORD *)(v149 + 40) = v214;
        v215 = *(_QWORD *)(v150 + 48);
        v216 = *(_QWORD *)(v150 + 56);
        sub_10022E4A8(v215, v216);
        *(_QWORD *)(v149 + 48) = v215;
        *(_QWORD *)(v149 + 56) = v216;
        v217 = *(const char **)(v150 + 72);
        *(_QWORD *)(v149 + 64) = *(_QWORD *)(v150 + 64);
        *(_QWORD *)(v149 + 72) = v217;
        *(_QWORD *)(v149 + 80) = *(_QWORD *)(v150 + 80);
        swift_bridgeObjectRetain(v217);
      }
      else
      {
        v204 = *(_OWORD *)(v150 + 48);
        *(_OWORD *)(v149 + 32) = *(_OWORD *)(v150 + 32);
        *(_OWORD *)(v149 + 48) = v204;
        *(_OWORD *)(v149 + 64) = *(_OWORD *)(v150 + 64);
        *(_QWORD *)(v149 + 80) = *(_QWORD *)(v150 + 80);
        v205 = *(_OWORD *)(v150 + 16);
        *(_OWORD *)v149 = *(_OWORD *)v150;
        *(_OWORD *)(v149 + 16) = v205;
      }
      v8 = a1;
      v9 = v222;
      v10 = 9;
      goto LABEL_85;
    case 0xAu:
      v70 = *(const char **)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v70;
      v71 = (_OWORD *)(a2 + 16);
      v72 = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain(v70);
      if (v72 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 16) = *v71;
      }
      else
      {
        v88 = *(_QWORD *)v71;
        sub_10022E4A8(v88, v72);
        *(_QWORD *)(a1 + 16) = v88;
        *(_QWORD *)(a1 + 24) = v72;
      }
      v89 = *(_QWORD *)(a2 + 32);
      v90 = *(_QWORD *)(a2 + 40);
      sub_10022E4A8(v89, v90);
      *(_QWORD *)(a1 + 32) = v89;
      *(_QWORD *)(a1 + 40) = v90;
      v91 = *(_QWORD *)(a2 + 48);
      v92 = *(_QWORD *)(a2 + 56);
      sub_10022E4A8(v91, v92);
      *(_QWORD *)(a1 + 48) = v91;
      *(_QWORD *)(a1 + 56) = v92;
      v93 = *(const char **)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v93;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain(v93);
      v8 = a1;
      v9 = a3;
      v10 = 10;
      goto LABEL_85;
    case 0xBu:
      v73 = *(_QWORD *)a2;
      v74 = *(_QWORD *)(a2 + 8);
      sub_10022E4A8(v73, v74);
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v74;
      v8 = a1;
      v9 = a3;
      v10 = 11;
      goto LABEL_85;
    case 0xCu:
      v75 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(a1, a2, v75);
      v76 = *(int *)(_s12ErrorRequestVMa(0) + 20);
      v77 = a1 + v76;
      v78 = a2 + v76;
      v79 = type metadata accessor for CodableError(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      v8 = a1;
      v9 = a3;
      v10 = 12;
      goto LABEL_85;
    case 0xDu:
      v80 = *(_QWORD *)a2;
      v81 = *(_QWORD *)(a2 + 8);
      sub_10022E4A8(v80, v81);
      *(_QWORD *)a1 = v80;
      *(_QWORD *)(a1 + 8) = v81;
      v8 = a1;
      v9 = a3;
      v10 = 13;
LABEL_85:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_10044DE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(const void *, uint64_t, uint64_t, __n128);
  double v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  const char *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(const void *, uint64_t, uint64_t, __n128);
  double v67;
  __n128 v68;
  uint64_t v69;
  const char *v70;
  _OWORD *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  double v105;
  int *v106;
  uint64_t v107;
  void *v108;
  const void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  const char *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  const char *v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  _OWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  _OWORD *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  const char *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  const char *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  const char *v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  const char *v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  const char *v221;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  if (a1 != a2)
  {
    sub_1002443C8(a1, type metadata accessor for SDAirDropMessage);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = _s12HelloRequestVMa(0);
        *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
        *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_86;
      case 2u:
        v11 = *(_QWORD *)(a2 + 8);
        if (v11 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v82 = *(_QWORD *)a2;
          sub_10022E4A8(v82, v11);
          *(_QWORD *)a1 = v82;
          *(_QWORD *)(a1 + 8) = v11;
        }
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_86;
      case 3u:
        v12 = *(_QWORD *)(a2 + 8);
        if (v12 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v83 = *(_QWORD *)a2;
          sub_10022E4A8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
          *(_QWORD *)a1 = v83;
          *(_QWORD *)(a1 + 8) = v12;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v84 = *(const char **)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v84;
        v85 = (uint64_t *)(a2 + 32);
        v86 = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain(v84);
        if (v86 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 32) = *(_OWORD *)v85;
        }
        else
        {
          v94 = *v85;
          sub_10022E4A8(*v85, v86);
          *(_QWORD *)(a1 + 32) = v94;
          *(_QWORD *)(a1 + 40) = v86;
        }
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v95 = *(const char **)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v95;
        v96 = (uint64_t *)(a2 + 64);
        v97 = *(_QWORD *)(a2 + 72);
        swift_bridgeObjectRetain(v95);
        if (v97 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v96;
        }
        else
        {
          v98 = *v96;
          sub_10022E4A8(*v96, v97);
          *(_QWORD *)(a1 + 64) = v98;
          *(_QWORD *)(a1 + 72) = v97;
        }
        v99 = (uint64_t *)(a2 + 80);
        v100 = *(_QWORD *)(a2 + 88);
        if (v100 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 80) = *(_OWORD *)v99;
        }
        else
        {
          v101 = *v99;
          sub_10022E4A8(*v99, *(_QWORD *)(a2 + 88));
          *(_QWORD *)(a1 + 80) = v101;
          *(_QWORD *)(a1 + 88) = v100;
        }
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        v102 = *(const char **)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v102;
        v103 = *(_QWORD *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        *(_QWORD *)(a1 + 112) = v103;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        v104 = *(const char **)(a2 + 136);
        *(_QWORD *)(a1 + 136) = v104;
        *(_QWORD *)&v105 = swift_bridgeObjectRetain(v102).n128_u64[0];
        swift_bridgeObjectRetain(v104, v105);
        v8 = a1;
        v9 = a3;
        v10 = 3;
        goto LABEL_86;
      case 4u:
        v13 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        v14 = *(_QWORD *)(v13 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
        {
          v15 = sub_100008384((uint64_t *)&unk_1007B7E50);
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a1, a2, v13);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
        }
        v106 = (int *)_s10AskRequestVMa(0);
        v107 = v106[5];
        v108 = (void *)(a1 + v107);
        v109 = (const void *)(a2 + v107);
        v110 = type metadata accessor for SFAirDrop.TransferType(0);
        v111 = *(_QWORD *)(v110 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
        {
          v112 = sub_100008384(&qword_1007B7E48);
          memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v111 + 16))(v108, v109, v110);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
        }
        v154 = v106[6];
        v155 = a1 + v154;
        v156 = (uint64_t *)(a2 + v154);
        v157 = v156[1];
        v227 = a3;
        if (v157 >> 60 == 15)
        {
          *(_OWORD *)v155 = *(_OWORD *)v156;
        }
        else
        {
          v158 = *v156;
          sub_10022E4A8(*v156, v157);
          *(_QWORD *)v155 = v158;
          *(_QWORD *)(v155 + 8) = v157;
        }
        v159 = v106[7];
        v160 = (_QWORD *)(a1 + v159);
        v161 = (_QWORD *)(a2 + v159);
        *v160 = *v161;
        v162 = (const char *)v161[1];
        v160[1] = v162;
        v163 = v106[8];
        v164 = (_QWORD *)(a1 + v163);
        v165 = (_QWORD *)(a2 + v163);
        *v164 = *v165;
        v224 = (const char *)v165[1];
        v164[1] = v224;
        v166 = v106[9];
        v167 = (_QWORD *)(a1 + v166);
        v168 = (_QWORD *)(a2 + v166);
        *v167 = *v168;
        v169 = (const char *)v168[1];
        v167[1] = v169;
        v170 = v106[10];
        v171 = (_QWORD *)(a1 + v170);
        v172 = (_QWORD *)(a2 + v170);
        *v171 = *v172;
        v173 = (const char *)v172[1];
        v171[1] = v173;
        v174 = v106[11];
        v175 = *(const char **)(a2 + v174);
        *(_QWORD *)(a1 + v174) = v175;
        v176 = v106[12];
        v177 = *(const char **)(a2 + v176);
        *(_QWORD *)(a1 + v176) = v177;
        v178 = v106[13];
        v179 = (_QWORD *)(a1 + v178);
        v180 = (_QWORD *)(a2 + v178);
        *v179 = *v180;
        v181 = (const char *)v180[1];
        v179[1] = v181;
        v182 = v106[14];
        v223 = a1 + v182;
        v183 = (uint64_t *)(a2 + v182);
        v184 = *(_QWORD *)(a2 + v182 + 8);
        *(_QWORD *)&v185 = swift_bridgeObjectRetain(v162).n128_u64[0];
        *(_QWORD *)&v186 = swift_bridgeObjectRetain(v224, v185).n128_u64[0];
        *(_QWORD *)&v187 = swift_bridgeObjectRetain(v169, v186).n128_u64[0];
        *(_QWORD *)&v188 = swift_bridgeObjectRetain(v173, v187).n128_u64[0];
        *(_QWORD *)&v189 = swift_bridgeObjectRetain(v175, v188).n128_u64[0];
        *(_QWORD *)&v190 = swift_bridgeObjectRetain(v177, v189).n128_u64[0];
        swift_bridgeObjectRetain(v181, v190);
        if (v184 >> 60 == 15)
        {
          *(_OWORD *)v223 = *(_OWORD *)v183;
        }
        else
        {
          v191 = *v183;
          sub_10022E4A8(*v183, v184);
          *(_QWORD *)v223 = v191;
          *(_QWORD *)(v223 + 8) = v184;
        }
        v192 = v106[15];
        v193 = a1 + v192;
        v194 = (uint64_t *)(a2 + v192);
        v195 = v194[1];
        if (v195 >> 60 == 15)
        {
          *(_OWORD *)v193 = *(_OWORD *)v194;
        }
        else
        {
          v196 = *v194;
          sub_10022E4A8(*v194, v194[1]);
          *(_QWORD *)v193 = v196;
          *(_QWORD *)(v193 + 8) = v195;
        }
        *(_BYTE *)(a1 + v106[16]) = *(_BYTE *)(a2 + v106[16]);
        v197 = v106[17];
        v198 = a1 + v197;
        v199 = (uint64_t *)(a2 + v197);
        v200 = v199[1];
        if (v200 >> 60 == 15)
        {
          *(_OWORD *)v198 = *(_OWORD *)v199;
        }
        else
        {
          v201 = *v199;
          sub_10022E4A8(*v199, v199[1]);
          *(_QWORD *)v198 = v201;
          *(_QWORD *)(v198 + 8) = v200;
        }
        v8 = a1;
        v9 = v227;
        v10 = 4;
        goto LABEL_86;
      case 5u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v16 = *(const char **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v17 = *(const char **)(a2 + 24);
        *(_QWORD *)(a1 + 24) = v17;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        v18 = *(const char **)(a2 + 48);
        *(_QWORD *)(a1 + 48) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        v19 = *(const char **)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v19;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        v20 = *(const char **)(a2 + 80);
        *(_QWORD *)(a1 + 80) = v20;
        v21 = (uint64_t *)(a2 + 88);
        v22 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)&v23 = swift_bridgeObjectRetain(v16).n128_u64[0];
        *(_QWORD *)&v24 = swift_bridgeObjectRetain(v17, v23).n128_u64[0];
        *(_QWORD *)&v25 = swift_bridgeObjectRetain(v18, v24).n128_u64[0];
        *(_QWORD *)&v26 = swift_bridgeObjectRetain(v19, v25).n128_u64[0];
        swift_bridgeObjectRetain(v20, v26);
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v21;
        }
        else
        {
          v87 = *v21;
          sub_10022E4A8(*v21, v22);
          *(_QWORD *)(a1 + 88) = v87;
          *(_QWORD *)(a1 + 96) = v22;
        }
        v8 = a1;
        v9 = a3;
        v10 = 5;
        goto LABEL_86;
      case 6u:
        v27 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(a2, 1, v27))
        {
          v29 = sub_100008384((uint64_t *)&unk_1007B7E50);
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, a2, v27);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
        }
        v113 = (int *)_s13UploadRequestVMa(0);
        *(_QWORD *)(a1 + v113[5]) = *(_QWORD *)(a2 + v113[5]);
        v114 = v113[6];
        v115 = (_QWORD *)(a1 + v114);
        v116 = (_QWORD *)(a2 + v114);
        *v115 = *v116;
        v117 = (const char *)v116[1];
        v115[1] = v117;
        v118 = v113[7];
        v119 = a1 + v118;
        v120 = (_OWORD *)(a2 + v118);
        v121 = *(_QWORD *)(a2 + v118 + 8);
        swift_bridgeObjectRetain(v117);
        if (v121 >> 60 == 15)
        {
          *(_OWORD *)v119 = *v120;
        }
        else
        {
          v122 = *(_QWORD *)v120;
          sub_10022E4A8(v122, v121);
          *(_QWORD *)v119 = v122;
          *(_QWORD *)(v119 + 8) = v121;
        }
        *(_BYTE *)(a1 + v113[8]) = *(_BYTE *)(a2 + v113[8]);
        v123 = v113[9];
        v124 = (_QWORD *)(a1 + v123);
        v125 = (_QWORD *)(a2 + v123);
        *v124 = *v125;
        v126 = (const char *)v125[1];
        v124[1] = v126;
        v127 = v113[10];
        v128 = (_QWORD *)(a1 + v127);
        v129 = (_QWORD *)(a2 + v127);
        *v128 = *v129;
        v130 = (const char *)v129[1];
        v128[1] = v130;
        *(_QWORD *)&v131 = swift_bridgeObjectRetain(v126).n128_u64[0];
        swift_bridgeObjectRetain(v130, v131);
        v8 = a1;
        v9 = a3;
        v10 = 6;
        goto LABEL_86;
      case 7u:
        v30 = *(_QWORD *)a2;
        v31 = *(_QWORD *)(a2 + 8);
        sub_10022E4A8(v30, v31);
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v31;
        v8 = a1;
        v9 = a3;
        v10 = 7;
        goto LABEL_86;
      case 8u:
        v225 = a3;
        v32 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(a1, a2, v32);
        v33 = (int *)_s15ExchangeRequestVMa(0);
        v34 = v33[5];
        v35 = (_QWORD *)(a1 + v34);
        v36 = (_QWORD *)(a2 + v34);
        *v35 = *v36;
        v37 = (const char *)v36[1];
        v35[1] = v37;
        v38 = v33[6];
        v39 = (_QWORD *)(a1 + v38);
        v40 = (_QWORD *)(a2 + v38);
        *v39 = *v40;
        v41 = (const char *)v40[1];
        v39[1] = v41;
        v42 = v33[7];
        v43 = (void *)(a1 + v42);
        v44 = (const void *)(a2 + v42);
        v45 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
        v46 = *(_QWORD *)(v45 - 8);
        v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v46 + 48);
        *(_QWORD *)&v48 = swift_bridgeObjectRetain(v37).n128_u64[0];
        v49 = swift_bridgeObjectRetain(v41, v48);
        if (v47(v44, 1, v45, v49))
        {
          v50 = sub_100008384(&qword_1007C11B0);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(v43, v44, v45);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v132 = v33[8];
        v133 = a1 + v132;
        v134 = (uint64_t *)(a2 + v132);
        v135 = v134[1];
        if (v135 >> 60 == 15)
        {
          *(_OWORD *)v133 = *(_OWORD *)v134;
        }
        else
        {
          v136 = *v134;
          sub_10022E4A8(*v134, v134[1]);
          *(_QWORD *)v133 = v136;
          *(_QWORD *)(v133 + 8) = v135;
        }
        v137 = v33[9];
        v138 = a1 + v137;
        v139 = a2 + v137;
        if (*(_QWORD *)(a2 + v137 + 72))
        {
          *(_QWORD *)v138 = *(_QWORD *)v139;
          v140 = *(const char **)(v139 + 8);
          *(_QWORD *)(v138 + 8) = v140;
          v141 = (_OWORD *)(v139 + 16);
          v142 = *(_QWORD *)(v139 + 24);
          swift_bridgeObjectRetain(v140);
          if (v142 >> 60 == 15)
          {
            *(_OWORD *)(v138 + 16) = *v141;
          }
          else
          {
            v210 = *(_QWORD *)v141;
            sub_10022E4A8(v210, v142);
            *(_QWORD *)(v138 + 16) = v210;
            *(_QWORD *)(v138 + 24) = v142;
          }
          v211 = *(_QWORD *)(v139 + 32);
          v212 = *(_QWORD *)(v139 + 40);
          sub_10022E4A8(v211, v212);
          *(_QWORD *)(v138 + 32) = v211;
          *(_QWORD *)(v138 + 40) = v212;
          v213 = *(_QWORD *)(v139 + 48);
          v214 = *(_QWORD *)(v139 + 56);
          sub_10022E4A8(v213, v214);
          *(_QWORD *)(v138 + 48) = v213;
          *(_QWORD *)(v138 + 56) = v214;
          *(_QWORD *)(v138 + 64) = *(_QWORD *)(v139 + 64);
          v215 = *(const char **)(v139 + 72);
          *(_QWORD *)(v138 + 72) = v215;
          *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
          swift_bridgeObjectRetain(v215);
        }
        else
        {
          v202 = *(_OWORD *)(v139 + 16);
          *(_OWORD *)v138 = *(_OWORD *)v139;
          *(_OWORD *)(v138 + 16) = v202;
          v203 = *(_OWORD *)(v139 + 32);
          v204 = *(_OWORD *)(v139 + 48);
          v205 = *(_OWORD *)(v139 + 64);
          *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
          *(_OWORD *)(v138 + 48) = v204;
          *(_OWORD *)(v138 + 64) = v205;
          *(_OWORD *)(v138 + 32) = v203;
        }
        v8 = a1;
        v9 = v225;
        v10 = 8;
        goto LABEL_86;
      case 9u:
        v226 = a3;
        v51 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(a1, a2, v51);
        v52 = (int *)_s16ExchangeResponseVMa(0);
        v53 = v52[5];
        v54 = (_QWORD *)(a1 + v53);
        v55 = (_QWORD *)(a2 + v53);
        *v54 = *v55;
        v56 = (const char *)v55[1];
        v54[1] = v56;
        v57 = v52[6];
        v58 = (_QWORD *)(a1 + v57);
        v59 = (_QWORD *)(a2 + v57);
        *v58 = *v59;
        v60 = (const char *)v59[1];
        v58[1] = v60;
        v61 = v52[7];
        v62 = (void *)(a1 + v61);
        v63 = (const void *)(a2 + v61);
        v64 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
        v65 = *(_QWORD *)(v64 - 8);
        v66 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v65 + 48);
        *(_QWORD *)&v67 = swift_bridgeObjectRetain(v56).n128_u64[0];
        v68 = swift_bridgeObjectRetain(v60, v67);
        if (v66(v63, 1, v64, v68))
        {
          v69 = sub_100008384(&qword_1007C11B0);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v62, v63, v64);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        v143 = v52[8];
        v144 = a1 + v143;
        v145 = (uint64_t *)(a2 + v143);
        v146 = v145[1];
        if (v146 >> 60 == 15)
        {
          *(_OWORD *)v144 = *(_OWORD *)v145;
        }
        else
        {
          v147 = *v145;
          sub_10022E4A8(*v145, v145[1]);
          *(_QWORD *)v144 = v147;
          *(_QWORD *)(v144 + 8) = v146;
        }
        v148 = v52[9];
        v149 = a1 + v148;
        v150 = a2 + v148;
        if (*(_QWORD *)(a2 + v148 + 72))
        {
          *(_QWORD *)v149 = *(_QWORD *)v150;
          v151 = *(const char **)(v150 + 8);
          *(_QWORD *)(v149 + 8) = v151;
          v152 = (_OWORD *)(v150 + 16);
          v153 = *(_QWORD *)(v150 + 24);
          swift_bridgeObjectRetain(v151);
          if (v153 >> 60 == 15)
          {
            *(_OWORD *)(v149 + 16) = *v152;
          }
          else
          {
            v216 = *(_QWORD *)v152;
            sub_10022E4A8(v216, v153);
            *(_QWORD *)(v149 + 16) = v216;
            *(_QWORD *)(v149 + 24) = v153;
          }
          v217 = *(_QWORD *)(v150 + 32);
          v218 = *(_QWORD *)(v150 + 40);
          sub_10022E4A8(v217, v218);
          *(_QWORD *)(v149 + 32) = v217;
          *(_QWORD *)(v149 + 40) = v218;
          v219 = *(_QWORD *)(v150 + 48);
          v220 = *(_QWORD *)(v150 + 56);
          sub_10022E4A8(v219, v220);
          *(_QWORD *)(v149 + 48) = v219;
          *(_QWORD *)(v149 + 56) = v220;
          *(_QWORD *)(v149 + 64) = *(_QWORD *)(v150 + 64);
          v221 = *(const char **)(v150 + 72);
          *(_QWORD *)(v149 + 72) = v221;
          *(_QWORD *)(v149 + 80) = *(_QWORD *)(v150 + 80);
          swift_bridgeObjectRetain(v221);
        }
        else
        {
          v206 = *(_OWORD *)(v150 + 16);
          *(_OWORD *)v149 = *(_OWORD *)v150;
          *(_OWORD *)(v149 + 16) = v206;
          v207 = *(_OWORD *)(v150 + 32);
          v208 = *(_OWORD *)(v150 + 48);
          v209 = *(_OWORD *)(v150 + 64);
          *(_QWORD *)(v149 + 80) = *(_QWORD *)(v150 + 80);
          *(_OWORD *)(v149 + 48) = v208;
          *(_OWORD *)(v149 + 64) = v209;
          *(_OWORD *)(v149 + 32) = v207;
        }
        v8 = a1;
        v9 = v226;
        v10 = 9;
        goto LABEL_86;
      case 0xAu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v70 = *(const char **)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v70;
        v71 = (_OWORD *)(a2 + 16);
        v72 = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRetain(v70);
        if (v72 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 16) = *v71;
        }
        else
        {
          v88 = *(_QWORD *)v71;
          sub_10022E4A8(v88, v72);
          *(_QWORD *)(a1 + 16) = v88;
          *(_QWORD *)(a1 + 24) = v72;
        }
        v89 = *(_QWORD *)(a2 + 32);
        v90 = *(_QWORD *)(a2 + 40);
        sub_10022E4A8(v89, v90);
        *(_QWORD *)(a1 + 32) = v89;
        *(_QWORD *)(a1 + 40) = v90;
        v91 = *(_QWORD *)(a2 + 48);
        v92 = *(_QWORD *)(a2 + 56);
        sub_10022E4A8(v91, v92);
        *(_QWORD *)(a1 + 48) = v91;
        *(_QWORD *)(a1 + 56) = v92;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        v93 = *(const char **)(a2 + 72);
        *(_QWORD *)(a1 + 72) = v93;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        swift_bridgeObjectRetain(v93);
        v8 = a1;
        v9 = a3;
        v10 = 10;
        goto LABEL_86;
      case 0xBu:
        v73 = *(_QWORD *)a2;
        v74 = *(_QWORD *)(a2 + 8);
        sub_10022E4A8(v73, v74);
        *(_QWORD *)a1 = v73;
        *(_QWORD *)(a1 + 8) = v74;
        v8 = a1;
        v9 = a3;
        v10 = 11;
        goto LABEL_86;
      case 0xCu:
        v75 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(a1, a2, v75);
        v76 = *(int *)(_s12ErrorRequestVMa(0) + 20);
        v77 = a1 + v76;
        v78 = a2 + v76;
        v79 = type metadata accessor for CodableError(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
        v8 = a1;
        v9 = a3;
        v10 = 12;
        goto LABEL_86;
      case 0xDu:
        v80 = *(_QWORD *)a2;
        v81 = *(_QWORD *)(a2 + 8);
        sub_10022E4A8(v80, v81);
        *(_QWORD *)a1 = v80;
        *(_QWORD *)(a1 + 8) = v81;
        v8 = a1;
        v9 = a3;
        v10 = 13;
LABEL_86:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for SDAirDropMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_1007C1228;
  if (!qword_1007C1228)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropMessage);
  return result;
}

_BYTE *sub_10044EBC0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = _s12HelloRequestVMa(0);
      *(_DWORD *)&a1[*(int *)(v7 + 20)] = *(_DWORD *)&a2[*(int *)(v7 + 20)];
      a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_24;
    case 4u:
      v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = sub_100008384((uint64_t *)&unk_1007B7E50);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(a1, a2, v11);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v38 = (int *)_s10AskRequestVMa(0);
      v39 = v38[5];
      v40 = &a1[v39];
      v41 = &a2[v39];
      v42 = type metadata accessor for SFAirDrop.TransferType(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_100008384(&qword_1007B7E48);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      *(_OWORD *)&a1[v38[6]] = *(_OWORD *)&a2[v38[6]];
      *(_OWORD *)&a1[v38[7]] = *(_OWORD *)&a2[v38[7]];
      *(_OWORD *)&a1[v38[8]] = *(_OWORD *)&a2[v38[8]];
      *(_OWORD *)&a1[v38[9]] = *(_OWORD *)&a2[v38[9]];
      *(_OWORD *)&a1[v38[10]] = *(_OWORD *)&a2[v38[10]];
      *(_QWORD *)&a1[v38[11]] = *(_QWORD *)&a2[v38[11]];
      *(_QWORD *)&a1[v38[12]] = *(_QWORD *)&a2[v38[12]];
      *(_OWORD *)&a1[v38[13]] = *(_OWORD *)&a2[v38[13]];
      *(_OWORD *)&a1[v38[14]] = *(_OWORD *)&a2[v38[14]];
      *(_OWORD *)&a1[v38[15]] = *(_OWORD *)&a2[v38[15]];
      a1[v38[16]] = a2[v38[16]];
      *(_OWORD *)&a1[v38[17]] = *(_OWORD *)&a2[v38[17]];
      v8 = a1;
      v9 = a3;
      v10 = 4;
      goto LABEL_24;
    case 6u:
      v14 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
      {
        v16 = sub_100008384((uint64_t *)&unk_1007B7E50);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(a1, a2, v14);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
      }
      v45 = (int *)_s13UploadRequestVMa(0);
      *(_QWORD *)&a1[v45[5]] = *(_QWORD *)&a2[v45[5]];
      *(_OWORD *)&a1[v45[6]] = *(_OWORD *)&a2[v45[6]];
      *(_OWORD *)&a1[v45[7]] = *(_OWORD *)&a2[v45[7]];
      a1[v45[8]] = a2[v45[8]];
      *(_OWORD *)&a1[v45[9]] = *(_OWORD *)&a2[v45[9]];
      *(_OWORD *)&a1[v45[10]] = *(_OWORD *)&a2[v45[10]];
      v8 = a1;
      v9 = a3;
      v10 = 6;
      goto LABEL_24;
    case 8u:
      v17 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
      v18 = (int *)_s15ExchangeRequestVMa(0);
      *(_OWORD *)&a1[v18[5]] = *(_OWORD *)&a2[v18[5]];
      *(_OWORD *)&a1[v18[6]] = *(_OWORD *)&a2[v18[6]];
      v19 = v18[7];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_100008384(&qword_1007C11B0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      *(_OWORD *)&a1[v18[8]] = *(_OWORD *)&a2[v18[8]];
      v46 = v18[9];
      v47 = &a1[v46];
      v48 = &a2[v46];
      v49 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v49;
      *((_QWORD *)v47 + 10) = *((_QWORD *)v48 + 10);
      v50 = *((_OWORD *)v48 + 4);
      v51 = *((_OWORD *)v48 + 2);
      *((_OWORD *)v47 + 3) = *((_OWORD *)v48 + 3);
      *((_OWORD *)v47 + 4) = v50;
      *((_OWORD *)v47 + 2) = v51;
      v8 = a1;
      v9 = a3;
      v10 = 8;
      goto LABEL_24;
    case 9u:
      v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(a1, a2, v25);
      v26 = (int *)_s16ExchangeResponseVMa(0);
      *(_OWORD *)&a1[v26[5]] = *(_OWORD *)&a2[v26[5]];
      *(_OWORD *)&a1[v26[6]] = *(_OWORD *)&a2[v26[6]];
      v27 = v26[7];
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = sub_100008384(&qword_1007C11B0);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      *(_OWORD *)&a1[v26[8]] = *(_OWORD *)&a2[v26[8]];
      v52 = v26[9];
      v53 = &a1[v52];
      v54 = &a2[v52];
      v55 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v55;
      *((_QWORD *)v53 + 10) = *((_QWORD *)v54 + 10);
      v56 = *((_OWORD *)v54 + 4);
      v57 = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 4) = v56;
      *((_OWORD *)v53 + 2) = v57;
      v8 = a1;
      v9 = a3;
      v10 = 9;
      goto LABEL_24;
    case 0xCu:
      v33 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a1, a2, v33);
      v34 = *(int *)(_s12ErrorRequestVMa(0) + 20);
      v35 = &a1[v34];
      v36 = &a2[v34];
      v37 = type metadata accessor for CodableError(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      v8 = a1;
      v9 = a3;
      v10 = 12;
LABEL_24:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *sub_10044F19C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for SDAirDropMessage);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = _s12HelloRequestVMa(0);
        *(_DWORD *)&a1[*(int *)(v7 + 20)] = *(_DWORD *)&a2[*(int *)(v7 + 20)];
        a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_25;
      case 4u:
        v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        v12 = *(_QWORD *)(v11 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
        {
          v13 = sub_100008384((uint64_t *)&unk_1007B7E50);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(a1, a2, v11);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
        }
        v38 = (int *)_s10AskRequestVMa(0);
        v39 = v38[5];
        v40 = &a1[v39];
        v41 = &a2[v39];
        v42 = type metadata accessor for SFAirDrop.TransferType(0);
        v43 = *(_QWORD *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        {
          v44 = sub_100008384(&qword_1007B7E48);
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        }
        *(_OWORD *)&a1[v38[6]] = *(_OWORD *)&a2[v38[6]];
        *(_OWORD *)&a1[v38[7]] = *(_OWORD *)&a2[v38[7]];
        *(_OWORD *)&a1[v38[8]] = *(_OWORD *)&a2[v38[8]];
        *(_OWORD *)&a1[v38[9]] = *(_OWORD *)&a2[v38[9]];
        *(_OWORD *)&a1[v38[10]] = *(_OWORD *)&a2[v38[10]];
        *(_QWORD *)&a1[v38[11]] = *(_QWORD *)&a2[v38[11]];
        *(_QWORD *)&a1[v38[12]] = *(_QWORD *)&a2[v38[12]];
        *(_OWORD *)&a1[v38[13]] = *(_OWORD *)&a2[v38[13]];
        *(_OWORD *)&a1[v38[14]] = *(_OWORD *)&a2[v38[14]];
        *(_OWORD *)&a1[v38[15]] = *(_OWORD *)&a2[v38[15]];
        a1[v38[16]] = a2[v38[16]];
        *(_OWORD *)&a1[v38[17]] = *(_OWORD *)&a2[v38[17]];
        v8 = a1;
        v9 = a3;
        v10 = 4;
        goto LABEL_25;
      case 6u:
        v14 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
        {
          v16 = sub_100008384((uint64_t *)&unk_1007B7E50);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
        }
        v45 = (int *)_s13UploadRequestVMa(0);
        *(_QWORD *)&a1[v45[5]] = *(_QWORD *)&a2[v45[5]];
        *(_OWORD *)&a1[v45[6]] = *(_OWORD *)&a2[v45[6]];
        *(_OWORD *)&a1[v45[7]] = *(_OWORD *)&a2[v45[7]];
        a1[v45[8]] = a2[v45[8]];
        *(_OWORD *)&a1[v45[9]] = *(_OWORD *)&a2[v45[9]];
        *(_OWORD *)&a1[v45[10]] = *(_OWORD *)&a2[v45[10]];
        v8 = a1;
        v9 = a3;
        v10 = 6;
        goto LABEL_25;
      case 8u:
        v17 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
        v18 = (int *)_s15ExchangeRequestVMa(0);
        *(_OWORD *)&a1[v18[5]] = *(_OWORD *)&a2[v18[5]];
        *(_OWORD *)&a1[v18[6]] = *(_OWORD *)&a2[v18[6]];
        v19 = v18[7];
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = sub_100008384(&qword_1007C11B0);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        *(_OWORD *)&a1[v18[8]] = *(_OWORD *)&a2[v18[8]];
        v46 = v18[9];
        v47 = &a1[v46];
        v48 = &a2[v46];
        v49 = *((_OWORD *)v48 + 1);
        *(_OWORD *)v47 = *(_OWORD *)v48;
        *((_OWORD *)v47 + 1) = v49;
        *((_QWORD *)v47 + 10) = *((_QWORD *)v48 + 10);
        v50 = *((_OWORD *)v48 + 4);
        v51 = *((_OWORD *)v48 + 2);
        *((_OWORD *)v47 + 3) = *((_OWORD *)v48 + 3);
        *((_OWORD *)v47 + 4) = v50;
        *((_OWORD *)v47 + 2) = v51;
        v8 = a1;
        v9 = a3;
        v10 = 8;
        goto LABEL_25;
      case 9u:
        v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(a1, a2, v25);
        v26 = (int *)_s16ExchangeResponseVMa(0);
        *(_OWORD *)&a1[v26[5]] = *(_OWORD *)&a2[v26[5]];
        *(_OWORD *)&a1[v26[6]] = *(_OWORD *)&a2[v26[6]];
        v27 = v26[7];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          v32 = sub_100008384(&qword_1007C11B0);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
        *(_OWORD *)&a1[v26[8]] = *(_OWORD *)&a2[v26[8]];
        v52 = v26[9];
        v53 = &a1[v52];
        v54 = &a2[v52];
        v55 = *((_OWORD *)v54 + 1);
        *(_OWORD *)v53 = *(_OWORD *)v54;
        *((_OWORD *)v53 + 1) = v55;
        *((_QWORD *)v53 + 10) = *((_QWORD *)v54 + 10);
        v56 = *((_OWORD *)v54 + 4);
        v57 = *((_OWORD *)v54 + 2);
        *((_OWORD *)v53 + 3) = *((_OWORD *)v54 + 3);
        *((_OWORD *)v53 + 4) = v56;
        *((_OWORD *)v53 + 2) = v57;
        v8 = a1;
        v9 = a3;
        v10 = 9;
        goto LABEL_25;
      case 0xCu:
        v33 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a1, a2, v33);
        v34 = *(int *)(_s12ErrorRequestVMa(0) + 20);
        v35 = &a1[v34];
        v36 = &a2[v34];
        v37 = type metadata accessor for CodableError(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
        v8 = a1;
        v9 = a3;
        v10 = 12;
LABEL_25:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10044F790(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[14];

  result = _s12HelloRequestVMa(319);
  if (v3 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    v9[1] = &unk_1005D86F8;
    v9[2] = &unk_1005D8710;
    v9[3] = &unk_1005D8728;
    result = _s10AskRequestVMa(319);
    if (v4 <= 0x3F)
    {
      v9[4] = *(_QWORD *)(result - 8) + 64;
      v9[5] = &unk_1005D8740;
      result = _s13UploadRequestVMa(319);
      if (v5 <= 0x3F)
      {
        v9[6] = *(_QWORD *)(result - 8) + 64;
        v9[7] = &unk_1005D8758;
        result = _s15ExchangeRequestVMa(319);
        if (v6 <= 0x3F)
        {
          v9[8] = *(_QWORD *)(result - 8) + 64;
          result = _s16ExchangeResponseVMa(319);
          if (v7 <= 0x3F)
          {
            v9[9] = *(_QWORD *)(result - 8) + 64;
            v9[10] = &unk_1005D8770;
            v9[11] = &unk_1005D8758;
            result = _s12ErrorRequestVMa(319);
            if (v8 <= 0x3F)
            {
              v9[12] = *(_QWORD *)(result - 8) + 64;
              v9[13] = &unk_1005D8758;
              swift_initEnumMetadataMultiPayload(a1, 256, 14, v9);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessages()
{
  return &type metadata for SDAirDropMessages;
}

void sub_10044F8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v1 = _s12ErrorRequestVMa(0);
  __chkstk_darwin(v1);
  v2 = _s16ExchangeResponseVMa(0);
  __chkstk_darwin(v2);
  v3 = _s15ExchangeRequestVMa(0);
  __chkstk_darwin(v3);
  v4 = _s13UploadRequestVMa(0);
  __chkstk_darwin(v4);
  v5 = _s10AskRequestVMa(0);
  __chkstk_darwin(v5);
  v6 = _s12HelloRequestVMa(0);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for SDAirDropMessage(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100322434(v0, (uint64_t)v9);
  v10 = (char *)sub_10044FA94 + 4 * byte_1005D866A[swift_getEnumCaseMultiPayload(v9, v7)];
  __asm { BR              X10 }
}

uint64_t sub_10044FA94()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = Data.description.getter(*v0, v2);
  sub_100225AB4(v1, v2);
  return v3;
}

uint64_t sub_10044FE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1198);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1198);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10044FF04(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10044FF40 + 4 * byte_1005D8678[a1]))(0x7165526F6C6C6568, 0xEC00000074736575);
}

uint64_t sub_10044FF40()
{
  return 0x7365526F6C6C6568;
}

void sub_100450098(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD v40[9];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;

  v2 = sub_100008384(&qword_1007C13B0);
  v82 = *(_QWORD *)(v2 - 8);
  v83 = v2;
  __chkstk_darwin(v2);
  v81 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384(&qword_1007C13B8);
  v79 = *(_QWORD *)(v4 - 8);
  v80 = v4;
  __chkstk_darwin(v4);
  v78 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = _s12ErrorRequestVMa(0);
  __chkstk_darwin(v75);
  v77 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100008384(&qword_1007C13C0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v70 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100008384(&qword_1007C13C8);
  v73 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v71 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384(&qword_1007C13D0);
  v68 = *(_QWORD *)(v9 - 8);
  v69 = v9;
  __chkstk_darwin(v9);
  v67 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = _s16ExchangeResponseVMa(0);
  __chkstk_darwin(v64);
  v66 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100008384(&qword_1007C13D8);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v62 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = _s15ExchangeRequestVMa(0);
  __chkstk_darwin(v60);
  v61 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008384(&qword_1007C13E0);
  v58 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  __chkstk_darwin(v14);
  v57 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008384(&qword_1007C13E8);
  v55 = *(_QWORD *)(v16 - 8);
  v56 = v16;
  __chkstk_darwin(v16);
  v54 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = _s13UploadRequestVMa(0);
  __chkstk_darwin(v49);
  v52 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100008384(&qword_1007C13F0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008384(&qword_1007C13F8);
  v47 = *(_QWORD *)(v20 - 8);
  v48 = v20;
  __chkstk_darwin(v20);
  v45 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = _s10AskRequestVMa(0);
  __chkstk_darwin(v41);
  v44 = (char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100008384(&qword_1007C1400);
  v43 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100008384(&qword_1007C1408);
  v40[7] = *(_QWORD *)(v24 - 8);
  v40[8] = v24;
  __chkstk_darwin(v24);
  v40[6] = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008384(&qword_1007C1410);
  v40[4] = *(_QWORD *)(v26 - 8);
  v40[5] = v26;
  __chkstk_darwin(v26);
  v40[3] = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100008384(&qword_1007C1418);
  v40[1] = *(_QWORD *)(v28 - 8);
  v40[2] = v28;
  __chkstk_darwin(v28);
  v40[0] = (char *)v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = _s12HelloRequestVMa(0);
  __chkstk_darwin(v30);
  v31 = type metadata accessor for SDAirDropMessage(0);
  __chkstk_darwin(v31);
  v33 = (char *)v40 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100008384(&qword_1007C1420);
  v84 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v35 = (char *)v40 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1[3];
  v36 = a1[4];
  sub_10023A834(a1, v37);
  v38 = sub_1004533C0();
  v85 = v35;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SDAirDropMessage.CodingKeys, &type metadata for SDAirDropMessage.CodingKeys, v38, v37, v36);
  sub_100322434(v86, (uint64_t)v33);
  v39 = (char *)sub_1004506A4 + 4 * word_1005D8686[swift_getEnumCaseMultiPayload(v33, v31)];
  __asm { BR              X10 }
}

uint64_t sub_1004506A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100221DB4(v3, v2, _s12HelloRequestVMa);
  *(_BYTE *)(v4 - 240) = 0;
  v5 = sub_1004538CC();
  v6 = *v0;
  v7 = *(_QWORD *)(v4 - 72);
  v8 = v0[53];
  ((void (*)(ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))(&type metadata for SDAirDropMessage.HelloRequestCodingKeys, v4 - 240, v7, &type metadata for SDAirDropMessage.HelloRequestCodingKeys, v5);
  v9 = sub_100220D78(&qword_1007C1478, _s12HelloRequestVMa, (uint64_t)&unk_1005DBF70);
  v10 = v0[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v11, v10, v1, v9);
  (*(void (**)(uint64_t, uint64_t))(v0[1] + 8))(v6, v10);
  sub_1002443C8(v2, _s12HelloRequestVMa);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[52] + 8))(v8, v7);
}

uint64_t sub_10045115C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  _QWORD v69[28];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;

  v97 = a2;
  v83 = sub_100008384(&qword_1007C1260);
  v69[23] = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v103 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100008384(&qword_1007C1268);
  v69[22] = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v96 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100008384(&qword_1007C1270);
  v69[21] = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v95 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100008384(&qword_1007C1278);
  v69[20] = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v94 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100008384(&qword_1007C1280);
  v69[19] = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v93 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100008384(&qword_1007C1288);
  v69[12] = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v92 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100008384(&qword_1007C1290);
  v69[18] = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v91 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100008384(&qword_1007C1298);
  v69[17] = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v90 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100008384(&qword_1007C12A0);
  v69[16] = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v89 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100008384(&qword_1007C12A8);
  v69[15] = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v88 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100008384(&qword_1007C12B0);
  v101 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v87 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100008384(&qword_1007C12B8);
  v69[14] = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v86 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100008384(&qword_1007C12C0);
  v69[13] = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v85 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100008384(&qword_1007C12C8);
  v71 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v100 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100008384(&qword_1007C12D0);
  v98 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v106 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for SDAirDropMessage(0);
  v18 = __chkstk_darwin(v99);
  v69[11] = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v69[27] = (char *)v69 - v21;
  v22 = __chkstk_darwin(v20);
  v69[9] = (char *)v69 - v23;
  v24 = __chkstk_darwin(v22);
  v69[10] = (char *)v69 - v25;
  v26 = __chkstk_darwin(v24);
  v69[26] = (char *)v69 - v27;
  v28 = __chkstk_darwin(v26);
  v69[25] = (char *)v69 - v29;
  v30 = __chkstk_darwin(v28);
  v69[8] = (char *)v69 - v31;
  v32 = __chkstk_darwin(v30);
  v69[24] = (char *)v69 - v33;
  v34 = __chkstk_darwin(v32);
  v69[7] = (char *)v69 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (char *)v69 - v37;
  v39 = __chkstk_darwin(v36);
  v41 = (char *)v69 - v40;
  v42 = __chkstk_darwin(v39);
  v44 = (char *)v69 - v43;
  v45 = __chkstk_darwin(v42);
  v47 = (char *)v69 - v46;
  v48 = __chkstk_darwin(v45);
  v50 = (char *)v69 - v49;
  __chkstk_darwin(v48);
  v52 = (char *)v69 - v51;
  v54 = a1[3];
  v53 = a1[4];
  v104 = a1;
  sub_10023A834(a1, v54);
  v55 = sub_1004533C0();
  v56 = v105;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SDAirDropMessage.CodingKeys, &type metadata for SDAirDropMessage.CodingKeys, v55, v54, v53);
  if (!v56)
  {
    v69[1] = v47;
    v69[4] = v50;
    v69[2] = v44;
    v69[5] = v38;
    v69[3] = v41;
    v105 = 0;
    v57 = v99;
    v69[6] = v52;
    v58 = v102;
    v59 = v106;
    v60 = KeyedDecodingContainer.allKeys.getter(v102);
    v61 = (const char *)v60;
    if (*(_QWORD *)(v60 + 16) == 1)
      __asm { BR              X10 }
    v62 = type metadata accessor for DecodingError(0);
    swift_allocError(v62, &protocol witness table for DecodingError, 0, 0);
    v64 = v63;
    sub_100008384(&qword_1007C12E0);
    *v64 = v57;
    v65 = KeyedDecodingContainer.codingPath.getter(v58);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v65, 0xD00000000000002BLL, 0x800000010061BBE0, 0);
    v66 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v62 - 8) + 104))(v64, enum case for DecodingError.typeMismatch(_:), v62);
    swift_willThrow(v66);
    v67 = swift_bridgeObjectRelease(v61);
    (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v59, v58, v67);
  }
  return sub_10022E75C(v104);
}

void sub_100451A6C()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  __n128 v17;

  *(_BYTE *)(v3 - 240) = 1;
  v4 = sub_100453844();
  v5 = *(_QWORD *)(v3 - 408);
  v6 = v1;
  v7 = *(_QWORD *)(v3 - 72);
  v8 = *(_QWORD *)(v3 - 248);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDAirDropMessage.HelloResponseCodingKeys, v3 - 240, v1, &type metadata for SDAirDropMessage.HelloResponseCodingKeys, v4);
  if (!v8)
  {
    v9 = v0;
    v10 = sub_100453888();
    v11 = *(_QWORD *)(v3 - 512);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&_s13HelloResponseVN, v12, v11, &_s13HelloResponseVN, v10);
    v13 = *(_QWORD *)(v3 - 304);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 648) + 8))(v5, v11);
    v14 = swift_bridgeObjectRelease(v2);
    (*(void (**)(_QWORD, uint64_t, __n128))(v13 + 8))(*(_QWORD *)(v3 - 72), v6, v14);
    v15 = *(_BYTE *)(v3 - 236);
    v16 = *(_QWORD *)(v3 - 744);
    *(_DWORD *)v16 = *(_DWORD *)(v3 - 240);
    *(_BYTE *)(v16 + 4) = v15;
    swift_storeEnumTagMultiPayload(v16, v9, 1);
    sub_100221DB4(v16, *(_QWORD *)(v3 - 704), type metadata accessor for SDAirDropMessage);
    JUMPOUT(0x100452888);
  }
  v17 = swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v3 - 304) + 8))(v7, v1, v17);
  JUMPOUT(0x100451A40);
}

void sub_1004523B8()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;

  *(_BYTE *)(v3 - 240) = 12;
  v4 = sub_100453448();
  v5 = *(_QWORD *)(v3 - 320);
  v6 = v1;
  v7 = *(_QWORD *)(v3 - 72);
  v8 = *(_QWORD *)(v3 - 248);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDAirDropMessage.ErrorRequestCodingKeys, v3 - 240, v1, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys, v4);
  if (v8)
  {
    v9 = swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v3 - 304) + 8))(v7, v1, v9);
  }
  else
  {
    v10 = v0;
    v11 = _s12ErrorRequestVMa(0);
    v12 = sub_100220D78(&qword_1007C12F8, _s12ErrorRequestVMa, (uint64_t)&unk_1005D8270);
    v13 = *(_QWORD *)(v3 - 536);
    v14 = *(_QWORD *)(v3 - 416);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v15, v14, v11, v12);
    v16 = *(_QWORD *)(v3 - 304);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 576) + 8))(v5, v14);
    v17 = swift_bridgeObjectRelease(v2);
    (*(void (**)(_QWORD, uint64_t, __n128))(v16 + 8))(*(_QWORD *)(v3 - 72), v6, v17);
    swift_storeEnumTagMultiPayload(v13, v10, 12);
    v18 = *(_QWORD *)(v3 - 704);
    sub_100221DB4(v13, v18, type metadata accessor for SDAirDropMessage);
    sub_100221DB4(v18, *(_QWORD *)(v3 - 312), type metadata accessor for SDAirDropMessage);
  }
  JUMPOUT(0x100451A40);
}

void sub_10045241C()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  *(_BYTE *)(v3 - 240) = 13;
  v4 = sub_100453404();
  v5 = *(_QWORD *)(v3 - 248);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDAirDropMessage.ErrorResponseCodingKeys, v3 - 240, v1, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys, v4);
  if (!v5)
  {
    v6 = sub_100285DA0();
    v7 = *(_QWORD *)(v3 - 424);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v8, v7, &type metadata for Data, v6);
    v9 = *(_QWORD *)(v3 - 304);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 568) + 8))(v0, v7);
    v10 = swift_bridgeObjectRelease(v2);
    (*(void (**)(_QWORD, uint64_t, __n128))(v9 + 8))(*(_QWORD *)(v3 - 72), v1, v10);
    *(_OWORD *)*(_QWORD *)(v3 - 664) = *(_OWORD *)(v3 - 240);
    JUMPOUT(0x1004527E0);
  }
  JUMPOUT(0x100451A1CLL);
}

uint64_t sub_100452910()
{
  return 0x74736575716572;
}

uint64_t sub_10045292C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004536F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452954(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004536F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10045297C()
{
  return 0x65736E6F70736572;
}

uint64_t sub_100452998(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453668();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004529C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453668();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004529E8()
{
  unsigned __int8 *v0;

  return sub_10044FF04(*v0);
}

uint64_t sub_1004529F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004549DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100452A14(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_100452A20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004533C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452A48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004533C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452A70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004537BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452A98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004537BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453734();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452AE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453734();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452B10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453448();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452B38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453448();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452B60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453404();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452B88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453404();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452BB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10045359C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452BD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10045359C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452C00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453558();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452C28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453558();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452C50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004538CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452C78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004538CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452CA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453844();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452CC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453844();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452CF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004534D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452D18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004534D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452D40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10045348C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452D68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10045348C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74736575716572, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100452E24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453624();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452E4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100453624();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100452F08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004535E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100452F30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004535E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100452F58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10045115C(a1, a2);
}

void sub_100452F6C(_QWORD *a1)
{
  sub_100450098(a1);
}

uint64_t sub_100452F84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;

  v2 = v1;
  v4 = _s12ErrorRequestVMa(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s15ExchangeRequestVMa(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s13UploadRequestVMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _s10AskRequestVMa(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = _s12HelloRequestVMa(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SDAirDropMessage(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100322434(v2, (uint64_t)v21);
  HIDWORD(v22) = swift_getEnumCaseMultiPayload(v21, v19);
  LODWORD(v22) = HIDWORD(v22);
  switch((v22 >> 1))
  {
    case 0u:
      sub_100221DB4((uint64_t)v21, (uint64_t)v18, _s12HelloRequestVMa);
      v23 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v24 = *(_QWORD *)(v23 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v18, v23);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
    case 2u:
      v34 = _s10AskRequestVMa;
      sub_100221DB4((uint64_t)v21, (uint64_t)v15, _s10AskRequestVMa);
      sub_100453378((uint64_t)v15, a1);
      v33 = (uint64_t)v15;
      goto LABEL_10;
    case 3u:
      v34 = _s13UploadRequestVMa;
      sub_100221DB4((uint64_t)v21, (uint64_t)v12, _s13UploadRequestVMa);
      sub_100453378((uint64_t)v12, a1);
      v33 = (uint64_t)v12;
LABEL_10:
      v32 = v34;
      goto LABEL_11;
    case 4u:
      sub_100221DB4((uint64_t)v21, (uint64_t)v9, _s15ExchangeRequestVMa);
      v35 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v36 = *(_QWORD *)(v35 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(a1, v9, v35);
      v37 = (uint64_t)v9;
      v38 = _s15ExchangeRequestVMa;
      goto LABEL_14;
    case 6u:
      sub_100221DB4((uint64_t)v21, (uint64_t)v6, _s12ErrorRequestVMa);
      v35 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      v36 = *(_QWORD *)(v35 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(a1, v6, v35);
      v37 = (uint64_t)v6;
      v38 = _s12ErrorRequestVMa;
LABEL_14:
      sub_1002443C8(v37, v38);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v35);
      break;
    default:
      if (qword_1007B4118 != -1)
        swift_once(&qword_1007B4118, sub_10044FE74);
      v26 = type metadata accessor for Logger(0);
      v27 = sub_100221DF8(v26, (uint64_t)qword_1007C1198);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected request type for transferID", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      v31 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a1, 1, 1, v31);
      v32 = type metadata accessor for SDAirDropMessage;
      v33 = (uint64_t)v21;
LABEL_11:
      result = sub_1002443C8(v33, v32);
      break;
  }
  return result;
}

uint64_t sub_100453378(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384((uint64_t *)&unk_1007B7E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004533C0()
{
  unint64_t result;

  result = qword_1007C12D8;
  if (!qword_1007C12D8)
  {
    result = swift_getWitnessTable(&unk_1005D9910, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C12D8);
  }
  return result;
}

unint64_t sub_100453404()
{
  unint64_t result;

  result = qword_1007C12E8;
  if (!qword_1007C12E8)
  {
    result = swift_getWitnessTable(&unk_1005D98C0, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C12E8);
  }
  return result;
}

unint64_t sub_100453448()
{
  unint64_t result;

  result = qword_1007C12F0;
  if (!qword_1007C12F0)
  {
    result = swift_getWitnessTable(&unk_1005D9870, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C12F0);
  }
  return result;
}

unint64_t sub_10045348C()
{
  unint64_t result;

  result = qword_1007C1300;
  if (!qword_1007C1300)
  {
    result = swift_getWitnessTable(&unk_1005D9820, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1300);
  }
  return result;
}

unint64_t sub_1004534D0()
{
  unint64_t result;

  result = qword_1007C1308;
  if (!qword_1007C1308)
  {
    result = swift_getWitnessTable(&unk_1005D97D0, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1308);
  }
  return result;
}

unint64_t sub_100453514()
{
  unint64_t result;

  result = qword_1007C1310;
  if (!qword_1007C1310)
  {
    result = swift_getWitnessTable(&unk_1005D13C8, &_s20IdentityShareRequestVN);
    atomic_store(result, (unint64_t *)&qword_1007C1310);
  }
  return result;
}

unint64_t sub_100453558()
{
  unint64_t result;

  result = qword_1007C1318;
  if (!qword_1007C1318)
  {
    result = swift_getWitnessTable(&unk_1005D9780, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1318);
  }
  return result;
}

unint64_t sub_10045359C()
{
  unint64_t result;

  result = qword_1007C1328;
  if (!qword_1007C1328)
  {
    result = swift_getWitnessTable(&unk_1005D9730, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1328);
  }
  return result;
}

unint64_t sub_1004535E0()
{
  unint64_t result;

  result = qword_1007C1338;
  if (!qword_1007C1338)
  {
    result = swift_getWitnessTable(&unk_1005D96E0, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1338);
  }
  return result;
}

unint64_t sub_100453624()
{
  unint64_t result;

  result = qword_1007C1340;
  if (!qword_1007C1340)
  {
    result = swift_getWitnessTable(&unk_1005D9690, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1340);
  }
  return result;
}

unint64_t sub_100453668()
{
  unint64_t result;

  result = qword_1007C1350;
  if (!qword_1007C1350)
  {
    result = swift_getWitnessTable(&unk_1005D9640, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1350);
  }
  return result;
}

unint64_t sub_1004536AC()
{
  unint64_t result;

  result = qword_1007C1358;
  if (!qword_1007C1358)
  {
    result = swift_getWitnessTable(&unk_1005DA408, &_s11AskResponseVN);
    atomic_store(result, (unint64_t *)&qword_1007C1358);
  }
  return result;
}

unint64_t sub_1004536F0()
{
  unint64_t result;

  result = qword_1007C1360;
  if (!qword_1007C1360)
  {
    result = swift_getWitnessTable(&unk_1005D95F0, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1360);
  }
  return result;
}

unint64_t sub_100453734()
{
  unint64_t result;

  result = qword_1007C1370;
  if (!qword_1007C1370)
  {
    result = swift_getWitnessTable(&unk_1005D95A0, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1370);
  }
  return result;
}

unint64_t sub_100453778()
{
  unint64_t result;

  result = qword_1007C1378;
  if (!qword_1007C1378)
  {
    result = swift_getWitnessTable(&unk_1005D3E54, &_s16DiscoverResponseVN);
    atomic_store(result, (unint64_t *)&qword_1007C1378);
  }
  return result;
}

unint64_t sub_1004537BC()
{
  unint64_t result;

  result = qword_1007C1380;
  if (!qword_1007C1380)
  {
    result = swift_getWitnessTable(&unk_1005D9550, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1380);
  }
  return result;
}

unint64_t sub_100453800()
{
  unint64_t result;

  result = qword_1007C1388;
  if (!qword_1007C1388)
  {
    result = swift_getWitnessTable(&unk_1005D3E7C, &_s15DiscoverRequestVN);
    atomic_store(result, (unint64_t *)&qword_1007C1388);
  }
  return result;
}

unint64_t sub_100453844()
{
  unint64_t result;

  result = qword_1007C1390;
  if (!qword_1007C1390)
  {
    result = swift_getWitnessTable(&unk_1005D9500, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1390);
  }
  return result;
}

unint64_t sub_100453888()
{
  unint64_t result;

  result = qword_1007C1398;
  if (!qword_1007C1398)
  {
    result = swift_getWitnessTable(&unk_1005DC010, &_s13HelloResponseVN);
    atomic_store(result, (unint64_t *)&qword_1007C1398);
  }
  return result;
}

unint64_t sub_1004538CC()
{
  unint64_t result;

  result = qword_1007C13A0;
  if (!qword_1007C13A0)
  {
    result = swift_getWitnessTable(&unk_1005D94B0, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C13A0);
  }
  return result;
}

unint64_t sub_100453910()
{
  unint64_t result;

  result = qword_1007C1430;
  if (!qword_1007C1430)
  {
    result = swift_getWitnessTable(&unk_1005D13A0, &_s20IdentityShareRequestVN);
    atomic_store(result, (unint64_t *)&qword_1007C1430);
  }
  return result;
}

unint64_t sub_100453954()
{
  unint64_t result;

  result = qword_1007C1450;
  if (!qword_1007C1450)
  {
    result = swift_getWitnessTable(&unk_1005DA3E0, &_s11AskResponseVN);
    atomic_store(result, (unint64_t *)&qword_1007C1450);
  }
  return result;
}

unint64_t sub_100453998()
{
  unint64_t result;

  result = qword_1007C1460;
  if (!qword_1007C1460)
  {
    result = swift_getWitnessTable(&unk_1005D3ECC, &_s16DiscoverResponseVN);
    atomic_store(result, (unint64_t *)&qword_1007C1460);
  }
  return result;
}

unint64_t sub_1004539DC()
{
  unint64_t result;

  result = qword_1007C1468;
  if (!qword_1007C1468)
  {
    result = swift_getWitnessTable(&unk_1005D3EA4, &_s15DiscoverRequestVN);
    atomic_store(result, (unint64_t *)&qword_1007C1468);
  }
  return result;
}

unint64_t sub_100453A20()
{
  unint64_t result;

  result = qword_1007C1470;
  if (!qword_1007C1470)
  {
    result = swift_getWitnessTable(&unk_1005DBFE8, &_s13HelloResponseVN);
    atomic_store(result, (unint64_t *)&qword_1007C1470);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SDAirDropMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SDAirDropMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100453B40 + 4 * byte_1005D86CA[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100453B74 + 4 * byte_1005D86C5[v4]))();
}

uint64_t sub_100453B74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100453B7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100453B84);
  return result;
}

uint64_t sub_100453B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100453B98);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_100453B9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100453BA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.CodingKeys()
{
  return &type metadata for SDAirDropMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.HelloRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.HelloRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.HelloResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.HelloResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.DiscoverRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.DiscoverResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.AskRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.AskRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.AskResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.AskResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.UploadRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.UploadRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.UploadResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.UploadResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ExchangeRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ExchangeResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.IdentityShareRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.IdentityShareResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ErrorRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.ErrorRequestCodingKeys;
}

uint64_t _s16DaemoniOSLibrary16SDAirDropMessageO22HelloRequestCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100453CD8 + 4 * byte_1005D86CF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100453CF8 + 4 * byte_1005D86D4[v4]))();
}

_BYTE *sub_100453CD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100453CF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100453D00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100453D08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100453D10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100453D18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ErrorResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.ErrorResponseCodingKeys;
}

unint64_t sub_100453D38()
{
  unint64_t result;

  result = qword_1007C1480;
  if (!qword_1007C1480)
  {
    result = swift_getWitnessTable(&unk_1005D8A78, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1480);
  }
  return result;
}

unint64_t sub_100453D80()
{
  unint64_t result;

  result = qword_1007C1488;
  if (!qword_1007C1488)
  {
    result = swift_getWitnessTable(&unk_1005D8B30, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1488);
  }
  return result;
}

unint64_t sub_100453DC8()
{
  unint64_t result;

  result = qword_1007C1490;
  if (!qword_1007C1490)
  {
    result = swift_getWitnessTable(&unk_1005D8BE8, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1490);
  }
  return result;
}

unint64_t sub_100453E10()
{
  unint64_t result;

  result = qword_1007C1498;
  if (!qword_1007C1498)
  {
    result = swift_getWitnessTable(&unk_1005D8CA0, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1498);
  }
  return result;
}

unint64_t sub_100453E58()
{
  unint64_t result;

  result = qword_1007C14A0;
  if (!qword_1007C14A0)
  {
    result = swift_getWitnessTable(&unk_1005D8D58, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14A0);
  }
  return result;
}

unint64_t sub_100453EA0()
{
  unint64_t result;

  result = qword_1007C14A8;
  if (!qword_1007C14A8)
  {
    result = swift_getWitnessTable(&unk_1005D8E10, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14A8);
  }
  return result;
}

unint64_t sub_100453EE8()
{
  unint64_t result;

  result = qword_1007C14B0;
  if (!qword_1007C14B0)
  {
    result = swift_getWitnessTable(&unk_1005D8EC8, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14B0);
  }
  return result;
}

unint64_t sub_100453F30()
{
  unint64_t result;

  result = qword_1007C14B8;
  if (!qword_1007C14B8)
  {
    result = swift_getWitnessTable(&unk_1005D8F80, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14B8);
  }
  return result;
}

unint64_t sub_100453F78()
{
  unint64_t result;

  result = qword_1007C14C0;
  if (!qword_1007C14C0)
  {
    result = swift_getWitnessTable(&unk_1005D9038, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14C0);
  }
  return result;
}

unint64_t sub_100453FC0()
{
  unint64_t result;

  result = qword_1007C14C8;
  if (!qword_1007C14C8)
  {
    result = swift_getWitnessTable(&unk_1005D90F0, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14C8);
  }
  return result;
}

unint64_t sub_100454008()
{
  unint64_t result;

  result = qword_1007C14D0;
  if (!qword_1007C14D0)
  {
    result = swift_getWitnessTable(&unk_1005D91A8, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14D0);
  }
  return result;
}

unint64_t sub_100454050()
{
  unint64_t result;

  result = qword_1007C14D8;
  if (!qword_1007C14D8)
  {
    result = swift_getWitnessTable(&unk_1005D9260, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14D8);
  }
  return result;
}

unint64_t sub_100454098()
{
  unint64_t result;

  result = qword_1007C14E0;
  if (!qword_1007C14E0)
  {
    result = swift_getWitnessTable(&unk_1005D9318, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14E0);
  }
  return result;
}

unint64_t sub_1004540E0()
{
  unint64_t result;

  result = qword_1007C14E8;
  if (!qword_1007C14E8)
  {
    result = swift_getWitnessTable(&unk_1005D93D0, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14E8);
  }
  return result;
}

unint64_t sub_100454128()
{
  unint64_t result;

  result = qword_1007C14F0;
  if (!qword_1007C14F0)
  {
    result = swift_getWitnessTable(&unk_1005D9488, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14F0);
  }
  return result;
}

unint64_t sub_100454170()
{
  unint64_t result;

  result = qword_1007C14F8;
  if (!qword_1007C14F8)
  {
    result = swift_getWitnessTable(&unk_1005D9340, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C14F8);
  }
  return result;
}

unint64_t sub_1004541B8()
{
  unint64_t result;

  result = qword_1007C1500;
  if (!qword_1007C1500)
  {
    result = swift_getWitnessTable(&unk_1005D9368, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1500);
  }
  return result;
}

unint64_t sub_100454200()
{
  unint64_t result;

  result = qword_1007C1508;
  if (!qword_1007C1508)
  {
    result = swift_getWitnessTable(&unk_1005D9288, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1508);
  }
  return result;
}

unint64_t sub_100454248()
{
  unint64_t result;

  result = qword_1007C1510;
  if (!qword_1007C1510)
  {
    result = swift_getWitnessTable(&unk_1005D92B0, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1510);
  }
  return result;
}

unint64_t sub_100454290()
{
  unint64_t result;

  result = qword_1007C1518;
  if (!qword_1007C1518)
  {
    result = swift_getWitnessTable(&unk_1005D91D0, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1518);
  }
  return result;
}

unint64_t sub_1004542D8()
{
  unint64_t result;

  result = qword_1007C1520;
  if (!qword_1007C1520)
  {
    result = swift_getWitnessTable(&unk_1005D91F8, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1520);
  }
  return result;
}

unint64_t sub_100454320()
{
  unint64_t result;

  result = qword_1007C1528;
  if (!qword_1007C1528)
  {
    result = swift_getWitnessTable(&unk_1005D9118, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1528);
  }
  return result;
}

unint64_t sub_100454368()
{
  unint64_t result;

  result = qword_1007C1530;
  if (!qword_1007C1530)
  {
    result = swift_getWitnessTable(&unk_1005D9140, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1530);
  }
  return result;
}

unint64_t sub_1004543B0()
{
  unint64_t result;

  result = qword_1007C1538;
  if (!qword_1007C1538)
  {
    result = swift_getWitnessTable(&unk_1005D9060, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1538);
  }
  return result;
}

unint64_t sub_1004543F8()
{
  unint64_t result;

  result = qword_1007C1540;
  if (!qword_1007C1540)
  {
    result = swift_getWitnessTable(&unk_1005D9088, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1540);
  }
  return result;
}

unint64_t sub_100454440()
{
  unint64_t result;

  result = qword_1007C1548;
  if (!qword_1007C1548)
  {
    result = swift_getWitnessTable(&unk_1005D8FA8, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1548);
  }
  return result;
}

unint64_t sub_100454488()
{
  unint64_t result;

  result = qword_1007C1550;
  if (!qword_1007C1550)
  {
    result = swift_getWitnessTable(&unk_1005D8FD0, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1550);
  }
  return result;
}

unint64_t sub_1004544D0()
{
  unint64_t result;

  result = qword_1007C1558;
  if (!qword_1007C1558)
  {
    result = swift_getWitnessTable(&unk_1005D8EF0, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1558);
  }
  return result;
}

unint64_t sub_100454518()
{
  unint64_t result;

  result = qword_1007C1560;
  if (!qword_1007C1560)
  {
    result = swift_getWitnessTable(&unk_1005D8F18, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1560);
  }
  return result;
}

unint64_t sub_100454560()
{
  unint64_t result;

  result = qword_1007C1568;
  if (!qword_1007C1568)
  {
    result = swift_getWitnessTable(&unk_1005D8E38, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1568);
  }
  return result;
}

unint64_t sub_1004545A8()
{
  unint64_t result;

  result = qword_1007C1570;
  if (!qword_1007C1570)
  {
    result = swift_getWitnessTable(&unk_1005D8E60, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1570);
  }
  return result;
}

unint64_t sub_1004545F0()
{
  unint64_t result;

  result = qword_1007C1578;
  if (!qword_1007C1578)
  {
    result = swift_getWitnessTable(&unk_1005D8D80, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1578);
  }
  return result;
}

unint64_t sub_100454638()
{
  unint64_t result;

  result = qword_1007C1580;
  if (!qword_1007C1580)
  {
    result = swift_getWitnessTable(&unk_1005D8DA8, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1580);
  }
  return result;
}

unint64_t sub_100454680()
{
  unint64_t result;

  result = qword_1007C1588;
  if (!qword_1007C1588)
  {
    result = swift_getWitnessTable(&unk_1005D8CC8, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1588);
  }
  return result;
}

unint64_t sub_1004546C8()
{
  unint64_t result;

  result = qword_1007C1590;
  if (!qword_1007C1590)
  {
    result = swift_getWitnessTable(&unk_1005D8CF0, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1590);
  }
  return result;
}

unint64_t sub_100454710()
{
  unint64_t result;

  result = qword_1007C1598;
  if (!qword_1007C1598)
  {
    result = swift_getWitnessTable(&unk_1005D8C10, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C1598);
  }
  return result;
}

unint64_t sub_100454758()
{
  unint64_t result;

  result = qword_1007C15A0;
  if (!qword_1007C15A0)
  {
    result = swift_getWitnessTable(&unk_1005D8C38, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15A0);
  }
  return result;
}

unint64_t sub_1004547A0()
{
  unint64_t result;

  result = qword_1007C15A8;
  if (!qword_1007C15A8)
  {
    result = swift_getWitnessTable(&unk_1005D8B58, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15A8);
  }
  return result;
}

unint64_t sub_1004547E8()
{
  unint64_t result;

  result = qword_1007C15B0;
  if (!qword_1007C15B0)
  {
    result = swift_getWitnessTable(&unk_1005D8B80, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15B0);
  }
  return result;
}

unint64_t sub_100454830()
{
  unint64_t result;

  result = qword_1007C15B8;
  if (!qword_1007C15B8)
  {
    result = swift_getWitnessTable(&unk_1005D8AA0, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15B8);
  }
  return result;
}

unint64_t sub_100454878()
{
  unint64_t result;

  result = qword_1007C15C0;
  if (!qword_1007C15C0)
  {
    result = swift_getWitnessTable(&unk_1005D8AC8, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15C0);
  }
  return result;
}

unint64_t sub_1004548C0()
{
  unint64_t result;

  result = qword_1007C15C8;
  if (!qword_1007C15C8)
  {
    result = swift_getWitnessTable(&unk_1005D89E8, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15C8);
  }
  return result;
}

unint64_t sub_100454908()
{
  unint64_t result;

  result = qword_1007C15D0;
  if (!qword_1007C15D0)
  {
    result = swift_getWitnessTable(&unk_1005D8A10, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15D0);
  }
  return result;
}

unint64_t sub_100454950()
{
  unint64_t result;

  result = qword_1007C15D8;
  if (!qword_1007C15D8)
  {
    result = swift_getWitnessTable(&unk_1005D93F8, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15D8);
  }
  return result;
}

unint64_t sub_100454998()
{
  unint64_t result;

  result = qword_1007C15E0;
  if (!qword_1007C15E0)
  {
    result = swift_getWitnessTable(&unk_1005D9420, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1007C15E0);
  }
  return result;
}

uint64_t sub_1004549DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0x7165526F6C6C6568 && a2 == 0xEC00000074736575)
  {
    v5 = 0xEC00000074736575;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7165526F6C6C6568, 0xEC00000074736575, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7365526F6C6C6568 && a2 == 0xED000065736E6F70)
  {
    v7 = 0xED000065736E6F70;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365526F6C6C6568, 0xED000065736E6F70, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7265766F63736964 && a2 == 0xEF74736575716552)
  {
    v8 = 0xEF74736575716552;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265766F63736964, 0xEF74736575716552, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x800000010061BC10;
    if (a2 == 0x800000010061BC10)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010061BC10, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x65757165526B7361 && a2 == 0xEA00000000007473)
  {
    v10 = 0xEA00000000007473;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65757165526B7361, 0xEA00000000007473, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6F707365526B7361 && a2 == 0xEB0000000065736ELL)
  {
    v11 = 0xEB0000000065736ELL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F707365526B7361, 0xEB0000000065736ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x655264616F6C7075 && a2 == 0xED00007473657571)
  {
    v12 = 0xED00007473657571;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x655264616F6C7075, 0xED00007473657571, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x655264616F6C7075 && a2 == 0xEE0065736E6F7073)
  {
    v13 = 0xEE0065736E6F7073;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x655264616F6C7075, 0xEE0065736E6F7073, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x65676E6168637865 && a2 == 0xEF74736575716552)
  {
    v14 = 0xEF74736575716552;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6168637865, 0xEF74736575716552, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000010)
  {
    v15 = 0x800000010061BC30;
    if (a2 == 0x800000010061BC30)
      goto LABEL_60;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010061BC30, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010061BC50)
  {
    v16 = 0x800000010061BC50;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010061BC50, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010061BC70)
  {
    v17 = 0x800000010061BC70;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010061BC70, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0x716552726F727265 && a2 == 0xEC00000074736575)
  {
    v18 = 0xEC00000074736575;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x716552726F727265, 0xEC00000074736575, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x736552726F727265 && a2 == 0xED000065736E6F70)
  {
    swift_bridgeObjectRelease(0xED000065736E6F70);
    return 13;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736552726F727265, 0xED000065736E6F70, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

_QWORD *sub_100455060@<X0>(int a1@<W0>, unint64_t a2@<X1>, _QWORD *a3@<X3>, unint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_17;
  v4 = a2;
  if (!a2)
    return _swiftEmptyArrayStorage;
  LODWORD(v5) = a1;
  a3 = sub_100227EB4(0, 1, 1, _swiftEmptyArrayStorage);
  v7 = a3[2];
  a4 = a3[3];
  v6 = v7 + 1;
  if (v7 >= a4 >> 1)
    goto LABEL_18;
  while (1)
  {
    a3[2] = v6;
    *((_BYTE *)a3 + v7 + 32) = v5;
    if (v4 == 1)
      break;
    v8 = a3[3];
    if (v6 >= v8 >> 1)
      a3 = sub_100227EB4((_QWORD *)(v8 > 1), v7 + 2, 1, a3);
    a4 = v5 >> 8;
    a3[2] = v7 + 2;
    *((_BYTE *)a3 + v6 + 32) = BYTE1(v5);
    v5 = v4 - 2;
    if (v4 == 2)
      break;
    v6 = v7 + 34;
    for (i = 0xFFFFFFFFFFFFFFELL; i; --i)
    {
      a4 = a3[3];
      v4 = v6 - 31;
      if (v6 - 32 >= a4 >> 1)
        a3 = sub_100227EB4((_QWORD *)(a4 > 1), v6 - 31, 1, a3);
      a3[2] = v4;
      *((_BYTE *)a3 + v6++) = 0;
      if (!--v5)
        return a3;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    a3 = sub_100227EB4((_QWORD *)(a4 > 1), v6, 1, a3);
  }
  return a3;
}

uint64_t sub_1004551A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100220D78((unint64_t *)&unk_1007B7300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_100455328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10045545C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for CodableError(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100220D78(&qword_1007C1850, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100220D78(&qword_1007C1858, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1004555E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD v17[9];

  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (Hasher.init(_seed:)(v17),
        sub_1002B2164(),
        v8 = Hasher._finalize()(),
        v9 = -1 << *(_BYTE *)(a2 + 32),
        v10 = v8 & ~v9,
        ((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_100244384(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_1002BA1A4((uint64_t)v7, a1);
      v14 = v13;
      sub_1002443C8((uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_100455718(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_10023A834(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1003EE258(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_100474D88((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_100474E00((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_10022E75C(v8);
  return v6;
}

uint64_t sub_1004557D0(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  _QWORD v24[3];
  const char *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v27;
  __int128 v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = sub_100008384(&qword_1007B53F8);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = sub_100008384(&qword_1007C18B0);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384((uint64_t *)&unk_1007B5400);
  v8 = __chkstk_darwin(v7);
  v10 = (const char **)((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (char *)v24 - v11;
  *(_QWORD *)&v27 = a1;
  swift_bridgeObjectRetain(a1);
  v13 = sub_100008384(&qword_1007C18B8);
  v14 = sub_100008384(&qword_1007C18C0);
  if (!swift_dynamicCast(v28, &v27, v13, v14, 6))
  {
    v24[0] = 0;
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    sub_10000D0F0((uint64_t)v28, &qword_1007C18C8);
    v24[2] = v24;
    v28[0] = xmmword_1005D9960;
    v17 = *(int *)(v4 + 48);
    *v10 = a1;
    v10[1] = 0;
    v24[1] = v7;
    v18 = *(int *)(v7 + 44);
    v25 = a1;
    v19 = (char *)v10 + v18;
    v20 = type metadata accessor for Data.Iterator(0);
    v21 = v19;
    v22 = v25;
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
    v26(v21, 1, 1, v20);
    sub_1004777A0((uint64_t)v10, (uint64_t)v6);
    *(_QWORD *)&v6[v17] = 0;
    swift_bridgeObjectRetain(v22);
    sub_1004777A0((uint64_t)v6, (uint64_t)v12);
    __asm { BR              X12 }
  }
  sub_10026EE60(v28, (uint64_t)&v30);
  v15 = v31;
  v16 = v32;
  sub_10023A834(&v30, v31);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v27, sub_1004744BC, 0, &type metadata for Data._Representation, v15, v16);
  swift_bridgeObjectRelease(a1);
  v28[0] = v27;
  sub_10022E75C(&v30);
  return *(_QWORD *)&v28[0];
}

id cdbDatabaseInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v13 - v5;
  result = sub_10019BA08();
  if (result)
  {
    v8 = result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v11 = v10;

    URL.init(fileURLWithPath:)(v9, v11);
    swift_bridgeObjectRelease(v11);
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    v12 = *(void (**)(char *, uint64_t))(v1 + 8);
    v12(v6, v0);
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
    return (id)((uint64_t (*)(char *, uint64_t))v12)(v4, v0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100455F1C(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  double v15;
  double v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20[4];

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v17 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7)
      goto LABEL_23;
    v18 = *(_QWORD *)(v3 + 8 * v17);
    ++v2;
    if (!v18)
    {
      v2 = v17 + 1;
      if (v17 + 1 >= v7)
        goto LABEL_23;
      v18 = *(_QWORD *)(v3 + 8 * v2);
      if (!v18)
      {
        v2 = v17 + 2;
        if (v17 + 2 >= v7)
          goto LABEL_23;
        v18 = *(_QWORD *)(v3 + 8 * v2);
        if (!v18)
        {
          v2 = v17 + 3;
          if (v17 + 3 >= v7)
            goto LABEL_23;
          v18 = *(_QWORD *)(v3 + 8 * v2);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v18 - 1) & v18;
    v9 = __clz(__rbit64(v18)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v9);
    v11 = *v10;
    v12 = (const char *)v10[1];
    v13 = v10[2];
    v14 = (const char *)v10[3];
    *(_QWORD *)&v15 = swift_bridgeObjectRetain(v12).n128_u64[0];
    swift_bridgeObjectRetain(v14, v15);
    sub_10045F278(v20, v11, v12, v13, v14);
    *(_QWORD *)&v16 = swift_bridgeObjectRelease((const char *)v20[1]).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v20[3], v16);
  }
  v19 = v17 + 4;
  if (v19 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
  {
    v2 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v18 = *(_QWORD *)(v3 + 8 * v2);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1004560AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C15E8);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C15E8);
  if (qword_1007B3E90 != -1)
    swift_once(&qword_1007B3E90, sub_1002E9F5C);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8280);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::String *airdropHashDBPathComponent.unsafeMutableAddressor()
{
  return &airdropHashDBPathComponent;
}

uint64_t sub_100456148()
{
  uint64_t result;

  result = sub_100298FF4(44, 0xE100000000000000);
  if ((result & 0x100) != 0)
    __break(1u);
  else
    byte_1007D84B0 = result;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.load()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  double (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  char *v36;
  char *v37;
  char *v38;
  __n128 v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  id v43;
  NSString v44;
  double v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v56 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v56 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v56 - v14;
  v16 = __chkstk_darwin(v13);
  v21 = (char *)&v56 - v20;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    return;
  v57 = v19;
  v58 = v18;
  v59 = v17;
  v60 = v16;
  v56 = v0;
  v61 = v1;
  sub_100476050();
  v22 = sub_10019BA08();
  if (!v22)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  v23 = v22;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v26 = v25;

  URL.init(fileURLWithPath:)(v24, v26);
  swift_bridgeObjectRelease(v26);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  v27 = *(double (**)(char *, uint64_t))(v3 + 8);
  v28 = v12;
  v29 = v60;
  v27(v28, v60);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
  v27(v9, v29);
  v27(v15, v29);
  v30 = v61;
  sub_100456660((uint64_t)v21);
  if (v30)
  {
    v27(v21, v29);
    return;
  }
  v27(v21, v29);
  v31 = sub_10019BA08();
  if (!v31)
    goto LABEL_15;
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v35 = v34;

  v36 = v57;
  URL.init(fileURLWithPath:)(v33, v35);
  swift_bridgeObjectRelease(v35);
  v37 = v58;
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  v27(v36, v29);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  v38 = v59;
  URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
  v27(v9, v29);
  v39.n128_f64[0] = v27(v37, v29);
  URL.path.getter(v39);
  v41 = v40;
  v27(v38, v29);
  sub_1004763F0();
  v42 = v56;
  v43 = *(id *)(v56 + 16);
  v44 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v45 = swift_bridgeObjectRelease(v41).n128_u64[0];
  v62 = 0;
  LOBYTE(v41) = objc_msgSend(v43, "openAtPath:error:", v44, &v62, v45);

  v46 = v62;
  if ((v41 & 1) != 0)
  {
    v47 = qword_1007B4120;
    v48 = v62;
    if (v47 != -1)
      swift_once(&qword_1007B4120, sub_1004560AC);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_100221DF8(v49, (uint64_t)qword_1007C15E8);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "CDB: store loaded", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    *(_BYTE *)(v42 + 48) = 1;
  }
  else
  {
    v54 = v62;
    _convertNSErrorToError(_:)(v46);

    swift_willThrow(v55);
  }
}

uint64_t sub_100456660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  id v19;
  NSURL *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  NSString *v26;
  NSString *v27;
  const char *v28;
  Class isa;
  double v30;
  id v31;
  char *v32;
  __n128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42[24];
  id v43;
  uint64_t v44;
  char v45[72];
  uint64_t v46[3];

  v2 = type metadata accessor for URLResourceValues(0);
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  if (qword_1007B4120 != -1)
    swift_once(&qword_1007B4120, sub_1004560AC);
  v39 = v4;
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100221DF8(v9, (uint64_t)qword_1007C15E8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v46[0] = v14;
    v38 = v6;
    *(_DWORD *)v13 = 136315138;
    v15 = swift_beginAccess(v8, v42, 0, 0);
    v16 = URL.path.getter(v15);
    v18 = (const char *)v17;
    v43 = (id)sub_100228BD8(v16, v17, v46);
    v6 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v13 + 4);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Making AirDrop hash DB folder if doesn't exist: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  v19 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  swift_beginAccess(v8, v46, 0, 0);
  URL._bridgeToObjectiveC()(v20);
  v22 = v21;
  v23 = sub_100008384(&qword_1007C1940);
  inited = swift_initStackObject(v23, v45);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0);
  *(_QWORD *)(inited + 64) = v25;
  *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v26 = NSFileProtectionKey;
  v27 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v28 = (const char *)sub_10021F914(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_100220D78(&qword_1007B4C80, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE808);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v30 = swift_bridgeObjectRelease(v28).n128_u64[0];
  v43 = 0;
  LODWORD(v28) = objc_msgSend(v19, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v22, 1, isa, &v43, v30);

  v31 = v43;
  if ((_DWORD)v28)
  {
    v32 = v39;
    URLResourceValues.init()(v31);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v33 = swift_beginAccess(v8, &v43, 33, 0);
    URL.setResourceValues(_:)(v32, v33);
    swift_endAccess(&v43);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
  }
  else
  {
    v34 = v31;
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.stageAddEntries(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  const char *rawValue;
  int64_t v8;
  _QWORD *v9;
  const char **v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  const char **v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  const char *v23;
  double v24;
  double v25;
  uint64_t v26;
  const char *v27;
  _QWORD v28[5];

  if (*(_BYTE *)(v1 + 48) != 1)
  {
    v3 = 1;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    v3 = 2;
LABEL_5:
    v4 = sub_100444E44();
    v5 = swift_allocError(&type metadata for SDAirDropHashError, v4, 0, 0);
    *v6 = v3;
    swift_willThrow(v5);
    return;
  }
  rawValue = (const char *)a1._rawValue;
  v8 = *((_QWORD *)a1._rawValue + 2);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v28[4] = v2;
    v28[0] = _swiftEmptyArrayStorage;
    sub_100229940(0, v8, 0);
    v9 = _swiftEmptyArrayStorage;
    v27 = rawValue;
    v10 = (const char **)(rawValue + 40);
    do
    {
      v11 = (uint64_t)*(v10 - 1);
      v12 = *v10;
      v28[0] = v9;
      v13 = v9[2];
      v14 = v9[3];
      swift_bridgeObjectRetain(v12, v27);
      if (v13 >= v14 >> 1)
      {
        sub_100229940(v14 > 1, v13 + 1, 1);
        v9 = (_QWORD *)v28[0];
      }
      v10 += 9;
      v9[2] = v13 + 1;
      v15 = &v9[2 * v13];
      v15[4] = v11;
      v15[5] = v12;
      --v8;
    }
    while (v8);
    rawValue = v27;
  }
  *(_QWORD *)&v16 = swift_beginAccess(v1 + 40, v28, 33, 0).n128_u64[0];
  if (*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16))
  {
    v17 = v9[2];
    if (v17)
    {
      v18 = swift_bridgeObjectRetain((const char *)v9, v16).n128_u64[0];
      v19 = (const char **)(v9 + 5);
      do
      {
        v20 = (uint64_t)*(v19 - 1);
        v21 = *v19;
        swift_bridgeObjectRetain(*v19, *(double *)&v18);
        sub_100471DBC(v20, (uint64_t)v21);
        v23 = v22;
        *(_QWORD *)&v24 = swift_bridgeObjectRelease(v21).n128_u64[0];
        v18 = swift_bridgeObjectRelease(v23, v24).n128_u64[0];
        v19 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease((const char *)v9, *(double *)&v18);
    }
  }
  swift_endAccess(v28);
  swift_bridgeObjectRelease((const char *)v9);
  *(_QWORD *)&v25 = swift_beginAccess(v1 + 32, v28, 33, 0).n128_u64[0];
  swift_bridgeObjectRetain(rawValue, v25);
  sub_1003437E0(v26);
  swift_endAccess(v28);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.stageDeleteEntriesForContact(withID:)(Swift::String withID)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  const char *object;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22[3];
  uint8_t *v23;

  if (*(_BYTE *)(v1 + 48) != 1)
  {
    v3 = 1;
    goto LABEL_5;
  }
  v2 = v1;
  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    v3 = 2;
LABEL_5:
    v4 = sub_100444E44();
    v5 = swift_allocError(&type metadata for SDAirDropHashError, v4, 0, 0);
    *v6 = v3;
    swift_willThrow(v5);
    return;
  }
  object = (const char *)withID._object;
  countAndFlagsBits = withID._countAndFlagsBits;
  if (qword_1007B4120 != -1)
    swift_once(&qword_1007B4120, sub_1004560AC);
  v9 = type metadata accessor for Logger(0);
  sub_100221DF8(v9, (uint64_t)qword_1007C15E8);
  v10 = swift_bridgeObjectRetain_n(object, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v22[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v23 = v13 + 4;
    swift_bridgeObjectRetain(object);
    v20 = sub_100228BD8(countAndFlagsBits, (unint64_t)object, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v23);
    swift_bridgeObjectRelease_n(object, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CDB: Staging deletion of entries for contact id: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(object, 2);
  }
  *(_QWORD *)&v15 = swift_beginAccess(v2 + 32, v22, 33, 0).n128_u64[0];
  swift_bridgeObjectRetain(object, v15);
  sub_10047655C(v2 + 32, countAndFlagsBits, (uint64_t)object);
  v17 = v16;
  swift_bridgeObjectRelease(object);
  v18 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
  if (v18 < v17)
  {
    __break(1u);
  }
  else
  {
    sub_100476860(v17, v18);
    swift_endAccess(v22);
    *(_QWORD *)&v19 = swift_beginAccess(v2 + 40, v22, 33, 0).n128_u64[0];
    swift_bridgeObjectRetain(object, v19);
    sub_10045DF5C(&v20, countAndFlagsBits, (uint64_t)object);
    swift_endAccess(v22);
    swift_bridgeObjectRelease(v21);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.preparePersist()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  double (*v20)(char *, uint64_t);
  __n128 v21;
  const char *v22;
  const char *v23;
  void *v24;
  id v25;
  NSString v26;
  double v27;
  unsigned int v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v1 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v33 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v33 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v33 - v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)CUKeyValueStoreWriter), "init");
  v14 = *(void **)(v0 + 24);
  v35 = v0;
  *(_QWORD *)(v0 + 24) = v13;

  v15 = sub_10019BA08();
  if (!v15)
    __break(1u);
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  URL.init(fileURLWithPath:)(v17, v19);
  swift_bridgeObjectRelease(v19);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  v20 = *(double (**)(char *, uint64_t))(v34 + 8);
  v20(v7, v1);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
  v20(v4, v1);
  v21.n128_f64[0] = v20(v12, v1);
  URL.path.getter(v21);
  v23 = v22;
  v20(v10, v1);
  v24 = *(void **)(v35 + 24);
  if (v24)
  {
    v25 = v24;
    v26 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v23).n128_u64[0];
    v36 = 0;
    v28 = objc_msgSend(v25, "startAtPath:error:", v26, &v36, v27);

    v29 = v36;
    if (v28)
    {
      v30 = v36;
    }
    else
    {
      v31 = v36;
      _convertNSErrorToError(_:)(v29);

      swift_willThrow(v32);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v23);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.finishPersist()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  unsigned int v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t ObjCClassFromMetadata;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  double (*v31)(char *, uint64_t);
  __n128 v32;
  const char *v33;
  const char *v34;
  id v35;
  NSString v36;
  double v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;

  v2 = v0;
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v41 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v41 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = *(void **)(v2 + 24);
  if (v16)
  {
    v43 = 0;
    v17 = objc_msgSend(v16, "finishAndReturnError:", &v43);
    v18 = v43;
    if (!v17)
    {
LABEL_8:
      v39 = v18;
      _convertNSErrorToError(_:)(v18);

      swift_willThrow(v40);
      return;
    }
    v41 = v1;
    v42 = v4;
    v19 = *(void **)(v2 + 24);
    v20 = v43;
  }
  else
  {
    v41 = v1;
    v42 = v4;
    v19 = 0;
  }
  *(_QWORD *)(v2 + 24) = 0;

  objc_msgSend(*(id *)(v2 + 16), "close");
  v21 = sub_100221EDC(0, (unint64_t *)&qword_1007B42F0, NSData_ptr);
  v22 = objc_allocWithZone((Class)CUKeyValueStoreReader);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
  v24 = objc_msgSend(v22, "initWithKeyType:valueType:", ObjCClassFromMetadata, ObjCClassFromMetadata);
  v25 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v24;

  v26 = sub_10019BA08();
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

    URL.init(fileURLWithPath:)(v28, v30);
    swift_bridgeObjectRelease(v30);
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    v31 = *(double (**)(char *, uint64_t))(v42 + 8);
    v31(v10, v3);
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
    v31(v7, v3);
    v32.n128_f64[0] = v31(v15, v3);
    URL.path.getter(v32);
    v34 = v33;
    v31(v13, v3);
    v35 = *(id *)(v2 + 16);
    v36 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v37 = swift_bridgeObjectRelease(v34).n128_u64[0];
    v43 = 0;
    LOBYTE(v34) = objc_msgSend(v35, "openAtPath:error:", v36, &v43, v37);

    v18 = v43;
    if ((v34 & 1) != 0)
    {
      v38 = v43;
      return;
    }
    goto LABEL_8;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.persist()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char **v4;
  uint64_t v5;
  char *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  int64_t v36;
  uint64_t v37;
  const char **v38;
  const char *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t ObjCClassFromMetadata;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  id v52;
  void **v53;
  double v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  const char *v58;
  double v59;
  char *v60;
  const char *v61;
  uint64_t v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  void **v73;
  void **v74;
  void **v75;
  const char *v76;
  const char *v77;
  unint64_t v78;
  _QWORD *v79;
  size_t v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  void (*v113)(_QWORD *);
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  double v117;
  const char *v118;
  void (*v119)(uint64_t, uint64_t);
  _QWORD *v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  const char *v131;
  _QWORD *v132;
  uint64_t v133;
  size_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  char v143;
  char v144;
  const char *v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  const char *v154;
  const char **v155;
  unint64_t v156;
  int64_t v157;
  unint64_t v158;
  int64_t v159;
  const char *v160;
  uint64_t *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int64_t v169;
  unint64_t v170;
  int64_t v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  Class isa;
  id v176;
  id v177;
  uint64_t v178;
  os_log_type_t v179;
  uint8_t *v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  os_log_type_t v186;
  uint8_t *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char **v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  int64_t v197;
  const char *v198;
  const char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  _BYTE __dst[14];
  unsigned __int8 v206;
  uint64_t v207;
  unint64_t v208;
  char v209[24];
  void **aBlock;
  _QWORD v211[2];
  void *v212;
  void (*v213)(uint64_t, uint64_t);
  _QWORD *v214;
  char v215[8];
  char v216[8];

  v2 = v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(const char ***)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v188 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v2 + 48) != 1)
  {
    v7 = 1;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v2 + 49) & 1) != 0)
  {
    v7 = 2;
LABEL_5:
    v8 = sub_100444E44();
    v9 = swift_allocError(&type metadata for SDAirDropHashError, v8, 0, 0);
    *v10 = v7;
    swift_willThrow(v9);
    return;
  }
  v195 = v1;
  isUniquelyReferenced_nonNull_native = v2 + 32;
  swift_beginAccess(v2 + 32, v216, 1, 0);
  v12 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
  v13 = v2 + 40;
  swift_beginAccess(v2 + 40, v215, 1, 0);
  v14 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 16);
  v15 = __OFADD__(v12, v14);
  v16 = v12 + v14;
  if (v15)
    goto LABEL_147;
  if (v16 < 0)
    goto LABEL_157;
  if (!v16)
  {
    if (qword_1007B4120 != -1)
      swift_once(&qword_1007B4120, sub_1004560AC);
    v28 = sub_100221DF8(v3, (uint64_t)qword_1007C15E8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "CDB: Nothing to persist.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    goto LABEL_18;
  }
  if (qword_1007B4120 != -1)
    goto LABEL_150;
  while (1)
  {
    v17 = sub_100221DF8(v3, (uint64_t)qword_1007C15E8);
    v18 = v4[2];
    v192 = v17;
    ((void (*)(char *))v18)(v6);
    v19 = swift_retain(v2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v204 = (char *)v13;
    if (v22)
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v23 = 134217984;
      v24 = *(_QWORD *)(*(_QWORD *)isUniquelyReferenced_nonNull_native + 16);
      v25 = *(_QWORD *)(*(_QWORD *)v13 + 16);
      v15 = __OFADD__(v24, v25);
      v26 = (void **)(v24 + v25);
      if (v15)
      {
        __break(1u);
        goto LABEL_152;
      }
      if (((unint64_t)v26 & 0x8000000000000000) != 0)
        goto LABEL_156;
      v27 = v23;
      aBlock = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v211, v23 + 4);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "CDB: Persist %lu changes.", v27, 0xCu);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    ((void (*)(char *, uint64_t))v4[1])(v6, v3);
    v191 = mach_absolute_time();
    v32 = swift_allocObject(&unk_1007299C8, 24, 7);
    v33 = v32;
    *(_QWORD *)(v32 + 16) = &_swiftEmptyDictionarySingleton;
    v196 = (char *)(v32 + 16);
    v34 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    v35 = (void **)_swiftEmptyArrayStorage;
    *(_QWORD *)isUniquelyReferenced_nonNull_native = _swiftEmptyArrayStorage;
    v36 = *(_QWORD *)(v34 + 16);
    if (v36)
    {
      v194 = v2;
      v37 = v32;
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_100229940(0, v36, 0);
      v35 = aBlock;
      v38 = (const char **)(v34 + 40);
      do
      {
        v40 = (void *)*(v38 - 1);
        v39 = *v38;
        aBlock = v35;
        v42 = (unint64_t)v35[2];
        v41 = (unint64_t)v35[3];
        swift_bridgeObjectRetain(v39);
        if (v42 >= v41 >> 1)
        {
          sub_100229940(v41 > 1, v42 + 1, 1);
          v35 = aBlock;
        }
        v38 += 9;
        v35[2] = (void *)(v42 + 1);
        v43 = &v35[2 * v42];
        v43[4] = v40;
        v43[5] = (void *)v39;
        --v36;
      }
      while (v36);
      v33 = v37;
      v2 = v194;
    }
    v44 = sub_10022D31C((uint64_t)v35);
    swift_bridgeObjectRelease((const char *)v35);
    v4 = (const char **)swift_allocObject(&unk_1007299F0, 24, 7);
    v4[2] = 0;
    v45 = v4 + 2;
    v46 = *(void **)(v2 + 16);
    v47 = sub_100221EDC(0, (unint64_t *)&qword_1007B42F0, NSData_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v47);
    v49 = (_QWORD *)swift_allocObject(&unk_100729A18, 48, 7);
    v49[2] = v2;
    v49[3] = v4;
    v49[4] = v44;
    v49[5] = v33;
    v213 = sub_100476A6C;
    v214 = v49;
    aBlock = _NSConcreteStackBlock;
    v211[0] = 1107296256;
    v211[1] = sub_100459248;
    v212 = &unk_100729A30;
    v50 = _Block_copy(&aBlock);
    v51 = v214;
    swift_retain(v2);
    v52 = v46;
    swift_retain(v4);
    swift_retain(v33);
    swift_release(v51);
    aBlock = 0;
    LOBYTE(v51) = objc_msgSend(v52, "enumerateKeyType:valueType:error:handler:", ObjCClassFromMetadata, ObjCClassFromMetadata, &aBlock, v50);
    _Block_release(v50);

    v53 = aBlock;
    if ((v51 & 1) == 0)
    {
      v56 = v53;
      swift_bridgeObjectRelease((const char *)v34);
      _convertNSErrorToError(_:)(v56);

      swift_willThrow(v57);
      swift_release(v33);
      swift_release(v4);
      return;
    }
    v193 = v4;
    v190 = v33;
    *(_QWORD *)&v54 = swift_beginAccess(v45, v209, 0, 0).n128_u64[0];
    if (*v45)
    {
      swift_errorRetain(*v45);
      swift_bridgeObjectRelease((const char *)v34);
      swift_willThrow(v55);
      swift_release(v190);
      swift_release(v193);
      return;
    }
    v194 = v2;
    v58 = *(const char **)v204;
    *(_QWORD *)v204 = &_swiftEmptySetSingleton;
    *(_QWORD *)&v59 = swift_bridgeObjectRelease(v58, v54).n128_u64[0];
    v189 = (const char *)v34;
    v60 = *(char **)(v34 + 16);
    if (!v60)
      break;
    v61 = v189 + 99;
    while (1)
    {
      v200 = v60;
      v204 = *(char **)(v61 - 67);
      v64 = *(const char **)(v61 - 59);
      v65 = *(_QWORD *)(v61 - 51);
      v66 = *(const char **)(v61 - 43);
      v67 = *(_QWORD *)(v61 - 35);
      v68 = *(_QWORD *)(v61 - 27);
      v69 = *(_QWORD *)(v61 - 19);
      v70 = *(_QWORD *)(v61 - 11);
      v71 = *(unsigned __int16 *)(v61 - 3) | (*((unsigned __int8 *)v61 - 1) << 16);
      v199 = v61;
      v72 = *(unsigned __int8 *)v61;
      swift_bridgeObjectRetain_n(v64, 2);
      swift_bridgeObjectRetain_n(v66, 2);
      v73 = (void **)sub_100476A90((uint64_t)v204, v64, v65, v66, v67, v68, v69, v70, v71 | (v72 << 24));
      v75 = v74;
      v204 = (char *)v76;
      v201 = (char *)v77;
      swift_bridgeObjectRelease_n(v66, 2);
      swift_bridgeObjectRelease_n(v64, 2);
      v2 = sub_100008384(&qword_1007C1600);
      v212 = (void *)v2;
      v78 = sub_100476C70();
      v213 = (void (*)(uint64_t, uint64_t))v78;
      aBlock = v73;
      v79 = sub_10023A834(&aBlock, v2);
      v80 = *(_QWORD *)(*v79 + 16);
      if (v80)
      {
        v81 = (const void *)(*v79 + 32);
        v4 = (const char **)v196;
        if (v80 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          v206 = v80;
          memcpy(__dst, v81, v80);
          v3 = *(_QWORD *)__dst;
          v85 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          swift_bridgeObjectRetain((const char *)v73);
        }
        else
        {
          v82 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
          swift_bridgeObjectRetain((const char *)v73);
          v83 = __DataStorage.init(bytes:length:)(v81, v80);
          v84 = v83;
          if (v80 >= 0x7FFFFFFF)
          {
            v86 = type metadata accessor for Data.RangeReference(0);
            v3 = swift_allocObject(v86, 32, 7);
            *(_QWORD *)(v3 + 16) = 0;
            *(_QWORD *)(v3 + 24) = v80;
            v85 = v84 | 0x8000000000000000;
          }
          else
          {
            v3 = v80 << 32;
            v85 = v83 | 0x4000000000000000;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain((const char *)v73);
        v3 = 0;
        v85 = 0xC000000000000000;
        v4 = (const char **)v196;
      }
      sub_10022E75C(&aBlock);
      v212 = (void *)v2;
      v213 = (void (*)(uint64_t, uint64_t))v78;
      aBlock = v75;
      v87 = sub_10023A834(&aBlock, v2);
      v88 = *v87;
      v89 = *(_QWORD *)(*v87 + 16);
      v197 = v78;
      v198 = (const char *)v73;
      if (v89)
      {
        v90 = v88 + 32;
        if (v89 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          v206 = v89;
          memcpy(__dst, (const void *)(v88 + 32), v89);
          v94 = *(_QWORD **)__dst;
          v95 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          swift_bridgeObjectRetain((const char *)v75);
        }
        else
        {
          v91 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
          swift_bridgeObjectRetain((const char *)v75);
          v92 = __DataStorage.init(bytes:length:)(v90, v89);
          v93 = v92;
          if (v89 >= 0x7FFFFFFF)
          {
            v96 = type metadata accessor for Data.RangeReference(0);
            v94 = (_QWORD *)swift_allocObject(v96, 32, 7);
            v94[2] = 0;
            v94[3] = v89;
            v95 = v93 | 0x8000000000000000;
          }
          else
          {
            v94 = (_QWORD *)(v89 << 32);
            v95 = v92 | 0x4000000000000000;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain((const char *)v75);
        v94 = 0;
        v95 = 0xC000000000000000;
      }
      sub_10022E75C(&aBlock);
      swift_beginAccess(v4, &aBlock, 32, 0);
      v97 = *((_QWORD *)*v4 + 2);
      v203 = v94;
      v202 = v95;
      if (v97)
      {
        sub_10022E4A8(v3, v85);
        sub_10045C464(v3, v85, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
        if ((v98 & 1) != 0)
        {
          swift_endAccess(&aBlock);
          sub_100225AB4(v3, v85);
          goto LABEL_65;
        }
        sub_100225AB4(v3, v85);
      }
      swift_endAccess(&aBlock);
      swift_beginAccess(v4, &aBlock, 33, 0);
      sub_10022E4A8(v3, v85);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
      *(_QWORD *)__dst = *v4;
      v6 = *(char **)__dst;
      *v4 = (const char *)0x8000000000000000;
      v13 = sub_10045C464(v3, v85, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
      v100 = *((_QWORD *)v6 + 2);
      v101 = (v99 & 1) == 0;
      v102 = v100 + v101;
      if (__OFADD__(v100, v101))
        break;
      v103 = v99;
      if (*((_QWORD *)v6 + 3) >= v102)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v6 = *(char **)__dst;
          if ((v99 & 1) == 0)
            goto LABEL_62;
        }
        else
        {
          sub_100470F0C();
          v6 = *(char **)__dst;
          if ((v103 & 1) == 0)
            goto LABEL_62;
        }
      }
      else
      {
        sub_10046A3A0(v102, isUniquelyReferenced_nonNull_native);
        v104 = sub_10045C464(v3, v85, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
        if ((v103 & 1) != (v105 & 1))
          goto LABEL_155;
        v13 = v104;
        v6 = *(char **)__dst;
        if ((v103 & 1) == 0)
        {
LABEL_62:
          *(_QWORD *)&v6[8 * ((unint64_t)v13 >> 6) + 64] |= 1 << v13;
          v109 = (uint64_t *)(*((_QWORD *)v6 + 6) + 16 * v13);
          *v109 = v3;
          v109[1] = v85;
          *(_QWORD *)(*((_QWORD *)v6 + 7) + 8 * v13) = &_swiftEmptySetSingleton;
          v110 = *((_QWORD *)v6 + 2);
          v15 = __OFADD__(v110, 1);
          v111 = v110 + 1;
          if (v15)
            goto LABEL_149;
          *((_QWORD *)v6 + 2) = v111;
          sub_10022E4A8(v3, v85);
          goto LABEL_64;
        }
      }
      v106 = *((_QWORD *)v6 + 7);
      v107 = 8 * v13;
      *(_QWORD *)&v108 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v106 + v107)).n128_u64[0];
      *(_QWORD *)(v106 + v107) = &_swiftEmptySetSingleton;
LABEL_64:
      v94 = v203;
      v95 = v202;
      v112 = *v4;
      *v4 = v6;
      swift_bridgeObjectRelease(v112, v108);
      sub_100225AB4(v3, v85);
      swift_endAccess(&aBlock);
LABEL_65:
      swift_beginAccess(v4, __dst, 33, 0);
      sub_10022E4A8(v3, v85);
      v113 = sub_100459190(&aBlock, v3, v85);
      if (*v114)
      {
        sub_10022E4A8((uint64_t)v94, v95);
        sub_10045E380(&v207, (uint64_t)v94, v95);
        ((void (*)(void ***, _QWORD))v113)(&aBlock, 0);
        swift_endAccess(__dst);
        sub_100225AB4(v3, v85);
        v115 = v207;
        v116 = v208;
      }
      else
      {
        ((void (*)(void ***, _QWORD))v113)(&aBlock, 0);
        swift_endAccess(__dst);
        v115 = v3;
        v116 = v85;
      }
      sub_100225AB4(v115, v116);
      *(_QWORD *)&v117 = swift_bridgeObjectRelease((const char *)v75).n128_u64[0];
      swift_bridgeObjectRelease(v198, v117);
      v118 = v204;
      if (!v204)
      {
        sub_100225AB4(v3, v85);
        v62 = (uint64_t)v94;
        goto LABEL_33;
      }
      v119 = (void (*)(uint64_t, uint64_t))v197;
      v212 = (void *)v2;
      v213 = (void (*)(uint64_t, uint64_t))v197;
      aBlock = (void **)v204;
      v120 = sub_10023A834(&aBlock, v2);
      v121 = *v120;
      v122 = *(_QWORD *)(*v120 + 16);
      if (v122)
      {
        v123 = v121 + 32;
        if (v122 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          v206 = v122;
          memcpy(__dst, (const void *)(v121 + 32), v122);
          v128 = *(_QWORD *)__dst;
          v129 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          v118 = v204;
          v126 = swift_bridgeObjectRetain(v204).n128_u64[0];
        }
        else
        {
          v124 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v124, *(unsigned int *)(v124 + 48), *(unsigned __int16 *)(v124 + 52));
          swift_bridgeObjectRetain(v204);
          v125 = __DataStorage.init(bytes:length:)(v123, v122);
          v127 = v125;
          if (v122 >= 0x7FFFFFFF)
          {
            v130 = type metadata accessor for Data.RangeReference(0);
            v128 = swift_allocObject(v130, 32, 7);
            *(_QWORD *)(v128 + 16) = 0;
            *(_QWORD *)(v128 + 24) = v122;
            v129 = v127 | 0x8000000000000000;
          }
          else
          {
            v128 = v122 << 32;
            v129 = v125 | 0x4000000000000000;
          }
          v118 = v204;
        }
      }
      else
      {
        v126 = swift_bridgeObjectRetain(v118).n128_u64[0];
        v128 = 0;
        v129 = 0xC000000000000000;
      }
      swift_bridgeObjectRelease(v118, *(double *)&v126);
      sub_10022E75C(&aBlock);
      v212 = (void *)v2;
      v213 = v119;
      v131 = v201;
      aBlock = (void **)v201;
      v132 = sub_10023A834(&aBlock, v2);
      v133 = *v132;
      v134 = *(_QWORD *)(*v132 + 16);
      if (v134)
      {
        v135 = v133 + 32;
        if (v134 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          v206 = v134;
          memcpy(__dst, (const void *)(v133 + 32), v134);
          v140 = *(_QWORD *)__dst;
          v95 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          v141 = v201;
          swift_bridgeObjectRetain(v201);
          swift_bridgeObjectRelease(v141);
        }
        else
        {
          v136 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v136, *(unsigned int *)(v136 + 48), *(unsigned __int16 *)(v136 + 52));
          v137 = v201;
          swift_bridgeObjectRetain(v201);
          v138 = __DataStorage.init(bytes:length:)(v135, v134);
          v139 = v138;
          if (v134 >= 0x7FFFFFFF)
          {
            v142 = type metadata accessor for Data.RangeReference(0);
            v140 = swift_allocObject(v142, 32, 7);
            *(_QWORD *)(v140 + 16) = 0;
            *(_QWORD *)(v140 + 24) = v134;
            v95 = v139 | 0x8000000000000000;
          }
          else
          {
            v140 = v134 << 32;
            v95 = v138 | 0x4000000000000000;
          }
          swift_bridgeObjectRelease(v137);
        }
      }
      else
      {
        swift_bridgeObjectRetain(v131);
        v140 = 0;
        v95 = 0xC000000000000000;
        swift_bridgeObjectRelease(v131);
      }
      sub_10022E75C(&aBlock);
      swift_beginAccess(v4, &aBlock, 32, 0);
      if (!*((_QWORD *)*v4 + 2))
        goto LABEL_89;
      sub_10022E4A8(v128, v129);
      sub_10045C464(v128, v129, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
      if ((v143 & 1) == 0)
      {
        sub_100225AB4(v128, v129);
LABEL_89:
        swift_endAccess(&aBlock);
        swift_beginAccess(v4, &aBlock, 33, 0);
        sub_10022E4A8(v128, v129);
        v144 = swift_isUniquelyReferenced_nonNull_native(*v4);
        *(_QWORD *)__dst = *v4;
        *v4 = (const char *)0x8000000000000000;
        sub_10046D2CC((uint64_t)&_swiftEmptySetSingleton, v128, v129, v144);
        v145 = *v4;
        *v4 = *(const char **)__dst;
        swift_bridgeObjectRelease(v145);
        sub_100225AB4(v128, v129);
        swift_endAccess(&aBlock);
        goto LABEL_90;
      }
      swift_endAccess(&aBlock);
      sub_100225AB4(v128, v129);
LABEL_90:
      swift_beginAccess(v4, __dst, 33, 0);
      sub_10022E4A8(v128, v129);
      v2 = (uint64_t)sub_100459190(&aBlock, v128, v129);
      if (*v146)
      {
        sub_10022E4A8(v140, v95);
        sub_10045E380(&v207, v140, v95);
        ((void (*)(void ***, _QWORD))v2)(&aBlock, 0);
        swift_endAccess(__dst);
        sub_100225AB4((uint64_t)v203, v202);
        sub_100225AB4(v140, v95);
        sub_100225AB4(v128, v129);
        sub_100225AB4(v3, v85);
        sub_100225AB4(v128, v129);
        v62 = v207;
        v63 = v208;
        goto LABEL_34;
      }
      ((void (*)(void ***, _QWORD))v2)(&aBlock, 0);
      swift_endAccess(__dst);
      sub_100225AB4(v128, v129);
      sub_100225AB4(v3, v85);
      sub_100225AB4((uint64_t)v203, v202);
      sub_100225AB4(v128, v129);
      v62 = v140;
LABEL_33:
      v63 = v95;
LABEL_34:
      sub_100225AB4(v62, v63);
      v61 = v199 + 72;
      v60 = v200 - 1;
      if (v200 == (char *)1)
        goto LABEL_93;
    }
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    swift_once(&qword_1007B4120, sub_1004560AC);
  }
LABEL_93:
  swift_bridgeObjectRelease(v189, v59);
  v148 = *(void **)(v194 + 24);
  if (!v148)
  {
    v29 = Logger.logObject.getter(v147);
    v179 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v179))
    {
      v180 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v180 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v179, "Writer not prepared for persist operation", v180, 2u);
      swift_slowDealloc(v180, -1, -1);
    }
    swift_release(v190);
    swift_release(v193);
LABEL_18:

    return;
  }
  v149 = v196;
  swift_beginAccess(v196, &aBlock, 0, 0);
  v6 = *(char **)v149;
  v150 = *((_QWORD *)v6 + 8);
  v196 = v6 + 64;
  v151 = 1 << v6[32];
  if (v151 < 64)
    v152 = ~(-1 << v151);
  else
    v152 = -1;
  v153 = v152 & v150;
  v197 = (unint64_t)(v151 + 63) >> 6;
  v203 = v148;
  v200 = v6;
  swift_bridgeObjectRetain(v6);
  v154 = 0;
LABEL_98:
  v155 = v193;
  if (v153)
  {
    v198 = (const char *)((v153 - 1) & v153);
    v199 = v154;
    v156 = __clz(__rbit64(v153)) | ((_QWORD)v154 << 6);
    goto LABEL_114;
  }
  v157 = (int64_t)(v154 + 1);
  if (__OFADD__(v154, 1))
    goto LABEL_153;
  if (v157 < v197)
  {
    v158 = *(_QWORD *)&v196[8 * v157];
    v159 = (int64_t)(v154 + 1);
    if (v158)
      goto LABEL_113;
    v159 = (int64_t)(v154 + 2);
    if ((uint64_t)(v154 + 2) >= v197)
      goto LABEL_141;
    v158 = *(_QWORD *)&v196[8 * v159];
    if (v158)
      goto LABEL_113;
    v159 = (int64_t)(v154 + 3);
    if ((uint64_t)(v154 + 3) >= v197)
      goto LABEL_141;
    v158 = *(_QWORD *)&v196[8 * v159];
    if (v158)
    {
LABEL_113:
      v198 = (const char *)((v158 - 1) & v158);
      v199 = (const char *)v159;
      v156 = __clz(__rbit64(v158)) + (v159 << 6);
LABEL_114:
      v161 = (uint64_t *)(*((_QWORD *)v200 + 6) + 16 * v156);
      v163 = *v161;
      v162 = (const char *)v161[1];
      v3 = *(_QWORD *)(*((_QWORD *)v200 + 7) + 8 * v156);
      v164 = *(_QWORD *)(v3 + 56);
      v201 = (char *)(v3 + 56);
      v165 = 1 << *(_BYTE *)(v3 + 32);
      if (v165 < 64)
        v166 = ~(-1 << v165);
      else
        v166 = -1;
      isUniquelyReferenced_nonNull_native = v166 & v164;
      v204 = (char *)v162;
      sub_10022E4A8(v163, (unint64_t)v162);
      v202 = (unint64_t)(v165 + 63) >> 6;
      swift_bridgeObjectRetain((const char *)v3);
      v13 = 0;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_118:
        v167 = __clz(__rbit64(isUniquelyReferenced_nonNull_native));
        isUniquelyReferenced_nonNull_native &= isUniquelyReferenced_nonNull_native - 1;
        v168 = v167 | (v13 << 6);
        goto LABEL_133;
      }
      while (1)
      {
        v169 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_148;
        if (v169 >= v202)
          goto LABEL_136;
        v170 = *(_QWORD *)&v201[8 * v169];
        ++v13;
        if (!v170)
        {
          v13 = v169 + 1;
          if (v169 + 1 >= v202)
            goto LABEL_136;
          v170 = *(_QWORD *)&v201[8 * v13];
          if (!v170)
          {
            v13 = v169 + 2;
            if (v169 + 2 >= v202)
              goto LABEL_136;
            v170 = *(_QWORD *)&v201[8 * v13];
            if (!v170)
            {
              v171 = v169 + 3;
              if (v171 >= v202)
              {
LABEL_136:
                swift_release(v3);
                sub_100225AB4(v163, (unint64_t)v204);
                v154 = v199;
                v153 = (unint64_t)v198;
                goto LABEL_98;
              }
              v170 = *(_QWORD *)&v201[8 * v171];
              if (!v170)
              {
                while (1)
                {
                  v13 = v171 + 1;
                  if (__OFADD__(v171, 1))
                    break;
                  if (v13 >= v202)
                    goto LABEL_136;
                  v170 = *(_QWORD *)&v201[8 * v13];
                  ++v171;
                  if (v170)
                    goto LABEL_132;
                }
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
              }
              v13 = v171;
            }
          }
        }
LABEL_132:
        isUniquelyReferenced_nonNull_native = (v170 - 1) & v170;
        v168 = __clz(__rbit64(v170)) + (v13 << 6);
LABEL_133:
        v172 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v168);
        v173 = *v172;
        v174 = v172[1];
        sub_10022E4A8(*v172, v174);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v2 = (uint64_t)Data._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)__dst = 0;
        v6 = (char *)objc_msgSend(v203, "addKey:value:error:", isa, v2, __dst);

        v4 = *(const char ***)__dst;
        if (!(_DWORD)v6)
        {
          v177 = *(id *)__dst;
          _convertNSErrorToError(_:)(v4);

          swift_willThrow(v178);
          sub_100225AB4(v173, v174);
          sub_100225AB4(v163, (unint64_t)v204);
          swift_release(v190);
          swift_release(v193);
          swift_release(v200);
          swift_release(v3);

          return;
        }
        v176 = *(id *)__dst;
        sub_100225AB4(v173, v174);
        if (isUniquelyReferenced_nonNull_native)
          goto LABEL_118;
      }
    }
    v160 = v154 + 4;
    if ((uint64_t)(v154 + 4) < v197)
    {
      v158 = *(_QWORD *)&v196[8 * (_QWORD)v160];
      if (v158)
      {
        v159 = (int64_t)(v154 + 4);
        goto LABEL_113;
      }
      while (1)
      {
        v159 = (int64_t)(v160 + 1);
        if (__OFADD__(v160, 1))
          goto LABEL_154;
        if (v159 >= v197)
          break;
        v158 = *(_QWORD *)&v196[8 * v159];
        ++v160;
        if (v158)
          goto LABEL_113;
      }
    }
  }
LABEL_141:
  swift_release(v200);
  v181 = mach_absolute_time();
  v182 = v181 >= v191;
  v183 = v181 - v191;
  if (v182)
  {
    v184 = UpTicksToMilliseconds(v183);
    v185 = Logger.logObject.getter(v184);
    v186 = static os_log_type_t.default.getter(v185);
    if (os_log_type_enabled(v185, v186))
    {
      v187 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v187 = 134217984;
      v155 = v193;
      *(_QWORD *)__dst = v184;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[8], v187 + 4);
      _os_log_impl((void *)&_mh_execute_header, v185, v186, "CDB: Persist completed. Operation took %llu ms.", v187, 0xCu);
      swift_slowDealloc(v187, -1, -1);
    }

    swift_release(v190);
    swift_release(v155);
  }
  else
  {
    __break(1u);
LABEL_155:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
    __break(1u);
LABEL_156:
    swift_release(v2);
LABEL_157:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
}

void sub_100458C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  ((void (*)(void))static Data._unconditionallyBridgeFromObjectiveC(_:))();
  v4 = v3;
  static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  __asm { BR              X10 }
}

uint64_t sub_100458C8C@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const char *v19;
  const char *v20;
  double v21;
  const char *v22;
  double v23;
  char v24;
  double v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v30;
  char isUniquelyReferenced_nonNull_native;
  const char *v32;
  void (*v33)(_QWORD *);
  _QWORD *v34;
  uint64_t v35;
  const char **v36;
  uint64_t v37;
  _QWORD v38[5];
  _QWORD v39[3];
  uint64_t v40[2];
  uint64_t v41;

  v37 = v2;
  if (BYTE6(v5) != 2)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v9) = HIDWORD(v6) - v6;
        if (__OFSUB__(HIDWORD(v6), (_DWORD)v6))
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        v9 = (int)v9;
      }
      else
      {
        v17 = *(_QWORD *)(v6 + 16);
        v16 = *(_QWORD *)(v6 + 24);
        v18 = __OFSUB__(v16, v17);
        v9 = v16 - v17;
        if (v18)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
      }
    }
    else
    {
      v9 = BYTE6(v5);
    }
    if (v9 == 32)
    {
      v12 = v3;
      v36 = v7;
      v14 = sub_100474F18(v4, v1);
      v15 = v19;
      v35 = v4;
      v13 = v1;
      swift_bridgeObjectRelease(v20);
      goto LABEL_19;
    }
    goto LABEL_36;
  }
  if (!a1)
  {
    v8 = BYTE6(v5);
    goto LABEL_14;
  }
  if (a1 != 1)
  {
    v11 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    v8 = v10 - v11;
    if (!__OFSUB__(v10, v11))
      goto LABEL_13;
    goto LABEL_34;
  }
  if (__OFSUB__(HIDWORD(v6), (_DWORD)v6))
  {
    __break(1u);
    goto LABEL_33;
  }
  v8 = HIDWORD(v6) - (int)v6;
LABEL_13:
  sub_10022E4A8(v6, v5);
LABEL_14:
  if (v8 != 2)
  {
LABEL_37:
    __break(1u);
    ((void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))swift_unexpectedError)(v3, "DaemoniOSLibrary/SDAirDropHashStoreCDB.swift", 44, 1, 154);
    __break(1u);
    JUMPOUT(0x1004590DCLL);
  }
  v12 = v3;
  sub_100283120(v6, v5);
  sub_100225AB4(v6, v5);
  sub_100477160(v4, v1);
  v35 = v4;
  v36 = v7;
  v13 = v1;
  v14 = v38[1];
  v15 = (const char *)v38[2];
  swift_bridgeObjectRelease((const char *)v38[4]);
LABEL_19:
  *(_QWORD *)&v21 = swift_beginAccess(v37 + 40, &v41, 0, 0).n128_u64[0];
  v22 = *(const char **)(v37 + 40);
  *(_QWORD *)&v23 = swift_bridgeObjectRetain(v22, v21).n128_u64[0];
  swift_bridgeObjectRetain(v15, v23);
  v24 = sub_100455328(v14, (uint64_t)v15, (uint64_t)v22);
  *(_QWORD *)&v25 = swift_bridgeObjectRelease(v15).n128_u64[0];
  swift_bridgeObjectRelease(v22, v25);
  v26 = sub_100455328(v14, (uint64_t)v15, v12);
  swift_bridgeObjectRelease(v15);
  if ((v24 & 1) != 0 || (v26 & 1) != 0)
  {
    sub_100225AB4(v6, v5);
    v27 = v35;
    goto LABEL_22;
  }
  swift_beginAccess(v36, v38, 32, 0);
  if (!*((_QWORD *)*v36 + 2))
    goto LABEL_28;
  sub_10022E4A8(v6, v5);
  sub_10045C464(v6, v5, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
  if ((v30 & 1) == 0)
  {
    sub_100225AB4(v6, v5);
LABEL_28:
    swift_endAccess(v38);
    swift_beginAccess(v36, v38, 33, 0);
    sub_10022E4A8(v6, v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
    v39[0] = *v36;
    *v36 = (const char *)0x8000000000000000;
    sub_10046D2CC((uint64_t)&_swiftEmptySetSingleton, v6, v5, isUniquelyReferenced_nonNull_native);
    v32 = *v36;
    *v36 = (const char *)v39[0];
    swift_bridgeObjectRelease(v32);
    sub_100225AB4(v6, v5);
    swift_endAccess(v38);
    goto LABEL_29;
  }
  swift_endAccess(v38);
  sub_100225AB4(v6, v5);
LABEL_29:
  swift_beginAccess(v36, v39, 33, 0);
  sub_10022E4A8(v6, v5);
  v33 = sub_100459190(v38, v6, v5);
  if (*v34)
  {
    sub_10022E4A8(v35, v13);
    sub_10045E380(v40, v35, v13);
    ((void (*)(_QWORD *, _QWORD))v33)(v38, 0);
    swift_endAccess(v39);
    sub_100225AB4(v35, v13);
    sub_100225AB4(v6, v5);
    sub_100225AB4(v6, v5);
    v27 = v40[0];
    v28 = v40[1];
    return sub_100225AB4(v27, v28);
  }
  ((void (*)(_QWORD *, _QWORD))v33)(v38, 0);
  swift_endAccess(v39);
  sub_100225AB4(v6, v5);
  sub_100225AB4(v6, v5);
  v27 = v35;
LABEL_22:
  v28 = v13;
  return sub_100225AB4(v27, v28);
}

void (*sub_1004590EC(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100474530(v6, a2, a3);
  return sub_100459158;
}

void sub_100459158(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

void (*sub_100459190(_QWORD *a1, uint64_t a2, unint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_10022E4A8(a2, a3);
  v6[6] = sub_100474610(v6, a2, a3);
  return sub_100459200;
}

void sub_100459200(_QWORD *a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  sub_100225AB4(v3, v2);
  free(v1);
}

void sub_100459248(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  void (*v8)(id, id, uint64_t);
  id v9;
  id v10;

  v8 = *(void (**)(id, id, uint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a3;
  v8(v10, v9, a4);
  swift_release(v7);

}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.destroy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  double (*v25)(char *, uint64_t);
  __n128 v26;
  const char *v27;
  const char *v28;
  void *v29;
  id v30;
  NSString v31;
  unsigned int v32;
  id v33;
  NSString v34;
  double v35;
  unsigned int v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  _QWORD v41[2];
  id v42;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v41 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v41 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)v41 - v13;
  if ((*(_BYTE *)(v0 + 49) & 1) == 0)
  {
    *(_BYTE *)(v0 + 49) = 1;
    if (*(_BYTE *)(v0 + 48) == 1)
      objc_msgSend(*(id *)(v0 + 16), "close");
    v41[1] = v1;
    if (qword_1007B4120 != -1)
      swift_once(&qword_1007B4120, sub_1004560AC);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100221DF8(v15, (uint64_t)qword_1007C15E8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "CDB: Destroy called", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_10019BA08();
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

      URL.init(fileURLWithPath:)(v22, v24);
      swift_bridgeObjectRelease(v24);
      URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
      v25 = *(double (**)(char *, uint64_t))(v3 + 8);
      v25(v9, v2);
      URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
      URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
      v25(v6, v2);
      v26.n128_f64[0] = v25(v14, v2);
      URL.path.getter(v26);
      v28 = v27;
      v25(v12, v2);
      v29 = (void *)objc_opt_self(NSFileManager);
      v30 = objc_msgSend(v29, "defaultManager");
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v30, "fileExistsAtPath:", v31);

      if (v32)
      {
        v33 = objc_msgSend(v29, "defaultManager");
        v34 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v35 = swift_bridgeObjectRelease(v28).n128_u64[0];
        v42 = 0;
        v36 = objc_msgSend(v33, "removeItemAtPath:error:", v34, &v42, v35);

        v37 = v42;
        if (v36)
        {
          v38 = v42;
        }
        else
        {
          v39 = v42;
          _convertNSErrorToError(_:)(v37);

          swift_willThrow(v40);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v28);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

const char *SDAirDropHashStoreCDB.contact(forLongHash:)(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::Int v20;
  id v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Class isa;
  uint64_t v27;
  uint64_t ObjCClassFromMetadata;
  id v29;
  double v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  double v39;
  const char *v40;
  double v41;
  char v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  const char **v46;
  const char *v47;
  const char *v48;
  BOOL v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v58[9];
  char v59[24];

  if (*(_BYTE *)(v4 + 48) != 1)
  {
    v7 = 1;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 49) & 1) != 0)
  {
    v7 = 2;
LABEL_5:
    v8 = sub_100444E44();
    v9 = swift_allocError(&type metadata for SDAirDropHashError, v8, 0, 0);
    *v10 = v7;
LABEL_6:
    swift_willThrow(v9);
    return v6;
  }
  v51 = v5;
  swift_beginAccess(v4 + 32, v59, 0, 0);
  v52 = v4;
  v12 = *(_QWORD *)(v4 + 32);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = (_QWORD *)(v12 + 48);
    while (1)
    {
      v6 = (const char *)v14[1];
      v15 = (const char *)*(v14 - 1);
      v53 = *(v14 - 2);
      v17 = v14[4];
      v16 = v14[5];
      v19 = v14[2];
      v18 = v14[3];
      Hasher.init(_seed:)(v58);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v17);
      Hasher._combine(_:)(v16);
      v20 = Hasher._finalize()();
      Hasher.init(_seed:)(v58);
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(a4);
      if (v20 == Hasher._finalize()())
        break;
      v14 += 9;
      if (!--v13)
        goto LABEL_12;
    }
    *(_QWORD *)&v30 = swift_bridgeObjectRetain(v15).n128_u64[0];
    swift_bridgeObjectRetain(v6, v30);
    return (const char *)v53;
  }
  else
  {
LABEL_12:
    v21 = *(id *)(v4 + 16);
    v22 = (const char *)sub_10038B93C(a1, a2, a3, a4);
    v23 = sub_100474E80(v22);
    v25 = v24;
    swift_bridgeObjectRelease(v22);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100225AB4(v23, v25);
    v27 = sub_100221EDC(0, (unint64_t *)&qword_1007B42F0, NSData_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v27);
    v58[0] = 0;
    v29 = objc_msgSend(v21, "valueForKey:valueType:error:", isa, ObjCClassFromMetadata, v58);

    if (v58[0])
    {
      v58[0];

      goto LABEL_6;
    }
    if (v29)
    {
      v31 = v29;
      v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v34 = v33;

      v6 = (const char *)sub_100474F18(v32, v34);
      v36 = v35;
      v38 = v37;
      sub_100225AB4(v32, v34);
      if (v5)
      {

      }
      else
      {
        *(_QWORD *)&v39 = swift_beginAccess(v52 + 40, v58, 0, 0).n128_u64[0];
        v40 = *(const char **)(v52 + 40);
        *(_QWORD *)&v41 = swift_bridgeObjectRetain(v40, v39).n128_u64[0];
        swift_bridgeObjectRetain(v36, v41);
        v42 = sub_100455328((uint64_t)v6, (uint64_t)v36, (uint64_t)v40);
        *(_QWORD *)&v43 = swift_bridgeObjectRelease(v36).n128_u64[0];
        swift_bridgeObjectRelease(v40, v43);
        v44 = *(_QWORD *)(v52 + 32);
        v45 = *(_QWORD *)(v44 + 16);
        if (v45)
        {
          v46 = (const char **)(v44 + 40);
          while (1)
          {
            v47 = *(v46 - 1);
            v48 = *v46;
            v49 = v47 == v6 && v48 == v36;
            if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v6, v36, 0) & 1) != 0)
              break;
            v46 += 9;
            if (!--v45)
              goto LABEL_27;
          }
          swift_bridgeObjectRelease(v36, 0);

        }
        else
        {
LABEL_27:

          if ((v42 & 1) == 0)
            return v6;
          *(_QWORD *)&v50 = swift_bridgeObjectRelease(v36).n128_u64[0];
        }
        swift_bridgeObjectRelease(v38, v50, v51);
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t SDAirDropHashStoreCDB.contacts(forLongHash:)(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  const char *v19;
  const char *v20;
  Swift::UInt64 v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  Swift::Int v25;
  double v26;
  _QWORD *v27;
  _QWORD *v28;
  int64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  const char **v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Class isa;
  void *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  id v52;
  objc_class *v53;
  id v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  _QWORD *v64;
  _QWORD *v65;
  int v70;
  int v71;
  Swift::UInt64 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  id aBlock[5];
  _QWORD *v78;
  char v79[24];

  if (*(_BYTE *)(v4 + 48) != 1)
  {
    v5 = 1;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 49) & 1) != 0)
  {
    v5 = 2;
LABEL_5:
    v6 = sub_100444E44();
    v7 = swift_allocError(&type metadata for SDAirDropHashError, v6, 0, 0);
    *v8 = v5;
    swift_willThrow(v7);
    return v5;
  }
  v10 = swift_allocObject(&unk_100729A68, 24, 7);
  *(_QWORD *)(v10 + 16) = &_swiftEmptySetSingleton;
  v59 = v10 + 16;
  *(_QWORD *)&v11 = swift_beginAccess(v4 + 32, v79, 0, 0).n128_u64[0];
  v60 = v4;
  v12 = *(_QWORD *)(v4 + 32);
  v13 = *(_QWORD *)(v12 + 16);
  v61 = v10;
  if (v13)
  {
    swift_bridgeObjectRetain((const char *)v12, v11);
    v15 = 0;
    v63 = v14;
    v64 = _swiftEmptyArrayStorage;
    do
    {
      v19 = *(const char **)&v14[v15 + 40];
      v20 = *(const char **)&v14[v15 + 56];
      v73 = *(_QWORD *)&v14[v15 + 48];
      v74 = *(_QWORD *)&v14[v15 + 32];
      v21 = *(_QWORD *)&v14[v15 + 64];
      v22 = *(_QWORD *)&v14[v15 + 72];
      v23 = *(_QWORD *)&v14[v15 + 80];
      v24 = *(_QWORD *)&v14[v15 + 88];
      v70 = *(unsigned __int16 *)&v14[v15 + 96];
      v71 = v14[v15 + 98];
      v75 = v14[v15 + 99];
      Hasher.init(_seed:)(aBlock);
      v72 = v21;
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      v25 = Hasher._finalize()();
      Hasher.init(_seed:)(aBlock);
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(a4);
      if (v25 == Hasher._finalize()())
      {
        *(_QWORD *)&v26 = swift_bridgeObjectRetain(v19).n128_u64[0];
        swift_bridgeObjectRetain(v20, v26);
        v27 = v64;
        v76 = v64;
        v62 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
        {
          sub_100229B38(0, v64[2] + 1, 1);
          v27 = v76;
        }
        v17 = v27[2];
        v16 = v27[3];
        if (v17 >= v16 >> 1)
        {
          sub_100229B38(v16 > 1, v17 + 1, 1);
          v27 = v76;
        }
        v27[2] = v17 + 1;
        v64 = v27;
        v18 = &v27[9 * v17];
        v18[4] = v74;
        v18[5] = v62;
        v18[6] = v73;
        v18[7] = v20;
        v18[8] = v72;
        v18[9] = v22;
        v18[10] = v23;
        v18[11] = v24;
        *((_BYTE *)v18 + 98) = (v70 | (v71 << 16)) >> 16;
        *((_WORD *)v18 + 48) = v70;
        *((_BYTE *)v18 + 99) = v75;
      }
      v15 += 72;
      --v13;
      v14 = v63;
    }
    while (v13);
    swift_bridgeObjectRelease(v63);
    v10 = v61;
    v28 = v64;
    v29 = v64[2];
    if (v29)
    {
LABEL_17:
      aBlock[0] = _swiftEmptyArrayStorage;
      v30 = v28;
      sub_100229B70(0, v29, 0);
      v31 = aBlock[0];
      v65 = v30;
      v32 = (const char **)(v30 + 7);
      do
      {
        v34 = (uint64_t)*(v32 - 3);
        v33 = *(v32 - 2);
        v35 = (uint64_t)*(v32 - 1);
        v36 = *v32;
        aBlock[0] = v31;
        v38 = v31[2];
        v37 = v31[3];
        *(_QWORD *)&v39 = swift_bridgeObjectRetain(v33).n128_u64[0];
        swift_bridgeObjectRetain(v36, v39);
        if (v38 >= v37 >> 1)
        {
          sub_100229B70(v37 > 1, v38 + 1, 1);
          v31 = aBlock[0];
        }
        v31[2] = v38 + 1;
        v40 = &v31[4 * v38];
        v40[4] = v34;
        v40[5] = v33;
        v40[6] = v35;
        v40[7] = v36;
        v32 += 9;
        --v29;
      }
      while (v29);
      swift_release(v65);
      v10 = v61;
      if (v31[2])
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  else
  {
    v28 = _swiftEmptyArrayStorage;
    v29 = _swiftEmptyArrayStorage[2];
    if (v29)
      goto LABEL_17;
  }
  swift_release(v28);
  v31 = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_22:
    v41 = sub_10022D15C((uint64_t)v31);
    swift_bridgeObjectRelease((const char *)v31);
    sub_100455F1C(v41);
    goto LABEL_26;
  }
LABEL_25:
  swift_bridgeObjectRelease((const char *)v31);
LABEL_26:
  v42 = swift_allocObject(&unk_1007299F0, 24, 7);
  *(_QWORD *)(v42 + 16) = 0;
  v5 = v42 + 16;
  v43 = (const char *)sub_10038B93C(a1, a2, a3, a4);
  v44 = sub_100474E80(v43);
  v46 = v45;
  swift_bridgeObjectRelease(v43);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v44, v46);
  v48 = *(void **)(v60 + 16);
  v49 = (_QWORD *)swift_allocObject(&unk_100729A90, 40, 7);
  v49[2] = v60;
  v49[3] = v10;
  v49[4] = v42;
  aBlock[4] = sub_100476CC0;
  v78 = v49;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10045A22C;
  aBlock[3] = &unk_100729AA8;
  v50 = _Block_copy(aBlock);
  v51 = v78;
  v52 = v48;
  v53 = isa;
  swift_retain(v60);
  swift_retain(v10);
  swift_retain(v42);
  swift_release(v51);
  aBlock[0] = 0;
  LODWORD(v51) = objc_msgSend(v52, "enumerateValuesForKey:error:handler:", v53, aBlock, v50);
  _Block_release(v50);

  v54 = aBlock[0];
  if ((_DWORD)v51)
  {
    swift_beginAccess(v5, aBlock, 0, 0);
    if (*(_QWORD *)v5)
    {
      v55 = swift_errorRetain(*(_QWORD *)v5);
      swift_willThrow(v55);
      swift_release(v10);
      swift_release(v42);

    }
    else
    {

      *(_QWORD *)&v58 = swift_beginAccess(v59, &v76, 0, 0).n128_u64[0];
      v5 = *(_QWORD *)(v10 + 16);
      swift_bridgeObjectRetain((const char *)v5, v58);
      swift_release(v10);
      swift_release(v42);
    }
  }
  else
  {
    v56 = v54;
    v5 = _convertNSErrorToError(_:)(v54);

    swift_willThrow(v57);
    swift_release(v10);
    swift_release(v42);

  }
  return v5;
}

void sub_10045A050(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  const char *v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  uint64_t v25;
  const char *v26;
  BOOL v27;
  double v28;
  double v29;
  _BYTE v30[24];
  uint64_t v31[4];
  char v32[24];
  char v33[32];

  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v9 = v8;
  v10 = sub_100474F18(v7, v8);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_100225AB4(v7, v9);
  *(_QWORD *)&v17 = swift_beginAccess(a3 + 40, v33, 0, 0).n128_u64[0];
  v18 = *(const char **)(a3 + 40);
  *(_QWORD *)&v19 = swift_bridgeObjectRetain(v18, v17).n128_u64[0];
  swift_bridgeObjectRetain(v12, v19);
  v20 = sub_100455328(v10, (uint64_t)v12, (uint64_t)v18);
  *(_QWORD *)&v21 = swift_bridgeObjectRelease(v12).n128_u64[0];
  swift_bridgeObjectRelease(v18, v21);
  swift_beginAccess(a3 + 32, v32, 0, 0);
  v22 = *(_QWORD *)(a3 + 32);
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v24 = (const char **)(v22 + 40);
    do
    {
      v25 = (uint64_t)*(v24 - 1);
      v26 = *v24;
      v27 = v25 == v10 && v26 == v12;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v10, v12, 0) & 1) != 0)
        goto LABEL_10;
      v24 += 9;
    }
    while (--v23);
  }
  if ((v20 & 1) != 0)
  {
LABEL_10:
    *(_QWORD *)&v28 = swift_bridgeObjectRelease(v12).n128_u64[0];
    swift_bridgeObjectRelease(v14, v28);
    return;
  }
  swift_beginAccess(a4 + 16, v30, 33, 0);
  sub_10045F278(v31, v10, v12, v16, v14);
  swift_endAccess(v30);
  *(_QWORD *)&v29 = swift_bridgeObjectRelease((const char *)v31[1]).n128_u64[0];
  swift_bridgeObjectRelease((const char *)v31[3], v29);
  *a2 = 0;
}

void sub_10045A22C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

DaemoniOSLibrary::SDHashStoreContact_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.contact(forMediumHash:)(DaemoniOSLibrary::MediumHash forMediumHash)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  objc_class *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  objc_class *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSData v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32[24];
  id aBlock[5];
  uint64_t v34;
  DaemoniOSLibrary::SDHashStoreContact_optional result;

  if (*(_BYTE *)(v2 + 48) != 1)
  {
    v7 = 1;
    goto LABEL_5;
  }
  v6 = *(unsigned __int8 *)(v2 + 49);
  if ((v6 & 1) != 0)
  {
    v7 = 2;
LABEL_5:
    v8 = sub_100444E44();
    v9 = swift_allocError(&type metadata for SDAirDropHashError, v8, 0, 0);
    *v10 = v7;
    swift_willThrow(v9);
    goto LABEL_6;
  }
  v15 = *(_DWORD *)&forMediumHash.shortHash.storage;
  v16 = (const char *)sub_100455060(*(int *)&forMediumHash.shortHash.storage, 2uLL, v1, v6);
  v17 = sub_100474E80(v16);
  v19 = v18;
  swift_bridgeObjectRelease(v16);
  v20.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v17, v19);
  if ((objc_msgSend(*(id *)(v2 + 16), "valueExistsForKey:", v20.super.isa) & 1) != 0)
  {
    v3 = swift_allocObject(&unk_1007299F0, 24, 7);
    *(_QWORD *)(v3 + 16) = 0;
    v31 = (_QWORD *)(v3 + 16);
    v21 = swift_allocObject(&unk_100729AE0, 48, 7);
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    v22 = *(void **)(v2 + 16);
    v23 = swift_allocObject(&unk_100729B08, 48, 7);
    *(_QWORD *)(v23 + 16) = v2;
    *(_WORD *)(v23 + 24) = v15;
    *(_BYTE *)(v23 + 26) = BYTE2(v15);
    *(_QWORD *)(v23 + 32) = v21;
    *(_QWORD *)(v23 + 40) = v3;
    aBlock[4] = sub_100476D00;
    v34 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10045A22C;
    aBlock[3] = &unk_100729B20;
    v24 = _Block_copy(aBlock);
    v25 = v34;
    v26 = v22;
    v27 = v3;
    v4 = v26;
    v5 = v20.super.isa;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v25);
    aBlock[0] = 0;
    LODWORD(v25) = objc_msgSend(v4, "enumerateValuesForKey:error:handler:", v5, aBlock, v24);
    _Block_release(v24);

    v28 = aBlock[0];
    if ((_DWORD)v25)
    {
      v7 = v3 + 16;
      swift_beginAccess(v31, aBlock, 0, 0);
      if (*v31)
      {
        v29 = swift_errorRetain(*v31);
        swift_willThrow(v29);

        swift_release(v3);
        swift_release(v21);
      }
      else
      {

        swift_beginAccess(v21 + 16, v32, 0, 0);
        v7 = *(_QWORD *)(v21 + 16);
        v3 = *(_QWORD *)(v21 + 24);
        v4 = *(id *)(v21 + 32);
        v5 = *(objc_class **)(v21 + 40);
        sub_100476D0C(v7, v3, (uint64_t)v4, (uint64_t)v5);
        swift_release(v27);
        swift_release(v21);
      }
    }
    else
    {
      v7 = (uint64_t)v28;
      _convertNSErrorToError(_:)(v28);

      swift_willThrow(v30);
      swift_release(v3);
      swift_release(v21);

    }
  }
  else
  {

    v7 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
LABEL_6:
  v11 = v7;
  v12 = (void *)v3;
  v13 = (uint64_t)v4;
  v14 = v5;
  result.value.emailOrPhone._object = v14;
  result.value.emailOrPhone._countAndFlagsBits = v13;
  result.value.id._object = v12;
  result.value.id._countAndFlagsBits = v11;
  return result;
}

__n128 sub_10045A5C4(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  const char *v15;
  double v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  uint64_t v22;
  const char *v23;
  BOOL v24;
  double v25;
  __n128 result;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char v34[24];
  char v35[24];
  unsigned __int16 v36;
  unsigned __int8 v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;

  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v11 = v10;
  sub_100477160(v9, v10);
  v13 = v38;
  v12 = v39;
  v32 = v40;
  v33 = v41;
  sub_100225AB4(v9, v11);
  if (v36 == (unsigned __int16)a4 && v37 == BYTE2(a4))
  {
    *(_QWORD *)&v14 = swift_beginAccess(a3 + 40, &v36, 0, 0).n128_u64[0];
    v15 = *(const char **)(a3 + 40);
    *(_QWORD *)&v16 = swift_bridgeObjectRetain(v15, v14).n128_u64[0];
    swift_bridgeObjectRetain(v12, v16);
    v17 = sub_100455328(v13, (uint64_t)v12, (uint64_t)v15);
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v12).n128_u64[0];
    swift_bridgeObjectRelease(v15, v18);
    swift_beginAccess(a3 + 32, v35, 0, 0);
    v19 = *(_QWORD *)(a3 + 32);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = (const char **)(v19 + 40);
      do
      {
        v22 = (uint64_t)*(v21 - 1);
        v23 = *v21;
        v24 = v22 == v13 && v23 == v12;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v13, v12, 0) & 1) != 0)
          goto LABEL_12;
        v21 += 9;
      }
      while (--v20);
    }
    if ((v17 & 1) != 0)
    {
LABEL_12:
      *(_QWORD *)&v25 = swift_bridgeObjectRelease(v12, v32).n128_u64[0];
      return swift_bridgeObjectRelease(v33, v25);
    }
    swift_beginAccess(a5 + 2, v34, 1, 0);
    v28 = a5[2];
    v29 = a5[3];
    v30 = a5[4];
    v31 = a5[5];
    a5[2] = v13;
    a5[3] = v12;
    a5[4] = v32;
    a5[5] = v33;
    sub_100444FD4(v28, v29, v30, v31);
    *a2 = 1;
  }
  else
  {
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v41, v40).n128_u64[0];
    return swift_bridgeObjectRelease(v39, v27);
  }
  return result;
}

void *SDAirDropHashStoreCDB.contacts(forMediumHash:)(int a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char **v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  const char **v18;
  const char **v19;
  const char *v20;
  int v21;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  double v27;
  int64_t v28;
  _QWORD *v29;
  const char **v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  const char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Class isa;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  objc_class *v51;
  unsigned int v52;
  id v53;
  uint64_t v54;
  void *v55;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  int v63;
  const char *v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  char v68[24];
  id aBlock[5];
  uint64_t v70;
  char v71[24];

  if (*(_BYTE *)(v1 + 48) != 1)
  {
    v4 = 1;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    v4 = 2;
LABEL_5:
    v5 = sub_100444E44();
    v6 = swift_allocError(&type metadata for SDAirDropHashError, v5, 0, 0);
    *v7 = v4;
    swift_willThrow(v6);
    return v3;
  }
  v8 = a1;
  v58 = v2;
  v61 = BYTE2(a1);
  v60 = swift_allocObject(&unk_100729A68, 24, 7);
  *(_QWORD *)(v60 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)&v9 = swift_beginAccess(v1 + 32, v71, 0, 0).n128_u64[0];
  v59 = v1;
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(_QWORD *)(v10 + 16);
  v63 = v8;
  if (v11)
  {
    swift_bridgeObjectRetain((const char *)v10, v9);
    v13 = 0;
    v14 = (const char **)_swiftEmptyArrayStorage;
    v15 = v61;
    v62 = v12;
    do
    {
      v20 = &v12[v13];
      if ((v12[v13 + 99] & 1) == 0)
      {
        v21 = *((unsigned __int16 *)v20 + 48) | (*((unsigned __int8 *)v20 + 98) << 16);
        if (*((unsigned __int16 *)v20 + 48) == (unsigned __int16)v8 && *((unsigned __int8 *)v20 + 98) == v15)
        {
          v23 = (const char *)*((_QWORD *)v20 + 4);
          v24 = (const char *)*((_QWORD *)v20 + 5);
          v26 = (const char *)*((_QWORD *)v20 + 6);
          v25 = (const char *)*((_QWORD *)v20 + 7);
          v65 = *((_OWORD *)v20 + 5);
          v66 = *((_OWORD *)v20 + 4);
          *(_QWORD *)&v27 = swift_bridgeObjectRetain(v24).n128_u64[0];
          swift_bridgeObjectRetain(v25, v27);
          aBlock[0] = v14;
          v64 = v26;
          if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          {
            sub_100229B38(0, (int64_t)(v14[2] + 1), 1);
            v15 = v61;
            v14 = (const char **)aBlock[0];
          }
          v17 = (unint64_t)v14[2];
          v16 = (unint64_t)v14[3];
          v18 = v14;
          if (v17 >= v16 >> 1)
          {
            sub_100229B38(v16 > 1, v17 + 1, 1);
            v15 = v61;
            v18 = (const char **)aBlock[0];
          }
          v18[2] = (const char *)(v17 + 1);
          v19 = &v18[9 * v17];
          v19[4] = v23;
          v19[5] = v24;
          v19[6] = v64;
          v19[7] = v25;
          *((_OWORD *)v19 + 4) = v66;
          *((_OWORD *)v19 + 5) = v65;
          *((_BYTE *)v19 + 98) = BYTE2(v21);
          *((_WORD *)v19 + 48) = v21;
          *((_BYTE *)v19 + 99) = 0;
          v8 = v63;
          v14 = v18;
          v12 = v62;
        }
      }
      v13 += 72;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease(v12);
    v28 = (int64_t)v14[2];
    if (v28)
    {
LABEL_21:
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_100229B70(0, v28, 0);
      v29 = _swiftEmptyArrayStorage;
      v30 = v14 + 7;
      do
      {
        v32 = (uint64_t)*(v30 - 3);
        v31 = *(v30 - 2);
        v33 = (uint64_t)*(v30 - 1);
        v34 = *v30;
        aBlock[0] = v29;
        v36 = v29[2];
        v35 = v29[3];
        *(_QWORD *)&v37 = swift_bridgeObjectRetain(v31, v58).n128_u64[0];
        swift_bridgeObjectRetain(v34, v37);
        if (v36 >= v35 >> 1)
        {
          sub_100229B70(v35 > 1, v36 + 1, 1);
          v29 = aBlock[0];
        }
        v29[2] = v36 + 1;
        v38 = &v29[4 * v36];
        v38[4] = v32;
        v38[5] = v31;
        v38[6] = v33;
        v38[7] = v34;
        v30 += 9;
        --v28;
      }
      while (v28);
      swift_release(v14);
      v8 = v63;
      if (v29[2])
        goto LABEL_26;
LABEL_29:
      swift_bridgeObjectRelease((const char *)v29, v58);
      goto LABEL_30;
    }
  }
  else
  {
    v14 = (const char **)_swiftEmptyArrayStorage;
    v28 = _swiftEmptyArrayStorage[2];
    if (v28)
      goto LABEL_21;
  }
  swift_release(v14);
  v29 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
    goto LABEL_29;
LABEL_26:
  v39 = sub_10022D15C((uint64_t)v29);
  swift_bridgeObjectRelease((const char *)v29);
  sub_100455F1C(v39);
LABEL_30:
  v40 = swift_allocObject(&unk_1007299F0, 24, 7);
  *(_QWORD *)(v40 + 16) = 0;
  v67 = (_QWORD *)(v40 + 16);
  v42 = (const char *)sub_100455060(v8, 2uLL, v41, v40 + 16);
  v43 = sub_100474E80(v42);
  v45 = v44;
  swift_bridgeObjectRelease(v42);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v43, v45);
  v47 = *(void **)(v59 + 16);
  v48 = swift_allocObject(&unk_100729B58, 48, 7);
  *(_QWORD *)(v48 + 16) = v59;
  *(_WORD *)(v48 + 24) = v8;
  *(_BYTE *)(v48 + 26) = v61;
  *(_QWORD *)(v48 + 32) = v60;
  *(_QWORD *)(v48 + 40) = v40;
  aBlock[4] = sub_100476D74;
  v70 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10045A22C;
  aBlock[3] = &unk_100729B70;
  v3 = _Block_copy(aBlock);
  v49 = v70;
  v50 = v47;
  v51 = isa;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v49);
  aBlock[0] = 0;
  v52 = objc_msgSend(v50, "enumerateValuesForKey:error:handler:", v51, aBlock, v3);
  _Block_release(v3);

  v53 = aBlock[0];
  if (v52)
  {
    swift_beginAccess(v67, aBlock, 0, 0);
    if (!*v67)
    {

      *(_QWORD *)&v57 = swift_beginAccess(v60 + 16, v68, 0, 0).n128_u64[0];
      v3 = *(void **)(v60 + 16);
      swift_bridgeObjectRetain((const char *)v3, v57);
      swift_release(v60);
      swift_release(v40);
      return v3;
    }
    v54 = swift_errorRetain(*v67);
  }
  else
  {
    v55 = v53;
    _convertNSErrorToError(_:)(v53);

  }
  swift_willThrow(v54);
  swift_release(v60);
  swift_release(v40);

  return v3;
}

__n128 sub_10045AD04(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  double v14;
  const char *v15;
  double v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  const char *v23;
  BOOL v24;
  double v25;
  __n128 result;
  double v27;
  double v28;
  const char *v29;
  const char *v30;
  _BYTE v31[24];
  char v32[24];
  char v33[24];
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;

  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v11 = v10;
  sub_100477160(v9, v10);
  v13 = v35;
  v12 = v36;
  v29 = v37;
  v30 = v38;
  sub_100225AB4(v9, v11);
  if ((unsigned __int16)v34 == (unsigned __int16)a4 && BYTE2(v34) == BYTE2(a4))
  {
    *(_QWORD *)&v14 = swift_beginAccess(a3 + 40, v33, 0, 0).n128_u64[0];
    v15 = *(const char **)(a3 + 40);
    *(_QWORD *)&v16 = swift_bridgeObjectRetain(v15, v14).n128_u64[0];
    swift_bridgeObjectRetain(v12, v16);
    v17 = sub_100455328((uint64_t)v13, (uint64_t)v12, (uint64_t)v15);
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v12).n128_u64[0];
    swift_bridgeObjectRelease(v15, v18);
    swift_beginAccess(a3 + 32, v32, 0, 0);
    v19 = *(_QWORD *)(a3 + 32);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = (const char **)(v19 + 40);
      do
      {
        v22 = *(v21 - 1);
        v23 = *v21;
        v24 = v22 == v13 && v23 == v12;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v13, v12, 0) & 1) != 0)
          goto LABEL_12;
        v21 += 9;
      }
      while (--v20);
    }
    if ((v17 & 1) != 0)
    {
LABEL_12:
      *(_QWORD *)&v25 = swift_bridgeObjectRelease(v12).n128_u64[0];
      return swift_bridgeObjectRelease(v30, v25);
    }
    swift_beginAccess(a5 + 16, v31, 33, 0);
    sub_10045F278(&v34, (uint64_t)v13, v12, (uint64_t)v29, v30);
    swift_endAccess(v31);
    *(_QWORD *)&v28 = swift_bridgeObjectRelease(v35).n128_u64[0];
    result = swift_bridgeObjectRelease(v37, v28);
    *a2 = 0;
  }
  else
  {
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v38).n128_u64[0];
    return swift_bridgeObjectRelease(v36, v27);
  }
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.contains(shortHash:)(DaemoniOSLibrary::ShortHash shortHash)
{
  uint64_t v1;
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  _QWORD *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Class isa;
  _BYTE v19[24];

  if (*(_BYTE *)(v1 + 48) != 1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    v2 = 2;
LABEL_5:
    v3 = sub_100444E44();
    v4 = swift_allocError(&type metadata for SDAirDropHashError, v3, 0, 0);
    *v5 = v2;
    swift_willThrow(v4);
    return v2 & 1;
  }
  v7 = *(_DWORD *)&shortHash;
  swift_beginAccess(v1 + 32, v19, 0, 0);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (_BYTE *)(v8 + 99);
    while ((*v10 & 1) != 0 || *(unsigned __int16 *)(v10 - 3) != (unsigned __int16)v7)
    {
      v10 += 72;
      if (!--v9)
        goto LABEL_13;
    }
    v2 = 1;
  }
  else
  {
LABEL_13:
    v11 = *(id *)(v1 + 16);
    v14 = (const char *)sub_100455060(v7, 2uLL, v12, v13);
    v15 = sub_100474E80(v14);
    v17 = v16;
    swift_bridgeObjectRelease(v14);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100225AB4(v15, v17);
    v2 = objc_msgSend(v11, "valueExistsForKey:", isa);

  }
  return v2 & 1;
}

uint64_t SDAirDropHashStoreCDB.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t SDAirDropHashStoreCDB.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 50, 7);
}

void sub_10045B0EC()
{
  SDAirDropHashStoreCDB.load()();
}

void sub_10045B100(Swift::OpaquePointer a1)
{
  SDAirDropHashStoreCDB.stageAddEntries(_:)(a1);
}

void sub_10045B114(uint64_t a1, uint64_t a2)
{
  SDAirDropHashStoreCDB.stageDeleteEntriesForContact(withID:)(*(Swift::String *)&a1);
}

void sub_10045B128()
{
  SDAirDropHashStoreCDB.preparePersist()();
}

void sub_10045B13C()
{
  SDAirDropHashStoreCDB.finishPersist()();
}

void sub_10045B150()
{
  SDAirDropHashStoreCDB.persist()();
}

void sub_10045B164()
{
  SDAirDropHashStoreCDB.destroy()();
}

uint64_t SDAirDropHashStoreCDB.dumpDB(atFileURL:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;
  char v25[24];
  id aBlock[5];
  _QWORD *v27;

  v2 = v1;
  v4 = swift_allocObject(&unk_100729BA8, 32, 7);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0xE000000000000000;
  v5 = swift_allocObject(&unk_100729BA8, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0xE000000000000000;
  v6 = *(void **)(v2 + 16);
  v7 = sub_100221EDC(0, (unint64_t *)&qword_1007B42F0, NSData_ptr);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_100729BD0, 40, 7);
  v9[2] = v2;
  v9[3] = v4;
  v9[4] = v5;
  aBlock[4] = sub_100476DF8;
  v27 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100459248;
  aBlock[3] = &unk_100729BE8;
  v10 = _Block_copy(aBlock);
  v11 = v27;
  v12 = v6;
  swift_retain(v2);
  swift_retain(v4);
  swift_retain(v5);
  swift_release(v11);
  aBlock[0] = 0;
  LODWORD(v11) = objc_msgSend(v12, "enumerateKeyType:valueType:error:handler:", ObjCClassFromMetadata, ObjCClassFromMetadata, aBlock, v10);
  _Block_release(v10);

  v13 = aBlock[0];
  if (!(_DWORD)v11)
  {
    v14 = v13;
    v15 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v16);
    swift_errorRelease(v15);
  }
  swift_beginAccess(v4 + 16, aBlock, 0, 0);
  v18 = *(_QWORD *)(v4 + 16);
  v17 = *(char **)(v4 + 24);
  *(_QWORD *)&v19 = swift_beginAccess(v5 + 16, v25, 0, 0).n128_u64[0];
  v21 = *(_QWORD *)(v5 + 16);
  v20 = *(char **)(v5 + 24);
  *(_QWORD *)&v22 = swift_bridgeObjectRetain(v17, v19).n128_u64[0];
  swift_bridgeObjectRetain(v20, v22);
  sub_100476E04(a1, v18, v17, v21, v20);
  swift_release(v4);
  swift_release(v5);
  *(_QWORD *)&v23 = swift_bridgeObjectRelease(v17).n128_u64[0];
  swift_bridgeObjectRelease(v20, v23);
  return 1;
}

const char *sub_10045B59C(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  uint64_t v4;
  const char *result;
  uint64_t v6;

  result = SDAirDropHashStoreCDB.contact(forLongHash:)(a1, a2, a3, a4);
  if (v4)
    return (const char *)v6;
  return result;
}

uint64_t sub_10045B5C4(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  return SDAirDropHashStoreCDB.contacts(forLongHash:)(a1, a2, a3, a4);
}

unint64_t sub_10045B5D8(int a1)
{
  int v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = a1 & 0xFFFFFF;
  result = (unint64_t)SDAirDropHashStoreCDB.contact(forMediumHash:)((DaemoniOSLibrary::MediumHash)v1);
  if (v4)
    return v3;
  return result;
}

void *sub_10045B604(int a1)
{
  return SDAirDropHashStoreCDB.contacts(forMediumHash:)(a1 & 0xFFFFFF);
}

BOOL sub_10045B61C(DaemoniOSLibrary::ShortHash a1)
{
  return SDAirDropHashStoreCDB.contains(shortHash:)(a1);
}

void sub_10045B634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  sub_100477284(v3, v5);
  __asm { BR              X10 }
}

void sub_10045B6F4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  char *v12;

  v11 = a1;
  v12 = v6;
  swift_bridgeObjectRetain(v6);
  v8._countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v6);
  v9 = v11;
  if (BYTE6(v1) == 32)
    swift_beginAccess(v2, &v11, 33, 0);
  else
    swift_beginAccess(v7, &v11, 33, 0);
  v10._countAndFlagsBits = v9;
  v10._object = v6;
  String.append(_:)(v10);
  swift_endAccess(&v11);
  sub_100225AB4(v5, v4);
  sub_100225AB4(v3, v1);
  swift_bridgeObjectRelease(v6);
}

void sub_10045B840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;

  if ((a1 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(swift_allocObject(&unk_100729C98, 24, 7) + 16) = _swiftEmptyArrayStorage;
    __asm { BR              X9 }
  }
  v7 = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v7, 1552, 0);
  __break(1u);
  JUMPOUT(0x10045BE28);
}

uint64_t sub_10045BEA0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = (v5 == a1) & a3;
  if (v6 == 1)
    return v6 ^ 1u;
  if (v5 <= a1)
  {
    v8 = Data._Representation.subscript.getter();
    v10 = v9;
    v11 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = sub_10022870C(0, v11[2] + 1, 1, (uint64_t)v11);
      *(_QWORD *)(a4 + 16) = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
      v11 = sub_10022870C((_QWORD *)(v13 > 1), v14 + 1, 1, (uint64_t)v11);
    v11[2] = v14 + 1;
    v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(_QWORD *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10045BFDC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1002B718C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

unint64_t sub_10045C150(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_10045C510(a1, v5);
}

unint64_t sub_10045C1D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10045C684(a1, v4);
}

uint64_t sub_10045C200(uint64_t a1, uint64_t a2)
{
  return sub_10045C464(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
}

unint64_t sub_10045C214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10045C828(a1, v4);
}

unint64_t sub_10045C244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v6 = sub_100220D78(&qword_1007B6590, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10045C940(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007C1838, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

unint64_t sub_10045C2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10045C940(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&unk_1007B7300, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10045C374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100220D78(&qword_1007B5528, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10045C940(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1007C1950, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_10045C40C(Swift::UInt a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_10045CA70(a1, v2);
}

uint64_t sub_10045C464(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t sub_10045C4DC(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 4);
  return sub_10045D49C(a1, v3);
}

unint64_t sub_10045C510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10045C684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10026EFF8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10022E6C0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10045C748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10045C828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10045C940(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100220D78(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_10045CA70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10045CB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_10045D49C(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10045D538(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100220D78(&qword_1007B5530, v12, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100220D78(&qword_1007C1970, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_10046139C((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10045D794(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100220D78(&qword_1007B5528, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100220D78(&qword_1007C1950, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1004615F0((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10045D9F0(Swift::Int *a1, void *a2)
{
  return sub_10045F4B8(a1, a2, &qword_1007B5250, SFAirDropTransferItem_ptr, &qword_1007C1960);
}

uint64_t sub_10045DA0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[9];

  v3 = v2;
  v6 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v10);
  sub_1002B2164();
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v22 = v2;
    v23 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_100244384(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_1002BA1A4((uint64_t)v9, a2);
      v17 = v16;
      sub_1002443C8((uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v3 = v22;
        a1 = v23;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v10);
    sub_1002443C8(a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_100244384(*(_QWORD *)(*v22 + 48) + v15 * v13, v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_100244384(a2, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
    v24[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_100461844((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    v19 = *v3;
    *v3 = v24[0];
    swift_bridgeObjectRelease(v19);
    sub_100221DB4(a2, a1, type metadata accessor for SDAirDropDiscoveredEndpoint);
    return 1;
  }
}

uint64_t sub_10045DC08(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100220D78(&qword_1007B6448, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100220D78((unint64_t *)&unk_1007B7300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100461A34((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10045DE64(uint64_t *a1, uint64_t a2)
{
  const char **v2;
  const char **v3;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  const char *v14;
  const char *v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*((_QWORD *)v6 + 5), a2);
  v8 = -1 << v6[32];
  v9 = v7 & ~v8;
  if (((*(_QWORD *)&v6[((v9 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = (const char *)0x8000000000000000;
    sub_100461C88(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *((_QWORD *)v6 + 6);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)&v6[((v9 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10045DF5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100461DA8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10045E108(Swift::Int *a1, void *a2)
{
  return sub_10045F4B8(a1, a2, &qword_1007B5398, SFAutoUnlockDevice_ptr, &qword_1007C1888);
}

uint64_t sub_10045E124(uint64_t a1, uint64_t a2)
{
  const char **v2;
  const char **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  const char *v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  const char *v29;
  __n128 v30;
  __n128 v32;
  const char **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;

  v3 = v2;
  v6 = type metadata accessor for CodableError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *((_QWORD *)*v3 + 5);
  v13 = sub_100220D78(&qword_1007C1850, v12, (uint64_t)&protocol conformance descriptor for CodableError);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << v10[32];
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)&v10[((v16 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *((_QWORD *)v17 + 6) + v19 * v16, v6);
      v23 = sub_100220D78(&qword_1007C1858, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)&v18[(v16 >> 3) & 0xFFFFFFFFFFFFF8] >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *((_QWORD *)*v33 + 6) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = (const char *)0x8000000000000000;
    sub_1004620D0((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

uint64_t sub_10045E380(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  const char *v9;
  const char **v11;
  const char *__s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain((const char *)v6);
  Data.hash(into:)(&__s1, a2, a3);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease((const char *)v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  __s1 = *v11;
  *v11 = (const char *)0x8000000000000000;
  sub_10022E4A8(a2, a3);
  sub_100462324(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  v9 = *v11;
  *v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10045EDAC(const char **a1, void *a2)
{
  const char **v2;
  const char **v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  char *v21;
  char *v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  const char *v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint64_t v32;
  const char *v33;

  v3 = v2;
  v6 = (uint64_t)*v2;
  if (((unint64_t)*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = (uint64_t)*v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease((const char *)v6);

      v32 = v9;
      v10 = type metadata accessor for SDAirDropSendConnection(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v33;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_10045F980(v7, result + 1);
    v33 = (const char *)v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_100461084(v29, &qword_1007B7370);
      v25 = (uint64_t)v33;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_10046131C((uint64_t)v8, v25);
    v31 = *v3;
    *v3 = (const char *)v25;
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain((const char *)v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      type metadata accessor for SDAirDropSendConnection(0);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease((const char *)v6);
        v21 = *(char **)(*((_QWORD *)*v3 + 6) + 8 * v15);
        *a1 = v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease((const char *)v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v33 = *v3;
    *v3 = (const char *)0x8000000000000000;
    v8 = a2;
    sub_100462D68((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v33;
    swift_bridgeObjectRelease(v28);
  }
  *a1 = (const char *)v8;
  return 1;
}

uint64_t sub_10045F030(uint64_t a1, uint64_t a2)
{
  return sub_10045F054(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint, (void (*)(_QWORD *))sub_1002B1D84, &qword_1007C1870, (uint64_t (*)(char *, uint64_t))sub_1002B8DD8);
}

uint64_t sub_10045F054(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *), uint64_t *a5, uint64_t (*a6)(char *, uint64_t))
{
  const char **v6;
  const char **v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  __n128 v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  const char *v25;
  const char **v27;
  uint64_t v28;
  void (*v29)(_QWORD *);
  uint64_t *v30;
  uint64_t (*v31)(char *, uint64_t);
  _QWORD v32[9];

  v30 = a5;
  v31 = a6;
  v9 = v6;
  v12 = a3(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - v14;
  v16 = *v6;
  Hasher.init(_seed:)(v32);
  v17 = swift_bridgeObjectRetain(v16);
  v29 = a4;
  ((void (*)(_QWORD *, __n128))a4)(v32, v17);
  v18 = Hasher._finalize()();
  v19 = -1 << v16[32];
  v20 = v18 & ~v19;
  if (((*(_QWORD *)&v16[((v20 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v20) & 1) != 0)
  {
    v27 = v6;
    v28 = a1;
    v21 = ~v19;
    v22 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      sub_100244384(*((_QWORD *)v16 + 6) + v22 * v20, (uint64_t)v15, a3);
      v23 = v31(v15, a2);
      sub_1002443C8((uint64_t)v15, a3);
      if ((v23 & 1) != 0)
        break;
      v20 = (v20 + 1) & v21;
      if (((*(_QWORD *)&v16[((v20 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v20) & 1) == 0)
      {
        swift_bridgeObjectRelease(v16);
        v9 = v27;
        a1 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v16);
    sub_1002443C8(a2, a3);
    sub_100244384(*((_QWORD *)*v27 + 6) + v22 * v20, v28, a3);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    sub_100244384(a2, (uint64_t)v15, a3);
    v32[0] = *v9;
    *v9 = (const char *)0x8000000000000000;
    sub_100462EFC((uint64_t)v15, v20, isUniquelyReferenced_nonNull_native, a3, v30, v29, v31);
    v25 = *v9;
    *v9 = (const char *)v32[0];
    swift_bridgeObjectRelease(v25);
    sub_100221DB4(a2, a1, a3);
    return 1;
  }
}

uint64_t sub_10045F254(uint64_t a1, uint64_t a2)
{
  return sub_10045F054(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint, (void (*)(_QWORD *))sub_1002B1B24, &qword_1007C1868, (uint64_t (*)(char *, uint64_t))sub_1002B814C);
}

uint64_t sub_10045F278(uint64_t *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t *v5;
  uint64_t v10;
  double v11;
  double v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  BOOL v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  uint64_t *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  double v32;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  double v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char **v39;
  _QWORD v41[9];

  v10 = *v5;
  Hasher.init(_seed:)(v41);
  *(_QWORD *)&v11 = swift_bridgeObjectRetain((const char *)v10).n128_u64[0];
  swift_bridgeObjectRetain(a3, v11);
  String.hash(into:)(v41, a2, a3);
  *(_QWORD *)&v12 = swift_bridgeObjectRelease(a3).n128_u64[0];
  swift_bridgeObjectRetain(a5, v12);
  String.hash(into:)(v41, a4, a5);
  swift_bridgeObjectRelease(a5);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  v15 = v13 & ~v14;
  v16 = v10 + 56;
  v37 = (const char *)v10;
  if (((*(_QWORD *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v17 = ~v14;
    v18 = *(_QWORD *)(v10 + 48);
    while (1)
    {
      v19 = (_QWORD *)(v18 + 32 * v15);
      v20 = (const char *)v19[1];
      v21 = v19[2];
      v22 = (const char *)v19[3];
      v23 = *v19 == a2 && v20 == a3;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
      {
        v24 = v21 == a4 && v22 == a5;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, a4, a5, 0) & 1) != 0)
          break;
      }
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_15;
    }
    *(_QWORD *)&v25 = swift_bridgeObjectRelease(a5, v37).n128_u64[0];
    *(_QWORD *)&v26 = swift_bridgeObjectRelease(a3, v25).n128_u64[0];
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v38, v26).n128_u64[0];
    v28 = (uint64_t *)(*((_QWORD *)*v39 + 6) + 32 * v15);
    v29 = (const char *)v28[1];
    v30 = v28[2];
    v31 = (const char *)v28[3];
    *a1 = *v28;
    a1[1] = (uint64_t)v29;
    a1[2] = v30;
    a1[3] = (uint64_t)v31;
    *(_QWORD *)&v32 = swift_bridgeObjectRetain(v29, v27).n128_u64[0];
    swift_bridgeObjectRetain(v31, v32);
    return 0;
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v37, v37);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v39);
    v41[0] = *v39;
    *v39 = (const char *)0x8000000000000000;
    *(_QWORD *)&v35 = swift_bridgeObjectRetain(a3).n128_u64[0];
    swift_bridgeObjectRetain(a5, v35);
    sub_1004630F8(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
    v36 = *v39;
    *v39 = (const char *)v41[0];
    swift_bridgeObjectRelease(v36);
    *a1 = a2;
    a1[1] = (uint64_t)a3;
    result = 1;
    a1[2] = a4;
    a1[3] = (uint64_t)a5;
  }
  return result;
}

uint64_t sub_10045F49C(Swift::Int *a1, void *a2)
{
  return sub_10045F4B8(a1, a2, (unint64_t *)&qword_1007B5470, CNContact_ptr, (uint64_t *)&unk_1007B7238);
}

uint64_t sub_10045F4B8(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v42;
  Swift::Int v43;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v14 = a2;
    v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      v42 = v15;
      v16 = sub_100221EDC(0, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
      *a1 = v43;
      swift_unknownObjectRelease(v15);
      return 0;
    }
    result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_10045F780(v13, result + 1, a5, a3, a4);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v36 = v30 + 1;
      v37 = v14;
      sub_100461084(v36, a5);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v14;
    }
    sub_10046131C((uint64_t)v14, v31);
    v38 = *v9;
    *v9 = v31;
    swift_bridgeObjectRelease(v38);
    *a1 = (Swift::Int)v14;
  }
  else
  {
    v18 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    v19 = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v12 + 32);
    v21 = v19 & ~v20;
    v39 = a4;
    if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_100221EDC(0, a3, a4);
      v22 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
      v23 = static NSObject.== infix(_:_:)(v22, a2);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        v27 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)(v25, a2);

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v43 = *v9;
    *v9 = 0x8000000000000000;
    v34 = a2;
    sub_100461F40((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v39);
    v35 = *v9;
    *v9 = v43;
    swift_bridgeObjectRelease(v35);
    *a1 = (Swift::Int)v34;
  }
  return 1;
}

Swift::Int sub_10045F780(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_100008384(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = v12;
      v14 = sub_100221EDC(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_100461084(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()(result);
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

Swift::Int sub_10045F980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_100008384(&qword_1007B7370);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for SDAirDropSendConnection(0);
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_100461084(v16 + 1, &qword_1007B7370);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

uint64_t sub_10045FB78(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100008384(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100220D78(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

Swift::Int sub_10045FED8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37[9];

  v2 = v1;
  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B7350);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v33 = v2;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v35 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v34 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v34)
      goto LABEL_35;
    v21 = v35[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v34)
        goto LABEL_35;
      v21 = v35[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v34)
          goto LABEL_35;
        v21 = v35[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v36 + 72);
    sub_100221DB4(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for SDAirDropDiscoveredEndpoint);
    Hasher.init(_seed:)(v37);
    sub_1002B2164();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v9 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_100221DB4((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v34)
  {
    v21 = v35[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v34)
          goto LABEL_35;
        v21 = v35[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v33;
  v31 = 1 << *(_BYTE *)(v7 + 32);
  if (v31 > 63)
    bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v35 = -1 << v31;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_100460228(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C1898);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1004604A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C1938);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_100460784(uint64_t a1)
{
  return sub_100461084(a1, &qword_1007C1888);
}

Swift::Int sub_100460790(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C1928);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      Data.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_100460A6C(uint64_t a1)
{
  return sub_100461084(a1, &qword_1007B7370);
}

uint64_t sub_100460A78(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(_QWORD *))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  int64_t v35;
  void (*v36)(_QWORD *);
  _QWORD v37[9];

  v36 = a4;
  v7 = v4;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100008384(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 1);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_29;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v33 = v7;
  v34 = (_QWORD *)(v13 + 56);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v35 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v22 << 6);
      goto LABEL_9;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }
    if (v28 >= v35)
      goto LABEL_25;
    v29 = v34[v28];
    ++v22;
    if (!v29)
    {
      v22 = v28 + 1;
      if (v28 + 1 >= v35)
        goto LABEL_25;
      v29 = v34[v22];
      if (!v29)
      {
        v22 = v28 + 2;
        if (v28 + 2 >= v35)
          goto LABEL_25;
        v29 = v34[v22];
        if (!v29)
          break;
      }
    }
LABEL_24:
    v19 = (v29 - 1) & v29;
    v24 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v10 + 72);
    sub_100221DB4(*(_QWORD *)(v13 + 48) + v25 * v24, (uint64_t)v12, a2);
    Hasher.init(_seed:)(v37);
    v36(v37);
    v26 = Hasher._finalize()();
    v27 = _HashTable.nextHole(atOrAfter:)(v26 & ~(-1 << *(_BYTE *)(v15 + 32)), v15 + 56, ~(-1 << *(_BYTE *)(v15 + 32)));
    *(_QWORD *)(v20 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = sub_100221DB4((uint64_t)v12, *(_QWORD *)(v15 + 48) + v27 * v25, a2);
    ++*(_QWORD *)(v15 + 16);
  }
  v30 = v28 + 3;
  if (v30 < v35)
  {
    v29 = v34[v30];
    if (!v29)
    {
      while (1)
      {
        v22 = v30 + 1;
        if (__OFADD__(v30, 1))
          goto LABEL_31;
        if (v22 >= v35)
          goto LABEL_25;
        v29 = v34[v22];
        ++v30;
        if (v29)
          goto LABEL_24;
      }
    }
    v22 = v30;
    goto LABEL_24;
  }
LABEL_25:
  swift_release(v13);
  v31 = 1 << *(_BYTE *)(v13 + 32);
  if (v31 > 63)
    bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v34 = -1 << v31;
  v7 = v33;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_29:
  result = swift_release(v13);
  *v7 = v15;
  return result;
}

Swift::Int sub_100460D4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  _QWORD v38[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C18D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v37 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v35 = v2;
    v36 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v36)
          goto LABEL_36;
        v18 = v37[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v36)
            goto LABEL_36;
          v18 = v37[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v36)
              goto LABEL_36;
            v18 = v37[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v36)
              {
LABEL_36:
                swift_release(v3);
                v2 = v35;
                v34 = 1 << *(_BYTE *)(v3 + 32);
                if (v34 > 63)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v37[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v36)
                    goto LABEL_36;
                  v18 = v37[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = v3;
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v16);
      v22 = *v21;
      v23 = (const char *)v21[1];
      v24 = v21[2];
      v25 = (const char *)v21[3];
      Hasher.init(_seed:)(v38);
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(v38, v22, v23);
      *(_QWORD *)&v26 = swift_bridgeObjectRelease(v23).n128_u64[0];
      swift_bridgeObjectRetain(v25, v26);
      String.hash(into:)(v38, v24, v25);
      swift_bridgeObjectRelease(v25);
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v6 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v10 + 8 * v29);
        }
        while (v33 == -1);
        v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 32 * v13);
      *v14 = v22;
      v14[1] = v23;
      v14[2] = v24;
      v14[3] = v25;
      ++*(_QWORD *)(v6 + 16);
      v3 = v20;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_100461084(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100008384(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain(v4);
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

unint64_t sub_10046131C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_10046139C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10045FB78(v12, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, &qword_1007C1978, &qword_1007B5530, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100463620((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, &qword_1007C1978);
      goto LABEL_12;
    }
    sub_100463F6C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, &qword_1007C1978, &qword_1007B5530, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100220D78(&qword_1007B5530, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100220D78(&qword_1007C1970, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1004615F0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10045FB78(v12, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1007C1968, &qword_1007B5528, (uint64_t)&protocol conformance descriptor for URL);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100463620((uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_1007C1968);
      goto LABEL_12;
    }
    sub_100463F6C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1007C1968, &qword_1007B5528, (uint64_t)&protocol conformance descriptor for URL);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100220D78(&qword_1007B5528, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100220D78(&qword_1007C1950, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100461844(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];

  v4 = v3;
  v8 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v29 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10045FED8(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1004639F4(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1007B7350);
      goto LABEL_12;
    }
    sub_100464288(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v30);
  sub_1002B2164();
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v28 = v8;
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_100244384(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_1002BA1A4((uint64_t)v11, a1);
      v21 = v20;
      sub_1002443C8((uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_100221DB4(a1, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v29 + 72) * a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

uint64_t sub_100461A34(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10045FB78(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_1007B72F0, &qword_1007B6448, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100463620((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1007B72F0);
      goto LABEL_12;
    }
    sub_100463F6C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_1007B72F0, &qword_1007B6448, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100220D78((unint64_t *)&unk_1007B7300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100461C88(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100460228(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1004632DC();
      goto LABEL_14;
    }
    sub_10046459C(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_100461DA8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1004604A8(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100463470();
      goto LABEL_22;
    }
    sub_1004647FC(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void sub_100461F40(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100461084(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100463DCC(a4);
      goto LABEL_14;
    }
    sub_1004652F8(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_100221EDC(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

uint64_t sub_1004620D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for CodableError(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10045FB78(v12, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, &qword_1007C1860, &qword_1007C1850, (uint64_t)&protocol conformance descriptor for CodableError);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100463620((uint64_t (*)(_QWORD))&type metadata accessor for CodableError, &qword_1007C1860);
      goto LABEL_12;
    }
    sub_100463F6C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, &qword_1007C1860, &qword_1007C1850, (uint64_t)&protocol conformance descriptor for CodableError);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100220D78(&qword_1007C1850, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100220D78(&qword_1007C1858, (uint64_t (*)(uint64_t))&type metadata accessor for CodableError, (uint64_t)&protocol conformance descriptor for CodableError);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

Swift::Int sub_100462324(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t __s1;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_100460790(v10);
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)sub_100463844();
        goto LABEL_10;
      }
      sub_100464AA8(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(&__s1);
    Data.hash(into:)(&__s1, v7, a2);
    result = Hasher._finalize()();
    a3 = result & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v12 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v13 = (Swift::Int *)(*(_QWORD *)(v12 + 48) + 16 * a3);
  *v13 = v7;
  v13[1] = a2;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x100462C8CLL);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

void sub_100462D68(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100461084(v9, &qword_1007B7370);
  }
  else
  {
    if (v8 > v7)
    {
      sub_100463DCC(&qword_1007B7370);
      goto LABEL_14;
    }
    sub_1004652F8(v9, &qword_1007B7370);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = type metadata accessor for SDAirDropSendConnection(0);
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

uint64_t sub_100462EFC(uint64_t a1, unint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5, void (*a6)(_QWORD *), uint64_t (*a7)(char *, uint64_t))
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  v15 = a4(0);
  v34 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(*v7 + 16);
  v19 = *(_QWORD *)(*v7 + 24);
  v33 = v7;
  if (v19 > v18 && (a3 & 1) != 0)
    goto LABEL_12;
  v20 = v18 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100460A78(v20, a4, a5, a6);
  }
  else
  {
    if (v19 > v18)
    {
      sub_1004639F4(a4, a5);
      goto LABEL_12;
    }
    sub_100464D58(v20, a4, a5, a6);
  }
  v21 = *v7;
  Hasher.init(_seed:)(v35);
  a6(v35);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v21 + 32);
  a2 = v22 & ~v23;
  if (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v32 = v15;
    v24 = ~v23;
    v25 = *(_QWORD *)(v34 + 72);
    do
    {
      sub_100244384(*(_QWORD *)(v21 + 48) + v25 * a2, (uint64_t)v17, a4);
      v26 = a7(v17, a1);
      sub_1002443C8((uint64_t)v17, a4);
      if ((v26 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v24;
    }
    while (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v27 = *v33;
  *(_QWORD *)(*v33 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_100221DB4(a1, *(_QWORD *)(v27 + 48) + *(_QWORD *)(v34 + 72) * a2, a4);
  v29 = *(_QWORD *)(v27 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v27 + 16) = v31;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
  return result;
}

void sub_1004630F8(uint64_t a1, const char *a2, uint64_t a3, const char *a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[9];

  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_22;
  v14 = v12 + 1;
  if ((a6 & 1) != 0)
  {
    sub_100460D4C(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100463C0C();
      goto LABEL_22;
    }
    sub_100464FF4(v14);
  }
  v15 = *v6;
  Hasher.init(_seed:)(v34);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v34, a1, a2);
  *(_QWORD *)&v16 = swift_bridgeObjectRelease(a2).n128_u64[0];
  swift_bridgeObjectRetain(a4, v16);
  String.hash(into:)(v34, a3, a4);
  swift_bridgeObjectRelease(a4);
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v15 + 32);
  a5 = v17 & ~v18;
  v19 = v15 + 56;
  if (((*(_QWORD *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v20 = ~v18;
    v21 = *(_QWORD *)(v15 + 48);
    while (1)
    {
      v22 = (_QWORD *)(v21 + 32 * a5);
      v23 = (const char *)v22[1];
      v24 = v22[2];
      v25 = (const char *)v22[3];
      v26 = *v22 == a1 && v23 == a2;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, a1, a2, 0) & 1) != 0)
      {
        v27 = v24 == a3 && v25 == a4;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a3, a4, 0) & 1) != 0)
          break;
      }
      a5 = (a5 + 1) & v20;
      if (((*(_QWORD *)(v19 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
        goto LABEL_22;
    }
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SDHashStoreContact);
    __break(1u);
  }
LABEL_22:
  v28 = *v33;
  *(_QWORD *)(*v33 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v29 = (_QWORD *)(*(_QWORD *)(v28 + 48) + 32 * a5);
  *v29 = a1;
  v29[1] = a2;
  v29[2] = a3;
  v29[3] = a4;
  v30 = *(_QWORD *)(v28 + 16);
  v31 = __OFADD__(v30, 1);
  v32 = v30 + 1;
  if (v31)
    __break(1u);
  else
    *(_QWORD *)(v28 + 16) = v32;
}

void *sub_1004632DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100008384(&qword_1007C1898);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100463470()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008384(&qword_1007C1938);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100463620(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_100008384(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100463844()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100008384(&qword_1007C1928);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_10022E4A8(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1004639F4(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - v8;
  sub_100008384(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)(*v2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release(v10);
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_100244384(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)sub_100221DB4((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release(v10);
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_100463C0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  double v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100008384(&qword_1007C18D0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_28;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
      {
        v9 = v23 + 2;
        if (v23 + 2 >= v13)
          goto LABEL_28;
        v24 = *(_QWORD *)(v6 + 8 * v9);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = (const char *)v17[1];
    v19 = v17[2];
    v20 = (const char *)v17[3];
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    v21[2] = v19;
    v21[3] = v20;
    *(_QWORD *)&v22 = swift_bridgeObjectRetain(v18).n128_u64[0];
    swift_bridgeObjectRetain(v20, v22);
  }
  v25 = v23 + 3;
  if (v25 >= v13)
    goto LABEL_28;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

id sub_100463DCC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100008384(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100463F6C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100008384(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100220D78(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_100464288(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36[9];

  v2 = v1;
  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B7350);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_37:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v32 = v2;
  v33 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v34 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v34)
      goto LABEL_35;
    v21 = *(_QWORD *)(v33 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v34)
        goto LABEL_35;
      v21 = *(_QWORD *)(v33 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v34)
          goto LABEL_35;
        v21 = *(_QWORD *)(v33 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v35 + 72);
    sub_100244384(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for SDAirDropDiscoveredEndpoint);
    Hasher.init(_seed:)(v36);
    sub_1002B2164();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v9 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v14 + 8 * v26);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_100221DB4((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v34)
  {
LABEL_35:
    result = swift_release_n(v7, 2);
    v2 = v32;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v34)
      goto LABEL_35;
    v21 = *(_QWORD *)(v33 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10046459C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C1898);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1004647FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C1938);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100464AA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C1928);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    sub_10022E4A8(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100464D58(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(_QWORD *))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  void (*v35)(_QWORD *);
  _QWORD v36[9];

  v35 = a4;
  v7 = v4;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100008384(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_27:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v32 = v7;
  v33 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v34 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v22 << 6);
      goto LABEL_9;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v28 >= v34)
      goto LABEL_25;
    v29 = *(_QWORD *)(v33 + 8 * v28);
    ++v22;
    if (!v29)
    {
      v22 = v28 + 1;
      if (v28 + 1 >= v34)
        goto LABEL_25;
      v29 = *(_QWORD *)(v33 + 8 * v22);
      if (!v29)
      {
        v22 = v28 + 2;
        if (v28 + 2 >= v34)
          goto LABEL_25;
        v29 = *(_QWORD *)(v33 + 8 * v22);
        if (!v29)
          break;
      }
    }
LABEL_24:
    v19 = (v29 - 1) & v29;
    v24 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v10 + 72);
    sub_100244384(*(_QWORD *)(v13 + 48) + v25 * v24, (uint64_t)v12, a2);
    Hasher.init(_seed:)(v36);
    v35(v36);
    v26 = Hasher._finalize()();
    v27 = _HashTable.nextHole(atOrAfter:)(v26 & ~(-1 << *(_BYTE *)(v15 + 32)), v15 + 56, ~(-1 << *(_BYTE *)(v15 + 32)));
    *(_QWORD *)(v20 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = sub_100221DB4((uint64_t)v12, *(_QWORD *)(v15 + 48) + v27 * v25, a2);
    ++*(_QWORD *)(v15 + 16);
  }
  v30 = v28 + 3;
  if (v30 >= v34)
  {
LABEL_25:
    result = swift_release_n(v13, 2);
    v7 = v32;
    goto LABEL_27;
  }
  v29 = *(_QWORD *)(v33 + 8 * v30);
  if (v29)
  {
    v22 = v30;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v22 >= v34)
      goto LABEL_25;
    v29 = *(_QWORD *)(v33 + 8 * v22);
    ++v30;
    if (v29)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

Swift::Int sub_100464FF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008384(&qword_1007C18D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_36;
      v18 = *(_QWORD *)(v34 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v35)
          goto LABEL_36;
        v18 = *(_QWORD *)(v34 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * v16);
    v21 = *v20;
    v22 = (const char *)v20[1];
    v23 = v20[2];
    v24 = (const char *)v20[3];
    Hasher.init(_seed:)(v36);
    swift_bridgeObjectRetain_n(v22, 2);
    swift_bridgeObjectRetain(v24);
    String.hash(into:)(v36, v21, v22);
    *(_QWORD *)&v25 = swift_bridgeObjectRelease(v22).n128_u64[0];
    swift_bridgeObjectRetain(v24, v25);
    String.hash(into:)(v36, v23, v24);
    swift_bridgeObjectRelease(v24);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 32 * v13);
    *v14 = v21;
    v14[1] = v22;
    v14[2] = v23;
    v14[3] = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v35)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v33;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1004652F8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100008384(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain(v4);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10046556C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4AF0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_10022138C((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_10026EFF8(v26, (uint64_t)&v39);
      sub_10022E77C(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_10022138C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100465880(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  const char *v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B5AF0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = (const char *)v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10022138C(v25, v38);
      }
      else
      {
        sub_10022E77C((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10022138C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100465B7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[3];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C1810);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v18);
    if ((v38 & 1) != 0)
    {
      sub_10026D7AC(v26, v40);
    }
    else
    {
      sub_100340E40((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = (uint64_t)sub_10026D7AC(v40, (_OWORD *)(*(_QWORD *)(v8 + 56) + 48 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100465EA0(uint64_t a1, uint64_t a2)
{
  return sub_100467F3C(a1, a2, &qword_1007C1808);
}

uint64_t sub_100465EAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C1818);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100466240(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  uint64_t v48;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C1828);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v45 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = v2;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_36;
      v25 = v45[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release(v9);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v44)
              goto LABEL_36;
            v25 = v45[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v48 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v35 = -1 << *(_BYTE *)(v11 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v9 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

uint64_t sub_1004665EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  uint64_t *v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;

  v6 = v4;
  v9 = a3(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v57 = &v49[-v10];
  v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v56 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100008384(a4);
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    v46 = v14;
LABEL_44:
    result = swift_release(v46);
    *v6 = v16;
    return result;
  }
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v53 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v51 = v6;
  v52 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  v55 = v14;
  result = swift_retain(v14);
  v23 = 0;
  v50 = a2;
  v24 = 16;
  if ((a2 & 1) != 0)
    v24 = 32;
  v54 = v24;
  v25 = v24;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_26;
    }
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v52)
    {
      v47 = v55;
      swift_release(v55);
      v6 = v51;
      v30 = v53;
      if ((v50 & 1) != 0)
      {
LABEL_39:
        v48 = 1 << *(_BYTE *)(v47 + 32);
        if (v48 >= 64)
          bzero(v30, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v48;
        *(_QWORD *)(v47 + 16) = 0;
      }
LABEL_43:
      v46 = v47;
      goto LABEL_44;
    }
    v30 = v53;
    v31 = v53[v29];
    ++v23;
    if (!v31)
    {
      v23 = v29 + 1;
      if (v29 + 1 >= v52)
        goto LABEL_36;
      v31 = v53[v23];
      if (!v31)
        break;
    }
LABEL_25:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_26:
    v33 = v55;
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v25))(v13, *(_QWORD *)(v55 + 48) + v34 * v28, v11);
    v35 = *(_QWORD *)(v33 + 56);
    v36 = *(_QWORD *)(v58 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v58 + v25))(v57, v35 + v36 * v28, v59);
    v37 = *(_QWORD *)(v16 + 40);
    v38 = sub_100220D78(&qword_1007B6590, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v45 == -1);
      v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v16 + 48) + v34 * v26, v13, v11);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v58 + 32))(*(_QWORD *)(v16 + 56) + v36 * v26, v57, v59);
    ++*(_QWORD *)(v16 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v52)
  {
LABEL_36:
    v47 = v55;
    swift_release(v55);
    v6 = v51;
    if ((v50 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v53[v32];
  if (v31)
  {
    v23 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v23 >= v52)
      goto LABEL_36;
    v31 = v53[v23];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1004669E4(uint64_t a1, uint64_t a2)
{
  return sub_100469710(a1, a2, (uint64_t *)&unk_1007B4B00);
}

Swift::Int sub_1004669F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4E58);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100466CC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  int v52;

  v50 = a5;
  v51 = a6;
  v8 = v6;
  v49 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_100008384(a4);
  v52 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v47 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v45 = v8;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain(v15);
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v28 >= v46)
      break;
    v29 = v47;
    v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v46)
        goto LABEL_36;
      v30 = v47[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_36:
          swift_release(v15);
          v8 = v45;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v46)
              goto LABEL_36;
            v30 = v47[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    v35 = *(_QWORD *)(v17 + 40);
    v36 = sub_100220D78(v50, v49, v51);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v11, v36);
    v37 = -1 << *(_BYTE *)(v17 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v8 = v45;
  v29 = v47;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v44 = 1 << *(_BYTE *)(v15 + 32);
  if (v44 >= 64)
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v44;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  result = swift_release(v15);
  *v8 = v17;
  return result;
}

Swift::Int sub_10046704C(uint64_t a1, uint64_t a2)
{
  return sub_100467060(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1007C1900);
}

Swift::Int sub_100467060(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::Int result;
  int64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t (*v49)(_QWORD);
  _QWORD v50[9];

  v6 = v4;
  v49 = a3;
  v9 = a3(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100008384(a4);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v46 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v6;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v45)
      break;
    v27 = v46;
    v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v45)
        goto LABEL_36;
      v28 = v46[v21];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release(v12);
          v6 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            v21 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v21 >= v45)
              goto LABEL_36;
            v28 = v46[v21];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v21 = v29;
      }
    }
LABEL_23:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_24:
    v30 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v25);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v47 + 72);
    v34 = *(_QWORD *)(v12 + 56) + v33 * v25;
    if ((v48 & 1) != 0)
    {
      sub_100221DB4(v34, (uint64_t)v11, v49);
    }
    else
    {
      sub_100244384(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50);
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    *v23 = v32;
    v23[1] = v31;
    result = sub_100221DB4((uint64_t)v11, *(_QWORD *)(v14 + 56) + v33 * v22, v49);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v6 = v44;
  v27 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 >= 64)
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v6 = v14;
  return result;
}

Swift::Int sub_1004673D4(uint64_t a1, uint64_t a2)
{
  return sub_100469710(a1, a2, &qword_1007B4CC8);
}

Swift::Int sub_1004673E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4CA0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = *(_QWORD *)(v5 + 48) + v32;
    v35 = *(_QWORD *)v33;
    v34 = *(_QWORD *)(v33 + 8);
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = (const char *)v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(*(const char **)(v33 + 8));
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100467704(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = sub_100008384(&qword_1007B6738);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v54 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v12 = a1;
  else
    v12 = *(_QWORD *)(*v3 + 24);
  sub_100008384(&qword_1007C1958);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16))
  {
    v44 = v11;
LABEL_45:
    result = swift_release(v44);
    *v3 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 64);
  v51 = (_QWORD *)(v11 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = v3;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v53 = v11;
  result = swift_retain(v11);
  v21 = 0;
  v48 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v52 = v22;
  v23 = v22;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v27 >= v50)
    {
      v45 = v53;
      swift_release(v53);
      v3 = v49;
      v28 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        v46 = 1 << *(_BYTE *)(v45 + 32);
        if (v46 >= 64)
          bzero(v28, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v28 = -1 << v46;
        *(_QWORD *)(v45 + 16) = 0;
      }
LABEL_44:
      v44 = v45;
      goto LABEL_45;
    }
    v28 = v51;
    v29 = v51[v27];
    ++v21;
    if (!v29)
    {
      v21 = v27 + 1;
      if (v27 + 1 >= v50)
        goto LABEL_37;
      v29 = v51[v21];
      if (!v29)
        break;
    }
LABEL_26:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    v31 = v53;
    v32 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v23))(v10, *(_QWORD *)(v53 + 48) + v32 * v26, v8);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v23))(v55, v33 + v34 * v26, v57);
    v35 = *(_QWORD *)(v14 + 40);
    v36 = sub_100220D78(&qword_1007B6590, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v14 + 48) + v32 * v24, v10, v8);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v55, v57);
    ++*(_QWORD *)(v14 + 16);
  }
  v30 = v27 + 2;
  if (v30 >= v50)
  {
LABEL_37:
    v45 = v53;
    swift_release(v53);
    v3 = v49;
    if ((v48 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v29 = v51[v30];
  if (v29)
  {
    v21 = v30;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= v50)
      goto LABEL_37;
    v29 = v51[v21];
    ++v30;
    if (v29)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100467B00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t i;
  int v52;
  uint64_t v53;

  v3 = v2;
  v6 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C1840);
  v52 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (*(_QWORD *)(v12 + 16))
  {
    v15 = 1 << *(_BYTE *)(v12 + 32);
    v16 = *(_QWORD *)(v12 + 64);
    v49 = (_QWORD *)(v12 + 64);
    if (v15 < 64)
      v17 = ~(-1 << v15);
    else
      v17 = -1;
    v18 = v17 & v16;
    v47 = v2;
    v48 = (unint64_t)(v15 + 63) >> 6;
    v19 = v13 + 64;
    result = swift_retain(v12);
    v21 = 0;
    v22 = v12;
    for (i = v12; ; v22 = i)
    {
      if (v18)
      {
        v24 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v25 = v24 | (v21 << 6);
      }
      else
      {
        v26 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v26 >= v48)
        {
          swift_release(v22);
          v3 = v47;
          v27 = v49;
          if ((v52 & 1) == 0)
            goto LABEL_41;
LABEL_38:
          v45 = 1 << *(_BYTE *)(i + 32);
          if (v45 >= 64)
            bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v27 = -1 << v45;
          v44 = i;
          *(_QWORD *)(i + 16) = 0;
          goto LABEL_44;
        }
        v27 = v49;
        v28 = v49[v26];
        ++v21;
        if (!v28)
        {
          v21 = v26 + 1;
          if (v26 + 1 >= v48)
            goto LABEL_37;
          v28 = v49[v21];
          if (!v28)
          {
            v29 = v26 + 2;
            if (v29 >= v48)
            {
LABEL_37:
              swift_release(v22);
              v3 = v47;
              if ((v52 & 1) == 0)
              {
LABEL_41:
                v44 = i;
                goto LABEL_44;
              }
              goto LABEL_38;
            }
            v28 = v49[v29];
            if (!v28)
            {
              while (1)
              {
                v21 = v29 + 1;
                if (__OFADD__(v29, 1))
                  break;
                if (v21 >= v48)
                  goto LABEL_37;
                v28 = v49[v21];
                ++v29;
                if (v28)
                  goto LABEL_23;
              }
LABEL_46:
              __break(1u);
              return result;
            }
            v21 = v29;
          }
        }
LABEL_23:
        v18 = (v28 - 1) & v28;
        v25 = __clz(__rbit64(v28)) + (v21 << 6);
      }
      v30 = *(_QWORD *)(v9 + 72);
      v31 = *(_QWORD *)(v22 + 48) + v30 * v25;
      if ((v52 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
        v32 = *(_QWORD *)(v22 + 56);
        v33 = *(_QWORD *)(v50 + 72);
        sub_100221DB4(v32 + v33 * v25, v53, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
        v34 = *(_QWORD *)(v22 + 56);
        v33 = *(_QWORD *)(v50 + 72);
        sub_100244384(v34 + v33 * v25, v53, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      }
      v35 = *(_QWORD *)(v14 + 40);
      v36 = sub_100220D78(&qword_1007B6590, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
      v37 = -1 << *(_BYTE *)(v14 + 32);
      v38 = result & ~v37;
      v39 = v38 >> 6;
      if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
      {
        v23 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v40 = 0;
        v41 = (unint64_t)(63 - v37) >> 6;
        do
        {
          if (++v39 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v42 = v39 == v41;
          if (v39 == v41)
            v39 = 0;
          v40 |= v42;
          v43 = *(_QWORD *)(v19 + 8 * v39);
        }
        while (v43 == -1);
        v23 = __clz(__rbit64(~v43)) + (v39 << 6);
      }
      *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v30 * v23, v11, v8);
      result = sub_100221DB4(v53, *(_QWORD *)(v14 + 56) + v33 * v23, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      ++*(_QWORD *)(v14 + 16);
    }
  }
  v44 = v12;
LABEL_44:
  result = swift_release(v44);
  *v3 = v14;
  return result;
}

uint64_t sub_100467F1C(uint64_t a1, uint64_t a2)
{
  return sub_10046AA54(a1, a2, &qword_1007C18E0, (void (*)(unint64_t, _BYTE *))sub_10026EE60);
}

uint64_t sub_100467F30(uint64_t a1, uint64_t a2)
{
  return sub_100467F3C(a1, a2, &qword_1007C1948);
}

uint64_t sub_100467F3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  __int128 v45;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_100008384(a3);
  v44 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v43 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v41 = v5;
  v42 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v42)
      break;
    v26 = v43;
    v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v42)
        goto LABEL_36;
      v27 = v43[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_36:
          swift_release(v12);
          v5 = v41;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v42)
              goto LABEL_36;
            v27 = v43[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v45 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v45 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v24);
      swift_unknownObjectRetain(v45);
    }
    v31 = *(_QWORD *)(v14 + 40);
    v32 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v8, v32);
    v33 = -1 << *(_BYTE *)(v14 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v19 + 8 * v35);
      }
      while (v39 == -1);
      v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_OWORD *)(*(_QWORD *)(v14 + 56) + 16 * v22) = v45;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v41;
  v26 = v43;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v12 + 32);
  if (v40 >= 64)
    bzero(v26, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v40;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v5 = v14;
  return result;
}

uint64_t sub_1004682D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = type metadata accessor for SFNWInterfaceType(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v12 = a1;
  else
    v12 = *(_QWORD *)(*v3 + 24);
  sub_100008384((uint64_t *)&unk_1007B4C10);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16))
  {
    v44 = v11;
LABEL_45:
    result = swift_release(v44);
    *v3 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 64);
  v51 = (_QWORD *)(v11 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = v3;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v53 = v11;
  result = swift_retain(v11);
  v21 = 0;
  v48 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v52 = v22;
  v23 = v22;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v27 >= v50)
    {
      v45 = v53;
      swift_release(v53);
      v3 = v49;
      v28 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        v46 = 1 << *(_BYTE *)(v45 + 32);
        if (v46 >= 64)
          bzero(v28, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v28 = -1 << v46;
        *(_QWORD *)(v45 + 16) = 0;
      }
LABEL_44:
      v44 = v45;
      goto LABEL_45;
    }
    v28 = v51;
    v29 = v51[v27];
    ++v21;
    if (!v29)
    {
      v21 = v27 + 1;
      if (v27 + 1 >= v50)
        goto LABEL_37;
      v29 = v51[v21];
      if (!v29)
        break;
    }
LABEL_26:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    v31 = v53;
    v32 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v23))(v10, *(_QWORD *)(v53 + 48) + v32 * v26, v8);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v23))(v55, v33 + v34 * v26, v57);
    v35 = *(_QWORD *)(v14 + 40);
    v36 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v14 + 48) + v32 * v24, v10, v8);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v55, v57);
    ++*(_QWORD *)(v14 + 16);
  }
  v30 = v27 + 2;
  if (v30 >= v50)
  {
LABEL_37:
    v45 = v53;
    swift_release(v53);
    v3 = v49;
    if ((v48 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v29 = v51[v30];
  if (v29)
  {
    v21 = v30;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= v50)
      goto LABEL_37;
    v29 = v51[v21];
    ++v30;
    if (v29)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
  return result;
}

Swift::Int sub_1004686D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4B90);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1004689D8(uint64_t a1, uint64_t a2)
{
  return sub_100467060(a1, a2, type metadata accessor for RegistrationState, &qword_1007B4BB0);
}

uint64_t sub_1004689EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v5 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4CB0);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
    v38 = v41;
LABEL_44:
    *v38 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  HIDWORD(v40) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v44 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v42)
    {
      swift_release(v8);
      v38 = v41;
      v23 = v43;
      if ((v40 & 0x100000000) != 0)
      {
LABEL_39:
        v39 = 1 << *(_BYTE *)(v8 + 32);
        if (v39 >= 64)
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v39;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v8);
      goto LABEL_44;
    }
    v23 = v43;
    v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v24 = v43[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5);
    v27 = v8;
    v28 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_100220D78(&qword_1007B5528, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_BYTE *)(*(_QWORD *)(v10 + 56) + v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release(v8);
    v38 = v41;
    if ((v40 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v43[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v42)
      goto LABEL_36;
    v24 = v43[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_100468D88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4C58);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = *(_QWORD *)(v5 + 48) + 16 * v21;
    v32 = *(_QWORD *)v30;
    v31 = *(_QWORD *)(v30 + 8);
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(*(const char **)(v30 + 8));
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100469090(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  double v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C18E8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(const char **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
    {
      *(_QWORD *)&v34 = swift_bridgeObjectRetain((const char *)v30[1]).n128_u64[0];
      swift_bridgeObjectRetain(v33, v34);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1004693A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = sub_100008384(&qword_1007B6640);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100008384(&qword_1007C18F0);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = (const char *)v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v47);
    String.hash(into:)(v47, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_36;
        v23 = v43[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

Swift::Int sub_100469710(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100008384(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_100469A18(uint64_t a1, uint64_t a2)
{
  return sub_100469A24(a1, a2, &qword_1007C1908);
}

Swift::Int sub_100469A24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100008384(a3);
  v39 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = v4;
  v37 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v37)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v37)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v37)
        {
LABEL_36:
          swift_release(v6);
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v37)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v36;
  v24 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_100469D28(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[9];

  v6 = v4;
  v49 = a3(0);
  v9 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v43 - v10;
  v11 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100008384(a4);
  v47 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v44 = v6;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      goto LABEL_36;
    v26 = v46[v25];
    ++v20;
    if (!v26)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v20];
      if (!v26)
        break;
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v11 + 56);
    v29 = v11;
    v30 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v9 + 72);
    v34 = v28 + v33 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v34, v49);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v48, v34, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50);
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v13 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      v21 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v32;
    v22[1] = v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v13 + 56) + v33 * v21, v48, v49);
    ++*(_QWORD *)(v13 + 16);
    v11 = v29;
  }
  v27 = v25 + 2;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v20 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_43;
        if (v20 >= v45)
          goto LABEL_36;
        v26 = v46[v20];
        ++v27;
        if (v26)
          goto LABEL_23;
      }
    }
    v20 = v27;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v6 = v44;
  if ((v47 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v11 + 32);
    if (v42 >= 64)
      bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v46 = -1 << v42;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v11);
  *v6 = v13;
  return result;
}

Swift::Int sub_10046A08C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C18D8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = *(_QWORD *)(v5 + 48) + 16 * v21;
    v32 = *(_QWORD *)v30;
    v31 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(*(const char **)(v30 + 8));
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10046A3A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C1930);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v35 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v35 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v35 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(const char **)(*(_QWORD *)(v5 + 56) + 8 * v22);
    v36 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_10022E4A8(v36, v32);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v37);
    Data.hash(into:)(v37, v36, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v20 = v36;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      v20 = v36;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19) = v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10046A6A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  int v42;
  __int128 v43;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C18A8);
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v10);
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v40)
              goto LABEL_36;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v43 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v43 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
      swift_retain(*((_QWORD *)&v43 + 1));
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v20) = v43;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v39;
  v24 = v41;
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v10 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_10046AA40(uint64_t a1, uint64_t a2)
{
  return sub_10046AA54(a1, a2, &qword_1007C1878, (void (*)(unint64_t, _BYTE *))sub_10026EE60);
}

uint64_t sub_10046AA54(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(unint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  void (*v46)(unint64_t, _BYTE *);
  _BYTE v47[40];

  v46 = a4;
  v6 = v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_100008384(a3);
  v45 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v44 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = v6;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = v44;
    v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_36;
      v28 = v44[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release(v13);
          v6 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v43)
              goto LABEL_36;
            v28 = v44[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v10 + 72);
    v31 = *(_QWORD *)(v13 + 48) + v30 * v25;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v31, v9);
      v46(*(_QWORD *)(v13 + 56) + 40 * v25, v47);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v31, v9);
      sub_100244418(*(_QWORD *)(v13 + 56) + 40 * v25, (uint64_t)v47);
    }
    v32 = *(_QWORD *)(v15 + 40);
    v33 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v15 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v30 * v23, v12, v9);
    result = ((uint64_t (*)(_BYTE *, unint64_t))v46)(v47, *(_QWORD *)(v15 + 56) + 40 * v23);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v6 = v42;
  v27 = v44;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v13 + 32);
  if (v41 >= 64)
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v41;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  result = swift_release(v13);
  *v6 = v15;
  return result;
}

Swift::Int sub_10046AE0C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int *v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007C1880);
  v36 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain(v31);
      Hasher.init(_seed:)(v37);
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_10046B0F0(uint64_t a1, uint64_t a2)
{
  return sub_100466CC0(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1007B4BF0, &qword_1007B6448, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10046B114(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008384(&qword_1007B4BA0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_unknownObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

_OWORD *sub_10046B4A8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10045C1D0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10022E75C(v17);
        return sub_10022138C(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10046E1E8();
      goto LABEL_7;
    }
    sub_10046556C(v13, a3 & 1);
    v19 = sub_10045C1D0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10026EFF8(a2, (uint64_t)v21);
      return sub_10046D9F4(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10046B5E0(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  sub_10046BEF4(a1, a2, a3, a4, &qword_1007B4CE0);
}

_OWORD *sub_10046B5EC(_OWORD *a1, uint64_t a2, const char *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10022E75C(v19);
        return sub_10022138C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10046E3D8();
      goto LABEL_7;
    }
    sub_100465880(v15, a4 & 1);
    v21 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10046DA6C(v12, a2, (uint64_t)a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10046B73C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10045C244(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100471718((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007C1848);
    goto LABEL_7;
  }
  sub_100466CC0(v17, a3 & 1, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007C1848, &qword_1007B6590, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v22 = sub_10045C244(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10046E150(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier);
}

_OWORD *sub_10046B8D0(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 48 * v12);
        sub_10022E75C(v19);
        return sub_10026D7AC(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10046E5D0();
      goto LABEL_7;
    }
    sub_100465B7C(v15, a4 & 1);
    v21 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10046DAD4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10046BA24(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10045C2DC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10046E7C4();
    goto LABEL_7;
  }
  sub_100465EAC(v17, a3 & 1);
  v23 = sub_10045C2DC(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10046DB40(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10046BB80(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_10045C2DC(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_bridgeObjectRelease(v22[1]);
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10046E9F4();
    goto LABEL_7;
  }
  sub_100466240(v18, a4 & 1);
  v25 = sub_10045C2DC(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_10046DBD8(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_10046BCEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10046C9F4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for SFClientIdentity, &qword_1007C1820);
}

uint64_t sub_10046BD00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10046C85C(a1, a2, a3, a4, type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, &qword_1007B4C00);
}

uint64_t sub_10046BD14(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10046BD3C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for NWEndpoint, &qword_1007C1830);
}

uint64_t sub_10046BD28(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10046BD3C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer, &qword_1007B4C50);
}

uint64_t sub_10046BD3C(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_10045C244(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        v24 = a4(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, v29, v24);
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a3 & 1) == 0)
    {
      sub_10046FADC(a4, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier, v28);
      goto LABEL_7;
    }
    sub_1004665EC(v19, a3 & 1, a4, v28);
    v26 = sub_10045C244(a2);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_10046DE84(v16, (uint64_t)v13, v29, v22, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
  return result;
}

void sub_10046BEE8(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  sub_10046BEF4(a1, a2, a3, a4, (uint64_t *)&unk_1007B4B00);
}

void sub_10046BEF4(uint64_t a1, uint64_t a2, const char *a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_100470790(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = (uint64_t)a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100469710(v17, a4 & 1, a5);
  v22 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10046C088(uint64_t a1, uint64_t a2, char a3)
{
  sub_10046D700(a1, a2, a3, &qword_1007B4CD8);
}

uint64_t sub_10046C094(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_100470944((uint64_t *)&unk_1007B4C60);
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_100469A24(result, a4 & 1, (uint64_t *)&unk_1007B4C60);
  result = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10046C214(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10046C85C(a1, a2, a3, a4, type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1007C1900);
}

void sub_10046C228(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  sub_10046BEF4(a1, a2, a3, a4, &qword_1007B4CC8);
}

void sub_10046C234(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10045C464(a3, (uint64_t)a4, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10046F0E4();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      swift_bridgeObjectRelease(*(const char **)(v21 + 8));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = (uint64_t)a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_1004673E0(v17, a5 & 1);
  v22 = sub_10045C464(a3, (uint64_t)a4, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10046C3C8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10045C244(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = sub_100008384(&qword_1007B6738);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10046F29C();
      goto LABEL_7;
    }
    sub_100467704(v17, a3 & 1);
    v24 = sub_10045C244(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10046DD10(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10046C554(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10045C244(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      v22 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
      return sub_1004777E8(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10046F580();
    goto LABEL_7;
  }
  sub_100467B00(v17, a3 & 1);
  v24 = sub_10045C244(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v24;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10046DDCC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10046C6C4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10046BD3C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer, &qword_1007B4C40);
}

uint64_t sub_10046C6D8(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_10046FDBC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_1004686D0(result, a4 & 1);
  result = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10046C848(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10046C85C(a1, a2, a3, a4, type metadata accessor for RegistrationState, &qword_1007B4BB0);
}

uint64_t sub_10046C85C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v9;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;

  v9 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a4 & 1) != 0)
    {
LABEL_7:
      v22 = *v9;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        v24 = a5(0);
        return sub_1004777E8(a1, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a5);
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a4 & 1) == 0)
    {
      sub_10046EEA8(a5, a6);
      goto LABEL_7;
    }
    sub_100467060(v19, a4 & 1, a5, a6);
    v26 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v9;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10046DC78(v16, a2, a3, a1, v22, a5);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10046C9E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10046C9F4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Date, &qword_1007B9530);
}

uint64_t sub_10046C9F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v9;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;

  v9 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a4 & 1) != 0)
    {
LABEL_7:
      v22 = *v9;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        v24 = a5(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a1, v24);
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a4 & 1) == 0)
    {
      sub_100470AFC(a5, a6);
      goto LABEL_7;
    }
    sub_100469D28(v19, a4 & 1, a5, a6);
    v26 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v9;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10046E0C0(v16, a2, a3, a1, v22, a5);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10046CB78(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10045C374(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_10046FF8C();
    goto LABEL_7;
  }
  sub_1004689EC(result, a3 & 1);
  result = sub_10045C374(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10046DF4C(v14, (uint64_t)v11, a1 & 1, v20);
}

void sub_10046CCCC(char a1, uint64_t a2, const char *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_9:
    v20 = a1 & 1;
    v21 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(v21[7] + v12) = v20;
      return;
    }
    v21[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = a2;
    v22[1] = (uint64_t)a3;
    *(_BYTE *)(v21[7] + v12) = v20;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v21[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1004701AC();
    goto LABEL_9;
  }
  sub_100468D88(v15, a4 & 1);
  v18 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = v18;
    goto LABEL_9;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10046CE3C(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  sub_10046BEF4(a1, a2, a3, a4, &qword_1007C1920);
}

void sub_10046CE48(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  sub_10046BEF4(a1, a2, a3, a4, &qword_1007C1918);
}

void sub_10046CE54(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10047036C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_bridgeObjectRelease(*(const char **)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = (uint64_t)a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100469090(v15, a4 & 1);
  v20 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10046CFD0(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = sub_100008384(&qword_1007B6640);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100470520();
      goto LABEL_7;
    }
    sub_1004693A4(v15, a4 & 1);
    v21 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10046DFE4(v12, a2, (uint64_t)a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10046D130(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  sub_10046BEF4(a1, a2, a3, a4, &qword_1007C1910);
}

uint64_t sub_10046D13C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10046C9F4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for NWBrowser.Result, &qword_1007C18F8);
}

void sub_10046D150(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100470D58();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = (uint64_t)a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10046A08C(v15, a4 & 1);
  v20 = sub_10045C464(a2, (uint64_t)a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10046D2CC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100470F0C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_bridgeObjectRelease(*(const char **)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      sub_10022E4A8(a2, a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10046A3A0(v15, a4 & 1);
  v20 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
}

uint64_t sub_10046D44C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_10045C2DC(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_release(v22[1]);
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1004710C0();
    goto LABEL_7;
  }
  sub_10046A6A8(v18, a4 & 1);
  v25 = sub_10045C2DC(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_10046DBD8(v15, (uint64_t)v12, a1, v28, v21);
}

void sub_10046D5B8(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10045C40C(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100471558();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_bridgeObjectRelease(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_10046AE0C(v15, a4 & 1);
  v20 = sub_10045C40C(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SDAuthenticationType);
  __break(1u);
}

void sub_10046D6F4(uint64_t a1, uint64_t a2, char a3)
{
  sub_10046D700(a1, a2, a3, &qword_1007B4BF0);
}

void sub_10046D700(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (_QWORD **)v4;
  v26 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_10045C2DC(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = v26;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100471718((uint64_t (*)(_QWORD))&type metadata accessor for UUID, a4);
    goto LABEL_7;
  }
  sub_100466CC0(v18, a3 & 1, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a4, &qword_1007B6448, (uint64_t)&protocol conformance descriptor for UUID);
  v23 = sub_10045C2DC(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_10046E150(v15, (uint64_t)v12, v26, v21, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10046D898(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10045C2DC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100471940();
    goto LABEL_7;
  }
  sub_10046B114(v17, a3 & 1);
  v23 = sub_10045C2DC(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10046DB40(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_10046D9F4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10022138C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_10046DA6C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10022138C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_10046DAD4(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10026D7AC(a4, (_OWORD *)(a5[7] + 48 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_10046DB40(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10046DBD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_10046DC78(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  v11 = a5[7];
  v12 = a6(0);
  result = sub_100221DB4(a4, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a6);
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_10046DD10(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_100008384(&qword_1007B6738);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10046DDCC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  result = sub_100221DB4(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10046DE84(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a3, v13);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_10046DF40(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_10046DC78(a1, a2, a3, a4, a5, type metadata accessor for RegistrationState);
}

uint64_t sub_10046DF4C(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10046DFE4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = sub_100008384(&qword_1007B6640);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_10046E078(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_10046E0C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v9 = (_QWORD *)(a5[6] + 16 * a1);
  *v9 = a2;
  v9[1] = a3;
  v10 = a5[7];
  v11 = a6(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a4, v11);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

uint64_t sub_10046E150(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

void *sub_10046E1E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100008384(&qword_1007B4AF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10026EFF8(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10022E77C(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10022138C(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10046E3CC()
{
  return sub_100470790(&qword_1007B4CE0);
}

void *sub_10046E3D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100008384(&qword_1007B5AF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = (const char *)v17[1];
    v20 = 32 * v15;
    sub_10022E77C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10022138C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10046E5BC()
{
  return sub_100471718((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007C1848);
}

void *sub_10046E5D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[3];

  v1 = v0;
  sub_100008384(&qword_1007C1810);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    sub_100340E40(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10026D7AC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10046E7B8()
{
  return sub_10046F868(&qword_1007C1808);
}

void *sub_10046E7C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007C1818);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10046E9F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007C1828);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    result = (void *)swift_release(v3);
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    result = (void *)swift_bridgeObjectRetain(v24);
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    result = (void *)swift_release(v37);
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10046EC64()
{
  return sub_100470AFC((uint64_t (*)(_QWORD))&type metadata accessor for SFClientIdentity, &qword_1007C1820);
}

void *sub_10046EC78()
{
  return sub_10046EEA8(type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, &qword_1007B4C00);
}

char *sub_10046EC8C()
{
  return sub_10046FADC((uint64_t (*)(_QWORD))&type metadata accessor for NWEndpoint, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007C1830);
}

char *sub_10046ECA8()
{
  return sub_10046FADC((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B4C50);
}

id sub_10046ECC4()
{
  return sub_100470790((uint64_t *)&unk_1007B4B00);
}

id sub_10046ECD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008384(&qword_1007B4E58);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10046EE74()
{
  return sub_100471718((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1007B4CD8);
}

void *sub_10046EE88()
{
  return sub_100470944((uint64_t *)&unk_1007B4C60);
}

void *sub_10046EE94()
{
  return sub_10046EEA8(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1007C1900);
}

void *sub_10046EEA8(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  sub_100008384(a2);
  v29 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v8);
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_100244384(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    sub_100221DB4((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10046F0D8()
{
  return sub_100470790(&qword_1007B4CC8);
}

void *sub_10046F0E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100008384(&qword_1007B4CA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = (const char *)v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = (const char *)v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_10046F29C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v41 = sub_100008384(&qword_1007B6738);
  v37 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007C1958);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v5)
  {
    result = (char *)swift_release(v3);
    v32 = v43;
    v31 = v33;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v43;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v18 = v41;
  v19 = v43;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v44 = v10;
      v21 = v20 | (v10 << 6);
      v22 = v42;
      goto LABEL_9;
    }
    v27 = v10 + 1;
    v22 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v10 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_23;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_22:
    v13 = (v28 - 1) & v28;
    v44 = v29;
    v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    v23 = *(_QWORD *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(_QWORD *)(v22 + 48) + v23, v16);
    v24 = *(_QWORD *)(v15 + 72) * v21;
    v25 = *(_QWORD *)(v22 + 56) + v24;
    v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v19 + 48) + v23, v17, v16);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v19 + 56) + v24, v26, v18);
    v10 = v44;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    result = (char *)swift_release(v42);
    v31 = v33;
    v32 = v43;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10046F580()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  v36 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007C1840);
  v30 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release(v5);
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38;
        ;
        result = (void *)sub_100221DB4(v17, *(_QWORD *)(i + 56) + v23, type metadata accessor for SDAirDropLegacySessionLogger.Transfer))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    sub_100244384(*(_QWORD *)(v21 + 56) + v23, v17, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release(v37);
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10046F848()
{
  return sub_100471310(&qword_1007C18E0, (uint64_t (*)(_BYTE *, uint64_t))sub_10026EE60);
}

void *sub_10046F85C()
{
  return sub_10046F868(&qword_1007C1948);
}

void *sub_10046F868(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;

  v3 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(a1);
  v8 = *v1;
  v9 = static _DictionaryStorage.copy(original:)(*v1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release(v8);
LABEL_28:
    *v3 = v10;
    return result;
  }
  v29 = v3;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v18)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v18)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v21, v4);
    v22 = 16 * v20;
    v23 = *(_QWORD *)(v10 + 48) + v21;
    v24 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    v31 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22);
    v24(v23, v7, v4);
    v25 = v31;
    *(_OWORD *)(*(_QWORD *)(v10 + 56) + v22) = v31;
    result = (void *)swift_unknownObjectRetain(v25);
  }
  v28 = v26 + 2;
  if (v28 >= v18)
  {
LABEL_26:
    result = (void *)swift_release(v8);
    v3 = v29;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v18)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_10046FAA4()
{
  return sub_10046FADC((uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropSend.Transfer, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_1007B4C40);
}

char *sub_10046FAC0()
{
  return sub_10046FADC((uint64_t (*)(_QWORD))&type metadata accessor for SFNWInterfaceType, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1007B4C10);
}

char *sub_10046FADC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  char *v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;

  v46 = a1(0);
  v42 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v38 - v6;
  v44 = a2(0);
  v41 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v38 - v7;
  sub_100008384(a3);
  v38 = v3;
  v8 = *v3;
  v9 = static _DictionaryStorage.copy(original:)(*v3);
  v10 = *(_QWORD *)(v8 + 16);
  v48 = v9;
  if (!v10)
  {
    result = (char *)swift_release(v8);
    v37 = v48;
    v36 = v38;
LABEL_25:
    *v36 = v37;
    return result;
  }
  v11 = v9;
  result = (char *)(v9 + 64);
  v13 = (char *)(v8 + 64);
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  v39 = v8 + 64;
  if (v11 != v8 || result >= &v13[8 * v14])
  {
    result = (char *)memmove(result, v13, 8 * v14);
    v11 = v48;
  }
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v16 = 1 << *(_BYTE *)(v8 + 32);
  v47 = v8;
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v8 + 64);
  v40 = (unint64_t)(v16 + 63) >> 6;
  v19 = v41;
  v20 = v42;
  v22 = v43;
  v21 = v44;
  v23 = v46;
  v24 = v48;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v49 = v15;
      v26 = v25 | (v15 << 6);
      v27 = v47;
      goto LABEL_9;
    }
    v32 = v15 + 1;
    v27 = v47;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v32 >= v40)
      goto LABEL_23;
    v33 = *(_QWORD *)(v39 + 8 * v32);
    v34 = v15 + 1;
    if (!v33)
    {
      v34 = v32 + 1;
      if (v32 + 1 >= v40)
        goto LABEL_23;
      v33 = *(_QWORD *)(v39 + 8 * v34);
      if (!v33)
        break;
    }
LABEL_22:
    v18 = (v33 - 1) & v33;
    v49 = v34;
    v26 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_9:
    v28 = *(_QWORD *)(v19 + 72) * v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v22, *(_QWORD *)(v27 + 48) + v28, v21);
    v29 = *(_QWORD *)(v20 + 72) * v26;
    v30 = *(_QWORD *)(v27 + 56) + v29;
    v31 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v45, v30, v23);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(_QWORD *)(v24 + 48) + v28, v22, v21);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(_QWORD *)(v24 + 56) + v29, v31, v23);
    v15 = v49;
  }
  v35 = v32 + 2;
  if (v35 >= v40)
  {
LABEL_23:
    result = (char *)swift_release(v47);
    v36 = v38;
    v37 = v48;
    goto LABEL_25;
  }
  v33 = *(_QWORD *)(v39 + 8 * v35);
  if (v33)
  {
    v34 = v35;
    goto LABEL_22;
  }
  while (1)
  {
    v34 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v34 >= v40)
      goto LABEL_23;
    v33 = *(_QWORD *)(v39 + 8 * v34);
    ++v35;
    if (v33)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10046FDBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008384(&qword_1007B4B90);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10046FF64()
{
  return sub_10046EEA8(type metadata accessor for RegistrationState, &qword_1007B4BB0);
}

void *sub_10046FF78()
{
  return sub_100470AFC((uint64_t (*)(_QWORD))&type metadata accessor for Date, &qword_1007B9530);
}

void *sub_10046FF8C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007B4CB0);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1004701AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008384(&qword_1007B4C58);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = (const char *)v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_100470354()
{
  return sub_100470790(&qword_1007C1920);
}

id sub_100470360()
{
  return sub_100470790(&qword_1007C1918);
}

void sub_10047036C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  double v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100008384(&qword_1007C18E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = (const char *)v17[1];
    v19 = 8 * v15;
    v20 = *(const char **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    *(_QWORD *)&v22 = swift_bridgeObjectRetain(v18).n128_u64[0];
    swift_bridgeObjectRetain(v20, v22);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100470520()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = sub_100008384(&qword_1007B6640);
  v1 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007C18F0);
  v30 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v34 = v5;
  if (!v6)
  {
    swift_release(v4);
    v28 = v34;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v34;
  }
  v31 = v4 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v32 = (unint64_t)(v11 + 63) >> 6;
  v14 = v33;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_22:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v16);
    v20 = *v18;
    v19 = (const char *)v18[1];
    v21 = *(_QWORD *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v21, v14);
    v22 = v34;
    v23 = (_QWORD *)(*(_QWORD *)(v34 + 48) + v17);
    *v23 = v20;
    v23[1] = v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v22 + 56) + v21, v3, v14);
    swift_bridgeObjectRetain(v19);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    swift_release(v4);
    v27 = v30;
    v28 = v34;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

id sub_100470784()
{
  return sub_100470790(&qword_1007C1910);
}

id sub_100470790(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100008384(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100470938()
{
  return sub_100470944(&qword_1007C1908);
}

void *sub_100470944(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  sub_100008384(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 8 * v16;
    v22 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v21);
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v23 = v20;
    v23[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v21) = v22;
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100470AE8()
{
  return sub_100470AFC((uint64_t (*)(_QWORD))&type metadata accessor for NWBrowser.Result, &qword_1007C18F8);
}

void *sub_100470AFC(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1(0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v33 - v5;
  sub_100008384(a2);
  v34 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)(*v2);
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    result = (void *)swift_release(v7);
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    result = (void *)swift_bridgeObjectRetain(v23);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release(v7);
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100470D58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100008384(&qword_1007C18D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = (const char *)v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100470F0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008384(&qword_1007C1930);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(const char **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_10022E4A8(v19, *((unint64_t *)&v19 + 1));
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1004710C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007C18A8);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v27 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v28 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v16)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      v12 = v24 + 1;
      if (v24 + 1 >= v16)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v12);
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v8 + 48) + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v29 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    v23 = *((_QWORD *)&v29 + 1);
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v29;
    result = (void *)swift_retain(v23);
  }
  v26 = v24 + 2;
  if (v26 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v12 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v12);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1004712FC()
{
  return sub_100471310(&qword_1007C1878, (uint64_t (*)(_BYTE *, uint64_t))sub_10026EE60);
}

void *sub_100471310(uint64_t *a1, uint64_t (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(_BYTE *, uint64_t);
  _BYTE v30[40];

  v29 = a2;
  v4 = v2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(a1);
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_28:
    *v4 = v11;
    return result;
  }
  v27 = v4;
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v28 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v19)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v19)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v22, v5);
    v23 = 40 * v21;
    sub_100244418(*(_QWORD *)(v9 + 56) + v23, (uint64_t)v30);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v22, v8, v5);
    result = (void *)v29(v30, *(_QWORD *)(v11 + 56) + v23);
  }
  v26 = v24 + 2;
  if (v26 >= v19)
  {
LABEL_26:
    result = (void *)swift_release(v9);
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v19)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100471558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100008384(&qword_1007C1880);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100471704()
{
  return sub_100471718((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1007B4BF0);
}

id sub_100471718(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - v6;
  sub_100008384(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (id)swift_release(v8);
    *v27 = v10;
    return result;
  }
  result = (id)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v28 = v8 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = 8 * v19;
    v22 = *(void **)(*(_QWORD *)(v8 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    result = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100471940()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008384(&qword_1007B4BA0);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_unknownObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100471B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100220D78(&qword_1007B6448, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100220D78((unint64_t *)&unk_1007B7300, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100463620((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1007B72F0);
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_100473128(v16);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_100471DBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100463470();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1004733A4(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

double sub_100471F48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  double result;
  uint64_t __s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain((const char *)v6);
  Data.hash(into:)(&__s1, a1, a2);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease((const char *)v6);
  result = 0.0;
  *a3 = xmmword_1005CF260;
  return result;
}

uint64_t sub_10047297C(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  const char *v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_100472FA0(v5, (uint64_t)v6);
      swift_bridgeObjectRelease((const char *)v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease((const char *)v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain((const char *)v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  type metadata accessor for SDAirDropSendConnection(0);
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease((const char *)v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100463DCC(&qword_1007B7370);
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_10047373C(v12);
  v20 = (const char *)*v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_100472B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100472D94(a1, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint, (void (*)(_QWORD *))sub_1002B1B24, (uint64_t (*)(char *, uint64_t))sub_1002B814C, &qword_1007C1868, a2);
}

uint64_t sub_100472B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char **v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  const char **v19;
  char isUniquelyReferenced_nonNull_native;
  const char *v21;
  const char *v22;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;

  v5 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  Hasher.init(_seed:)(&v29);
  swift_bridgeObjectRetain(v9);
  sub_1002B2164();
  v10 = Hasher._finalize()();
  v11 = -1 << v9[32];
  v12 = v10 & ~v11;
  if (((*(_QWORD *)&v9[((v12 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v12) & 1) != 0)
  {
    v25 = v2;
    v26 = v6;
    v27 = v5;
    v28 = a2;
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_100244384(*((_QWORD *)v9 + 6) + v14 * v12, (uint64_t)v8, type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_1002BA1A4((uint64_t)v8, a1);
      v16 = v15;
      sub_1002443C8((uint64_t)v8, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)&v9[((v12 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v12) & 1) == 0)
      {
        v17 = swift_bridgeObjectRelease(v9);
        v18 = 1;
        a2 = v28;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v9);
    v19 = v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    v21 = *v19;
    v29 = *v19;
    *v19 = (const char *)0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1004639F4(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1007B7350);
      v21 = v29;
    }
    a2 = v28;
    sub_100221DB4(*((_QWORD *)v21 + 6) + v14 * v12, v28, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1004738DC(v12);
    v22 = *v19;
    *v19 = v29;
    v17 = swift_bridgeObjectRelease(v22);
    v18 = 0;
LABEL_10:
    v6 = v26;
    v5 = v27;
  }
  else
  {
    v17 = swift_bridgeObjectRelease(v9);
    v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(a2, v18, 1, v5, v17);
}

uint64_t sub_100472D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100472D94(a1, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint, (void (*)(_QWORD *))sub_1002B1D84, (uint64_t (*)(char *, uint64_t))sub_1002B8DD8, &qword_1007C1870, a2);
}

uint64_t sub_100472D94@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, void (*a3)(_QWORD *)@<X2>, uint64_t (*a4)(char *, uint64_t)@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  const char **v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  __n128 v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __n128 v23;
  uint64_t v24;
  const char **v25;
  char isUniquelyReferenced_nonNull_native;
  const char *v27;
  const char *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *);
  const char **v35;
  uint64_t (*v36)(char *, uint64_t);
  _QWORD v37[9];

  v30 = a5;
  v36 = a4;
  v11 = a2(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - v13;
  v35 = v6;
  v15 = *v6;
  Hasher.init(_seed:)(v37);
  v16 = swift_bridgeObjectRetain(v15);
  v34 = a3;
  ((void (*)(_QWORD *, __n128))a3)(v37, v16);
  v17 = Hasher._finalize()();
  v18 = -1 << v15[32];
  v19 = v17 & ~v18;
  if (((*(_QWORD *)&v15[((v19 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v19) & 1) != 0)
  {
    v32 = v11;
    v33 = a6;
    v20 = ~v18;
    v31 = v12;
    v21 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      sub_100244384(*((_QWORD *)v15 + 6) + v21 * v19, (uint64_t)v14, a2);
      v22 = v36(v14, a1);
      sub_1002443C8((uint64_t)v14, a2);
      if ((v22 & 1) != 0)
        break;
      v19 = (v19 + 1) & v20;
      if (((*(_QWORD *)&v15[((v19 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v19) & 1) == 0)
      {
        v23 = swift_bridgeObjectRelease(v15);
        v24 = 1;
        a6 = v33;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v15);
    v25 = v35;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
    v27 = *v25;
    v37[0] = *v25;
    *v25 = (const char *)0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1004639F4(a2, v30);
      v27 = (const char *)v37[0];
    }
    a6 = v33;
    sub_100221DB4(*((_QWORD *)v27 + 6) + v21 * v19, v33, a2);
    sub_100473E00(v19, a2, v34);
    v28 = *v25;
    *v25 = (const char *)v37[0];
    v23 = swift_bridgeObjectRelease(v28);
    v24 = 0;
LABEL_10:
    v12 = v31;
    v11 = v32;
  }
  else
  {
    v23 = swift_bridgeObjectRelease(v15);
    v24 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56))(a6, v24, 1, v11, v23);
}

uint64_t sub_100472FA0(uint64_t a1, uint64_t a2)
{
  const char **v2;
  const char **v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  const char *v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_10045F980(v7, v6);
  v19 = (const char *)v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    type metadata accessor for SDAirDropSendConnection(0);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13, a2);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_10047373C(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16, a2);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_100473128(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v30 = v1;
    v11 = ~v9;
    swift_retain(v7);
    v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    v32 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      do
      {
        v15 = v14 * v10;
        v31(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        v16 = *(_QWORD *)(v7 + 40);
        v17 = sub_100220D78(&qword_1007B6448, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
        v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v19 < v13 || a1 < (uint64_t)v19)
            goto LABEL_6;
        }
        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        v22 = *(_QWORD *)(v7 + 48);
        v23 = v14 * a1;
        v24 = v22 + v14 * a1;
        v25 = v22 + v15;
        if (v14 * a1 < v15 || v24 >= v25 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v24, v25, 1, v3);
        }
        else
        {
          a1 = v10;
          if (v23 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v32 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v32 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v7);
    v1 = v30;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v26 = *v1;
  v27 = *(_QWORD *)(*v1 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_1004733A4(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_100473568(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        sub_10022E4A8(v11, v12);
        Data.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        sub_100225AB4(v11, v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10047373C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1004738DC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[10];

  v27 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0);
  __chkstk_darwin(v27);
  v26[3] = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  __chkstk_darwin(v4);
  v26[2] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  __chkstk_darwin(v6);
  v26[1] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v8 = *(_QWORD *)(v31 - 8);
  v9 = __chkstk_darwin(v31);
  v32 = (uint64_t)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)v26 - v11;
  v26[0] = v1;
  result = *v1;
  v14 = *v1 + 56;
  v15 = -1 << *(_BYTE *)(result + 32);
  v16 = (a1 + 1) & ~v15;
  if (((1 << v16) & *(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
  {
    v17 = ~v15;
    v30 = result;
    swift_retain(result);
    _HashTable.previousHole(before:)(a1, v14, v17);
    v28 = v14;
    if ((*(_QWORD *)(v14 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      v18 = *(_QWORD *)(v8 + 72);
      v29 = v17;
      sub_100244384(*(_QWORD *)(v30 + 48) + v18 * v16, (uint64_t)v12, type metadata accessor for SDAirDropDiscoveredEndpoint);
      Hasher.init(_seed:)(v33);
      v19 = v32;
      sub_100244384((uint64_t)v12, v32, type metadata accessor for SDAirDropDiscoveredEndpoint);
      v20 = (char *)&loc_100473B18 + *((int *)qword_100473DF0 + swift_getEnumCaseMultiPayload(v19, v31));
      __asm { BR              X9 }
    }
    v21 = v30;
    *(_QWORD *)(v28 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v21);
  }
  else
  {
    *(_QWORD *)(v14 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v22 = *(_QWORD *)v26[0];
  v23 = *(_QWORD *)(*(_QWORD *)v26[0] + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
    JUMPOUT(0x100473DF0);
  }
  *(_QWORD *)(v22 + 16) = v25;
  ++*(_DWORD *)(v22 + 36);
  return result;
}

uint64_t sub_100473E00(unint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD *))
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(_QWORD *);
  uint64_t v33;
  _QWORD v34[9];

  v32 = a3;
  v31 = a2(0);
  result = __chkstk_darwin(v31);
  v9 = (char *)&v29 - v8;
  v10 = *v3;
  v11 = *v3 + 56;
  v12 = -1 << *(_BYTE *)(*v3 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v29 = v7;
    v30 = v3;
    v14 = ~v12;
    swift_retain(v10);
    v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    v33 = v11;
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v16 = (v15 + 1) & v14;
      v17 = *(_QWORD *)(v29 + 72);
      while (1)
      {
        v18 = v17 * v13;
        sub_100244384(*(_QWORD *)(v10 + 48) + v17 * v13, (uint64_t)v9, a2);
        Hasher.init(_seed:)(v34);
        v32(v34);
        v19 = Hasher._finalize()();
        sub_1002443C8((uint64_t)v9, a2);
        v20 = v19 & v14;
        if ((uint64_t)a1 >= (uint64_t)v16)
          break;
        if (v20 < v16)
          goto LABEL_11;
LABEL_12:
        v21 = *(_QWORD *)(v10 + 48);
        v22 = v17 * a1;
        v23 = v21 + v17 * a1;
        v24 = v21 + v18;
        if ((uint64_t)(v17 * a1) < v18 || v23 >= v24 + v17)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v31);
        }
        else
        {
          a1 = v13;
          if (v22 == v18)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v23);
        }
        a1 = v13;
LABEL_6:
        v13 = (v13 + 1) & v14;
        if (((*(_QWORD *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_16;
      }
      if (v20 < v16)
        goto LABEL_6;
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v20)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_16:
    *(_QWORD *)(v33 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v10);
    v3 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v3;
  v26 = *(_QWORD *)(*v3 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
  return result;
}

uint64_t sub_100474050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = (uint64_t)*v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v6 < 0)
    v24 = v6;
  else
    v24 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v6);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease((const char *)v6);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v6 = (uint64_t)*v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v6 < 0)
      v26 = v6;
    else
      v26 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)v6);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease((const char *)v6);
    goto LABEL_15;
  }
LABEL_37:
  if (v6 < 0)
    v25 = v6;
  else
    v25 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v6);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease((const char *)v6);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v6 = (uint64_t)*v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = (const char *)v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain((const char *)v6);
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v6);
  swift_bridgeObjectRelease(*v4);
  *v4 = (const char *)v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  v16 = sub_100221EDC(0, &qword_1007B9920, SFAirDropAction_ptr);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v6 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v6 < 0)
    v27 = v6;
  else
    v27 = v13;
  swift_bridgeObjectRetain((const char *)v6);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease((const char *)v6);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v6 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v6 < 0)
      v29 = v6;
    else
      v29 = v13;
    swift_bridgeObjectRetain((const char *)v6);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease((const char *)v6);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100474338(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_100227B74(isUniquelyReferenced_nonNull_native, v13, 1, (uint64_t)v5);
  }
  v14 = &v5[a1 + 4];
  v15 = sub_100008384((uint64_t *)&unk_1007B5260);
  result = (char *)swift_arrayDestroy(v14, v8, v15);
  if (!v9)
    goto LABEL_20;
  v17 = v5[2];
  v18 = __OFSUB__(v17, a2);
  v19 = v17 - a2;
  if (v18)
    goto LABEL_26;
  if ((v19 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 1);
    v20 = &v5[a2 + 4];
    if (v14 + 1 != v20 || result >= (char *)&v20[v19])
      result = (char *)memmove(result, v20, 8 * v19);
    v21 = v5[2];
    v18 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v18)
    {
      v5[2] = v22;
LABEL_20:
      *v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

_BYTE *sub_1004744BC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1003EE258(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100474D88((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_100474E00((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void (*sub_100474530(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_100474AAC(v7);
  v7[10] = sub_1004746F8(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1004745C0;
}

void sub_1004745C0(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_100474610(_QWORD *a1, uint64_t a2, unint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[8] = a2;
  v7[9] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10022E4A8(a2, a3);
  v7[10] = sub_100474ACC(v7);
  v7[11] = sub_100474924(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1004746A4;
}

void sub_1004746A4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  unint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  sub_100225AB4(v4, v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_1004746F8(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[1] = a3;
  v10[2] = v4;
  *v10 = a2;
  v11 = sub_100008384((uint64_t *)&unk_1007BD990);
  v12 = malloc(*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v10[3] = v12;
  v13 = *v4;
  v15 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
  *((_BYTE *)v10 + 40) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(*v5 + 56);
        v22 = type metadata accessor for RegistrationState(0);
        v23 = *(_QWORD *)(v22 - 8);
        sub_100221DB4(v21 + *(_QWORD *)(v23 + 72) * v15, (uint64_t)v12, type metadata accessor for RegistrationState);
        v24 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v12, v24, 1, v22);
        return sub_1004748D4;
      }
LABEL_11:
      v22 = type metadata accessor for RegistrationState(0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = 1;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a4 & 1) == 0)
    {
      sub_10046EEA8(type metadata accessor for RegistrationState, &qword_1007B4BB0);
      goto LABEL_7;
    }
    sub_100467060(v18, a4 & 1, type metadata accessor for RegistrationState, &qword_1007B4BB0);
    v25 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10045C748);
    if ((v19 & 1) == (v26 & 1))
    {
      v15 = v25;
      v10[4] = v25;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1004748D4(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)(*a1)[3];
  sub_100474AF8((uint64_t)v2, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_10000D0F0((uint64_t)v2, (uint64_t *)&unk_1007BD990);
  free(v2);
  free(v1);
}

void (*sub_100474924(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(const char ***a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*result)(const char ***);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_100474A70;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100470F0C();
      goto LABEL_7;
    }
    sub_10046A3A0(v16, a4 & 1);
    v20 = sub_10045C464(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10045CB0C);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(const char ***))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

void sub_100474A70(const char ***a1)
{
  const char **v1;

  v1 = *a1;
  sub_100474CC0(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (unint64_t)(*a1)[4], (uint64_t)(*a1)[1], (unint64_t)(*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_100474AAC(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100477854;
}

uint64_t (*sub_100474ACC(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100474AEC;
}

uint64_t sub_100474AEC(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

unint64_t sub_100474AF8(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t result;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a5;
  v25 = a6;
  v10 = sub_100008384((uint64_t *)&unk_1007BD990);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RegistrationState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v24 - v18;
  sub_100221F28(a1, (uint64_t)v12, (uint64_t *)&unk_1007BD990);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    result = sub_10000D0F0((uint64_t)v12, (uint64_t *)&unk_1007BD990);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
      return sub_10026C98C(a4, *a3);
    }
  }
  else
  {
    sub_100221DB4((uint64_t)v12, (uint64_t)v19, type metadata accessor for RegistrationState);
    v21 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_100221DB4((uint64_t)v19, v21[7] + *(_QWORD *)(v14 + 72) * a4, type metadata accessor for RegistrationState);
    }
    else
    {
      sub_100221DB4((uint64_t)v19, (uint64_t)v17, type metadata accessor for RegistrationState);
      v22 = a4;
      v23 = v25;
      sub_10046DC78(v22, v24, v25, (uint64_t)v17, v21, type metadata accessor for RegistrationState);
      return swift_bridgeObjectRetain(v23);
    }
  }
  return result;
}

void sub_100474CC0(const char **a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  const char *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v8 = *a1;
  if (!*a1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for Data);
      sub_10026D164(a4, *a3);
    }
    goto LABEL_8;
  }
  v9 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v9[7] + 8 * a4) = v8;
LABEL_8:
    swift_bridgeObjectRetain(v8);
    return;
  }
  v9[(a4 >> 6) + 8] |= 1 << a4;
  v10 = (uint64_t *)(v9[6] + 16 * a4);
  *v10 = a5;
  v10[1] = a6;
  *(_QWORD *)(v9[7] + 8 * a4) = v8;
  v11 = v9[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (!v12)
  {
    v9[2] = v13;
    sub_10022E4A8(a5, a6);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_100474D88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_100474E00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100474E80(const char *a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = sub_100008384(&qword_1007C1600);
  v10 = sub_100476C70();
  v8[0] = a1;
  v2 = sub_10023A834(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_1004744BC(v3, v4, &v7);
  v5 = v7;
  sub_10022E75C(v8);
  return v5;
}

uint64_t sub_100474F18(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10022E4A8(a1, a2);
  if (qword_1007B4128 != -1)
    v7 = swift_once(&qword_1007B4128, sub_100456148);
  LOBYTE(v27) = byte_1007D84B0;
  __chkstk_darwin(v7);
  *(&v27 - 2) = (uint64_t)&v27;
  sub_10022E4A8(a1, a2);
  sub_10045B840(1, 0, (uint64_t)sub_10047782C, (uint64_t)(&v27 - 4), a1, a2);
  v9 = v8;
  result = sub_100225AB4(a1, a2);
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = *(_QWORD *)(v9 + 32);
    v12 = *(_QWORD *)(v9 + 40);
    v27 = v11;
    v28 = v12;
    v13 = sub_10022E4A8(v11, v12);
    static String.Encoding.utf8.getter(v13);
    v14 = sub_100358394();
    v15 = String.init<A>(bytes:encoding:)(&v27, v6, &type metadata for Data, v14);
    v17 = v16;
    result = sub_100225AB4(v11, v12);
    if (!v17)
    {
      v23 = 3;
      swift_bridgeObjectRelease((const char *)v9);
      goto LABEL_9;
    }
    if (*(_QWORD *)(v9 + 16) >= 2uLL)
    {
      v18 = *(_QWORD *)(v9 + 48);
      v19 = *(_QWORD *)(v9 + 56);
      sub_10022E4A8(v18, v19);
      swift_bridgeObjectRelease((const char *)v9);
      v27 = v18;
      v28 = v19;
      static String.Encoding.utf8.getter(v20);
      String.init<A>(bytes:encoding:)(&v27, v6, &type metadata for Data, v14);
      v22 = v21;
      sub_100225AB4(v18, v19);
      if (v22)
        return v15;
      v23 = 4;
      swift_bridgeObjectRelease(v17);
LABEL_9:
      v24 = sub_100444E44();
      v25 = swift_allocError(&type metadata for SDAirDropHashError, v24, 0, 0);
      *v26 = v23;
      swift_willThrow(v25);
      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10047515C(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10022835C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

void *sub_100475304(uint64_t a1, uint64_t a2)
{
  return sub_100475354(a1, a2, (uint64_t (*)(void))sub_1002284B0, &qword_1007B5378);
}

void *sub_100475318(uint64_t a1, uint64_t a2)
{
  return sub_100475354(a1, a2, (uint64_t (*)(void))sub_10022849C, &qword_1007B5388);
}

void *sub_10047532C(uint64_t a1, uint64_t a2)
{
  return sub_100475354(a1, a2, (uint64_t (*)(void))sub_100228348, (uint64_t *)&unk_1007B53C0);
}

void *sub_100475340(uint64_t a1, uint64_t a2)
{
  return sub_100475354(a1, a2, (uint64_t (*)(void))sub_100228208, &qword_1007B53B0);
}

void *sub_100475354(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  void *result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = sub_100008384(a4);
  result = (void *)swift_arrayDestroy(v6 + 32 + 40 * a1, v9, v13);
  if (!v9)
    goto LABEL_17;
  v15 = *(_QWORD *)(v6 + 16);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_23;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (const void *)(v6 + 32 + 40 * a2);
    if (a1 != a2 || v6 + 32 + 40 * a1 >= (unint64_t)v18 + 40 * v17)
      result = memmove((void *)(v6 + 32 + 40 * a1), v18, 40 * v17);
    v19 = *(_QWORD *)(v6 + 16);
    v16 = __OFADD__(v19, v10);
    v20 = v19 - v9;
    if (!v16)
    {
      *(_QWORD *)(v6 + 16) = v20;
LABEL_17:
      *v4 = v6;
      return result;
    }
    goto LABEL_24;
  }
LABEL_25:
  v21 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v21, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004754DC(uint64_t a1, uint64_t a2)
{
  return sub_100475818(a1, a2, type metadata accessor for SDTempPairingConnection);
}

uint64_t sub_1004754E8(uint64_t a1, uint64_t a2)
{
  return sub_1004754FC(a1, a2, &qword_1007C18A0, SFHUDBannerModel_ptr);
}

uint64_t sub_1004754FC(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  const char **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = a4;
    v8 = a3;
    v4 = a2;
    v7 = a1;
    v9 = (uint64_t)*v5;
    if (!((unint64_t)*v5 >> 62))
    {
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  if (v9 < 0)
    v19 = v9;
  else
    v19 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v9);
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease((const char *)v9);
  if (v20 < v4)
    goto LABEL_18;
LABEL_4:
  v6 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v7 - v4;
  if (__OFSUB__(0, v6))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    if (v9 < 0)
      v21 = v9;
    else
      v21 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)v9);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease((const char *)v9);
    v13 = v22 + v39;
    if (!__OFADD__(v22, v39))
      goto LABEL_8;
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = (uint64_t)*v5;
  v39 = v7 - v4;
  v40 = v7;
  if ((unint64_t)*v5 >> 62)
    goto LABEL_21;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 - v6;
  if (__OFADD__(v12, v11))
    goto LABEL_26;
LABEL_8:
  v9 = (uint64_t)*v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = (const char *)v9;
  v15 = 0;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
    goto LABEL_28;
  v16 = v9 & 0xFFFFFFFFFFFFFF8;
  if (v13 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    v17 = v8;
    v18 = v10;
    goto LABEL_33;
  }
LABEL_27:
  v15 = 1;
LABEL_28:
  v17 = v8;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v34 = v9;
    else
      v34 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)v9);
    v23 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease((const char *)v9);
  }
  else
  {
    v23 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = v10;
  if (v23 <= v13)
    v23 = v13;
  swift_bridgeObjectRetain((const char *)v9);
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15, v23, 1, v9);
  swift_bridgeObjectRelease(*v5);
  *v5 = (const char *)v9;
  v16 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_33:
  v24 = (char *)(v16 + 32 + 8 * v40);
  v25 = sub_100221EDC(0, v17, v18);
  v26 = (void *)swift_arrayDestroy(v24, v6, v25);
  v27 = v39;
  if (!v39)
    return specialized Array._endMutation()(v26);
  if (!((unint64_t)v9 >> 62))
  {
    v28 = *(_QWORD *)(v16 + 16);
    v29 = v28 - v4;
    if (!__OFSUB__(v28, v4))
      goto LABEL_36;
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v9 < 0)
    v35 = v9;
  else
    v35 = v16;
  swift_bridgeObjectRetain((const char *)v9);
  v36 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease((const char *)v9);
  v27 = v39;
  v29 = v36 - v4;
  if (__OFSUB__(v36, v4))
    goto LABEL_53;
LABEL_36:
  if ((v29 & 0x8000000000000000) == 0)
  {
    v30 = (char *)(v16 + 32 + 8 * v4);
    if (v40 != v4 || v24 >= &v30[8 * v29])
    {
      v26 = memmove(v24, v30, 8 * v29);
      v27 = v39;
    }
    if (!((unint64_t)v9 >> 62))
    {
      v31 = *(_QWORD *)(v16 + 16);
      v32 = v31 + v27;
      if (!__OFADD__(v31, v27))
      {
LABEL_42:
        *(_QWORD *)(v16 + 16) = v32;
        return specialized Array._endMutation()(v26);
      }
      goto LABEL_59;
    }
LABEL_54:
    if (v9 < 0)
      v37 = v9;
    else
      v37 = v16;
    swift_bridgeObjectRetain((const char *)v9);
    v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease((const char *)v9);
    v32 = v38 + v39;
    if (!__OFADD__(v38, v39))
      goto LABEL_42;
LABEL_59:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10047580C(uint64_t a1, uint64_t a2)
{
  return sub_100475818(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for IncomingAirDropAlert);
}

uint64_t sub_100475818(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v9;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v6(0);
  v16 = (void *)swift_arrayDestroy(v13 + 32 + 8 * v5, v9, v15);
  if (!v8)
    return specialized Array._endMutation()(v16);
  if (!((unint64_t)v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  v16 = (void *)swift_bridgeObjectRelease(v7);
  v18 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_52;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v19 + 8 * v18)
      v16 = memmove((void *)(v13 + 32 + 8 * v5), v19, 8 * v18);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        return specialized Array._endMutation()(v16);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    v16 = (void *)swift_bridgeObjectRelease(v7);
    v21 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

BOOL _s16DaemoniOSLibrary21SDAirDropHashStoreCDBC7isEmptySbvg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  double (*v18)(char *, uint64_t);
  __n128 v19;
  const char *v20;
  const char *v21;
  void *v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  double v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString *v35;
  unint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v53 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)v53 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)v53 - v11;
  v13 = sub_10019BA08();
  if (!v13)
    __break(1u);
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v17 = v16;

  URL.init(fileURLWithPath:)(v15, v17);
  swift_bridgeObjectRelease(v17);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  v18 = *(double (**)(char *, uint64_t))(v1 + 8);
  v18(v7, v0);
  URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
  URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
  v18(v4, v0);
  v19.n128_f64[0] = v18(v12, v0);
  URL.path.getter(v19);
  v21 = v20;
  v18(v10, v0);
  v22 = (void *)objc_opt_self(NSFileManager);
  v23 = objc_msgSend(v22, "defaultManager");
  v24 = String._bridgeToObjectiveC()();
  LODWORD(v18) = objc_msgSend(v23, "fileExistsAtPath:", v24);

  if ((_DWORD)v18)
  {
    v25 = objc_msgSend(v22, "defaultManager");
    v26 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v21).n128_u64[0];
    *(_QWORD *)&v54 = 0;
    v28 = objc_msgSend(v25, "attributesOfItemAtPath:error:", v26, &v54, v27);

    v29 = (void *)v54;
    if (v28)
    {
      type metadata accessor for FileAttributeKey(0);
      v31 = v30;
      v32 = sub_100220D78(&qword_1007B4C80, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1005CE808);
      v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, v31, (char *)&type metadata for Any + 8, v32);
      v34 = v29;

      if (*(_QWORD *)(v33 + 16))
      {
        v35 = NSFileSize;
        v36 = sub_10045C150((uint64_t)v35);
        if ((v37 & 1) != 0)
        {
          sub_10022E77C(*(_QWORD *)(v33 + 56) + 32 * v36, (uint64_t)&v54);
        }
        else
        {
          v54 = 0u;
          v55 = 0u;
        }

      }
      else
      {
        v54 = 0u;
        v55 = 0u;
      }
      swift_bridgeObjectRelease((const char *)v33);
      if (*((_QWORD *)&v55 + 1))
      {
        if ((swift_dynamicCast(v53, &v54, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
        {
          v41 = v53[0];
          if (qword_1007B4120 != -1)
            swift_once(&qword_1007B4120, sub_1004560AC);
          v42 = type metadata accessor for Logger(0);
          v43 = sub_100221DF8(v42, (uint64_t)qword_1007C15E8);
          v44 = Logger.logObject.getter(v43);
          v45 = static os_log_type_t.default.getter(v44);
          if (os_log_type_enabled(v44, v45))
          {
            v46 = (uint8_t *)swift_slowAlloc(12, -1);
            *(_DWORD *)v46 = 134217984;
            *(_QWORD *)&v54 = v41;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v46 + 4);
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "HashDB size: %ld", v46, 0xCu);
            swift_slowDealloc(v46, -1, -1);
          }

          return (v41 & 0xFFFFFFFFFFFFF7FFLL) == 0;
        }
      }
      else
      {
        sub_10000D0F0((uint64_t)&v54, (uint64_t *)&unk_1007B6890);
      }
    }
    else
    {
      v38 = (id)v54;
      v39 = _convertNSErrorToError(_:)(v29);

      swift_willThrow(v40);
      swift_errorRelease(v39);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v21);
  }
  if (qword_1007B4120 != -1)
    swift_once(&qword_1007B4120, sub_1004560AC);
  v48 = type metadata accessor for Logger(0);
  v49 = sub_100221DF8(v48, (uint64_t)qword_1007C15E8);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Unable to verify DB size", v52, 2u);
    swift_slowDealloc(v52, -1, -1);
  }

  return 1;
}

uint64_t sub_100476050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  const char **v13;
  uint64_t v14;
  char *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  char *v28;
  __n128 v29;
  id v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;

  v47 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v47 - 8);
  v0 = __chkstk_darwin(v47);
  v44 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __chkstk_darwin(v0);
  v43 = (char *)&v39 - v3;
  v4 = __chkstk_darwin(v2);
  v42 = (char *)&v39 - v5;
  v6 = __chkstk_darwin(v4);
  v40 = (char *)&v39 - v7;
  v8 = __chkstk_darwin(v6);
  v41 = (char *)&v39 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - v10;
  v12 = 0;
  v13 = (const char **)&unk_10071CD58;
  v14 = v47;
  v15 = v42;
  do
  {
    if (v12 >= 3)
    {
      __break(1u);
LABEL_10:
      __break(1u);
    }
    v46 = v12;
    v18 = (uint64_t)*(v13 - 1);
    v17 = *v13;
    swift_bridgeObjectRetain(*v13);
    v19 = sub_10019BA08();
    if (!v19)
      goto LABEL_10;
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    v24 = v43;
    URL.init(fileURLWithPath:)(v21, v23);
    swift_bridgeObjectRelease(v23);
    v25 = v40;
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    v26 = *(void (**)(char *, uint64_t))(v45 + 8);
    v26(v24, v14);
    v27 = v44;
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    URL.appendingPathExtension(_:)(0x5F706F7264726961, 0xEC00000034766264);
    v26(v27, v14);
    v26(v15, v14);
    v28 = v41;
    URL.appendingPathComponent(_:)(0x48706F7244726941, 0xED00004244687361);
    v26(v25, v14);
    URL.appendingPathExtension(_:)(v18, v17);
    v29 = swift_bridgeObjectRelease(v17);
    ((void (*)(char *, uint64_t, __n128))v26)(v28, v14, v29);
    v30 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL._bridgeToObjectiveC()(v31);
    v33 = v32;
    v48 = 0;
    LODWORD(v28) = objc_msgSend(v30, "removeItemAtURL:error:", v32, &v48);

    v34 = v48;
    if ((_DWORD)v28)
    {
      v16 = v48;
    }
    else
    {
      v35 = v48;
      v36 = _convertNSErrorToError(_:)(v34);

      swift_willThrow(v37);
      swift_errorRelease(v36);
    }
    v12 = v46 + 1;
    v26(v11, v47);
    v13 += 2;
  }
  while (v12 != 3);
  return swift_arrayDestroy(&qword_10071CD50, 3, &type metadata for String);
}

void sub_1004763F0()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;
  id v3;
  NSString v4;
  unsigned int v5;
  id v6;
  id v7;
  unsigned int v8;
  id v9;
  id v10;
  id v11;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "fileExistsAtPath:", v1);

  if ((v2 & 1) == 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)CUKeyValueStoreWriter), "init");
    v4 = String._bridgeToObjectiveC()();
    v11 = 0;
    v5 = objc_msgSend(v3, "startAtPath:error:", v4, &v11);

    v6 = v11;
    if (v5
      && (v11 = 0,
          v7 = v6,
          v8 = objc_msgSend(v3, "finishAndReturnError:", &v11),
          v6 = v11,
          v8))
    {
      v9 = v11;
    }
    else
    {
      v10 = v6;
      _convertNSErrorToError(_:)(v6);

      swift_willThrow();
    }

  }
}

void sub_10047655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t i;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  double v25;
  double v26;
  double v27;
  _QWORD *v28;
  const char *v29;
  const char *v30;
  double v31;
  double v32;
  _BYTE *v33;
  const char *v34;
  const char *v35;
  double v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v4)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = v3[v7 + 4];
      v10 = v3[v7 + 5];
      v11 = v9 == a2 && v10 == a3;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0) & 1) != 0)
        break;
      ++v8;
      v7 += 9;
      if (v4 == v8)
        return;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_32;
    if (v12 != v4)
    {
      for (i = v7 * 8 + 171; ; i += 72)
      {
        v15 = v3[2];
        if (v12 >= v15)
          break;
        v16 = (char *)v3 + i;
        v17 = *(_QWORD *)((char *)v3 + i - 67);
        v18 = *(_QWORD *)((char *)v3 + i - 59);
        v19 = v17 == a2 && v18 == a3;
        if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a2, a3, 0) & 1) == 0)
        {
          if (v12 != v8)
          {
            if (v8 >= v15)
              goto LABEL_30;
            v20 = 9 * v8;
            v21 = (uint64_t)&v3[9 * v8 + 4];
            v45 = *(_QWORD *)v21;
            v22 = *(const char **)(v21 + 24);
            v43 = *(_QWORD *)(v21 + 16);
            v41 = *(_QWORD *)(v21 + 40);
            v42 = *(_QWORD *)(v21 + 32);
            v39 = *(_QWORD *)(v21 + 56);
            v40 = *(_QWORD *)(v21 + 48);
            v37 = *(unsigned __int16 *)(v21 + 64);
            v38 = *(unsigned __int8 *)(v21 + 66);
            v46 = *(_BYTE *)(v21 + 67);
            v55 = *(_QWORD *)(v16 - 67);
            v23 = *(const char **)(v16 - 59);
            v24 = *(const char **)((char *)v3 + i - 43);
            v52 = *(_QWORD *)((char *)v3 + i - 35);
            v53 = *(_QWORD *)((char *)v3 + i - 51);
            v50 = *(_QWORD *)((char *)v3 + i - 19);
            v51 = *(_QWORD *)((char *)v3 + i - 27);
            v49 = *(_QWORD *)((char *)v3 + i - 11);
            v47 = *(unsigned __int16 *)((char *)v3 + i - 3);
            v48 = *((unsigned __int8 *)v3 + i - 1);
            v54 = *((_BYTE *)v3 + i);
            v44 = *(const char **)(v21 + 8);
            *(_QWORD *)&v25 = swift_bridgeObjectRetain(v44).n128_u64[0];
            *(_QWORD *)&v26 = swift_bridgeObjectRetain(v22, v25).n128_u64[0];
            *(_QWORD *)&v27 = swift_bridgeObjectRetain(v23, v26).n128_u64[0];
            swift_bridgeObjectRetain(v24, v27);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
              v3 = sub_10026D8E4((uint64_t)v3);
            v28 = &v3[v20];
            v29 = (const char *)v3[v20 + 5];
            v30 = (const char *)v28[7];
            v28[4] = v55;
            v28[5] = v23;
            v28[6] = v53;
            v28[7] = v24;
            v28[8] = v52;
            v28[9] = v51;
            v28[10] = v50;
            v28[11] = v49;
            *((_BYTE *)v28 + 98) = (v47 | (v48 << 16)) >> 16;
            *((_WORD *)v28 + 48) = v47;
            *((_BYTE *)v28 + 99) = v54;
            *(_QWORD *)&v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
            *(_QWORD *)&v32 = swift_bridgeObjectRelease(v29, v31).n128_u64[0];
            if (v12 >= v3[2])
              goto LABEL_31;
            v33 = (char *)v3 + i;
            v34 = *(const char **)((char *)v3 + i - 59);
            v35 = *(const char **)((char *)v3 + i - 43);
            *(_QWORD *)(v33 - 67) = v45;
            *(_QWORD *)(v33 - 59) = v44;
            *(_QWORD *)(v33 - 51) = v43;
            *(_QWORD *)(v33 - 43) = v22;
            *(_QWORD *)(v33 - 35) = v42;
            *(_QWORD *)(v33 - 27) = v41;
            *(_QWORD *)(v33 - 19) = v40;
            *(_QWORD *)(v33 - 11) = v39;
            *(v33 - 1) = (v37 | (v38 << 16)) >> 16;
            *(_WORD *)(v33 - 3) = v37;
            *v33 = v46;
            *(_QWORD *)&v36 = swift_bridgeObjectRelease(v35, v32).n128_u64[0];
            swift_bridgeObjectRelease(v34, v36);
            *(_QWORD *)a1 = v3;
          }
          if (__OFADD__(v8++, 1))
            goto LABEL_29;
        }
        if (++v12 == v3[2])
          return;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
  }
}

void *sub_100476860(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100228958(isUniquelyReferenced_nonNull_native, v11, 1, (uint64_t)v4);
  }
  result = (void *)swift_arrayDestroy(&v4[9 * a1 + 4], v7, &type metadata for SDAirDropHashStoreEntry);
  if (!v7)
    goto LABEL_23;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_29;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[9 * a2 + 4];
    v17 = 72 * v15;
    if (72 * a1 < 72 * a2 || (&v4[9 * a1 + 4] < (_QWORD *)&v16[v17] ? (v18 = a1 == a2) : (v18 = 0), !v18))
      result = memmove(&v4[9 * a1 + 4], v16, v17);
    v19 = v4[2];
    v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  v21 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v21, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004769E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100476A0C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100476A30()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100476A6C(uint64_t a1, uint64_t a2)
{
  sub_100458C1C(a1, a2);
}

uint64_t sub_100476A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100476A88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100476A90(uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  swift_bridgeObjectRetain(a2);
  v15 = sub_10045BFDC(a1, (unint64_t)a2);
  swift_bridgeObjectRelease(a2);
  if (qword_1007B4128 != -1)
    swift_once(&qword_1007B4128, sub_100456148);
  v16 = byte_1007D84B0;
  v17 = swift_retain(v15);
  v18 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
    v18 = sub_100227EB4(0, v15[2] + 1, 1, v15);
  v20 = v18[2];
  v19 = v18[3];
  if (v20 >= v19 >> 1)
    v18 = sub_100227EB4((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
  v18[2] = v20 + 1;
  *((_BYTE *)v18 + v20 + 32) = v16;
  swift_release(v15);
  swift_bridgeObjectRetain(a4);
  v21 = sub_10045BFDC(a3, (unint64_t)a4);
  swift_bridgeObjectRelease(a4);
  sub_1003431E0((uint64_t)v21);
  v22 = sub_10038B93C(a5, a6, a7, a8);
  if ((a9 & 0x1000000) == 0)
  {
    v23 = sub_100008384(&qword_1007B52C0);
    v24 = swift_allocObject(v23, 33, 7);
    *(_OWORD *)(v24 + 16) = xmmword_1005CD2A0;
    *(_BYTE *)(v24 + 32) = BYTE2(a9);
    swift_bridgeObjectRetain((const char *)v18);
    sub_1003431E0(v25);
    sub_100455060(a9, 2uLL, v26, v27);
  }
  return v22;
}

unint64_t sub_100476C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007C1608;
  if (!qword_1007C1608)
  {
    v1 = sub_10021FF9C(&qword_1007C1600);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1007C1608);
  }
  return result;
}

void sub_100476CC0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  sub_10045A050(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100476CCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  }
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100476D00(uint64_t a1, uint64_t a2)
{
  return sub_100476D80(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10045A5C4);
}

uint64_t sub_100476D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100476D40()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100476D74(uint64_t a1, uint64_t a2)
{
  return sub_100476D80(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10045AD04);
}

uint64_t sub_100476D80(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(unsigned __int16 *)(v3 + 24) | (*(unsigned __int8 *)(v3 + 26) << 16), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t sub_100476D9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100476DC4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100476DF8(uint64_t a1, uint64_t a2)
{
  sub_10045B634(a1, a2);
}

__n128 sub_100476E04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  __n128 v25;
  uint8_t *v26;
  Swift::String v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;

  v36._countAndFlagsBits = a4;
  v36._object = a5;
  v35._countAndFlagsBits = a2;
  v35._object = a3;
  v7 = type metadata accessor for String.Encoding(0);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B4120 != -1)
    swift_once(&qword_1007B4120, sub_1004560AC);
  v13 = type metadata accessor for Logger(0);
  sub_100221DF8(v13, (uint64_t)qword_1007C15E8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38 = a1;
  v15 = v14(v12, a1, v9);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v34 = v7;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v40[0] = v20;
    v33[1] = v5;
    *(_DWORD *)v19 = 136315138;
    v33[0] = v19 + 4;
    v21 = sub_100220D78((unint64_t *)&qword_1007B5518, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v9, v21);
    v24 = (const char *)v23;
    v41 = sub_100228BD8(v22, v23, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v33[0]);
    v25 = swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Writing hash database to: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v26 = v19;
    v7 = v34;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  v40[0] = 0;
  v40[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease((const char *)v40[1]);
  strcpy((char *)v40, "Long hashes:\n");
  HIWORD(v40[1]) = -4864;
  String.append(_:)(v35);
  v27._countAndFlagsBits = 0x682074726F68530ALL;
  v27._object = (void *)0xEF0A3A7365687361;
  String.append(_:)(v27);
  String.append(_:)(v36);
  v28 = (const char *)v40[1];
  v29 = v37;
  static String.Encoding.utf8.getter(v30);
  v31 = sub_100221E10();
  StringProtocol.write(to:atomically:encoding:)(v38, 1, v29, &type metadata for String, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v7);
  return swift_bridgeObjectRelease(v28);
}

uint64_t type metadata accessor for SDAirDropHashStoreCDB()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary21SDAirDropHashStoreCDB);
}

void sub_100477160(uint64_t a1, uint64_t a2)
{
  Data.subscript.getter(0, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_1004771BC(char a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!BYTE6(v4))
  {
    __break(1u);
    JUMPOUT(0x100477274);
  }
  v6 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))Data._Representation.subscript.getter)(1, BYTE6(v4), v5, v4);
  v8 = v7;
  v9 = sub_100474F18(v6, v7);
  if (v3)
    return sub_100225AB4(v6, v8);
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = v12;
  result = sub_100225AB4(v6, v8);
  *(_WORD *)v1 = v2;
  *(_BYTE *)(v1 + 2) = a1;
  *(_QWORD *)(v1 + 8) = v14;
  *(_QWORD *)(v1 + 16) = v15;
  *(_QWORD *)(v1 + 24) = v16;
  *(_QWORD *)(v1 + 32) = v17;
  return result;
}

void sub_100477284(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1004772D4(int a1@<W8>, uint64_t a2, Swift::String a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char *object;
  uint64_t v31;
  const char *v32;
  Class v33;
  id v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  id v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  Class v62;
  id v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  Swift::String v70;
  uint64_t v71;
  const char *v72;
  Swift::String v73;
  Swift::String v74;
  const char *v75;
  char v76;
  Swift::String v77;
  uint64_t v78;
  const char *v79;

  if (BYTE6(v21) != 32)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v38) = HIDWORD(v24) - v24;
        if (!__OFSUB__(HIDWORD(v24), (_DWORD)v24))
        {
          v38 = (int)v38;
LABEL_11:
          if (v38 != 2)
          {
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (!a1)
          {
            v42 = BYTE6(v21);
            goto LABEL_19;
          }
          if (a1 != 1)
          {
            v44 = *(_QWORD *)(v24 + 16);
            v43 = *(_QWORD *)(v24 + 24);
            v42 = v43 - v44;
            if (!__OFSUB__(v43, v44))
              goto LABEL_18;
            goto LABEL_53;
          }
          if (!__OFSUB__(HIDWORD(v24), (_DWORD)v24))
          {
            v42 = HIDWORD(v24) - (int)v24;
LABEL_18:
            sub_10022E4A8(v24, v21);
LABEL_19:
            if (v42 == 2)
            {
              sub_100283120(v24, v21);
              if (!v23)
              {
                sub_100225AB4(v24, v21);
                sub_100477160(v22, v20);
                object = (char *)v77._object;
                isa = Data._bridgeToObjectiveC()().super.isa;
                v46 = (id)SFHexStringForData(isa);

                if (v46)
                {
                  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
                  v49 = v48;

                }
                else
                {
                  v47 = 0;
                  v49 = 0;
                }
                v57 = sub_100008384(&qword_1007B52C0);
                v58 = swift_allocObject(v57, 33, 7);
                *(_OWORD *)(v58 + 16) = xmmword_1005CD2A0;
                *(_BYTE *)(v58 + 32) = v76;
                v59 = sub_100474E80((const char *)v58);
                v61 = v60;
                swift_bridgeObjectRelease((const char *)v58);
                v62 = Data._bridgeToObjectiveC()().super.isa;
                sub_100225AB4(v59, v61);
                v63 = (id)SFHexStringForData(v62);

                if (v63)
                {
                  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
                  v66 = v65;

                }
                else
                {
                  v64 = 0;
                  v66 = 0;
                }
                _StringGuts.grow(_:)(28);
                swift_bridgeObjectRelease((const char *)0xE000000000000000);
                if (v49)
                  v67 = v47;
                else
                  v67 = 0x3E3F3F3F3CLL;
                if (v49)
                  v68 = v49;
                else
                  v68 = (const char *)0xE500000000000000;
                v69 = v68;
                String.append(_:)(*(Swift::String *)&v67);
                swift_bridgeObjectRelease(v68);
                v70._countAndFlagsBits = 0x3A626D6C202CLL;
                v70._object = (void *)0xE600000000000000;
                String.append(_:)(v70);
                if (v66)
                  v71 = v64;
                else
                  v71 = 0x3E3F3F3F3CLL;
                if (!v66)
                  v66 = (const char *)0xE500000000000000;
                v72 = v66;
                String.append(_:)(*(Swift::String *)&v71);
                swift_bridgeObjectRelease(v66);
                v73._countAndFlagsBits = 0x3A646963202CLL;
                v73._object = (void *)0xE600000000000000;
                String.append(_:)(v73);
                swift_bridgeObjectRetain((const char *)v77._object);
                String.append(_:)(v77);
                swift_bridgeObjectRelease((const char *)v77._object);
                v74._countAndFlagsBits = 0x3A702F65202CLL;
                v74._object = (void *)0xE600000000000000;
                String.append(_:)(v74);
                v32 = v79;
                swift_bridgeObjectRetain(v79);
                v56 = v78;
                goto LABEL_49;
              }
LABEL_56:
              sub_100225AB4(v24, v21);
              ((void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))swift_unexpectedError)(v23, "DaemoniOSLibrary/SDAirDropHashStoreCDB.swift", 44, 1, 518);
              __break(1u);
              JUMPOUT(0x10047777CLL);
            }
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        __break(1u);
      }
      else
      {
        v40 = *(_QWORD *)(v24 + 16);
        v39 = *(_QWORD *)(v24 + 24);
        v41 = __OFSUB__(v39, v40);
        v38 = v39 - v40;
        if (!v41)
          goto LABEL_11;
      }
      __break(1u);
      goto LABEL_52;
    }
    v38 = BYTE6(v21);
    goto LABEL_11;
  }
  v25 = sub_100474F18(v22, v20);
  if (!v23)
  {
    v29 = v25;
    object = v26;
    v31 = v27;
    v32 = v28;
    v33 = Data._bridgeToObjectiveC()().super.isa;
    v34 = (id)SFHexStringForData(v33);

    if (v34)
    {
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease((const char *)0xE000000000000000);
    if (v37)
      v50 = v35;
    else
      v50 = 0x3E3F3F3F3CLL;
    if (v37)
      v51 = v37;
    else
      v51 = (const char *)0xE500000000000000;
    v52 = v51;
    String.append(_:)(*(Swift::String *)&v50);
    swift_bridgeObjectRelease(v51);
    v53._countAndFlagsBits = 0x3A646963202CLL;
    v53._object = (void *)0xE600000000000000;
    String.append(_:)(v53);
    swift_bridgeObjectRetain(object);
    v54._countAndFlagsBits = v29;
    v54._object = object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(object);
    v55._countAndFlagsBits = 0x3A702F65202CLL;
    v55._object = (void *)0xE600000000000000;
    String.append(_:)(v55);
    swift_bridgeObjectRetain(v32);
    v56 = v31;
LABEL_49:
    v75 = v32;
    String.append(_:)(*(Swift::String *)&v56);
    swift_bridgeObjectRelease_n(v32, 2);
    swift_bridgeObjectRelease(object);
  }
}

uint64_t sub_10047778C(uint64_t a1, uint64_t a2)
{
  return sub_1004754FC(a1, a2, &qword_1007C1890, CBWriteRequest_ptr);
}

uint64_t sub_1004777A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384((uint64_t *)&unk_1007B5400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004777E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

BOOL sub_10047782C(unsigned __int8 *a1)
{
  uint64_t v1;

  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t sub_100477844()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100477880()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "serviceIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1004778E4(uint64_t a1, __n128 a2)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = v3 + 2;
  v6 = *v2;
  v3[7] = v3 + 15;
  v3[2] = v3;
  v3[3] = sub_100477988;
  v7 = swift_continuation_init(v3 + 2, 1, a2);
  v3[10] = _NSConcreteStackBlock;
  v8 = v3 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_1002CC354;
  v8[3] = &unk_100729D28;
  v8[4] = v7;
  objc_msgSend(v6, "provisionPseudonymWithProperties:completion:", a1, v8);
  return swift_continuation_await(v5);
}

uint64_t sub_100477988()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 120));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1004779F8(uint64_t a1, __n128 a2)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = v3 + 2;
  v6 = *v2;
  v3[7] = v3 + 15;
  v3[2] = v3;
  v3[3] = sub_100477A9C;
  v7 = swift_continuation_init(v3 + 2, 1, a2);
  v3[10] = _NSConcreteStackBlock;
  v8 = v3 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_100477B00;
  v8[3] = &unk_100729D10;
  v8[4] = v7;
  objc_msgSend(v6, "revokePseudonym:completion:", a1, v8);
  return swift_continuation_await(v5);
}

uint64_t sub_100477A9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
  {
    swift_willThrow();
    v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
    v3 = 0;
  }
  else
  {
    v3 = *(unsigned __int8 *)(v1 + 120);
    v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  }
  return v2(v3);
}

uint64_t sub_100477B00(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100008384(&qword_1007B5A60);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

id sub_100477B80(double a1)
{
  void **v1;
  void *v3;
  NSString v4;
  id v5;

  v3 = *v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "pseudonymPropertiesWithFeatureID:expiryDurationInSeconds:", v4, a1);

  return v5;
}

uint64_t sub_100477BEC(uint64_t a1)
{
  _s20IdentityShareRequestVwxx(a1);
  return a1;
}

uint64_t sub_100477C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100477C34);
}

uint64_t sub_100477C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100477C44);
}

uint64_t _s15ExchangeRequestVMa(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007C19E8, (uint64_t)&_s15ExchangeRequestVMn);
}

void sub_100477C60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1007C19F8)
  {
    v2 = type metadata accessor for SFAirDrop.ContactInfo.Handle(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1007C19F8);
  }
}

uint64_t *sub_100477CB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  double v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  const char *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const char *v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = (const char *)v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = (const char *)v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
    *(_QWORD *)&v22 = swift_bridgeObjectRetain(v12).n128_u64[0];
    v23 = swift_bridgeObjectRetain(v15, v22);
    if (v21(v18, 1, v19, v23))
    {
      v24 = sub_100008384(&qword_1007C11B0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v26 = a3[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = *((_QWORD *)v28 + 1);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    else
    {
      v30 = *(_QWORD *)v28;
      sub_10022E4A8(*(_QWORD *)v28, *((_QWORD *)v28 + 1));
      *(_QWORD *)v27 = v30;
      *((_QWORD *)v27 + 1) = v29;
    }
    v31 = a3[9];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    if (*(uint64_t *)((char *)a2 + v31 + 72))
    {
      v34 = (const char *)*((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v34;
      v35 = v33 + 16;
      v36 = *((_QWORD *)v33 + 3);
      swift_bridgeObjectRetain(v34);
      if (v36 >> 60 == 15)
      {
        *((_OWORD *)v32 + 1) = *v35;
      }
      else
      {
        v39 = *(_QWORD *)v35;
        sub_10022E4A8(v39, v36);
        *((_QWORD *)v32 + 2) = v39;
        *((_QWORD *)v32 + 3) = v36;
      }
      v40 = *((_QWORD *)v33 + 4);
      v41 = *((_QWORD *)v33 + 5);
      sub_10022E4A8(v40, v41);
      *((_QWORD *)v32 + 4) = v40;
      *((_QWORD *)v32 + 5) = v41;
      v42 = *((_QWORD *)v33 + 6);
      v43 = *((_QWORD *)v33 + 7);
      sub_10022E4A8(v42, v43);
      *((_QWORD *)v32 + 6) = v42;
      *((_QWORD *)v32 + 7) = v43;
      v44 = (const char *)*((_QWORD *)v33 + 9);
      *((_QWORD *)v32 + 8) = *((_QWORD *)v33 + 8);
      *((_QWORD *)v32 + 9) = v44;
      *((_QWORD *)v32 + 10) = *((_QWORD *)v33 + 10);
      swift_bridgeObjectRetain(v44);
    }
    else
    {
      v37 = *((_OWORD *)v33 + 3);
      *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
      *((_OWORD *)v32 + 3) = v37;
      *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
      *((_QWORD *)v32 + 10) = *((_QWORD *)v33 + 10);
      v38 = *((_OWORD *)v33 + 1);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v38;
    }
  }
  return a1;
}

__n128 sub_100477EF4(uint64_t a1, int *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&v5 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[5] + 8)).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(a1 + a2[6] + 8), v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = (uint64_t *)(a1 + a2[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_100225AB4(*v10, v11);
  v12 = a1 + a2[9];
  if (*(_QWORD *)(v12 + 72))
  {
    swift_bridgeObjectRelease(*(const char **)(v12 + 8));
    v13 = *(_QWORD *)(v12 + 24);
    if (v13 >> 60 != 15)
      sub_100225AB4(*(_QWORD *)(v12 + 16), v13);
    sub_100225AB4(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
    sub_100225AB4(*(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56));
    return swift_bridgeObjectRelease((const char *)*(_QWORD *)(v12 + 72));
  }
  return result;
}

uint64_t sub_100478018(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t, __n128);
  double v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = (const char *)v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = (const char *)v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v19 + 48);
  *(_QWORD *)&v21 = swift_bridgeObjectRetain(v11).n128_u64[0];
  v22 = swift_bridgeObjectRetain(v14, v21);
  if (v20(v17, 1, v18, v22))
  {
    v23 = sub_100008384(&qword_1007C11B0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = v26[1];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  else
  {
    v28 = *v26;
    sub_10022E4A8(*v26, v26[1]);
    *(_QWORD *)v25 = v28;
    *(_QWORD *)(v25 + 8) = v27;
  }
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  if (*(_QWORD *)(a2 + v29 + 72))
  {
    v32 = *(const char **)(v31 + 8);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_QWORD *)(v30 + 8) = v32;
    v33 = (_OWORD *)(v31 + 16);
    v34 = *(_QWORD *)(v31 + 24);
    swift_bridgeObjectRetain(v32);
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)(v30 + 16) = *v33;
    }
    else
    {
      v37 = *(_QWORD *)v33;
      sub_10022E4A8(v37, v34);
      *(_QWORD *)(v30 + 16) = v37;
      *(_QWORD *)(v30 + 24) = v34;
    }
    v38 = *(_QWORD *)(v31 + 32);
    v39 = *(_QWORD *)(v31 + 40);
    sub_10022E4A8(v38, v39);
    *(_QWORD *)(v30 + 32) = v38;
    *(_QWORD *)(v30 + 40) = v39;
    v40 = *(_QWORD *)(v31 + 48);
    v41 = *(_QWORD *)(v31 + 56);
    sub_10022E4A8(v40, v41);
    *(_QWORD *)(v30 + 48) = v40;
    *(_QWORD *)(v30 + 56) = v41;
    v42 = *(const char **)(v31 + 72);
    *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
    *(_QWORD *)(v30 + 72) = v42;
    *(_QWORD *)(v30 + 80) = *(_QWORD *)(v31 + 80);
    swift_bridgeObjectRetain(v42);
  }
  else
  {
    v35 = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
    *(_OWORD *)(v30 + 48) = v35;
    *(_OWORD *)(v30 + 64) = *(_OWORD *)(v31 + 64);
    *(_QWORD *)(v30 + 80) = *(_QWORD *)(v31 + 80);
    v36 = *(_OWORD *)(v31 + 16);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 16) = v36;
  }
  return a1;
}

uint64_t sub_10047822C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  const char *v11;
  double v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  const char *v18;
  double v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  double v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  const char *v76;
  const char *v77;
  double v78;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = (const char *)v9[1];
  v11 = (const char *)v8[1];
  v8[1] = v10;
  *(_QWORD *)&v12 = swift_bridgeObjectRetain(v10).n128_u64[0];
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v11, v12).n128_u64[0];
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = (const char *)v16[1];
  v18 = (const char *)v15[1];
  v15[1] = v17;
  *(_QWORD *)&v19 = swift_bridgeObjectRetain(v17, v13).n128_u64[0];
  swift_bridgeObjectRelease(v18, v19);
  v20 = a3[7];
  v21 = (void *)(a1 + v20);
  v22 = (void *)(a2 + v20);
  v23 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
LABEL_6:
    v28 = sub_100008384(&qword_1007C11B0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
LABEL_7:
  v29 = a3[8];
  v30 = (uint64_t *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v32 = *(_QWORD *)(a2 + v29 + 8);
  if (*(_QWORD *)(a1 + v29 + 8) >> 60 == 15)
  {
    if (v32 >> 60 != 15)
    {
      v33 = *v31;
      sub_10022E4A8(v33, v32);
      *v30 = v33;
      v30[1] = v32;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v32 >> 60 == 15)
  {
    sub_10023D5F8((uint64_t)v30);
LABEL_12:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_14;
  }
  v34 = *v31;
  sub_10022E4A8(v34, v32);
  v35 = *v30;
  v36 = v30[1];
  *v30 = v34;
  v30[1] = v32;
  sub_100225AB4(v35, v36);
LABEL_14:
  v37 = a3[9];
  v38 = (_QWORD *)(a1 + v37);
  v39 = a2 + v37;
  v40 = *(_QWORD *)(a1 + v37 + 72);
  v41 = *(_QWORD *)(a2 + v37 + 72);
  if (v40)
  {
    if (v41)
    {
      *v38 = *(_QWORD *)v39;
      v42 = *(const char **)(v39 + 8);
      v43 = (const char *)v38[1];
      v38[1] = v42;
      *(_QWORD *)&v44 = swift_bridgeObjectRetain(v42).n128_u64[0];
      swift_bridgeObjectRelease(v43, v44);
      v45 = (uint64_t *)(v39 + 16);
      v46 = *(_QWORD *)(v39 + 24);
      if (v38[3] >> 60 == 15)
      {
        if (v46 >> 60 != 15)
        {
          v47 = *v45;
          sub_10022E4A8(*v45, *(_QWORD *)(v39 + 24));
          v38[2] = v47;
          v38[3] = v46;
LABEL_31:
          v68 = *(_QWORD *)(v39 + 32);
          v69 = *(_QWORD *)(v39 + 40);
          sub_10022E4A8(v68, v69);
          v70 = v38[4];
          v71 = v38[5];
          v38[4] = v68;
          v38[5] = v69;
          sub_100225AB4(v70, v71);
          v72 = *(_QWORD *)(v39 + 48);
          v73 = *(_QWORD *)(v39 + 56);
          sub_10022E4A8(v72, v73);
          v74 = v38[6];
          v75 = v38[7];
          v38[6] = v72;
          v38[7] = v73;
          sub_100225AB4(v74, v75);
          v38[8] = *(_QWORD *)(v39 + 64);
          v76 = *(const char **)(v39 + 72);
          v77 = (const char *)v38[9];
          v38[9] = v76;
          *(_QWORD *)&v78 = swift_bridgeObjectRetain(v76).n128_u64[0];
          swift_bridgeObjectRelease(v77, v78);
          v38[10] = *(_QWORD *)(v39 + 80);
          return a1;
        }
      }
      else
      {
        if (v46 >> 60 != 15)
        {
          v65 = *v45;
          sub_10022E4A8(*v45, *(_QWORD *)(v39 + 24));
          v66 = v38[2];
          v67 = v38[3];
          v38[2] = v65;
          v38[3] = v46;
          sub_100225AB4(v66, v67);
          goto LABEL_31;
        }
        sub_10023D5F8((uint64_t)(v38 + 2));
      }
      *((_OWORD *)v38 + 1) = *(_OWORD *)v45;
      goto LABEL_31;
    }
    sub_100477BEC((uint64_t)v38);
    v51 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v51;
    v53 = *(_OWORD *)(v39 + 48);
    v52 = *(_OWORD *)(v39 + 64);
    v54 = *(_OWORD *)(v39 + 32);
    v38[10] = *(_QWORD *)(v39 + 80);
    *((_OWORD *)v38 + 3) = v53;
    *((_OWORD *)v38 + 4) = v52;
    *((_OWORD *)v38 + 2) = v54;
  }
  else if (v41)
  {
    *v38 = *(_QWORD *)v39;
    v48 = *(const char **)(v39 + 8);
    v38[1] = v48;
    v49 = (_OWORD *)(v39 + 16);
    v50 = *(_QWORD *)(v39 + 24);
    swift_bridgeObjectRetain(v48);
    if (v50 >> 60 == 15)
    {
      *((_OWORD *)v38 + 1) = *v49;
    }
    else
    {
      v59 = *(_QWORD *)v49;
      sub_10022E4A8(v59, v50);
      v38[2] = v59;
      v38[3] = v50;
    }
    v60 = *(_QWORD *)(v39 + 32);
    v61 = *(_QWORD *)(v39 + 40);
    sub_10022E4A8(v60, v61);
    v38[4] = v60;
    v38[5] = v61;
    v62 = *(_QWORD *)(v39 + 48);
    v63 = *(_QWORD *)(v39 + 56);
    sub_10022E4A8(v62, v63);
    v38[6] = v62;
    v38[7] = v63;
    v38[8] = *(_QWORD *)(v39 + 64);
    v64 = *(const char **)(v39 + 72);
    v38[9] = v64;
    v38[10] = *(_QWORD *)(v39 + 80);
    swift_bridgeObjectRetain(v64);
  }
  else
  {
    v55 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v55;
    v56 = *(_OWORD *)(v39 + 32);
    v57 = *(_OWORD *)(v39 + 48);
    v58 = *(_OWORD *)(v39 + 64);
    v38[10] = *(_QWORD *)(v39 + 80);
    *((_OWORD *)v38 + 3) = v57;
    *((_OWORD *)v38 + 4) = v58;
    *((_OWORD *)v38 + 2) = v56;
  }
  return a1;
}

uint64_t sub_100478634(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100008384(&qword_1007C11B0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(v15 + 48) = v17;
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v16 + 64);
  *(_QWORD *)(v15 + 80) = *(_QWORD *)(v16 + 80);
  v18 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v18;
  return a1;
}

uint64_t sub_100478760(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = (const char *)v8[1];
  *v8 = v11;
  v8[1] = v10;
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v12).n128_u64[0];
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = (const char *)v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19, v13);
  v20 = a3[7];
  v21 = (void *)(a1 + v20);
  v22 = (void *)(a2 + v20);
  v23 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
LABEL_6:
    v28 = sub_100008384(&qword_1007C11B0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
LABEL_7:
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)(a1 + v29 + 8);
  if (v32 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_12;
  }
  v33 = *(_QWORD *)(v31 + 8);
  if (v33 >> 60 == 15)
  {
    sub_10023D5F8(v30);
    goto LABEL_10;
  }
  v34 = *(_QWORD *)v30;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_QWORD *)(v30 + 8) = v33;
  sub_100225AB4(v34, v32);
LABEL_12:
  v35 = a3[9];
  v36 = (_QWORD *)(a1 + v35);
  v37 = a2 + v35;
  if (*(_QWORD *)(a1 + v35 + 72))
  {
    if (*(_QWORD *)(v37 + 72))
    {
      v38 = *(_QWORD *)(v37 + 8);
      v39 = (const char *)v36[1];
      *v36 = *(_QWORD *)v37;
      v36[1] = v38;
      swift_bridgeObjectRelease(v39);
      v40 = (_QWORD *)(v37 + 16);
      v41 = v36[3];
      if (v41 >> 60 != 15)
      {
        v42 = *(_QWORD *)(v37 + 24);
        if (v42 >> 60 != 15)
        {
          v45 = v36[2];
          v36[2] = *v40;
          v36[3] = v42;
          sub_100225AB4(v45, v41);
          goto LABEL_22;
        }
        sub_10023D5F8((uint64_t)(v36 + 2));
      }
      *((_OWORD *)v36 + 1) = *(_OWORD *)v40;
LABEL_22:
      v46 = v36[4];
      v47 = v36[5];
      *((_OWORD *)v36 + 2) = *(_OWORD *)(v37 + 32);
      sub_100225AB4(v46, v47);
      v48 = v36[6];
      v49 = v36[7];
      *((_OWORD *)v36 + 3) = *(_OWORD *)(v37 + 48);
      sub_100225AB4(v48, v49);
      v50 = *(_QWORD *)(v37 + 72);
      v51 = (const char *)v36[9];
      v36[8] = *(_QWORD *)(v37 + 64);
      v36[9] = v50;
      swift_bridgeObjectRelease(v51);
      v36[10] = *(_QWORD *)(v37 + 80);
      return a1;
    }
    sub_100477BEC((uint64_t)v36);
  }
  v43 = *(_OWORD *)(v37 + 48);
  *((_OWORD *)v36 + 2) = *(_OWORD *)(v37 + 32);
  *((_OWORD *)v36 + 3) = v43;
  *((_OWORD *)v36 + 4) = *(_OWORD *)(v37 + 64);
  v36[10] = *(_QWORD *)(v37 + 80);
  v44 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *((_OWORD *)v36 + 1) = v44;
  return a1;
}

uint64_t sub_1004789F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100478A00);
}

uint64_t sub_100478A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_100008384(&qword_1007C11B0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t sub_100478AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100478ACC);
}

uint64_t sub_100478AD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = sub_100008384(&qword_1007C11B0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t _s16ExchangeResponseVMa(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C1A90, (uint64_t)&_s16ExchangeResponseVMn);
}

void sub_100478B90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v2 = type metadata accessor for SFAirDrop.TransferIdentifier(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1005D9A58;
    v6[2] = &unk_1005D9A58;
    sub_100477C60(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1005D9A70;
      v6[5] = &unk_1005D9A88;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_100478C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100478E84(a1, a2, a3, _s15ExchangeRequestVMa, a4);
}

uint64_t sub_100478C40@<X0>(uint64_t a1@<X8>)
{
  return sub_100478C58(_s16ExchangeResponseVMa, a1);
}

uint64_t sub_100478C4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100478C58(_s15ExchangeRequestVMa, a1);
}

uint64_t sub_100478C58@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = sub_100008384(&qword_1007C11B0);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v15 = a1(0);
  v16 = (uint64_t *)(v2 + *(int *)(v15 + 24));
  v17 = (const char *)v16[1];
  if (v17)
  {
    v18 = v15;
    v19 = *v16;
    sub_10047A148(v2 + *(int *)(v15 + 28), (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_10000D0F0((uint64_t)v7, &qword_1007C11B0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
      v20 = (uint64_t *)(v2 + *(int *)(v18 + 32));
      v21 = v20[1];
      if (v21 >> 60 != 15)
      {
        v31 = v19;
        v26 = *v20;
        v27 = (uint64_t *)(v2 + *(int *)(v18 + 20));
        v28 = *v27;
        v29 = (const char *)v27[1];
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
        swift_bridgeObjectRetain(v17);
        sub_100244404(v26, v21);
        swift_bridgeObjectRetain(v29);
        SFAirDrop.ContactInfo.init(givenName:fullName:handle:vcard:)(v28, v29, v31, v17, v12, v26, v21);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        v22 = (unsigned int *)&enum case for SFAirDrop.ContactRequest.contact(_:);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  v22 = (unsigned int *)&enum case for SFAirDrop.ContactRequest.notNeeded(_:);
LABEL_7:
  v23 = *v22;
  v24 = type metadata accessor for SFAirDrop.ContactRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a2, v23, v24);
}

uint64_t sub_100478E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100478E84(a1, a2, a3, _s16ExchangeResponseVMa, a4);
}

uint64_t sub_100478E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD);
  uint64_t v57;

  v56 = a4;
  v57 = a3;
  v55 = a2;
  v7 = sub_100008384(&qword_1007C11B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008384(&qword_1007BA300);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SFAirDrop.ContactInfo(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = a1;
  SFAirDrop.ContactRequest.contact.getter(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10047A190(v57);
    v22 = type metadata accessor for SFAirDrop.ContactRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v54, v22);
    sub_10000D0F0((uint64_t)v16, &qword_1007BA300);
    v23 = (int *)v56(0);
    v24 = a5 + v23[7];
    v25 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a5, v55, v10);
    v27 = (_QWORD *)(a5 + v23[5]);
    *v27 = 0;
    v27[1] = 0;
    v28 = (_QWORD *)(a5 + v23[6]);
    *v28 = 0;
    v28[1] = 0;
    *(_OWORD *)(a5 + v23[8]) = xmmword_1005CF260;
    v29 = a5 + v23[9];
    *(_QWORD *)(v29 + 80) = 0;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)v29 = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v16, v17);
    v30 = v55;
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v55, v10);
    v32 = SFAirDrop.ContactInfo.givenName.getter(v31);
    v52 = v33;
    v53 = v32;
    v34 = SFAirDrop.ContactInfo.fullName.getter(v32);
    v50 = v35;
    v51 = v34;
    SFAirDrop.ContactInfo.handle.getter();
    v36 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
    v37 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v9, 0, 1, v36);
    v38 = SFAirDrop.ContactInfo.vcard.getter(v37);
    v49 = v39;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v30, v10);
    v40 = type metadata accessor for SFAirDrop.ContactRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v54, v40);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
    v41 = (int *)v56(0);
    v42 = (uint64_t *)(a5 + v41[5]);
    v43 = v52;
    *v42 = v53;
    v42[1] = v43;
    v44 = (uint64_t *)(a5 + v41[6]);
    v45 = v50;
    *v44 = v51;
    v44[1] = v45;
    sub_10022E718((uint64_t)v9, a5 + v41[7], &qword_1007C11B0);
    v46 = (uint64_t *)(a5 + v41[8]);
    v47 = v49;
    *v46 = v38;
    v46[1] = v47;
    return sub_10022E718(v57, a5 + v41[9], &qword_1007C1AD8);
  }
  return result;
}

uint64_t sub_1004791E8()
{
  return sub_100479238(_s15ExchangeRequestVMa, 45, 0xD000000000000020, 0x800000010061BF80);
}

uint64_t sub_100479210()
{
  return sub_100479238(_s16ExchangeResponseVMa, 46, 0xD000000000000021, 0x800000010061BFB0);
}

uint64_t sub_100479238(uint64_t (*a1)(_QWORD), Swift::Int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v42 = a3;
  v43 = a4;
  v41 = a2;
  v6 = v4;
  v7 = sub_100008384(&qword_1007C11B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v40 - v16;
  v18 = (uint64_t *)(v6 + *(int *)(v15 + 20));
  v20 = *v18;
  v19 = (void *)v18[1];
  sub_100244384(v6, (uint64_t)v17, a1);
  if (v19)
  {
    swift_bridgeObjectRetain(v19);
    sub_1002443C8((uint64_t)v17, a1);
  }
  else
  {
    v21 = (uint64_t *)&v17[*(int *)(v14 + 24)];
    v20 = *v21;
    v19 = (void *)v21[1];
    swift_bridgeObjectRetain(v19);
    sub_1002443C8((uint64_t)v17, a1);
    if (!v19)
      goto LABEL_6;
  }
  sub_10047A148(v6 + *(int *)(v14 + 28), (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v44 = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(v41);
    swift_bridgeObjectRelease(v45);
    v44 = v42;
    v45 = v43;
    v28 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    v29 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32._countAndFlagsBits = 544034336;
    v32._object = (void *)0xE400000000000000;
    String.append(_:)(v32);
    v33._countAndFlagsBits = v20;
    v33._object = v19;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v19);
    v34._countAndFlagsBits = 23328;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    v35 = sub_100220D78(&qword_1007BA3F8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v35);
    v37 = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v37);
    v38._countAndFlagsBits = 93;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    v27 = v44;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return v27;
  }
  swift_bridgeObjectRelease(v19);
  sub_10000D0F0((uint64_t)v9, &qword_1007C11B0);
LABEL_6:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(v41);
  swift_bridgeObjectRelease(v45);
  v44 = v42;
  v45 = v43;
  v22 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v23 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 0x746E6F63206F6E20;
  v26._object = (void *)0xEB00000000746361;
  String.append(_:)(v26);
  return v44;
}

uint64_t sub_100479588(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1004A79CC(*a1, *a2);
}

uint64_t sub_100479594()
{
  unsigned __int8 *v0;

  return sub_1004A8704(*v0);
}

uint64_t sub_10047959C(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1004A8A00(a1, *v1);
}

uint64_t sub_1004795A4(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1004A8FB4(a1, *v1);
}

unint64_t sub_1004795AC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071CDA8;
  result = sub_10047A4FC(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1004795E8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071CDA8;
  result = sub_10047A4FC(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100479614(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10047A1E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047963C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10047A1E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100479664(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100479BDC(a1, &qword_1007C1AE0, _s15ExchangeRequestVMa, (uint64_t (*)(void))sub_10047A1E0, (uint64_t)&_s15ExchangeRequestV10CodingKeysON, a2);
}

uint64_t sub_100479698(_QWORD *a1)
{
  return sub_100479938(a1, &qword_1007C1AF8, (uint64_t (*)(void))sub_10047A1E0, (uint64_t)&_s15ExchangeRequestV10CodingKeysON, (uint64_t)_s15ExchangeRequestVMa);
}

uint64_t sub_1004796CC()
{
  return sub_100479238(_s15ExchangeRequestVMa, 45, 0xD000000000000020, 0x800000010061BF80);
}

unint64_t sub_100479704@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071CE58;
  result = sub_10047A4FC(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100479738()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10047976C + 4 * asc_1005D9A30[*v0]))();
}

void sub_10047976C(_QWORD *a1@<X8>)
{
  *a1 = 0x6D614E6E65766947;
  a1[1] = 0xE900000000000065;
}

void sub_100479790(_QWORD *a1@<X8>)
{
  *a1 = 0x656D614E6C6C7546;
  a1[1] = 0xE800000000000000;
}

void sub_1004797AC(_QWORD *a1@<X8>)
{
  *a1 = 0x656C646E6148;
  a1[1] = 0xE600000000000000;
}

void sub_1004797C4(_QWORD *a1@<X8>)
{
  *a1 = 0x7461446472614356;
  a1[1] = 0xE900000000000061;
}

void sub_1004797E4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x8000000100611510;
}

uint64_t sub_100479804()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100479838 + 4 * byte_1005D9A36[*v0]))(0x726566736E617254, 0xEA00000000004449);
}

uint64_t sub_100479838()
{
  return 0x6D614E6E65766947;
}

uint64_t sub_100479858()
{
  return 0x656D614E6C6C7546;
}

uint64_t sub_100479870()
{
  return 0x656C646E6148;
}

uint64_t sub_100479884()
{
  return 0x7461446472614356;
}

unint64_t sub_1004798A0()
{
  return 0xD000000000000011;
}

unint64_t sub_1004798BC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071CE58;
  result = sub_10047A4FC(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1004798E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10047A224();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100479910(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10047A224();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100479938(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  _QWORD v38[2];
  _OWORD v39[5];
  uint64_t v40;
  char v41;

  v38[0] = a5;
  v8 = v5;
  v10 = sub_100008384(a2);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10023A834(a1, v15);
  v16 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v16, v15, v14);
  LOBYTE(v39[0]) = 0;
  v17 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v18 = sub_100220D78(&qword_1007BD7A8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v19 = v38[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(v8, v39, v10, v17, v18);
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v21 = v11;
  v22 = (int *)((uint64_t (*)(_QWORD))v38[0])(0);
  v23 = (uint64_t *)(v8 + v22[5]);
  v24 = *v23;
  v25 = v23[1];
  LOBYTE(v39[0]) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v39, v10);
  v26 = (uint64_t *)(v8 + v22[6]);
  v27 = *v26;
  v28 = v26[1];
  LOBYTE(v39[0]) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, v39, v10);
  v29 = v8 + v22[7];
  LOBYTE(v39[0]) = 3;
  v30 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v31 = sub_100220D78(&qword_1007C1B00, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, v39, v10, v30, v31);
  v39[0] = *(_OWORD *)(v8 + v22[8]);
  v41 = 4;
  v32 = sub_100285DE4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v41, v10, &type metadata for Data, v32);
  v33 = v8 + v22[9];
  v34 = *(_QWORD *)(v33 + 80);
  v35 = *(_OWORD *)(v33 + 16);
  v39[0] = *(_OWORD *)v33;
  v39[1] = v35;
  v36 = *(_OWORD *)(v33 + 48);
  v39[2] = *(_OWORD *)(v33 + 32);
  v39[3] = v36;
  v39[4] = *(_OWORD *)(v33 + 64);
  v40 = v34;
  v41 = 5;
  v37 = sub_100453910();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v41, v10, &_s20IdentityShareRequestVN, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v10);
}

void sub_100479BDC(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  _OWORD v55[5];
  uint64_t v56;
  char v57;

  v53 = a4;
  v46 = a6;
  v10 = sub_100008384(&qword_1007C11B0);
  __chkstk_darwin(v10);
  v48 = (uint64_t *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  __chkstk_darwin(v12);
  v51 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100008384(a2);
  v14 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v16 = (uint64_t (*)(void))((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = a3;
  v17 = a3(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - v18;
  v20 = a1[3];
  v21 = a1[4];
  sub_10023A834(a1, v20);
  v22 = v53();
  v53 = v16;
  v23 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(a5, a5, v22, v20, v21);
  if (v23)
  {
    sub_10022E75C(a1);
  }
  else
  {
    v24 = v49;
    v25 = (uint64_t)v19;
    LOBYTE(v55[0]) = 0;
    v26 = sub_100220D78(&qword_1007BD798, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v27 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v50, v55, v52, v50, v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v51, v27);
    LOBYTE(v55[0]) = 1;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v55, v52);
    v29 = (int *)v17;
    v30 = (uint64_t *)(v25 + *(int *)(v17 + 20));
    *v30 = v28;
    v30[1] = v31;
    LOBYTE(v55[0]) = 2;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v55, v52);
    v33 = (uint64_t *)(v25 + *(int *)(v17 + 24));
    *v33 = v32;
    v33[1] = v34;
    v35 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
    LOBYTE(v55[0]) = 3;
    v36 = sub_100220D78(&qword_1007C1AF0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
    v37 = v48;
    v54 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, v35, v55, v52, v35, v36);
    sub_10022E718((uint64_t)v37, v25 + v29[7], &qword_1007C11B0);
    v57 = 4;
    v38 = sub_100285DA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v55, &type metadata for Data, &v57, v52, &type metadata for Data, v38);
    *(_OWORD *)(v25 + v29[8]) = v55[0];
    v57 = 5;
    v39 = sub_100453514();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v55, &_s20IdentityShareRequestVN, &v57, v52, &_s20IdentityShareRequestVN, v39);
    (*(void (**)(uint64_t (*)(void), uint64_t))(v14 + 8))(v53, v52);
    v40 = v56;
    v41 = v25 + v29[9];
    v42 = v55[1];
    *(_OWORD *)v41 = v55[0];
    *(_OWORD *)(v41 + 16) = v42;
    v43 = v55[3];
    *(_OWORD *)(v41 + 32) = v55[2];
    *(_OWORD *)(v41 + 48) = v43;
    *(_OWORD *)(v41 + 64) = v55[4];
    *(_QWORD *)(v41 + 80) = v40;
    v44 = v47;
    sub_100244384(v25, v46, v47);
    sub_10022E75C(a1);
    sub_1002443C8(v25, v44);
  }
}

void sub_10047A0A8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100479BDC(a1, &qword_1007C1B08, _s16ExchangeResponseVMa, (uint64_t (*)(void))sub_10047A224, (uint64_t)&_s16ExchangeResponseV10CodingKeysON, a2);
}

uint64_t sub_10047A0DC(_QWORD *a1)
{
  return sub_100479938(a1, &qword_1007C1B18, (uint64_t (*)(void))sub_10047A224, (uint64_t)&_s16ExchangeResponseV10CodingKeysON, (uint64_t)_s16ExchangeResponseVMa);
}

uint64_t sub_10047A110()
{
  return sub_100479238(_s16ExchangeResponseVMa, 46, 0xD000000000000021, 0x800000010061BFB0);
}

uint64_t sub_10047A148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007C11B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047A190(uint64_t a1)
{
  sub_10031B09C(*(_QWORD *)a1, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(const char **)(a1 + 72));
  return a1;
}

unint64_t sub_10047A1E0()
{
  unint64_t result;

  result = qword_1007C1AE8;
  if (!qword_1007C1AE8)
  {
    result = swift_getWitnessTable(&unk_1005D9DE0, &_s15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1AE8);
  }
  return result;
}

unint64_t sub_10047A224()
{
  unint64_t result;

  result = qword_1007C1B10;
  if (!qword_1007C1B10)
  {
    result = swift_getWitnessTable(&unk_1005D9D90, &_s16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B10);
  }
  return result;
}

ValueMetadata *_s16ExchangeResponseV10CodingKeysOMa()
{
  return &_s16ExchangeResponseV10CodingKeysON;
}

uint64_t _s16ExchangeResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10047A2CC + 4 * byte_1005D9A41[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10047A300 + 4 * byte_1005D9A3C[v4]))();
}

uint64_t sub_10047A300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047A308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10047A310);
  return result;
}

uint64_t sub_10047A31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10047A324);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10047A328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047A330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15ExchangeRequestV10CodingKeysOMa()
{
  return &_s15ExchangeRequestV10CodingKeysON;
}

unint64_t sub_10047A350()
{
  unint64_t result;

  result = qword_1007C1B20;
  if (!qword_1007C1B20)
  {
    result = swift_getWitnessTable(&unk_1005D9C78, &_s15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B20);
  }
  return result;
}

unint64_t sub_10047A398()
{
  unint64_t result;

  result = qword_1007C1B28;
  if (!qword_1007C1B28)
  {
    result = swift_getWitnessTable(&unk_1005D9D68, &_s16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B28);
  }
  return result;
}

unint64_t sub_10047A3E0()
{
  unint64_t result;

  result = qword_1007C1B30;
  if (!qword_1007C1B30)
  {
    result = swift_getWitnessTable(&unk_1005D9CA0, &_s16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B30);
  }
  return result;
}

unint64_t sub_10047A428()
{
  unint64_t result;

  result = qword_1007C1B38;
  if (!qword_1007C1B38)
  {
    result = swift_getWitnessTable(&unk_1005D9CC8, &_s16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B38);
  }
  return result;
}

unint64_t sub_10047A470()
{
  unint64_t result;

  result = qword_1007C1B40;
  if (!qword_1007C1B40)
  {
    result = swift_getWitnessTable(&unk_1005D9BB0, &_s15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B40);
  }
  return result;
}

unint64_t sub_10047A4B8()
{
  unint64_t result;

  result = qword_1007C1B48;
  if (!qword_1007C1B48)
  {
    result = swift_getWitnessTable(&unk_1005D9BD8, &_s15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C1B48);
  }
  return result;
}

unint64_t sub_10047A4FC(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 6)
    return 6;
  else
    return v5;
}

uint64_t sub_10047A540(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2[12] = a1;
  v2[13] = a2;
  v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v2[16] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFPlatform(0);
  v2[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[21] = v8;
  v2[22] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SFAirDrop.TransferType(0);
  v2[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[24] = v10;
  v2[25] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2[26] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[27] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[28] = swift_task_alloc(v13);
  v2[29] = swift_task_alloc(v13);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v14 = static AirDropActor.shared;
  v2[30] = static AirDropActor.shared;
  return swift_task_switch(sub_10047A684, v14, 0);
}

uint64_t sub_10047A684(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  int *v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;

  v2 = (uint64_t *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = *(_QWORD *)(v1 + 208);
  v5 = *(_QWORD *)(v1 + 216);
  v7 = *(_QWORD *)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 184);
  v9 = SFAirDropReceive.Transfer.askRequest.getter(a1);
  SFAirDropReceive.AskRequest.type.getter(v9);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v1 + 248) = v10;
  v10(v3, v4);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8);
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.linksWithExchange(_:))
  {
    v12 = *(_QWORD *)(v1 + 200);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 96))(v12, *(_QWORD *)(v1 + 184));
    v11 = swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
    goto LABEL_3;
  }
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.filesWithExchange(_:))
  {
    v18 = *(_QWORD *)(v1 + 200);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 96))(v18, *(_QWORD *)(v1 + 184));
    v11 = swift_bridgeObjectRelease(*(_QWORD *)(v18 + 8));
    goto LABEL_9;
  }
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.exchange(_:))
  {
    v24 = *(_QWORD *)(v1 + 200);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 96))(v24, *(_QWORD *)(v1 + 184));
    swift_bridgeObjectRelease(*(_QWORD *)(v24 + 8));
    if (qword_1007B4148 != -1)
      swift_once(&qword_1007B4148, sub_10047B270);
    v25 = qword_1007C1B78;
LABEL_15:
    *v2 = v25;
    swift_bridgeObjectRetain(v25);
    goto LABEL_21;
  }
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.links(_:))
  {
LABEL_3:
    v14 = *(_QWORD *)(v1 + 168);
    v13 = *(_QWORD *)(v1 + 176);
    v15 = *(_QWORD *)(v1 + 160);
    static SFPlatform.watchOS.getter(v11);
    v16 = static SFPlatform.isPlatform(_:)(v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    if ((v16 & 1) == 0)
    {
      if (qword_1007B4140 != -1)
        swift_once(&qword_1007B4140, sub_10047B0D4);
      v17 = qword_1007C1B70;
LABEL_19:
      v23 = (_QWORD *)swift_bridgeObjectRetain(v17);
      goto LABEL_20;
    }
    goto LABEL_10;
  }
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.files(_:))
  {
LABEL_9:
    v20 = *(_QWORD *)(v1 + 168);
    v19 = *(_QWORD *)(v1 + 176);
    v21 = *(_QWORD *)(v1 + 160);
    static SFPlatform.watchOS.getter(v11);
    v22 = static SFPlatform.isPlatform(_:)(v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    if ((v22 & 1) == 0)
    {
      if (qword_1007B4138 != -1)
        swift_once(&qword_1007B4138, sub_10047AF88);
      v17 = qword_1007C1B68;
      goto LABEL_19;
    }
LABEL_10:
    v23 = _swiftEmptyArrayStorage;
LABEL_20:
    *v2 = (uint64_t)v23;
    goto LABEL_21;
  }
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.peerPayment(_:))
  {
    if (qword_1007B4158 != -1)
      swift_once(&qword_1007B4158, sub_10047B310);
    v25 = qword_1007C1B88;
    goto LABEL_15;
  }
  v43 = *(_QWORD *)(v1 + 192);
  v42 = *(_QWORD *)(v1 + 200);
  v44 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 72) = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
LABEL_21:
  if (qword_1007B4150 != -1)
    swift_once(&qword_1007B4150, sub_10047B28C);
  v26 = swift_bridgeObjectRetain(qword_1007C1B80);
  sub_100342E40(v26);
  v27 = *(_QWORD **)(v1 + 72);
  *(_QWORD *)(v1 + 256) = v27;
  v28 = v27[2];
  *(_QWORD *)(v1 + 264) = v28;
  if (v28)
  {
    *(_QWORD *)(v1 + 272) = 0;
    v29 = v27[5];
    *(_QWORD *)(v1 + 280) = v29;
    v30 = v27[4];
    *(_QWORD *)(v1 + 288) = v30;
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 40);
    *(_QWORD *)(v1 + 40) = v30;
    *(_QWORD *)(v1 + 48) = v29;
    sub_100244348((_QWORD *)(v1 + 16));
    v32 = v31(v30, v29);
    SFAirDropReceive.Transfer.askRequest.getter(v32);
    v33 = *(int **)(v29 + 48);
    v45 = (int *)((char *)v33 + *v33);
    v34 = (_QWORD *)swift_task_alloc(v33[1]);
    *(_QWORD *)(v1 + 296) = v34;
    *v34 = v1;
    v34[1] = sub_10047AAA8;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v45)(*(_QWORD *)(v1 + 224), v30, v29);
  }
  else
  {
    swift_bridgeObjectRelease(v27);
    v36 = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v36 + 32) = 0;
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    v37 = *(_QWORD *)(v1 + 224);
    v38 = *(_QWORD *)(v1 + 200);
    v39 = *(_QWORD *)(v1 + 176);
    v40 = *(_QWORD *)(v1 + 152);
    v41 = *(_QWORD *)(v1 + 128);
    swift_task_dealloc(*(_QWORD *)(v1 + 232));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10047AAA8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 248);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_BYTE *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  v4(v5, v6);
  return swift_task_switch(sub_10047AB24, v3, 0);
}

uint64_t sub_10047AB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  int *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;

  if ((*(_BYTE *)(v0 + 304) & 1) != 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
    if (qword_1007B4130 != -1)
      swift_once(&qword_1007B4130, sub_10047AEF8);
    v2 = *(_QWORD *)(v0 + 144);
    v1 = *(_QWORD *)(v0 + 152);
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 104);
    v5 = type metadata accessor for Logger(0);
    sub_100221DF8(v5, (uint64_t)qword_1007C1B50);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v41 = *(_QWORD *)(v0 + 288);
      v38 = *(_QWORD *)(v0 + 144);
      v9 = *(_QWORD *)(v0 + 128);
      v39 = *(_QWORD *)(v0 + 136);
      v40 = *(_QWORD *)(v0 + 280);
      v10 = *(_QWORD *)(v0 + 112);
      v36 = *(_QWORD *)(v0 + 120);
      v37 = *(_QWORD *)(v0 + 152);
      v11 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v44 = v42;
      *(_DWORD *)v11 = 136315394;
      SFAirDropReceive.Transfer.id.getter(v42);
      v12 = sub_1002232C0();
      v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
      v15 = v14;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v9, v10);
      *(_QWORD *)(v0 + 80) = sub_100228BD8(v13, v15, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v11 + 4);
      swift_bridgeObjectRelease(v15);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      *(_WORD *)(v11 + 12) = 2080;
      *(_QWORD *)(v0 + 56) = v41;
      *(_QWORD *)(v0 + 64) = v40;
      v16 = sub_100008384(&qword_1007B6C08);
      v17 = String.init<A>(describing:)(v0 + 56, v16);
      v19 = v18;
      *(_QWORD *)(v0 + 88) = sub_100228BD8(v17, v18, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 14);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Transfer %s using handler %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    }

    sub_100244418(v0 + 16, *(_QWORD *)(v0 + 96));
    sub_10022E75C((_QWORD *)(v0 + 16));
    goto LABEL_10;
  }
  v20 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 272) + 1;
  sub_10022E75C((_QWORD *)(v0 + 16));
  if (v21 == v20)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
    v22 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v22 + 32) = 0;
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
LABEL_10:
    v23 = *(_QWORD *)(v0 + 224);
    v24 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 152);
    v27 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 272) = v21;
  v29 = *(_QWORD *)(v0 + 256) + 16 * v21;
  v30 = *(_QWORD *)(v29 + 40);
  *(_QWORD *)(v0 + 280) = v30;
  v31 = *(_QWORD *)(v29 + 32);
  *(_QWORD *)(v0 + 288) = v31;
  v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 40);
  *(_QWORD *)(v0 + 40) = v31;
  *(_QWORD *)(v0 + 48) = v30;
  sub_100244348((_QWORD *)(v0 + 16));
  v33 = v32(v31, v30);
  SFAirDropReceive.Transfer.askRequest.getter(v33);
  v34 = *(int **)(v30 + 48);
  v43 = (int *)((char *)v34 + *v34);
  v35 = (_QWORD *)swift_task_alloc(v34[1]);
  *(_QWORD *)(v0 + 296) = v35;
  *v35 = v0;
  v35[1] = sub_10047AAA8;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v43)(*(_QWORD *)(v0 + 224), v31, v30);
}

uint64_t sub_10047AEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1B50);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1B50);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10047AF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100008384(&qword_1007B52F0);
  v1 = swift_allocObject(v0, 240, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1005D9E50;
  *(_QWORD *)(v1 + 32) = type metadata accessor for SDAirDropContentHandlerCalendarEvents();
  *(_QWORD *)(v1 + 40) = &off_100728910;
  *(_QWORD *)(v1 + 48) = type metadata accessor for SDAirDropContentHandlerContacts();
  *(_QWORD *)(v1 + 56) = &off_100728888;
  *(_QWORD *)(v1 + 64) = type metadata accessor for SDAirDropContentHandlerNotes();
  *(_QWORD *)(v1 + 72) = &off_100723938;
  *(_QWORD *)(v1 + 80) = type metadata accessor for SDAirDropContentHandlerPhotos(0);
  *(_QWORD *)(v1 + 88) = &off_10072E130;
  *(_QWORD *)(v1 + 96) = type metadata accessor for SDAirDropContentHandlerProfiles();
  *(_QWORD *)(v1 + 104) = &off_10072E510;
  *(_QWORD *)(v1 + 112) = type metadata accessor for SDAirDropContentHandlerVoiceMails();
  *(_QWORD *)(v1 + 120) = &off_100725C60;
  *(_QWORD *)(v1 + 128) = type metadata accessor for SDAirDropContentHandlerVoiceMemos();
  *(_QWORD *)(v1 + 136) = &off_10071F928;
  *(_QWORD *)(v1 + 144) = type metadata accessor for SDAirDropContentHandlerWalletItems();
  *(_QWORD *)(v1 + 152) = &off_100727CB8;
  *(_QWORD *)(v1 + 160) = type metadata accessor for SDAirDropContentHandlerPDFs();
  *(_QWORD *)(v1 + 168) = &off_1007281C8;
  *(_QWORD *)(v1 + 176) = type metadata accessor for SDAirDropContentHandleriBooksItems();
  *(_QWORD *)(v1 + 184) = &off_10071DDE0;
  *(_QWORD *)(v1 + 192) = type metadata accessor for SDAirDropContentHandlerIPA();
  *(_QWORD *)(v1 + 200) = &off_100722970;
  *(_QWORD *)(v1 + 208) = type metadata accessor for SDAirDropContentHandlerPlaygroundItems();
  *(_QWORD *)(v1 + 216) = &off_100725038;
  result = type metadata accessor for SDAirDropContentHandlerGenericFiles();
  *(_QWORD *)(v1 + 224) = result;
  *(_QWORD *)(v1 + 232) = &off_100723828;
  qword_1007C1B68 = v1;
  return result;
}

uint64_t sub_10047B0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100008384(&qword_1007B52F0);
  v1 = swift_allocObject(v0, 304, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1005D9E60;
  *(_QWORD *)(v1 + 32) = type metadata accessor for SDAirDropContentHandlerCredentialLinks();
  *(_QWORD *)(v1 + 40) = &off_1007269A8;
  *(_QWORD *)(v1 + 48) = type metadata accessor for SDAirDropContentHandlerSharediCloudDocumentsLinks();
  *(_QWORD *)(v1 + 56) = &off_10072B0E0;
  *(_QWORD *)(v1 + 64) = type metadata accessor for SDAirDropContentHandlerKeynoteLiveLinks();
  *(_QWORD *)(v1 + 72) = &off_100723770;
  *(_QWORD *)(v1 + 80) = type metadata accessor for SDAirDropContentHandlerFindMyFriendsLinks();
  *(_QWORD *)(v1 + 88) = &off_1007207A0;
  *(_QWORD *)(v1 + 96) = type metadata accessor for SDAirDropContentHandleriWorkLinks();
  *(_QWORD *)(v1 + 104) = &off_1007232C0;
  *(_QWORD *)(v1 + 112) = type metadata accessor for SDAirDropContentHandlerAppStoreLinks();
  *(_QWORD *)(v1 + 120) = &off_100721148;
  *(_QWORD *)(v1 + 128) = type metadata accessor for SDAirDropContentHandlerPhoneLinks();
  *(_QWORD *)(v1 + 136) = &off_100727C30;
  *(_QWORD *)(v1 + 144) = type metadata accessor for SDAirDropContentHandleriBooksLinks();
  *(_QWORD *)(v1 + 152) = &off_10072F220;
  *(_QWORD *)(v1 + 160) = type metadata accessor for SDAirDropContentHandlerPodcastsLinks();
  *(_QWORD *)(v1 + 168) = &off_100721EB0;
  *(_QWORD *)(v1 + 176) = type metadata accessor for SDAirDropContentHandleriTunesULinks();
  *(_QWORD *)(v1 + 184) = &off_100722B98;
  *(_QWORD *)(v1 + 192) = type metadata accessor for SDAirDropContentHandleriTunesStoreLinks();
  *(_QWORD *)(v1 + 200) = &off_10072E5B0;
  *(_QWORD *)(v1 + 208) = type metadata accessor for SDAirDropContentHandleriLifeLinks();
  *(_QWORD *)(v1 + 216) = &off_10072DE90;
  *(_QWORD *)(v1 + 224) = type metadata accessor for SDAirDropContentHandlerMapsLinks();
  *(_QWORD *)(v1 + 232) = &off_100720A10;
  *(_QWORD *)(v1 + 240) = type metadata accessor for SDAirDropContentHandlerNewsLinks();
  *(_QWORD *)(v1 + 248) = &off_10072BB20;
  *(_QWORD *)(v1 + 256) = type metadata accessor for SDAirDropContentHandleriCloudFamilyLinks();
  *(_QWORD *)(v1 + 264) = &off_1007204B8;
  *(_QWORD *)(v1 + 272) = type metadata accessor for SDAirDropContentHandlerGenericLinks();
  *(_QWORD *)(v1 + 280) = &off_1007228B8;
  result = type metadata accessor for SDAirDropContentHandlerWebLinks();
  *(_QWORD *)(v1 + 288) = result;
  *(_QWORD *)(v1 + 296) = &off_100720038;
  qword_1007C1B70 = v1;
  return result;
}

uint64_t sub_10047B270(uint64_t a1)
{
  return sub_10047B32C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SDAirDropContentHandlerExchange, (uint64_t)&off_1007211B0, &qword_1007C1B78);
}

uint64_t sub_10047B28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100008384(&qword_1007B52F0);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1005CF140;
  *(_QWORD *)(v1 + 32) = type metadata accessor for SDAirDropContentHandlerUnsupportedLinkType();
  *(_QWORD *)(v1 + 40) = &off_10072DDF0;
  *(_QWORD *)(v1 + 48) = type metadata accessor for SDAirDropContentHandlerUnsupportedFileType();
  *(_QWORD *)(v1 + 56) = &off_100726060;
  result = type metadata accessor for SDAirDropContentHandlerMixedTypes();
  *(_QWORD *)(v1 + 64) = result;
  *(_QWORD *)(v1 + 72) = &off_100720698;
  qword_1007C1B80 = v1;
  return result;
}

uint64_t sub_10047B310(uint64_t a1)
{
  return sub_10047B32C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SDAirDropContentHandlerPeerPayment, (uint64_t)&off_100724A40, &qword_1007C1B88);
}

uint64_t sub_10047B32C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = sub_100008384(&qword_1007B52F0);
  v8 = swift_allocObject(v7, 48, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1005CD2A0;
  result = a2(0);
  *(_QWORD *)(v8 + 32) = result;
  *(_QWORD *)(v8 + 40) = a3;
  *a4 = v8;
  return result;
}

uint64_t type metadata accessor for SDAirDropContentHandlerFactory()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary30SDAirDropContentHandlerFactory);
}

BOOL sub_10047B3B4(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 24))() & 1) == 0;
}

uint64_t sub_10047B3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  NSString v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v26;

  v6 = type metadata accessor for SFPlatform(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SFPlatform.macOS.getter(v8);
  v11 = static SFPlatform.isPlatform(_:)(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, 1, a2, a3);
  v12 = String._bridgeToObjectiveC()();
  v14 = (id)SFLocalizedStringForKey(v12, v13);

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v17 = (const char *)0xEE00402431252067;
    v15 = 0x6E69766965636552;
  }
  v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a3 + 56))(a1, 0, a2, a3);
  v21 = v20;
  v22 = sub_100008384((uint64_t *)&unk_1007B86C0);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_100299AB0();
  *(_QWORD *)(v23 + 32) = v19;
  *(_QWORD *)(v23 + 40) = v21;
  v18 = static String.localizedStringWithFormat(_:_:)(v15, v17, v23);
  *(_QWORD *)&v24 = swift_bridgeObjectRelease((const char *)v23).n128_u64[0];
  swift_bridgeObjectRelease(v17, v24);
  return v18;
}

uint64_t sub_10047B5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  id v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v59;

  v6 = type metadata accessor for SFPlatform(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = SFAirDropReceive.AskRequest.senderIsMe.getter(v8);
  v12 = v11;
  static SFPlatform.macOS.getter(v11);
  v13 = static SFPlatform.isPlatform(_:)(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
  if ((v12 & 1) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v15 = v14(a1, 0, a2, a3);
      v17 = v16;
      v18 = String._bridgeToObjectiveC()();
      v20 = (id)SFLocalizedStringForKey(v18, v19);

      if (v20)
      {
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

      }
      else
      {
        v23 = (const char *)0xED00004024312520;
        v21 = 0x6465766965636552;
      }
      v43 = sub_100008384((uint64_t *)&unk_1007B86C0);
      v44 = swift_allocObject(v43, 72, 7);
      *(_OWORD *)(v44 + 16) = xmmword_1005CD2A0;
      *(_QWORD *)(v44 + 56) = &type metadata for String;
      *(_QWORD *)(v44 + 64) = sub_100299AB0();
      *(_QWORD *)(v44 + 32) = v15;
      *(_QWORD *)(v44 + 40) = v17;
      v33 = static String.localizedStringWithFormat(_:_:)(v21, v23, v44);
      *(_QWORD *)&v45 = swift_bridgeObjectRelease((const char *)v44).n128_u64[0];
      swift_bridgeObjectRelease(v23, v45);
    }
    else
    {
      return v14(a1, 1, a2, a3);
    }
  }
  else if ((v13 & 1) != 0)
  {
    v24 = 0xD000000000000017;
    v25 = v14(a1, 0, a2, a3);
    v27 = v26;
    v28 = String._bridgeToObjectiveC()();
    v30 = (id)SFLocalizedStringForKey(v28, v29);

    if (v30)
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v32 = v31;

    }
    else
    {
      v32 = (const char *)0x800000010061C070;
    }
    v46 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v47 = swift_allocObject(v46, 112, 7);
    *(_OWORD *)(v47 + 16) = xmmword_1005CF250;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    v48 = sub_100299AB0();
    *(_QWORD *)(v47 + 64) = v48;
    *(_QWORD *)(v47 + 32) = v25;
    *(_QWORD *)(v47 + 40) = v27;
    v49 = SFAirDropReceive.AskRequest.senderDisplayName.getter(v48);
    *(_QWORD *)(v47 + 96) = &type metadata for String;
    *(_QWORD *)(v47 + 104) = v48;
    *(_QWORD *)(v47 + 72) = v49;
    *(_QWORD *)(v47 + 80) = v50;
    v33 = static String.localizedStringWithFormat(_:_:)(v24, v32, v47);
    *(_QWORD *)&v51 = swift_bridgeObjectRelease((const char *)v47).n128_u64[0];
    swift_bridgeObjectRelease(v32, v51);
  }
  else
  {
    v34 = v14(a1, 1, a2, a3);
    v36 = v35;
    v37 = String._bridgeToObjectiveC()();
    v39 = (id)SFLocalizedStringForKey(v37, v38);

    if (v39)
    {
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

    }
    else
    {
      v42 = (const char *)0xEE0040243225206DLL;
      v40 = 0x6F72662040243125;
    }
    v52 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v53 = swift_allocObject(v52, 112, 7);
    *(_OWORD *)(v53 + 16) = xmmword_1005CF250;
    *(_QWORD *)(v53 + 56) = &type metadata for String;
    v54 = sub_100299AB0();
    *(_QWORD *)(v53 + 64) = v54;
    *(_QWORD *)(v53 + 32) = v34;
    *(_QWORD *)(v53 + 40) = v36;
    v55 = SFAirDropReceive.AskRequest.senderDisplayName.getter(v54);
    *(_QWORD *)(v53 + 96) = &type metadata for String;
    *(_QWORD *)(v53 + 104) = v54;
    *(_QWORD *)(v53 + 72) = v55;
    *(_QWORD *)(v53 + 80) = v56;
    v33 = static String.localizedStringWithFormat(_:_:)(v40, v42, v53);
    *(_QWORD *)&v57 = swift_bridgeObjectRelease((const char *)v53).n128_u64[0];
    swift_bridgeObjectRelease(v42, v57);
  }
  return v33;
}

uint64_t sub_10047B998(uint64_t a1)
{
  return sub_1004826A4(a1);
}

uint64_t sub_10047B9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v6[20] = a5;
  v6[21] = v5;
  v6[18] = a3;
  v6[19] = a4;
  v6[16] = a1;
  v6[17] = a2;
  v8 = *(_QWORD *)(sub_100008384(&qword_1007B6C20) - 8);
  v6[22] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[23] = v9;
  v6[24] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B68A0);
  v6[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B5280);
  v6[26] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[27] = v12;
  v6[28] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v6[29] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[30] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[31] = swift_task_alloc(v15);
  v6[32] = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  v6[33] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[34] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[35] = swift_task_alloc(v18);
  v6[36] = swift_task_alloc(v18);
  v19 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v6[37] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v6[38] = v20;
  v6[39] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008384(&qword_1007B52B8);
  v6[40] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v6[41] = v22;
  v6[42] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v6[43] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v6[44] = v24;
  v6[45] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a4 - 8);
  v6[46] = v25;
  v6[47] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SFAirDrop.ButtonConfiguration(0);
  v6[48] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v6[49] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[50] = swift_task_alloc(v28);
  v6[51] = swift_task_alloc(v28);
  v6[52] = swift_task_alloc(v28);
  v6[53] = swift_task_alloc(v28);
  v6[54] = swift_task_alloc(v28);
  v29 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v6[55] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v6[56] = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[57] = swift_task_alloc(v31);
  v6[58] = swift_task_alloc(v31);
  v32 = sub_100008384(&qword_1007BBD28);
  v6[59] = v32;
  v33 = *(_QWORD *)(v32 - 8);
  v6[60] = v33;
  v34 = *(_QWORD *)(v33 + 64);
  v6[61] = v34;
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[62] = swift_task_alloc(v35);
  v6[63] = swift_task_alloc(v35);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10047BC74, static AirDropActor.shared, 0);
}

uint64_t sub_10047BC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSString v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  int v33;
  uint64_t v34;
  NSString v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  NSString v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSString v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  void *v55;
  unint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSString v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  NSString v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSString v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t result;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(void);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t, uint64_t);
  void (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  __int128 *v185;
  uint64_t v186;
  uint64_t v187;

  SFProgressContinuation.init(_:initialProgress:file:line:)(0xD000000000000014, 0x800000010061C390, a3, 0xD000000000000066, 0x800000010061C0D0, 63, (char *)&type metadata for () + 8, *(_QWORD *)(v3 + 296));
  v4 = String._bridgeToObjectiveC()();
  v6 = (id)SFLocalizedStringForKey(v4, v5);

  v185 = (__int128 *)(v3 + 56);
  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

  }
  else
  {
    v9 = 0xE700000000000000;
    v7 = 0x656E696C636544;
  }
  v11 = *(_QWORD *)(v3 + 496);
  v10 = *(_QWORD *)(v3 + 504);
  v13 = *(_QWORD *)(v3 + 480);
  v12 = *(_QWORD *)(v3 + 488);
  v14 = *(_QWORD *)(v3 + 472);
  v15 = *(uint64_t **)(v3 + 432);
  v16 = *(_QWORD *)(v3 + 392);
  v176 = *(_QWORD *)(v3 + 368);
  v179 = *(_QWORD *)(v3 + 168);
  v182 = *(_QWORD *)(v3 + 376);
  v17 = *(_QWORD *)(v3 + 152);
  *v15 = v7;
  v15[1] = v9;
  v163 = *(void (**)(void))(v16 + 104);
  ((void (*)(uint64_t *))v163)(v15);
  v173 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v173(v11, v10, v14);
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + 16) & ~v18;
  v166 = v19 + v12;
  v170 = v18 | 7;
  v20 = swift_allocObject(&unk_10072A248, v19 + v12, v18 | 7);
  v168 = v19;
  v174 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v174(v20 + v19, v11, v14);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)(0x656E696C636544, 0xE700000000000000, v15, 0, sub_10048430C, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 16))(v182, v179, v17);
  v21 = sub_100008384(&qword_1007C1CD8);
  v172 = v18;
  if (swift_dynamicCast(v185, v182, v17, v21, 6))
  {
    v22 = *(_QWORD *)(v3 + 504);
    v24 = *(_QWORD *)(v3 + 352);
    v23 = *(_QWORD *)(v3 + 360);
    v25 = *(_QWORD *)(v3 + 344);
    sub_10026EE60(v185, v3 + 16);
    v26 = *(_QWORD *)(v3 + 40);
    v27 = *(_QWORD *)(v3 + 48);
    v28 = sub_10023A834((_QWORD *)(v3 + 16), v26);
    SFAirDropReceive.Transfer.askRequest.getter(v28);
    v186 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v23, v22, v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v29 = sub_10022E75C((_QWORD *)(v3 + 16));
  }
  else
  {
    *v185 = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_QWORD *)(v3 + 88) = 0;
    v30 = sub_10000D0F0((uint64_t)v185, &qword_1007C1CE0);
    if ((SFAirDropReceive.Transfer.isPreviewSensitive.getter(v30) & 1) != 0)
    {
      v31 = sub_1003B0844();
      v33 = v32;
      sub_10031B7F4(v31, v34, v32);
      if (v33 == 2)
      {
        v35 = String._bridgeToObjectiveC()();
        v37 = (id)SFLocalizedStringForKey(v35, v36);

        if (v37)
        {
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE800000000000000;
          v38 = 0x65756E69746E6F43;
        }
        v53 = (uint64_t *)(v3 + 416);
        v57 = *(uint64_t **)(v3 + 416);
        *v57 = v38;
        v57[1] = v40;
        v163();
        v55 = (void *)0xEA00000000007974;
        v56 = 0x656661536D6D6F43;
      }
      else
      {
        v47 = String._bridgeToObjectiveC()();
        v49 = (id)SFLocalizedStringForKey(v47, v48);

        if (v49)
        {
          v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
          v52 = v51;

        }
        else
        {
          v52 = 0xE400000000000000;
          v50 = 2003789907;
        }
        v53 = (uint64_t *)(v3 + 408);
        v58 = *(_QWORD **)(v3 + 408);
        *v58 = 0x6C6C69662E657965;
        v58[1] = 0xE800000000000000;
        v58[2] = v50;
        v58[3] = v52;
        v163();
        v55 = (void *)0x800000010061C2E0;
        v56 = 0xD000000000000010;
      }
    }
    else
    {
      v41 = String._bridgeToObjectiveC()();
      v43 = (id)SFLocalizedStringForKey(v41, v42);

      if (v43)
      {
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

      }
      else
      {
        v46 = 0xE600000000000000;
        v44 = 0x747065636341;
      }
      v53 = (uint64_t *)(v3 + 400);
      v54 = *(uint64_t **)(v3 + 400);
      *v54 = v44;
      v54[1] = v46;
      v163();
      v55 = (void *)0xE700000000000000;
      v56 = 0x72616C75676552;
    }
    v161 = v56;
    v59 = *v53;
    v60 = *(_QWORD *)(v3 + 496);
    v61 = *(_QWORD *)(v3 + 472);
    v62 = *(_QWORD *)(v3 + 424);
    v63 = *(_QWORD *)(v3 + 432);
    v64 = *(_QWORD *)(v3 + 384);
    v164 = *(_QWORD *)(v3 + 336);
    v177 = *(_QWORD *)(v3 + 328);
    v180 = *(_QWORD *)(v3 + 392);
    v183 = *(_QWORD *)(v3 + 320);
    v65 = *(_QWORD *)(v3 + 304);
    v157 = *(_QWORD *)(v3 + 312);
    v159 = *(_QWORD *)(v3 + 504);
    v155 = *(_QWORD *)(v3 + 296);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v180 + 32))(v62, v59, v64);
    sub_100008384(&qword_1007BA2B0);
    v66._countAndFlagsBits = v161;
    v66._object = v55;
    String.append(_:)(v66);
    swift_bridgeObjectRelease(v55);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v180 + 16))(v63, v62, v64);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v65 + 104))(v157, enum case for SFAirDropReceive.ItemDestination.default(_:), v155);
    v173(v60, v159, v61);
    v67 = swift_allocObject(&unk_10072A270, v166, v170);
    v174(v67 + v168, v60, v61);
    v68 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v69 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v70 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v71 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(0x2D747065636341, 0xE700000000000000, v63, 1, 0, v157, sub_1004235EC, v67, v155, v68, v69, v70);
    UUID.init()(v71);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v177 + 104))(v164, enum case for SFAirDrop.AcceptAction.single<A>(_:), v183);
    v72 = sub_100008384(&qword_1007B52B0);
    v73 = *(unsigned __int8 *)(v177 + 80);
    v74 = (v73 + 32) & ~v73;
    v75 = swift_allocObject(v72, v74 + *(_QWORD *)(v177 + 72), v73 | 7);
    *(_OWORD *)(v75 + 16) = xmmword_1005CD2A0;
    v186 = v75;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 32))(v75 + v74, v164, v183);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v180 + 8))(v62, v64);
  }
  v76 = 0x706F7244726941;
  v77 = UUID.init()(v29);
  static Date.now.getter(v77);
  v78 = String._bridgeToObjectiveC()();
  v80 = (id)SFLocalizedStringForKey(v78, v79);

  if (v80)
  {
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v184 = v82;

  }
  else
  {
    v184 = 0xE700000000000000;
  }
  v83 = SFAirDropReceive.Transfer.isPreviewSensitive.getter(v81);
  v84 = v83;
  SFAirDropReceive.Transfer.askRequest.getter(v83);
  if ((v84 & 1) != 0)
    sub_1003B0960();
  else
    v85 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v3 + 160) + 56))(*(_QWORD *)(v3 + 360), 0, *(_QWORD *)(v3 + 152));
  v87 = v85;
  v181 = v86;
  v88 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 352) + 8);
  v88(*(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 344));
  v89 = String._bridgeToObjectiveC()();
  v91 = (id)SFLocalizedStringForKey(v89, v90);

  if (v91)
  {
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v94 = v93;

  }
  else
  {
    v92 = 0;
    v94 = 0;
  }
  *(_QWORD *)(v3 + 112) = v92;
  *(_QWORD *)(v3 + 120) = v94;
  v95 = sub_100008384(&qword_1007B54E0);
  Optional.tryUnwrap(_:file:line:)(0xD000000000000010, 0x800000010061C2A0, 0xD000000000000066, 0x800000010061C0D0, 106, v95);
  v154 = v87;
  v156 = v76;
  v96 = *(_QWORD *)(v3 + 360);
  v97 = *(_QWORD *)(v3 + 344);
  swift_bridgeObjectRelease(v94);
  v152 = *(_QWORD *)(v3 + 96);
  v153 = *(_QWORD *)(v3 + 104);
  v98 = sub_100008384((uint64_t *)&unk_1007B86C0);
  v99 = swift_allocObject(v98, 112, 7);
  *(_OWORD *)(v99 + 16) = xmmword_1005CF250;
  v100 = SFAirDropReceive.Transfer.askRequest.getter(v99);
  SFAirDropReceive.AskRequest.senderDisplayName.getter(v100);
  v102 = v101;
  v88(v96, v97);
  v103 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v102);
  v104 = (id)SFTruncateAirDropSenderNameForUI(v103);

  if (v104)
  {
    v162 = *(_QWORD *)(v3 + 504);
    v137 = *(_QWORD *)(v3 + 496);
    v138 = *(_QWORD *)(v3 + 488);
    v142 = *(_QWORD *)(v3 + 480);
    v136 = *(_QWORD *)(v3 + 472);
    v187 = *(_QWORD *)(v3 + 464);
    v160 = *(_QWORD *)(v3 + 456);
    v171 = *(_QWORD *)(v3 + 448);
    v175 = *(_QWORD *)(v3 + 440);
    v143 = *(_QWORD *)(v3 + 432);
    v144 = *(_QWORD *)(v3 + 424);
    v145 = *(_QWORD *)(v3 + 416);
    v146 = *(_QWORD *)(v3 + 408);
    v147 = *(_QWORD *)(v3 + 400);
    v148 = *(_QWORD *)(v3 + 376);
    v149 = *(_QWORD *)(v3 + 360);
    v150 = *(_QWORD *)(v3 + 336);
    v151 = *(_QWORD *)(v3 + 312);
    v105 = *(_QWORD *)(v3 + 288);
    v130 = *(_QWORD *)(v3 + 296);
    v107 = *(_QWORD *)(v3 + 272);
    v106 = *(_QWORD *)(v3 + 280);
    v108 = *(_QWORD *)(v3 + 264);
    v135 = v108;
    v169 = *(_QWORD *)(v3 + 256);
    v109 = *(_QWORD *)(v3 + 240);
    v165 = *(_QWORD *)(v3 + 248);
    v167 = *(_QWORD *)(v3 + 232);
    v178 = *(_QWORD *)(v3 + 224);
    v140 = *(_QWORD *)(v3 + 216);
    v141 = *(_QWORD *)(v3 + 208);
    v131 = *(_QWORD *)(v3 + 200);
    v158 = *(_QWORD *)(v3 + 192);
    v133 = *(_QWORD *)(v3 + 176);
    v134 = *(_QWORD *)(v3 + 184);
    v132 = *(_QWORD *)(v3 + 144);
    v139 = *(_QWORD *)(v3 + 128);
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v112 = v111;

    *(_QWORD *)(v99 + 56) = &type metadata for String;
    v113 = sub_100299AB0();
    *(_QWORD *)(v99 + 32) = v110;
    *(_QWORD *)(v99 + 40) = v112;
    *(_QWORD *)(v99 + 96) = &type metadata for String;
    *(_QWORD *)(v99 + 104) = v113;
    *(_QWORD *)(v99 + 64) = v113;
    *(_QWORD *)(v99 + 72) = v154;
    *(_QWORD *)(v99 + 80) = v181;
    v114 = static String.localizedStringWithFormat(_:_:)(v152, v153, v99);
    v116 = v115;
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v99);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v106, v105, v108);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 16))(v165, v169, v167);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16))(v160, v187, v175);
    v117 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v118 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v119 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    LOBYTE(v129) = 0;
    SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)(v106, v165, v156, v184, v114, v116, v186, v160, v129, v130, v117, v118, v119);
    v120 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v131, 1, 1, v120);
    sub_100484628(v132, v158);
    v173(v137, v162, v136);
    v121 = static AirDropActor.shared;
    v122 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v123 = *(unsigned __int8 *)(v133 + 80);
    v124 = (v123 + 32) & ~v123;
    v125 = (v134 + v172 + v124) & ~v172;
    v126 = swift_allocObject(&unk_10072A298, v125 + v138, v172 | v123 | 7);
    *(_QWORD *)(v126 + 16) = v121;
    *(_QWORD *)(v126 + 24) = v122;
    sub_100484770(v158, v126 + v124);
    v174(v126 + v125, v137, v136);
    swift_retain(v121);
    v127 = sub_100252B04(v131, (uint64_t)&unk_1007C1CF0, v126);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v169, v167);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v105, v135);
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v187, v175);
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v162, v136);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 32))(v139, v178, v141);
    *(_QWORD *)(v139 + *(int *)(sub_100008384(&qword_1007B6BF0) + 52)) = v127;
    swift_task_dealloc(v162);
    swift_task_dealloc(v137);
    swift_task_dealloc(v187);
    swift_task_dealloc(v160);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v151);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v169);
    swift_task_dealloc(v165);
    swift_task_dealloc(v178);
    swift_task_dealloc(v131);
    swift_task_dealloc(v158);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    result = swift_bridgeObjectRelease(v186);
    __break(1u);
  }
  return result;
}

uint64_t sub_10047CBAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  double v32;
  const char *v33;
  Swift::String v34;
  double v35;
  const char *v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  const char *v72;

  v67 = a5;
  v68 = a8;
  v65 = a6;
  v66 = a7;
  v64 = a4;
  v57._countAndFlagsBits = a2;
  v57._object = a3;
  v55 = a1;
  v69 = a9;
  v9 = type metadata accessor for SFProgressTask(0, a6, a7);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  v63 = *(_QWORD *)(v61 + 64);
  __chkstk_darwin(v9);
  v60 = (char *)&v53 - v10;
  v11 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v58 = v11;
  v59 = v13;
  v14 = v12;
  __chkstk_darwin(v11);
  v56 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SFAirDrop.ButtonConfiguration(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v70 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v53 - v20);
  v22 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = SFAirDropReceive.Transfer.id.getter(v24);
  v28 = SFAirDrop.TransferIdentifier.shortIdentifier.getter(v27);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v71 = 0x2D6C65636E6143;
  v72 = (const char *)0xE700000000000000;
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  *(_QWORD *)&v32 = swift_bridgeObjectRelease((const char *)v30).n128_u64[0];
  v33 = v72;
  swift_bridgeObjectRetain(v72, v32);
  v34._countAndFlagsBits = 45;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  *(_QWORD *)&v35 = swift_bridgeObjectRelease(v33).n128_u64[0];
  v36 = v72;
  swift_bridgeObjectRetain(v72, v35);
  String.append(_:)(v57);
  v37 = swift_bridgeObjectRelease(v36);
  v57._countAndFlagsBits = (uint64_t)v72;
  v57._object = (void *)v71;
  *v21 = 0x662E657261757173;
  v21[1] = 0xEB000000006C6C69;
  v53 = v16;
  v54 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v17 + 104))(v21, enum case for SFAirDrop.ButtonConfiguration.symbol(_:), v16, v37);
  (*(void (**)(char *, _QWORD *, uint64_t))(v17 + 16))(v70, v21, v16);
  v38 = v14;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v40 = v56;
  v41 = v58;
  v39(v56, v55, v58);
  v43 = v60;
  v42 = v61;
  v44 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v64, v62);
  v45 = *(unsigned __int8 *)(v38 + 80);
  v46 = (v45 + 48) & ~v45;
  v47 = *(unsigned __int8 *)(v42 + 80);
  v48 = (v59 + v47 + v46) & ~v47;
  v49 = (char *)swift_allocObject(&unk_10072A1A8, v48 + v63, v45 | v47 | 7);
  v50 = v65;
  *((_QWORD *)v49 + 2) = v67;
  *((_QWORD *)v49 + 3) = v50;
  v51 = v68;
  *((_QWORD *)v49 + 4) = v66;
  *((_QWORD *)v49 + 5) = v51;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v49[v46], v40, v41);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v49[v48], v43, v44);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)(v57._object, v57._countAndFlagsBits, v70, 0, sub_100484474, v49);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v54 + 8))(v21, v53);
}

uint64_t sub_10047CEFC@<X0>(uint64_t a1@<X0>, const char *a2@<X2>, int a3@<W3>, const char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  const char *v7;
  const char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, const char *, uint64_t);
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSString v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  __n128 v67;
  uint64_t result;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  void (*v117)(uint64_t, char *, uint64_t);
  unint64_t v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  const char *v133;
  _QWORD v134[2];
  uint64_t v135;

  v120 = a4;
  v8 = v7;
  v125 = a6;
  LODWORD(v128) = a3;
  v119 = a2;
  v129 = a1;
  v113 = a7;
  v112 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = v10;
  v116 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v11);
  v115 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  __chkstk_darwin(v13);
  v107 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  __chkstk_darwin(v15);
  v106 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100008384(&qword_1007B5280);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v114 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = (void (*)(uint64_t, char *, uint64_t))type metadata accessor for SFAirDrop.ButtonConfiguration(0);
  v19 = *((_QWORD *)v117 - 1);
  __chkstk_darwin(v117);
  v21 = (uint64_t *)((char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v23 = *(_QWORD *)(v22 - 8);
  v126 = v22;
  v127 = v23;
  v24 = __chkstk_darwin(v22);
  v105 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v124 = (char *)&v97 - v27;
  v28 = *(_QWORD *)(a5 - 8);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v97 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v97 - v35;
  v135 = sub_100008384(&qword_1007BBD28);
  v130 = *(_QWORD *)(v135 - 8);
  v37 = __chkstk_darwin(v135);
  v122 = v38;
  v123 = (char *)&v97 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v40 = (char *)&v97 - v39;
  v41 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v118 = (unint64_t)"AIRDROP_RECEIVING_TEXT";
  v131 = v40;
  v101 = v41;
  SFProgressContinuation.init(_:initialProgress:file:line:)(0x757165526E65706FLL, 0xEF726F6628747365, v42, 0xD000000000000066, 0x800000010061C0D0, 238, (char *)&type metadata for () + 8, v41);
  v43 = *(void (**)(char *, const char *, uint64_t))(v28 + 16);
  v43(v36, v8, a5);
  v44 = type metadata accessor for SDAirDropContentHandlerUnsupportedLinkType();
  if (swift_dynamicCast(v134, v36, a5, v44, 6))
  {
    swift_release(v134[0]);
    v43(v34, v8, a5);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, a5);
    v45 = 1;
  }
  else
  {
    v43(v34, v8, a5);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v34, a5);
    v46 = type metadata accessor for SDAirDropContentHandlerUnsupportedFileType();
    v45 = swift_dynamicCast(v134, v31, a5, v46, 6);
    if (v45)
      swift_release(v134[0]);
  }
  v48 = v123;
  v47 = v124;
  v49 = (uint64_t)v131;
  v50 = v119;
  v119 = v8;
  v120 = (const char *)sub_100482A4C(v129, v50, v128 & 1, (uint64_t)v120, (uint64_t)v131, v45, a5);
  *v21 = 0;
  v21[1] = 0xE000000000000000;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v19 + 104))(v21, enum case for SFAirDrop.ButtonConfiguration.text(_:), v117);
  v51 = v130;
  v52 = v135;
  v99 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 16);
  v99(v48, v49, v135);
  v53 = *(unsigned __int8 *)(v51 + 80);
  v54 = (v53 + 16) & ~v53;
  v100 = v53 | 7;
  v55 = swift_allocObject(&unk_100729F78, v54 + v122, v53 | 7);
  v117 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
  v117(v55 + v54, v48, v52);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)(0x7373696D736944, 0xE700000000000000, v21, 1, sub_100483BD8, v55);
  v56 = String._bridgeToObjectiveC()();
  v58 = (id)SFLocalizedStringForKey(v56, v57);

  if (v58)
  {
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v61 = v60;

  }
  else
  {
    v59 = 0;
    v61 = 0;
  }
  v62 = v126;
  v132 = v59;
  v133 = v61;
  v63 = sub_100008384(&qword_1007B54E0);
  v64 = v121;
  Optional.tryUnwrap(_:file:line:)(0xD000000000000016, 0x800000010061C140, 0xD000000000000066, v118 | 0x8000000000000000, 248, v63);
  v65 = v127;
  if (v64)
  {
    *(_QWORD *)&v66 = swift_bridgeObjectRelease(v120).n128_u64[0];
    v67 = swift_bridgeObjectRelease(v61, v66);
    (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v47, v62, v67);
    return (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v131, v135);
  }
  else
  {
    v121 = 0;
    v69 = v47;
    v118 = ~v53;
    swift_bridgeObjectRelease(v61);
    v98 = v134[0];
    v97 = v134[1];
    v70 = v102;
    SFAirDropReceive.Transfer.askRequest.getter(v71);
    v125 = (*(uint64_t (**)(char *, uint64_t))(v125 + 72))(v70, a5);
    v73 = v72;
    v74 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v70, v104);
    v75 = v106;
    v76 = UUID.init()(v74);
    v77 = v107;
    static Date.now.getter(v76);
    v78 = v105;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v105, v69, v62);
    v79 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v80 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    v81 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)(v75, v77, v98, v97, v125, v73, v120, v78, 0, v101, v79, v80, v81);
    v82 = 1800;
    if ((v128 & 1) != 0)
      v82 = 7;
    v128 = v82;
    v83 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v115, 1, 1, v83);
    v84 = v123;
    v99(v123, (uint64_t)v131, v135);
    v85 = v111;
    v86 = v112;
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v116, v129, v112);
    if (qword_1007B3D98 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v87 = static AirDropActor.shared;
    v88 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v89 = (v53 + 32) & v118;
    v90 = (v122 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
    v91 = *(unsigned __int8 *)(v85 + 80);
    v92 = (v90 + v91 + 8) & ~v91;
    v93 = swift_allocObject(&unk_100729FA0, v92 + v110, v100 | v91);
    *(_QWORD *)(v93 + 16) = v87;
    *(_QWORD *)(v93 + 24) = v88;
    v94 = v135;
    v117(v93 + v89, v84, v135);
    *(_QWORD *)(v93 + v90) = v128;
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v93 + v92, v116, v86);
    swift_retain(v87);
    v95 = sub_100252B04(v115, (uint64_t)&unk_1007C1C50, v93);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v124, v126);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v94);
    v96 = v113;
    (*(void (**)(uint64_t, char *, uint64_t))(v108 + 32))(v113, v114, v109);
    result = sub_100008384(&qword_1007B6BF0);
    *(_QWORD *)(v96 + *(int *)(result + 52)) = v95;
  }
  return result;
}

uint64_t sub_10047D8B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t, char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;

  v85 = a2;
  v81 = a1;
  v74 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v76 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v84 = v2;
  v79 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v94 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008384(&qword_1007BA288);
  __chkstk_darwin(v5);
  v71 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for SFInterventionWorkflow(0);
  v73 = *(char **)(v77 - 8);
  __chkstk_darwin(v77);
  v90 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B5280);
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  __chkstk_darwin(v8);
  v93 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v92 - 8);
  v11 = __chkstk_darwin(v92);
  v88 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v66 - v13;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v87 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v66 - v20;
  v67 = (char *)&v66 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v66 - v22;
  v86 = sub_100008384(&qword_1007C1C90);
  v24 = *(_QWORD *)(v86 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  v26 = __chkstk_darwin(v86);
  v89 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v66 - v27;
  v29 = type metadata accessor for SFInterventionResponse(0);
  v91 = v28;
  v31 = SFProgressContinuation.init(_:initialProgress:file:line:)(0xD000000000000021, 0x800000010061C250, v30, 0xD000000000000066, 0x800000010061C0D0, 203, (char *)&type metadata for () + 8, v29);
  v32 = UUID.init()(v31);
  static Date.now.getter(v32);
  v75 = v16;
  v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v33(v21, v23, v15);
  v80 = v10;
  v34 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v78 = v14;
  v34(v88, v14, v92);
  (*((void (**)(char *, _QWORD, uint64_t))v73 + 13))(v90, enum case for SFInterventionWorkflow.receive(_:), v77);
  v73 = v23;
  v77 = v15;
  v33(v87, v23, v15);
  v35 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v36 = v89;
  v37 = v86;
  v35(v89, v28, v86);
  v38 = *(unsigned __int8 *)(v24 + 80);
  v68 = ~v38;
  v39 = (v38 + 16) & ~v38;
  v70 = v25;
  v40 = v38 | 7;
  v41 = swift_allocObject(&unk_10072A0E0, v39 + v25, v38 | 7);
  v72 = v24;
  v42 = v36;
  v69 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  v69(v41 + v39, v36, v37);
  v43 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v44 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v45 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v46 = v71;
  v47 = v41;
  v48 = v74;
  SFAirDrop.PermissionRequest.InterventionAction.init(id:operation:)(v87, sub_100484170, v47, v74, v43, v44, v45);
  v65 = v45;
  v49 = v48;
  v50 = v43;
  v51 = v76;
  SFAirDrop.PermissionRequest.init(id:requestDate:interventionWorkflow:action:isAnswered:)(v67, v88, v90, v46, 0, v48, v50, v44, v65);
  v52 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v94, 1, 1, v52);
  v53 = v86;
  ((void (*)(char *, char *))v35)(v42, v91);
  v54 = v79;
  (*(void (**)(void))(v51 + 16))();
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v55 = static AirDropActor.shared;
  v56 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v57 = (v38 + 32) & v68;
  v58 = *(unsigned __int8 *)(v51 + 80);
  v59 = (v57 + v70 + v58) & ~v58;
  v60 = swift_allocObject(&unk_10072A108, v59 + v84, v40 | v58);
  *(_QWORD *)(v60 + 16) = v55;
  *(_QWORD *)(v60 + 24) = v56;
  v61 = v53;
  v69(v60 + v57, v89, v53);
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v60 + v59, v54, v49);
  swift_retain(v55);
  v62 = sub_100252B04(v94, (uint64_t)&unk_1007C1CA0, v60);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v92);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v73, v77);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v91, v61);
  v63 = v85;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v85, v93, v83);
  result = sub_100008384(&qword_1007B6BF0);
  *(_QWORD *)(v63 + *(int *)(result + 52)) = v62;
  return result;
}

uint64_t sub_10047DF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, uint64_t);
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  Swift::String v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  NSString v62;
  id v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  Swift::String v67;
  uint64_t v68;
  unint64_t v69;
  Swift::String v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  const char *object;
  __n128 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  void (*v110)(_QWORD *);
  void (*v111)(uint64_t, char *, uint64_t);
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[2];
  uint64_t v144;
  unint64_t v145;
  char *v146;

  v129 = a2;
  v108 = a1;
  v124 = a3;
  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v123 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0);
  v116 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v115 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100008384((uint64_t *)&unk_1007BB630);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v146 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v141 = *(_QWORD *)(v8 - 8);
  v142 = v8;
  v9 = __chkstk_darwin(v8);
  v132 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v140 = (char *)&v101 - v11;
  v12 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v12 - 8);
  v139 = v12;
  v13 = __chkstk_darwin(v12);
  v130 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v137 = (char *)&v101 - v15;
  v16 = type metadata accessor for SFAirDrop.ContactRequest(0);
  v117 = *(char **)(v16 - 8);
  v128 = v16;
  __chkstk_darwin(v16);
  v126 = (unint64_t)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008384(&qword_1007BA428);
  v135 = *(_QWORD *)(v18 - 8);
  v136 = v18;
  __chkstk_darwin(v18);
  v125 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SFAirDrop.ButtonConfiguration(0);
  v21 = *(_QWORD *)(v20 - 8);
  v111 = (void (*)(uint64_t, char *, uint64_t))v20;
  __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v133 = *(_QWORD *)(v24 - 8);
  v134 = v24;
  v25 = __chkstk_darwin(v24);
  v112 = (char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v131 = (char *)&v101 - v27;
  v28 = sub_100008384(&qword_1007BA430);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(_QWORD *)(v29 + 64);
  v31 = __chkstk_darwin(v28);
  v32 = (char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v101 - v33;
  SFProgressContinuation.init(_:initialProgress:file:line:)(0xD00000000000001DLL, 0x8000000100615ED0, v35, 0xD000000000000066, 0x800000010061C0D0, 136, (char *)&type metadata for () + 8, v16);
  *v23 = 0x776F4E20746F4ELL;
  v23[1] = 0xE700000000000000;
  LODWORD(v109) = enum case for SFAirDrop.ButtonConfiguration.text(_:);
  v110 = *(void (**)(_QWORD *))(v21 + 104);
  v110(v23);
  v36 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v36(v32, v34, v28);
  v37 = *(unsigned __int8 *)(v29 + 80);
  v38 = (v37 + 16) & ~v37;
  v113 = v30;
  v114 = (char *)(v38 + v30);
  v127 = v37;
  v39 = v37 | 7;
  v40 = swift_allocObject(&unk_10072A1D0, v38 + v30, v37 | 7);
  v119 = v29;
  v41 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  v41(v40 + v38, v32, v28);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)(0x776F4E20746F4ELL, 0xE700000000000000, v23, 0, sub_100484510, v40);
  *v23 = 0x6572616853;
  v23[1] = 0xE500000000000000;
  ((void (*)(_QWORD *, _QWORD, _QWORD))v110)(v23, v109, v111);
  v42 = v34;
  v43 = type metadata accessor for SFAirDrop.ContactInfo(0);
  v44 = v126;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v126, v129, v43);
  v45 = v44;
  v46 = v128;
  (*((void (**)(unint64_t, _QWORD, uint64_t))v117 + 13))(v45, enum case for SFAirDrop.ContactRequest.contact(_:), v128);
  v117 = v42;
  v109 = v36;
  v36(v32, v42, v28);
  v110 = (void (*)(_QWORD *))v39;
  v47 = swift_allocObject(&unk_10072A1F8, v114, v39);
  v48 = v47 + v38;
  v49 = v125;
  v114 = v32;
  v111 = v41;
  v41(v48, v32, v28);
  v50 = sub_100220D78(&qword_1007BA438, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactRequest);
  v51 = sub_100220D78(&qword_1007BA440, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactRequest);
  v102 = sub_100220D78(&qword_1007BA448, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactRequest);
  v103 = v51;
  v104 = v50;
  v52 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(0x6572616853, 0xE500000000000000, v23, 0, 0, v126, sub_1004234C4, v47, v46, v50, v51, v102);
  v53 = v137;
  v54 = UUID.init()(v52);
  v55 = v140;
  static Date.now.getter(v54);
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v130, v53, v139);
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v132, v55, v142);
  v144 = 0;
  v145 = 0xE000000000000000;
  v56._countAndFlagsBits = 0x6977206572616853;
  v56._object = (void *)0xEB00000000206874;
  String.append(_:)(v56);
  v57 = v105;
  v59 = SFAirDropReceive.Transfer.askRequest.getter(v58);
  SFAirDropReceive.AskRequest.senderDisplayName.getter(v59);
  v61 = v60;
  (*(void (**)(char *, uint64_t))(v106 + 8))(v57, v107);
  v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  v63 = (id)SFTruncateAirDropSenderNameForUI(v62);

  v120 = v28;
  if (v63)
  {
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

  }
  else
  {
    v64 = 0;
    v66 = 0;
  }
  v126 = ~v127;
  v143[0] = v64;
  v143[1] = v66;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v143, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v66);
  v67._countAndFlagsBits = 63;
  v67._object = (void *)0xE100000000000000;
  String.append(_:)(v67);
  v108 = v144;
  v107 = v145;
  v144 = SFAirDrop.ContactInfo.fullName.getter(v68);
  v145 = v69;
  v70._countAndFlagsBits = 10;
  v70._object = (void *)0xE100000000000000;
  String.append(_:)(v70);
  v71 = v115;
  SFAirDrop.ContactInfo.handle.getter();
  v72 = sub_100220D78(&qword_1007BA3F8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle, (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
  v73 = v118;
  v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v118, v72);
  object = (const char *)v74._object;
  String.append(_:)(v74);
  v76 = swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t, __n128))(v116 + 8))(v71, v73, v76);
  v77 = v144;
  v78 = v145;
  v79 = sub_100008384(&qword_1007BA450);
  v80 = sub_100008384(&qword_1007BA458);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(unsigned __int8 *)(v81 + 80);
  v83 = (v82 + 32) & ~v82;
  v84 = swift_allocObject(v79, v83 + *(_QWORD *)(v81 + 72), v82 | 7);
  *(_OWORD *)(v84 + 16) = xmmword_1005CD2A0;
  v85 = v84 + v83;
  sub_100008384(&qword_1007BA460);
  v86 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v135 + 16))(v85, v49, v136);
  UUID.init()(v86);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v85, enum case for SFAirDrop.AcceptAction.single<A>(_:), v80);
  v87 = v112;
  v88 = v131;
  (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v112, v131, v134);
  SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)(v130, v132, v108, v107, v77, v78, v84, v87, 0, v128, v104, v103, v102);
  v89 = type metadata accessor for TaskPriority(0);
  v90 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v123, 1, 1, v89);
  v91 = v114;
  v92 = v117;
  v93 = v120;
  v109(v114, v117, v120);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v94 = static AirDropActor.shared;
  v95 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v96 = (v127 + 32) & v126;
  v97 = swift_allocObject(&unk_10072A220, v96 + v113, v110);
  *(_QWORD *)(v97 + 16) = v94;
  *(_QWORD *)(v97 + 24) = v95;
  v111(v97 + v96, v91, v93);
  swift_retain(v94);
  v98 = sub_100252C44(v90, (uint64_t)&unk_1007C1CC8, v97);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v142);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v125, v136);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v88, v134);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v92, v93);
  v99 = v124;
  (*(void (**)(uint64_t, char *, uint64_t))(v121 + 32))(v124, v146, v122);
  result = sub_100008384(&qword_1007BA3A8);
  *(_QWORD *)(v99 + *(int *)(result + 52)) = v98;
  return result;
}

void sub_10047EAC4(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  NSString v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  void (*v64)(char *, uint64_t);
  NSString v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD, _QWORD);
  double v74;
  __n128 v75;
  uint64_t v76;
  void (*v77)(_QWORD, _QWORD, _QWORD);
  double v78;
  double v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  NSString v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD, _QWORD);
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  const char *v96;
  NSString v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  double v107;
  unint64_t v108;
  unsigned __int8 v109;
  int v110;
  uint64_t v111;
  NSString v112;
  uint64_t v113;
  id v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  NSString v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  const char *v128;
  unint64_t v129;
  char *v130;
  const char *v131;
  __n128 v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, _QWORD, uint64_t);
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  NSString v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  NSString v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t *, _QWORD, uint64_t);
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(char *, _QWORD, uint64_t);
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t, __n128);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t (*v217)(char *, uint64_t);
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  _QWORD *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  void (*v241)(char *, char *, uint64_t);
  const char *v242;
  void (*v243)(_QWORD, _QWORD, _QWORD);
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;

  v241 = a1;
  v226 = a2;
  v2 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v201 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_100008384(&qword_1007B5280);
  v224 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v239 = (char *)&v201 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v6 = *(_QWORD *)(v222 - 8);
  v7 = __chkstk_darwin(v222);
  v220 = (char *)&v201 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v237 = (char *)&v201 - v9;
  v10 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v216 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v218 = (char *)&v201 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_100008384(&qword_1007B5328);
  v235 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v245 = (char *)&v201 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for SFAirDrop.ButtonConfiguration(0);
  v229 = *(_QWORD **)(v244 - 8);
  v13 = __chkstk_darwin(v244);
  v214 = (uint64_t *)((char *)&v201 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v13);
  v215 = (uint64_t *)((char *)&v201 - v16);
  v17 = __chkstk_darwin(v15);
  v228 = (char *)&v201 - v18;
  v19 = __chkstk_darwin(v17);
  v231 = (char *)&v201 - v20;
  v21 = __chkstk_darwin(v19);
  v213 = (char *)&v201 - v22;
  v23 = __chkstk_darwin(v21);
  v212 = (char *)&v201 - v24;
  __chkstk_darwin(v23);
  v227 = (char *)&v201 - v25;
  v240 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v26 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v28 = (char *)&v201 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = type metadata accessor for SFPlatform(0);
  v29 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v252 = (char *)&v201 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = type metadata accessor for Date(0);
  v260 = *(_QWORD *)(v251 - 8);
  v31 = __chkstk_darwin(v251);
  v219 = (char *)&v201 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v201 - v33;
  v35 = type metadata accessor for UUID(0);
  v249 = *(_QWORD *)(v35 - 8);
  v250 = v35;
  v36 = __chkstk_darwin(v35);
  v230 = (char *)&v201 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v201 - v38;
  v255 = sub_100008384(&qword_1007BBD28);
  v247 = *(_QWORD *)(v255 - 8);
  v40 = __chkstk_darwin(v255);
  v233 = (char *)&v201 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = v41;
  __chkstk_darwin(v40);
  v254 = (char *)&v201 - v42;
  v234 = v10;
  v44 = SFProgressContinuation.init(_:initialProgress:file:line:)(0xD00000000000001ALL, 0x800000010061C280, v43, 0xD000000000000066, 0x800000010061C0D0, 159, (char *)&type metadata for () + 8, v10);
  v246 = v39;
  v45 = UUID.init()(v44);
  v248 = v34;
  static Date.now.getter(v45);
  v46 = String._bridgeToObjectiveC()();
  v48 = (id)SFLocalizedStringForKey(v46, v47);

  if (v48)
  {
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v242 = v51;

  }
  else
  {
    v242 = (const char *)0xE700000000000000;
    v50 = 0x706F7244726941;
  }
  v221 = v50;
  v223 = v4;
  v52 = v252;
  static SFPlatform.visionOS.getter(v49);
  v53 = static SFPlatform.isPlatform(_:)(v52);
  v217 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  v54 = v217(v52, v253);
  v238 = v6;
  if ((v53 & 1) == 0)
  {
    SFAirDropReceive.Transfer.askRequest.getter(v54);
    sub_1003B0960();
    v210 = v61;
    v63 = v62;
    v64 = *(void (**)(char *, uint64_t))(v26 + 8);
    v64(v28, v240);
    v65 = String._bridgeToObjectiveC()();
    v67 = (id)SFLocalizedStringForKey(v65, v66);

    if (v67)
    {
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v70 = v69;

    }
    else
    {
      v68 = 0;
      v70 = 0;
    }
    v71 = v260;
    v256 = v68;
    v257 = v70;
    v76 = sub_100008384(&qword_1007B54E0);
    v77 = v243;
    Optional.tryUnwrap(_:file:line:)(0xD000000000000010, 0x800000010061C2A0, 0xD000000000000066, 0x800000010061C0D0, 171, v76);
    if (v77)
    {
      *(_QWORD *)&v78 = swift_bridgeObjectRelease(v242).n128_u64[0];
      *(_QWORD *)&v79 = swift_bridgeObjectRelease(v63, v78).n128_u64[0];
      v75 = swift_bridgeObjectRelease(v70, v79);
      goto LABEL_15;
    }
    v211 = 0;
    swift_bridgeObjectRelease(v70);
    v80 = (const char *)v259;
    v243 = (void (*)(_QWORD, _QWORD, _QWORD))v258;
    v93 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v83 = swift_allocObject(v93, 112, 7);
    *(_OWORD *)(v83 + 16) = xmmword_1005CF250;
    v94 = SFAirDropReceive.Transfer.askRequest.getter(v83);
    SFAirDropReceive.AskRequest.senderDisplayName.getter(v94);
    v96 = v95;
    v64(v28, v240);
    v97 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v96);
    v98 = (id)SFTruncateAirDropSenderNameForUI(v97);

    if (v98)
    {
      v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
      v101 = v100;

      *(_QWORD *)(v83 + 56) = &type metadata for String;
      v102 = sub_100299AB0();
      *(_QWORD *)(v83 + 32) = v99;
      *(_QWORD *)(v83 + 40) = v101;
      *(_QWORD *)(v83 + 96) = &type metadata for String;
      *(_QWORD *)(v83 + 104) = v102;
      v103 = v210;
      *(_QWORD *)(v83 + 64) = v102;
      *(_QWORD *)(v83 + 72) = v103;
      *(_QWORD *)(v83 + 80) = v63;
      v92 = v243;
      goto LABEL_20;
    }
LABEL_42:
    __break(1u);
    return;
  }
  v55 = String._bridgeToObjectiveC()();
  v57 = (id)SFLocalizedStringForKey(v55, v56);

  if (v57)
  {
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

  }
  else
  {
    v58 = 0;
    v60 = 0;
  }
  v71 = v260;
  v256 = v58;
  v257 = v60;
  v72 = sub_100008384(&qword_1007B54E0);
  v73 = v243;
  Optional.tryUnwrap(_:file:line:)(0xD000000000000020, 0x800000010061C360, 0xD000000000000066, 0x800000010061C0D0, 167, v72);
  if (v73)
  {
    *(_QWORD *)&v74 = swift_bridgeObjectRelease(v242).n128_u64[0];
    v75 = swift_bridgeObjectRelease(v60, v74);
LABEL_15:
    (*(void (**)(char *, uint64_t, __n128))(v71 + 8))(v248, v251, v75);
    (*(void (**)(char *, uint64_t))(v249 + 8))(v246, v250);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v254, v255);
    return;
  }
  v211 = 0;
  swift_bridgeObjectRelease(v60);
  v81 = v258;
  v80 = (const char *)v259;
  v82 = sub_100008384((uint64_t *)&unk_1007B86C0);
  v83 = swift_allocObject(v82, 72, 7);
  *(_OWORD *)(v83 + 16) = xmmword_1005CD2A0;
  v84 = SFAirDropReceive.Transfer.askRequest.getter(v83);
  SFAirDropReceive.AskRequest.senderDisplayName.getter(v84);
  v86 = v85;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v240);
  v87 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v86);
  v88 = (id)SFTruncateAirDropSenderNameForUI(v87);

  if (!v88)
  {
    __break(1u);
    goto LABEL_42;
  }
  v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
  v91 = v90;

  *(_QWORD *)(v83 + 56) = &type metadata for String;
  *(_QWORD *)(v83 + 64) = sub_100299AB0();
  *(_QWORD *)(v83 + 32) = v89;
  *(_QWORD *)(v83 + 40) = v91;
  v92 = (void (*)(_QWORD, _QWORD, _QWORD))v81;
LABEL_20:
  v210 = static String.localizedStringWithFormat(_:_:)(v92, v80, v83);
  v209 = v104;
  v105 = v227;
  v106 = v255;
  *(_QWORD *)&v107 = swift_bridgeObjectRelease((const char *)v83).n128_u64[0];
  swift_bridgeObjectRelease(v80, v107);
  v108 = sub_1003B0844();
  v110 = v109;
  sub_10031B7F4(v108, v111, v109);
  if (v110 == 2)
  {
    v112 = String._bridgeToObjectiveC()();
    v114 = (id)SFLocalizedStringForKey(v112, v113);

    v115 = v229;
    if (v114)
    {
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
      v118 = v117;

    }
    else
    {
      v118 = 0xE800000000000000;
      v116 = 0x65756E69746E6F43;
    }
    v125 = v216;
    v126 = v212;
    *(_QWORD *)v212 = v116;
    *((_QWORD *)v126 + 1) = v118;
    v127 = v244;
    v202 = (void (*)(char *, _QWORD, uint64_t))v115[13];
    v202(v126, enum case for SFAirDrop.ButtonConfiguration.text(_:), v244);
    v212 = (char *)v115[4];
    ((void (*)(char *, char *, uint64_t))v212)(v105, v126, v127);
    v128 = (const char *)0xEA00000000007974;
    v129 = 0x656661536D6D6F43;
  }
  else
  {
    v119 = String._bridgeToObjectiveC()();
    v121 = (id)SFLocalizedStringForKey(v119, v120);

    v115 = v229;
    if (v121)
    {
      v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
      v124 = v123;

    }
    else
    {
      v124 = 0xE400000000000000;
      v122 = 2003789907;
    }
    v125 = v216;
    v130 = v213;
    *(_QWORD *)v213 = 0x6C6C69662E657965;
    *((_QWORD *)v130 + 1) = 0xE800000000000000;
    *((_QWORD *)v130 + 2) = v122;
    *((_QWORD *)v130 + 3) = v124;
    v127 = v244;
    v202 = (void (*)(char *, _QWORD, uint64_t))v115[13];
    v202(v130, enum case for SFAirDrop.ButtonConfiguration.symbolText(_:), v244);
    v212 = (char *)v115[4];
    ((void (*)(char *, char *, uint64_t))v212)(v105, v130, v127);
    v128 = (const char *)0x800000010061C2E0;
    v129 = 0xD000000000000010;
  }
  v258 = 0x2D747065636341;
  v259 = 0xE700000000000000;
  v131 = v128;
  String.append(_:)(*(Swift::String *)&v129);
  v132 = swift_bridgeObjectRelease(v128);
  v133 = v258;
  v203 = v259;
  v134 = v231;
  v206 = (void (*)(char *, char *, uint64_t, __n128))v115[2];
  v206(v231, v105, v127, v132);
  v135 = *(void (**)(char *, _QWORD, uint64_t))(v125 + 104);
  v136 = v218;
  v137 = v234;
  v135(v218, enum case for SFAirDropReceive.ItemDestination.default(_:), v234);
  v138 = v247;
  v139 = v233;
  v241 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
  v241(v233, v254, v106);
  v140 = *(unsigned __int8 *)(v138 + 80);
  v141 = (v140 + 16) & ~v140;
  v216 = v140;
  v204 = v141 + v232;
  v240 = v140 | 7;
  v142 = swift_allocObject(&unk_10072A130, v141 + v232, v140 | 7);
  v205 = v141;
  v143 = v106;
  v144 = *(void (**)(uint64_t, char *, uint64_t))(v138 + 32);
  v144(v142 + v141, v139, v143);
  v145 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v146 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v147 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v208 = v146;
  v213 = (char *)v145;
  v148 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(v133, v203, v134, 1, 0, v136, sub_1004235EC, v142, v137, v145, v146, v147);
  v149 = v252;
  static SFPlatform.visionOS.getter(v148);
  LOBYTE(v134) = static SFPlatform.isPlatform(_:)(v149);
  v217(v149, v253);
  v243 = (void (*)(_QWORD, _QWORD, _QWORD))v144;
  v207 = v147;
  if ((v134 & 1) != 0)
  {
    v150 = String._bridgeToObjectiveC()();
    v152 = (id)SFLocalizedStringForKey(v150, v151);

    v153 = v250;
    if (v152)
    {
      v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
      v156 = v155;

    }
    else
    {
      v156 = 0xE600000000000000;
      v154 = 0x6574656C6544;
    }
    v164 = v244;
    v165 = v228;
    v166 = v254;
    v167 = v215;
    v168 = v240;
    v169 = v216;
    v170 = (void (*)(uint64_t *, _QWORD, uint64_t))v202;
    *v215 = v154;
    v161 = v251;
  }
  else
  {
    v157 = String._bridgeToObjectiveC()();
    v159 = (id)SFLocalizedStringForKey(v157, v158);

    v160 = v250;
    v161 = v251;
    if (v159)
    {
      v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
      v156 = v163;

      v164 = v244;
      v165 = v228;
      v166 = v254;
      v167 = v214;
      v168 = v240;
      v169 = v216;
      v170 = (void (*)(uint64_t *, _QWORD, uint64_t))v202;
    }
    else
    {
      v156 = 0xE700000000000000;
      v164 = v244;
      v165 = v228;
      v166 = v254;
      v167 = v214;
      v168 = v240;
      v169 = v216;
      v170 = (void (*)(uint64_t *, _QWORD, uint64_t))v202;
      v162 = 0x656E696C636544;
    }
    *v167 = v162;
    v153 = v160;
  }
  v253 = ~v169;
  v167[1] = v156;
  v170(v167, enum case for SFAirDrop.ButtonConfiguration.text(_:), v164);
  ((void (*)(char *, uint64_t *, uint64_t))v212)(v165, v167, v164);
  v171 = v231;
  ((void (*)(char *, char *, uint64_t))v206)(v231, v165, v164);
  v172 = v233;
  v173 = v255;
  v241(v233, v166, v255);
  v174 = swift_allocObject(&unk_10072A158, v204, v168);
  v243(v174 + v205, v172, v173);
  v175 = v237;
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)(0x656E696C636544, 0xE700000000000000, v171, 0, sub_10048430C, v174);
  (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v230, v246, v153);
  v176 = v219;
  (*(void (**)(char *, char *, uint64_t))(v260 + 16))(v219, v248, v161);
  v177 = sub_100008384(&qword_1007B52B0);
  v178 = sub_100008384(&qword_1007B52B8);
  v179 = *(_QWORD *)(v178 - 8);
  v180 = *(unsigned __int8 *)(v179 + 80);
  v181 = (v180 + 32) & ~v180;
  v182 = swift_allocObject(v177, v181 + *(_QWORD *)(v179 + 72), v180 | 7);
  *(_OWORD *)(v182 + 16) = xmmword_1005CD2A0;
  sub_100008384(&qword_1007BA2B0);
  v183 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v235 + 16))(v182 + v181, v245, v236);
  UUID.init()(v183);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v179 + 104))(v182 + v181, enum case for SFAirDrop.AcceptAction.single<A>(_:), v178);
  v184 = v220;
  v185 = v222;
  (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v220, v175, v222);
  v186 = v254;
  v187 = v255;
  SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)(v230, v176, v221, v242, v210, v209, v182, v184, 0, v234, v213, v208, v207);
  v188 = type metadata accessor for TaskPriority(0);
  v189 = (uint64_t)v223;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v188 - 8) + 56))(v223, 1, 1, v188);
  v190 = v172;
  v191 = v172;
  v192 = v186;
  v241(v191, v186, v187);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v193 = static AirDropActor.shared;
  v194 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
  v195 = (v216 + 32) & v253;
  v196 = swift_allocObject(&unk_10072A180, v195 + v232, v240);
  *(_QWORD *)(v196 + 16) = v193;
  *(_QWORD *)(v196 + 24) = v194;
  v243(v196 + v195, v190, v187);
  swift_retain(v193);
  v197 = sub_100252B04(v189, (uint64_t)&unk_1007C1CB8, v196);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v237, v185);
  v198 = (void (*)(char *, uint64_t))v229[1];
  v199 = v244;
  v198(v228, v244);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v245, v236);
  v198(v227, v199);
  (*(void (**)(char *, uint64_t))(v260 + 8))(v248, v251);
  (*(void (**)(char *, uint64_t))(v249 + 8))(v246, v250);
  (*(void (**)(char *, uint64_t))(v247 + 8))(v192, v187);
  v200 = v226;
  (*(void (**)(uint64_t, char *, uint64_t))(v224 + 32))(v226, v239, v225);
  *(_QWORD *)(v200 + *(int *)(sub_100008384(&qword_1007B6BF0) + 52)) = v197;
}

uint64_t sub_10047FDD4(uint64_t a1, int a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a6;
  v31 = a5;
  v33 = a2;
  v34 = a1;
  v8 = type metadata accessor for SFAirDrop.TransferType(0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFPlatform(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SFPlatform.visionOS.getter(v17);
  v20 = static SFPlatform.isPlatform(_:)(v19);
  v21 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  v22 = v21(v19, v15);
  if ((v20 & 1) != 0)
  {
    v23 = 0;
  }
  else
  {
    if ((v33 & 1) == 0)
      a4 |= a3 ^ 1;
    static SFPlatform.macOS.getter(v22);
    v24 = static SFPlatform.isPlatform(_:)(v19);
    v25 = v21(v19, v15);
    if ((v24 & 1) != 0)
    {
      v25 = (*(uint64_t (**)(uint64_t))(v32 + 32))(v31);
      a4 = v25;
    }
    v26 = SFAirDropReceive.Transfer.askRequest.getter(v25);
    SFAirDropReceive.AskRequest.type.getter(v26);
    v27 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v28 = SFAirDrop.TransferType.isLinks.getter(v27);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
    v23 = a4 & (v28 ^ 1);
  }
  return v23 & 1;
}

uint64_t sub_10047FFA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1C30);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1C30);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100480030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  v6 = sub_100008384(&qword_1007C1CF8);
  v5[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384(&qword_1007BBD28);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[9] = v9;
  v5[10] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007B68A0);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v5[12] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[13] = v12;
  v5[14] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008384(&qword_1007BBD50);
  v5[15] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[16] = v14;
  v5[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008384(&qword_1007B6C20);
  v5[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008384(&qword_1007B5B20);
  v5[19] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[20] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v5[21] = v18;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[22] = swift_task_alloc(v19);
  v5[23] = swift_task_alloc(v19);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v20 = static AirDropActor.shared;
  v5[24] = static AirDropActor.shared;
  return swift_task_switch(sub_1004801D0, v20, 0);
}

uint64_t sub_1004801D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[18];
  sub_100484628(v0[4], v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = v0[7];
    sub_10000D0F0(v0[18], &qword_1007B6C20);
    SFProgressContinuation.task.getter(v4);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
    v0[25] = v5;
    *v5 = v0;
    v5[1] = sub_1004803FC;
    return SFProgressTask.finalValue.getter(v0[3], v0[15]);
  }
  else
  {
    v8 = v0[22];
    v7 = v0[23];
    v9 = v0[20];
    v10 = v0[21];
    v11 = v0[19];
    v12 = v0[11];
    v13 = v0[8];
    v25 = v0[10];
    v26 = v0[9];
    v14 = v0[7];
    v24 = v0[5];
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v15(v7, v0[18], v11);
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v7, v11);
    v17 = *(unsigned __int8 *)(v9 + 80);
    v18 = (v17 + 16) & ~v17;
    v19 = swift_allocObject(&unk_10072A2C0, v18 + v10, v17 | 7);
    v0[27] = v19;
    v15(v19 + v18, v8, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v25, v24, v14);
    v20 = *(unsigned __int8 *)(v13 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = swift_allocObject(&unk_10072A2E8, v21 + v26, v20 | 7);
    v0[28] = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v22 + v21, v25, v14);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to concurrentRace<A>(priority:operation:against:)[1]);
    v0[29] = v23;
    *v23 = v0;
    v23[1] = sub_10048047C;
    return concurrentRace<A>(priority:operation:against:)(v0[14], v0[11], &unk_1007C1D08, v19, &unk_1007C1D18, v22, v0[12]);
  }
}

uint64_t sub_1004803FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v3);
  v4 = v2[24];
  (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[15]);
  if (v0)
    v5 = sub_100480670;
  else
    v5 = sub_1004805DC;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10048047C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[29];
  (*v1)[30] = v0;
  swift_task_dealloc(v3);
  v5 = v2[27];
  v4 = v2[28];
  v6 = v2[24];
  sub_10000D0F0(v2[11], &qword_1007B68A0);
  swift_release(v4);
  swift_release(v5);
  if (v0)
    v7 = sub_100480814;
  else
    v7 = sub_100480518;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100480518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004805DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100480670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 48);
  swift_errorRetain(v1);
  v3 = sub_100008384(&qword_1007B5A60);
  v4 = type metadata accessor for SFAirDropReceive.Failure(0);
  v5 = swift_dynamicCast(v2, v0 + 16, v3, v4, 6);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v7 = *(_QWORD *)(v0 + 48);
  if ((v5 & 1) != 0)
  {
    v6(v7, 0, 1, v4);
    v8 = sub_10000D0F0(v7, &qword_1007C1CF8);
    swift_willThrow(v8);
  }
  else
  {
    v6(v7, 1, 1, v4);
    sub_10000D0F0(v7, &qword_1007C1CF8);
    v9 = type metadata accessor for CancellationError(0);
    v10 = sub_100220D78(&qword_1007B6C38, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v9, v10, 0, 0);
    v11 = CancellationError.init()();
    swift_willThrow(v11);
    swift_errorRelease(v1);
  }
  v12 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100480814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 48);
  swift_errorRetain(v1);
  v3 = sub_100008384(&qword_1007B5A60);
  v4 = type metadata accessor for SFAirDropReceive.Failure(0);
  v5 = swift_dynamicCast(v2, v0 + 16, v3, v4, 6);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v7 = *(_QWORD *)(v0 + 48);
  if ((v5 & 1) != 0)
  {
    v6(v7, 0, 1, v4);
    v8 = sub_10000D0F0(v7, &qword_1007C1CF8);
    swift_willThrow(v8);
  }
  else
  {
    v6(v7, 1, 1, v4);
    sub_10000D0F0(v7, &qword_1007C1CF8);
    v9 = type metadata accessor for CancellationError(0);
    v10 = sub_100220D78(&qword_1007B6C38, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v9, v10, 0, 0);
    v11 = CancellationError.init()();
    swift_willThrow(v11);
    swift_errorRelease(v1);
  }
  v12 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004809C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[3] = a2;
  v3 = sub_100008384(&qword_1007B6BD8);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return swift_task_switch(sub_100480A60, v5, 0);
}

uint64_t sub_100480A60()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100008384(&qword_1007B5B20);
  SFProgressContinuation.task.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_100480AE0;
  return SFProgressTask.finalValue.getter(v0 + 16, *(_QWORD *)(v0 + 32));
}

uint64_t sub_100480AE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 64));
  v4 = v2[6];
  v3 = v2[7];
  v7 = v2 + 4;
  v5 = v2[4];
  v6 = v7[1];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v8 = sub_100480C38;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v8 = sub_100480B80;
  }
  return swift_task_switch(v8, v3, 0);
}

uint64_t sub_100480B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(const char **)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for SFAirDropReceive.Failure(0);
  v3 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v2, v3, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for SFAirDropReceive.Failure.askDismissed(_:), v2);
  swift_willThrow(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100480C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for SFAirDropReceive.Failure(0);
  v3 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v2, v3, 0, 0);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for SFAirDropReceive.Failure.askDismissed(_:), v2);
  swift_willThrow(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100480CE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_100008384(&qword_1007BBD50);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return swift_task_switch(sub_100480D80, v5, 0);
}

uint64_t sub_100480D80()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100008384(&qword_1007BBD28);
  SFProgressContinuation.task.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[8] = v2;
  *v2 = v0;
  v2[1] = sub_100319224;
  return SFProgressTask.finalValue.getter(v0[2], v0[4]);
}

uint64_t sub_100480DF4(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = type metadata accessor for SFAirDropReceive.Failure(0);
  v6 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  v7 = swift_allocError(v5, v6, 0, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v8, *a2, v5);
  v9 = sub_100008384(a3);
  SFProgressContinuation.fail(with:)(v7, v9);
  return swift_errorRelease(v7);
}

uint64_t sub_100480E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a1;
  v4[3] = a4;
  v5 = sub_100008384(&qword_1007BBD50);
  v4[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v7 = static AirDropActor.shared;
  v4[7] = static AirDropActor.shared;
  return swift_task_switch(sub_100480D80, v7, 0);
}

uint64_t sub_100480F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = type metadata accessor for SFInterventionResponse(0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007C1CA8);
  v5[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[9] = v9;
  v5[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v10 = static AirDropActor.shared;
  v5[11] = static AirDropActor.shared;
  return swift_task_switch(sub_100480FF8, v10, 0);
}

uint64_t sub_100480FF8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100008384(&qword_1007C1C90);
  SFProgressContinuation.task.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_100481068;
  return SFProgressTask.finalValue.getter(v0[7], v0[8]);
}

uint64_t sub_100481068()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_100481250;
  else
    v7 = sub_1004810F4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 88), 0);
}

uint64_t sub_1004810F4()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[6] + 88))(v0[7], v0[5]);
  if (v1 == enum case for SFInterventionResponse.accept(_:))
  {
    v2 = v0[10];
    v3 = v0[7];
    v4 = v0[4];
    v5 = v0[2];
    v6 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, v4, v6);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  if (v1 == enum case for SFInterventionResponse.reject(_:))
  {
    v8 = type metadata accessor for SFAirDropReceive.Failure(0);
    v9 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for SFAirDropReceive.Failure.declined(_:), v8);
    swift_willThrow(v11);
    v12 = v0[7];
    swift_task_dealloc(v0[10]);
    swift_task_dealloc(v12);
    v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  return _diagnoseUnexpectedEnumCase<A>(type:)(v0[5], v0[5]);
}

uint64_t sub_100481250()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100481290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a4;
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B4160 != -1)
    swift_once(&qword_1007B4160, sub_10047FFA0);
  v15 = type metadata accessor for Logger(0);
  sub_100221DF8(v15, (uint64_t)qword_1007C1C30);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v38 = a2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v36 = v21;
    v42 = v21;
    v37 = a5;
    *(_DWORD *)v20 = 136315138;
    v35 = v20 + 4;
    SFAirDropReceive.Transfer.id.getter(v21);
    v22 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
    v24 = v8;
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v24);
    v41 = sub_100228BD8(v23, (unint64_t)v26, &v42);
    a5 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35);
    v27 = swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v27);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Transfer %s was cancelled.", v20, 0xCu);
    v28 = v36;
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  v29 = type metadata accessor for SFAirDropReceive.Failure(0);
  v30 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  v31 = swift_allocError(v29, v30, 0, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v32, enum case for SFAirDropReceive.Failure.receiverCancelled(_:), v29);
  v33 = type metadata accessor for SFProgressTask(0, v40, a5);
  SFProgressTask.cancel(_:)(v31, v33);
  return swift_errorRelease(v31);
}

uint64_t sub_1004815B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B4160 != -1)
    swift_once(&qword_1007B4160, sub_10047FFA0);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100221DF8(v4, (uint64_t)qword_1007C1C30);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "openRequest was dismissed.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v0);
  v9 = sub_100008384(&qword_1007BBD28);
  SFProgressContinuation.finish(with:)(v3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100481718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  v7 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v6[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[7] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[8] = v9;
  v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008384(&qword_1007BBD28);
  v6[10] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[11] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v6[12] = v12;
  v6[13] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008384(&qword_1007B68A0);
  v6[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v14 = static AirDropActor.shared;
  v6[15] = static AirDropActor.shared;
  return swift_task_switch(sub_100481808, v14, 0);
}

uint64_t sub_100481808()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[11];
  v4 = v0[12];
  v5 = v0[9];
  v6 = v0[10];
  v7 = v0[7];
  v8 = v0[6];
  v20 = v0[5];
  v21 = v0[8];
  v9 = v0[3];
  v22 = v0[4];
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v1, 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v9, v6);
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_100729FC8, v12 + v4, v11 | 7);
  v0[16] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v20, v8);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_100729FF0, v15 + v21, v14 | 7);
  v0[17] = v16;
  *(_QWORD *)(v16 + 16) = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v16 + v15, v5, v8);
  v17 = (_QWORD *)swift_task_alloc(async function pointer to concurrentRace<A>(priority:operation:against:)[1]);
  v0[18] = v17;
  v18 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  *v17 = v0;
  v17[1] = sub_100481990;
  return concurrentRace<A>(priority:operation:against:)(v0[2], v0[14], &unk_1007C1C60, v13, &unk_1007C1C70, v16, v18);
}

uint64_t sub_100481990()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*v1 + 136);
  v2 = *(_QWORD *)(*v1 + 144);
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *(_QWORD *)(*v1 + 112);
  v6 = *v1;
  *(_QWORD *)(v6 + 152) = v0;
  swift_task_dealloc(v2);
  sub_10000D0F0(v5, &qword_1007B68A0);
  swift_release(v3);
  swift_release(v4);
  if (v0)
    return swift_task_switch(sub_100481A5C, *(_QWORD *)(v6 + 120), 0);
  v8 = *(_QWORD *)(v6 + 104);
  v9 = *(_QWORD *)(v6 + 72);
  swift_task_dealloc(*(_QWORD *)(v6 + 112));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100481A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100481AA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_100008384(&qword_1007BBD50);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v5 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return swift_task_switch(sub_100354A74, v5, 0);
}

uint64_t sub_100481B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v3[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContinuousClock(0);
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v10 = static AirDropActor.shared;
  v3[15] = static AirDropActor.shared;
  return swift_task_switch(sub_100481C24, v10, 0);
}

uint64_t sub_100481C24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v2 = *(_QWORD *)(v1 + 32);
  v3 = 1000000000000000000 * v2;
  v4 = ((v2 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v2 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()(a1);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v5 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 128) = v5;
  *v5 = v1;
  v5[1] = sub_100481CD0;
  return v7(v3, v4, 0, 0, 1);
}

uint64_t sub_100481CD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v5 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 112);
  v6 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_100481D5C;
  else
    v7 = sub_100481DA8;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 120), 0);
}

uint64_t sub_100481D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100481DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (qword_1007B4160 != -1)
    swift_once(&qword_1007B4160, sub_10047FFA0);
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for Logger(0);
  sub_100221DF8(v5, (uint64_t)qword_1007C1C30);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 88);
  if (v9)
  {
    v28 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 64);
    v26 = *(_QWORD *)(v0 + 56);
    v27 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 48);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v30 = v29;
    *(_DWORD *)v13 = 136315138;
    SFAirDropReceive.Transfer.id.getter(v29);
    v14 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v12);
    *(_QWORD *)(v0 + 16) = sub_100228BD8(v15, (unint64_t)v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4);
    v18 = swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t, __n128))(v27 + 8))(v10, v28, v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, ".waitingForOpenResponse request timeout for transfer %s", v13, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 64);
  v22 = *(_QWORD *)(v0 + 24);
  v23 = enum case for SFAirDropReceive.ItemDestination.noItem(_:);
  v24 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100482030(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22[2];

  v8 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100244418(a2, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v8);
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = (v15 + 64) & ~v15;
  v17 = swift_allocObject(&unk_10072A0B8, v16 + v10, v15 | 7);
  sub_10026EE60(v22, v17 + 16);
  *(_QWORD *)(v17 + 56) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + v16, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_bridgeObjectRetain(a3);
  v18 = static Task<>.noThrow(priority:operation:)(v13, &unk_1007C1C88, v17, (char *)&type metadata for () + 8);
  swift_release(v18);
  swift_release(v17);
  sub_10000D0F0((uint64_t)v13, &qword_1007B68A0);
  v19 = sub_100008384(&qword_1007BBD28);
  return SFProgressContinuation.finish(with:)(a1, v19);
}

uint64_t sub_1004821DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v7 = static AirDropActor.shared;
  v4[9] = static AirDropActor.shared;
  return swift_task_switch(sub_100482274, v7, 0);
}

uint64_t sub_100482274()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  _QWORD *v6;
  int *v8;

  v1 = (_QWORD *)v0[3];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10023A834(v1, v2);
  SFAirDropReceive.Transfer.receiveID.getter(v4);
  v5 = *(int **)(v3 + 16);
  v8 = (int *)((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_100482314;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v8)(v0[4], v0[8], v0[5], v2, v3);
}

uint64_t sub_100482314(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  v6 = *(_QWORD *)(*v2 + 56);
  v5 = *(_QWORD *)(*v2 + 64);
  v7 = *(_QWORD *)(*v2 + 48);
  *(_BYTE *)(v3 + 100) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v8 = sub_1004824D0;
  else
    v8 = sub_1004823AC;
  return swift_task_switch(v8, *(_QWORD *)(v3 + 72), 0);
}

uint64_t sub_1004823AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;

  if (qword_1007B4160 != -1)
    swift_once(&qword_1007B4160, sub_10047FFA0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C1C30);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 100);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 96) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Move to App finished with success: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004824D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1007B4160 != -1)
    swift_once(&qword_1007B4160, sub_10047FFA0);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C1C30);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Move to App threw error %@", v8, 0xCu);
    v11 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004826A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v2 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  __chkstk_darwin(v2);
  v37 = v3;
  v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v43 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v41 - 8);
  v6 = *(_QWORD *)(v36 + 64);
  v7 = __chkstk_darwin(v41);
  v8 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v42 = (char *)&v36 - v9;
  v10 = type metadata accessor for SFAirDrop.TransferType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = SFAirDropReceive.Transfer.askRequest.getter(v16);
  SFAirDropReceive.AskRequest.type.getter(v19);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  LOBYTE(v14) = SFAirDrop.TransferType.isFiles.getter(v20);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v22 = v42;
    SFAirDropReceive.Transfer.receiveID.getter(result);
    v23 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v43, 1, 1, v23);
    v24 = v38;
    v25 = v39;
    v26 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, a1, v40);
    v27 = v36;
    v28 = v41;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v8, v22, v41);
    v29 = *(unsigned __int8 *)(v25 + 80);
    v30 = (v29 + 16) & ~v29;
    v31 = *(unsigned __int8 *)(v27 + 80);
    v32 = (v37 + v31 + v30) & ~v31;
    v33 = swift_allocObject(&unk_100729F50, v32 + v6, v29 | v31 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33 + v30, v24, v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v33 + v32, v8, v28);
    v34 = (uint64_t)v43;
    v35 = static Task<>.noThrow(priority:operation:)(v43, &unk_1007BA098, v33, (char *)&type metadata for () + 8);
    swift_release(v35);
    swift_release(v33);
    sub_10000D0F0(v34, &qword_1007B68A0);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v42, v28);
  }
  return result;
}

uint64_t sub_100482998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

_QWORD *sub_100482A4C(uint64_t a1, const char *a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  NSString v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  NSString v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v121;
  void (**v122)(char *, uint64_t, uint64_t);
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, char *, uint64_t);
  uint64_t v133;
  uint64_t v134;
  NSString v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  NSString v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  const char *v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, char *, const char *);
  uint64_t v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  void (*v172)(char *, const char *);
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  unint64_t *v183;
  uint64_t v184;
  int v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (**v193)(char *, uint64_t, uint64_t);
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  const char *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205[2];
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;

  v185 = a6;
  v190 = a5;
  v184 = a4;
  v201 = a2;
  v176 = a1;
  v9 = (const char *)sub_100008384(&qword_1007B5328);
  v10 = (char *)*((_QWORD *)v9 - 1);
  v11 = __chkstk_darwin(v9);
  v182 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v181 = (char *)&v173 - v13;
  v179 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v178 = *(_QWORD *)(v179 - 8);
  v14 = __chkstk_darwin(v179);
  v175 = v15;
  v177 = (char *)&v173 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = a7;
  v193 = *(void (***)(char *, uint64_t, uint64_t))(a7 - 8);
  __chkstk_darwin(v14);
  v194 = (char *)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100008384(&qword_1007BBD28);
  v188 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v187 = v17;
  v198 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v195 = *(_QWORD *)(v204 - 8);
  v18 = __chkstk_darwin(v204);
  v20 = (char *)&v173 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v200 = (char **)((char *)&v173 - v21);
  v203 = type metadata accessor for SFAirDrop.ButtonConfiguration(0);
  v196 = *(_QWORD *)(v203 - 8);
  v22 = __chkstk_darwin(v203);
  v183 = (unint64_t *)((char *)&v173 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v202 = (uint64_t *)((char *)&v173 - v24);
  v189 = sub_100008384(&qword_1007B52B8);
  v197 = *(char **)(v189 - 8);
  v25 = __chkstk_darwin(v189);
  v173 = (char *)&v173 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v174 = (char *)&v173 - v28;
  v29 = __chkstk_darwin(v27);
  v180 = (char *)&v173 - v30;
  v31 = __chkstk_darwin(v29);
  v186 = (char *)&v173 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v173 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v173 - v36;
  v38 = type metadata accessor for SFPlatform(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v173 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SFPlatform.iOS.getter(v40);
  v43 = static SFPlatform.isPlatform(_:)(v42);
  v44 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
  v45 = v44(v42, v38);
  if ((v43 & 1) != 0
    || (static SFPlatform.watchOS.getter(v45),
        v46 = static SFPlatform.isPlatform(_:)(v42),
        v47 = v44(v42, v38),
        (v46 & 1) != 0))
  {
    if ((a3 & 1) != 0)
    {
      v48 = _swiftEmptyArrayStorage;
      v49 = v197;
      v50 = v201;
      v51 = v192;
      v52 = v191;
LABEL_19:
      v91 = v194;
      v193[2](v194, v52, v51);
      v92 = sub_100008384(&qword_1007C0438);
      if ((swift_dynamicCast(v205, v91, v51, v92, 6) & 1) != 0)
      {
        sub_10026EE60(v205, (uint64_t)&v207);
        v93 = v208;
        v94 = v209;
        sub_10023A834(&v207, v208);
        if (((*(uint64_t (**)(const char *, uint64_t, uint64_t))(v94 + 8))(v50, v93, v94) & 1) != 0)
        {
          v95 = 0xD000000000000013;
          if ((v185 & 1) != 0)
            v95 = 0x662E7265646C6F66;
          v96 = 0x800000010061C210;
          if ((v185 & 1) != 0)
            v96 = 0xEB000000006C6C69;
          v97 = v183;
          *v183 = v95;
          v97[1] = v96;
          v98 = v196;
          v99 = v203;
          (*(void (**)(unint64_t *, _QWORD, uint64_t))(v196 + 104))(v97, enum case for SFAirDrop.ButtonConfiguration.symbol(_:), v203);
          v100 = sub_100008384(&qword_1007BA2B0);
          v197 = &v186[*(int *)(v100 + 48)];
          (*(void (**)(uint64_t *, unint64_t *, uint64_t))(v98 + 16))(v202, v97, v99);
          v101 = v200;
          *v200 = 0xD000000000000034;
          v101[1] = 0x80000001006133A0;
          (*(void (**)(void))(v195 + 104))();
          sub_100244418((uint64_t)&v207, (uint64_t)v205);
          v102 = v178;
          v103 = v177;
          v104 = v179;
          (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v177, v176, v179);
          v105 = v188;
          (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v198, v190, v199);
          v106 = *(unsigned __int8 *)(v102 + 80);
          v107 = (v106 + 64) & ~v106;
          v108 = *(unsigned __int8 *)(v105 + 80);
          v109 = (v175 + v108 + v107) & ~v108;
          v110 = swift_allocObject(&unk_10072A090, v109 + v187, v106 | v108 | 7);
          sub_10026EE60(v205, v110 + 16);
          *(_QWORD *)(v110 + 56) = v50;
          (*(void (**)(uint64_t, char *, uint64_t))(v102 + 32))(v110 + v107, v103, v104);
          v111 = v189;
          (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v110 + v109, v198, v199);
          v112 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          v113 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          v114 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          swift_bridgeObjectRetain(v201);
          v115 = v186;
          v116 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(1701998413, 0xE400000000000000, v202, 0, 0, v200, sub_100483FEC, v110, v204, v112, v113, v114);
          UUID.init()(v116);
          (*((void (**)(char *, _QWORD, uint64_t))v49 + 13))(v115, enum case for SFAirDrop.AcceptAction.single<A>(_:), v111);
          v117 = v180;
          (*((void (**)(char *, char *, uint64_t))v49 + 2))(v180, v115, v111);
          if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
            v48 = (_QWORD *)sub_1002280D4(0, v48[2] + 1, 1, (unint64_t)v48);
          v119 = v48[2];
          v118 = v48[3];
          if (v119 >= v118 >> 1)
            v48 = (_QWORD *)sub_1002280D4(v118 > 1, v119 + 1, 1, (unint64_t)v48);
          v48[2] = v119 + 1;
          (*((void (**)(unint64_t, char *, uint64_t))v49 + 4))((unint64_t)v48+ ((v49[80] + 32) & ~(unint64_t)v49[80])+ *((_QWORD *)v49 + 9) * v119, v117, v111);
          (*((void (**)(char *, uint64_t))v49 + 1))(v186, v111);
          (*(void (**)(unint64_t *, uint64_t))(v196 + 8))(v183, v203);
        }
        sub_10022E75C(&v207);
      }
      else
      {
        v206 = 0;
        memset(v205, 0, sizeof(v205));
        sub_10000D0F0((uint64_t)v205, &qword_1007C0440);
      }
      return v48;
    }
    if ((v185 & 1) != 0)
    {
      v53 = String._bridgeToObjectiveC()();
      v55 = (id)SFLocalizedStringForKey(v53, v54);

      if (!v55)
      {
        v56 = 0xE700000000000000;
        v57 = 0x70704120746547;
LABEL_16:
        v182 = &v37[*(int *)(sub_100008384(&qword_1007BA2B0) + 48)];
        v75 = v202;
        v74 = v203;
        *v202 = v57;
        v75[1] = v56;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v196 + 104))(v75, enum case for SFAirDrop.ButtonConfiguration.text(_:), v74);
        v76 = v200;
        v77 = v204;
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v195 + 16))(v200, v184, v204);
        v78 = v188;
        v80 = v198;
        v79 = v199;
        (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v198, v190, v199);
        v81 = *(unsigned __int8 *)(v78 + 80);
        v82 = (v81 + 16) & ~v81;
        v83 = swift_allocObject(&unk_10072A068, v82 + v187, v81 | 7);
        (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v83 + v82, v80, v79);
        v84 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
        v85 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
        v86 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
        v87 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(2003134806, 0xE400000000000000, v75, 0, 1, v76, sub_1004235EC, v83, v77, v84, v85, v86);
        UUID.init()(v87);
        v49 = v197;
        v88 = v189;
        (*((void (**)(char *, _QWORD, uint64_t))v197 + 13))(v37, enum case for SFAirDrop.AcceptAction.single<A>(_:), v189);
        (*((void (**)(char *, char *, uint64_t))v49 + 2))(v35, v37, v88);
        v48 = (_QWORD *)sub_1002280D4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
        v90 = v48[2];
        v89 = v48[3];
        if (v90 >= v89 >> 1)
          v48 = (_QWORD *)sub_1002280D4(v89 > 1, v90 + 1, 1, (unint64_t)v48);
        v50 = v201;
        v51 = v192;
        v52 = v191;
        v48[2] = v90 + 1;
        (*((void (**)(unint64_t, char *, uint64_t))v49 + 4))((unint64_t)v48+ ((v49[80] + 32) & ~(unint64_t)v49[80])+ *((_QWORD *)v49 + 9) * v90, v35, v88);
        (*((void (**)(char *, uint64_t))v49 + 1))(v37, v88);
        goto LABEL_19;
      }
    }
    else
    {
      v71 = String._bridgeToObjectiveC()();
      v55 = (id)SFLocalizedStringForKey(v71, v72);

      if (!v55)
      {
        v56 = 0xE400000000000000;
        v57 = 2003134806;
        goto LABEL_16;
      }
    }
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v56 = v73;

    goto LABEL_16;
  }
  static SFPlatform.macOS.getter(v47);
  v58 = static SFPlatform.isPlatform(_:)(v42);
  v44(v42, v38);
  if ((v58 & 1) == 0)
    return _swiftEmptyArrayStorage;
  v201 = v9;
  v59 = v195;
  v60 = *(void (**)(char *, uint64_t, uint64_t))(v195 + 16);
  v61 = v184;
  v62 = v204;
  v60(v20, v184, v204);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v59 + 88))(v20, v62);
  v64 = enum case for SFAirDropReceive.ItemDestination.default(_:);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v62);
  if (v63 != v64)
    return _swiftEmptyArrayStorage;
  v65 = String._bridgeToObjectiveC()();
  v67 = (id)SFLocalizedStringForKey(v65, v66);

  v194 = v10;
  if (v67)
  {
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v70 = v69;

  }
  else
  {
    v70 = 0xEE007265646E6946;
    v68 = 0x206E6920776F6853;
  }
  v121 = v202;
  *v202 = v68;
  v121[1] = v70;
  v122 = *(void (***)(char *, uint64_t, uint64_t))(v196 + 104);
  LODWORD(v196) = enum case for SFAirDrop.ButtonConfiguration.text(_:);
  v193 = v122;
  ((void (*)(uint64_t *))v122)(v121);
  v123 = v200;
  v124 = v204;
  v60((char *)v200, v61, v204);
  v125 = v188;
  v127 = v198;
  v126 = v199;
  v186 = *(char **)(v188 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v186)(v198, v190, v199);
  v128 = *(unsigned __int8 *)(v125 + 80);
  v129 = (v128 + 16) & ~v128;
  v130 = v128 | 7;
  v187 += v129;
  v131 = swift_allocObject(&unk_10072A018, v187, v128 | 7);
  v132 = *(void (**)(uint64_t, char *, uint64_t))(v125 + 32);
  v132(v131 + v129, v127, v126);
  v133 = sub_100220D78(&qword_1007BBD30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v134 = sub_100220D78(&qword_1007BBD38, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v188 = sub_100220D78(&qword_1007B6C30, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  v191 = v134;
  v192 = v133;
  SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(0x69466E49776F6853, 0xEC0000007265646ELL, v121, 0, 0, v123, sub_1004235EC, v131, v124, v133, v134, v188);
  v135 = String._bridgeToObjectiveC()();
  v137 = (id)SFLocalizedStringForKey(v135, v136);

  if (v137)
  {
    v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    v140 = v139;

  }
  else
  {
    v140 = 0xE400000000000000;
    v138 = 1852141647;
  }
  v142 = v202;
  v141 = v203;
  *v202 = v138;
  v142[1] = v140;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v193)(v142, v196, v141);
  v143 = v200;
  *v200 = 0xD000000000000024;
  v143[1] = 0x800000010061C1A0;
  v144 = v204;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v195 + 104))(v143, enum case for SFAirDropReceive.ItemDestination.customApp(_:), v204);
  v146 = v198;
  v145 = v199;
  ((void (*)(char *, uint64_t, uint64_t))v186)(v198, v190, v199);
  v147 = swift_allocObject(&unk_10072A040, v187, v130);
  v132(v147 + v129, v146, v145);
  SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)(1852141647, 0xE400000000000000, v142, 0, 0, v143, sub_1004235EC, v147, v144, v192, v191, v188);
  v148 = String._bridgeToObjectiveC()();
  v150 = (id)SFLocalizedStringForKey(v148, v149);

  if (v150)
  {
    v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
    v153 = v152;

  }
  else
  {
    v153 = 0xE700000000000000;
    v151 = 0x736E6F6974704FLL;
  }
  v154 = v189;
  v155 = v197;
  v156 = v201;
  sub_100008384(&qword_1007C1C78);
  v157 = v174;
  v159 = v202;
  v158 = v203;
  *v202 = v151;
  v159[1] = v153;
  ((void (*)(uint64_t *, _QWORD, uint64_t))v193)(v159, v196, v158);
  v160 = sub_100008384(&qword_1007B5320);
  v161 = v194;
  v162 = *((_QWORD *)v194 + 9);
  v163 = v194[80];
  v164 = (v163 + 32) & ~v163;
  v165 = swift_allocObject(v160, v164 + 2 * v162, v163 | 7);
  *(_OWORD *)(v165 + 16) = xmmword_1005CF250;
  v166 = v165 + v164;
  v167 = (void (*)(uint64_t, char *, const char *))*((_QWORD *)v161 + 2);
  v167(v166, v182, v156);
  v167(v166 + v162, v181, v156);
  v168 = SFAirDrop.AcceptAction.Composite.init(buttonConfiguration:actions:)(v159, v165, v204, v192, v191, v188);
  UUID.init()(v168);
  (*((void (**)(char *, _QWORD, uint64_t))v155 + 13))(v157, enum case for SFAirDrop.AcceptAction.composite<A>(_:), v154);
  v169 = v173;
  (*((void (**)(char *, char *, uint64_t))v155 + 2))(v173, v157, v154);
  v48 = (_QWORD *)sub_1002280D4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v171 = v48[2];
  v170 = v48[3];
  if (v171 >= v170 >> 1)
    v48 = (_QWORD *)sub_1002280D4(v170 > 1, v171 + 1, 1, (unint64_t)v48);
  v48[2] = v171 + 1;
  (*((void (**)(unint64_t, char *, uint64_t))v155 + 4))((unint64_t)v48+ ((v155[80] + 32) & ~(unint64_t)v155[80])+ *((_QWORD *)v155 + 9) * v171, v169, v154);
  (*((void (**)(char *, uint64_t))v155 + 1))(v174, v154);
  v172 = (void (*)(char *, const char *))*((_QWORD *)v194 + 1);
  v172(v182, v156);
  v172(v181, v156);
  return v48;
}

uint64_t sub_100483BCC()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100483BD8()
{
  sub_100008384(&qword_1007BBD28);
  return sub_1004815B4();
}

uint64_t sub_100483C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100008384(&qword_1007BBD28);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100483CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100008384(&qword_1007BBD28) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDropReceive.Transfer(0) - 8) + 80);
  v8 = v6 + v7 + 8;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = *(_QWORD *)(v1 + v6);
  v13 = v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_1007C1C4C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10000D098;
  return sub_100481718(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_100483DA0()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100483DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007BBD28) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1007C1C5C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000D098;
  return sub_100481AA4(a1, v5);
}

uint64_t sub_100483E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100483E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDropReceive.Transfer(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1007C1C6C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_100481B3C(a1, v5, v6);
}

uint64_t sub_100483F00()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100483F0C()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100483F18()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100483F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  v1 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100008384(&qword_1007BBD28);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  sub_10022E75C((_QWORD *)(v0 + 16));
  v12 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100483FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  sub_100008384(&qword_1007BBD28);
  return sub_100482030(a1, v1 + 16, *(const char **)(v1 + 56), v1 + v4);
}

uint64_t sub_100484060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_10022E75C((_QWORD *)(v0 + 16));
  v7 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004840DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDropReceive.Transfer(0) - 8) + 80);
  v5 = v1 + 16;
  v6 = *(_QWORD *)(v1 + 56);
  v7 = v1 + ((v4 + 64) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1007C1C84);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D12C;
  return sub_1004821DC(a1, v5, v6, v7);
}

uint64_t sub_100484164()
{
  return sub_10031B818(&qword_1007C1C90);
}

uint64_t sub_100484170(uint64_t a1)
{
  return sub_1004235F8(a1, &qword_1007C1C90);
}

uint64_t sub_10048417C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100008384(&qword_1007C1C90);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10048423C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_100008384(&qword_1007C1C90) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDropReceive.ItemDestination(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc(dword_1007C1C9C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10000D098;
  return sub_100480F34(a1, v9, v10, v11, v12);
}

uint64_t sub_1004842F4()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100484300()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_10048430C()
{
  return sub_1004845D0(&qword_1007BBD28, (unsigned int *)&enum case for SFAirDropReceive.Failure.declined(_:));
}

uint64_t sub_100484320()
{
  return sub_10031B3F0(&qword_1007BBD28);
}

uint64_t sub_10048432C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007BBD28) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1007C1CB4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_100480E9C(a1, v5, v6, v7);
}

uint64_t sub_1004843B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for SFAirDropReceive.Transfer(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = type metadata accessor for SFProgressTask(0, v1, v2);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10) & ~v10;
  v12 = v11 + *(_QWORD *)(v9 + 64);
  v13 = v5 | v10 | 7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);
  return swift_deallocObject(v0, v12, v13);
}

uint64_t sub_100484474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(type metadata accessor for SFAirDropReceive.Transfer(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFProgressTask(0, v2, v3) - 8) + 80);
  return sub_100481290((uint64_t)v0 + v5, (uint64_t)v0 + ((v6 + v7) & ~v7), v1, v2, v3);
}

uint64_t sub_100484504()
{
  return sub_10031B818(&qword_1007BA430);
}

uint64_t sub_100484510()
{
  return sub_1004845D0(&qword_1007BA430, (unsigned int *)&enum case for SFAirDropReceive.Failure.receiverCancelled(_:));
}

uint64_t sub_100484524()
{
  return sub_10031B818(&qword_1007BA430);
}

uint64_t sub_100484530()
{
  return sub_10031B3F0(&qword_1007BA430);
}

uint64_t sub_10048453C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007BA430) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1007C1CC4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_100420FA8(a1, v5, v6, v7);
}

uint64_t sub_1004845C4()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_1004845D0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(a1) - 8) + 80);
  return sub_100480DF4(v2 + ((v5 + 16) & ~v5), a2, a1);
}

uint64_t sub_10048461C()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100484628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B6C20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100484670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(sub_100008384(&qword_1007B6C20) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v13 = *(_QWORD *)(v1 + 64);
  v4 = sub_100008384(&qword_1007BBD28);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v8 = sub_100008384(&qword_1007B5B20);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  v10 = (v3 + v13 + v6) & ~v6;
  v11 = v10 + v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v4);
  return swift_deallocObject(v0, v11, v2 | v6 | 7);
}

uint64_t sub_100484770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B6C20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004847B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_100008384(&qword_1007B6C20) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007BBD28) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc(dword_1007C1CEC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10000D098;
  return sub_100480030(a1, v9, v10, v11, v12);
}

uint64_t sub_100484874()
{
  return sub_10031B818(&qword_1007B5B20);
}

uint64_t sub_100484880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007B5B20) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1007C1D04);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000D098;
  return sub_1004809C8(a1, v5);
}

uint64_t sub_1004848F4()
{
  return sub_10031B818(&qword_1007BBD28);
}

uint64_t sub_100484900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008384(&qword_1007BBD28) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1007C1D14);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000D098;
  return sub_100480CE8(a1, v5);
}

uint64_t sub_100484974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = v0;
  if (qword_1007B4168 != -1)
    swift_once(&qword_1007B4168, sub_100484D1C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C1D20);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting to listen over Bonjour", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  NWListener.stateUpdateHandler.setter(sub_1004853E4, 0);
  v7 = swift_allocObject(&unk_10072A310, 24, 7);
  swift_weakInit(v7 + 16, v1);
  swift_retain(v7);
  NWListener.newConnectionHandler.setter(sub_100486590, v7);
  swift_release(v7);
  NWListener.start(queue:)(*(_QWORD *)(v1 + 16));
  if (qword_1007B41A8 != -1)
    swift_once(&qword_1007B41A8, sub_1004A2368);
  sub_1004A2094();
  return sub_100485ADC();
}

void sub_100484AD8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19[24];

  v1 = v0;
  if (qword_1007B4168 != -1)
    swift_once(&qword_1007B4168, sub_100484D1C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C1D20);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping temp pairing server", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = v1[9];
  if (v7)
  {
    swift_getObjectType(v1[9]);
    swift_unknownObjectRetain(v7);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v7);
    v8 = v1[9];
    v1[9] = 0;
    swift_unknownObjectRelease(v8);
  }
  NWListener.cancel()();
  *(_QWORD *)&v9 = swift_beginAccess(v1 + 8, v19, 0, 0).n128_u64[0];
  v10 = v1[8];
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v15 = v1[8];
    else
      v15 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)v1[8], v9);
    v11 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (!v11)
      goto LABEL_19;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)&v12 = swift_bridgeObjectRetain((const char *)v1[8], v9).n128_u64[0];
    if (!v11)
      goto LABEL_19;
  }
  if (v11 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v11; ++i)
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
    }
    else
    {
      v14 = *(_QWORD *)(v10 + 8 * i + 32);
      swift_retain(v14);
    }
    NWConnection.cancel()();
    swift_release(v14);
  }
LABEL_19:
  swift_bridgeObjectRelease((const char *)v10, v12);
  if (qword_1007B41A8 != -1)
    swift_once(&qword_1007B41A8, sub_1004A2368);
  sub_1004A22C4();
  v16 = (void (*)(uint64_t))v1[3];
  if (v16)
  {
    v17 = v1[4];
    v18 = swift_retain(v17);
    v16(v18);
    sub_1002845F4((uint64_t)v16, v17);
  }
}

uint64_t sub_100484D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1D20);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1D20);
  if (qword_1007B3E38 != -1)
    swift_once(&qword_1007B3E38, sub_1002E9DE4);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100484DAC()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  sub_100221E9C(v0, qword_1007C1D38);
  *(_QWORD *)sub_100221DF8(v0, (uint64_t)qword_1007C1D38) = 60;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

_QWORD *sub_100484E0C(const char *a1, const char *a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  Class isa;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  id v61[7];

  v59 = a1;
  v4 = v3;
  v7 = *v3;
  v8 = type metadata accessor for NWTXTRecord(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384((uint64_t *)&unk_1007C1E50);
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NWEndpoint.Port(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[3] = 0;
  v3[4] = 0;
  v3[8] = _swiftEmptyArrayStorage;
  v3[9] = 0;
  v3[7] = objc_msgSend(objc_allocWithZone((Class)RPClient), "init");
  v3[2] = a3;
  v17 = (void *)objc_opt_self(SDNearbyAgent);
  v18 = a3;
  v19 = objc_msgSend(v17, "sharedNearbyAgent");
  v20 = objc_msgSend(v19, "temporarySelfIdentity");

  if (!v20)
  {
    swift_bridgeObjectRelease(a2);
    v41 = type metadata accessor for SFError(0);
    v42 = sub_100220D78(&qword_1007B64E8, (uint64_t (*)(uint64_t))&type metadata accessor for SFError, (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v41, v42, 0, 0);
    *v43 = 0xD000000000000015;
    v43[1] = 0x800000010061C420;
    v43[2] = 0xD00000000000005ALL;
    v43[3] = 0x800000010061C440;
    v43[4] = 42;
    v44 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, enum case for SFError.missingValue(_:), v41);
    swift_willThrow(v44);
LABEL_8:

    v49 = 0;
    goto LABEL_11;
  }
  v21 = objc_msgSend(v20, "edPKData");
  if (!v21)
  {
    swift_bridgeObjectRelease(a2);
    v45 = type metadata accessor for SFError(0);
    v46 = sub_100220D78(&qword_1007B64E8, (uint64_t (*)(uint64_t))&type metadata accessor for SFError, (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v45, v46, 0, 0);
    *v47 = 0x617461444B506465;
    v47[1] = 0xE800000000000000;
    v47[2] = 0xD00000000000005ALL;
    v47[3] = 0x800000010061C440;
    v47[4] = 46;
    v48 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, enum case for SFError.missingValue(_:), v45);
    swift_willThrow(v48);

    goto LABEL_8;
  }
  v22 = v21;
  v57 = v18;
  v55 = v7;
  v23 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v25 = v24;

  v4[6] = v20;
  v26 = v20;
  v58 = v23;
  v56 = v25;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v61[0] = 0;
  v28 = objc_msgSend(v26, "authTagForData:type:error:", isa, 1, v61);

  v29 = v61[0];
  if (v28)
  {
    v30 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

    v61[1] = (id)v59;
    v61[2] = (id)a2;
    v59 = a2;
    v33 = (unint64_t)v56;
    v61[3] = v58;
    v61[4] = v56;
    v61[5] = v30;
    v61[6] = v32;
    sub_10022E4A8((uint64_t)v58, (unint64_t)v56);
    sub_10022E4A8((uint64_t)v30, (unint64_t)v32);
    v34 = sub_10050380C();
    static NWEndpoint.Port.any.getter();
    v35 = type metadata accessor for NWListener(0);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v36 = v60;
    v37 = NWListener.init(using:on:)(v34, v16);
    if (!v36)
    {
      v4[5] = v37;
      v60 = v37;
      sub_1003CDB84();
      NWListener.Service.init(name:type:domain:txtRecord:)(0, 0, 0xD000000000000011, 0x8000000100617080, 0, 0, v10);
      v53 = type metadata accessor for NWListener.Service(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v13, 0, 1, v53);
      NWListener.service.setter(v13);

      v54 = (uint64_t)v58;
      sub_100225AB4((uint64_t)v58, v33);
      sub_100225AB4((uint64_t)v30, (unint64_t)v32);
      swift_bridgeObjectRelease(v59);
      sub_100225AB4(v54, v33);
      sub_100225AB4((uint64_t)v30, (unint64_t)v32);
      return v4;
    }

    v38 = (uint64_t)v58;
    sub_100225AB4((uint64_t)v58, v33);
    sub_100225AB4((uint64_t)v30, (unint64_t)v32);
    swift_bridgeObjectRelease(v59);
    sub_100225AB4(v38, v33);
    v39 = (uint64_t)v30;
    v40 = (unint64_t)v32;
  }
  else
  {
    v50 = v29;
    swift_bridgeObjectRelease(a2);
    _convertNSErrorToError(_:)(v50);

    swift_willThrow(v51);
    v39 = (uint64_t)v58;
    v40 = (unint64_t)v56;
  }
  sub_100225AB4(v39, v40);
  v49 = 1;
  v7 = v55;
LABEL_11:

  sub_1002845F4(v4[3], v4[4]);
  if (v49)

  swift_bridgeObjectRelease((const char *)v4[8]);
  swift_unknownObjectRelease(v4[9]);
  swift_deallocPartialClassInstance(v4, v7, 80, 7);
  return v4;
}

void sub_1004853E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  __n128 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for NWListener.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v20 - v7;
  if (qword_1007B4168 != -1)
    swift_once(&qword_1007B4168, sub_100484D1C);
  v9 = type metadata accessor for Logger(0);
  sub_100221DF8(v9, (uint64_t)qword_1007C1D20);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11 = v10(v8, a1, v2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v23 = v15;
    *(_DWORD *)v14 = 136315138;
    v21 = v14 + 4;
    v10(v6, (uint64_t)v8, v2);
    v16 = String.init<A>(describing:)(v6, v2);
    v18 = (const char *)v17;
    v22 = sub_100228BD8(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v21);
    v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v8, v2, v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Bonjour listener state changed: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }

}

uint64_t sub_100485604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];

  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v8 = result;
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
    v10 = (_QWORD *)swift_allocObject(&unk_10072A388, 48, 7);
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v8;
    v10[5] = a1;
    swift_retain(a1);
    v11 = sub_100252EC0((uint64_t)v6, (uint64_t)&unk_1007C1E40, (uint64_t)v10);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_1004856F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100485710, 0, 0);
}

uint64_t sub_100485710()
{
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_100485774, static AirDropActor.shared, 0);
}

uint64_t sub_100485774()
{
  uint64_t v0;

  sub_1004857A4(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004857A4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];

  v2 = v1;
  v4 = type metadata accessor for SDTempPairingConnection.Role(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1007B4168 != -1)
    swift_once(&qword_1007B4168, sub_100484D1C);
  v7 = type metadata accessor for Logger(0);
  sub_100221DF8(v7, (uint64_t)qword_1007C1D20);
  v8 = swift_retain_n(a1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v35 = v4;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v36 = a1;
    v37[0] = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = type metadata accessor for NWConnection(0);
    swift_retain();
    v14 = String.init<A>(describing:)(&v36, v13);
    v16 = (const char *)v15;
    v36 = sub_100228BD8(v14, v15, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v11 + 4);
    swift_release_n(a1, 2);
    v17 = v16;
    v4 = v35;
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received incoming connection: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  *v6 = a1;
  swift_storeEnumTagMultiPayload(v6, v4, 1);
  v18 = (void *)v2[6];
  v19 = (void *)v2[2];
  v20 = type metadata accessor for SDTempPairingConnection(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  swift_retain();
  v21 = v18;
  v22 = v19;
  v23 = sub_1003D2B40((uint64_t)v6, v21, v22);

  v24 = swift_allocObject(&unk_10072A310, 24, 7);
  swift_weakInit(v24 + 16, v2);
  v25 = swift_allocObject(&unk_10072A3B0, 32, 7);
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 24) = v23;
  v26 = v23[3];
  v27 = v23[4];
  v23[3] = sub_100486710;
  v23[4] = v25;
  swift_retain();
  sub_1002845F4(v26, v27);
  swift_beginAccess(v2 + 8, v37, 33, 0);
  v28 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
  v29 = v2[8] & 0xFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)(v29 + 0x10);
  v30 = *(_QWORD *)(v29 + 24);
  if (v31 >= v30 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
  v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v23);
  specialized Array._endMutation()(v32);
  swift_endAccess(v37);
  return swift_release(v23);
}

uint64_t sub_100485ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(_QWORD *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v47 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  v3 = __chkstk_darwin(v2);
  v46 = (uint64_t *)((char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v45 = (uint64_t)&v39 - v5;
  v6 = type metadata accessor for DispatchTime(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v39 - v10;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v15 - 8);
  v40 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v0 + 72);
  if (v22)
  {
    swift_getObjectType(v22);
    swift_unknownObjectRetain(v22);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v22);
    v23 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    swift_unknownObjectRelease(v23);
  }
  sub_100221EDC(0, (unint64_t *)&qword_1007B7390, OS_dispatch_source_ptr);
  static OS_dispatch_source.TimerFlags.strict.getter();
  v24 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v21, *(_QWORD *)(v1 + 16));
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v25 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v24;
  swift_unknownObjectRetain(v24);
  swift_unknownObjectRelease(v25);
  ObjectType = swift_getObjectType(v24);
  v27 = swift_allocObject(&unk_10072A310, 24, 7);
  swift_weakInit(v27 + 16, v1);
  aBlock[4] = sub_100486598;
  v50 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10072A328;
  v28 = _Block_copy(aBlock);
  swift_retain(v27);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_10048671C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v17, v14, v28, ObjectType);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v42);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
  v29 = v50;
  swift_release(v27);
  v30 = swift_release(v29);
  static DispatchTime.now()(v30);
  if (qword_1007B4170 != -1)
    swift_once(&qword_1007B4170, sub_100484DAC);
  v31 = v48;
  v32 = sub_100221DF8(v48, (uint64_t)qword_1007C1D38);
  + infix(_:_:)(v9, v32);
  v33 = v44;
  v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v9, v44);
  v35 = v45;
  sub_10027D6F8(v45);
  v36 = v46;
  sub_10027D73C(v46);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v11, v35, v36, ObjectType);
  v37 = *(void (**)(_QWORD *, uint64_t))(v47 + 8);
  v37(v36, v31);
  v37((_QWORD *)v35, v31);
  v34(v11, v33);
  OS_dispatch_source.activate()();
  return swift_unknownObjectRelease(v24);
}

uint64_t sub_100485EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[24];

  v2 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v8 = qword_1007B3D98;
    swift_retain(v6);
    if (v8 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v9 = static AirDropActor.shared;
    v10 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
    v11 = (_QWORD *)swift_allocObject(&unk_10072A360, 40, 7);
    v11[2] = v9;
    v11[3] = v10;
    v11[4] = v6;
    swift_retain(v9);
    v12 = sub_100252EC0((uint64_t)v4, (uint64_t)&unk_1007C1E30, (uint64_t)v11);
    swift_release(v12);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100486024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_10048608C, static AirDropActor.shared, 0);
}

uint64_t sub_10048608C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1007B4168 != -1)
    swift_once(&qword_1007B4168, sub_100484D1C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C1D20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timer fired, stopping server", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  sub_100484AD8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100486170(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_1004861E0(a1, a3);
    return swift_release(v7);
  }
  return result;
}

__n128 sub_1004861E0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  void *v17;
  const char **v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];

  v3 = v2;
  if (qword_1007B4168 != -1)
    swift_once(&qword_1007B4168, sub_100484D1C);
  v6 = type metadata accessor for Logger(0);
  sub_100221DF8(v6, (uint64_t)qword_1007C1D20);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v26 = v3;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v29[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v27 = (uint64_t)v7;
    v12 = sub_100221EDC(0, (unint64_t *)&unk_1007BBA50, RPIdentity_ptr);
    v13 = v7;
    v14 = String.init<A>(describing:)(&v27, v12);
    v16 = (const char *)v15;
    v27 = sub_100228BD8(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 4);

    v3 = v26;
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Adding remote identity: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v17 = *(void **)(v3 + 56);
  objc_msgSend(v17, "addOrUpdateIdentity:completion:", v7, 0, v26);
  NWConnection.cancel()();
  v18 = (const char **)(v3 + 64);
  swift_beginAccess(v3 + 64, v29, 33, 0);
  swift_retain();
  v19 = sub_1003519E4((const char **)(v3 + 64), a2);
  swift_release(a2);
  v20 = *(_QWORD *)(v3 + 64);
  if (!((unint64_t)v20 >> 62))
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21 >= v19)
      goto LABEL_8;
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v20 < 0)
    v23 = v20;
  else
    v23 = v20 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v20);
  v21 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease((const char *)v20);
  if (v21 < v19)
    goto LABEL_16;
LABEL_8:
  sub_1004754DC(v19, v21);
  swift_endAccess(v29);
  v20 = (uint64_t)*v18;
  if (!((unint64_t)*v18 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      return result;
    goto LABEL_10;
  }
LABEL_17:
  if (v20 < 0)
    v24 = v20;
  else
    v24 = v20 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v20);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  result = swift_bridgeObjectRelease((const char *)v20);
  if (!v25)
LABEL_10:
    objc_msgSend(v17, "invalidate");
  return result;
}

uint64_t sub_1004864E0()
{
  uint64_t v0;

  sub_1002845F4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_bridgeObjectRelease(*(const char **)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t sub_10048652C()
{
  uint64_t v0;

  sub_1004864E0();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for SDTempPairingServer()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary19SDTempPairingServer);
}

uint64_t sub_10048656C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100486590(uint64_t a1)
{
  uint64_t v1;

  return sub_100485604(a1, v1);
}

uint64_t sub_100486598()
{
  uint64_t v0;

  return sub_100485EC8(v0);
}

uint64_t sub_1004865A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004865B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1004865B8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004865E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C1E24);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_100486024(a1, v4, v5, v6);
}

uint64_t sub_100486650()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100486684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1007C1E3C);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10000D098;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_100485710, 0, 0);
}

uint64_t sub_1004866E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100486710(void *a1)
{
  uint64_t v1;

  return sub_100486170(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10048671C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_100274284();
  v2 = sub_100008384((uint64_t *)&unk_1007B6410);
  v3 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_1004867B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1E60);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1E60);
  if (qword_1007B3E50 != -1)
    swift_once(&qword_1007B3E50, sub_1002E9E34);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100486848(uint64_t a1)
{
  return sub_100486880(a1, (uint64_t (*)(void))sub_1004899F8, "Setting advertise rate on %s to %s", (SEL *)&selRef_setAdvertiseRate_);
}

id sub_100486864(uint64_t a1)
{
  return sub_100486880(a1, (uint64_t (*)(void))sub_100489AE0, "Setting use case on %s to %s", (SEL *)&selRef_setUseCase_);
}

id sub_100486880(uint64_t a1, uint64_t (*a2)(void), const char *a3, SEL *a4)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  SEL *v22;
  unint64_t v23;
  const char *v24;
  double v25;
  unsigned int v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;

  v8 = a2();
  v9 = String.init(cString:)(v8);
  v11 = v10;
  if (qword_1007B4178 != -1)
    swift_once(&qword_1007B4178, sub_1004867B8);
  v12 = type metadata accessor for Logger(0);
  sub_100221DF8(v12, (uint64_t)qword_1007C1E60);
  v13 = v4;
  swift_bridgeObjectRetain(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v30 = v18;
    *(_DWORD *)v17 = 136315394;
    v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
    v20 = *(_QWORD *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 16];
    v28 = *(_QWORD *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
    v29[0] = v19;
    v29[1] = v20;
    sub_100244404(v28, v19);
    v21 = String.init<A>(describing:)(&v28, &type metadata for SDBLEAdvertiser.Configuration);
    v27 = a1;
    v22 = a4;
    v24 = (const char *)v23;
    v28 = sub_100228BD8(v21, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v17 + 4);

    *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain(v11, v25);
    v28 = sub_100228BD8(v9, (unint64_t)v11, &v30);
    a4 = v22;
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v17 + 14);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a3, (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }
  return objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser], *a4, a1);
}

id sub_100486AE4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  uint64_t *v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  __CFString *v20;
  id v21;
  objc_super v23;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue] = a1;
  v11 = (uint64_t *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
  *v11 = a2;
  v11[1] = a3;
  v11[2] = a4;
  v12 = objc_allocWithZone((Class)CBAdvertiser);
  v13 = v5;
  v14 = a1;
  sub_100244404(a2, a3);
  v15 = objc_msgSend(v12, "init");
  *(_QWORD *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser] = v15;

  v23.receiver = v13;
  v23.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v23, "init");
  v17 = (void *)objc_opt_self(NSNotificationCenter);
  v18 = v16;
  v19 = objc_msgSend(v17, "defaultCenter");
  v20 = off_1007B39B0;
  v21 = v18;
  objc_msgSend(v19, "addObserver:selector:name:object:", v21, "handleRapportIdentitiesChanged", v20, 0);
  sub_100225AA0(a2, a3);

  return v21;
}

void sub_100486C60(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  id v14;
  char v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  id v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **aBlock;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  _QWORD *v54;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue];
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(char **)(v8 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v14 = v11;
  v15 = _dispatchPreconditionTest(_:)(v10);
  v16 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v16(v10, v7);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v46 = a1;
  v47 = a2;
  v17 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser], "setDispatchQueue:", v14);
  v45 = v17;
  v18 = *(void **)&v4[v17];
  v19 = swift_allocObject(&unk_10072A468, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v4);
  v53 = sub_100489938;
  v54 = (_QWORD *)v19;
  aBlock = _NSConcreteStackBlock;
  v3 = 1107296256;
  v50 = 1107296256;
  v51 = sub_10025BBB4;
  v52 = &unk_10072A4A8;
  v20 = _Block_copy(&aBlock);
  v21 = v54;
  v22 = v18;
  swift_release(v21);
  objc_msgSend(v22, "setAdvertisingAddressChangedHandler:", v20);
  _Block_release(v20);

  *v10 = v14;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v13)(v10, v12, v7);
  v23 = v14;
  v24 = _dispatchPreconditionTest(_:)(v10);
  v16(v10, v7);
  if ((v24 & 1) == 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_once(&qword_1007B4178, sub_1004867B8);
    goto LABEL_6;
  }
  v13 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
  v25 = *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
  if (v25 >> 60 != 15)
  {
    v26 = *((_QWORD *)v13 + 2);
    v27 = *(_QWORD *)v13;
    sub_10022E4A8(*(_QWORD *)v13, *(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8]);
    LOBYTE(aBlock) = BYTE1(v26) & 1;
    sub_100488C40(v27, v25, v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(v26) & 1) << 8));
    sub_100225AA0(v27, v25);
  }
  sub_1004876D0();
  if (qword_1007B4178 != -1)
    goto LABEL_18;
LABEL_6:
  v28 = type metadata accessor for Logger(0);
  sub_100221DF8(v28, (uint64_t)qword_1007C1E60);
  v29 = v4;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = (void **)swift_slowAlloc(32, -1);
    *(_DWORD *)v32 = 136315138;
    v34 = *((_QWORD *)v13 + 1) >> 60;
    aBlock = v33;
    if (v34 <= 0xE)
      v35 = 0x706F7244726941;
    else
      v35 = 0x6E4979627261654ELL;
    if (v34 <= 0xE)
      v36 = (const char *)0xE700000000000000;
    else
      v36 = (const char *)0xEC00000032566F66;
    v48 = sub_100228BD8(v35, (unint64_t)v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &aBlock, v32 + 4);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Starting to advertise for %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  v38 = v46;
  v37 = v47;
  v39 = *(void **)&v4[v45];
  v40 = swift_allocObject(&unk_10072A468, 24, 7);
  swift_unknownObjectWeakInit(v40 + 16, v29);
  v41 = (_QWORD *)swift_allocObject(&unk_10072A4E0, 40, 7);
  v41[2] = v40;
  v41[3] = v38;
  v41[4] = v37;
  v53 = sub_10048995C;
  v54 = v41;
  aBlock = _NSConcreteStackBlock;
  v50 = v3;
  v51 = sub_1002D6B08;
  v52 = &unk_10072A4F8;
  v42 = _Block_copy(&aBlock);
  v43 = v54;
  v44 = v39;
  sub_1002845E4(v38, v37);
  swift_release(v43);
  objc_msgSend(v44, "activateWithCompletion:", v42);
  _Block_release(v42);

}

void sub_10048710C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1007B4178 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B4178, sub_1004867B8);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100221DF8(v8, (uint64_t)qword_1007C1E60);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Bluetooth address changed, updating temp auth tag if necessary", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_1004876D0();
}

void sub_10048727C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v42, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    if (a1)
    {
      swift_errorRetain(a1);
      if (qword_1007B4178 != -1)
        swift_once(&qword_1007B4178, sub_1004867B8);
      v9 = type metadata accessor for Logger(0);
      sub_100221DF8(v9, (uint64_t)qword_1007C1E60);
      v10 = v8;
      swift_errorRetain(a1);
      v11 = (char *)v10;
      v12 = swift_errorRetain(a1);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v15 = swift_slowAlloc(22, -1);
        v16 = swift_slowAlloc(64, -1);
        v41 = v16;
        *(_DWORD *)v15 = 136315394;
        v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
        v18 = *(_QWORD *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 16];
        v38 = *(_QWORD *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
        v39 = v17;
        v40 = v18;
        sub_100244404(v38, v17);
        v19 = String.init<A>(describing:)(&v38, &type metadata for SDBLEAdvertiser.Configuration);
        v21 = (const char *)v20;
        v38 = sub_100228BD8(v19, v20, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 4);

        swift_bridgeObjectRelease(v21);
        *(_WORD *)(v15 + 12) = 2080;
        v38 = a1;
        swift_errorRetain(a1);
        v22 = sub_100008384(&qword_1007B5A60);
        v23 = String.init<A>(describing:)(&v38, v22);
        v25 = (const char *)v24;
        v38 = sub_100228BD8(v23, v24, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 14);
        swift_bridgeObjectRelease(v25);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to start advertising for %s: %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

        v26 = swift_errorRelease(a1);
        if (!a3)
          goto LABEL_17;
      }
      else
      {
        swift_errorRelease(a1);

        swift_errorRelease(a1);
        swift_errorRelease(a1);

        if (!a3)
          goto LABEL_17;
      }
    }
    else
    {
      if (qword_1007B4178 != -1)
        swift_once(&qword_1007B4178, sub_1004867B8);
      v27 = type metadata accessor for Logger(0);
      sub_100221DF8(v27, (uint64_t)qword_1007C1E60);
      v28 = v8;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        *(_DWORD *)v31 = 136315138;
        v41 = v32;
        v33 = *(_QWORD *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
        v34 = *(_QWORD *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 16];
        v38 = *(_QWORD *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
        v39 = v33;
        v40 = v34;
        sub_100244404(v38, v33);
        v35 = String.init<A>(describing:)(&v38, &type metadata for SDBLEAdvertiser.Configuration);
        v37 = (const char *)v36;
        v38 = sub_100228BD8(v35, v36, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 4);

        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Started advertising for %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

      }
      sub_1004876D0();
      if (!a3)
        goto LABEL_17;
    }
    a3(v26);
LABEL_17:

  }
}

void sub_1004876D0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  void **p_vtable;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  NSData v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  v7 = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1007B4178, sub_1004867B8);
    goto LABEL_5;
  }
  v8 = objc_msgSend((id)objc_opt_self(SDNearbyAgent), "sharedNearbyAgent");
  v9 = objc_msgSend(v8, "hasAdHocPairings");

  if (!v9)
    return;
  v10 = sub_100488F78();
  if (v11 >> 60 == 15)
    return;
  v7 = (uint64_t)v10;
  v1 = v11;
  if (qword_1007B4178 != -1)
    goto LABEL_20;
LABEL_5:
  v12 = type metadata accessor for Logger(0);
  sub_100221DF8(v12, (uint64_t)qword_1007C1E60);
  v13 = v0;
  sub_100244404(v7, v1);
  v14 = v13;
  v15 = sub_100244404(v7, v1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  p_vtable = &OBJC_METACLASS____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger.vtable;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v41 = v20;
    *(_DWORD *)v19 = 136315394;
    v21 = *(_QWORD *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8] >> 60;
    v43 = v20;
    if (v21 <= 0xE)
      v22 = 0x706F7244726941;
    else
      v22 = 0x6E4979627261654ELL;
    if (v21 <= 0xE)
      v23 = (const char *)0xE700000000000000;
    else
      v23 = (const char *)0xEC00000032566F66;
    v42 = sub_100228BD8(v22, (unint64_t)v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 2080;
    sub_10038D14C(v7, v1);
    v25 = v24;
    v42 = (uint64_t)v24;
    v26 = sub_100008384((uint64_t *)&unk_1007BD6A0);
    v27 = sub_10026E2FC((unint64_t *)&qword_1007B6D40, (uint64_t *)&unk_1007BD6A0, (uint64_t)&protocol conformance descriptor for [A]);
    v28 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v26, v27);
    v30 = v29;
    swift_bridgeObjectRelease(v25);
    v31 = v28;
    p_vtable = (void **)(&OBJC_METACLASS____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger + 24);
    v42 = sub_100228BD8(v31, (unint64_t)v30, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 14);
    swift_bridgeObjectRelease(v30);
    sub_100225AA0(v7, v1);
    sub_100225AA0(v7, v1);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setting temp auth tag on %s to %s", (uint8_t *)v19, 0x16u);
    v32 = v41;
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {

    sub_100225AA0(v7, v1);
    sub_100225AA0(v7, v1);
  }

  v33 = *(_QWORD *)((char *)p_vtable[464] + (_QWORD)v14 + 8);
  v34 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
  v35 = *(id *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser];
  v36 = v35;
  if (v33 >> 60 == 15)
  {
    objc_msgSend(v35, "setNearbyInfoV2Flags:", objc_msgSend(v35, "nearbyInfoV2Flags") | 0x10);

    v37 = *(id *)&v14[v34];
    v38.super.isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v37, "setNearbyInfoV2TempAuthTagData:", v38.super.isa);
    sub_100225AA0(v7, v1);

  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setAirdropTempAuthTagData:", isa);

    v38.super.isa = (Class)*(id *)&v14[v34];
    -[objc_class setAirdropFlags:](v38.super.isa, "setAirdropFlags:", -[objc_class airdropFlags](v38.super.isa, "airdropFlags") | 0x40);
    sub_100225AA0(v7, v1);
  }

}

uint64_t sub_100487B8C(void (*a1)(uint64_t), uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v40 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v39 - 8);
  v12 = __chkstk_darwin(v39);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v38 - v15;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (_QWORD *)((char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v38[1] = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    v23 = swift_allocObject(&unk_10072A468, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16, v3);
    v24 = (_QWORD *)swift_allocObject(&unk_10072A558, 40, 7);
    v24[2] = v23;
    v24[3] = a1;
    v24[4] = a2;
    v25 = sub_1002845E4((uint64_t)a1, a2);
    if (a3 <= 0.0)
    {
      v37 = swift_retain(v23);
      sub_100487F2C(v37, a1);
      swift_release(v24);
      v36 = v23;
    }
    else
    {
      static DispatchTime.now()(v25);
      + infix(_:_:)(v14, a3);
      v38[0] = *(_QWORD *)(v11 + 8);
      v26 = v39;
      ((void (*)(char *, uint64_t))v38[0])(v14, v39);
      v27 = swift_allocObject(&unk_10072A580, 32, 7);
      *(_QWORD *)(v27 + 16) = sub_1004899C8;
      *(_QWORD *)(v27 + 24) = v24;
      aBlock[4] = sub_100287F38;
      v48 = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10025BBB4;
      aBlock[3] = &unk_10072A598;
      v28 = _Block_copy(aBlock);
      v29 = swift_retain(v24);
      v30 = v40;
      static DispatchQoS.unspecified.getter(v29);
      v46 = _swiftEmptyArrayStorage;
      v31 = sub_100274284();
      v32 = sub_100008384((uint64_t *)&unk_1007B6410);
      v33 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
      v34 = v43;
      v35 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v32, v33, v45, v31);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v30, v34, v28);
      _Block_release(v28);
      swift_release(v24);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v35);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
      ((void (*)(char *, uint64_t))v38[0])(v16, v26);
      v36 = v48;
    }
    return swift_release(v36);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100487F2C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    if (qword_1007B4178 != -1)
      swift_once(&qword_1007B4178, sub_1004867B8);
    v7 = type metadata accessor for Logger(0);
    sub_100221DF8(v7, (uint64_t)qword_1007C1E60);
    v8 = v6;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      *(_DWORD *)v11 = 136315138;
      v13 = *(_QWORD *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8] >> 60;
      v24 = v12;
      if (v13 <= 0xE)
        v14 = 0x706F7244726941;
      else
        v14 = 0x6E4979627261654ELL;
      if (v13 <= 0xE)
        v15 = 0xE700000000000000;
      else
        v15 = 0xEC00000032566F66;
      v23 = sub_100228BD8(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4);

      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidating %s advertiser", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
    v16 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
    objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser], "invalidate");
    v17 = objc_msgSend(objc_allocWithZone((Class)CBAdvertiser), "init");
    v18 = *(void **)&v8[v16];
    *(_QWORD *)&v8[v16] = v17;

    v19 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer;
    v20 = *(_QWORD *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer];
    if (v20)
    {
      swift_getObjectType(*(_QWORD *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer]);
      swift_unknownObjectRetain(v20);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v20);
      v21 = *(_QWORD *)&v8[v19];
    }
    else
    {
      v21 = 0;
    }
    *(_QWORD *)&v8[v19] = 0;
    v22 = swift_unknownObjectRelease(v21);
    if (a2)
      a2(v22);

  }
}

uint64_t sub_1004881D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(_QWORD *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD aBlock[5];
  uint64_t v60;

  v2 = v1;
  v53 = a1;
  v58 = type metadata accessor for DispatchTimeInterval(0);
  v54 = *(_QWORD *)(v58 - 8);
  v3 = __chkstk_darwin(v58);
  v57 = (uint64_t *)((char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v44 - v5);
  v56 = type metadata accessor for DispatchTime(0);
  v52 = *(_QWORD *)(v56 - 8);
  v7 = __chkstk_darwin(v56);
  v51 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v55 = (char *)&v44 - v9;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  __chkstk_darwin(v10);
  v48 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v15 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    v25 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer;
    v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer);
    if (v26)
    {
      swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer));
      swift_unknownObjectRetain(v26);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v26);
    }
    sub_100360CE4();
    static OS_dispatch_source.TimerFlags.strict.getter();
    v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v17, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v45);
    v28 = *(_QWORD *)(v2 + v25);
    *(_QWORD *)(v2 + v25) = v27;
    swift_unknownObjectRetain(v27);
    swift_unknownObjectRelease(v28);
    ObjectType = swift_getObjectType(v27);
    v30 = swift_allocObject(&unk_10072A468, 24, 7);
    swift_unknownObjectWeakInit(v30 + 16, v2);
    aBlock[4] = sub_100489968;
    v60 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025BBB4;
    aBlock[3] = &unk_10072A520;
    v31 = _Block_copy(aBlock);
    v32 = swift_retain(v30);
    static DispatchQoS.unspecified.getter(v32);
    v33 = v48;
    sub_10048671C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v14, v33, v31, ObjectType);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
    v34 = v60;
    swift_release(v30);
    v35 = swift_release(v34);
    v36 = v51;
    static DispatchTime.now()(v35);
    v37 = v54;
    *v6 = v53;
    v38 = v58;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v37 + 104))(v6, enum case for DispatchTimeInterval.seconds(_:), v58);
    v39 = v55;
    + infix(_:_:)(v36, v6);
    v40 = *(void (**)(_QWORD *, uint64_t))(v37 + 8);
    v40(v6, v38);
    v41 = *(void (**)(char *, uint64_t))(v52 + 8);
    v42 = v56;
    v41(v36, v56);
    sub_10027D6F8((uint64_t)v6);
    v43 = v57;
    sub_10027D73C(v57);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v39, v6, v43, ObjectType);
    v40(v43, v38);
    v40(v6, v38);
    v41(v39, v42);
    OS_dispatch_source.activate()();
    return swift_unknownObjectRelease(v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10048864C(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    a2();

  }
}

uint64_t sub_1004886A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v9 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer;
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer))
    {
      v10 = swift_allocObject(&unk_10072A468, 24, 7);
      swift_unknownObjectWeakInit(v10 + 16, v1);
      swift_retain(v10);
      sub_100487B8C((void (*)(uint64_t))sub_100489988, v10, 0.0);
      swift_release_n(v10, 2);
      v11 = *(_QWORD *)(v1 + v9);
      if (v11)
      {
        swift_getObjectType(*(_QWORD *)(v1 + v9));
        swift_unknownObjectRetain(v11);
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease(v11);
        v12 = *(_QWORD *)(v1 + v9);
      }
      else
      {
        v12 = 0;
      }
      *(_QWORD *)(v1 + v9) = 0;
      return swift_unknownObjectRelease(v12);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004887FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, uint64_t, uint64_t);
  uint64_t v28;
  char v29;

  v28 = a1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v27 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  v27(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = v10;
  v13 = _dispatchPreconditionTest(_:)(v9);
  v14 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v14(v9, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v26 = v3;
  v15 = a3;
  v16 = (uint64_t *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration);
  v17 = a2;
  v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration);
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8);
  v20 = v28;
  *v16 = v28;
  v16[1] = v17;
  v16[2] = v15;
  sub_100244404(v20, v17);
  sub_100225AA0(v18, v19);
  *v9 = v12;
  v27(v9, v11, v6);
  v21 = v12;
  v22 = _dispatchPreconditionTest(_:)(v9);
  v14(v9, v6);
  if ((v22 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v23 = v16[1];
  if (v23 >> 60 != 15)
  {
    v24 = v16[2];
    v25 = *v16;
    sub_10022E4A8(*v16, v16[1]);
    v29 = BYTE1(v24) & 1;
    sub_100488C40(v25, v23, v24 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(v24) & 1) << 8));
    sub_100225AA0(v25, v23);
  }
  sub_1004876D0();
}

void sub_1004889B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = (uint64_t *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration);
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8);
    if (v6 >> 60 != 15)
    {
      v7 = *v5;
      sub_10022E4A8(*v5, v6);
      if (qword_1007B4178 != -1)
        swift_once(&qword_1007B4178, sub_1004867B8);
      v8 = type metadata accessor for Logger(0);
      sub_100221DF8(v8, (uint64_t)qword_1007C1E60);
      v9 = v4;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        *(_DWORD *)v12 = 136315138;
        v13 = (unint64_t)v5[1] >> 60;
        v18 = v16;
        if (v13 <= 0xE)
          v14 = 0x706F7244726941;
        else
          v14 = 0x6E4979627261654ELL;
        if (v13 <= 0xE)
          v15 = (const char *)0xE700000000000000;
        else
          v15 = (const char *)0xEC00000032566F66;
        v17 = sub_100228BD8(v14, (unint64_t)v15, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4);

        swift_bridgeObjectRelease(v15);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Changing advertisement rate to default on %s advertiser", v12, 0xCu);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

      }
      sub_10022E4A8(v7, v6);
      sub_1004887FC(v7, v6, 256);
      sub_100486C60(0, 0);
      sub_100225AA0(v7, v6);
      sub_100225AA0(v7, v6);
    }

  }
}

uint64_t sub_100488C40(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v14 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
    v15 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser);
    sub_10022E4A8(a1, a2);
    objc_msgSend(v15, "setAdvertiseRate:", HIDWORD(a3));
    objc_msgSend(*(id *)(v3 + v14), "setAirdropVersion:", 2);
    v16 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(1, a1, a2);
    objc_msgSend(v16, "setAirdropHash1:", (unsigned __int16)(Data.subscript.getter(2, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    v17 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(3, a1, a2);
    objc_msgSend(v17, "setAirdropHash2:", (unsigned __int16)(Data.subscript.getter(4, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    v18 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(5, a1, a2);
    objc_msgSend(v18, "setAirdropHash3:", (unsigned __int16)(Data.subscript.getter(6, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    v19 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(7, a1, a2);
    objc_msgSend(v19, "setAirdropHash4:", (unsigned __int16)(Data.subscript.getter(8, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    if ((a3 & 0x100) == 0)
      objc_msgSend(*(id *)(v3 + v14), "setAirdropModel:", a3);
    objc_msgSend(*(id *)(v3 + v14), "setAirdropConfigData:", BYTE3(a3));
    objc_msgSend(*(id *)(v3 + v14), "setAirdropFlags:", BYTE2(a3));
    return sub_100225AB4(a1, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SDBLEAdvertiser()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary15SDBLEAdvertiser);
}

void *sub_100488F78()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Class isa;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v1 = objc_msgSend((id)objc_opt_self(SDNearbyAgent), "sharedNearbyAgent");
  v2 = objc_msgSend(v1, "temporarySelfIdentity");

  if (!v2)
    return 0;
  v3 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser), "advertisingAddressDataNonConnectable");
  v4 = v3;
  if (!v3)
  {

    return v4;
  }
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v27 = 0;
  v9 = objc_msgSend(v2, "authTagForData:type:error:", isa, 2, &v27);

  v10 = v27;
  if (!v9)
  {
    v11 = v10;
    v12 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v13);
    if (qword_1007B4178 != -1)
      swift_once(&qword_1007B4178, sub_1004867B8);
    v14 = type metadata accessor for Logger(0);
    sub_100221DF8(v14, (uint64_t)qword_1007C1E60);
    swift_errorRetain(v12);
    v15 = swift_errorRetain(v12);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void *)swift_slowAlloc(32, -1);
      v27 = v19;
      *(_DWORD *)v18 = 136315138;
      v25 = v12;
      swift_errorRetain(v12);
      v20 = sub_100008384(&qword_1007B5A60);
      v21 = String.init<A>(describing:)(&v25, v20);
      v23 = (const char *)v22;
      v25 = sub_100228BD8(v21, v22, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to create temp auth tag: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_100225AB4(v5, v7);
      swift_errorRelease(v12);
    }
    else
    {

      sub_100225AB4(v5, v7);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      swift_errorRelease(v12);

    }
    return 0;
  }
  v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);

  sub_100225AB4(v5, v7);
  return v4;
}

uint64_t sub_1004892C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  v8 = swift_allocObject(&unk_10072A468, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_100489918;
  v20 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10072A480;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  v18 = _swiftEmptyArrayStorage;
  v11 = sub_100274284();
  v12 = sub_100008384((uint64_t *)&unk_1007B6410);
  v13 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v20;
  swift_release(v8);
  return swift_release(v14);
}

void sub_1004894B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  if (qword_1007B4178 != -1)
    swift_once(&qword_1007B4178, sub_1004867B8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C1E60);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Rapport identities changed, updating temp auth tag if necessary", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(v1, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    sub_1004876D0();

  }
}

uint64_t *destroy for SDBLEAdvertiser.Configuration(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_100225AB4(*result, v1);
  return result;
}

uint64_t _s16DaemoniOSLibrary15SDBLEAdvertiserC13ConfigurationOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = a2[1];
  if ((v4 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
  }
  else
  {
    v5 = *a2;
    sub_10022E4A8(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *((_DWORD *)a2 + 5);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_DWORD *)(a1 + 20) = v6;
  }
  return a1;
}

uint64_t assignWithCopy for SDBLEAdvertiser.Configuration(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) != 0)
  {
    if (!v6)
    {
      v7 = *(_QWORD *)a2;
      sub_10022E4A8(*(_QWORD *)a2, *((_QWORD *)a2 + 1));
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
      *(_BYTE *)(a1 + 19) = *((_BYTE *)a2 + 19);
      *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
      return a1;
    }
  }
  else
  {
    if (!v6)
    {
      v9 = *(_QWORD *)a2;
      sub_10022E4A8(*(_QWORD *)a2, *((_QWORD *)a2 + 1));
      v10 = *(_QWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v5;
      sub_100225AB4(v10, v11);
      goto LABEL_8;
    }
    sub_100225AB4(*(_QWORD *)a1, v4);
  }
  v8 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v8;
  return a1;
}

uint64_t assignWithTake for SDBLEAdvertiser.Configuration(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      sub_100225AB4(v7, v4);
      v8 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = v8;
      return a1;
    }
    sub_100225AB4(*(_QWORD *)a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SDBLEAdvertiser.Configuration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SDBLEAdvertiser.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_100489840(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_100489868(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 13;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDBLEAdvertiser.Configuration()
{
  return &type metadata for SDBLEAdvertiser.Configuration;
}

uint64_t sub_1004898AC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8) >> 60 == 15)
    return 0x6E4979627261654ELL;
  else
    return 0x706F7244726941;
}

uint64_t sub_1004898F4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100489918()
{
  uint64_t v0;

  sub_1004894B4(v0);
}

uint64_t sub_100489920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100489930(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100489938()
{
  uint64_t v0;

  sub_10048864C(v0, sub_10048710C);
}

void sub_10048995C(uint64_t a1)
{
  uint64_t v1;

  sub_10048727C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

void sub_100489968()
{
  uint64_t v0;

  sub_10048864C(v0, (void (*)(void))sub_1004886A0);
}

void sub_100489988()
{
  uint64_t v0;

  sub_1004889B8(v0);
}

uint64_t sub_100489994()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1004899C8()
{
  uint64_t v0;

  sub_100487F2C(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1004899D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

const char *sub_1004899F8(int a1)
{
  if (a1 > 39)
  {
    if (a1 <= 44)
    {
      if (a1 == 40)
        return "Medium";
      if (a1 == 42)
        return "MediumMid";
    }
    else
    {
      switch(a1)
      {
        case '-':
          return "MediumHigh";
        case '2':
          return "High";
        case '<':
          return "Max";
      }
    }
  }
  else if (a1 <= 14)
  {
    if (!a1)
      return "Default";
    if (a1 == 10)
      return "Periodic";
  }
  else
  {
    switch(a1)
    {
      case 15:
        return "PeriodicHigh";
      case 20:
        return "Background";
      case 30:
        return "Low";
    }
  }
  return "?";
}

const char *sub_100489AE0(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

uint64_t destroy for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1)
{
  return sub_100225AB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t _s16DaemoniOSLibrary15SDBLEAdvertiserC13ConfigurationO7AirDropVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10022E4A8(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  return a1;
}

uint64_t assignWithCopy for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10022E4A8(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100225AB4(v6, v7);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100225AB4(v4, v5);
  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SDBLEAdvertiser.Configuration.AirDrop(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDBLEAdvertiser.Configuration.AirDrop()
{
  return &type metadata for SDBLEAdvertiser.Configuration.AirDrop;
}

uint64_t sub_10048A3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1EC0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1EC0);
  if (qword_1007B3EC0 != -1)
    swift_once(&qword_1007B3EC0, sub_1002EA004);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10048A478()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  const char *v12;
  const char *v13;
  NSString v14;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  uint8_t *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  char v39;
  uint64_t v40;
  uint8_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  char v49[24];
  __int128 v50;
  uint64_t v51;
  _QWORD v52[6];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v9 = (uint64_t)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v49, 0, 0);
  sub_100221F28(v9, (uint64_t)&v50, &qword_1007B9E38);
  if (!v51)
  {
    sub_10000D0F0((uint64_t)&v50, &qword_1007B9E38);
    return sub_100490A98(10, 0xD000000000000012, 0x800000010061CC70, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
  }
  sub_10026EE60(&v50, (uint64_t)v52);
  v10 = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationPrePairingRequest), "init");
  v11 = v10;
  if (!v10)
  {
LABEL_10:
    sub_100490A98(10, 0xD000000000000020, 0x80000001006159A0, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);

    return sub_10022E75C(v52);
  }
  objc_msgSend(v10, "setVersion:", 1);
  v6 = v11;
  UUID.uuidString.getter(v6);
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setSessionID:", v14, swift_bridgeObjectRelease(v13).n128_f64[0]);

  v15 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  if (!HIDWORD(*(_QWORD *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]))
  {
    objc_msgSend(v6, "setType:");
    v16 = objc_msgSend(v6, "data");
    if (v16)
    {
      v17 = v16;
      v1 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v4 = v18;

      v19 = (uint64_t)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
      swift_beginAccess(&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v46, 0, 0);
      sub_100221F28(v19, (uint64_t)&v47, &qword_1007BFF70);
      if (!v48)
      {
        sub_10000D0F0((uint64_t)&v47, &qword_1007BFF70);
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        v32 = type metadata accessor for Logger(0);
        v33 = sub_100221DF8(v32, (uint64_t)qword_1007C1EC0);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.error.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = v4;
          v37 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v37 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Warning: No delegate to send response to", v37, 2u);
          v38 = v37;
          v4 = v36;
          swift_slowDealloc(v38, -1, -1);
        }

        goto LABEL_22;
      }
      v44 = v15;
      sub_10026EE60(&v47, (uint64_t)&v50);
      if (qword_1007B4180 == -1)
      {
LABEL_8:
        v20 = type metadata accessor for Logger(0);
        sub_100221DF8(v20, (uint64_t)qword_1007C1EC0);
        v21 = v2;
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.default.getter(v22);
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc(12, -1);
          v42 = v4;
          v25 = (uint8_t *)v24;
          v26 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v47 = v26;
          v43 = v1;
          *(_DWORD *)v25 = 136315138;
          v41 = v25 + 4;
          v27 = UUID.uuidString.getter(v26);
          v29 = (const char *)v28;
          v45 = sub_100228BD8(v27, v28, (uint64_t *)&v47);
          v1 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v41);

          swift_bridgeObjectRelease(v29);
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Sending authentication pre-pairing request for sessionID %s", v25, 0xCu);
          swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v26, -1, -1);
          v30 = v25;
          v4 = v42;
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {

        }
        sub_10023A834(&v50, v51);
        if (v21[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI] == 1)
          v39 = v21[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType];
        else
          v39 = sub_1003FD808(*(_QWORD *)&v2[v44]);
        sub_100560A88(v1, v4, v52, 9, v39);
        sub_10022E75C(&v50);
LABEL_22:
        sub_1003FCE8C(0x4049000000000000, 0);
        sub_100225AB4(v1, v4);

        return sub_10022E75C(v52);
      }
LABEL_25:
      swift_once(&qword_1007B4180, sub_10048A3E8);
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_10048AA90(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  char *v23;
  id v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  os_log_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char v74[24];
  __int128 v75;
  uint64_t v76;
  uint64_t v77[6];

  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AuthenticationSecurityRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  v69 = v7;
  v8 = __chkstk_darwin(v6);
  v70 = v9;
  v71 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v62 - v10);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v72 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    v73 = v13;
    v67 = v12;
    if (qword_1007B4180 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B4180, sub_10048A3E8);
LABEL_3:
  v21 = type metadata accessor for Logger(0);
  sub_100221DF8(v21, (uint64_t)qword_1007C1EC0);
  v22 = a1;
  v23 = v1;
  v24 = v22;
  v25 = v23;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v66 = v24;
  if (v28)
  {
    v29 = swift_slowAlloc(22, -1);
    v63 = v26;
    v30 = v29;
    v31 = (_QWORD *)swift_slowAlloc(8, -1);
    v64 = swift_slowAlloc(32, -1);
    v77[0] = v64;
    *(_DWORD *)v30 = 138412546;
    *(_QWORD *)&v75 = v24;
    v65 = v5;
    v32 = v11;
    v33 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v30 + 4);
    *v31 = v24;

    v11 = v32;
    *(_WORD *)(v30 + 12) = 2080;
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    *(_QWORD *)&v75 = sub_100228BD8(v35, v36, v77);
    v5 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v30 + 14);

    swift_bridgeObjectRelease(v37);
    v38 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, v27, "Received authentication pairing request: %@ for sessionID %s", (uint8_t *)v30, 0x16u);
    v39 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v31, 1, v39);
    swift_slowDealloc(v31, -1, -1);
    v40 = v64;
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

  }
  sub_1003FD560();
  v41 = (uint64_t)&v25[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v25[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v74, 0, 0);
  sub_100221F28(v41, (uint64_t)&v75, &qword_1007B9E38);
  if (v76)
  {
    v42 = sub_10026EE60(&v75, (uint64_t)v77);
    v43 = *(_QWORD *)&v25[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type];
    if (v43 >= 9)
    {
      if (qword_1007B3DD8 != -1)
        v42 = swift_once(&qword_1007B3DD8, sub_1002CFC70);
      v44 = &qword_1007D80C0;
    }
    else
    {
      v44 = (uint64_t *)((char *)&unk_1005DA0D0 + 8 * v43);
    }
    v46 = *v44;
    v47 = v72;
    Date.init()(v42);
    v48 = v67;
    v49 = (uint64_t)v11;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))((char *)v11 + *(int *)(v68 + 20), v47, v67);
    *v11 = v46;
    v50 = type metadata accessor for TaskPriority(0);
    v51 = (uint64_t)v5;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v5, 1, 1, v50);
    v52 = v71;
    sub_1002D48DC(v49, v71);
    sub_100244418((uint64_t)v77, (uint64_t)&v75);
    v53 = *(unsigned __int8 *)(v69 + 80);
    v54 = (v53 + 40) & ~v53;
    v55 = (v70 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
    v57 = (_QWORD *)swift_allocObject(&unk_10072A6D8, v56 + 40, v53 | 7);
    v57[2] = 0;
    v57[3] = 0;
    v57[4] = v25;
    sub_10038A290(v52, (uint64_t)v57 + v54);
    v58 = v66;
    *(_QWORD *)((char *)v57 + v55) = v66;
    sub_10026EE60(&v75, (uint64_t)v57 + v56);
    v59 = v58;
    v60 = v25;
    v61 = sub_100252EC0(v51, (uint64_t)&unk_1007C1F28, (uint64_t)v57);
    swift_release(v61);
    sub_1002D4920(v49);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v48);
    return sub_10022E75C(v77);
  }
  else
  {
    sub_10000D0F0((uint64_t)&v75, &qword_1007B9E38);
    return sub_100490A98(10, 0xD000000000000014, 0x800000010061CB50, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
  }
}

uint64_t sub_10048B094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[45] = a6;
  v7[46] = a7;
  v7[43] = a4;
  v7[44] = a5;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v7[47] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[48] = v9;
  v7[49] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v7[50] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[51] = v11;
  v7[52] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContinuousClock(0);
  v7[53] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[54] = v13;
  v7[55] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10048B148, 0, 0);
}

uint64_t sub_10048B148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  char *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  const char *v51;
  char v52;
  double v53;
  id v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  NSString v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Class isa;
  uint64_t v70;
  id v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  NSString v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  _QWORD *v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  _QWORD *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  id *v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[2];

  v1 = *(_QWORD *)(v0 + 344) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
  swift_beginAccess(v1, v0 + 208, 0, 0);
  sub_100221F28(v1, v0 + 64, &qword_1007BFF70);
  if (*(_QWORD *)(v0 + 88))
  {
    v2 = *(_QWORD *)(v0 + 352);
    sub_100244418(v0 + 64, v0 + 104);
    sub_10000D0F0(v0 + 64, &qword_1007BFF70);
    v3 = (_QWORD *)(*sub_10023A834((_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128))
                  + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_securityManager);
    swift_beginAccess(v3, v0 + 184, 0, 0);
    v4 = *sub_10023A834(v3, v3[3]);
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 448) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v2;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 456) = v6;
    *v6 = v0;
    v6[1] = sub_10048C0B0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0x6F6974616C6F6976, 0xEF293A726F66286ELL, sub_100340AE8, v5, (char *)&type metadata for () + 8);
  }
  sub_10000D0F0(v0 + 64, &qword_1007BFF70);
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v8 = *(void **)(v0 + 344);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 472) = sub_100221DF8(v9, (uint64_t)qword_1007C1EC0);
  v10 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(char **)(v0 + 344);
  v121 = v9;
  v123 = (id *)(v0 + 328);
  if (v12)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    *(_DWORD *)v14 = 136315138;
    v127[0] = v15;
    v16 = sub_1003FDAA0(*(_QWORD *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]);
    v18 = (const char *)v17;
    *(_QWORD *)(v0 + 320) = sub_100228BD8(v16, v17, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v14 + 4);
    swift_bridgeObjectRelease(v18);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Authentication Session type: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

  }
  v19 = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationPairingResponse), "init");
  *(_QWORD *)(v0 + 480) = v19;
  if (!v19)
  {
    v25 = sub_100244304();
    v26 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v25, 0, 0);
    *(_DWORD *)v27 = 10;
    *(_QWORD *)(v27 + 8) = 0xD000000000000039;
    *(_QWORD *)(v27 + 16) = 0x800000010061CB70;
    swift_willThrow(v26);
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(v0 + 344);
  v21 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  *(_QWORD *)(v0 + 488) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  v22 = *(_QWORD *)(v20 + v21);
  v23 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  *(_QWORD *)(v0 + 496) = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  v24 = *(_QWORD *)(v20 + v23);
  *(_QWORD *)(v0 + 504) = v24;
  if (v22 != 8)
  {
    v42 = dword_1007C57C4;
    swift_retain();
    v43 = (_QWORD *)swift_task_alloc(v42);
    *(_QWORD *)(v0 + 512) = v43;
    *v43 = v0;
    v43[1] = sub_10048D4FC;
    return sub_1005303B0();
  }
  swift_retain();
  sub_1005322E0();
  v58 = (void *)sub_100531C0C(0, 0xF000000000000000);
  v59 = swift_release(v24);
  *(_QWORD *)(v0 + 544) = v58;
  v60 = *(void **)(v0 + 480);
  v61 = *(_QWORD *)(v0 + 488);
  v62 = *(_QWORD *)(v0 + 344);
  UUID.uuidString.getter(v59);
  v64 = v63;
  v65 = String._bridgeToObjectiveC()();
  objc_msgSend(v60, "setSessionID:", v65, swift_bridgeObjectRelease(v64).n128_f64[0]);

  objc_msgSend(v60, "setVersion:", 1);
  v66 = Data.init(referencing:)(v58);
  v68 = v67;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v66, v68);
  objc_msgSend(v60, "setToken:", isa);

  if (HIDWORD(*(_QWORD *)(v62 + v61)))
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  v70 = *(_QWORD *)(v0 + 344);
  v71 = objc_msgSend(*(id *)(v0 + 480), "setType:");
  v72 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
  if (*(_BYTE *)(v70 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
  {
    v73 = Logger.logObject.getter(v71);
    v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Requesting arming UI", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }
    v76 = *(void **)(v0 + 480);

    objc_msgSend(v76, "setRequestArmingUI:", *(unsigned __int8 *)(v70 + v72));
  }
  v77 = objc_msgSend(*(id *)(v0 + 480), "data");
  if (!v77)
  {
    v101 = *(void **)(v0 + 480);
    v102 = sub_100244304();
    v26 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v102, 0, 0);
    *(_DWORD *)v103 = 10;
    *(_QWORD *)(v103 + 8) = 0xD000000000000020;
    *(_QWORD *)(v103 + 16) = 0x80000001006159A0;
    swift_willThrow(v26);

LABEL_12:
    *(_QWORD *)(v0 + 288) = v26;
    swift_errorRetain(v26);
    v28 = sub_100008384(&qword_1007B5A60);
    if (swift_dynamicCast(v0 + 232, v0 + 288, v28, &type metadata for SFAuthenticationErrorMessage, 0))
    {
      swift_errorRelease(v26);
      v29 = *(const char **)(v0 + 248);
      sub_100490A98(*(_DWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), (uint64_t)v29, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
      swift_bridgeObjectRelease(v29);
      v30 = *(_QWORD *)(v0 + 288);
LABEL_44:
      swift_errorRelease(v30);
LABEL_45:
      v99 = *(_QWORD *)(v0 + 416);
      v100 = *(_QWORD *)(v0 + 392);
      swift_task_dealloc(*(_QWORD *)(v0 + 440));
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v31 = (uint64_t *)(v0 + 272);
    swift_errorRelease(*(_QWORD *)(v0 + 288));
    *(_QWORD *)(v0 + 272) = v26;
    swift_errorRetain(v26);
    v32 = sub_100491920();
    if (!swift_dynamicCast(v123, v0 + 272, v28, v32, 0))
    {
      swift_errorRelease(*v31);
      if (qword_1007B4180 != -1)
        swift_once(&qword_1007B4180, sub_10048A3E8);
      sub_100221DF8(v121, (uint64_t)qword_1007C1EC0);
      swift_errorRetain(v26);
      v44 = swift_errorRetain(v26);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        v48 = swift_slowAlloc(32, -1);
        *(_DWORD *)v47 = 136315138;
        v127[0] = v48;
        *(_QWORD *)(v0 + 280) = v26;
        swift_errorRetain(v26);
        v49 = String.init<A>(describing:)(v0 + 280, v28);
        v51 = (const char *)v50;
        *(_QWORD *)(v0 + 256) = sub_100228BD8(v49, v50, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v47 + 4);
        swift_bridgeObjectRelease(v51);
        swift_errorRelease(v26);
        swift_errorRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unexpected error: %s", v47, 0xCu);
        swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);
      }
      else
      {
        swift_errorRelease(v26);
        swift_errorRelease(v26);
      }

      sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
      v30 = v26;
      goto LABEL_44;
    }
    v118 = (_QWORD *)(v0 + 264);
    swift_errorRelease(v26);
    v33 = *v123;
    v34 = objc_msgSend(*v123, "code");
    v35 = objc_msgSend(v33, "domain");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    v41 = v39;
    if (v36 == v40 && v38 == v39)
    {
      swift_bridgeObjectRelease_n(v38, 2);
    }
    else
    {
      v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 0);
      *(_QWORD *)&v53 = swift_bridgeObjectRelease(v41).n128_u64[0];
      swift_bridgeObjectRelease(v38, v53);
      if ((v52 & 1) == 0)
      {
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        sub_100221DF8(v121, (uint64_t)qword_1007C1EC0);
        v91 = v33;
        v92 = Logger.logObject.getter(v91);
        v93 = static os_log_type_t.error.getter(v92);
        if (os_log_type_enabled(v92, v93))
        {
          v94 = (uint8_t *)swift_slowAlloc(12, -1);
          v125 = swift_slowAlloc(32, -1);
          v127[0] = v125;
          *(_DWORD *)v94 = 136315138;
          *v118 = v91;
          v95 = v91;
          v96 = String.init<A>(describing:)(v118, v32);
          v98 = (const char *)v97;
          *(_QWORD *)(v0 + 336) = sub_100228BD8(v96, v97, v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v94 + 4);
          swift_bridgeObjectRelease(v98);

          _os_log_impl((void *)&_mh_execute_header, v92, v93, "Unexpected error: %s", v94, 0xCu);
          swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v125, -1, -1);
          swift_slowDealloc(v94, -1, -1);
        }
        else
        {

        }
        sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);

        goto LABEL_43;
      }
    }
    v54 = (id)SFAuthenticationErrorToString(v34);
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v57 = v56;

    sub_100490A98((int)v34, v55, (uint64_t)v57, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v57);

LABEL_43:
    v30 = *v31;
    goto LABEL_44;
  }
  v78 = v77;
  v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
  v81 = v80;

  *(_QWORD *)(v0 + 552) = v79;
  *(_QWORD *)(v0 + 560) = v81;
  v82 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v83 = String._bridgeToObjectiveC()();
  v84 = (uint64_t)objc_msgSend(v82, "integerForKey:", v83);

  if (v84 <= 0)
  {
    v104 = *(_QWORD *)(v0 + 560);
    v105 = *(_QWORD *)(v0 + 552);
    v117 = *(void **)(v0 + 480);
    v106 = *(_QWORD *)(v0 + 416);
    v120 = *(void **)(v0 + 544);
    v122 = *(_QWORD *)(v0 + 408);
    v107 = *(_QWORD *)(v0 + 392);
    v126 = *(_QWORD *)(v0 + 400);
    v108 = *(_QWORD *)(v0 + 376);
    v119 = *(_QWORD *)(v0 + 384);
    v109 = *(void **)(v0 + 344);
    sub_100244418(*(_QWORD *)(v0 + 368), v0 + 144);
    v110 = (_QWORD *)swift_allocObject(&unk_10072A700, 80, 7);
    v110[2] = v109;
    v110[3] = v105;
    v110[4] = v104;
    sub_10026EE60((__int128 *)(v0 + 144), (uint64_t)(v110 + 5));
    *(_QWORD *)(v0 + 48) = sub_100491990;
    *(_QWORD *)(v0 + 56) = v110;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_10025BBB4;
    *(_QWORD *)(v0 + 40) = &unk_10072A718;
    v111 = _Block_copy((const void *)(v0 + 16));
    v112 = v109;
    v113 = sub_10022E4A8(v105, v104);
    static DispatchQoS.unspecified.getter(v113);
    *(_QWORD *)(v0 + 296) = _swiftEmptyArrayStorage;
    v114 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v115 = sub_100008384((uint64_t *)&unk_1007B6410);
    v116 = sub_100273050();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 296, v115, v116, v108, v114);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v106, v107, v111);
    _Block_release(v111);
    sub_100225AB4(v105, v104);

    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v107, v108);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v106, v126);
    swift_release(*(_QWORD *)(v0 + 56));
    goto LABEL_45;
  }
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.error.getter(v86);
  if (os_log_type_enabled(v86, v87))
  {
    v88 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v88 = 134217984;
    *(_QWORD *)(v0 + 304) = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v88 + 4);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "### TESTING ONLY: start delaySendingPairingResponse for %ld seconds", v88, 0xCu);
    swift_slowDealloc(v88, -1, -1);
  }

  ContinuousClock.init()(v89);
  v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v90 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v0 + 568) = v90;
  *v90 = v0;
  v90[1] = sub_10048E480;
  return v124(1000000000000000000 * v84, ((unint64_t)v84 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64, 0, 0, 1);
}

uint64_t sub_10048C0B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10048CF44;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 448));
    v4 = sub_10048C11C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10048C11C()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  char *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t *v27;
  id *v28;
  unint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  char v50;
  double v51;
  id v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  NSString v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  Class isa;
  uint64_t v68;
  id v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  NSString v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  _QWORD *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124[2];

  sub_10022E75C((_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 464);
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v2 = (id *)(v0 + 328);
  v3 = *(void **)(v0 + 344);
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 472) = sub_100221DF8(v4, (uint64_t)qword_1007C1EC0);
  v5 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(char **)(v0 + 344);
  v120 = v4;
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_DWORD *)v9 = 136315138;
    v124[0] = v10;
    v11 = sub_1003FDAA0(*(_QWORD *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]);
    v13 = (const char *)v12;
    *(_QWORD *)(v0 + 320) = sub_100228BD8(v11, v12, v124);
    v2 = (id *)(v0 + 328);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v9 + 4);
    swift_bridgeObjectRelease(v13);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Authentication Session type: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {

  }
  v14 = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationPairingResponse), "init");
  *(_QWORD *)(v0 + 480) = v14;
  if (!v14)
  {
    v22 = sub_100244304();
    v21 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v22, 0, 0);
    *(_DWORD *)v23 = 10;
    *(_QWORD *)(v23 + 8) = 0xD000000000000039;
    *(_QWORD *)(v23 + 16) = 0x800000010061CB70;
    swift_willThrow(v21);
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(v0 + 344);
  v16 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  *(_QWORD *)(v0 + 488) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  v17 = *(_QWORD *)(v15 + v16);
  v18 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  *(_QWORD *)(v0 + 496) = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  v19 = *(_QWORD *)(v15 + v18);
  *(_QWORD *)(v0 + 504) = v19;
  if (v17 != 8)
  {
    v39 = dword_1007C57C4;
    swift_retain();
    v40 = (_QWORD *)swift_task_alloc(v39);
    *(_QWORD *)(v0 + 512) = v40;
    *v40 = v0;
    v40[1] = sub_10048D4FC;
    return sub_1005303B0();
  }
  v20 = v14;
  swift_retain();
  sub_1005322E0();
  v21 = v1;
  if (v1)
  {

    swift_release(v19);
    goto LABEL_12;
  }
  v56 = (void *)sub_100531C0C(0, 0xF000000000000000);
  v57 = swift_release(v19);
  *(_QWORD *)(v0 + 544) = v56;
  v58 = *(void **)(v0 + 480);
  v59 = *(_QWORD *)(v0 + 488);
  v60 = *(_QWORD *)(v0 + 344);
  UUID.uuidString.getter(v57);
  v62 = v61;
  v63 = String._bridgeToObjectiveC()();
  objc_msgSend(v58, "setSessionID:", v63, swift_bridgeObjectRelease(v62).n128_f64[0]);

  objc_msgSend(v58, "setVersion:", 1);
  v64 = Data.init(referencing:)(v56);
  v66 = v65;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v64, v66);
  objc_msgSend(v58, "setToken:", isa);

  if (HIDWORD(*(_QWORD *)(v60 + v59)))
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  v68 = *(_QWORD *)(v0 + 344);
  v69 = objc_msgSend(*(id *)(v0 + 480), "setType:");
  v70 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
  if (*(_BYTE *)(v68 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
  {
    v71 = Logger.logObject.getter(v69);
    v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Requesting arming UI", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }
    v74 = *(void **)(v0 + 480);

    objc_msgSend(v74, "setRequestArmingUI:", *(unsigned __int8 *)(v68 + v70));
  }
  v75 = objc_msgSend(*(id *)(v0 + 480), "data");
  if (!v75)
  {
    v99 = *(void **)(v0 + 480);
    v100 = sub_100244304();
    v21 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v100, 0, 0);
    *(_DWORD *)v101 = 10;
    *(_QWORD *)(v101 + 8) = 0xD000000000000020;
    *(_QWORD *)(v101 + 16) = 0x80000001006159A0;
    swift_willThrow(v21);

LABEL_12:
    *(_QWORD *)(v0 + 288) = v21;
    swift_errorRetain(v21);
    v24 = sub_100008384(&qword_1007B5A60);
    if (swift_dynamicCast(v0 + 232, v0 + 288, v24, &type metadata for SFAuthenticationErrorMessage, 0))
    {
      swift_errorRelease(v21);
      v25 = *(const char **)(v0 + 248);
      sub_100490A98(*(_DWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), (uint64_t)v25, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
      swift_bridgeObjectRelease(v25);
      v26 = *(_QWORD *)(v0 + 288);
LABEL_44:
      swift_errorRelease(v26);
LABEL_45:
      v97 = *(_QWORD *)(v0 + 416);
      v98 = *(_QWORD *)(v0 + 392);
      swift_task_dealloc(*(_QWORD *)(v0 + 440));
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v27 = (uint64_t *)(v0 + 272);
    swift_errorRelease(*(_QWORD *)(v0 + 288));
    *(_QWORD *)(v0 + 272) = v21;
    swift_errorRetain(v21);
    v28 = v2;
    v29 = sub_100491920();
    if (!swift_dynamicCast(v28, v0 + 272, v24, v29, 0))
    {
      swift_errorRelease(*v27);
      if (qword_1007B4180 != -1)
        swift_once(&qword_1007B4180, sub_10048A3E8);
      sub_100221DF8(v120, (uint64_t)qword_1007C1EC0);
      swift_errorRetain(v21);
      v42 = swift_errorRetain(v21);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        *(_DWORD *)v45 = 136315138;
        v124[0] = v46;
        *(_QWORD *)(v0 + 280) = v21;
        swift_errorRetain(v21);
        v47 = String.init<A>(describing:)(v0 + 280, v24);
        v49 = (const char *)v48;
        *(_QWORD *)(v0 + 256) = sub_100228BD8(v47, v48, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v45 + 4);
        swift_bridgeObjectRelease(v49);
        swift_errorRelease(v21);
        swift_errorRelease(v21);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unexpected error: %s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);
      }
      else
      {
        swift_errorRelease(v21);
        swift_errorRelease(v21);
      }

      sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
      v26 = v21;
      goto LABEL_44;
    }
    v117 = (_QWORD *)(v0 + 264);
    swift_errorRelease(v21);
    v30 = *v28;
    v31 = objc_msgSend(*v28, "code");
    v32 = objc_msgSend(v30, "domain");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    v38 = v36;
    if (v33 == v37 && v35 == v36)
    {
      swift_bridgeObjectRelease_n(v35, 2);
    }
    else
    {
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0);
      *(_QWORD *)&v51 = swift_bridgeObjectRelease(v38).n128_u64[0];
      swift_bridgeObjectRelease(v35, v51);
      if ((v50 & 1) == 0)
      {
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        sub_100221DF8(v120, (uint64_t)qword_1007C1EC0);
        v89 = v30;
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = (uint8_t *)swift_slowAlloc(12, -1);
          v122 = swift_slowAlloc(32, -1);
          v124[0] = v122;
          *(_DWORD *)v92 = 136315138;
          *v117 = v89;
          v93 = v89;
          v94 = String.init<A>(describing:)(v117, v29);
          v96 = (const char *)v95;
          *(_QWORD *)(v0 + 336) = sub_100228BD8(v94, v95, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v92 + 4);
          swift_bridgeObjectRelease(v96);

          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Unexpected error: %s", v92, 0xCu);
          swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v122, -1, -1);
          swift_slowDealloc(v92, -1, -1);
        }
        else
        {

        }
        sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);

        goto LABEL_43;
      }
    }
    v52 = (id)SFAuthenticationErrorToString(v31);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    sub_100490A98((int)v31, v53, (uint64_t)v55, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v55);

LABEL_43:
    v26 = *v27;
    goto LABEL_44;
  }
  v76 = v75;
  v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v75);
  v79 = v78;

  *(_QWORD *)(v0 + 552) = v77;
  *(_QWORD *)(v0 + 560) = v79;
  v80 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v81 = String._bridgeToObjectiveC()();
  v82 = (uint64_t)objc_msgSend(v80, "integerForKey:", v81);

  if (v82 <= 0)
  {
    v102 = *(_QWORD *)(v0 + 560);
    v103 = *(_QWORD *)(v0 + 552);
    v115 = *(void **)(v0 + 480);
    v104 = *(_QWORD *)(v0 + 416);
    v118 = *(void **)(v0 + 544);
    v119 = *(_QWORD *)(v0 + 408);
    v105 = *(_QWORD *)(v0 + 392);
    v123 = *(_QWORD *)(v0 + 400);
    v106 = *(_QWORD *)(v0 + 376);
    v116 = *(_QWORD *)(v0 + 384);
    v107 = *(void **)(v0 + 344);
    sub_100244418(*(_QWORD *)(v0 + 368), v0 + 144);
    v108 = (_QWORD *)swift_allocObject(&unk_10072A700, 80, 7);
    v108[2] = v107;
    v108[3] = v103;
    v108[4] = v102;
    sub_10026EE60((__int128 *)(v0 + 144), (uint64_t)(v108 + 5));
    *(_QWORD *)(v0 + 48) = sub_100491990;
    *(_QWORD *)(v0 + 56) = v108;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_10025BBB4;
    *(_QWORD *)(v0 + 40) = &unk_10072A718;
    v109 = _Block_copy((const void *)(v0 + 16));
    v110 = v107;
    v111 = sub_10022E4A8(v103, v102);
    static DispatchQoS.unspecified.getter(v111);
    *(_QWORD *)(v0 + 296) = _swiftEmptyArrayStorage;
    v112 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v113 = sub_100008384((uint64_t *)&unk_1007B6410);
    v114 = sub_100273050();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 296, v113, v114, v106, v112);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v105, v109);
    _Block_release(v109);
    sub_100225AB4(v103, v102);

    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v105, v106);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v104, v123);
    swift_release(*(_QWORD *)(v0 + 56));
    goto LABEL_45;
  }
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.error.getter(v84);
  if (os_log_type_enabled(v84, v85))
  {
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v86 = 134217984;
    *(_QWORD *)(v0 + 304) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v86 + 4);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "### TESTING ONLY: start delaySendingPairingResponse for %ld seconds", v86, 0xCu);
    swift_slowDealloc(v86, -1, -1);
  }

  ContinuousClock.init()(v87);
  v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v88 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v0 + 568) = v88;
  *v88 = v0;
  v88[1] = sub_10048E480;
  return v121(1000000000000000000 * v82, ((unint64_t)v82 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64, 0, 0, 1);
}

uint64_t sub_10048CF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  id *v5;
  unint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  char v25;
  double v26;
  id v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  sub_10022E75C((_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v0 + 288) = v1;
  swift_errorRetain(v1);
  v2 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v0 + 232, v0 + 288, v2, &type metadata for SFAuthenticationErrorMessage, 0) & 1) != 0)
  {
    swift_errorRelease(v1);
    v3 = *(const char **)(v0 + 248);
    sub_100490A98(*(_DWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), (uint64_t)v3, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v3);
    v4 = *(_QWORD *)(v0 + 288);
    goto LABEL_22;
  }
  v5 = (id *)(v0 + 328);
  swift_errorRelease(*(_QWORD *)(v0 + 288));
  *(_QWORD *)(v0 + 272) = v1;
  swift_errorRetain(v1);
  v6 = sub_100491920();
  if (swift_dynamicCast(v0 + 328, v0 + 272, v2, v6, 0))
  {
    swift_errorRelease(v1);
    v7 = *v5;
    v8 = objc_msgSend(*v5, "code");
    v9 = objc_msgSend(v7, "domain");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    v15 = v13;
    if (v10 == v14 && v12 == v13)
    {
      swift_bridgeObjectRelease_n(v12, 2);
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v13, 0);
      *(_QWORD *)&v26 = swift_bridgeObjectRelease(v15).n128_u64[0];
      swift_bridgeObjectRelease(v12, v26);
      if ((v25 & 1) == 0)
      {
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        v31 = type metadata accessor for Logger(0);
        sub_100221DF8(v31, (uint64_t)qword_1007C1EC0);
        v7 = v7;
        v32 = Logger.logObject.getter(v7);
        v33 = static os_log_type_t.error.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(12, -1);
          v35 = swift_slowAlloc(32, -1);
          v43 = v35;
          *(_DWORD *)v34 = 136315138;
          *(_QWORD *)(v0 + 264) = v7;
          v36 = v7;
          v37 = String.init<A>(describing:)(v0 + 264, v6);
          v39 = (const char *)v38;
          *(_QWORD *)(v0 + 336) = sub_100228BD8(v37, v38, &v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v34 + 4);
          swift_bridgeObjectRelease(v39);

          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unexpected error: %s", v34, 0xCu);
          swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v34, -1, -1);
        }
        else
        {

        }
        sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
        goto LABEL_21;
      }
    }
    v27 = (id)SFAuthenticationErrorToString(v8);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    sub_100490A98((int)v8, v28, (uint64_t)v30, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v30);
LABEL_21:

    v4 = *(_QWORD *)(v0 + 272);
    goto LABEL_22;
  }
  swift_errorRelease(*(_QWORD *)(v0 + 272));
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v16 = type metadata accessor for Logger(0);
  sub_100221DF8(v16, (uint64_t)qword_1007C1EC0);
  swift_errorRetain(v1);
  v17 = swift_errorRetain(v1);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v43 = v21;
    *(_DWORD *)v20 = 136315138;
    *(_QWORD *)(v0 + 280) = v1;
    swift_errorRetain(v1);
    v22 = String.init<A>(describing:)(v0 + 280, v2);
    v24 = (const char *)v23;
    *(_QWORD *)(v0 + 256) = sub_100228BD8(v22, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v20 + 4);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unexpected error: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
  v4 = v1;
LABEL_22:
  swift_errorRelease(v4);
  v40 = *(_QWORD *)(v0 + 416);
  v41 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048D4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 512);
  v4[65] = a1;
  v4[66] = a2;
  v4[67] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_10048ED38;
  }
  else
  {
    swift_release(v4[63]);
    v6 = sub_10048D578;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10048D578()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  NSData v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  NSString v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  id *v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  char v51;
  double v52;
  id v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  const char *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  Class isa;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  const char *v87;
  NSString v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  Class v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  NSString v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  _QWORD *v113;
  void *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  _QWORD *v126;
  void *v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v142;
  uint64_t v143[2];

  v1 = objc_msgSend(*(id *)(v0 + 360), "longTermKey");
  if (!v1)
  {
    v19 = *(_QWORD *)(v0 + 528);
    v20 = *(_QWORD *)(v0 + 520);
    v21 = *(void **)(v0 + 480);
    v22 = sub_100244304();
    v23 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v22, 0, 0);
    *(_DWORD *)v24 = 10;
    *(_QWORD *)(v24 + 8) = 0xD000000000000015;
    *(_QWORD *)(v24 + 16) = 0x800000010061CBB0;
    swift_willThrow(v23);
    sub_100225AB4(v20, v19);

    goto LABEL_9;
  }
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v7 = v6;

  v8 = *(_QWORD *)(v4 + v3);
  v9 = *(void **)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_aksManager);
  swift_retain();
  sub_10022E4A8(v5, v7);
  v139 = v7;
  v10.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = *(_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice + 24);
  v11 = *(_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice + 32);
  v13 = sub_10023A834((_QWORD *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice), v12);
  v14 = *(_QWORD *)(v12 - 8);
  v15 = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v14 + 16))(v15, v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v12);
  if (v17)
  {
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v18 = 0;
  }
  v25 = *(_QWORD *)(v0 + 536);
  swift_task_dealloc(v15);
  objc_msgSend(v9, "signAndStoreRemoteLTK:forDeviceID:", v10.super.isa, v18);

  sub_100531758();
  v23 = v25;
  if (v25)
  {
    v26 = *(_QWORD *)(v0 + 528);
    v27 = *(_QWORD *)(v0 + 520);

    sub_100225AB4(v5, v139);
    swift_release(v8);
    sub_100225AB4(v5, v139);
    sub_100225AB4(v27, v26);
    goto LABEL_9;
  }
  v137 = (void *)sub_100531C0C(0, 0xF000000000000000);
  v57 = *(_QWORD *)(v0 + 528);
  v58 = *(_QWORD *)(v0 + 520);
  sub_100225AB4(v5, v139);
  swift_release(v8);
  sub_10022E4A8(v58, v57);
  v59 = sub_10022E4A8(v58, v57);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  v62 = os_log_type_enabled(v60, v61);
  v63 = *(_QWORD *)(v0 + 528);
  v64 = *(_QWORD *)(v0 + 520);
  if (v62)
  {
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v134 = swift_slowAlloc(32, -1);
    v143[0] = v134;
    *(_DWORD *)v65 = 136315138;
    v66 = Data.debugDescription.getter(v64, v63);
    v68 = (const char *)v67;
    *(_QWORD *)(v0 + 312) = sub_100228BD8(v66, v67, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v65 + 4);
    swift_bridgeObjectRelease(v68);
    sub_100225AB4(v64, v63);
    sub_100225AB4(v64, v63);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Sending localAttestedLTK: %s", v65, 0xCu);
    swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v134, -1, -1);
    swift_slowDealloc(v65, -1, -1);
  }
  else
  {
    sub_100225AB4(v64, v63);
    sub_100225AB4(v64, v63);
  }

  v78 = *(_QWORD *)(v0 + 528);
  v79 = *(_QWORD *)(v0 + 520);
  v80 = *(void **)(v0 + 480);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v80, "setLongTermKey:", isa);

  sub_100225AB4(v5, v139);
  v82 = sub_100225AB4(v79, v78);
  *(_QWORD *)(v0 + 544) = v137;
  v83 = *(void **)(v0 + 480);
  v84 = *(_QWORD *)(v0 + 488);
  v85 = *(_QWORD *)(v0 + 344);
  UUID.uuidString.getter(v82);
  v87 = v86;
  v88 = String._bridgeToObjectiveC()();
  objc_msgSend(v83, "setSessionID:", v88, swift_bridgeObjectRelease(v87).n128_f64[0]);

  objc_msgSend(v83, "setVersion:", 1);
  v89 = Data.init(referencing:)(v137);
  v91 = v90;
  v92 = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v89, v91);
  objc_msgSend(v83, "setToken:", v92);

  if (HIDWORD(*(_QWORD *)(v85 + v84)))
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  v93 = *(_QWORD *)(v0 + 344);
  v94 = objc_msgSend(*(id *)(v0 + 480), "setType:");
  v95 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
  if (*(_BYTE *)(v93 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
  {
    v96 = Logger.logObject.getter(v94);
    v97 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Requesting arming UI", v98, 2u);
      swift_slowDealloc(v98, -1, -1);
    }
    v99 = *(void **)(v0 + 480);

    objc_msgSend(v99, "setRequestArmingUI:", *(unsigned __int8 *)(v93 + v95));
  }
  v100 = objc_msgSend(*(id *)(v0 + 480), "data");
  if (!v100)
  {
    v115 = *(void **)(v0 + 480);
    v116 = sub_100244304();
    v23 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v116, 0, 0);
    *(_DWORD *)v117 = 10;
    *(_QWORD *)(v117 + 8) = 0xD000000000000020;
    *(_QWORD *)(v117 + 16) = 0x80000001006159A0;
    swift_willThrow(v23);

LABEL_9:
    *(_QWORD *)(v0 + 288) = v23;
    swift_errorRetain(v23);
    v28 = sub_100008384(&qword_1007B5A60);
    if (swift_dynamicCast(v0 + 232, v0 + 288, v28, &type metadata for SFAuthenticationErrorMessage, 0))
    {
      swift_errorRelease(v23);
      v29 = *(const char **)(v0 + 248);
      sub_100490A98(*(_DWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), (uint64_t)v29, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
      swift_bridgeObjectRelease(v29);
      v30 = *(_QWORD *)(v0 + 288);
LABEL_44:
      swift_errorRelease(v30);
LABEL_45:
      v118 = *(_QWORD *)(v0 + 416);
      v119 = *(_QWORD *)(v0 + 392);
      swift_task_dealloc(*(_QWORD *)(v0 + 440));
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v140 = v0 + 264;
    v31 = (id *)(v0 + 328);
    swift_errorRelease(*(_QWORD *)(v0 + 288));
    *(_QWORD *)(v0 + 272) = v23;
    swift_errorRetain(v23);
    v32 = sub_100491920();
    if (!swift_dynamicCast(v0 + 328, v0 + 272, v28, v32, 0))
    {
      swift_errorRelease(*(_QWORD *)(v0 + 272));
      if (qword_1007B4180 != -1)
        swift_once(&qword_1007B4180, sub_10048A3E8);
      v42 = type metadata accessor for Logger(0);
      sub_100221DF8(v42, (uint64_t)qword_1007C1EC0);
      swift_errorRetain(v23);
      v43 = swift_errorRetain(v23);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v143[0] = v47;
        *(_DWORD *)v46 = 136315138;
        *(_QWORD *)(v0 + 280) = v23;
        swift_errorRetain(v23);
        v48 = String.init<A>(describing:)(v0 + 280, v28);
        v50 = (const char *)v49;
        *(_QWORD *)(v0 + 256) = sub_100228BD8(v48, v49, v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v140, v46 + 4);
        swift_bridgeObjectRelease(v50);
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unexpected error: %s", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {
        swift_errorRelease(v23);
        swift_errorRelease(v23);
      }

      sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
      v30 = v23;
      goto LABEL_44;
    }
    swift_errorRelease(v23);
    v33 = *v31;
    v34 = objc_msgSend(*v31, "code");
    v35 = objc_msgSend(v33, "domain");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    v41 = v39;
    if (v36 == v40 && v38 == v39)
    {
      swift_bridgeObjectRelease_n(v38, 2);
    }
    else
    {
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 0);
      *(_QWORD *)&v52 = swift_bridgeObjectRelease(v41).n128_u64[0];
      swift_bridgeObjectRelease(v38, v52);
      if ((v51 & 1) == 0)
      {
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        v69 = type metadata accessor for Logger(0);
        sub_100221DF8(v69, (uint64_t)qword_1007C1EC0);
        v33 = v33;
        v70 = Logger.logObject.getter(v33);
        v71 = static os_log_type_t.error.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          v72 = (uint8_t *)swift_slowAlloc(12, -1);
          v73 = swift_slowAlloc(32, -1);
          v143[0] = v73;
          *(_DWORD *)v72 = 136315138;
          *(_QWORD *)(v0 + 264) = v33;
          v74 = v33;
          v75 = String.init<A>(describing:)(v140, v32);
          v77 = (const char *)v76;
          *(_QWORD *)(v0 + 336) = sub_100228BD8(v75, v76, v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v72 + 4);
          swift_bridgeObjectRelease(v77);

          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unexpected error: %s", v72, 0xCu);
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v72, -1, -1);
        }
        else
        {

        }
        sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
        goto LABEL_43;
      }
    }
    v53 = (id)SFAuthenticationErrorToString(v34);
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    sub_100490A98((int)v34, v54, (uint64_t)v56, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v56);
LABEL_43:

    v30 = *(_QWORD *)(v0 + 272);
    goto LABEL_44;
  }
  v101 = v100;
  v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v100);
  v104 = v103;

  *(_QWORD *)(v0 + 552) = v102;
  *(_QWORD *)(v0 + 560) = v104;
  v105 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v106 = String._bridgeToObjectiveC()();
  v107 = (uint64_t)objc_msgSend(v105, "integerForKey:", v106);

  if (v107 <= 0)
  {
    v120 = *(_QWORD *)(v0 + 560);
    v121 = *(_QWORD *)(v0 + 552);
    v133 = *(void **)(v0 + 480);
    v122 = *(_QWORD *)(v0 + 416);
    v136 = *(void **)(v0 + 544);
    v138 = *(_QWORD *)(v0 + 408);
    v123 = *(_QWORD *)(v0 + 392);
    v142 = *(_QWORD *)(v0 + 400);
    v124 = *(_QWORD *)(v0 + 376);
    v135 = *(_QWORD *)(v0 + 384);
    v125 = *(void **)(v0 + 344);
    sub_100244418(*(_QWORD *)(v0 + 368), v0 + 144);
    v126 = (_QWORD *)swift_allocObject(&unk_10072A700, 80, 7);
    v126[2] = v125;
    v126[3] = v121;
    v126[4] = v120;
    sub_10026EE60((__int128 *)(v0 + 144), (uint64_t)(v126 + 5));
    *(_QWORD *)(v0 + 48) = sub_100491990;
    *(_QWORD *)(v0 + 56) = v126;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_10025BBB4;
    *(_QWORD *)(v0 + 40) = &unk_10072A718;
    v127 = _Block_copy((const void *)(v0 + 16));
    v128 = v125;
    v129 = sub_10022E4A8(v121, v120);
    static DispatchQoS.unspecified.getter(v129);
    *(_QWORD *)(v0 + 296) = _swiftEmptyArrayStorage;
    v130 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v131 = sub_100008384((uint64_t *)&unk_1007B6410);
    v132 = sub_100273050();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 296, v131, v132, v124, v130);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v122, v123, v127);
    _Block_release(v127);
    sub_100225AB4(v121, v120);

    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v123, v124);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v122, v142);
    swift_release(*(_QWORD *)(v0 + 56));
    goto LABEL_45;
  }
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.error.getter(v109);
  if (os_log_type_enabled(v109, v110))
  {
    v111 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v111 = 134217984;
    *(_QWORD *)(v0 + 304) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v111 + 4);
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "### TESTING ONLY: start delaySendingPairingResponse for %ld seconds", v111, 0xCu);
    swift_slowDealloc(v111, -1, -1);
  }

  ContinuousClock.init()(v112);
  v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v113 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v0 + 568) = v113;
  *v113 = v0;
  v113[1] = sub_10048E480;
  return v141(1000000000000000000 * v107, ((unint64_t)v107 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64, 0, 0, 1);
}

uint64_t sub_10048E480()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  *(_QWORD *)(*(_QWORD *)v1 + 576) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[54] + 8))(v2[55], v2[53]);
  if (v0)
    v4 = sub_10048E770;
  else
    v4 = sub_10048E4F4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10048E4F4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.error.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "### TESTING ONLY: end delaySendingPairingResponse", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = *(_QWORD *)(v1 + 560);
  v6 = *(_QWORD *)(v1 + 552);
  v21 = *(void **)(v1 + 480);
  v7 = *(_QWORD *)(v1 + 416);
  v23 = *(void **)(v1 + 544);
  v24 = *(_QWORD *)(v1 + 408);
  v8 = *(_QWORD *)(v1 + 392);
  v25 = *(_QWORD *)(v1 + 400);
  v9 = *(_QWORD *)(v1 + 376);
  v22 = *(_QWORD *)(v1 + 384);
  v10 = *(void **)(v1 + 344);
  sub_100244418(*(_QWORD *)(v1 + 368), v1 + 144);
  v11 = (_QWORD *)swift_allocObject(&unk_10072A700, 80, 7);
  v11[2] = v10;
  v11[3] = v6;
  v11[4] = v5;
  sub_10026EE60((__int128 *)(v1 + 144), (uint64_t)(v11 + 5));
  *(_QWORD *)(v1 + 48) = sub_100491990;
  *(_QWORD *)(v1 + 56) = v11;
  *(_QWORD *)(v1 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v1 + 24) = 1107296256;
  *(_QWORD *)(v1 + 32) = sub_10025BBB4;
  *(_QWORD *)(v1 + 40) = &unk_10072A718;
  v12 = _Block_copy((const void *)(v1 + 16));
  v13 = v10;
  v14 = sub_10022E4A8(v6, v5);
  static DispatchQoS.unspecified.getter(v14);
  *(_QWORD *)(v1 + 296) = _swiftEmptyArrayStorage;
  v15 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100008384((uint64_t *)&unk_1007B6410);
  v17 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 296, v16, v17, v9, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v8, v12);
  _Block_release(v12);
  sub_100225AB4(v6, v5);

  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v7, v25);
  swift_release(*(_QWORD *)(v1 + 56));
  v18 = *(_QWORD *)(v1 + 416);
  v19 = *(_QWORD *)(v1 + 392);
  swift_task_dealloc(*(_QWORD *)(v1 + 440));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10048E770()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  id *v8;
  unint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  char v28;
  double v29;
  id v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = *(void **)(v0 + 480);

  sub_100225AB4(v2, v1);
  v4 = *(_QWORD *)(v0 + 576);
  *(_QWORD *)(v0 + 288) = v4;
  swift_errorRetain(v4);
  v5 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v0 + 232, v0 + 288, v5, &type metadata for SFAuthenticationErrorMessage, 0) & 1) != 0)
  {
    swift_errorRelease(v4);
    v6 = *(const char **)(v0 + 248);
    sub_100490A98(*(_DWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), (uint64_t)v6, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v6);
    v7 = *(_QWORD *)(v0 + 288);
    goto LABEL_22;
  }
  v8 = (id *)(v0 + 328);
  swift_errorRelease(*(_QWORD *)(v0 + 288));
  *(_QWORD *)(v0 + 272) = v4;
  swift_errorRetain(v4);
  v9 = sub_100491920();
  if (swift_dynamicCast(v0 + 328, v0 + 272, v5, v9, 0))
  {
    swift_errorRelease(v4);
    v10 = *v8;
    v11 = objc_msgSend(*v8, "code");
    v12 = objc_msgSend(v10, "domain");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    v18 = v16;
    if (v13 == v17 && v15 == v16)
    {
      swift_bridgeObjectRelease_n(v15, 2);
    }
    else
    {
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v17, v16, 0);
      *(_QWORD *)&v29 = swift_bridgeObjectRelease(v18).n128_u64[0];
      swift_bridgeObjectRelease(v15, v29);
      if ((v28 & 1) == 0)
      {
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        v34 = type metadata accessor for Logger(0);
        sub_100221DF8(v34, (uint64_t)qword_1007C1EC0);
        v10 = v10;
        v35 = Logger.logObject.getter(v10);
        v36 = static os_log_type_t.error.getter(v35);
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc(12, -1);
          v38 = swift_slowAlloc(32, -1);
          v46 = v38;
          *(_DWORD *)v37 = 136315138;
          *(_QWORD *)(v0 + 264) = v10;
          v39 = v10;
          v40 = String.init<A>(describing:)(v0 + 264, v9);
          v42 = (const char *)v41;
          *(_QWORD *)(v0 + 336) = sub_100228BD8(v40, v41, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v37 + 4);
          swift_bridgeObjectRelease(v42);

          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unexpected error: %s", v37, 0xCu);
          swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v37, -1, -1);
        }
        else
        {

        }
        sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
        goto LABEL_21;
      }
    }
    v30 = (id)SFAuthenticationErrorToString(v11);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    sub_100490A98((int)v11, v31, (uint64_t)v33, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v33);
LABEL_21:

    v7 = *(_QWORD *)(v0 + 272);
    goto LABEL_22;
  }
  swift_errorRelease(*(_QWORD *)(v0 + 272));
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v19 = type metadata accessor for Logger(0);
  sub_100221DF8(v19, (uint64_t)qword_1007C1EC0);
  swift_errorRetain(v4);
  v20 = swift_errorRetain(v4);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v46 = v24;
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)(v0 + 280) = v4;
    swift_errorRetain(v4);
    v25 = String.init<A>(describing:)(v0 + 280, v5);
    v27 = (const char *)v26;
    *(_QWORD *)(v0 + 256) = sub_100228BD8(v25, v26, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v23 + 4);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unexpected error: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
  v7 = v4;
LABEL_22:
  swift_errorRelease(v7);
  v43 = *(_QWORD *)(v0 + 416);
  v44 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048ED38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  char v26;
  double v27;
  id v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 504);

  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 536);
  *(_QWORD *)(v0 + 288) = v2;
  swift_errorRetain(v2);
  v3 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v0 + 232, v0 + 288, v3, &type metadata for SFAuthenticationErrorMessage, 0) & 1) != 0)
  {
    swift_errorRelease(v2);
    v4 = *(const char **)(v0 + 248);
    sub_100490A98(*(_DWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), (uint64_t)v4, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v4);
    v5 = *(_QWORD *)(v0 + 288);
    goto LABEL_22;
  }
  v6 = (id *)(v0 + 328);
  swift_errorRelease(*(_QWORD *)(v0 + 288));
  *(_QWORD *)(v0 + 272) = v2;
  swift_errorRetain(v2);
  v7 = sub_100491920();
  if (swift_dynamicCast(v0 + 328, v0 + 272, v3, v7, 0))
  {
    swift_errorRelease(v2);
    v8 = *v6;
    v9 = objc_msgSend(*v6, "code");
    v10 = objc_msgSend(v8, "domain");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    v16 = v14;
    if (v11 == v15 && v13 == v14)
    {
      swift_bridgeObjectRelease_n(v13, 2);
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v14, 0);
      *(_QWORD *)&v27 = swift_bridgeObjectRelease(v16).n128_u64[0];
      swift_bridgeObjectRelease(v13, v27);
      if ((v26 & 1) == 0)
      {
        if (qword_1007B4180 != -1)
          swift_once(&qword_1007B4180, sub_10048A3E8);
        v32 = type metadata accessor for Logger(0);
        sub_100221DF8(v32, (uint64_t)qword_1007C1EC0);
        v8 = v8;
        v33 = Logger.logObject.getter(v8);
        v34 = static os_log_type_t.error.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v36 = swift_slowAlloc(32, -1);
          v44 = v36;
          *(_DWORD *)v35 = 136315138;
          *(_QWORD *)(v0 + 264) = v8;
          v37 = v8;
          v38 = String.init<A>(describing:)(v0 + 264, v7);
          v40 = (const char *)v39;
          *(_QWORD *)(v0 + 336) = sub_100228BD8(v38, v39, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v35 + 4);
          swift_bridgeObjectRelease(v40);

          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unexpected error: %s", v35, 0xCu);
          swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v35, -1, -1);
        }
        else
        {

        }
        sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
        goto LABEL_21;
      }
    }
    v28 = (id)SFAuthenticationErrorToString(v9);
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    sub_100490A98((int)v9, v29, (uint64_t)v31, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_bridgeObjectRelease(v31);
LABEL_21:

    v5 = *(_QWORD *)(v0 + 272);
    goto LABEL_22;
  }
  swift_errorRelease(*(_QWORD *)(v0 + 272));
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v17 = type metadata accessor for Logger(0);
  sub_100221DF8(v17, (uint64_t)qword_1007C1EC0);
  swift_errorRetain(v2);
  v18 = swift_errorRetain(v2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v44 = v22;
    *(_DWORD *)v21 = 136315138;
    *(_QWORD *)(v0 + 280) = v2;
    swift_errorRetain(v2);
    v23 = String.init<A>(describing:)(v0 + 280, v3);
    v25 = (const char *)v24;
    *(_QWORD *)(v0 + 256) = sub_100228BD8(v23, v24, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v21 + 4);
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unexpected error: %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  sub_100490A98(10, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
  v5 = v2;
LABEL_22:
  swift_errorRelease(v5);
  v41 = *(_QWORD *)(v0 + 416);
  v42 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048F2F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  _QWORD v23[5];

  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100221DF8(v8, (uint64_t)qword_1007C1EC0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sending authentication pairing response", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = a1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, v20, 0, 0);
  sub_100221F28(v13, (uint64_t)&v21, &qword_1007BFF70);
  if (v22)
  {
    sub_10026EE60(&v21, (uint64_t)v23);
    sub_10023A834(v23, v23[3]);
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
      v14 = *(_BYTE *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType);
    else
      v14 = sub_1003FD808(*(_QWORD *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type));
    sub_100560A88(a2, a3, a4, 4, v14);
    sub_10022E75C(v23);
  }
  else
  {
    v15 = sub_10000D0F0((uint64_t)&v21, &qword_1007BFF70);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Warning: No delegate to send response to", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  return sub_1003FCE8C(0, 1);
}

void sub_10048F52C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  int v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  NSString v48;
  uint64_t v49;
  id v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  NSString v55;
  void *v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint8_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  NSObject *v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  const char *v94;
  const char *v95;
  char *v96;
  os_log_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  const char *v101;
  const char *v102;
  NSString v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  const char *v111;
  const char *v112;
  NSString v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  uint8_t *v118;
  uint8_t *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  os_log_t v128;
  NSString v129;
  uint64_t v130;
  unint64_t v131;
  id v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137[32];
  __int128 v138;
  uint64_t v139;
  char v140[24];
  uint64_t v141;
  const char *v142[2];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[2];
  const char *v146;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1007B4180 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B4180, sub_10048A3E8);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100221DF8(v9, (uint64_t)qword_1007C1EC0);
  v11 = a1;
  v12 = v1;
  v13 = v11;
  v14 = v12;
  v136 = v10;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v135 = swift_slowAlloc(32, -1);
    v145[0] = v135;
    *(_DWORD *)v17 = 138412546;
    v141 = (uint64_t)v13;
    v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v17 + 4);
    *v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    v21 = UUID.uuidString.getter(v20);
    v23 = (const char *)v22;
    v141 = sub_100228BD8(v21, v22, v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v17 + 14);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received authentication pairing create secret: %@ for sessionID %s", (uint8_t *)v17, 0x16u);
    v24 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v18, 1, v24);
    swift_slowDealloc(v18, -1, -1);
    v25 = v135;
    swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  sub_1003FD560();
  v26 = (uint64_t)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v140, 0, 0);
  sub_100221F28(v26, (uint64_t)&v141, &qword_1007B9E38);
  sub_100221F28((uint64_t)&v141, (uint64_t)&v138, &qword_1007B9E38);
  if (v139)
  {
    sub_10026EE60(&v138, (uint64_t)v145);
    sub_10000D0F0((uint64_t)&v141, &qword_1007B9E38);
    v27 = objc_msgSend(v13, "token");
    if (v27)
    {
      v28 = v27;
      v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      v32 = *(_QWORD *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession];
      swift_retain();
      v42 = sub_100530B30(v29, v31);
      swift_release(v32);
      v43 = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationPairingCreateRecord), "init");
      if (v43)
      {
        v44 = v43;
        v45 = 0xD000000000000015;
        v133 = &v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID];
        UUID.uuidString.getter(v43);
        v47 = v46;
        v48 = String._bridgeToObjectiveC()();
        objc_msgSend(v44, "setSessionID:", v48, swift_bridgeObjectRelease(v47).n128_f64[0]);

        objc_msgSend(v44, "setToken:", v42);
        v49 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
        objc_msgSend(v44, "setRequestArmingUI:", v14[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI]);
        v50 = objc_msgSend(v44, "data");
        if (v50)
        {
          v51 = v50;
          v132 = v42;
          v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v53 = v52;

          v54 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
          v55 = String._bridgeToObjectiveC()();
          v135 = (uint64_t)v14;
          v56 = v55;
          v57 = objc_msgSend(v54, "BOOLForKey:", v55);

          v58 = v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
          swift_beginAccess(v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, v137, 0, 0);
          sub_100221F28(v58, (uint64_t)&v138, &qword_1007BFF70);
          if (v139)
          {
            v131 = v53;
            v59 = sub_10026EE60(&v138, (uint64_t)&v141);
            if ((v57 & 1) != 0)
            {
              v60 = Logger.logObject.getter(v59);
              v61 = static os_log_type_t.error.getter(v60);
              if (os_log_type_enabled(v60, v61))
              {
                v62 = v58;
                v63 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v63 = 0;
                _os_log_impl((void *)&_mh_execute_header, v60, v61, "### TESTING ONLY: Skip sending authentication pairing create record due to default skipSendAuthenticationPairingCreateRecord", v63, 2u);
                v64 = v63;
                v58 = v62;
                swift_slowDealloc(v64, -1, -1);
              }

            }
            else
            {
              sub_10023A834(&v141, v143);
              if (*(_BYTE *)(v135 + v49) == 1)
                v75 = *(_BYTE *)(v135
                               + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType);
              else
                v75 = sub_1003FD808(*(_QWORD *)(v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type));
              sub_100560A88(v134, v131, v145, 5, v75);
            }
            v76 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
            v77 = (char *)v135;
            if (*(_QWORD *)(v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type) == 5)
              sub_1003FCE8C(0, 1);
            sub_10022E75C(&v141);
            v78 = *(_QWORD *)&v77[v76];
            if (v78 != 3)
            {
LABEL_54:
              if (v78 == 5)
              {
                sub_10022E75C(v145);

                sub_100225AB4(v134, v131);
                sub_100225AB4(v29, (unint64_t)v31);
              }
              else
              {
                sub_100221F28(v58, (uint64_t)&v141, &qword_1007BFF70);
                if (v143)
                {
                  sub_100244418((uint64_t)&v141, (uint64_t)&v138);
                  sub_10000D0F0((uint64_t)&v141, &qword_1007BFF70);
                  v120 = (char *)*sub_10023A834(&v138, v139);
                  v121 = v77;
                  sub_1003EE234(v121, v120);
                  sub_100225AB4(v134, v131);
                  sub_100225AB4(v29, (unint64_t)v31);

                  sub_10022E75C(v145);
                  sub_10022E75C(&v138);
                }
                else
                {
                  sub_10022E75C(v145);

                  sub_100225AB4(v134, v131);
                  sub_100225AB4(v29, (unint64_t)v31);
                  sub_10000D0F0((uint64_t)&v141, &qword_1007BFF70);
                }
              }
              return;
            }
            v79 = v77;
            v80 = Logger.logObject.getter(v79);
            LODWORD(v129) = static os_log_type_t.info.getter();
            v81 = os_log_type_enabled(v80, (os_log_type_t)v129);
            v130 = v58;
            if (!v81)
            {

LABEL_44:
              v99 = (char *)objc_msgSend((id)objc_opt_self(SDAutoUnlockAKSManager), "sharedManager");
              if (!v99)
              {
                __break(1u);
                return;
              }
              v100 = v99;
              UUID.uuidString.getter(v99);
              v102 = v101;
              v103 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v102);
              sub_100221F28(v26, (uint64_t)&v141, &qword_1007B9E38);
              v104 = v143;
              if (v143)
              {
                v129 = v103;
                v133 = v100;
                v105 = v76;
                v106 = v144;
                v107 = sub_10023A834(&v141, v143);
                v128 = (os_log_t)&v122;
                v108 = *(_QWORD *)(v104 - 8);
                __chkstk_darwin(v107);
                v110 = (char *)&v122 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *))(v108 + 16))(v110);
                sub_10000D0F0((uint64_t)&v141, &qword_1007B9E38);
                (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v106);
                v112 = v111;
                (*(void (**)(char *, uint64_t))(v108 + 8))(v110, v104);
                if (v112)
                {
                  v113 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v112);
                }
                else
                {
                  v113 = 0;
                }
                v77 = (char *)v135;
                v58 = v130;
                v76 = v105;
                v100 = v133;
                v103 = v129;
              }
              else
              {
                sub_10000D0F0((uint64_t)&v141, &qword_1007B9E38);
                v113 = 0;
                v58 = v130;
              }
              objc_msgSend(v100, "setPairingID:forWatchID:", v103, v113);

              v115 = Logger.logObject.getter(v114);
              v116 = static os_log_type_t.default.getter(v115);
              if (os_log_type_enabled(v115, v116))
              {
                v117 = v58;
                v118 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v118 = 0;
                _os_log_impl((void *)&_mh_execute_header, v115, v116, "Pairing enabled", v118, 2u);
                v119 = v118;
                v58 = v117;
                swift_slowDealloc(v119, -1, -1);
              }

              v78 = *(_QWORD *)&v77[v76];
              goto LABEL_54;
            }
            v128 = v80;
            v126 = v76;
            v82 = swift_slowAlloc(22, -1);
            v83 = swift_slowAlloc(64, -1);
            v127 = v83;
            *(_QWORD *)&v138 = v83;
            *(_DWORD *)v82 = 136315394;
            v84 = UUID.uuidString.getter(v83);
            v86 = (const char *)v85;
            v141 = sub_100228BD8(v84, v85, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v82 + 4);

            swift_bridgeObjectRelease(v86);
            *(_WORD *)(v82 + 12) = 2080;
            sub_100221F28(v26, (uint64_t)&v141, &qword_1007B9E38);
            v87 = v143;
            if (v143)
            {
              v88 = v144;
              v89 = sub_10023A834(&v141, v143);
              v124 = &v122;
              v90 = *(_QWORD *)(v87 - 8);
              __chkstk_darwin(v89);
              v125 = v79;
              v92 = v82;
              v93 = (char *)&v122 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *))(v90 + 16))(v93);
              sub_10000D0F0((uint64_t)&v141, &qword_1007B9E38);
              v123 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8))(v87, v88);
              v95 = v94;
              v96 = v93;
              v82 = v92;
              v79 = v125;
              (*(void (**)(char *, uint64_t))(v90 + 8))(v96, v87);
              if (v95)
              {
                v45 = v123;
LABEL_43:
                v76 = v126;
                v141 = sub_100228BD8(v45, (unint64_t)v95, (uint64_t *)&v138);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v82 + 14);

                swift_bridgeObjectRelease(v95);
                v97 = v128;
                _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v129, "Setting pairing ID: %s for device: %s", (uint8_t *)v82, 0x16u);
                v98 = v127;
                swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v98, -1, -1);
                swift_slowDealloc(v82, -1, -1);

                v77 = (char *)v135;
                goto LABEL_44;
              }
            }
            else
            {
              sub_10000D0F0((uint64_t)&v141, &qword_1007B9E38);
            }
            v141 = 0;
            v142[0] = (const char *)0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease(v142[0]);
            v95 = (const char *)0x8000000100612DF0;
            goto LABEL_43;
          }
          sub_10000D0F0((uint64_t)&v138, &qword_1007BFF70);
          v141 = 0;
          v142[0] = (const char *)0xE000000000000000;
          _StringGuts.grow(_:)(61);
          v69._countAndFlagsBits = 0xD00000000000003BLL;
          v69._object = (void *)0x800000010061CC30;
          String.append(_:)(v69);
          v70._countAndFlagsBits = 0x5F28656C646E6168;
          v70._object = (void *)0xEA0000000000293ALL;
          String.append(_:)(v70);
          v71 = v141;
          v72 = v142[0];
          v73 = sub_100244304();
          v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v73, 0, 0);
          *(_DWORD *)v74 = 25;
          *(_QWORD *)(v74 + 8) = v71;
          *(_QWORD *)(v74 + 16) = v72;
          swift_willThrow(v34);
          sub_100225AB4(v134, v53);
          sub_100225AB4(v29, (unint64_t)v31);

        }
        else
        {
          v67 = sub_100244304();
          v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v67, 0, 0);
          *(_DWORD *)v68 = 10;
          *(_QWORD *)(v68 + 8) = 0xD000000000000020;
          *(_QWORD *)(v68 + 16) = 0x80000001006159A0;
          swift_willThrow(v34);
          sub_100225AB4(v29, (unint64_t)v31);

        }
      }
      else
      {
        v65 = sub_100244304();
        v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v65, 0, 0);
        *(_DWORD *)v66 = 10;
        *(_QWORD *)(v66 + 8) = 0xD00000000000003ELL;
        *(_QWORD *)(v66 + 16) = 0x800000010061CBF0;
        swift_willThrow(v34);
        sub_100225AB4(v29, (unint64_t)v31);

      }
    }
    else
    {
      v36 = sub_100244304();
      v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v36, 0, 0);
      *(_DWORD *)v37 = 10;
      strcpy((char *)(v37 + 8), "Missing token");
      *(_WORD *)(v37 + 22) = -4864;
      swift_willThrow(v34);
    }
    sub_10022E75C(v145);
  }
  else
  {
    sub_10000D0F0((uint64_t)&v138, &qword_1007B9E38);
    v33 = sub_100244304();
    v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v33, 0, 0);
    *(_DWORD *)v35 = 10;
    *(_QWORD *)(v35 + 8) = 0xD00000000000001BLL;
    *(_QWORD *)(v35 + 16) = 0x800000010061CBD0;
    swift_willThrow(v34);
    sub_10000D0F0((uint64_t)&v141, &qword_1007B9E38);
  }
  v141 = v34;
  swift_errorRetain(v34);
  v38 = sub_100008384(&qword_1007B5A60);
  if (swift_dynamicCast(v145, &v141, v38, &type metadata for SFAuthenticationErrorMessage, 6))
  {
    v39 = v146;
    sub_100490A98(v145[0], v145[1], (uint64_t)v146, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_errorRelease(v34);
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    v145[0] = v34;
    swift_errorRetain(v34);
    type metadata accessor for SFAuthenticationError(0);
    if (swift_dynamicCast(&v141, v145, v38, v40, 6))
      v41 = v141;
    else
      v41 = 25;
    sub_100490A98(v41, 0, 0xE000000000000000, (uint64_t)&unk_10072A750, (uint64_t)sub_1004919BC, (uint64_t)&unk_10072A768);
    swift_errorRelease(v34);
  }
}

void sub_100490570(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1007B4180 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B4180, sub_10048A3E8);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100221DF8(v9, (uint64_t)qword_1007C1EC0);
  v11 = a1;
  v12 = v1;
  v13 = v11;
  v14 = v12;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v47 = swift_slowAlloc(32, -1);
    v49 = v47;
    *(_DWORD *)v17 = 138412546;
    v52 = (uint64_t)v13;
    v19 = v13;
    v48 = v10;
    v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v17 + 4);
    *v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    v22 = UUID.uuidString.getter(v21);
    v24 = (const char *)v23;
    v52 = sub_100228BD8(v22, v23, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v17 + 14);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received authentication pairing response: %@ for sessionID %s", (uint8_t *)v17, 0x16u);
    v25 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v18, 1, v25);
    swift_slowDealloc(v18, -1, -1);
    v26 = v47;
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v27 = objc_msgSend(v13, "hasErrorCode");
  if ((v27 & 1) != 0)
  {
    v28 = objc_msgSend(v13, "errorCode");
    v49 = 0;
    v50 = (const char *)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(v50);
    v49 = 0xD00000000000001ELL;
    v50 = (const char *)0x8000000100615A90;
    v29 = (id)SFAuthenticationErrorToString(v28);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease((const char *)v32);
    v34 = v49;
    v35 = v50;
    v36 = sub_100244304();
    v37 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v36, 0, 0);
    *(_DWORD *)v38 = (_DWORD)v28;
    *(_QWORD *)(v38 + 8) = v34;
    *(_QWORD *)(v38 + 16) = v35;
    swift_willThrow(v37);
    v52 = v37;
    swift_errorRetain(v37);
    swift_errorRetain(v37);
    v39 = sub_100008384(&qword_1007B5A60);
    if (swift_dynamicCast(&v49, &v52, v39, &type metadata for SFAuthenticationErrorMessage, 6))
    {
      v40 = v51;
      sub_100490A98(v49, (uint64_t)v50, (uint64_t)v51, (uint64_t)&unk_10072A7A0, (uint64_t)sub_100491D0C, (uint64_t)&unk_10072A7B8);
      swift_errorRelease(v37);
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      v49 = v37;
      swift_errorRetain(v37);
      type metadata accessor for SFAuthenticationError(0);
      if (swift_dynamicCast(&v52, &v49, v39, v44, 6))
        v45 = v52;
      else
        v45 = 25;
      sub_100490A98(v45, 0, 0xE000000000000000, (uint64_t)&unk_10072A7A0, (uint64_t)sub_100491D0C, (uint64_t)&unk_10072A7B8);
      swift_errorRelease(v37);
    }
    swift_errorRelease(v37);
  }
  else
  {
    v41 = Logger.logObject.getter(v27);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Got message that should include error but didn't include error", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

  }
}

uint64_t sub_100490A98(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v27 = a6;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  v18 = swift_allocObject(a4, 48, 7);
  *(_QWORD *)(v18 + 16) = v6;
  *(_DWORD *)(v18 + 24) = a1;
  *(_QWORD *)(v18 + 32) = a2;
  *(_QWORD *)(v18 + 40) = a3;
  aBlock[4] = a5;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = v27;
  v19 = _Block_copy(aBlock);
  v20 = v6;
  v21 = swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100008384((uint64_t *)&unk_1007B6410);
  v24 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v29);
  return swift_release(v33);
}

void sub_100490C8C(uint64_t a1, uint64_t a2, char *a3)
{
  _BYTE *v3;
  _BYTE *v4;
  NSObject *v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject **v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[5];
  char v52[24];
  char v53[24];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];

  v4 = v3;
  v8 = objc_msgSend(objc_allocWithZone((Class)SDAuthenticationPairingResponse), "init");
  v9 = v8;
  v10 = &qword_1007B4000;
  if (v8)
  {
    -[NSObject setVersion:](v8, "setVersion:", 1);
    v11 = a2;
    v12 = v9;
    UUID.uuidString.getter(v12);
    v14 = v13;
    v15 = String._bridgeToObjectiveC()();
    -[NSObject setSessionID:](v12, "setSessionID:", v15, swift_bridgeObjectRelease(v14).n128_f64[0]);

    -[NSObject setErrorCode:](v12, "setErrorCode:", a1);
    v16 = v12;
    a2 = v11;
    v17 = -[NSObject data](v16, "data");
    if (v17)
    {
      v18 = v17;
      v19 = a1;
      v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v22 = v21;

      v23 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
      swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v53, 0, 0);
      sub_100221F28(v23, (uint64_t)&v54, &qword_1007B9E38);
      if (v55)
      {
        sub_10026EE60(&v54, (uint64_t)&v56);
        v24 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
        swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v52, 0, 0);
        sub_100221F28(v24, (uint64_t)&v54, &qword_1007BFF70);
        if (v55)
        {
          sub_100244418((uint64_t)&v54, (uint64_t)v51);
          sub_10000D0F0((uint64_t)&v54, &qword_1007BFF70);
          sub_10023A834(v51, v51[3]);
          if (v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI] == 1)
            v25 = v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType];
          else
            v25 = sub_1003FD808(*(_QWORD *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]);
          sub_100560A88(v20, v22, &v56, 4, v25);
          sub_100225AB4(v20, v22);
          sub_10022E75C(&v56);
          sub_10022E75C(v51);
        }
        else
        {
          sub_10022E75C(&v56);
          sub_100225AB4(v20, v22);
          sub_10000D0F0((uint64_t)&v54, &qword_1007BFF70);
        }
        a1 = v19;
        goto LABEL_20;
      }
      sub_100225AB4(v20, v22);
      sub_10000D0F0((uint64_t)&v54, &qword_1007B9E38);
      a1 = v19;
    }
  }
  v50 = a2;
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v26 = type metadata accessor for Logger(0);
  sub_100221DF8(v26, (uint64_t)qword_1007C1EC0);
  v27 = v9;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v49 = a3;
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v30 = 138412290;
    if (v9)
    {
      v56 = (uint64_t)v27;
      v32 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4);
      v33 = v9;
    }
    else
    {
      v56 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4);
      v33 = 0;
    }
    *v31 = v33;

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Could not convert response to data: %@", v30, 0xCu);
    v34 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v31, 1, v34);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    a3 = v49;
    a2 = v50;
    a1 = a1;
    v10 = &qword_1007B4000;
  }
  else
  {

    v10 = &qword_1007B4000;
  }
LABEL_20:
  v35 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v51, 0, 0);
  sub_100221F28(v35, (uint64_t)&v56, &qword_1007BFF70);
  if (v57[2])
  {
    sub_100244418((uint64_t)&v56, (uint64_t)&v54);
    sub_10000D0F0((uint64_t)&v56, &qword_1007BFF70);
    v36 = (char *)*sub_10023A834(&v54, v55);
    v37 = v4;
    sub_100388700(v37, a1, a2, a3, v36);

    sub_10022E75C(&v54);
  }
  else
  {
    sub_10000D0F0((uint64_t)&v56, &qword_1007BFF70);
  }
  if (v10[48] != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v38 = type metadata accessor for Logger(0);
  sub_100221DF8(v38, (uint64_t)qword_1007C1EC0);
  v39 = swift_bridgeObjectRetain_n(a3, 2);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v42 = 138412290;
    v44 = sub_100244304();
    v45 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v44, 0, 0);
    *(_DWORD *)v46 = a1;
    *(_QWORD *)(v46 + 8) = a2;
    *(_QWORD *)(v46 + 16) = a3;
    swift_bridgeObjectRetain(a3);
    v47 = _swift_stdlib_bridgeErrorToNSError(v45);
    v56 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v42 + 4);
    *v43 = v47;
    swift_bridgeObjectRelease_n(a3, 2);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Session failed with error: %@", v42, 0xCu);
    v48 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v43, 1, v48);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    v40 = v9;
  }

}

uint64_t sub_100491328()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1007B4180 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B4180, sub_10048A3E8);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_100221DF8(v7, (uint64_t)qword_1007C1EC0);
  v8 = v0;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v20 = v12;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    v17 = (const char *)v16;
    v19 = sub_100228BD8(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Response timer fired for %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  sub_100490A98(12, 0xD000000000000035, 0x800000010061CC90, (uint64_t)&unk_10072A7A0, (uint64_t)sub_100491D0C, (uint64_t)&unk_10072A7B8);
  return sub_1003FD560();
}

uint64_t sub_1004915D0(char *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD v12[5];
  char v13[24];
  _BYTE v14[24];
  uint64_t v15;

  v8 = (uint64_t)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v13, 0, 0);
  sub_100221F28(v8, (uint64_t)v14, &qword_1007BFF70);
  if (!v15)
    return sub_10000D0F0((uint64_t)v14, &qword_1007BFF70);
  sub_100244418((uint64_t)v14, (uint64_t)v12);
  sub_10000D0F0((uint64_t)v14, &qword_1007BFF70);
  v9 = (char *)*sub_10023A834(v12, v12[3]);
  v10 = a1;
  sub_100388700(v10, a2, a3, a4, v9);

  return sub_10022E75C(v12);
}

uint64_t sub_1004916B8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession));
}

uint64_t sub_1004916D8()
{
  return type metadata accessor for SDAuthenticationPairingKeySession(0);
}

uint64_t type metadata accessor for SDAuthenticationPairingKeySession(uint64_t a1)
{
  uint64_t result;

  result = qword_1007C1F10;
  if (!qword_1007C1F10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAuthenticationPairingKeySession);
  return result;
}

uint64_t sub_10049171C(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_1005DA078;
  v2[1] = &unk_1005DA090;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_updateClassMetadata2(a1, 256, 3, v2, a1 + 264);
}

uint64_t sub_100491774()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI);
}

uint64_t sub_100491788(uint64_t result)
{
  _QWORD *v1;

  *(_BYTE *)(*v1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) = result;
  return result;
}

uint64_t sub_10049179C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for AuthenticationSecurityRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v8 = v0 + *(int *)(v1 + 20) + v4;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  sub_10022E75C((_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 40, v5);
}

uint64_t sub_10049185C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for AuthenticationSecurityRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + v6);
  v12 = (uint64_t)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)swift_task_alloc(dword_1007C1F24);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10000D12C;
  return sub_10048B094(a1, v7, v8, v9, v10, v11, v12);
}

unint64_t sub_100491920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B57B0;
  if (!qword_1007B57B0)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1007B57B0);
  }
  return result;
}

uint64_t sub_10049195C()
{
  uint64_t v0;

  sub_100225AB4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10022E75C((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100491990()
{
  uint64_t *v0;

  return sub_10048F2F0(v0[2], v0[3], v0[4], v0 + 5);
}

uint64_t sub_1004919A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004919B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1004919BC()
{
  uint64_t v0;

  sub_100490C8C(*(unsigned int *)(v0 + 24), *(_QWORD *)(v0 + 32), *(char **)(v0 + 40));
}

char *sub_1004919E8(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  char *result;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  objc_class *v26;
  id v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _BYTE v37[24];
  objc_super v38;
  __int128 v39[2];

  v34 = a4;
  v35 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI] = 0;
  v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType] = 3;
  v36 = (_QWORD *)a3;
  sub_100244418(a3, (uint64_t)v39);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15 = a2;
  v14(v13, (uint64_t)a2, v7);
  v16 = type metadata accessor for SDAuthenticationAKSPairingSession(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_aksSession) = 0;
  v18 = (void *)objc_opt_self(SDAutoUnlockAKSManager);
  v19 = v4;
  result = (char *)objc_msgSend(v18, "sharedManager");
  if (result)
  {
    *(_QWORD *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_aksManager) = result;
    *(_BYTE *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_role) = 1;
    sub_10026EE60(v39, v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_sessionID, v13, v7);
    v21 = v34;
    *(_QWORD *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_type) = v34;
    *(_QWORD *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession] = v17;

    v22 = v15;
    v14(v11, (uint64_t)v15, v7);
    v23 = &v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    *((_QWORD *)v23 + 4) = 0;
    v24 = &v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    *((_QWORD *)v24 + 4) = 0;
    *(_QWORD *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer] = 0;
    v25 = v35;
    *(_QWORD *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue] = v35;
    v14(&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID], (uint64_t)v11, v7);
    *(_QWORD *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] = v21;
    v26 = (objc_class *)type metadata accessor for SDAuthenticationSession(0);
    v38.receiver = v19;
    v38.super_class = v26;
    v27 = v25;
    v28 = (char *)objc_msgSendSuper2(&v38, "init");
    v29 = *(void (**)(char *, uint64_t))(v8 + 8);
    v29(v11, v7);
    v30 = v36;
    sub_100244418((uint64_t)v36, (uint64_t)v39);
    v31 = (uint64_t)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
    swift_beginAccess(&v28[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v37, 33, 0);
    v32 = v28;
    sub_1002EF060((uint64_t)v39, v31);
    swift_endAccess(v37);

    sub_10022E75C(v30);
    v29(v22, v7);
    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100491CE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100491D0C()
{
  uint64_t v0;

  return sub_1004915D0(*(char **)(v0 + 16), *(unsigned int *)(v0 + 24), *(_QWORD *)(v0 + 32), *(char **)(v0 + 40));
}

id sub_100491D1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  void (*v22)(char *, uint64_t);
  id result;
  void *v24;
  const char *v25;
  const char *v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  const char *v36;
  double v37;
  NSString v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _QWORD v46[2];
  char v47[24];
  uint64_t v48[5];
  char v49[24];
  char v50[24];
  uint64_t v51;
  const char *v52[2];
  uint64_t v53;
  uint64_t v54;

  sub_1003FD560();
  if (qword_1007B4180 != -1)
    swift_once(&qword_1007B4180, sub_10048A3E8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C1EC0);
  v3 = v0;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v4, v5))
  {

    goto LABEL_11;
  }
  v46[1] = v2;
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v48[0] = v7;
  *(_DWORD *)v6 = 136315394;
  v8 = UUID.uuidString.getter(v7);
  v10 = (const char *)v9;
  v51 = sub_100228BD8(v8, v9, v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v6 + 4);

  swift_bridgeObjectRelease(v10);
  *(_WORD *)(v6 + 12) = 2080;
  v11 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v47, 0, 0);
  sub_100221F28(v11, (uint64_t)&v51, &qword_1007B9E38);
  v12 = v53;
  if (!v53)
  {
    sub_10000D0F0((uint64_t)&v51, &qword_1007B9E38);
LABEL_9:
    v51 = 0;
    v52[0] = (const char *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v52[0]);
    v21 = (const char *)0x8000000100612DF0;
    v19 = 0xD000000000000015;
    goto LABEL_10;
  }
  v13 = v54;
  v14 = sub_10023A834(&v51, v53);
  v46[0] = v46;
  v15 = v7;
  v16 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v18);
  sub_10000D0F0((uint64_t)&v51, &qword_1007B9E38);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v7 = v15;
  v22(v18, v12);
  if (!v21)
    goto LABEL_9;
LABEL_10:
  v51 = sub_100228BD8(v19, (unint64_t)v21, v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v6 + 14);

  swift_bridgeObjectRelease(v21);
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Setting pairing ID: %s for device: %s", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_11:
  result = objc_msgSend((id)objc_opt_self(SDAutoUnlockAKSManager), "sharedManager");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v24 = result;
  UUID.uuidString.getter(result);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v28 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v50, 0, 0);
  sub_100221F28(v28, (uint64_t)&v51, &qword_1007B9E38);
  v29 = v53;
  if (!v53)
  {
    sub_10000D0F0((uint64_t)&v51, &qword_1007B9E38);
    goto LABEL_16;
  }
  v30 = v54;
  v31 = sub_10023A834(&v51, v53);
  v32 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)v46 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v32 + 16))(v34);
  sub_10000D0F0((uint64_t)&v51, &qword_1007B9E38);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v29);
  if (!v36)
  {
LABEL_16:
    v38 = 0;
    goto LABEL_17;
  }
  v38 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v37 = swift_bridgeObjectRelease(v36).n128_u64[0];
LABEL_17:
  objc_msgSend(v24, "setPairingID:forWatchID:", v27, v38, v37);

  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Pairing enabled", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  if (*(_QWORD *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] != 8)
  {
    if (qword_1007B42C8 != -1)
      swift_once(&qword_1007B42C8, sub_1005478B0);
    if (qword_1007D88A8)
      sub_100547314();
  }
  v43 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v49, 0, 0);
  sub_100221F28(v43, (uint64_t)&v51, &qword_1007BFF70);
  if (!v53)
    return (id)sub_10000D0F0((uint64_t)&v51, &qword_1007BFF70);
  sub_100244418((uint64_t)&v51, (uint64_t)v48);
  sub_10000D0F0((uint64_t)&v51, &qword_1007BFF70);
  v44 = (char *)*sub_10023A834(v48, v48[3]);
  v45 = v3;
  sub_1003EE234(v45, v44);

  return (id)sub_10022E75C(v48);
}

uint64_t sub_10049233C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C1F30);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C1F30);
  if (qword_1007B3E90 != -1)
    swift_once(&qword_1007B3E90, sub_1002E9F5C);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8280);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t type metadata accessor for SDContactChangeHistoryEvent()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary27SDContactChangeHistoryEvent);
}

uint64_t type metadata accessor for SDContactChangeHistoryDropEverythingEvent()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary41SDContactChangeHistoryDropEverythingEvent);
}

void sub_10049240C()
{
  uint64_t v0;

}

uint64_t type metadata accessor for SDContactChangeHistoryAddEvent()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary30SDContactChangeHistoryAddEvent);
}

uint64_t sub_100492434()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for SDContactChangeHistoryDeleteEvent()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary33SDContactChangeHistoryDeleteEvent);
}

uint64_t type metadata accessor for SDContactChangeHistoryUpdateEvent()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary33SDContactChangeHistoryUpdateEvent);
}

uint64_t sub_10049247C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  id v4;
  Class isa;
  Class v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(objc_allocWithZone((Class)CNChangeHistoryFetchRequest), "init");
  if (a2 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setStartingToken:", isa);

  objc_msgSend(v4, "setShouldUnifyResults:", 1);
  objc_msgSend(v4, "setIncludeGroupChanges:", 0);
  if (qword_1007B40F0 != -1)
    swift_once(&qword_1007B40F0, sub_10044243C);
  sub_100008384((uint64_t *)&unk_1007C0E40);
  v6 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "setAdditionalContactKeyDescriptors:", v6);

  v7 = sub_100492AE0((uint64_t)v4);
  if (v2)
    return v8;
  else
    return v7;
}

uint64_t sub_1004925C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  id v20;
  id v21;
  char isEscapingClosureAtFileLocation;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v35[3];
  char v36[8];
  uint64_t v37;
  uint64_t v38;
  id aBlock[5];
  uint64_t v40;
  uint64_t v41;

  if (qword_1007B40F8 != -1)
    swift_once(&qword_1007B40F8, sub_1004424A0);
  v5 = qword_1007D8490;
  v6 = objc_allocWithZone((Class)CNContactFetchRequest);
  swift_bridgeObjectRetain(v5);
  sub_100008384((uint64_t *)&unk_1007C0E40);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v6, "initWithKeysToFetch:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  v9 = (void *)objc_opt_self(CNContact);
  v10 = sub_100008384(&qword_1007B54A0);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v12 = Array._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v9, "predicateForContactsWithIdentifiers:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  objc_msgSend(v8, "setPredicate:", v13);
  v41 = 0;
  v14 = *(void **)(v2 + 32);
  v15 = swift_allocObject(&unk_10072A840, 24, 7);
  *(_QWORD *)(v15 + 16) = &v41;
  v16 = swift_allocObject(&unk_10072A868, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100493248;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = sub_100287F38;
  v40 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100492A9C;
  aBlock[3] = &unk_10072A880;
  v17 = _Block_copy(aBlock);
  v18 = v40;
  swift_retain(v16);
  swift_release(v18);
  aBlock[0] = 0;
  v19 = objc_msgSend(v14, "enumerateContactsWithFetchRequest:error:usingBlock:", v8, aBlock, v17);
  _Block_release(v17);
  v20 = aBlock[0];
  v21 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v16, "", 85, 88, 4, 1);
  swift_release(v16);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_1007B4188, sub_10049233C);
    goto LABEL_7;
  }
  if (v19)
  {

    goto LABEL_10;
  }
  v20 = (id)_convertNSErrorToError(_:)(v20);

  swift_willThrow(v23);
  if (qword_1007B4188 != -1)
    goto LABEL_12;
LABEL_7:
  v24 = type metadata accessor for Logger(0);
  sub_100221DF8(v24, (uint64_t)qword_1007C1F30);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(v20);
  swift_bridgeObjectRetain(a2);
  v25 = swift_errorRetain(v20);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = (void *)swift_slowAlloc(64, -1);
    aBlock[0] = v29;
    *(_DWORD *)v28 = 136315394;
    swift_bridgeObjectRetain(a2);
    v37 = sub_100228BD8(a1, a2, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v28 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v28 + 12) = 2080;
    swift_getErrorValue(v20, v36, v35);
    v30 = Error.localizedDescription.getter(v35[1], v35[2]);
    v32 = v31;
    v37 = sub_100228BD8(v30, v31, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v28 + 14);
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to find contact with contact identifier %s, error: %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    swift_errorRelease(v20);
  }
  else
  {

    swift_errorRelease(v20);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_errorRelease(v20);
    swift_errorRelease(v20);

  }
LABEL_10:
  v33 = v41;
  swift_release(v15);
  return v33;
}

void sub_100492A9C(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_100492AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  SDContactFetchResult *v4;
  SDContactFetchResult *v5;
  id v6;
  NSArray *v7;
  unint64_t v8;
  const char *v9;
  NSData *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  id v21;

  v3 = *(void **)(v1 + 32);
  v21 = 0;
  v4 = sub_1001959A4(a1, v3, &v21);
  v5 = v4;
  if (v21)
  {
    v6 = v21;
    swift_willThrow(v6);

  }
  else if (v4)
  {
    v7 = -[SDContactFetchResult events](v4, "events");
    v8 = sub_100492DC0();
    v9 = (const char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    v10 = -[SDContactFetchResult currentHistoryToken](v5, "currentHistoryToken");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);

    sub_100492DFC((uint64_t)v9);
    v2 = v11;

    swift_bridgeObjectRelease(v9);
  }
  else
  {
    if (qword_1007B4188 != -1)
      swift_once(&qword_1007B4188, sub_10049233C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100221DF8(v13, (uint64_t)qword_1007C1F30);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetch result should not be nil since no error was reported", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = sub_100492D7C();
    v19 = swift_allocError(&type metadata for Errno, v18, 0, 0);
    *v20 = 104;
    swift_willThrow(v19);
  }
  return v2;
}

uint64_t type metadata accessor for SDContactStore()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary14SDContactStore);
}

uint64_t sub_100492D14()
{
  NSString v0;
  id v1;
  uint64_t v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = sub_10019CBA4(v0);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t sub_100492D7C()
{
  unint64_t result;

  result = qword_1007C2340;
  if (!qword_1007C2340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Errno, &type metadata for Errno);
    atomic_store(result, (unint64_t *)&qword_1007C2340);
  }
  return result;
}

unint64_t sub_100492DC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007C2348;
  if (!qword_1007C2348)
  {
    v1 = objc_opt_self(CNChangeHistoryEvent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1007C2348);
  }
  return result;
}

void sub_100492DFC(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  CFDictionaryRef (__cdecl **v5)(CFErrorRef);
  CFDictionaryRef (__cdecl **v6)(CFErrorRef);
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  CFDictionaryRef (__cdecl **v23)(CFErrorRef);
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  CFDictionaryRef (__cdecl **v42)(CFErrorRef);
  unint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v49 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v46 = a1;
    else
      v46 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain((const char *)a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v46);
    if (v2)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease((const char *)a1, v3);
    return;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)&v3 = swift_bridgeObjectRetain((const char *)a1).n128_u64[0];
  if (!v2)
    goto LABEL_34;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = &CFErrorCopyUserInfo_ptr;
    v6 = &CFErrorCopyUserInfo_ptr;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1)
         : *(id *)(a1 + 8 * v4 + 32);
      v8 = v7;
      v9 = objc_opt_self(v5[407]);
      if (swift_dynamicCastObjCClass(v8, v9))
        break;
      v13 = objc_opt_self(v6[405]);
      v14 = (void *)swift_dynamicCastObjCClass(v8, v13);
      if (v14)
      {
        v15 = objc_msgSend(v14, "contact");
        v16 = type metadata accessor for SDContactChangeHistoryAddEvent();
        goto LABEL_15;
      }
      v20 = objc_opt_self(CNChangeHistoryDeleteContactEvent);
      v21 = swift_dynamicCastObjCClass(v8, v20);
      if (v21)
      {
        v22 = (void *)v21;
        v23 = v6;
        v24 = v8;
        v25 = objc_msgSend(v22, "contactIdentifier");
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        v29 = type metadata accessor for SDContactChangeHistoryDeleteEvent();
        v30 = swift_allocObject(v29, 32, 7);
        *(_QWORD *)(v30 + 16) = v26;
        *(_QWORD *)(v30 + 24) = v28;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        v32 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v31 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v32 >= v31 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
        specialized Array._endMutation()(v33);

        v6 = v23;
        v5 = &CFErrorCopyUserInfo_ptr;
        goto LABEL_7;
      }
      v34 = objc_opt_self(CNChangeHistoryUpdateContactEvent);
      v35 = (void *)swift_dynamicCastObjCClass(v8, v34);
      if (v35)
      {
        v15 = objc_msgSend(v35, "contact");
        v16 = type metadata accessor for SDContactChangeHistoryUpdateEvent();
LABEL_15:
        v11 = swift_allocObject(v16, 24, 7);
        v12 = v11;
        *(_QWORD *)(v11 + 16) = v15;
LABEL_16:
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v18 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v17 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v18 >= v17 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v12);
        specialized Array._endMutation()(v19);
        goto LABEL_6;
      }
      if (qword_1007B4188 != -1)
        swift_once(&qword_1007B4188, sub_10049233C);
      v36 = type metadata accessor for Logger(0);
      sub_100221DF8(v36, (uint64_t)qword_1007C1F30);
      v8 = v8;
      v37 = Logger.logObject.getter(v8);
      v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v48 = v47;
        *(_DWORD *)v39 = 136315138;
        ObjectType = swift_getObjectType(v8);
        v41 = _typeName(_:qualified:)(ObjectType, 0);
        v42 = v6;
        v44 = (const char *)v43;
        *(_QWORD *)(v39 + 4) = sub_100228BD8(v41, v43, &v48);

        v45 = v44;
        v6 = v42;
        v5 = &CFErrorCopyUserInfo_ptr;
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Ignore event %s", (uint8_t *)v39, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        goto LABEL_7;
      }

LABEL_6:
LABEL_7:
      if (v2 == ++v4)
      {
        swift_bridgeObjectRelease((const char *)a1);
        return;
      }
    }
    v10 = type metadata accessor for SDContactChangeHistoryDropEverythingEvent();
    v11 = swift_allocObject(v10, 16, 7);
    v12 = v11;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t sub_100493238()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100493248(void *a1, _BYTE *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;
  id v6;

  v4 = *(void ***)(v2 + 16);
  v5 = *v4;
  *v4 = a1;
  v6 = a1;

  *a2 = 1;
}

uint64_t sub_100493280()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100493290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004932A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void _s11AskResponseVwxx(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;

  *(_QWORD *)&v2 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + 8)).n128_u64[0];
  *(_QWORD *)&v3 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + 24), v2).n128_u64[0];
  *(_QWORD *)&v4 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + 48), v3).n128_u64[0];
  *(_QWORD *)&v5 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + 64), v4).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(a1 + 80), v5);
  v6 = *(_QWORD *)(a1 + 96);
  if (v6 >> 60 != 15)
    sub_100225AB4(*(_QWORD *)(a1 + 88), v6);
}

uint64_t _s11AskResponseVwcp(uint64_t a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t *v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;

  v3 = *(const char **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(const char **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(const char **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(const char **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(const char **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = (uint64_t *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)&v10 = swift_bridgeObjectRetain(v3).n128_u64[0];
  *(_QWORD *)&v11 = swift_bridgeObjectRetain(v4, v10).n128_u64[0];
  *(_QWORD *)&v12 = swift_bridgeObjectRetain(v5, v11).n128_u64[0];
  *(_QWORD *)&v13 = swift_bridgeObjectRetain(v6, v12).n128_u64[0];
  swift_bridgeObjectRetain(v7, v13);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v8;
  }
  else
  {
    v14 = *v8;
    sub_10022E4A8(*v8, v9);
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = v9;
  }
  return a1;
}

uint64_t _s11AskResponseVwca(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  double v6;
  double v7;
  const char *v8;
  const char *v9;
  double v10;
  double v11;
  const char *v12;
  const char *v13;
  double v14;
  double v15;
  const char *v16;
  const char *v17;
  double v18;
  double v19;
  const char *v20;
  const char *v21;
  double v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(const char **)(a2 + 8);
  v5 = *(const char **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)&v6 = swift_bridgeObjectRetain(v4).n128_u64[0];
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v5, v6).n128_u64[0];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(const char **)(a2 + 24);
  v9 = *(const char **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)&v10 = swift_bridgeObjectRetain(v8, v7).n128_u64[0];
  *(_QWORD *)&v11 = swift_bridgeObjectRelease(v9, v10).n128_u64[0];
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v12 = *(const char **)(a2 + 48);
  v13 = *(const char **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)&v14 = swift_bridgeObjectRetain(v12, v11).n128_u64[0];
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v13, v14).n128_u64[0];
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v16 = *(const char **)(a2 + 64);
  v17 = *(const char **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)&v18 = swift_bridgeObjectRetain(v16, v15).n128_u64[0];
  *(_QWORD *)&v19 = swift_bridgeObjectRelease(v17, v18).n128_u64[0];
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v20 = *(const char **)(a2 + 80);
  v21 = *(const char **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v20;
  *(_QWORD *)&v22 = swift_bridgeObjectRetain(v20, v19).n128_u64[0];
  swift_bridgeObjectRelease(v21, v22);
  v23 = (uint64_t *)(a2 + 88);
  v24 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      v26 = *v23;
      sub_10022E4A8(*v23, v24);
      v27 = *(_QWORD *)(a1 + 88);
      v28 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 88) = v26;
      *(_QWORD *)(a1 + 96) = v24;
      sub_100225AB4(v27, v28);
      return a1;
    }
    sub_10023D5F8(a1 + 88);
    goto LABEL_6;
  }
  if (v24 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v23;
    return a1;
  }
  v25 = *v23;
  sub_10022E4A8(*v23, v24);
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v24;
  return a1;
}

__n128 _s11AskResponseVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s11AskResponseVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  double v9;
  uint64_t v10;
  const char *v11;
  double v12;
  uint64_t v13;
  const char *v14;
  double v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const char **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)&v6 = swift_bridgeObjectRelease(v5).n128_u64[0];
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(const char **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)&v9 = swift_bridgeObjectRelease(v8, v6).n128_u64[0];
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(const char **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)&v12 = swift_bridgeObjectRelease(v11, v9).n128_u64[0];
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(const char **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v14, v12).n128_u64[0];
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(const char **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v16;
  swift_bridgeObjectRelease(v17, v15);
  v18 = (_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  if (v19 >> 60 != 15)
  {
    v20 = *(_QWORD *)(a2 + 96);
    if (v20 >> 60 != 15)
    {
      v21 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v18;
      *(_QWORD *)(a1 + 96) = v20;
      sub_100225AB4(v21, v19);
      return a1;
    }
    sub_10023D5F8(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v18;
  return a1;
}

uint64_t _s11AskResponseVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11AskResponseVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s11AskResponseVMa()
{
  return &_s11AskResponseVN;
}

uint64_t *sub_1004936D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  const char *v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  const char *v45;
  uint64_t *v46;
  unint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v66;
  const char *v67;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100008384((uint64_t *)&unk_1007B7E50);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for SFAirDrop.TransferType(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100008384(&qword_1007B7E48);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = a3[6];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_QWORD *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      sub_10022E4A8(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
    v22 = a3[7];
    v23 = a3[8];
    v24 = (uint64_t *)((char *)a1 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = (const char *)v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (uint64_t *)((char *)a1 + v23);
    v28 = (uint64_t *)((char *)a2 + v23);
    v67 = (const char *)v28[1];
    *v27 = *v28;
    v27[1] = v67;
    v29 = a3[9];
    v30 = a3[10];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = (const char *)v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (uint64_t *)((char *)a1 + v30);
    v35 = (uint64_t *)((char *)a2 + v30);
    v36 = (const char *)v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = a3[11];
    v38 = a3[12];
    v39 = *(const char **)((char *)a2 + v37);
    *(uint64_t *)((char *)a1 + v37) = (uint64_t)v39;
    v40 = *(const char **)((char *)a2 + v38);
    *(uint64_t *)((char *)a1 + v38) = (uint64_t)v40;
    v41 = a3[13];
    v42 = a3[14];
    v43 = (uint64_t *)((char *)a1 + v41);
    v44 = (uint64_t *)((char *)a2 + v41);
    v45 = (const char *)v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = (uint64_t *)((char *)a2 + v42);
    v47 = *(uint64_t *)((char *)a2 + v42 + 8);
    *(_QWORD *)&v48 = swift_bridgeObjectRetain(v26, (char *)a1 + v42).n128_u64[0];
    *(_QWORD *)&v49 = swift_bridgeObjectRetain(v67, v48).n128_u64[0];
    *(_QWORD *)&v50 = swift_bridgeObjectRetain(v33, v49).n128_u64[0];
    *(_QWORD *)&v51 = swift_bridgeObjectRetain(v36, v50).n128_u64[0];
    *(_QWORD *)&v52 = swift_bridgeObjectRetain(v39, v51).n128_u64[0];
    *(_QWORD *)&v53 = swift_bridgeObjectRetain(v40, v52).n128_u64[0];
    swift_bridgeObjectRetain(v45, v53);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)v66 = *(_OWORD *)v46;
    }
    else
    {
      v54 = *v46;
      sub_10022E4A8(*v46, v47);
      *(_QWORD *)v66 = v54;
      *(_QWORD *)(v66 + 8) = v47;
    }
    v55 = a3[15];
    v56 = (char *)a1 + v55;
    v57 = (char *)a2 + v55;
    v58 = *((_QWORD *)v57 + 1);
    if (v58 >> 60 == 15)
    {
      *(_OWORD *)v56 = *(_OWORD *)v57;
    }
    else
    {
      v59 = *(_QWORD *)v57;
      sub_10022E4A8(*(_QWORD *)v57, *((_QWORD *)v57 + 1));
      *(_QWORD *)v56 = v59;
      *((_QWORD *)v56 + 1) = v58;
    }
    v60 = a3[17];
    *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    v61 = (char *)a1 + v60;
    v62 = (uint64_t *)((char *)a2 + v60);
    v63 = *(uint64_t *)((char *)a2 + v60 + 8);
    if (v63 >> 60 == 15)
    {
      *(_OWORD *)v61 = *(_OWORD *)v62;
    }
    else
    {
      v64 = *v62;
      sub_10022E4A8(*v62, v63);
      *(_QWORD *)v61 = v64;
      *((_QWORD *)v61 + 1) = v63;
    }
  }
  return a1;
}

void sub_1004939F0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;

  v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for SFAirDrop.TransferType(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (uint64_t *)(a1 + a2[6]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_100225AB4(*v9, v10);
  *(_QWORD *)&v11 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[7] + 8)).n128_u64[0];
  *(_QWORD *)&v12 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[8] + 8), v11).n128_u64[0];
  *(_QWORD *)&v13 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[9] + 8), v12).n128_u64[0];
  *(_QWORD *)&v14 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[10] + 8), v13).n128_u64[0];
  *(_QWORD *)&v15 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[11]), v14).n128_u64[0];
  *(_QWORD *)&v16 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a1 + a2[12]), v15).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(a1 + a2[13] + 8), v16);
  v17 = (uint64_t *)(a1 + a2[14]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_100225AB4(*v17, v18);
  v19 = (uint64_t *)(a1 + a2[15]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_100225AB4(*v19, v20);
  v21 = (uint64_t *)(a1 + a2[17]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_100225AB4(*v21, v22);
}

char *sub_100493B90(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  const char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  const char *v31;
  char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  const char *v43;
  uint64_t *v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  const char *v65;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100008384((uint64_t *)&unk_1007B7E50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SFAirDrop.TransferType(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100008384(&qword_1007B7E48);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_QWORD *)v17 + 1);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    sub_10022E4A8(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
  }
  v20 = a3[7];
  v21 = a3[8];
  v22 = &a1[v20];
  v23 = &a2[v20];
  v24 = (const char *)*((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = &a1[v21];
  v26 = &a2[v21];
  v65 = (const char *)*((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v65;
  v27 = a3[9];
  v28 = a3[10];
  v29 = &a1[v27];
  v30 = &a2[v27];
  v31 = (const char *)*((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = &a1[v28];
  v33 = &a2[v28];
  v34 = (const char *)*((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = a3[11];
  v36 = a3[12];
  v37 = *(const char **)&a2[v35];
  *(_QWORD *)&a1[v35] = v37;
  v38 = *(const char **)&a2[v36];
  *(_QWORD *)&a1[v36] = v38;
  v39 = a3[13];
  v40 = a3[14];
  v41 = &a1[v39];
  v42 = &a2[v39];
  v43 = (const char *)*((_QWORD *)v42 + 1);
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = v43;
  v44 = (uint64_t *)&a2[v40];
  v45 = *(_QWORD *)&a2[v40 + 8];
  *(_QWORD *)&v46 = swift_bridgeObjectRetain(v24, &a1[v40]).n128_u64[0];
  *(_QWORD *)&v47 = swift_bridgeObjectRetain(v65, v46).n128_u64[0];
  *(_QWORD *)&v48 = swift_bridgeObjectRetain(v31, v47).n128_u64[0];
  *(_QWORD *)&v49 = swift_bridgeObjectRetain(v34, v48).n128_u64[0];
  *(_QWORD *)&v50 = swift_bridgeObjectRetain(v37, v49).n128_u64[0];
  *(_QWORD *)&v51 = swift_bridgeObjectRetain(v38, v50).n128_u64[0];
  swift_bridgeObjectRetain(v43, v51);
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)v64 = *(_OWORD *)v44;
  }
  else
  {
    v52 = *v44;
    sub_10022E4A8(*v44, v45);
    *(_QWORD *)v64 = v52;
    *(_QWORD *)(v64 + 8) = v45;
  }
  v53 = a3[15];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = *((_QWORD *)v55 + 1);
  if (v56 >> 60 == 15)
  {
    *(_OWORD *)v54 = *(_OWORD *)v55;
  }
  else
  {
    v57 = *(_QWORD *)v55;
    sub_10022E4A8(*(_QWORD *)v55, *((_QWORD *)v55 + 1));
    *(_QWORD *)v54 = v57;
    *((_QWORD *)v54 + 1) = v56;
  }
  v58 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  v59 = &a1[v58];
  v60 = (uint64_t *)&a2[v58];
  v61 = *(_QWORD *)&a2[v58 + 8];
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)v59 = *(_OWORD *)v60;
  }
  else
  {
    v62 = *v60;
    sub_10022E4A8(*v60, v61);
    *(_QWORD *)v59 = v62;
    *((_QWORD *)v59 + 1) = v61;
  }
  return a1;
}

char *sub_100493E84(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const char *v32;
  const char *v33;
  double v34;
  double v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const char *v39;
  const char *v40;
  double v41;
  double v42;
  uint64_t v43;
  char *v44;
  char *v45;
  const char *v46;
  const char *v47;
  double v48;
  double v49;
  uint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  const char *v54;
  double v55;
  double v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  double v60;
  double v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  double v65;
  double v66;
  uint64_t v67;
  char *v68;
  char *v69;
  const char *v70;
  const char *v71;
  double v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100008384((uint64_t *)&unk_1007B7E50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SFAirDrop.TransferType(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    v20 = sub_100008384(&qword_1007B7E48);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_13:
  v21 = a3[6];
  v22 = (uint64_t *)&a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v24 = *(_QWORD *)&a2[v21 + 8];
  if (*(_QWORD *)&a1[v21 + 8] >> 60 == 15)
  {
    if (v24 >> 60 != 15)
    {
      v25 = *v23;
      sub_10022E4A8(v25, v24);
      *v22 = v25;
      v22[1] = v24;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v24 >> 60 == 15)
  {
    sub_10023D5F8((uint64_t)v22);
LABEL_18:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_20;
  }
  v26 = *v23;
  sub_10022E4A8(v26, v24);
  v27 = *v22;
  v28 = v22[1];
  *v22 = v26;
  v22[1] = v24;
  sub_100225AB4(v27, v28);
LABEL_20:
  v29 = a3[7];
  v30 = &a1[v29];
  v31 = &a2[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = (const char *)*((_QWORD *)v31 + 1);
  v33 = (const char *)*((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = v32;
  *(_QWORD *)&v34 = swift_bridgeObjectRetain(v32).n128_u64[0];
  *(_QWORD *)&v35 = swift_bridgeObjectRelease(v33, v34).n128_u64[0];
  v36 = a3[8];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = (const char *)*((_QWORD *)v38 + 1);
  v40 = (const char *)*((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v39;
  *(_QWORD *)&v41 = swift_bridgeObjectRetain(v39, v35).n128_u64[0];
  *(_QWORD *)&v42 = swift_bridgeObjectRelease(v40, v41).n128_u64[0];
  v43 = a3[9];
  v44 = &a1[v43];
  v45 = &a2[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v46 = (const char *)*((_QWORD *)v45 + 1);
  v47 = (const char *)*((_QWORD *)v44 + 1);
  *((_QWORD *)v44 + 1) = v46;
  *(_QWORD *)&v48 = swift_bridgeObjectRetain(v46, v42).n128_u64[0];
  *(_QWORD *)&v49 = swift_bridgeObjectRelease(v47, v48).n128_u64[0];
  v50 = a3[10];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v53 = (const char *)*((_QWORD *)v52 + 1);
  v54 = (const char *)*((_QWORD *)v51 + 1);
  *((_QWORD *)v51 + 1) = v53;
  *(_QWORD *)&v55 = swift_bridgeObjectRetain(v53, v49).n128_u64[0];
  *(_QWORD *)&v56 = swift_bridgeObjectRelease(v54, v55).n128_u64[0];
  v57 = a3[11];
  v58 = *(const char **)&a1[v57];
  v59 = *(const char **)&a2[v57];
  *(_QWORD *)&a1[v57] = v59;
  *(_QWORD *)&v60 = swift_bridgeObjectRetain(v59, v56).n128_u64[0];
  *(_QWORD *)&v61 = swift_bridgeObjectRelease(v58, v60).n128_u64[0];
  v62 = a3[12];
  v63 = *(const char **)&a1[v62];
  v64 = *(const char **)&a2[v62];
  *(_QWORD *)&a1[v62] = v64;
  *(_QWORD *)&v65 = swift_bridgeObjectRetain(v64, v61).n128_u64[0];
  *(_QWORD *)&v66 = swift_bridgeObjectRelease(v63, v65).n128_u64[0];
  v67 = a3[13];
  v68 = &a1[v67];
  v69 = &a2[v67];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v70 = (const char *)*((_QWORD *)v69 + 1);
  v71 = (const char *)*((_QWORD *)v68 + 1);
  *((_QWORD *)v68 + 1) = v70;
  *(_QWORD *)&v72 = swift_bridgeObjectRetain(v70, v66).n128_u64[0];
  swift_bridgeObjectRelease(v71, v72);
  v73 = a3[14];
  v74 = (uint64_t *)&a1[v73];
  v75 = (uint64_t *)&a2[v73];
  v76 = *(_QWORD *)&a2[v73 + 8];
  if (*(_QWORD *)&a1[v73 + 8] >> 60 == 15)
  {
    if (v76 >> 60 != 15)
    {
      v77 = *v75;
      sub_10022E4A8(v77, v76);
      *v74 = v77;
      v74[1] = v76;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v76 >> 60 == 15)
  {
    sub_10023D5F8((uint64_t)v74);
LABEL_25:
    *(_OWORD *)v74 = *(_OWORD *)v75;
    goto LABEL_27;
  }
  v78 = *v75;
  sub_10022E4A8(v78, v76);
  v79 = *v74;
  v80 = v74[1];
  *v74 = v78;
  v74[1] = v76;
  sub_100225AB4(v79, v80);
LABEL_27:
  v81 = a3[15];
  v82 = (uint64_t *)&a1[v81];
  v83 = (uint64_t *)&a2[v81];
  v84 = *(_QWORD *)&a2[v81 + 8];
  if (*(_QWORD *)&a1[v81 + 8] >> 60 == 15)
  {
    if (v84 >> 60 != 15)
    {
      v85 = *v83;
      sub_10022E4A8(v85, v84);
      *v82 = v85;
      v82[1] = v84;
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v84 >> 60 == 15)
  {
    sub_10023D5F8((uint64_t)v82);
LABEL_32:
    *(_OWORD *)v82 = *(_OWORD *)v83;
    goto LABEL_34;
  }
  v86 = *v83;
  sub_10022E4A8(v86, v84);
  v87 = *v82;
  v88 = v82[1];
  *v82 = v86;
  v82[1] = v84;
  sub_100225AB4(v87, v88);
LABEL_34:
  a1[a3[16]] = a2[a3[16]];
  v89 = a3[17];
  v90 = (uint64_t *)&a1[v89];
  v91 = (uint64_t *)&a2[v89];
  v92 = *(_QWORD *)&a2[v89 + 8];
  if (*(_QWORD *)&a1[v89 + 8] >> 60 != 15)
  {
    if (v92 >> 60 != 15)
    {
      v94 = *v91;
      sub_10022E4A8(v94, v92);
      v95 = *v90;
      v96 = v90[1];
      *v90 = v94;
      v90[1] = v92;
      sub_100225AB4(v95, v96);
      return a1;
    }
    sub_10023D5F8((uint64_t)v90);
    goto LABEL_39;
  }
  if (v92 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)v90 = *(_OWORD *)v91;
    return a1;
  }
  v93 = *v91;
  sub_10022E4A8(v93, v92);
  *v90 = v93;
  v90[1] = v92;
  return a1;
}

char *sub_100494370(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100008384((uint64_t *)&unk_1007B7E50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SFAirDrop.TransferType(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100008384(&qword_1007B7E48);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  v16 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v17 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  v19 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  v20 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  return a1;
}

char *sub_100494524(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  double v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  double v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  double v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  double v54;
  uint64_t v55;
  const char *v56;
  double v57;
  uint64_t v58;
  const char *v59;
  double v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;

  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100008384((uint64_t *)&unk_1007B7E50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SFAirDrop.TransferType(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    v20 = sub_100008384(&qword_1007B7E48);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_13:
  v21 = a3[6];
  v22 = (uint64_t)&a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)&a1[v21 + 8];
  if (v24 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_18;
  }
  v25 = *((_QWORD *)v23 + 1);
  if (v25 >> 60 == 15)
  {
    sub_10023D5F8(v22);
    goto LABEL_16;
  }
  v26 = *(_QWORD *)v22;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v25;
  sub_100225AB4(v26, v24);
LABEL_18:
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = (const char *)*((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  *(_QWORD *)&v33 = swift_bridgeObjectRelease(v32).n128_u64[0];
  v34 = a3[8];
  v35 = &a1[v34];
  v36 = &a2[v34];
  v38 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 1);
  v39 = (const char *)*((_QWORD *)v35 + 1);
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  *(_QWORD *)&v40 = swift_bridgeObjectRelease(v39, v33).n128_u64[0];
  v41 = a3[9];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v46 = (const char *)*((_QWORD *)v42 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  *(_QWORD *)&v47 = swift_bridgeObjectRelease(v46, v40).n128_u64[0];
  v48 = a3[10];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v53 = (const char *)*((_QWORD *)v49 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  *(_QWORD *)&v54 = swift_bridgeObjectRelease(v53, v47).n128_u64[0];
  v55 = a3[11];
  v56 = *(const char **)&a1[v55];
  *(_QWORD *)&a1[v55] = *(_QWORD *)&a2[v55];
  *(_QWORD *)&v57 = swift_bridgeObjectRelease(v56, v54).n128_u64[0];
  v58 = a3[12];
  v59 = *(const char **)&a1[v58];
  *(_QWORD *)&a1[v58] = *(_QWORD *)&a2[v58];
  *(_QWORD *)&v60 = swift_bridgeObjectRelease(v59, v57).n128_u64[0];
  v61 = a3[13];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  v66 = (const char *)*((_QWORD *)v62 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease(v66, v60);
  v67 = a3[14];
  v68 = (uint64_t)&a1[v67];
  v69 = &a2[v67];
  v70 = *(_QWORD *)&a1[v67 + 8];
  if (v70 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)v68 = *(_OWORD *)v69;
    goto LABEL_23;
  }
  v71 = *((_QWORD *)v69 + 1);
  if (v71 >> 60 == 15)
  {
    sub_10023D5F8(v68);
    goto LABEL_21;
  }
  v72 = *(_QWORD *)v68;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_QWORD *)(v68 + 8) = v71;
  sub_100225AB4(v72, v70);
LABEL_23:
  v73 = a3[15];
  v74 = (uint64_t)&a1[v73];
  v75 = &a2[v73];
  v76 = *(_QWORD *)&a1[v73 + 8];
  if (v76 >> 60 == 15)
  {
LABEL_26:
    *(_OWORD *)v74 = *(_OWORD *)v75;
    goto LABEL_28;
  }
  v77 = *((_QWORD *)v75 + 1);
  if (v77 >> 60 == 15)
  {
    sub_10023D5F8(v74);
    goto LABEL_26;
  }
  v78 = *(_QWORD *)v74;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_QWORD *)(v74 + 8) = v77;
  sub_100225AB4(v78, v76);
LABEL_28:
  v79 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  v80 = (uint64_t *)&a1[v79];
  v81 = (uint64_t *)&a2[v79];
  v82 = *(_QWORD *)&a1[v79 + 8];
  if (v82 >> 60 != 15)
  {
    v83 = v81[1];
    if (v83 >> 60 != 15)
    {
      v84 = *v80;
      *v80 = *v81;
      v80[1] = v83;
      sub_100225AB4(v84, v82);
      return a1;
    }
    sub_10023D5F8((uint64_t)v80);
  }
  *(_OWORD *)v80 = *(_OWORD *)v81;
  return a1;
}

uint64_t sub_1004948EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004948F8);
}

uint64_t sub_1004948F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100008384((uint64_t *)&unk_1007B7E50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100008384(&qword_1007B7E48);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1004949AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004949B8);
}

uint64_t sub_1004949B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100008384((uint64_t *)&unk_1007B7E50);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100008384(&qword_1007B7E48);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t _s10AskRequestVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1007C23C0;
  if (!qword_1007C23C0)
    return swift_getSingletonMetadata(a1, &_s10AskRequestVMn);
  return result;
}

void sub_100494AA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];

  sub_100260B1C(319, (unint64_t *)&qword_1007BD730, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100260B1C(319, (unint64_t *)&unk_1007C23D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1005DA2C8;
      v6[3] = &unk_1005DA2E0;
      v6[4] = &unk_1005DA2F8;
      v6[5] = &unk_1005DA2E0;
      v6[6] = &unk_1005DA2E0;
      v6[7] = &unk_1005DA310;
      v6[8] = &unk_1005DA310;
      v6[9] = &unk_1005DA2F8;
      v6[10] = &unk_1005DA2C8;
      v6[11] = &unk_1005DA2C8;
      v6[12] = &unk_1005DA328;
      v6[13] = &unk_1005DA2C8;
      swift_initStructMetadata(a1, 256, 14, v6, a1 + 16);
    }
  }
}

_QWORD *sub_100494B88(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  char v40;
  char v41;
  _QWORD *v42;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v42 = _swiftEmptyArrayStorage;
    sub_100229A28(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v30 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(&v33, v9, &v32);
      if (v4)
        break;
      v4 = 0;
      v10 = v33;
      v11 = v34;
      v12 = v35;
      v13 = v36;
      v14 = v37;
      v15 = v38;
      v16 = v39;
      v17 = v40;
      v19 = v6[2];
      v18 = v6[3];
      v20 = v41;
      v42 = v6;
      if (v19 >= v18 >> 1)
      {
        v28 = v36;
        v29 = v35;
        v27 = v39;
        v26 = v33;
        v22 = v34;
        v24 = v40;
        v25 = v38;
        sub_100229A28(v18 > 1, v19 + 1, 1);
        v17 = v24;
        v15 = v25;
        v11 = v22;
        v10 = v26;
        v16 = v27;
        v13 = v28;
        v12 = v29;
        v6 = v42;
      }
      v6[2] = v19 + 1;
      v21 = &v6[11 * v19];
      v21[4] = v10;
      v21[5] = v11;
      *((_OWORD *)v21 + 3) = v12;
      *((_OWORD *)v21 + 4) = v13;
      v21[10] = v14;
      *((_BYTE *)v21 + 88) = v15;
      *((_OWORD *)v21 + 6) = v16;
      *((_BYTE *)v21 + 112) = v17;
      *((_BYTE *)v21 + 113) = v20;
      v9 += v30;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

uint64_t sub_100494D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;

  v8[17] = a8;
  v8[18] = v26;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v8[11] = a2;
  v8[12] = a3;
  v8[10] = a1;
  v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v8[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = ((uint64_t (*)(_QWORD))type metadata accessor for SFAirDropSend.ItemMetadata)(0);
  v8[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[22] = swift_task_alloc(v12);
  v8[23] = swift_task_alloc(v12);
  v13 = sub_100008384(&qword_1007BA758);
  v8[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SFAirDrop.TransferType(0);
  v8[25] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[26] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[27] = swift_task_alloc(v16);
  v8[28] = swift_task_alloc(v16);
  v17 = type metadata accessor for URL(0);
  v8[29] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[30] = v18;
  v8[31] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SFSecurityScopedURL(0);
  v8[32] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v8[33] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[34] = swift_task_alloc(v21);
  v8[35] = swift_task_alloc(v21);
  v8[36] = swift_task_alloc(v21);
  v22 = type metadata accessor for SFAirDropSend.Request(0);
  v8[37] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v8[38] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[39] = swift_task_alloc(v24);
  v8[40] = swift_task_alloc(v24);
  v8[41] = swift_task_alloc(v24);
  return swift_task_switch(sub_100494EBC, 0, 0);
}

void sub_100494EBC()
{
  _QWORD *v0;
  uint64_t v1;
  const char **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  const char **v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  const char **v53;
  const char **v54;
  const char **v55;
  uint64_t v56;
  const char **v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  id v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  double v110;
  double v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(void);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  int64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  void (*v156)(uint64_t, uint64_t);
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint64_t *v164;
  uint8_t *v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSString v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  _QWORD *v179;
  id v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  char *v195;
  NSObject *v196;
  os_log_type_t v197;
  _BOOL4 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  const char *v204;
  double v205;
  uint64_t v206;
  os_log_type_t v207;
  uint8_t *v208;
  const char *v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(uint64_t, uint64_t);
  const char **v220;
  uint64_t v221;
  const char **v222;
  uint64_t v223;
  const char **v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  void (*v228)(uint64_t, const char *, uint64_t);
  uint64_t v229;
  uint64_t v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t (*v239)(uint64_t, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  const char **v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t (*v247)(uint64_t, char *, uint64_t);
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270[3];

  v2 = (const char **)(v0 + 15);
  v1 = v0[15];
  v3 = v0[41];
  v5 = v0[37];
  v4 = v0[38];
  v6 = v0[11];
  v231 = sub_10038FBF4();
  v234 = v7;
  v0[42] = v231;
  v0[43] = v7;
  v239 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8 = v239(v3, v6, v5);
  v9 = v0[41];
  v10 = v0[37];
  v267 = v0;
  v237 = v1;
  v242 = (const char **)(v0 + 15);
  if (v1)
  {
    v11 = *v2;
    v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain(*v2);
    v244 = v12;
    v12(v9, v10);
    v13 = (uint64_t)v11;
  }
  else
  {
    v14 = SFAirDropSend.Request.urls.getter(v8);
    v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v13 = v14;
    v244 = v15;
    v15(v9, v10);
    if (!v13)
    {
      v17 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_25;
    }
  }
  v16 = _swiftEmptyArrayStorage;
  v270[0] = (uint64_t)_swiftEmptyArrayStorage;
  v259 = *(_QWORD **)(v13 + 16);
  if (!v259)
  {
LABEL_15:
    swift_bridgeObjectRelease((const char *)v13);
    v30 = v16[2];
    if (v30)
    {
      v31 = v0[33];
      v32 = (char *)v16 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
      v251 = *(_QWORD *)(v31 + 72);
      v255 = v0[30];
      v260 = v31;
      v247 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 16);
      swift_retain(v16);
      v17 = (unint64_t)_swiftEmptyArrayStorage;
      do
      {
        v33 = v16;
        v34 = v0[34];
        v35 = v0[31];
        v36 = v0[32];
        v37 = (_QWORD *)v17;
        v38 = v0[29];
        v39 = v247(v34, v32, v36);
        v40 = SFSecurityScopedURL.url.getter(v39);
        v41 = URL.absoluteString.getter(v40);
        v43 = v42;
        v44 = v38;
        v17 = (unint64_t)v37;
        (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v35, v44);
        (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v34, v36);
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          v17 = (unint64_t)sub_100227A68(0, v37[2] + 1, 1, v37);
        v46 = *(_QWORD *)(v17 + 16);
        v45 = *(_QWORD *)(v17 + 24);
        v16 = v33;
        if (v46 >= v45 >> 1)
          v17 = (unint64_t)sub_100227A68((_QWORD *)(v45 > 1), v46 + 1, 1, (_QWORD *)v17);
        *(_QWORD *)(v17 + 16) = v46 + 1;
        v47 = (_QWORD *)(v17 + 16 * v46);
        v47[4] = v41;
        v47[5] = v43;
        v32 += v251;
        --v30;
        v0 = v267;
      }
      while (v30);
      swift_release_n(v33, 2);
    }
    else
    {
      swift_release(v16);
      v17 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v2 = v242;
LABEL_25:
    v0[44] = v244;
    v0[45] = v17;
    if (qword_1007B4190 == -1)
      goto LABEL_26;
    goto LABEL_81;
  }
  v17 = 0;
  v2 = (const char **)v0[33];
  v250 = v13;
  v254 = v0[30];
  while (v17 < *(_QWORD *)(v13 + 16))
  {
    v18 = v0[31];
    v19 = v0[29];
    v20 = (*((unsigned __int8 *)v2 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 80);
    v21 = v2[9];
    v22 = ((uint64_t (*)(_QWORD, unint64_t, _QWORD))v2[2])(v0[36], v13 + v20 + (_QWORD)v21 * v17, v0[32]);
    v23 = SFSecurityScopedURL.url.getter(v22);
    v24 = URL.isFileURL.getter(v23);
    (*(void (**)(uint64_t, uint64_t))(v254 + 8))(v18, v19);
    if ((v24 & 1) != 0)
    {
      ((void (*)(_QWORD, _QWORD))v2[1])(v0[36], v0[32]);
    }
    else
    {
      v25 = v2[4];
      ((void (*)(_QWORD, _QWORD, _QWORD))v25)(v0[35], v0[36], v0[32]);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_100229A44(0, v16[2] + 1, 1);
        v16 = (_QWORD *)v270[0];
      }
      v27 = v16[2];
      v26 = v16[3];
      if (v27 >= v26 >> 1)
      {
        sub_100229A44(v26 > 1, v27 + 1, 1);
        v16 = (_QWORD *)v270[0];
      }
      v0 = v267;
      v28 = v267[35];
      v29 = v267[32];
      v16[2] = v27 + 1;
      ((void (*)(char *, uint64_t, uint64_t))v25)((char *)v16 + v20 + v27 * (_QWORD)v21, v28, v29);
      v270[0] = (uint64_t)v16;
      v13 = v250;
    }
    if (v259 == (_QWORD *)++v17)
      goto LABEL_15;
  }
  __break(1u);
LABEL_81:
  swift_once(&qword_1007B4190, sub_1004973E4);
LABEL_26:
  v48 = v2 - 12;
  v49 = type metadata accessor for Logger(0);
  v0[46] = sub_100221DF8(v49, (uint64_t)qword_1007C2350);
  v50 = swift_bridgeObjectRetain_n(v17, 3);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter();
  v261 = v17;
  if (os_log_type_enabled(v51, v52))
  {
    v53 = v2 - 8;
    v54 = v2 - 7;
    v55 = v2 - 6;
    v56 = swift_slowAlloc(32, -1);
    v57 = v48;
    v58 = swift_slowAlloc(32, -1);
    v270[0] = v58;
    *(_DWORD *)v56 = 134218499;
    v267[7] = *(_QWORD *)(v261 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54, v56 + 4);
    swift_bridgeObjectRelease((const char *)v261);
    *(_WORD *)(v56 + 12) = 2160;
    v267[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v55, v56 + 14);
    *(_WORD *)(v56 + 22) = 2081;
    swift_bridgeObjectRetain((const char *)v261);
    v59 = Array.description.getter(v261, &type metadata for String);
    v61 = v60;
    swift_bridgeObjectRelease((const char *)v261);
    v267[9] = sub_100228BD8(v59, (unint64_t)v61, v270);
    v0 = v267;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v267 + 10, v56 + 24);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease_n(v261, 2);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Adding URL items (count=%ld) to request: %{private,mask.hash}s", (uint8_t *)v56, 0x20u);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    v62 = v58;
    v48 = v57;
    swift_slowDealloc(v62, -1, -1);
    v63 = v56;
    v2 = v242;
    swift_slowDealloc(v63, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v17, 3);
  }

  v65 = v0 + 16;
  v64 = (const char *)v0[16];
  v66 = v0[40];
  if (v64)
  {
    v67 = v267[37];
    v68 = (const char *)v267[15];
    v69 = v267[11];
    swift_bridgeObjectRetain(v64);
    v0 = v267;
    v239(v66, v69, v67);
    v70 = swift_bridgeObjectRelease(v68);
LABEL_33:
    v74 = *v65;
    v75 = ((uint64_t (*)(_QWORD, _QWORD, __n128))v244)(v0[40], v0[37], v70);
LABEL_34:
    v0[47] = v74;
    v76 = v0[28];
    v77 = v0[25];
    v78 = v0[26];
    v79 = SFAirDropSend.Request.type.getter(v75);
    v80 = SFAirDrop.TransferType.isOnlyExchange.getter(v79);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
    if ((v80 & 1) != 0)
    {
      sub_10031C024(v0[16], v0[17], v0[18]);
      swift_bridgeObjectRelease((const char *)v74);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Adding empty file info to request for exchange only send request", v84, 2u);
        swift_slowDealloc(v84, -1, -1);
      }

      v238 = (char *)_swiftEmptyArrayStorage;
      v0 = v267;
      goto LABEL_38;
    }
    if (*(_QWORD *)(v74 + 16))
    {
      v95 = v267[32];
      v96 = v267[33];
      v97 = v267[24];
      v98 = v267[18];
      v262 = *((_OWORD *)v267 + 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v96 + 16))(v97, v74 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80)), v95);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v97, 0, 1, v95);
      sub_10000D0F0(v97, &qword_1007BA758);
      v99 = swift_task_alloc(48);
      v267[48] = v99;
      *(_OWORD *)(v99 + 16) = v262;
      *(_QWORD *)(v99 + 32) = v98;
      v100 = (_QWORD *)swift_task_alloc(async function pointer to static SFSecurityScopedURL.withAccess<A>(to:body:)[1]);
      v267[49] = v100;
      v101 = sub_100008384(&qword_1007C2438);
      *v100 = v267;
      v100[1] = sub_1004961EC;
      static SFSecurityScopedURL.withAccess<A>(to:body:)(v267 + 6, v74, &unk_1007C24D0, v99, v101);
      return;
    }
    v105 = v267[24];
    v107 = v267[17];
    v106 = v267[18];
    v108 = v267[16];
    v109 = (const char *)v267[13];
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v267[33] + 56))(v105, 1, 1, v267[32]);
    sub_10031C024(v108, v107, v106);
    *(_QWORD *)&v110 = swift_bridgeObjectRelease(v109).n128_u64[0];
    *(_QWORD *)&v111 = swift_bridgeObjectRelease((const char *)v261, v110).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v74, v111);
    v112 = sub_10000D0F0(v105, &qword_1007BA758);
    v113 = Logger.logObject.getter(v112);
    v114 = static os_log_type_t.error.getter(v113);
    if (os_log_type_enabled(v113, v114))
    {
      v115 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v115 = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "Send request claims to provide URLs but provides none", v115, 2u);
      swift_slowDealloc(v115, -1, -1);
    }
    v0 = v267;
LABEL_47:
    v116 = v0[37];
    v117 = (void *)v0[14];
    v118 = v0[11];

    v119 = type metadata accessor for SFAirDropSend.Failure(0);
    v120 = sub_100220D78(&qword_1007BD9D0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v119, v120, 0, 0);
    v122 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v119 - 8) + 104))(v121, enum case for SFAirDropSend.Failure.badRequest(_:), v119);
    swift_willThrow(v122);
    sub_100225AA0((uint64_t)v231, v234);

    v244(v118, v116);
    v123 = v0[40];
    v124 = v0[39];
    v126 = v0[35];
    v125 = v0[36];
    v127 = v0[34];
    v128 = v0[31];
    v130 = v0[27];
    v129 = v0[28];
    v131 = v0[24];
    v257 = v0[23];
    v263 = v0[22];
    v268 = v0[19];
    swift_task_dealloc(v0[41]);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v257);
    swift_task_dealloc(v263);
    swift_task_dealloc(v268);
    v132 = (void (*)(void))v0[1];
LABEL_71:
    v132();
    return;
  }
  v71 = v0[39];
  v72 = v0[37];
  v239(v0[40], v0[11], v72);
  v73 = v239(v71, v66, v72);
  if (v237)
  {
    v244(v0[39], v0[37]);
    v65 = (uint64_t *)v2;
    goto LABEL_33;
  }
  v134 = v0[39];
  v133 = v0[40];
  v135 = v0[37];
  v74 = SFAirDropSend.Request.urls.getter(v73);
  v244(v134, v135);
  v75 = ((uint64_t (*)(uint64_t, uint64_t))v244)(v133, v135);
  if (v74)
    goto LABEL_34;
  v136 = sub_10031C024(0, v0[17], v0[18]);
  v137 = SFAirDropSend.Request.urlsMetadata.getter(v136);
  if (!v137)
  {
    *(_QWORD *)&v205 = swift_bridgeObjectRelease((const char *)v0[13]).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v261, v205);
    v113 = Logger.logObject.getter(v206);
    v207 = static os_log_type_t.error.getter(v113);
    if (!os_log_type_enabled(v113, v207))
      goto LABEL_47;
    v208 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v208 = 0;
    v209 = "Send request does not provide either file URLs or file metadata";
LABEL_78:
    _os_log_impl((void *)&_mh_execute_header, v113, v207, v209, v208, 2u);
    v0 = v267;
    swift_slowDealloc(v208, -1, -1);
    goto LABEL_47;
  }
  v138 = (const char *)v137;
  v139 = *(_QWORD *)(v137 + 16);
  if (!v139)
  {
    *(_QWORD *)&v210 = swift_bridgeObjectRelease((const char *)v0[13]).n128_u64[0];
    *(_QWORD *)&v211 = swift_bridgeObjectRelease((const char *)v261, v210).n128_u64[0];
    swift_bridgeObjectRelease(v138, v211);
    v113 = Logger.logObject.getter(v212);
    v207 = static os_log_type_t.error.getter(v113);
    if (!os_log_type_enabled(v113, v207))
      goto LABEL_47;
    v208 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v208 = 0;
    v209 = "Send request claims to provide file metadata but provides none";
    goto LABEL_78;
  }
  v224 = v48;
  v220 = v242 - 11;
  v222 = v242 - 10;
  v140 = v0[21];
  v270[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100229A28(0, v139, 0);
  v226 = v138;
  v141 = &v138[(*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80)];
  v232 = *(_QWORD *)(v140 + 72);
  v235 = v140;
  v228 = *(void (**)(uint64_t, const char *, uint64_t))(v140 + 16);
  do
  {
    v143 = v0[22];
    v142 = v0[23];
    v144 = v0[20];
    v228(v142, v141, v144);
    v145 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v228)(v143, v142, v144);
    v146 = SFAirDropSend.ItemMetadata.fileName.getter(v145);
    v258 = v147;
    v264 = v146;
    v148 = SFAirDropSend.ItemMetadata.fileType.getter();
    v248 = v149;
    v252 = v148;
    v245 = SFAirDropSend.ItemMetadata.fileSubType.getter();
    v240 = v150;
    v151 = SFAirDropSend.ItemMetadata.fileSize.getter();
    v152 = SFAirDropSend.ItemMetadata.fileBOMPath.getter();
    v154 = v153;
    v155 = SFAirDropSend.ItemMetadata.fileIsDirectory.getter();
    v156 = *(void (**)(uint64_t, uint64_t))(v235 + 8);
    v156(v143, v144);
    v156(v142, v144);
    v157 = v270[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v270[0]) & 1) == 0)
    {
      sub_100229A28(0, *(_QWORD *)(v157 + 16) + 1, 1);
      v157 = v270[0];
    }
    v159 = *(_QWORD *)(v157 + 16);
    v158 = *(_QWORD *)(v157 + 24);
    if (v159 >= v158 >> 1)
    {
      sub_100229A28(v158 > 1, v159 + 1, 1);
      v157 = v270[0];
    }
    *(_QWORD *)(v157 + 16) = v159 + 1;
    v160 = v157 + 88 * v159;
    *(_QWORD *)(v160 + 32) = v264;
    *(_QWORD *)(v160 + 40) = v258;
    *(_QWORD *)(v160 + 48) = v252;
    *(_QWORD *)(v160 + 56) = v248;
    *(_QWORD *)(v160 + 64) = v245;
    *(_QWORD *)(v160 + 72) = v240;
    *(_QWORD *)(v160 + 80) = v151;
    *(_BYTE *)(v160 + 88) = 0;
    *(_QWORD *)(v160 + 96) = v152;
    *(_QWORD *)(v160 + 104) = v154;
    *(_BYTE *)(v160 + 112) = v155 & 1;
    v141 += v232;
    *(_BYTE *)(v160 + 113) = 0;
    --v139;
    v0 = v267;
  }
  while (v139);
  swift_bridgeObjectRelease(v226);
  v193 = (const char *)swift_retain_n(v157, 2);
  v194 = swift_bridgeObjectRetain(v193);
  v195 = (char *)v157;
  v196 = Logger.logObject.getter(v194);
  v197 = static os_log_type_t.default.getter();
  v198 = os_log_type_enabled(v196, v197);
  v238 = v195;
  if (v198)
  {
    v199 = swift_slowAlloc(32, -1);
    v200 = swift_slowAlloc(32, -1);
    v270[0] = v200;
    *(_DWORD *)v199 = 134218499;
    v267[3] = *((_QWORD *)v195 + 2);
    v48 = v224;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, v220, v199 + 4);
    swift_release(v195);
    *(_WORD *)(v199 + 12) = 2160;
    v267[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v220, v222, v199 + 14);
    *(_WORD *)(v199 + 22) = 2081;
    v201 = swift_bridgeObjectRetain(v195);
    v202 = Array.description.getter(v201, &_s10AskRequestV8FileInfoVN);
    v204 = v203;
    swift_release(v195);
    v267[5] = sub_100228BD8(v202, (unint64_t)v204, v270);
    v0 = v267;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v222, v267 + 6, v199 + 24);
    swift_bridgeObjectRelease(v204);
    swift_release_n(v195, 2);
    _os_log_impl((void *)&_mh_execute_header, v196, v197, "Adding file info (count=%ld) to request: %{private,mask.hash}s", (uint8_t *)v199, 0x20u);
    swift_arrayDestroy(v200, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v200, -1, -1);
    swift_slowDealloc(v199, -1, -1);

    v2 = v242;
  }
  else
  {
    swift_release_n(v195, 3);

    v2 = v242;
    v48 = v224;
  }
LABEL_38:
  v85 = v0;
  v86 = v0[28];
  v87 = v0[26];
  v88 = v85[25];
  v89 = SFAirDropSend.Request.itemPreviewData.getter();
  v91 = v90;
  v92 = SFAirDropSend.Request.type.getter(v89);
  v93 = SFAirDrop.TransferType.isOnlyExchange.getter(v92);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
  if ((v93 & 1) != 0)
  {
    v256 = 0;
    v94 = 0;
  }
  else
  {
    v102 = objc_msgSend((id)v85[14], "computerName");
    if (v102)
    {
      v103 = v102;
      v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
      v94 = v104;

    }
    else
    {
      v256 = 0;
      v94 = 0;
    }
  }
  sub_100244404(v89, v91);
  v161 = sub_100244404(v89, v91);
  v162 = Logger.logObject.getter(v161);
  v163 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v162, v163))
  {
    v265 = v94;
    v164 = (uint64_t *)(v2 - 13);
    v165 = (uint8_t *)swift_slowAlloc(12, -1);
    v166 = swift_slowAlloc(32, -1);
    v270[0] = v166;
    *(_DWORD *)v165 = 136315138;
    if (v91 >> 60 == 15)
    {
      v167 = (const char *)0x800000010061D000;
      v168 = 0xD000000000000016;
    }
    else
    {
      v168 = Data.description.getter(v89, v91);
      v167 = v169;
    }
    *v164 = sub_100228BD8(v168, (unint64_t)v167, v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v48, v165 + 4);
    swift_bridgeObjectRelease(v167);
    sub_100225AA0(v89, v91);
    sub_100225AA0(v89, v91);
    _os_log_impl((void *)&_mh_execute_header, v162, v163, "Adding preview data to request %s", v165, 0xCu);
    swift_arrayDestroy(v166, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v166, -1, -1);
    swift_slowDealloc(v165, -1, -1);

    v94 = v265;
  }
  else
  {
    sub_100225AA0(v89, v91);
    sub_100225AA0(v89, v91);

  }
  v170 = SFAirDropSend.Request.id.getter();
  v171 = SFAirDropSend.Request.type.getter(v170);
  v172 = SFAirDropSend.Request.requestSource.getter(v171);
  v174 = v173;
  if (!v94)
  {
    v175 = String._bridgeToObjectiveC()();
    v177 = (id)SFLocalizedStringForKey(v175, v176);

    if (!v177)
      goto LABEL_83;
    v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v177);
    v94 = v178;

  }
  v179 = v267;
  v246 = v174;
  v249 = v172;
  v266 = v94;
  v253 = v91;
  v269 = v89;
  v180 = objc_msgSend((id)v179[14], "modelName");
  if (v180)
  {
    v181 = v180;
    v213 = v179[45];
    v215 = v179[42];
    v216 = v179[43];
    v218 = v179[41];
    v219 = (void (*)(uint64_t, uint64_t))v179[44];
    v221 = v179[40];
    v223 = v179[39];
    v217 = v179[37];
    v225 = v179[36];
    v227 = v179[35];
    v229 = v179[34];
    v182 = v179[27];
    v230 = v179[31];
    v233 = v179[28];
    v236 = v179[24];
    v241 = v179[23];
    v243 = v179[22];
    v183 = v179[19];
    v184 = v179[13];
    v214 = (void *)v179[14];
    v185 = v179[11];
    v186 = v179[12];
    v187 = v179[10];
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
    v190 = v189;

    v191 = SFAirDropSend.Request.customPayload.getter();
    sub_1004979D0(v183, v182, v186, v184, v215, v216, v249, v246, v187, v256, v266, v188, v190, v213, v238, 0, 0, v269, v253,
      0,
      0xF000000000000000,
      0,
      v191,
      v192);

    v219(v185, v217);
    swift_task_dealloc(v218);
    swift_task_dealloc(v221);
    swift_task_dealloc(v223);
    swift_task_dealloc(v225);
    swift_task_dealloc(v227);
    swift_task_dealloc(v229);
    swift_task_dealloc(v230);
    swift_task_dealloc(v233);
    swift_task_dealloc(v182);
    swift_task_dealloc(v236);
    swift_task_dealloc(v241);
    swift_task_dealloc(v243);
    swift_task_dealloc(v183);
    v132 = (void (*)(void))v179[1];
    goto LABEL_71;
  }
  swift_bridgeObjectRelease(v238);
  __break(1u);
LABEL_83:
  swift_bridgeObjectRelease(v238);
  __break(1u);
}

uint64_t sub_1004961EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc(v3);
  v4 = (const char *)v2[47];
  v5 = v2[48];
  if (v0)
  {
    v6 = (const char *)v2[45];
    v7 = (const char *)v2[13];
    sub_10031C024(v2[16], v2[17], v2[18]);
    *(_QWORD *)&v8 = swift_bridgeObjectRelease(v7).n128_u64[0];
    *(_QWORD *)&v9 = swift_bridgeObjectRelease(v6, v8).n128_u64[0];
    swift_bridgeObjectRelease(v4, v9);
    swift_task_dealloc(v5);
    v10 = sub_100496730;
  }
  else
  {
    v12 = v2[17];
    v11 = v2[18];
    v13 = v2[16];
    swift_bridgeObjectRelease(v4);
    sub_10031C024(v13, v12, v11);
    swift_task_dealloc(v5);
    v10 = sub_1004962C0;
  }
  return swift_task_switch(v10, 0, 0);
}

void sub_1004962C0()
{
  uint64_t v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *(const char **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = SFAirDropSend.Request.itemPreviewData.getter();
  v7 = v6;
  v8 = SFAirDropSend.Request.type.getter(v5);
  v9 = SFAirDrop.TransferType.isOnlyExchange.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if ((v9 & 1) != 0
    || (v10 = objc_msgSend(*(id *)(v0 + 112), "computerName")) == 0)
  {
    v65 = 0;
    v13 = 0;
  }
  else
  {
    v11 = v10;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  sub_100244404(v5, v7);
  v14 = sub_100244404(v5, v7);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v66 = (char *)v1;
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v68 = v18;
    *(_DWORD *)v17 = 136315138;
    if (v7 >> 60 == 15)
    {
      v19 = (const char *)0x800000010061D000;
      v20 = 0xD000000000000016;
    }
    else
    {
      v20 = Data.description.getter(v5, v7);
      v19 = v21;
    }
    *(_QWORD *)(v0 + 16) = sub_100228BD8(v20, (unint64_t)v19, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4);
    swift_bridgeObjectRelease(v19);
    sub_100225AA0(v5, v7);
    sub_100225AA0(v5, v7);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Adding preview data to request %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v1 = v66;
  }
  else
  {
    sub_100225AA0(v5, v7);
    sub_100225AA0(v5, v7);

  }
  v22 = SFAirDropSend.Request.id.getter();
  v23 = SFAirDropSend.Request.type.getter(v22);
  v24 = SFAirDropSend.Request.requestSource.getter(v23);
  v26 = v25;
  if (!v13)
  {
    v27 = String._bridgeToObjectiveC()();
    v29 = (id)SFLocalizedStringForKey(v27, v28);

    if (!v29)
      goto LABEL_17;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v13 = v30;

  }
  v61 = v26;
  v62 = v24;
  v67 = v13;
  v63 = v7;
  v64 = v5;
  v31 = objc_msgSend(*(id *)(v0 + 112), "modelName");
  if (v31)
  {
    v32 = v31;
    v44 = *(_QWORD *)(v0 + 360);
    v46 = *(_QWORD *)(v0 + 336);
    v47 = *(_QWORD *)(v0 + 344);
    v49 = *(_QWORD *)(v0 + 328);
    v50 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    v51 = *(_QWORD *)(v0 + 320);
    v52 = *(_QWORD *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 296);
    v53 = *(_QWORD *)(v0 + 288);
    v54 = *(_QWORD *)(v0 + 280);
    v55 = *(_QWORD *)(v0 + 272);
    v56 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 216);
    v57 = *(_QWORD *)(v0 + 224);
    v58 = *(_QWORD *)(v0 + 192);
    v59 = *(_QWORD *)(v0 + 184);
    v60 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 152);
    v35 = *(_QWORD *)(v0 + 104);
    v45 = *(void **)(v0 + 112);
    v36 = *(_QWORD *)(v0 + 88);
    v37 = *(_QWORD *)(v0 + 96);
    v38 = *(_QWORD *)(v0 + 80);
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v41 = v40;

    v42 = SFAirDropSend.Request.customPayload.getter();
    sub_1004979D0(v34, v33, v37, v35, v46, v47, v62, v61, v38, v65, v67, v39, v41, v44, v66, 0, 0, v64, v63,
      0,
      0xF000000000000000,
      0,
      v42,
      v43);

    v50(v36, v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v33);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v34);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  swift_bridgeObjectRelease(v66);
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease(v1);
  __break(1u);
}

uint64_t sub_100496730()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(void **)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  sub_100225AA0(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344));

  v1(v4, v2);
  v5 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100496838(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  unint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  unint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;

  if (IsAppleInternalBuild(a1, a2))
  {
    v79 = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(222);
    v3._countAndFlagsBits = 0x75716572204B5341;
    v3._object = (void *)0xEF20444920747365;
    String.append(_:)(v3);
    v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    v5 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, v4, v5);
    v6._countAndFlagsBits = 0x206570795420;
    v6._object = (void *)0xE600000000000000;
    String.append(_:)(v6);
    v7 = (int *)_s10AskRequestVMa(0);
    v8 = v2 + v7[5];
    v9 = type metadata accessor for SFAirDrop.TransferType(0);
    v10 = sub_100220D78((unint64_t *)&unk_1007C5E50, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v8, v9, v10);
    v11._countAndFlagsBits = 0x207265646E655320;
    v11._object = (void *)0xE800000000000000;
    String.append(_:)(v11);
    v12 = (uint64_t *)(v2 + v7[7]);
    v13 = *v12;
    v14 = (void *)v12[1];
    swift_bridgeObjectRetain(v14);
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x22206D4E202CLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17 = (uint64_t *)(v2 + v7[9]);
    v18 = *v17;
    v19 = (void *)v17[1];
    swift_bridgeObjectRetain(v19);
    v20._countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v19);
    v21._countAndFlagsBits = 0x20644D202C22;
    v21._object = (void *)0xE600000000000000;
    String.append(_:)(v21);
    v22 = (uint64_t *)(v2 + v7[10]);
    v23 = *v22;
    v24 = (void *)v22[1];
    swift_bridgeObjectRetain(v24);
    v25._countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v26._object = (void *)0xEC000000203A736DLL;
    v26._countAndFlagsBits = 0x6574496C7275202CLL;
    String.append(_:)(v26);
    *(_QWORD *)&v78 = *(_QWORD *)(v2 + v7[11]);
    v27 = sub_100008384((uint64_t *)&unk_1007BD6A0);
    v28 = sub_1004998CC(&qword_1007C2430, (uint64_t *)&unk_1007BD6A0);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, v27, v28);
    v29._countAndFlagsBits = 0x3A73656C6966202CLL;
    v29._object = (void *)0xE900000000000020;
    String.append(_:)(v29);
    *(_QWORD *)&v78 = *(_QWORD *)(v2 + v7[12]);
    v30 = sub_100008384(&qword_1007C2438);
    v31 = sub_1004998CC(&qword_1007C2440, &qword_1007C2438);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, v30, v31);
    v32._countAndFlagsBits = 0xD00000000000001CLL;
    v32._object = (void *)0x800000010061CEC0;
    String.append(_:)(v32);
    LOBYTE(v78) = *(_BYTE *)(v2 + v7[16]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Bool, &protocol witness table for Bool);
    v33._object = (void *)0x800000010061CEE0;
    v33._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v33);
    v78 = *(_OWORD *)(v2 + v7[13]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
    v34._countAndFlagsBits = 0x6349656C6966202CLL;
    v34._object = (void *)0xEC000000203A6E6FLL;
    String.append(_:)(v34);
    v78 = *(_OWORD *)(v2 + v7[14]);
    v35 = sub_100287B60();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v35);
    v36._object = (void *)0x800000010061CF00;
    v36._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v36);
    v78 = *(_OWORD *)(v2 + v7[15]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v35);
    v37._object = (void *)0x800000010061CF20;
    v37._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v37);
    v78 = *(_OWORD *)(v2 + v7[6]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v35);
    v38._countAndFlagsBits = 0xD000000000000012;
    v38._object = (void *)0x800000010061CF40;
    String.append(_:)(v38);
    v78 = *(_OWORD *)(v2 + v7[8]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
    v39._object = (void *)0x800000010061CF60;
    v39._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v39);
    v78 = *(_OWORD *)(v2 + v7[17]);
    v40 = v35;
  }
  else
  {
    v79 = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(214);
    v41._countAndFlagsBits = 0x75716572204B5341;
    v41._object = (void *)0xEF20444920747365;
    String.append(_:)(v41);
    v42 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    v43 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, v42, v43);
    v44._countAndFlagsBits = 0x206570795420;
    v44._object = (void *)0xE600000000000000;
    String.append(_:)(v44);
    v45 = (int *)_s10AskRequestVMa(0);
    v46 = v2 + v45[5];
    v47 = type metadata accessor for SFAirDrop.TransferType(0);
    v48 = sub_100220D78((unint64_t *)&unk_1007C5E50, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v46, v47, v48);
    v49._countAndFlagsBits = 0x207265646E655320;
    v49._object = (void *)0xE800000000000000;
    String.append(_:)(v49);
    v50 = (uint64_t *)(v2 + v45[7]);
    v51 = *v50;
    v52 = (void *)v50[1];
    swift_bridgeObjectRetain(v52);
    v53._countAndFlagsBits = v51;
    v53._object = v52;
    String.append(_:)(v53);
    swift_bridgeObjectRelease(v52);
    v54._countAndFlagsBits = 0x22206D4E202CLL;
    v54._object = (void *)0xE600000000000000;
    String.append(_:)(v54);
    v55 = (uint64_t *)(v2 + v45[9]);
    v56 = *v55;
    v57 = (void *)v55[1];
    swift_bridgeObjectRetain(v57);
    v58._countAndFlagsBits = v56;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v57);
    v59._countAndFlagsBits = 0x20644D202C22;
    v59._object = (void *)0xE600000000000000;
    String.append(_:)(v59);
    v60 = (uint64_t *)(v2 + v45[10]);
    v61 = *v60;
    v62 = (void *)v60[1];
    swift_bridgeObjectRetain(v62);
    v63._countAndFlagsBits = v61;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v62);
    v64._countAndFlagsBits = 0xD000000000000012;
    v64._object = (void *)0x800000010061CF80;
    String.append(_:)(v64);
    v65 = *(_QWORD *)(v2 + v45[11]);
    if (v65)
      v66 = *(_QWORD *)(v65 + 16);
    else
      v66 = 0;
    *(_QWORD *)&v78 = v66;
    BYTE8(v78) = v65 == 0;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
    v67._countAndFlagsBits = 0x2E73656C6966202CLL;
    v67._object = (void *)0xEF203A746E756F63;
    String.append(_:)(v67);
    v68 = *(_QWORD *)(v2 + v45[12]);
    if (v68)
      v69 = *(_QWORD *)(v68 + 16);
    else
      v69 = 0;
    *(_QWORD *)&v78 = v69;
    BYTE8(v78) = v68 == 0;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
    v70._countAndFlagsBits = 0xD00000000000001CLL;
    v70._object = (void *)0x800000010061CEC0;
    String.append(_:)(v70);
    LOBYTE(v78) = *(_BYTE *)(v2 + v45[16]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Bool, &protocol witness table for Bool);
    v71._object = (void *)0x800000010061CEE0;
    v71._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v71);
    v78 = *(_OWORD *)(v2 + v45[13]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
    v72._countAndFlagsBits = 0x6349656C6966202CLL;
    v72._object = (void *)0xEC000000203A6E6FLL;
    String.append(_:)(v72);
    v78 = *(_OWORD *)(v2 + v45[14]);
    v73 = sub_100287B60();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v73);
    v74._object = (void *)0x800000010061CF00;
    v74._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v74);
    v78 = *(_OWORD *)(v2 + v45[15]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v73);
    v75._object = (void *)0x800000010061CF20;
    v75._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v75);
    v78 = *(_OWORD *)(v2 + v45[6]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v73);
    v76._object = (void *)0x800000010061CF60;
    v76._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v76);
    v78 = *(_OWORD *)(v2 + v45[17]);
    v40 = v73;
  }
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v40);
  return v79;
}

uint64_t sub_100497120()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  unint64_t v18;
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];
  _QWORD v22[2];
  char v23;

  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(118);
  v17 = 0;
  v18 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000011;
  v1._object = (void *)0x800000010061CFA0;
  String.append(_:)(v1);
  v2 = *v0;
  v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x20644D202C22;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6 = v0[2];
  v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  v9._object = (void *)0x800000010061CFC0;
  String.append(_:)(v9);
  sub_10022E718((uint64_t)(v0 + 4), (uint64_t)&v23, &qword_1007BAAD8);
  sub_10022E718((uint64_t)&v23, (uint64_t)v22, &qword_1007BAAD8);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v22, &type metadata for Bool, &protocol witness table for Bool);
  v10._countAndFlagsBits = 0x736553736469202CLL;
  v10._object = (void *)0xEF2044496E6F6973;
  String.append(_:)(v10);
  sub_10022E718((uint64_t)(v0 + 5), (uint64_t)v22, &qword_1007B54E0);
  sub_10022E718((uint64_t)v22, (uint64_t)v21, &qword_1007B54E0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v21, &type metadata for String, &protocol witness table for String);
  v11._countAndFlagsBits = 0x6F6475657370202CLL;
  v11._object = (void *)0xEC000000206D796ELL;
  String.append(_:)(v11);
  sub_10022E718((uint64_t)(v0 + 7), (uint64_t)v21, &qword_1007B54E0);
  sub_10022E718((uint64_t)v21, (uint64_t)v20, &qword_1007B54E0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v20, &type metadata for String, &protocol witness table for String);
  v12._countAndFlagsBits = 0x6F5468737570202CLL;
  v12._object = (void *)0xEC000000206E656BLL;
  String.append(_:)(v12);
  sub_10022E718((uint64_t)(v0 + 9), (uint64_t)v20, &qword_1007B54E0);
  sub_10022E718((uint64_t)v20, (uint64_t)v19, &qword_1007B54E0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v19, &type metadata for String, &protocol witness table for String);
  v13._object = (void *)0x800000010061CFE0;
  v13._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  sub_10022E718((uint64_t)(v0 + 11), (uint64_t)v19, &qword_1007B5220);
  sub_10022E718((uint64_t)v19, (uint64_t)v16, &qword_1007B5220);
  v14 = sub_100287B60();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v16, &type metadata for Data, v14);
  return v17;
}

uint64_t sub_1004973E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C2350);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C2350);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100497474(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004974AC + 4 * byte_1005DA260[a1]))(0x726566736E617254, 0xEA00000000004449);
}

unint64_t sub_1004974BC()
{
  return 0xD000000000000010;
}

uint64_t sub_100497578()
{
  return 0x6E6F6349656C6946;
}

uint64_t sub_100497590()
{
  return 0x6C69466C6C616D53;
}

void sub_1004975B4()
{
  JUMPOUT(0x1004975C8);
}

uint64_t sub_1004975D4()
{
  return 0x61506D6F74737543;
}

uint64_t sub_1004975F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100497630 + 4 * byte_1005DA26E[a1]))(0x726566736E617254, 0xEA00000000004449);
}

unint64_t sub_100497640()
{
  return 0xD000000000000010;
}

uint64_t sub_1004976FC()
{
  return 0x6E6F6349656C6946;
}

uint64_t sub_100497714()
{
  return 0x6C69466C6C616D53;
}

void sub_100497738()
{
  JUMPOUT(0x10049774CLL);
}

uint64_t sub_100497758()
{
  return 0x61506D6F74737543;
}

uint64_t sub_10049777C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  const char *v9;
  char v10;
  double v11;

  v2 = *a2;
  v3 = sub_100497474(*a1);
  v5 = v4;
  v6 = sub_100497474(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  *(_QWORD *)&v11 = swift_bridgeObjectRelease(v5).n128_u64[0];
  swift_bridgeObjectRelease(v9, v11);
  return v10 & 1;
}

Swift::Int sub_100497804()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  const char *v3;
  const char *v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = sub_100497474(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

__n128 sub_100497864(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  const char *v4;
  const char *v5;

  v3 = sub_100497474(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1004978A4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  const char *v3;
  const char *v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = sub_100497474(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_100497900@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10049ADEC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10049792C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100497474(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100497954()
{
  unsigned __int8 *v0;

  return sub_1004975F8(*v0);
}

unint64_t sub_10049795C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10049ADEC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100497980(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10049D1C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004979A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10049D1C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004979D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  double v41;
  uint64_t result;
  uint64_t v44;
  uint64_t v46;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v27 = (int *)_s10AskRequestVMa(0);
  v44 = v27[11];
  v46 = v27[12];
  *(_QWORD *)(a9 + v46) = _swiftEmptyArrayStorage;
  v28 = a9 + v27[13];
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  v29 = a9 + v27[14];
  *(_OWORD *)v29 = xmmword_1005CF260;
  v52 = a9 + v27[15];
  *(_OWORD *)v52 = xmmword_1005CF260;
  v54 = v27[16];
  *(_BYTE *)(a9 + v54) = 0;
  v53 = a9 + v27[17];
  *(_OWORD *)v53 = xmmword_1005CF260;
  v30 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(a9, a1, v30);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(a9, 0, 1, v30);
  v32 = a9 + v27[5];
  v33 = type metadata accessor for SFAirDrop.TransferType(0);
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v32, a2, v33);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
  v35 = (_QWORD *)(a9 + v27[6]);
  *v35 = a5;
  v35[1] = a6;
  v36 = (_QWORD *)(a9 + v27[8]);
  *v36 = a7;
  v36[1] = a8;
  v37 = (_QWORD *)(a9 + v27[7]);
  *v37 = a3;
  v37[1] = a4;
  v38 = (_QWORD *)(a9 + v27[9]);
  *v38 = a10;
  v38[1] = a11;
  v39 = (_QWORD *)(a9 + v27[10]);
  *v39 = a12;
  v39[1] = a13;
  *(_QWORD *)(a9 + v44) = a14;
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a2, v33);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, v30);
  if (a15)
    v40 = a15;
  else
    v40 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v41 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(a9 + v46), a1).n128_u64[0];
  *(_QWORD *)(a9 + v46) = v40;
  swift_bridgeObjectRelease(*(const char **)(v28 + 8), v41);
  *(_QWORD *)v28 = a16;
  *(_QWORD *)(v28 + 8) = a17;
  sub_100225AA0(*(_QWORD *)v29, *(_QWORD *)(v29 + 8));
  *(_QWORD *)v29 = a18;
  *(_QWORD *)(v29 + 8) = a19;
  sub_100225AA0(*(_QWORD *)v52, *(_QWORD *)(v52 + 8));
  *(_QWORD *)v52 = a20;
  *(_QWORD *)(v52 + 8) = a21;
  *(_BYTE *)(a9 + v54) = a22;
  result = sub_100225AA0(*(_QWORD *)v53, *(_QWORD *)(v53 + 8));
  *(_QWORD *)v53 = a23;
  *(_QWORD *)(v53 + 8) = a24;
  return result;
}

uint64_t sub_100497CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = sub_100008384((uint64_t *)&unk_1007B5200);
  v5[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v5[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v9);
  v5[14] = swift_task_alloc(v9);
  v5[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_100497D50, 0, 0);
}

void sub_100497D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFArray *isa;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  void (*v30)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, __n128);
  char *v49;

  v1 = *(_QWORD *)(v0 + 48);
  v49 = (char *)_swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 16);
  v4 = swift_bridgeObjectRetain((const char *)v1);
  v5 = *(_QWORD *)(v0 + 96);
  if (v2)
  {
    v47 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v6 = v3 + v47;
    v7 = *(_QWORD *)(v5 + 72);
    v48 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 16);
    v8 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v10 = *(_QWORD *)(v0 + 80);
      v9 = *(_QWORD *)(v0 + 88);
      v48(v10, v6, v9, v4);
      v11 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
      v11(v10, 0, 1, v9);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v10, 1, v9) == 1)
        break;
      v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32);
      v13 = v12(*(char **)(v0 + 120), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
      if ((URL.isFileURL.getter(v13) & 1) != 0)
      {
        v12(*(char **)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_100229810(0, *((_QWORD *)v8 + 2) + 1, 1);
          v8 = v49;
        }
        v14 = v8;
        v15 = *((_QWORD *)v8 + 2);
        v16 = *((_QWORD *)v14 + 3);
        if (v15 >= v16 >> 1)
        {
          sub_100229810(v16 > 1, v15 + 1, 1);
          v14 = v49;
        }
        v17 = *(_QWORD *)(v0 + 112);
        v18 = *(_QWORD *)(v0 + 88);
        *((_QWORD *)v14 + 2) = v15 + 1;
        v12(&v14[v47 + v15 * v7], v17, v18);
        v49 = v14;
        v8 = v14;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v5 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
      }
      v6 += v7;
      if (!--v2)
        goto LABEL_13;
    }
  }
  else
  {
    v11 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
    v8 = (char *)_swiftEmptyArrayStorage;
LABEL_13:
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v11)(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 88), v4);
  }
  v19 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease(*(const char **)(v0 + 48));
  sub_10000D0F0(v19, (uint64_t *)&unk_1007B5200);
  if (*((_QWORD *)v8 + 2))
  {
    v20 = (uint64_t)v8;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v22 = (void *)sub_10019ADCC(isa);

    if (!v22)
    {
      __break(1u);
      return;
    }
    v23 = *(_QWORD *)(v0 + 56);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v24 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 88);
    if (v23)
    {
      v27 = *(_QWORD *)(v0 + 72);
      v28 = swift_task_alloc(48);
      v29 = *(_OWORD *)(v0 + 56);
      *(_QWORD *)(v28 + 16) = v25;
      *(_OWORD *)(v28 + 24) = v29;
      *(_QWORD *)(v28 + 40) = v27;
      v30 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_10049D3F0;
    }
    else
    {
      v28 = swift_task_alloc(32);
      *(_QWORD *)(v28 + 16) = v25;
      v30 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_10049D3D4;
    }
    v8 = (char *)v20;
    v31 = sub_100494B88(v30, v28, v20);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    swift_task_dealloc(v28);
  }
  else
  {
    v31 = _swiftEmptyArrayStorage;
  }
  if (qword_1007B4190 != -1)
    swift_once(&qword_1007B4190, sub_1004973E4);
  v32 = type metadata accessor for Logger(0);
  sub_100221DF8(v32, (uint64_t)qword_1007C2350);
  v33 = swift_retain_n(v8, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = *(_QWORD *)(v0 + 88);
    v37 = swift_slowAlloc(32, -1);
    v38 = (char *)swift_slowAlloc(32, -1);
    v49 = v38;
    *(_DWORD *)v37 = 134218499;
    *(_QWORD *)(v0 + 16) = *((_QWORD *)v8 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v37 + 4);
    swift_release(v8);
    *(_WORD *)(v37 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v37 + 14);
    *(_WORD *)(v37 + 22) = 2081;
    v39 = swift_retain();
    v40 = Array.description.getter(v39, v36);
    v42 = v41;
    swift_release(v8);
    *(_QWORD *)(v0 + 32) = sub_100228BD8(v40, (unint64_t)v42, (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v37 + 24);
    swift_bridgeObjectRelease(v42);
    swift_release_n(v8, 2);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Adding file items (count=%ld) to request: %{private,mask.hash}s", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    swift_release_n(v8, 3);
  }

  v44 = *(_QWORD *)(v0 + 112);
  v43 = *(_QWORD *)(v0 + 120);
  v45 = *(_QWORD *)(v0 + 104);
  v46 = *(_QWORD *)(v0 + 80);
  **(_QWORD **)(v0 + 40) = v31;
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  (*(void (**)(void))(v0 + 8))();
}

double sub_100498264@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  char v19;
  int v20;
  double result;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[5];
  __int16 v26;
  _QWORD *v27;

  v27 = a4;
  v10 = type metadata accessor for URL(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v24 - v14;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17((char *)&v24 - v14, a1, v10);
  v17(v13, a2, v10);
  if (*(_QWORD *)(a3 + 16) && (v18 = sub_10045C374(a1), (v19 & 1) != 0))
    v20 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + v18);
  else
    v20 = 0;
  sub_10049C38C((uint64_t)v15, (uint64_t)v13, v20, (uint64_t *)v25);
  if (v5)
  {
    *v27 = v5;
  }
  else
  {
    v22 = v25[3];
    *(_OWORD *)(a5 + 32) = v25[2];
    *(_OWORD *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 64) = v25[4];
    *(_WORD *)(a5 + 80) = v26;
    result = *(double *)v25;
    v23 = v25[1];
    *(_OWORD *)a5 = v25[0];
    *(_OWORD *)(a5 + 16) = v23;
  }
  return result;
}

double sub_1004983A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  double result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[5];
  __int16 v22;

  v9 = type metadata accessor for URL(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v20 - v13;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16((char *)&v20 - v13, a1, v9);
  v16(v12, a2, v9);
  sub_10049C38C((uint64_t)v14, (uint64_t)v12, 0, (uint64_t *)v21);
  if (v4)
  {
    *a3 = v4;
  }
  else
  {
    v18 = v21[3];
    *(_OWORD *)(a4 + 32) = v21[2];
    *(_OWORD *)(a4 + 48) = v18;
    *(_OWORD *)(a4 + 64) = v21[4];
    *(_WORD *)(a4 + 80) = v22;
    result = *(double *)v21;
    v19 = v21[1];
    *(_OWORD *)a4 = v21[0];
    *(_OWORD *)(a4 + 16) = v19;
  }
  return result;
}

uint64_t sub_1004984C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  __int128 v42;

  v3 = v1;
  v5 = sub_100008384(&qword_1007C2498);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10023A834(a1, v9);
  v11 = sub_10049D1C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10AskRequestV10CodingKeysON, &_s10AskRequestV10CodingKeysON, v11, v9, v10);
  LOBYTE(v42) = 0;
  v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v13 = sub_100220D78(&qword_1007BD7A8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v42, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)_s10AskRequestVMa(0);
    v15 = v3 + v14[5];
    LOBYTE(v42) = 1;
    v16 = type metadata accessor for SFAirDrop.TransferType(0);
    v17 = sub_100220D78(&qword_1007C24A0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v42, v5, v16, v17);
    v42 = *(_OWORD *)(v3 + v14[6]);
    v41 = 2;
    v18 = sub_100285DE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
    v19 = (uint64_t *)(v3 + v14[7]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v42, v5);
    v22 = (uint64_t *)(v3 + v14[8]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v42) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v42, v5);
    v25 = (uint64_t *)(v3 + v14[9]);
    v26 = *v25;
    v27 = v25[1];
    LOBYTE(v42) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v42, v5);
    v28 = (uint64_t *)(v3 + v14[10]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v42) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v42, v5);
    *(_QWORD *)&v42 = *(_QWORD *)(v3 + v14[11]);
    v41 = 7;
    v31 = sub_100008384((uint64_t *)&unk_1007BD6A0);
    v32 = sub_10049D24C(&qword_1007C24A8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, v31, v32);
    *(_QWORD *)&v42 = *(_QWORD *)(v3 + v14[12]);
    v41 = 8;
    v33 = sub_100008384(&qword_1007C2438);
    v34 = sub_10049D2AC(&qword_1007C24B0, (void (*)(void))sub_10049D314, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, v33, v34);
    v35 = (uint64_t *)(v3 + v14[13]);
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v42) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v42, v5);
    v42 = *(_OWORD *)(v3 + v14[14]);
    v41 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
    v42 = *(_OWORD *)(v3 + v14[15]);
    v41 = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
    v38 = *(unsigned __int8 *)(v3 + v14[16]);
    LOBYTE(v42) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, &v42, v5);
    v42 = *(_OWORD *)(v3 + v14[17]);
    v41 = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100498940@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  char *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  char v75;

  v62 = a2;
  v4 = sub_100008384(&qword_1007B7E48);
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008384((uint64_t *)&unk_1007B7E50);
  __chkstk_darwin(v7);
  v63 = (uint64_t *)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_100008384(&qword_1007C2468);
  v9 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s10AskRequestVMa(0);
  v13 = (int *)__chkstk_darwin(v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v13[11];
  *(_QWORD *)&v15[v73] = 0;
  v72 = v13[12];
  *(_QWORD *)&v15[v72] = _swiftEmptyArrayStorage;
  v16 = &v15[v13[13]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v70 = v16;
  v17 = &v15[v13[14]];
  *(_OWORD *)v17 = xmmword_1005CF260;
  v68 = &v15[v13[15]];
  v69 = v17;
  *(_OWORD *)v68 = xmmword_1005CF260;
  v18 = v13[16];
  v15[v18] = 0;
  v71 = v13;
  v19 = &v15[v13[17]];
  v66 = a1;
  v67 = v19;
  *(_OWORD *)v19 = xmmword_1005CF260;
  v21 = a1[3];
  v20 = a1[4];
  sub_10023A834(a1, v21);
  v22 = sub_10049D1C4();
  v64 = v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s10AskRequestV10CodingKeysON, &_s10AskRequestV10CodingKeysON, v22, v21, v20);
  if (v2)
  {
    sub_10022E75C(v66);
    v29 = v67;
    *(_QWORD *)&v31 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v15[v73], v30).n128_u64[0];
    *(_QWORD *)&v32 = swift_bridgeObjectRelease((const char *)*(_QWORD *)&v15[v72], v31).n128_u64[0];
    swift_bridgeObjectRelease(*((const char **)v70 + 1), v32);
    sub_100225AA0(*(_QWORD *)v69, *((_QWORD *)v69 + 1));
    sub_100225AA0(*(_QWORD *)v68, *((_QWORD *)v68 + 1));
    return sub_100225AA0(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
  }
  else
  {
    v23 = v6;
    v61 = v18;
    v24 = v9;
    v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    LOBYTE(v74) = 0;
    v26 = sub_100220D78(&qword_1007BD798, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v27 = v63;
    v28 = v65;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v63, v25, &v74, v65, v25, v26);
    sub_10022E718((uint64_t)v27, (uint64_t)v15, (uint64_t *)&unk_1007B7E50);
    v33 = type metadata accessor for SFAirDrop.TransferType(0);
    LOBYTE(v74) = 1;
    v34 = sub_100220D78(&qword_1007C2478, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v33, &v74, v28, v33, v34);
    v35 = v71;
    sub_10022E718((uint64_t)v23, (uint64_t)&v15[v71[5]], &qword_1007B7E48);
    v75 = 2;
    v36 = (_QWORD *)sub_100285DA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, &type metadata for Data, &v75, v28, &type metadata for Data, v36);
    v63 = v36;
    *(_OWORD *)&v15[v35[6]] = v74;
    LOBYTE(v74) = 3;
    v37 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v28);
    v38 = (uint64_t *)&v15[v35[7]];
    *v38 = v37;
    v38[1] = v39;
    LOBYTE(v74) = 4;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v28);
    v41 = (uint64_t *)&v15[v35[8]];
    *v41 = v40;
    v41[1] = v42;
    LOBYTE(v74) = 5;
    v43 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v28);
    v44 = (uint64_t *)&v15[v35[9]];
    *v44 = v43;
    v44[1] = v45;
    LOBYTE(v74) = 6;
    v46 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v28);
    v47 = (uint64_t *)&v15[v35[10]];
    *v47 = v46;
    v47[1] = v48;
    v49 = sub_100008384((uint64_t *)&unk_1007BD6A0);
    v75 = 7;
    v50 = sub_10049D24C(&qword_1007C2480, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, v49, &v75, v28, v49, v50);
    *(_QWORD *)&v15[v73] = v74;
    v51 = sub_100008384(&qword_1007C2438);
    v75 = 8;
    v52 = sub_10049D2AC(&qword_1007C2488, (void (*)(void))sub_10049D208, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, v51, &v75, v28, v51, v52);
    *(_QWORD *)&v15[v72] = v74;
    LOBYTE(v74) = 9;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v28);
    v54 = v70;
    *(_QWORD *)v70 = v53;
    *((_QWORD *)v54 + 1) = v55;
    v75 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, &type metadata for Data, &v75, v65, &type metadata for Data, v63);
    *(_OWORD *)v69 = v74;
    v75 = 11;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, &type metadata for Data, &v75, v65, &type metadata for Data, v63);
    *(_OWORD *)v68 = v74;
    LOBYTE(v74) = 12;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v65);
    v15[v61] = v56;
    v75 = 13;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, &type metadata for Data, &v75, v65, &type metadata for Data, v63);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v64, v65);
    v57 = v74;
    v58 = v67;
    sub_100225AA0(*(_QWORD *)v67, *((_QWORD *)v67 + 1));
    *(_OWORD *)v58 = v57;
    sub_100244384((uint64_t)v15, v62, _s10AskRequestVMa);
    sub_10022E75C(v66);
    return sub_1002443C8((uint64_t)v15, _s10AskRequestVMa);
  }
}

uint64_t sub_100499170(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004991AC + 4 * byte_1005DA27C[a1]))(0xD000000000000014, 0x80000001006113B0);
}

unint64_t sub_1004991AC()
{
  return 0xD000000000000011;
}

void sub_100499210()
{
  JUMPOUT(0x10049921CLL);
}

uint64_t sub_100499228(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100499264 + 4 * byte_1005DA283[a1]))(0xD000000000000014, 0x80000001006113B0);
}

unint64_t sub_100499264()
{
  return 0xD000000000000011;
}

void sub_1004992C8()
{
  JUMPOUT(0x1004992D4);
}

uint64_t sub_1004992E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100498940(a1, a2);
}

uint64_t sub_1004992F4(_QWORD *a1)
{
  return sub_1004984C4(a1);
}

void sub_10049930C(char *a1)
{
  sub_1004A8094(*a1);
}

void sub_100499318()
{
  char *v0;

  sub_1004A91E4(0, *v0);
}

void sub_100499324(uint64_t a1)
{
  char *v1;

  sub_1004A8BCC(a1, *v1);
}

void sub_10049932C(uint64_t a1)
{
  char *v1;

  sub_1004A91E4(a1, *v1);
}

unint64_t sub_100499334@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071D078;
  result = sub_10049D97C(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100499368@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100499170(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100499390()
{
  unsigned __int8 *v0;

  return sub_100499228(*v0);
}

unint64_t sub_100499398@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071D078;
  result = sub_10049D97C(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1004993C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10049D180();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004993EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10049D180();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100499414(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char v26;
  _BYTE v27[16];
  _BYTE v28[16];

  v3 = v1;
  v5 = sub_100008384(&qword_1007C2460);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10023A834(a1, v9);
  v11 = sub_10049D180();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s11AskResponseV10CodingKeysON, &_s11AskResponseV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v27[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v27, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v27[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v27, v5);
    v16 = *((unsigned __int8 *)v3 + 32);
    v27[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v27, v5);
    v17 = v3[5];
    v18 = v3[6];
    v27[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v27, v5);
    v19 = v3[7];
    v20 = v3[8];
    v27[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v27, v5);
    v21 = v3[9];
    v22 = v3[10];
    v27[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v27, v5);
    sub_10022E718((uint64_t)(v3 + 11), (uint64_t)v28, &qword_1007B5220);
    sub_10022E718((uint64_t)v28, (uint64_t)v27, &qword_1007B5220);
    v26 = 6;
    v23 = sub_100285DE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v26, v5, &type metadata for Data, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100499628(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10049965C + 4 * byte_1005DA28A[a1]))(0x656D614E656C6946, 0xE800000000000000);
}

uint64_t sub_10049965C()
{
  return 0x65707954656C6946;
}

uint64_t sub_100499670()
{
  return 0x54627553656C6946;
}

uint64_t sub_100499690()
{
  return 0x657A6953656C6946;
}

uint64_t sub_1004996A4()
{
  return 0x506D6F42656C6946;
}

uint64_t sub_1004996C4()
{
  return 0x69447349656C6946;
}

unint64_t sub_1004996E8()
{
  return 0xD000000000000019;
}

uint64_t sub_100499704(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100499738 + 4 * byte_1005DA291[a1]))(0x656D614E656C6946, 0xE800000000000000);
}

uint64_t sub_100499738()
{
  return 0x65707954656C6946;
}

uint64_t sub_10049974C()
{
  return 0x54627553656C6946;
}

uint64_t sub_10049976C()
{
  return 0x657A6953656C6946;
}

uint64_t sub_100499780()
{
  return 0x506D6F42656C6946;
}

uint64_t sub_1004997A0()
{
  return 0x69447349656C6946;
}

unint64_t sub_1004997C4()
{
  return 0xD000000000000019;
}

__n128 sub_1004997E0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_10049CC48(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10049983C(_QWORD *a1)
{
  return sub_100499414(a1);
}

uint64_t sub_100499884()
{
  return sub_100497120();
}

uint64_t sub_1004998CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10021FF9C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10049990C(char *a1)
{
  sub_1004A8258(*a1);
}

void sub_100499918()
{
  char *v0;

  sub_1004A92E4(0, *v0);
}

void sub_100499924(uint64_t a1)
{
  char *v1;

  sub_1004A8CA4(a1, *v1);
}

void sub_10049992C(uint64_t a1)
{
  char *v1;

  sub_1004A92E4(a1, *v1);
}

unint64_t sub_100499934@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071D140;
  result = sub_10049D97C(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100499968@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100499628(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100499990()
{
  unsigned __int8 *v0;

  return sub_100499704(*v0);
}

unint64_t sub_100499998@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_10071D140;
  result = sub_10049D97C(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1004999C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10049DD9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004999EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10049DD9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100499A14(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_100008384(&qword_1007C2520);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10023A834(a1, v9);
  v11 = sub_10049DD9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10AskRequestV8FileInfoV10CodingKeysON, &_s10AskRequestV8FileInfoV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v32 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v31 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = v3[4];
    v17 = v3[5];
    v30 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v30, v5);
    v18 = v3[6];
    v19 = *((unsigned __int8 *)v3 + 56);
    v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v29, v5);
    v20 = v3[8];
    v21 = v3[9];
    v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v28, v5);
    v22 = *((unsigned __int8 *)v3 + 80);
    v27 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v5);
    v23 = *((unsigned __int8 *)v3 + 81);
    v26 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_100499BF4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  __int16 v8;

  sub_10049D9C0(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_WORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100499C4C(_QWORD *a1)
{
  return sub_100499A14(a1);
}

uint64_t sub_100499C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = sub_100008384(&qword_1007B51F8);
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[10] = v9;
  v6[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v6[12] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[13] = v11;
  v6[14] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100008384(&qword_1007B7280) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[15] = swift_task_alloc(v12);
  v6[16] = swift_task_alloc(v12);
  v13 = _s10AskRequestVMa(0);
  v6[17] = v13;
  v6[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SDAirDropServerConnection(0);
  v6[19] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[20] = swift_task_alloc(v15);
  v6[21] = swift_task_alloc(v15);
  v16 = sub_100008384(&qword_1007B7E48);
  v6[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SFAirDrop.TransferType(0);
  v6[23] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[24] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[25] = swift_task_alloc(v19);
  v6[26] = swift_task_alloc(v19);
  v6[27] = swift_task_alloc(v19);
  v6[28] = swift_task_alloc(v19);
  v20 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0);
  v6[29] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v6[30] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[31] = swift_task_alloc(v22);
  v6[32] = swift_task_alloc(v22);
  v6[33] = swift_task_alloc(v22);
  v23 = sub_100008384((uint64_t *)&unk_1007B5200);
  v6[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for URL(0);
  v6[35] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v6[36] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[37] = swift_task_alloc(v26);
  v6[38] = swift_task_alloc(v26);
  return swift_task_switch(sub_100499EB4, 0, 0);
}

uint64_t sub_100499EB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  const char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int EnumCaseMultiPayload;
  uint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  void *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;

  v1 = v0[17];
  v2 = v0[7];
  v3 = *(_QWORD *)(v2 + *(int *)(v1 + 44));
  if (v3 && (v4 = *(_QWORD *)(v3 + 16)) != 0)
  {
    v5 = v0[36];
    swift_bridgeObjectRetain(*(const char **)(v2 + *(int *)(v1 + 44)));
    v6 = (const char **)(v3 + 40);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v9 = v0[34];
      v8 = v0[35];
      v10 = (uint64_t)*(v6 - 1);
      v11 = *v6;
      swift_bridgeObjectRetain(*v6);
      URL.init(string:)(v10, v11);
      v12 = swift_bridgeObjectRelease(v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 48))(v9, 1, v8, v12) == 1)
      {
        sub_10000D0F0(v0[34], (uint64_t *)&unk_1007B5200);
      }
      else
      {
        v14 = v0[37];
        v13 = v0[38];
        v15 = v0[35];
        v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
        v16(v13, v0[34], v15);
        v16(v14, v13, v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = (_QWORD *)sub_100227A54(0, v7[2] + 1, 1, (unint64_t)v7);
        v18 = v7[2];
        v17 = v7[3];
        if (v18 >= v17 >> 1)
          v7 = (_QWORD *)sub_100227A54(v17 > 1, v18 + 1, 1, (unint64_t)v7);
        v19 = v0[37];
        v20 = v0[35];
        v7[2] = v18 + 1;
        v16((uint64_t)v7+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v18, v19, v20);
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease((const char *)v3);
    v1 = v0[17];
    v2 = v0[7];
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
  }
  v0[39] = v7;
  v21 = *(_QWORD *)(v2 + *(int *)(v1 + 48));
  v132 = v0;
  if (v21 && (v22 = *(_QWORD *)(v21 + 16)) != 0)
  {
    v120 = v7;
    v23 = v0[30];
    swift_bridgeObjectRetain((const char *)v21);
    v24 = v21 + 56;
    v25 = _swiftEmptyArrayStorage;
    v121 = v21;
    v122 = v23;
    do
    {
      v26 = *(const char **)v24;
      if (*(_QWORD *)v24)
      {
        v27 = *(_QWORD *)(v24 - 24);
        v28 = *(char **)(v24 - 16);
        v130 = *(_QWORD *)(v24 + 8);
        v128 = *(_QWORD *)(v24 - 8);
        v129 = *(const char **)(v24 + 16);
        v29 = *(const char **)(v24 + 48);
        v127 = *(unsigned __int8 *)(v24 + 56);
        v30 = *(_BYTE *)(v24 + 57);
        v123 = v22;
        if (v29)
        {
          v126 = *(_QWORD *)(v24 + 40);
          swift_bridgeObjectRetain(v26);
          v125 = (unint64_t)v29;
        }
        else
        {
          v133 = 12078;
          v134 = 0xE200000000000000;
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v28);
          v36._countAndFlagsBits = v27;
          v36._object = v28;
          String.append(_:)(v36);
          swift_bridgeObjectRelease(v28);
          v125 = 0xE200000000000000;
          v126 = 12078;
        }
        v37 = v30 & 1;
        v38 = v132[32];
        v39 = v132[33];
        v124 = v132[31];
        v40 = v132[29];
        swift_bridgeObjectRetain(v129);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        SFAirDropReceive.AskRequest.ItemInfo.init(convertMediaFormats:fileBomPath:fileIsDirectory:fileName:fileSubType:fileType:)(v37, v126, v125, v127, v27, v28, v130, v129, v128, v26);
        v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32);
        v41(v39, v38, v40);
        v41(v124, v39, v40);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
          v25 = (_QWORD *)sub_100228468(0, v25[2] + 1, 1, (unint64_t)v25);
        v0 = v132;
        v21 = v121;
        v22 = v123;
        v43 = v25[2];
        v42 = v25[3];
        if (v43 >= v42 >> 1)
          v25 = (_QWORD *)sub_100228468(v42 > 1, v43 + 1, 1, (unint64_t)v25);
        v44 = v132[31];
        v45 = v132[29];
        v25[2] = v43 + 1;
        v41((uint64_t)v25+ ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))+ *(_QWORD *)(v122 + 72) * v43, v44, v45);
      }
      else
      {
        if (qword_1007B4190 != -1)
          swift_once(&qword_1007B4190, sub_1004973E4);
        v31 = type metadata accessor for Logger(0);
        v32 = sub_100221DF8(v31, (uint64_t)qword_1007C2350);
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.error.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v35 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing fileType for ASK", v35, 2u);
          swift_slowDealloc(v35, -1, -1);
        }

      }
      v24 += 88;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease((const char *)v21);
    v7 = v120;
  }
  else
  {
    v25 = _swiftEmptyArrayStorage;
  }
  v0[40] = v25;
  if (v25[2] || !v7[2])
    v46 = (unsigned int *)&enum case for SFAirDrop.TransferType.files(_:);
  else
    v46 = (unsigned int *)&enum case for SFAirDrop.TransferType.links(_:);
  v47 = v0[28];
  v48 = v0[26];
  v49 = v0[23];
  v50 = v0[24];
  v51 = v0[22];
  v52 = v0[17];
  v53 = v0[7];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v47, *v46, v49);
  sub_100221F28(v53 + *(int *)(v52 + 20), v51, &qword_1007B7E48);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
  v0[41] = v54;
  v54(v48, v47, v49);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v49);
  v56 = v0[27];
  v57 = v0[23];
  v58 = v0[24];
  v59 = v0[22];
  if (v55 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v58 + 32))(v0[27], v0[26], v0[23]);
    sub_10000D0F0(v59, &qword_1007B7E48);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v58 + 8))(v0[26], v0[23]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v56, v59, v57);
  }
  v60 = (char *)(v0 + 49);
  v61 = (uint64_t *)(v0[7] + *(int *)(v0[17] + 24));
  v62 = v61[1];
  if (v62 >> 60 == 15)
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
LABEL_43:
    v68 = 0;
    v69 = v132;
    v70 = v132[7];
    v71 = v63;
    goto LABEL_60;
  }
  v72 = v0;
  v73 = *v61;
  v74 = v0[21];
  v75 = v0[19];
  sub_100244384(v72[5], v74, type metadata accessor for SDAirDropServerConnection);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v75);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v77 = v132[21];
      v78 = (void *)v132[4];
      sub_10022E4A8(v73, v62);
      sub_1002443C8(v77, type metadata accessor for SDAirDropServerConnection);
      v79 = sub_100390B40(v78);
      sub_100225AA0(v73, v62);
    }
    else
    {
      v81 = (uint64_t *)v132[21];
      v82 = v132[9];
      v83 = v132[10];
      v84 = (void *)v132[4];
      v85 = *v81;
      sub_10022E4A8(v73, v62);
      swift_release(v85);
      v86 = (char *)v81 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v79 = sub_100390B40(v84);
      sub_100225AA0(v73, v62);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v86, v82);
    }
  }
  else
  {
    v80 = *(_QWORD *)v132[21];
    sub_10022E4A8(v73, v62);
    v79 = sub_1003910F0();
    sub_100225AA0(v73, v62);
    swift_release(v80);
  }
  v87 = v61[1];
  if (v87 >> 60 == 15)
  {
    v63 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v64 = 0;
    if ((v79 & 1) == 0)
      goto LABEL_43;
  }
  else
  {
    v88 = *v61;
    v89 = v132[19];
    v90 = v132[20];
    sub_100244384(v132[5], v90, type metadata accessor for SDAirDropServerConnection);
    v91 = swift_getEnumCaseMultiPayload(v90, v89);
    if (v91)
    {
      if (v91 == 1)
      {
        v92 = v132[20];
        v93 = (void *)v132[4];
        sub_10022E4A8(v88, v87);
        sub_1002443C8(v92, type metadata accessor for SDAirDropServerConnection);
        v66 = sub_100390090(v93);
        v65 = v94;
        v64 = v95;
        v63 = v96;
        sub_100225AA0(v88, v87);
        v67 = 0;
        if ((v79 & 1) == 0)
          goto LABEL_43;
      }
      else
      {
        v99 = (uint64_t *)v132[20];
        v100 = v132[10];
        v131 = v132[9];
        v101 = (void *)v132[4];
        v102 = *v99;
        sub_10022E4A8(v88, v87);
        swift_release(v102);
        v103 = (char *)v99 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
        v66 = sub_100390090(v101);
        v65 = v104;
        v64 = v105;
        v63 = v106;
        sub_100225AA0(v88, v87);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v131);
        v67 = 0;
        if ((v79 & 1) == 0)
          goto LABEL_43;
      }
    }
    else
    {
      v97 = (void *)v132[4];
      v98 = *(_QWORD *)v132[20];
      sub_10022E4A8(v88, v87);
      sub_10039052C(v97, &v133);
      v67 = v134;
      v66 = v135;
      v65 = v136;
      v64 = v137;
      v63 = v138;
      swift_release(v98);
      sub_100225AA0(v88, v87);
      if ((v79 & 1) == 0)
        goto LABEL_43;
    }
  }
  v71 = v63;
  v69 = v132;
  v70 = v132[7];
  v107 = (uint64_t *)(v70 + *(int *)(v132[17] + 36));
  v64 = *v107;
  v63 = (const char *)v107[1];
  v68 = 1;
LABEL_60:
  *v60 = v68;
  v69[44] = v66;
  v69[45] = v67;
  v69[42] = v71;
  v69[43] = v65;
  v108 = v69[18];
  swift_bridgeObjectRetain(v63);
  sub_100244384(v70, v108, _s10AskRequestVMa);
  v110 = v69[17];
  v109 = v69[18];
  if (!v63)
  {
    v111 = (uint64_t *)(v109 + *(int *)(v110 + 36));
    v64 = *v111;
    v63 = (const char *)v111[1];
    swift_bridgeObjectRetain(v63);
  }
  v69[46] = v64;
  v69[47] = v63;
  v112 = v69[7];
  sub_1002443C8(v109, _s10AskRequestVMa);
  v113 = sub_10031AF00();
  v114 = (void *)static NSUserDefaults.airdrop.getter(v113);
  v60[1] = SFAirDropUserDefaults.alwaysAutoAccept.getter() & 1;

  v115 = (uint64_t *)(v112 + *(int *)(v110 + 28));
  v117 = *v115;
  v116 = v115[1];
  v118 = (_QWORD *)swift_task_alloc(dword_1007BD91C);
  v69[48] = v118;
  *v118 = v69;
  v118[1] = sub_10049A830;
  return sub_1003A4DB8(v69[16], v117, v116, v66, v65);
}

uint64_t sub_10049A830()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  return swift_task_switch(sub_10049A884, 0, 0);
}

uint64_t sub_10049A884(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  CGImageRef v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const __CFData *v9;
  CGImageRef v10;
  CGImage *v11;
  uint64_t v12;
  const __CFData *isa;
  CGImage *v14;
  const char *v15;
  const char *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  const char *v34;
  uint64_t *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  CGImageRef v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  CGImageRef v97;

  v2 = SFAirDrop.TransferType.isOnlyExchange.getter(a1);
  if ((v2 & 1) != 0
    || (v3 = *(_QWORD *)(v1 + 56) + *(int *)(*(_QWORD *)(v1 + 136) + 60), v4 = *(_QWORD *)(v3 + 8), v4 >> 60 == 15))
  {
    v5 = 0;
  }
  else
  {
    v12 = *(_QWORD *)v3;
    sub_10022E4A8(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    isa = Data._bridgeToObjectiveC()().super.isa;
    v5 = sub_1000CE4CC(isa);

    if (v5)
    {
      v14 = v5;
      sub_100225AA0(v12, v4);

    }
    else
    {
      v2 = sub_100225AA0(v12, v4);
    }
  }
  v97 = v5;
  if ((SFAirDrop.TransferType.isOnlyExchange.getter(v2) & 1) == 0)
  {
    v6 = *(_QWORD *)(v1 + 56) + *(int *)(*(_QWORD *)(v1 + 136) + 56);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)v6;
      sub_10022E4A8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      v9 = Data._bridgeToObjectiveC()().super.isa;
      v10 = sub_1000CE4CC(v9);

      if (v10)
      {
        v61 = v10;
        v11 = v10;
        sub_100225AA0(v8, v7);

        goto LABEL_12;
      }
      sub_100225AA0(v8, v7);
    }
  }
  v61 = 0;
LABEL_12:
  v15 = *(const char **)(v1 + 360);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 328);
  v16 = *(const char **)(v1 + 336);
  v18 = *(_QWORD *)(v1 + 216);
  v19 = *(_QWORD *)(v1 + 200);
  v20 = *(_QWORD *)(v1 + 184);
  v21 = *(_QWORD *)(v1 + 136);
  v22 = *(_QWORD *)(v1 + 56);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 104) + 16))(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 96));
  v17(v19, v18, v20);
  *(_QWORD *)&v23 = swift_bridgeObjectRelease(v15).n128_u64[0];
  swift_bridgeObjectRelease(v16, v23);
  v24 = (uint64_t *)(v22 + *(int *)(v21 + 32));
  v25 = (const char *)v24[1];
  if (v25)
  {
    v62 = v24[1];
    v63 = *v24;
  }
  else
  {
    v62 = 0xE000000000000000;
    v63 = 0;
  }
  v26 = (char *)(v1 + 392);
  v28 = (uint64_t *)(v1 + 120);
  v27 = *(_QWORD *)(v1 + 120);
  v29 = *(_QWORD *)(v1 + 136);
  v30 = *(_QWORD *)(v1 + 72);
  v31 = *(_QWORD *)(v1 + 80);
  v32 = *(_QWORD *)(v1 + 56);
  v33 = (uint64_t *)(v32 + *(int *)(v29 + 36));
  v34 = (const char *)v33[1];
  v93 = *v33;
  v35 = (uint64_t *)(v32 + *(int *)(v29 + 40));
  v36 = (const char *)v35[1];
  v90 = *v35;
  sub_100221F28(*(_QWORD *)(v1 + 128), v27, &qword_1007B7280);
  LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v27, 1, v30);
  swift_bridgeObjectRetain(v25);
  v91 = v34;
  swift_bridgeObjectRetain(v34);
  v89 = v36;
  v37 = swift_bridgeObjectRetain(v36);
  if ((_DWORD)v27 == 1)
  {
    v28 = (uint64_t *)(v1 + 88);
    v38 = sub_10000D0F0(*(_QWORD *)(v1 + 120), &qword_1007B7280);
    v37 = UUID.init()(v38);
  }
  v39 = *v28;
  v66 = *(_BYTE *)(v1 + 393);
  v71 = *(_QWORD *)(v1 + 368);
  v72 = *(_QWORD *)(v1 + 376);
  v40 = *v26;
  v68 = *v26;
  v76 = *(_QWORD *)(v1 + 344);
  v77 = *(_QWORD *)(v1 + 352);
  v42 = *(const char **)(v1 + 312);
  v41 = *(const char **)(v1 + 320);
  v80 = *(_QWORD *)(v1 + 304);
  v81 = *(_QWORD *)(v1 + 296);
  v82 = *(_QWORD *)(v1 + 272);
  v83 = *(_QWORD *)(v1 + 264);
  v84 = *(_QWORD *)(v1 + 256);
  v85 = *(_QWORD *)(v1 + 248);
  v78 = *(_QWORD *)(v1 + 216);
  v79 = *(_QWORD *)(v1 + 224);
  v86 = *(_QWORD *)(v1 + 208);
  v73 = *(_QWORD *)(v1 + 200);
  v74 = *(_QWORD *)(v1 + 192);
  v75 = *(_QWORD *)(v1 + 184);
  v87 = *(_QWORD *)(v1 + 176);
  v88 = *(_QWORD *)(v1 + 168);
  v92 = *(_QWORD *)(v1 + 160);
  v43 = *(_QWORD *)(v1 + 136);
  v94 = *(_QWORD *)(v1 + 144);
  v70 = *(_QWORD *)(v1 + 128);
  v95 = *(_QWORD *)(v1 + 120);
  v69 = *(_QWORD *)(v1 + 112);
  v44 = *(_QWORD *)(v1 + 80);
  v96 = *(_QWORD *)(v1 + 88);
  v45 = *(_QWORD *)(v1 + 64);
  v46 = *(_QWORD *)(v1 + 72);
  v47 = *(_QWORD *)(v1 + 56);
  v48 = UUID.uuidString.getter(v37);
  v64 = v49;
  v65 = v48;
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v39, v46);
  v67 = v66 | v40;
  v50 = (uint64_t *)(v47 + *(int *)(v43 + 52));
  v52 = *v50;
  v51 = (const char *)v50[1];
  v53 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v45, 1, 1, v53);
  swift_bridgeObjectRetain(v51);
  v54 = sub_10022CBA0((uint64_t)v42);
  swift_bridgeObjectRelease(v42);
  v55 = sub_10022CD70((uint64_t)v41);
  swift_bridgeObjectRelease(v41);
  v56 = (uint64_t *)(v47 + *(int *)(v43 + 68));
  v58 = *v56;
  v57 = v56[1];
  sub_100244404(*v56, v57);
  SFAirDropReceive.AskRequest.init(id:type:transferTypes:canAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderModelName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:urlItems:items:customPayload:)(v69, v73, 0, v67 & 1, 1, v68, v77, v76, v63, v62, v93, v91, v90, v89, 0, 0, 0, 0, v71,
    v72,
    0,
    0,
    0,
    0,
    v65,
    v64,
    0,
    v97,
    v61,
    v52,
    v51,
    v45,
    v54,
    v55,
    v58,
    v57);
  sub_10000D0F0(v70, &qword_1007B7280);
  v59 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v59(v78, v75);
  v59(v79, v75);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v79);
  swift_task_dealloc(v78);
  swift_task_dealloc(v86);
  swift_task_dealloc(v73);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v70);
  swift_task_dealloc(v95);
  swift_task_dealloc(v69);
  swift_task_dealloc(v96);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_10049ADEC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10071CF08, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

uint64_t sub_10049AE34(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  const char *v65;
  char v66;
  double v67;
  id v68;
  NSURL *v69;
  void *v70;
  void *v71;
  char *v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  const char *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t inited;
  NSString *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  int v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  const char *v129;
  __n128 v130;
  void (*v131)(char *, uint64_t, __n128);
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  double v138;
  void (*v139)(char *, uint64_t);
  NSString v140;
  const char *v141;
  uint64_t v142;
  id v143;
  void (*v144)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char *v163;
  NSURL *v164;
  void *v165;
  void *v166;
  id v167;
  id v168;
  void *v169;
  uint64_t v170;
  const char *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  NSString *v176;
  const char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  __n128 v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char v194;
  char *v195;
  void (*v196)(uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  const char *v200;
  double v201;
  __n128 v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  const char *v207;
  char *v208;
  uint64_t v209;
  double v210;
  __n128 v211;
  char v213;
  double v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  void (*v237)(char *, uint64_t);
  char *v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char v251[8];
  uint64_t v252;
  uint64_t v253;
  char v254[8];

  v245 = a3;
  v243 = a1;
  v239 = 0;
  v4 = sub_100008384(&qword_1007B5538);
  v5 = __chkstk_darwin(v4);
  v225 = (uint64_t)&v217 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v235 = (uint64_t)&v217 - v8;
  v9 = __chkstk_darwin(v7);
  v241 = (uint64_t)&v217 - v10;
  v11 = __chkstk_darwin(v9);
  v236 = (char *)&v217 - v12;
  __chkstk_darwin(v11);
  v248 = (char *)&v217 - v13;
  v228 = type metadata accessor for URLResourceValues(0);
  v227 = *(_QWORD *)(v228 - 8);
  v14 = __chkstk_darwin(v228);
  v226 = (char *)&v217 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v231 = (char *)&v217 - v16;
  v17 = type metadata accessor for URL(0);
  v249 = *(_QWORD *)(v17 - 8);
  v250 = v17;
  v18 = __chkstk_darwin(v17);
  v242 = (char *)&v217 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v230 = (char *)&v217 - v21;
  __chkstk_darwin(v20);
  v233 = (char *)&v217 - v22;
  v23 = sub_100008384((uint64_t *)&unk_1007B5200);
  v24 = __chkstk_darwin(v23);
  v232 = (char *)&v217 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v240 = (char *)&v217 - v27;
  v28 = __chkstk_darwin(v26);
  v238 = (char *)&v217 - v29;
  v30 = __chkstk_darwin(v28);
  v220 = (char *)&v217 - v31;
  v32 = __chkstk_darwin(v30);
  v222 = (char *)&v217 - v33;
  v34 = __chkstk_darwin(v32);
  v223 = (char *)&v217 - v35;
  v36 = __chkstk_darwin(v34);
  v221 = (char *)&v217 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v217 - v39;
  v41 = __chkstk_darwin(v38);
  v43 = (char *)&v217 - v42;
  v44 = __chkstk_darwin(v41);
  v229 = (char *)&v217 - v45;
  __chkstk_darwin(v44);
  v47 = (char *)&v217 - v46;
  v48 = type metadata accessor for UTType(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = __chkstk_darwin(v48);
  v219 = (char *)&v217 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v224 = (char *)&v217 - v53;
  v54 = __chkstk_darwin(v52);
  v234 = (char *)&v217 - v55;
  __chkstk_darwin(v54);
  v57 = (char *)&v217 - v56;
  v58 = objc_msgSend((id)objc_opt_self(PFAssetBundle), "contentType");
  static UTType._unconditionallyBridgeFromObjectiveC(_:)();

  v60 = UTType.identifier.getter(v59);
  v62 = v61;
  v246 = v49;
  v63 = *(void (**)(char *, uint64_t))(v49 + 8);
  v244 = v48;
  v64 = v48;
  v65 = v245;
  v237 = v63;
  v63(v57, v64);
  v247 = a2;
  if (v60 == a2 && v62 == v65)
  {
    swift_bridgeObjectRelease(v65);
  }
  else
  {
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v247, v65, 0);
    *(_QWORD *)&v67 = swift_bridgeObjectRelease(v62).n128_u64[0];
    if ((v66 & 1) == 0)
    {
      v79 = 0;
      v240 = 0;
      v80 = 0;
      v81 = v249;
      v82 = v244;
      v83 = v246;
      goto LABEL_39;
    }
  }
  v68 = objc_allocWithZone((Class)PFAssetBundle);
  URL._bridgeToObjectiveC()(v69);
  v71 = v70;
  v72 = (char *)objc_msgSend(v68, "initWithAssetBundleAtURL:", v70);

  v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v249 + 56);
  v73(v47, 1, 1, v250);
  v74 = v240;
  v75 = (uint64_t)v238;
  if (v72)
  {
    if (objc_msgSend(v72, "mediaType") == (id)2)
    {
      v76 = objc_msgSend(v72, "fullSizeVideoURL");
      if (v76)
      {
        v77 = v76;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v76);

        v78 = 0;
      }
      else
      {
        v78 = 1;
      }
      v91 = v250;
      v92 = (uint64_t)v229;
      v73(v40, v78, 1, v250);
      sub_10022E718((uint64_t)v40, (uint64_t)v43, (uint64_t *)&unk_1007B5200);
      v93 = v249;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v43, 1, v91) != 1)
      {
        sub_10000D0F0((uint64_t)v47, (uint64_t *)&unk_1007B5200);
        (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v92, v43, v91);
        v73((char *)v92, 0, 1, v91);
LABEL_28:
        sub_10022E718(v92, (uint64_t)v47, (uint64_t *)&unk_1007B5200);
        goto LABEL_29;
      }
      v94 = objc_msgSend(v72, "videoURL");
      if (v94)
      {
        v95 = v94;
        v96 = (uint64_t)v221;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v94);

        v97 = 0;
      }
      else
      {
        v97 = 1;
        v96 = (uint64_t)v221;
      }
      sub_10000D0F0((uint64_t)v47, (uint64_t *)&unk_1007B5200);
      v73((char *)v96, v97, 1, v91);
      sub_10022E718(v96, v92, (uint64_t *)&unk_1007B5200);
      sub_10000D0F0((uint64_t)v43, (uint64_t *)&unk_1007B5200);
    }
    else
    {
      if (objc_msgSend(v72, "mediaType") != (id)1)
        goto LABEL_29;
      v84 = objc_msgSend(v72, "fullSizePhotoURL");
      if (v84)
      {
        v85 = v84;
        v86 = (uint64_t)v220;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v84);

        v87 = 0;
        v88 = v249;
        v89 = (uint64_t)v223;
        v90 = (uint64_t)v222;
      }
      else
      {
        v87 = 1;
        v88 = v249;
        v89 = (uint64_t)v223;
        v90 = (uint64_t)v222;
        v86 = (uint64_t)v220;
      }
      v98 = v250;
      v73((char *)v86, v87, 1, v250);
      sub_10022E718(v86, v90, (uint64_t *)&unk_1007B5200);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v90, 1, v98) == 1)
      {
        v99 = objc_msgSend(v72, "photoURL");
        if (v99)
        {
          v100 = v99;
          v101 = v72;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v99);

          v102 = 0;
        }
        else
        {
          v101 = v72;
          v102 = 1;
        }
        sub_10000D0F0((uint64_t)v47, (uint64_t *)&unk_1007B5200);
        v73((char *)v75, v102, 1, v98);
        sub_10022E718(v75, v89, (uint64_t *)&unk_1007B5200);
        sub_10000D0F0(v90, (uint64_t *)&unk_1007B5200);
        v92 = v89;
        v72 = v101;
      }
      else
      {
        sub_10000D0F0((uint64_t)v47, (uint64_t *)&unk_1007B5200);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v89, v90, v98);
        v73((char *)v89, 0, 1, v98);
        v92 = v89;
      }
    }
    v74 = v240;
    goto LABEL_28;
  }
LABEL_29:
  sub_100221F28((uint64_t)v47, (uint64_t)v74, (uint64_t *)&unk_1007B5200);
  v81 = v249;
  v103 = v250;
  v104 = (*(uint64_t (**)(const char *, uint64_t, uint64_t))(v249 + 48))(v74, 1, v250);
  v82 = v244;
  v83 = v246;
  if (v104 == 1)
  {
    sub_10000D0F0((uint64_t)v47, (uint64_t *)&unk_1007B5200);

    sub_10000D0F0((uint64_t)v74, (uint64_t *)&unk_1007B5200);
    v79 = 0;
    v240 = 0;
    v80 = 1;
  }
  else
  {
    v218 = v47;
    v238 = v72;
    v105 = v233;
    (*(void (**)(char *, const char *, uint64_t))(v81 + 32))(v233, v74, v103);
    v106 = sub_100008384(&qword_1007B6D20);
    inited = swift_initStackObject(v106, v251);
    *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
    *(_QWORD *)(inited + 32) = NSURLTypeIdentifierKey;
    v108 = NSURLTypeIdentifierKey;
    v109 = (const char *)sub_100282EF4(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy(inited + 32, 1, v110);
    v111 = v81;
    v112 = v231;
    v113 = v239;
    URL.resourceValues(forKeys:)(v109);
    if (!v113)
    {
      v239 = 0;
      swift_bridgeObjectRelease(v109);
      v79 = URLResourceValues.typeIdentifier.getter(v136);
      v240 = v137;
      (*(void (**)(char *, uint64_t))(v227 + 8))(v112, v228);

      (*(void (**)(char *, uint64_t))(v111 + 8))(v105, v103);
      sub_10000D0F0((uint64_t)v218, (uint64_t *)&unk_1007B5200);
      v80 = 1;
      v65 = v245;
      v81 = v111;
      swift_bridgeObjectRetain(v245, v138);
      goto LABEL_40;
    }
    swift_bridgeObjectRelease(v109);
    if (qword_1007B4190 != -1)
      swift_once(&qword_1007B4190, sub_1004973E4);
    v114 = type metadata accessor for Logger(0);
    sub_100221DF8(v114, (uint64_t)qword_1007C2350);
    v81 = v111;
    v115 = v230;
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v230, v105, v103);
    swift_errorRetain(v113);
    v116 = swift_errorRetain(v113);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.error.getter(v117);
    v119 = v118;
    v120 = os_log_type_enabled(v117, v118);
    v121 = (uint64_t)v218;
    if (v120)
    {
      v122 = v113;
      v123 = swift_slowAlloc(22, -1);
      v124 = (uint64_t *)swift_slowAlloc(8, -1);
      v125 = swift_slowAlloc(32, -1);
      v253 = v125;
      *(_DWORD *)v123 = 136315394;
      LODWORD(v240) = v119;
      v126 = sub_100220D78((unint64_t *)&qword_1007B5518, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v127 = dispatch thunk of CustomStringConvertible.description.getter(v103, v126);
      v129 = (const char *)v128;
      v252 = sub_100228BD8(v127, v128, &v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v123 + 4);
      v130 = swift_bridgeObjectRelease(v129);
      v131 = *(void (**)(char *, uint64_t, __n128))(v249 + 8);
      v131(v115, v250, v130);
      *(_WORD *)(v123 + 12) = 2112;
      swift_errorRetain(v122);
      v132 = _swift_stdlib_bridgeErrorToNSError(v122);
      v252 = v132;
      v83 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v123 + 14);
      *v124 = v132;
      swift_errorRelease(v122);
      swift_errorRelease(v122);
      _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v240, "Subtype for asset bundle couldn't be determined for URL: %s. Error: %@", (uint8_t *)v123, 0x16u);
      v133 = sub_100008384(&qword_1007B4C30);
      v80 = 1;
      swift_arrayDestroy(v124, 1, v133);
      v134 = v124;
      v82 = v244;
      swift_slowDealloc(v134, -1, -1);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v123, -1, -1);

      v135 = v122;
      v81 = v249;
      swift_errorRelease(v135);

      ((void (*)(char *, uint64_t))v131)(v233, v250);
      sub_10000D0F0((uint64_t)v218, (uint64_t *)&unk_1007B5200);
      v79 = 0;
      v240 = 0;
      v239 = 0;
    }
    else
    {

      swift_errorRelease(v113);
      swift_errorRelease(v113);
      v139 = *(void (**)(char *, uint64_t))(v81 + 8);
      v139(v115, v103);
      swift_errorRelease(v113);

      v139(v105, v103);
      sub_10000D0F0(v121, (uint64_t *)&unk_1007B5200);
      v79 = 0;
      v240 = 0;
      v239 = 0;
      v80 = 1;
    }
    v65 = v245;
  }
LABEL_39:
  swift_bridgeObjectRetain(v65, v67);
LABEL_40:
  v140 = String._bridgeToObjectiveC()();
  v141 = v65;
  swift_bridgeObjectRelease(v65);
  v142 = 1;
  v143 = objc_msgSend((id)objc_opt_self(UTType), "_typeWithIdentifier:allowUndeclared:", v140, 1);

  v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56);
  if (v143)
  {
    v145 = v79;
    v146 = v236;
    v144(v236, 1, 1, v82);
    v147 = sub_100220D78((unint64_t *)&unk_1007B5540, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
    dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v143, v146, v82, v147);
    v148 = v146;
    v79 = v145;
    v83 = v246;

    v149 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48))(v148, 1, v82);
    v150 = v242;
    if (v149 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v248, v148, v82);
      v142 = 0;
    }
  }
  else
  {
    v150 = v242;
  }
  v151 = (uint64_t)v248;
  v144(v248, v142, 1, v82);
  v152 = v241;
  v153 = sub_100221F28(v151, v241, &qword_1007B5538);
  if ((v80 & 1) == 0)
  {
    v155 = v234;
    v156 = static UTType.livePhoto.getter(v153);
    v157 = UTType.identifier.getter(v156);
    v159 = v158;
    v237(v155, v82);
    if (v157 == v247 && v159 == v141)
    {
      swift_bridgeObjectRelease(v141);
      v160 = v235;
      sub_100221F28(v152, v235, &qword_1007B5538);
      v161 = v250;
    }
    else
    {
      v162 = _stringCompareWithSmolCheck(_:_:expecting:)(v247, v141, v157, v159, 0);
      swift_bridgeObjectRelease(v159);
      v160 = v235;
      sub_100221F28(v152, v235, &qword_1007B5538);
      v161 = v250;
      if ((v162 & 1) == 0)
      {
        v154 = v225;
        sub_100221F28(v160, v225, &qword_1007B5538);
        v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v154, 1, v82);
        if ((_DWORD)v191 == 1)
        {
          sub_10000D0F0(v160, &qword_1007B5538);
          sub_10000D0F0(v152, &qword_1007B5538);
          goto LABEL_46;
        }
        v192 = v152;
        v193 = v224;
        static UTType.livePhoto.getter(v191);
        v194 = UTType.conforms(to:)(v193);
        v195 = v193;
        v196 = (void (*)(uint64_t, uint64_t))v237;
        v237(v195, v82);
        sub_10000D0F0(v160, &qword_1007B5538);
        sub_10000D0F0(v192, &qword_1007B5538);
        v196(v154, v82);
        v161 = v250;
        if ((v194 & 1) == 0)
          goto LABEL_73;
LABEL_52:
        v163 = v232;
        (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v232, v243, v161);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v163, 0, 1, v161);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v163, 1, v161) == 1)
        {
          v165 = 0;
        }
        else
        {
          URL._bridgeToObjectiveC()(v164);
          v165 = v166;
          (*(void (**)(char *, uint64_t))(v81 + 8))(v163, v161);
        }
        v167 = objc_msgSend(objc_allocWithZone((Class)PFVideoComplement), "initWithBundleAtURL:", v165);

        if (!v167)
          goto LABEL_73;
        v168 = objc_msgSend(v167, "imagePath");
        if (!v168)
          goto LABEL_72;
        v169 = v168;
        v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
        v172 = v171;

        URL.init(fileURLWithPath:)(v170, v172);
        v173 = sub_100008384(&qword_1007B6D20);
        v174 = swift_initStackObject(v173, v254);
        *(_OWORD *)(v174 + 16) = xmmword_1005CD2A0;
        v175 = v150;
        *(_QWORD *)(v174 + 32) = NSURLTypeIdentifierKey;
        v176 = NSURLTypeIdentifierKey;
        v177 = (const char *)sub_100282EF4(v174);
        swift_setDeallocating(v174);
        type metadata accessor for URLResourceKey(0);
        swift_arrayDestroy(v174 + 32, 1, v178);
        v179 = v226;
        v180 = v239;
        URL.resourceValues(forKeys:)(v177);
        if (v180)
        {
          v181 = swift_bridgeObjectRelease(v177);
          (*(void (**)(char *, uint64_t, __n128))(v81 + 8))(v175, v250, v181);
          if (qword_1007B4190 != -1)
            swift_once(&qword_1007B4190, sub_1004973E4);
          v182 = type metadata accessor for Logger(0);
          sub_100221DF8(v182, (uint64_t)qword_1007C2350);
          swift_errorRetain(v180);
          swift_errorRetain(v180);
          swift_bridgeObjectRetain(v172);
          v184 = Logger.logObject.getter(v183);
          v185 = static os_log_type_t.error.getter(v184);
          if (os_log_type_enabled(v184, v185))
          {
            v186 = swift_slowAlloc(22, -1);
            v187 = (uint64_t *)swift_slowAlloc(8, -1);
            v188 = swift_slowAlloc(32, -1);
            v253 = v188;
            *(_DWORD *)v186 = 136315394;
            v250 = v79;
            swift_bridgeObjectRetain(v172);
            v252 = sub_100228BD8(v170, (unint64_t)v172, &v253);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v186 + 4);
            swift_bridgeObjectRelease_n(v172, 3);
            *(_WORD *)(v186 + 12) = 2112;
            swift_errorRetain(v180);
            v189 = _swift_stdlib_bridgeErrorToNSError(v180);
            v252 = v189;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v186 + 14);
            *v187 = v189;
            v79 = v250;
            swift_errorRelease(v180);
            swift_errorRelease(v180);
            _os_log_impl((void *)&_mh_execute_header, v184, v185, "Subtype for live photo couldn't be determined for URL: %s. Error: %@", (uint8_t *)v186, 0x16u);
            v190 = sub_100008384(&qword_1007B4C30);
            swift_arrayDestroy(v187, 1, v190);
            swift_slowDealloc(v187, -1, -1);
            swift_arrayDestroy(v188, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v188, -1, -1);
            swift_slowDealloc(v186, -1, -1);

          }
          else
          {

            swift_errorRelease(v180);
            swift_errorRelease(v180);
            swift_bridgeObjectRelease_n(v172, 2);
          }
          swift_errorRelease(v180);
LABEL_72:

          goto LABEL_73;
        }
        swift_bridgeObjectRelease(v177);
        v198 = URLResourceValues.typeIdentifier.getter(v197);
        v200 = v199;
        (*(void (**)(char *, uint64_t))(v227 + 8))(v179, v228);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v175, v250);
        *(_QWORD *)&v201 = swift_bridgeObjectRelease(v172).n128_u64[0];
        v202 = swift_bridgeObjectRelease(v240, v201);
        v203 = v219;
        v204 = static UTType.jpeg.getter(v202);
        v205 = UTType.identifier.getter(v204);
        v207 = v206;
        v208 = v203;
        v209 = v244;
        v237(v208, v244);
        if (v200)
        {
          if (v198 == v205 && v200 == v207)
          {
            *(_QWORD *)&v210 = swift_bridgeObjectRelease(v200).n128_u64[0];
            v211 = swift_bridgeObjectRelease(v207, v210);
LABEL_77:
            v215 = v224;
            v216 = static UTType.jpeg.getter(v211);
LABEL_79:
            v79 = UTType.identifier.getter(v216);

            v237(v215, v209);
            sub_10000D0F0((uint64_t)v248, &qword_1007B5538);
            return v79;
          }
          v213 = _stringCompareWithSmolCheck(_:_:expecting:)(v198, v200, v205, v207, 0);
          *(_QWORD *)&v214 = swift_bridgeObjectRelease(v200).n128_u64[0];
          v211 = swift_bridgeObjectRelease(v207, v214);
          if ((v213 & 1) != 0)
            goto LABEL_77;
        }
        else
        {
          v211 = swift_bridgeObjectRelease(v207);
        }
        v215 = v224;
        v216 = static UTType.heic.getter(v211);
        goto LABEL_79;
      }
    }
    sub_10000D0F0(v160, &qword_1007B5538);
    sub_10000D0F0(v152, &qword_1007B5538);
    goto LABEL_52;
  }
  v154 = v152;
LABEL_46:
  sub_10000D0F0(v154, &qword_1007B5538);
LABEL_73:
  sub_10000D0F0((uint64_t)v248, &qword_1007B5538);
  return v79;
}

uint64_t sub_10049C38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  NSString *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  const char *object;
  Swift::String v34;
  const char *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  NSURL *v44;
  const __CFURL *v45;
  const __CFURL *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  const char *v50;
  Swift::String v51;
  Swift::String v52;
  const char *v53;
  Swift::String v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSString *v66;
  const char *v67;
  uint64_t v68;
  _BYTE *v69;
  __n128 v70;
  int v71;
  uint64_t v72;
  void (*v73)(_BYTE *, uint64_t);
  uint64_t v74;
  NSString *v75;
  const char *v76;
  _BYTE *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _BYTE *v82;
  char v83;
  unint64_t v84;
  void (*v85)(uint64_t, unint64_t);
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[12];
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  const char *v101;
  int v102;
  uint64_t *v103;
  _BYTE *v104;
  __int128 v105;
  unint64_t v106;
  void (*v107)(_BYTE *, uint64_t);
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114[40];
  char v115[28];
  void *v116;
  unint64_t v117;
  const char *v118;
  char v119[8];
  void *v120;
  NSURL var18;

  v102 = a3;
  v113 = a2;
  v103 = a4;
  v110 = type metadata accessor for URLResourceValues(0);
  v106 = *(_QWORD *)(v110 - 8);
  v5 = __chkstk_darwin(v110);
  v104 = &v91[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v9 = &v91[-v8];
  __chkstk_darwin(v7);
  v11 = &v91[-v10];
  v107 = (void (*)(_BYTE *, uint64_t))sub_100008384(&qword_1007B5538);
  __chkstk_darwin(v107);
  v109 = &v91[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for UTType(0);
  v14 = *(const char **)(v13 - 8);
  __chkstk_darwin(v13);
  v108 = &v91[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_100008384(&qword_1007B6D20);
  inited = swift_initStackObject(v16, v119);
  v105 = xmmword_1005CD2A0;
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = NSURLContentTypeKey;
  v18 = NSURLContentTypeKey;
  v19 = (const char *)sub_100282EF4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  v21 = v20;
  swift_arrayDestroy(inited + 32, 1, v20);
  v112 = a1;
  v22 = v111;
  URL.resourceValues(forKeys:)(v19);
  if (v22)
  {
    swift_bridgeObjectRelease(v19);
    v23 = type metadata accessor for URL(0);
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
    v24(v113, v23);
    return ((uint64_t (*)(uint64_t, uint64_t))v24)(v112, v23);
  }
  else
  {
    v101 = v14;
    v111 = v13;
    v98 = v21;
    v99 = v16;
    v100 = v9;
    swift_bridgeObjectRelease(v19);
    v26 = (uint64_t)v109;
    URLResourceValues.contentType.getter(v27);
    v28 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
    v28(v11, v110);
    v117 = 0;
    v118 = (const char *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(v118);
    v117 = 0xD00000000000001FLL;
    v118 = (const char *)0x800000010061D020;
    v29 = type metadata accessor for URL(0);
    v30 = sub_100220D78((unint64_t *)&qword_1007B5518, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v31 = v112;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    object = (const char *)v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(object);
    v34._countAndFlagsBits = 125;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35 = v118;
    v36 = v108;
    v106 = 0x800000010061D040;
    Optional.tryUnwrap(_:file:line:)(v117, v118, 0xD00000000000005BLL, 0x800000010061D040, 228, v107);
    v107 = v28;
    sub_10000D0F0(v26, &qword_1007B5538);
    swift_bridgeObjectRelease(v35);
    v38 = UTType.identifier.getter(v37);
    v40 = v39;
    (*((void (**)(_BYTE *, uint64_t))v101 + 1))(v36, v111);
    v109 = (_BYTE *)v38;
    v108 = (_BYTE *)sub_10049AE34(v31, v38, v40);
    v111 = v41;
    URL._bridgeToObjectiveC()(&var18);
    v43 = v42;
    URL._bridgeToObjectiveC()(v44);
    v46 = v45;
    v47 = sub_10019AF1C(v43, v45);

    v116 = v47;
    v117 = 0;
    v118 = (const char *)0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v48._countAndFlagsBits = 0xD000000000000025;
    v48._object = (void *)0x800000010061D0A0;
    String.append(_:)(v48);
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    v50 = (const char *)v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v50);
    v51._countAndFlagsBits = 0xD000000000000013;
    v51._object = (void *)0x800000010061D0D0;
    String.append(_:)(v51);
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    v53 = (const char *)v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v53);
    v54._countAndFlagsBits = 125;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    v55 = v117;
    v56 = v118;
    v57 = sub_100008384(&qword_1007C24D8);
    Optional.tryUnwrap(_:file:line:)(v55, v56, 0xD00000000000005BLL, v106, 230, v57);
    v101 = v40;
    v106 = v29;
    swift_bridgeObjectRelease(v56);
    v58 = v120;
    v97 = String.init(cString:)(v120);
    v60 = v59;
    free(v58);
    v96 = URL.lastPathComponent.getter(v61);
    v63 = v62;
    v64 = v99;
    v65 = swift_initStackObject(v99, v115);
    *(_OWORD *)(v65 + 16) = v105;
    *(_QWORD *)(v65 + 32) = NSURLFileSizeKey;
    v66 = NSURLFileSizeKey;
    v67 = (const char *)sub_100282EF4(v65);
    swift_setDeallocating(v65);
    v68 = v98;
    swift_arrayDestroy(v65 + 32, 1, v98);
    v69 = v100;
    URL.resourceValues(forKeys:)(v67);
    v94 = v63;
    v95 = v60;
    v70 = swift_bridgeObjectRelease(v67);
    v93 = URLResourceValues.fileSize.getter(v70);
    v92 = v71;
    v72 = v110;
    v73 = v107;
    v107(v69, v110);
    v74 = swift_initStackObject(v64, v114);
    *(_OWORD *)(v74 + 16) = v105;
    *(_QWORD *)(v74 + 32) = NSURLIsDirectoryKey;
    v75 = NSURLIsDirectoryKey;
    v76 = (const char *)sub_100282EF4(v74);
    swift_setDeallocating(v74);
    swift_arrayDestroy(v74 + 32, 1, v68);
    v77 = v104;
    URL.resourceValues(forKeys:)(v76);
    v78 = v101;
    swift_bridgeObjectRelease(v76);
    if ((v92 & 1) != 0)
      v80 = 0;
    else
      v80 = v93;
    v81 = URLResourceValues.isDirectory.getter(v79);
    v82 = v77;
    v83 = v81;
    v73(v82, v72);
    v84 = v106;
    v85 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)(v106 - 8) + 8);
    v85(v113, v106);
    result = ((uint64_t (*)(uint64_t, unint64_t))v85)(v112, v84);
    v86 = v102 & 1;
    v87 = v103;
    v88 = v94;
    *v103 = v96;
    v87[1] = v88;
    v87[2] = (uint64_t)v109;
    v87[3] = (uint64_t)v78;
    v89 = v111;
    v87[4] = (uint64_t)v108;
    v87[5] = v89;
    v87[6] = v80;
    *((_BYTE *)v87 + 56) = 0;
    v90 = v95;
    v87[8] = v97;
    v87[9] = v90;
    *((_BYTE *)v87 + 80) = v83 & 1;
    *((_BYTE *)v87 + 81) = v86;
  }
  return result;
}

void sub_10049CC48(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  double v29;
  const char *v30;
  const char *v31;
  double v32;
  double v33;
  const char *v34;
  double v35;
  const char *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  _QWORD v56[2];
  int v57;
  char v58;

  v5 = sub_100008384(&qword_1007C2450);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10023A834(a1, v9);
  v11 = sub_10049D180();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s11AskResponseV10CodingKeysON, &_s11AskResponseV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_10022E75C(a1);
  }
  else
  {
    LOBYTE(v56[0]) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v56, v5);
    v14 = v13;
    v55 = v12;
    LOBYTE(v56[0]) = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(v56, v5);
    v17 = v16;
    v53 = v15;
    v54 = v14;
    LOBYTE(v56[0]) = 2;
    swift_bridgeObjectRetain(v16);
    v18 = v17;
    v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    LOBYTE(v56[0]) = 3;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    v21 = v20;
    v50 = v19;
    LOBYTE(v56[0]) = 4;
    swift_bridgeObjectRetain(v20);
    v51 = 0;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    LOBYTE(v56[0]) = 5;
    v52 = v22;
    swift_bridgeObjectRetain(v22);
    v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    v58 = 6;
    v24 = v23;
    v25 = sub_100285DA0();
    v48 = v24;
    swift_bridgeObjectRetain(v24);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v56, &type metadata for Data, &v58, v5, &type metadata for Data, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v26 = v56[0];
    v27 = v56[1];
    v51 = v56[0];
    v28 = v54;
    *(_QWORD *)&v29 = swift_bridgeObjectRetain(v54).n128_u64[0];
    v30 = v21;
    v31 = v18;
    *(_QWORD *)&v32 = swift_bridgeObjectRetain(v18, v29).n128_u64[0];
    *(_QWORD *)&v33 = swift_bridgeObjectRetain(v30, v32).n128_u64[0];
    v34 = v52;
    *(_QWORD *)&v35 = swift_bridgeObjectRetain(v52, v33).n128_u64[0];
    v36 = v48;
    swift_bridgeObjectRetain(v48, v35);
    sub_100244404(v26, v27);
    *(_QWORD *)&v37 = swift_bridgeObjectRelease(v28).n128_u64[0];
    *(_QWORD *)&v38 = swift_bridgeObjectRelease(v31, v37).n128_u64[0];
    *(_QWORD *)&v39 = swift_bridgeObjectRelease(v30, v38).n128_u64[0];
    *(_QWORD *)&v40 = swift_bridgeObjectRelease(v34, v39).n128_u64[0];
    swift_bridgeObjectRelease(v36, v40);
    sub_10022E75C(a1);
    *(_QWORD *)&v41 = swift_bridgeObjectRelease(v36).n128_u64[0];
    *(_QWORD *)&v42 = swift_bridgeObjectRelease(v34, v41).n128_u64[0];
    *(_QWORD *)&v43 = swift_bridgeObjectRelease(v30, v42).n128_u64[0];
    *(_QWORD *)&v44 = swift_bridgeObjectRelease(v31, v43).n128_u64[0];
    swift_bridgeObjectRelease(v28, v44);
    v45 = v51;
    sub_100225AA0(v51, v27);
    *(_QWORD *)a2 = v55;
    *(_QWORD *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 16) = v53;
    *(_QWORD *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 32) = v57;
    *(_QWORD *)(a2 + 40) = v50;
    *(_QWORD *)(a2 + 48) = v30;
    *(_QWORD *)(a2 + 56) = v49;
    *(_QWORD *)(a2 + 64) = v34;
    *(_QWORD *)(a2 + 72) = v47;
    *(_QWORD *)(a2 + 80) = v36;
    *(_QWORD *)(a2 + 88) = v45;
    *(_QWORD *)(a2 + 96) = v27;
  }
}

unint64_t sub_10049D180()
{
  unint64_t result;

  result = qword_1007C2458;
  if (!qword_1007C2458)
  {
    result = swift_getWitnessTable(&unk_1005DA6C4, &_s11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2458);
  }
  return result;
}

unint64_t sub_10049D1C4()
{
  unint64_t result;

  result = qword_1007C2470;
  if (!qword_1007C2470)
  {
    result = swift_getWitnessTable(&unk_1005DA674, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2470);
  }
  return result;
}

unint64_t sub_10049D208()
{
  unint64_t result;

  result = qword_1007C2490;
  if (!qword_1007C2490)
  {
    result = swift_getWitnessTable(&unk_1005DA64C, &_s10AskRequestV8FileInfoVN);
    atomic_store(result, (unint64_t *)&qword_1007C2490);
  }
  return result;
}

uint64_t sub_10049D24C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10021FF9C((uint64_t *)&unk_1007BD6A0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10049D2AC(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10021FF9C(&qword_1007C2438);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10049D314()
{
  unint64_t result;

  result = qword_1007C24B8;
  if (!qword_1007C24B8)
  {
    result = swift_getWitnessTable(&unk_1005DA624, &_s10AskRequestV8FileInfoVN);
    atomic_store(result, &qword_1007C24B8);
  }
  return result;
}

uint64_t sub_10049D358(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1007C24CC);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10000D12C;
  return sub_100497CA8(a1, a2, v6, v7, v8);
}

double sub_10049D3D4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1004983A8(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

double sub_10049D3F0@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100498264(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32), a2, a3);
}

uint64_t _s10AskRequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_10049D45C + 4 * byte_1005DA29D[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10049D490 + 4 * byte_1005DA298[v4]))();
}

uint64_t sub_10049D490(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10049D498(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10049D4A0);
  return result;
}

uint64_t sub_10049D4AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10049D4B4);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_10049D4B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10049D4C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10AskRequestV10CodingKeysOMa()
{
  return &_s10AskRequestV10CodingKeysON;
}

ValueMetadata *_s11AskResponseV10CodingKeysOMa()
{
  return &_s11AskResponseV10CodingKeysON;
}

uint64_t _s10AskRequestV8FileInfoVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t _s10AskRequestV8FileInfoVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s10AskRequestV8FileInfoVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

__n128 _s10AskRequestV8FileInfoVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s10AskRequestV8FileInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t _s10AskRequestV8FileInfoVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 82))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10AskRequestV8FileInfoVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 82) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s10AskRequestV8FileInfoVMa()
{
  return &_s10AskRequestV8FileInfoVN;
}

unint64_t sub_10049D7D0()
{
  unint64_t result;

  result = qword_1007C24E0;
  if (!qword_1007C24E0)
  {
    result = swift_getWitnessTable(&unk_1005DA50C, &_s11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C24E0);
  }
  return result;
}

unint64_t sub_10049D818()
{
  unint64_t result;

  result = qword_1007C24E8;
  if (!qword_1007C24E8)
  {
    result = swift_getWitnessTable(&unk_1005DA5FC, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C24E8);
  }
  return result;
}

unint64_t sub_10049D860()
{
  unint64_t result;

  result = qword_1007C24F0;
  if (!qword_1007C24F0)
  {
    result = swift_getWitnessTable(&unk_1005DA534, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C24F0);
  }
  return result;
}

unint64_t sub_10049D8A8()
{
  unint64_t result;

  result = qword_1007C24F8;
  if (!qword_1007C24F8)
  {
    result = swift_getWitnessTable(&unk_1005DA55C, &_s10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C24F8);
  }
  return result;
}

unint64_t sub_10049D8F0()
{
  unint64_t result;

  result = qword_1007C2500;
  if (!qword_1007C2500)
  {
    result = swift_getWitnessTable(&unk_1005DA444, &_s11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2500);
  }
  return result;
}

unint64_t sub_10049D938()
{
  unint64_t result;

  result = qword_1007C2508;
  if (!qword_1007C2508)
  {
    result = swift_getWitnessTable(&unk_1005DA46C, &_s11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2508);
  }
  return result;
}

unint64_t sub_10049D97C(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 7)
    return 7;
  else
    return v5;
}

void sub_10049D9C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  const char *v24;
  double v25;
  double v26;
  const char *v27;
  double v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v5 = sub_100008384(&qword_1007C2510);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10023A834(a1, v9);
  v11 = sub_10049DD9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s10AskRequestV8FileInfoV10CodingKeysON, &_s10AskRequestV8FileInfoV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_10022E75C(a1);
  }
  else
  {
    v46 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
    v14 = v13;
    v39 = v12;
    v45 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
    v17 = v16;
    v37 = v15;
    v38 = v14;
    v44 = 2;
    swift_bridgeObjectRetain(v16);
    v18 = v17;
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
    v43 = 3;
    v20 = v19;
    swift_bridgeObjectRetain(v19);
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
    v33 = v22;
    v34 = v21;
    v42 = 4;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
    v41 = 5;
    v35 = v23;
    swift_bridgeObjectRetain(v23);
    v31 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v40 = 6;
    LOBYTE(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    v31 &= 1u;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10022E75C(a1);
    v24 = v35;
    *(_QWORD *)&v25 = swift_bridgeObjectRelease(v35).n128_u64[0];
    *(_QWORD *)&v26 = swift_bridgeObjectRelease(v20, v25).n128_u64[0];
    v27 = v18;
    *(_QWORD *)&v28 = swift_bridgeObjectRelease(v18, v26).n128_u64[0];
    v29 = v38;
    swift_bridgeObjectRelease(v38, v28);
    *(_QWORD *)a2 = v39;
    *(_QWORD *)(a2 + 8) = v29;
    *(_QWORD *)(a2 + 16) = v37;
    *(_QWORD *)(a2 + 24) = v27;
    *(_QWORD *)(a2 + 32) = v36;
    *(_QWORD *)(a2 + 40) = v20;
    *(_QWORD *)(a2 + 48) = v34;
    *(_BYTE *)(a2 + 56) = v33 & 1;
    *(_QWORD *)(a2 + 64) = v32;
    *(_QWORD *)(a2 + 72) = v24;
    *(_BYTE *)(a2 + 80) = v31;
    *(_BYTE *)(a2 + 81) = (_BYTE)v17;
  }
}

unint64_t sub_10049DD9C()
{
  unint64_t result;

  result = qword_1007C2518;
  if (!qword_1007C2518)
  {
    result = swift_getWitnessTable(&unk_1005DA804, &_s10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2518);
  }
  return result;
}

uint64_t _s11AskResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10049DE2C + 4 * byte_1005DA2A7[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10049DE60 + 4 * byte_1005DA2A2[v4]))();
}

uint64_t sub_10049DE60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10049DE68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10049DE70);
  return result;
}

uint64_t sub_10049DE7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10049DE84);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10049DE88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10049DE90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10AskRequestV8FileInfoV10CodingKeysOMa()
{
  return &_s10AskRequestV8FileInfoV10CodingKeysON;
}

unint64_t sub_10049DEB0()
{
  unint64_t result;

  result = qword_1007C2528;
  if (!qword_1007C2528)
  {
    result = swift_getWitnessTable(&unk_1005DA7DC, &_s10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2528);
  }
  return result;
}

unint64_t sub_10049DEF8()
{
  unint64_t result;

  result = qword_1007C2530;
  if (!qword_1007C2530)
  {
    result = swift_getWitnessTable(&unk_1005DA714, &_s10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2530);
  }
  return result;
}

unint64_t sub_10049DF40()
{
  unint64_t result;

  result = qword_1007C2538;
  if (!qword_1007C2538)
  {
    result = swift_getWitnessTable(&unk_1005DA73C, &_s10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1007C2538);
  }
  return result;
}

uint64_t *sub_10049DF84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_retain();
      v12 = *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 1;
      }
      else
      {
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_10049E088(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    swift_release(*a1);
    v4 = (char *)a1 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v5 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (result <= 1)
  {
    return swift_release(*a1);
  }
  return result;
}

_QWORD *sub_10049E10C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  swift_retain();
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v7 = *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

_QWORD *sub_10049E1C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for SDAirDropServerConnection);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    swift_retain();
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v7 = *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }
  return a1;
}

uint64_t type metadata accessor for SDAirDropServerConnection(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C25D0, (uint64_t)&nominal type descriptor for SDAirDropServerConnection);
}

_QWORD *sub_10049E2A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_10049E354(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10049E418(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, (char *)&value witness table for Builtin.NativeObject + 64, *(_QWORD *)(result - 8) + 64);
    v5[2] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
    return 0;
  }
  return result;
}

uint64_t *sub_10049E4A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_10049E560(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_unknownObjectRelease(*a1);
  v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_10049E5B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_unknownObjectRetain(v10);
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t *sub_10049E640(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for SDAirDropServerConnectionIdentity);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

uint64_t type metadata accessor for SDAirDropServerConnectionIdentity(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C2678, (uint64_t)&nominal type descriptor for SDAirDropServerConnectionIdentity);
}

void *sub_10049E6FC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10049E788(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1002443C8((uint64_t)a1, type metadata accessor for SDAirDropServerConnectionIdentity);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10049E82C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for SFAirDrop.TransferIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10049E89C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[23] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[24] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v6);
  v3[26] = swift_task_alloc(v6);
  v7 = sub_100008384((uint64_t *)&unk_1007B7E50);
  v3[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v3[28] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[29] = v9;
  v3[30] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SDAirDropMessage(0);
  v3[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SDAirDropServerConnection(0);
  v3[32] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v12);
  v3[34] = swift_task_alloc(v12);
  v3[35] = swift_task_alloc(v12);
  v3[36] = swift_task_alloc(v12);
  return swift_task_switch(sub_10049E9C8, 0, 0);
}

uint64_t sub_10049E9C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C2540);
  v0[37] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ready to receive AirDrop Message", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[36];
  v7 = v0[32];
  v8 = v0[22];

  sub_100244384(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    v10 = (char *)v0[36];
    v11 = v0[23];
    v12 = v0[24];
    v9 = *(_QWORD *)v10;
    v13 = sub_100008384(&qword_1007B9B70);
    (*(void (**)(char *, uint64_t))(v12 + 8))(&v10[*(int *)(v13 + 48)], v11);
  }
  else
  {
    v9 = *(_QWORD *)v0[36];
  }
  v0[38] = v9;
  v14 = swift_task_alloc(32);
  v0[39] = v14;
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = 0;
  v15 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[40] = v15;
  *v15 = v0;
  v15[1] = sub_10049EB90;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000027, 0x800000010061D1D0, sub_1004A1888, v14, &type metadata for SDNWHTTPMessage);
}

uint64_t sub_10049EB90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10049F4A0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 312));
    v4 = sub_10049EBFC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10049EBFC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  nw_protocol_metadata_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  nw_protocol_metadata_t *v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  nw_protocol_metadata_t v75;
  uint64_t v76;
  nw_protocol_metadata_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  nw_protocol_metadata_t *v95;
  uint64_t v96;
  uint64_t v97;

  swift_release(*(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 136) = v1;
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(char **)(v0 + 24);
  *(_QWORD *)(v0 + 336) = v2;
  *(_QWORD *)(v0 + 344) = v1;
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 352) = v5;
  *(_QWORD *)(v0 + 360) = v4;
  v97 = v4;
  v6 = *(unsigned __int8 *)(v0 + 56);
  *(_QWORD *)(v0 + 144) = v5;
  v7 = v3 == 0x64616F6C70552FLL && v2 == (char *)0xE700000000000000;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, 0x64616F6C70552FLL, 0xE700000000000000, 0) & 1) != 0)
  {
    sub_10022E4A8(v1, v5);
    v92 = *(_QWORD *)(v0 + 328);
    v8 = sub_10022E4A8(v1, v5);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
      __asm { BR              X10 }
    }
    sub_100225AB4(v1, v5);
    v14 = *(_OWORD **)(v0 + 248);

    swift_beginAccess(v0 + 136, v0 + 112, 0, 0);
    v16 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 144);
    sub_10022E4A8(v16, v15);
    swift_bridgeObjectRetain(v2);
    swift_unknownObjectRetain(v97);
    sub_10052E444(v3, v2, v97, v6, v16, v15, v14);
    if (v92)
    {
      sub_100225AB4(v16, v15);
      swift_bridgeObjectRelease(v2);
      sub_100225AB4(v1, v5);
      swift_unknownObjectRelease_n(v97, 2);
      swift_bridgeObjectRelease(v2);
      v17 = v16;
      v18 = v15;
LABEL_13:
      sub_100225AB4(v17, v18);
      v19 = *(_QWORD *)(v0 + 280);
      v21 = *(_QWORD *)(v0 + 264);
      v20 = *(_QWORD *)(v0 + 272);
      v23 = *(_QWORD *)(v0 + 240);
      v22 = *(_QWORD *)(v0 + 248);
      v25 = *(_QWORD *)(v0 + 208);
      v24 = *(_QWORD *)(v0 + 216);
      v26 = *(_QWORD *)(v0 + 200);
      swift_task_dealloc(*(_QWORD *)(v0 + 288));
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      v27 = *(uint64_t (**)(void))(v0 + 8);
      return v27();
    }
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 176);
    swift_unknownObjectRelease(v97);
    swift_bridgeObjectRelease(v2);
    sub_100225AB4(v16, v15);
    sub_100244384(v30, v28, type metadata accessor for SDAirDropServerConnection);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v32 = *(_QWORD *)(v0 + 224);
        v33 = *(_QWORD *)(v0 + 232);
        v34 = *(_QWORD *)(v0 + 216);
        swift_release(**(_QWORD **)(v0 + 272));
        sub_100452F84(v34);
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32);
        v36 = *(_QWORD *)(v0 + 248);
        if (v35 == 1)
        {
          sub_1003938D4(*(_QWORD *)(v0 + 216));
          v37 = type metadata accessor for SFAirDropReceive.Failure(0);
          v38 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
          swift_allocError(v37, v38, 0, 0);
          v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, enum case for SFAirDropReceive.Failure.badRequest(_:), v37);
          swift_willThrow(v40);
          swift_bridgeObjectRelease(v2);
          sub_100225AB4(v1, v5);
          swift_unknownObjectRelease(v97);
          v41 = v36;
LABEL_31:
          sub_1002443C8(v41, type metadata accessor for SDAirDropMessage);
          v17 = *(_QWORD *)(v0 + 136);
          v18 = *(_QWORD *)(v0 + 144);
          goto LABEL_13;
        }
        v63 = *(_QWORD *)(v0 + 232);
        v62 = *(_QWORD *)(v0 + 240);
        v64 = *(_QWORD *)(v0 + 224);
        v96 = *(_QWORD *)(v0 + 248);
        v65 = *(nw_protocol_metadata_t **)(v0 + 168);
        v91 = *(_QWORD *)(v0 + 216);
        v94 = *(_QWORD *)(v0 + 160);
        sub_100225AB4(v16, v15);
        swift_bridgeObjectRelease(v2);
        sub_100225AB4(v1, v5);
        swift_unknownObjectRelease(v97);
        v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32);
        v66(v62, v91, v64);
        sub_1004A1898(v96, v94);
        v66((uint64_t)v65, v62, v64);
        v54 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
        v55 = v65;
      }
      else
      {
        v47 = *(char **)(v0 + 272);
        v48 = *(_QWORD *)(v0 + 248);
        v50 = *(_QWORD *)(v0 + 200);
        v49 = *(_QWORD *)(v0 + 208);
        v52 = *(_QWORD *)(v0 + 184);
        v51 = *(_QWORD *)(v0 + 192);
        v93 = *(_QWORD *)(v0 + 160);
        v95 = *(nw_protocol_metadata_t **)(v0 + 168);
        swift_release(*(_QWORD *)v47);
        v53 = sub_100008384(&qword_1007B9B70);
        (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v49, &v47[*(int *)(v53 + 48)], v52);
        sub_100244384(v48, v93, type metadata accessor for SDAirDropMessage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, v49, v52);
        SFAirDrop.TransferIdentifier.init(_:)(v50);
        swift_bridgeObjectRelease(v2);
        sub_100225AB4(v1, v5);
        swift_unknownObjectRelease(v97);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v52);
        sub_1002443C8(v48, type metadata accessor for SDAirDropMessage);
        sub_100225AB4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
        v54 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
        v55 = v95;
      }
      v67 = 1;
    }
    else
    {
      v42 = *(_QWORD *)(v0 + 264);
      v43 = *(_QWORD *)(v0 + 256);
      v44 = *(_QWORD *)(v0 + 176);
      swift_release(**(_QWORD **)(v0 + 272));
      sub_100244384(v44, v42, type metadata accessor for SDAirDropServerConnection);
      v45 = swift_getEnumCaseMultiPayload(v42, v43);
      if (v45 > 1)
      {
        v68 = *(char **)(v0 + 264);
        v69 = *(_QWORD *)(v0 + 184);
        v70 = *(_QWORD *)(v0 + 192);
        v46 = *(_QWORD *)v68;
        v71 = sub_100008384(&qword_1007B9B70);
        v45 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(&v68[*(int *)(v71 + 48)], v69);
      }
      else
      {
        v46 = **(_QWORD **)(v0 + 264);
      }
      v72 = NWConnection.nw.getter(v45);
      v73 = swift_release(v46);
      v74 = nw_protocol_copy_http_connection_definition(v73);
      v75 = nw_connection_copy_protocol_metadata(v72, v74);
      swift_unknownObjectRelease(v74);
      swift_unknownObjectRelease(v72);
      v76 = *(_QWORD *)(v0 + 248);
      if (!v75)
      {
        v87 = type metadata accessor for SFAirDropReceive.Failure(0);
        v88 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        swift_allocError(v87, v88, 0, 0);
        v90 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v87 - 8) + 104))(v89, enum case for SFAirDropReceive.Failure.badRequest(_:), v87);
        swift_willThrow(v90);
        swift_bridgeObjectRelease(v2);
        sub_100225AB4(v1, v5);
        swift_unknownObjectRelease(v97);
        v41 = v76;
        goto LABEL_31;
      }
      v78 = *(_QWORD *)(v0 + 160);
      v77 = *(nw_protocol_metadata_t **)(v0 + 168);
      sub_100225AB4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
      swift_bridgeObjectRelease(v2);
      sub_100225AB4(v1, v5);
      swift_unknownObjectRelease(v97);
      sub_1004A1898(v76, v78);
      *v77 = v75;
      v54 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
      v55 = v77;
      v67 = 0;
    }
    swift_storeEnumTagMultiPayload(v55, v54, v67);
    v79 = *(_QWORD *)(v0 + 280);
    v81 = *(_QWORD *)(v0 + 264);
    v80 = *(_QWORD *)(v0 + 272);
    v83 = *(_QWORD *)(v0 + 240);
    v82 = *(_QWORD *)(v0 + 248);
    v85 = *(_QWORD *)(v0 + 208);
    v84 = *(_QWORD *)(v0 + 216);
    v86 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  v11 = *(_QWORD *)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 256);
  sub_100244384(*(_QWORD *)(v0 + 176), v11, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v11, v12) > 1)
  {
    v56 = *(uint64_t **)(v0 + 280);
    v57 = *(_QWORD *)(v0 + 184);
    v58 = *(_QWORD *)(v0 + 192);
    v13 = *v56;
    v59 = (char *)v56 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    sub_10022E4A8(v1, v5);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  }
  else
  {
    v13 = **(_QWORD **)(v0 + 280);
    sub_10022E4A8(v1, v5);
  }
  *(_QWORD *)(v0 + 368) = v13;
  v60 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 376) = v60;
  *v60 = v0;
  v60[1] = sub_10049F554;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 64, 0, 0, 0xD000000000000014, 0x800000010061D200, sub_1004A1890, v13, &type metadata for SDNWHTTPMessage);
}

uint64_t sub_10049F4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10049F554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10049FD38;
  else
    v3 = sub_10049F5B8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10049F5B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  nw_protocol_metadata_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  nw_protocol_metadata_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  nw_protocol_metadata_t *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  NSObject *v71;
  nw_protocol_metadata_t v72;
  uint64_t v73;
  nw_protocol_metadata_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;

  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v4 = *(const char **)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 368));
  v5 = *(_QWORD *)(v0 + 80);
  v93 = *(_QWORD *)(v0 + 64);
  v95 = *(char **)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v91 = *(unsigned __int8 *)(v0 + 104);
  swift_bridgeObjectRelease(v4);
  sub_100225AB4(v3, v2);
  swift_unknownObjectRelease(v1);
  sub_10022E4A8(v5, v6);
  Data.append(_:)(v5, v6);
  sub_100225AB4(v5, v6);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = sub_10022E4A8(v8, v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
    __asm { BR              X10 }
  }
  sub_100225AB4(v8, v9);
  v14 = *(_OWORD **)(v0 + 248);

  swift_beginAccess(v0 + 136, v0 + 112, 0, 0);
  v16 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 144);
  sub_10022E4A8(v16, v15);
  swift_bridgeObjectRetain(v95);
  swift_unknownObjectRetain(v7);
  sub_10052E444(v93, v95, v7, v91, v16, v15, v14);
  if (!v10)
  {
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 176);
    swift_unknownObjectRelease(v7);
    swift_bridgeObjectRelease(v95);
    sub_100225AB4(v16, v15);
    sub_100244384(v30, v28, type metadata accessor for SDAirDropServerConnection);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
    if (EnumCaseMultiPayload)
    {
      v90 = v7;
      if (EnumCaseMultiPayload == 1)
      {
        v32 = *(_QWORD *)(v0 + 224);
        v33 = *(_QWORD *)(v0 + 232);
        v34 = *(_QWORD *)(v0 + 216);
        swift_release(**(_QWORD **)(v0 + 272));
        sub_100452F84(v34);
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32);
        v36 = *(_QWORD *)(v0 + 248);
        if (v35 == 1)
        {
          sub_1003938D4(*(_QWORD *)(v0 + 216));
          v37 = type metadata accessor for SFAirDropReceive.Failure(0);
          v38 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
          swift_allocError(v37, v38, 0, 0);
          v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, enum case for SFAirDropReceive.Failure.badRequest(_:), v37);
          swift_willThrow(v40);
          swift_bridgeObjectRelease(v95);
          sub_100225AB4(v5, v6);
          swift_unknownObjectRelease(v7);
          v41 = v36;
LABEL_21:
          sub_1002443C8(v41, type metadata accessor for SDAirDropMessage);
          v17 = *(_QWORD *)(v0 + 136);
          v18 = *(_QWORD *)(v0 + 144);
          goto LABEL_5;
        }
        v58 = *(_QWORD *)(v0 + 240);
        v59 = v5;
        v60 = *(_QWORD *)(v0 + 224);
        v92 = *(_QWORD *)(v0 + 232);
        v94 = *(_QWORD *)(v0 + 216);
        v62 = *(_QWORD *)(v0 + 160);
        v61 = *(nw_protocol_metadata_t **)(v0 + 168);
        sub_100225AB4(v16, v15);
        swift_bridgeObjectRelease(v95);
        sub_100225AB4(v59, v6);
        swift_unknownObjectRelease(v90);
        v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32);
        v63(v58, v94, v60);
        sub_1004A1898(v36, v62);
        v63((uint64_t)v61, v58, v60);
        v56 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
        v57 = v61;
      }
      else
      {
        v47 = *(char **)(v0 + 272);
        v48 = *(_QWORD *)(v0 + 248);
        v50 = *(_QWORD *)(v0 + 200);
        v49 = *(_QWORD *)(v0 + 208);
        v51 = *(_QWORD *)(v0 + 184);
        v52 = *(_QWORD *)(v0 + 192);
        v89 = v6;
        v54 = *(_QWORD *)(v0 + 160);
        v53 = *(nw_protocol_metadata_t **)(v0 + 168);
        swift_release(*(_QWORD *)v47);
        v55 = sub_100008384(&qword_1007B9B70);
        (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v49, &v47[*(int *)(v55 + 48)], v51);
        sub_100244384(v48, v54, type metadata accessor for SDAirDropMessage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v49, v51);
        SFAirDrop.TransferIdentifier.init(_:)(v50);
        swift_bridgeObjectRelease(v95);
        sub_100225AB4(v5, v89);
        swift_unknownObjectRelease(v90);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v49, v51);
        sub_1002443C8(v48, type metadata accessor for SDAirDropMessage);
        sub_100225AB4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
        v56 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
        v57 = v53;
      }
      v64 = 1;
    }
    else
    {
      v42 = *(_QWORD *)(v0 + 264);
      v43 = *(_QWORD *)(v0 + 256);
      v44 = *(_QWORD *)(v0 + 176);
      swift_release(**(_QWORD **)(v0 + 272));
      sub_100244384(v44, v42, type metadata accessor for SDAirDropServerConnection);
      v45 = swift_getEnumCaseMultiPayload(v42, v43);
      if (v45 > 1)
      {
        v65 = *(char **)(v0 + 264);
        v66 = *(_QWORD *)(v0 + 184);
        v67 = *(_QWORD *)(v0 + 192);
        v46 = *(_QWORD *)v65;
        v68 = sub_100008384(&qword_1007B9B70);
        v45 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(&v65[*(int *)(v68 + 48)], v66);
      }
      else
      {
        v46 = **(_QWORD **)(v0 + 264);
      }
      v69 = NWConnection.nw.getter(v45);
      v70 = swift_release(v46);
      v71 = nw_protocol_copy_http_connection_definition(v70);
      v72 = nw_connection_copy_protocol_metadata(v69, v71);
      swift_unknownObjectRelease(v71);
      swift_unknownObjectRelease(v69);
      v73 = *(_QWORD *)(v0 + 248);
      if (!v72)
      {
        v85 = type metadata accessor for SFAirDropReceive.Failure(0);
        v86 = sub_100220D78(&qword_1007B4C70, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure, (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        swift_allocError(v85, v86, 0, 0);
        v88 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v85 - 8) + 104))(v87, enum case for SFAirDropReceive.Failure.badRequest(_:), v85);
        swift_willThrow(v88);
        swift_bridgeObjectRelease(v95);
        sub_100225AB4(v5, v6);
        swift_unknownObjectRelease(v7);
        v41 = v73;
        goto LABEL_21;
      }
      v75 = *(_QWORD *)(v0 + 160);
      v74 = *(nw_protocol_metadata_t **)(v0 + 168);
      sub_100225AB4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
      swift_bridgeObjectRelease(v95);
      sub_100225AB4(v5, v6);
      swift_unknownObjectRelease(v7);
      sub_1004A1898(v73, v75);
      *v74 = v72;
      v56 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
      v57 = v74;
      v64 = 0;
    }
    swift_storeEnumTagMultiPayload(v57, v56, v64);
    v76 = *(_QWORD *)(v0 + 280);
    v78 = *(_QWORD *)(v0 + 264);
    v77 = *(_QWORD *)(v0 + 272);
    v80 = *(_QWORD *)(v0 + 240);
    v79 = *(_QWORD *)(v0 + 248);
    v82 = *(_QWORD *)(v0 + 208);
    v81 = *(_QWORD *)(v0 + 216);
    v83 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  sub_100225AB4(v16, v15);
  swift_bridgeObjectRelease(v95);
  sub_100225AB4(v5, v6);
  swift_unknownObjectRelease_n(v7, 2);
  swift_bridgeObjectRelease(v95);
  v17 = v16;
  v18 = v15;
LABEL_5:
  sub_100225AB4(v17, v18);
  v19 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 248);
  v25 = *(_QWORD *)(v0 + 208);
  v24 = *(_QWORD *)(v0 + 216);
  v26 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_10049FD38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v4 = *(const char **)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 368));
  swift_bridgeObjectRelease(v4);
  sub_100225AB4(v3, v2);
  swift_unknownObjectRelease(v1);
  sub_100225AB4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10049FE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SDAirDropServerConnectionIdentity(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100244384(v1, (uint64_t)v8, v9);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(v22);
    v21 = 0xD000000000000012;
    v22 = 0x800000010061D0F0;
    v10 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = v21;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v15 = *v8;
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v16._countAndFlagsBits = 0xD00000000000001FLL;
    v16._object = (void *)0x800000010061D110;
    String.append(_:)(v16);
    v20 = v15;
    v17 = sub_100008384(&qword_1007C26B8);
    _print_unlocked<A, B>(_:_:)(&v20, &v21, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    swift_unknownObjectRelease(v15);
    return v21;
  }
  return v14;
}

uint64_t sub_1004A0010(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t EnumCaseMultiPayload;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v38 = a1;
  v3 = type metadata accessor for SDAirDropServerConnection(0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v4);
  v9 = (uint64_t *)((char *)&v35 - v8);
  v10 = __chkstk_darwin(v7);
  v12 = (uint64_t *)((char *)&v35 - v11);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v15 = type metadata accessor for Logger(0);
  sub_100221DF8(v15, (uint64_t)qword_1007C2540);
  v16 = sub_100244384(v1, (uint64_t)v14, type metadata accessor for SDAirDropServerConnection);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v35 = v1;
    v19 = swift_slowAlloc(18, -1);
    v20 = swift_slowAlloc(32, -1);
    v40 = v20;
    *(_DWORD *)v19 = 136315394;
    sub_100244384((uint64_t)v14, (uint64_t)v12, type metadata accessor for SDAirDropServerConnection);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v3);
    v36 = v3;
    v37 = v6;
    v22 = *v12;
    if (EnumCaseMultiPayload > 1)
    {
      v24 = (char *)v12 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v25 = type metadata accessor for UUID(0);
      EnumCaseMultiPayload = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    }
    v26 = NWConnection.debugDescription.getter(EnumCaseMultiPayload);
    v28 = v27;
    swift_release(v22);
    v39 = sub_100228BD8(v26, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 4);
    swift_bridgeObjectRelease(v28);
    sub_1002443C8((uint64_t)v14, type metadata accessor for SDAirDropServerConnection);
    *(_WORD *)(v19 + 12) = 1024;
    v23 = v38;
    LODWORD(v39) = v38 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v19 + 14);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Cancelling connection %s forced %{BOOL}d", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v3 = v36;
    v6 = v37;
    v2 = v35;
  }
  else
  {
    sub_1002443C8((uint64_t)v14, type metadata accessor for SDAirDropServerConnection);

    v23 = v38;
  }
  if ((v23 & 1) != 0)
  {
    sub_100244384(v2, (uint64_t)v9, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v9, v3) > 1)
    {
      v29 = *v9;
      v30 = (char *)v9 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v31 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
    }
    else
    {
      v29 = *v9;
    }
    NWConnection.forceCancel()();
  }
  else
  {
    sub_100244384(v2, (uint64_t)v6, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v6, v3) > 1)
    {
      v29 = *v6;
      v32 = (char *)v6 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v33 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
    }
    else
    {
      v29 = *v6;
    }
    NWConnection.cancel()();
  }
  return swift_release(v29);
}

uint64_t sub_1004A03E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C2540);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C2540);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004A0474(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for SDAirDropServerConnection(0);
  v2[5] = v3;
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SDAirDropMessage(0);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A04F0, 0, 0);
}

uint64_t sub_1004A04F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;

  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v1 = v0[3];
  v2 = v0[7];
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007C2540);
  v4 = sub_100244384(v1, v2, type metadata accessor for SDAirDropMessage);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[7];
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v29 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_10044F8C8();
    v12 = v11;
    v0[2] = sub_100228BD8(v13, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4);
    swift_bridgeObjectRelease(v12);
    sub_1002443C8(v8, type metadata accessor for SDAirDropMessage);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sending response message %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1002443C8(v0[7], type metadata accessor for SDAirDropMessage);
  }

  v14 = v0[5];
  v15 = v0[6];
  sub_100244384(v0[4], v15, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v15, v14) > 1)
  {
    v17 = (uint64_t *)v0[6];
    v16 = *v17;
    v18 = (char *)v17 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  }
  else
  {
    v16 = *(_QWORD *)v0[6];
  }
  v0[8] = v16;
  sub_10052C154();
  v21 = v20;
  v0[9] = v20;
  sub_10052C718();
  v0[10] = v22;
  v0[11] = v23;
  v24 = v22;
  v25 = v23;
  v26 = swift_task_alloc(64);
  v0[12] = v26;
  *(_QWORD *)(v26 + 16) = v16;
  *(_QWORD *)(v26 + 24) = v24;
  *(_QWORD *)(v26 + 32) = v25;
  *(_QWORD *)(v26 + 40) = v21;
  *(_BYTE *)(v26 + 48) = 1;
  v27 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v27;
  *v27 = v0;
  v27[1] = sub_1004A0820;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v27, 0, 0, 0xD000000000000029, 0x8000000100616140, sub_1003225E8, v26, (char *)&type metadata for () + 8);
}

uint64_t sub_1004A0820()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1004A08F0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 96));
    v4 = sub_1004A088C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004A088C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  sub_100225AB4(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_unknownObjectRelease(v2);
  swift_release(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A08F0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  sub_100225AB4(v2, v1);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A0960()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for SDAirDropServerConnection(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A09BC, 0, 0);
}

uint64_t sub_1004A09BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *metadata_for_response;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C2540);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending unauthorized error response", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[3];
  v6 = v0[4];
  v8 = v0[2];

  v0[5] = nw_http_response_create_well_known(401);
  metadata_for_response = nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  v10 = nw_content_context_create("unauthorized response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_100244384(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    v12 = (uint64_t *)v0[4];
    v11 = *v12;
    v13 = (char *)v12 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v11 = *(_QWORD *)v0[4];
  }
  v0[8] = v11;
  v15 = swift_task_alloc(64);
  v0[9] = v15;
  *(_QWORD *)(v15 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1005CF260;
  *(_QWORD *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *v16 = v0;
  v16[1] = sub_1004A0BD4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD000000000000029, 0x8000000100616140, sub_1003225E8, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_1004A0BD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1004A18DC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
    v4 = sub_1004A18E0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004A0C40()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for SDAirDropServerConnection(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A0C9C, 0, 0);
}

uint64_t sub_1004A0C9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *metadata_for_response;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C2540);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending unsupported error response", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[3];
  v6 = v0[4];
  v8 = v0[2];

  v0[5] = nw_http_response_create_well_known(501);
  metadata_for_response = nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  v10 = nw_content_context_create("unsupported response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_100244384(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    v12 = (uint64_t *)v0[4];
    v11 = *v12;
    v13 = (char *)v12 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v11 = *(_QWORD *)v0[4];
  }
  v0[8] = v11;
  v15 = swift_task_alloc(64);
  v0[9] = v15;
  *(_QWORD *)(v15 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1005CF260;
  *(_QWORD *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *v16 = v0;
  v16[1] = sub_1004A0BD4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD000000000000029, 0x8000000100616140, sub_1003225E8, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_1004A0EB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for SDAirDropServerConnection(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A0F10, 0, 0);
}

uint64_t sub_1004A0F10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *metadata_for_response;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C2540);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending insufficient storage error response", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[3];
  v6 = v0[4];
  v8 = v0[2];

  v0[5] = nw_http_response_create(507, "Insufficient Storage");
  metadata_for_response = nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  v10 = nw_content_context_create("insufficient storage response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_100244384(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    v12 = (uint64_t *)v0[4];
    v11 = *v12;
    v13 = (char *)v12 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v11 = *(_QWORD *)v0[4];
  }
  v0[8] = v11;
  v15 = swift_task_alloc(64);
  v0[9] = v15;
  *(_QWORD *)(v15 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1005CF260;
  *(_QWORD *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *v16 = v0;
  v16[1] = sub_1004A0BD4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD000000000000029, 0x8000000100616140, sub_1003225E8, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_1004A1130()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for SDAirDropServerConnection(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A118C, 0, 0);
}

uint64_t sub_1004A118C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *metadata_for_response;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (qword_1007B4198 != -1)
    swift_once(&qword_1007B4198, sub_1004A03E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C2540);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending server error response", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[3];
  v6 = v0[4];
  v8 = v0[2];

  v0[5] = nw_http_response_create_well_known(500);
  metadata_for_response = nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  v10 = nw_content_context_create("server error response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_100244384(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    v12 = (uint64_t *)v0[4];
    v11 = *v12;
    v13 = (char *)v12 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v11 = *(_QWORD *)v0[4];
  }
  v0[8] = v11;
  v15 = swift_task_alloc(64);
  v0[9] = v15;
  *(_QWORD *)(v15 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1005CF260;
  *(_QWORD *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *v16 = v0;
  v16[1] = sub_1004A13A4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD000000000000029, 0x8000000100616140, sub_1003225E8, v15, (char *)&type metadata for () + 8);
}

uint64_t sub_1004A13A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1004A1488;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
    v4 = sub_1004A1410;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004A1410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_1004A0010(0);
  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A1488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A14FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1[8] = v0;
  v2 = type metadata accessor for SDAirDropServerConnection(0);
  v1[9] = v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v3);
  v1[11] = swift_task_alloc(v3);
  return swift_task_switch(sub_1004A1568, 0, 0);
}

uint64_t sub_1004A1568()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;

  v1 = v0[11];
  v2 = v0[9];
  sub_100244384(v0[8], v1, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v1, v2) > 1)
  {
    v4 = (uint64_t *)v0[11];
    v3 = *v4;
    v5 = (char *)v4 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    v3 = *(_QWORD *)v0[11];
  }
  v0[12] = v3;
  v7 = v0[9];
  v8 = v0[10];
  sub_100244384(v0[8], v8, type metadata accessor for SDAirDropServerConnection);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v7);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1002443C8(v0[10], type metadata accessor for SDAirDropServerConnection);
    }
    else
    {
      v11 = (_QWORD *)v0[10];
      swift_release(*v11);
      v12 = (char *)v11 + *(int *)(sub_100008384(&qword_1007B9B70) + 48);
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    }
    v10 = 3145728;
  }
  else
  {
    sub_1002443C8(v0[10], type metadata accessor for SDAirDropServerConnection);
    v10 = 0x20000;
  }
  v14 = swift_task_alloc(32);
  v0[13] = v14;
  *(_QWORD *)(v14 + 16) = v3;
  *(_QWORD *)(v14 + 24) = v10;
  v15 = (uint64_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[14] = (uint64_t)v15;
  *v15 = v0;
  v15[1] = (uint64_t *)sub_1004A1720;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000027, 0x800000010061D1D0, sub_1004A18EC, v14, &type metadata for SDNWHTTPMessage);
}

uint64_t sub_1004A1720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1004A182C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_1004A178C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004A178C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 96));
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(unsigned __int8 *)(v0 + 56);
  sub_10022E4A8(v4, v5);
  swift_bridgeObjectRelease(v3);
  sub_100225AB4(v4, v5);
  swift_unknownObjectRelease(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v0 + 8))(v4, v5, v7);
}

uint64_t sub_1004A182C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004A1888(uint64_t a1)
{
  uint64_t v1;

  sub_100500998(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1004A1890(uint64_t a1)
{
  uint64_t v1;

  return sub_1005004A8(a1, v1);
}

uint64_t sub_1004A1898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDAirDropMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004A18F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004A390C(a1, a2, a3, (uint64_t)&unk_10072AD20, (uint64_t)sub_1004A5CAC, (uint64_t)&unk_10072AD38);
}

uint64_t sub_1004A190C(uint64_t a1)
{
  return sub_1004A1944(a1, (uint64_t)&unk_10072ACA8, (uint64_t)sub_1004A48B0, (uint64_t)&unk_10072ACC0);
}

uint64_t sub_1004A1928(uint64_t a1)
{
  return sub_1004A1944(a1, (uint64_t)&unk_10072AFA0, (uint64_t)sub_1004A5FEC, (uint64_t)&unk_10072AFB8);
}

uint64_t sub_1004A1944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v29 = a4;
  v26 = a2;
  v27 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v28 = *(_QWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  v15 = swift_allocObject(&unk_10072AC80, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = swift_allocObject(v26, v17 + v14, v16 | 7);
  *(_QWORD *)(v18 + 16) = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = v27;
  v35 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = v29;
  v19 = _Block_copy(aBlock);
  v20 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v20);
  v33 = _swiftEmptyArrayStorage;
  v21 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100008384((uint64_t *)&unk_1007B6410);
  v23 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  v24 = v35;
  swift_release(v15);
  return swift_release(v24);
}

uint64_t sub_1004A1BD8()
{
  return sub_1004A1C00((uint64_t)sub_1004A5FF8, (uint64_t)&unk_10072AFE0);
}

uint64_t sub_1004A1BEC()
{
  return sub_1004A1C00((uint64_t)sub_1004A6028, (uint64_t)&unk_10072B058);
}

uint64_t sub_1004A1C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  v12 = swift_allocObject(&unk_10072AC80, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  aBlock[4] = a1;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  v14 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100008384((uint64_t *)&unk_1007B6410);
  v17 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v18 = v24;
  swift_release(v12);
  return swift_release(v18);
}

uint64_t sub_1004A1E0C()
{
  return sub_1004A1C00((uint64_t)sub_1004A6018, (uint64_t)&unk_10072B008);
}

uint64_t sub_1004A1E20()
{
  return sub_1004A1C00((uint64_t)sub_1004A5F6C, (uint64_t)&unk_10072AF68);
}

uint64_t sub_1004A1E34(uint64_t a1)
{
  return sub_1004A1E6C(a1, (uint64_t)&unk_10072AE88, (uint64_t)sub_1004A5E44, (uint64_t)&unk_10072AEA0);
}

uint64_t sub_1004A1E50(uint64_t a1)
{
  return sub_1004A1E6C(a1, (uint64_t)&unk_10072AF00, (uint64_t)sub_1004A5EF4, (uint64_t)&unk_10072AF18);
}

uint64_t sub_1004A1E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  v15 = swift_allocObject(&unk_10072AC80, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  v16 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = a1;
  aBlock[4] = a3;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = a4;
  v17 = _Block_copy(aBlock);
  swift_retain(a1);
  v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_100008384((uint64_t *)&unk_1007B6410);
  v21 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  v22 = v29;
  swift_release(v15);
  return swift_release(v22);
}

uint64_t sub_1004A2094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004A1E6C(0, (uint64_t)&unk_10072AE88, (uint64_t)sub_1004A5E44, (uint64_t)&unk_10072AEA0);
  v16[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  v8 = swift_allocObject(&unk_10072AC80, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_1004A6038;
  v20 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10072B0A8;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  v18 = _swiftEmptyArrayStorage;
  v11 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_100008384((uint64_t *)&unk_1007B6410);
  v13 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v20;
  swift_release(v8);
  return swift_release(v14);
}

uint64_t sub_1004A22C4()
{
  return sub_1004A1C00((uint64_t)sub_1004A6030, (uint64_t)&unk_10072B080);
}

uint64_t sub_1004A22D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C2700);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C2700);
  if (qword_1007B3E50 != -1)
    swift_once(&qword_1007B3E50, sub_1002E9E34);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1004A2368()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SDAirDropBLEController()), "init");
  qword_1007D84C0 = (uint64_t)result;
  return result;
}

id sub_1004A23D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id result;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class ObjectType;
  uint64_t v23;
  objc_super v24;
  _QWORD *v25;

  ObjectType = (Class)swift_getObjectType(v0);
  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(SDStatusMonitor), "sharedMonitor");
  if (result)
  {
    v11 = result;
    sub_100221EDC(0, (unint64_t *)&qword_1007B42D0, OS_dispatch_queue_ptr);
    static DispatchQoS.utility.getter();
    v25 = _swiftEmptyArrayStorage;
    v12 = sub_100220D78((unint64_t *)&unk_1007BD2A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v13 = sub_100008384((uint64_t *)&unk_1007B42E0);
    v14 = sub_10026E2FC((unint64_t *)&qword_1007BD2B0, (uint64_t *)&unk_1007B42E0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v13, v14, v4, v12);
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
    v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x800000010061D310, v9, v6, v3, 0);
    v16 = ObjectType;
    v17 = (char *)objc_allocWithZone(ObjectType);
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser] = 0;
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser] = 0;
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner] = 0;
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer] = 0;
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers] = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceStatus] = v11;
    *(_QWORD *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue] = v15;
    v24.receiver = v17;
    v24.super_class = v16;
    v18 = objc_msgSendSuper2(&v24, "init");
    v19 = v23;
    v20 = swift_getObjectType(v23);
    swift_deallocPartialClassInstance(v19, v20, 64, 7);
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004A26A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t Strong;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint8_t *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t v55;
  _BYTE v56[48];
  _BYTE v57[24];

  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v57, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v7);
  if (Strong)
  {
    v9 = (char *)Strong;
    v10 = objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceStatus), "myShortHashesForAirDrop");
    if (v10)
    {
      v11 = v10;
      v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v14 = v13;

    }
    else
    {
      v15 = sub_100008384(&qword_1007B54A0);
      inited = swift_initStackObject(v15, v56);
      *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
      *(_QWORD *)(inited + 32) = AirDropID.getter();
      *(_QWORD *)(inited + 40) = v17;
      v12 = sub_100444C00((const char *)inited);
      v14 = v18;
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
    }
    v19 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser;
    if (*(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser])
    {
      sub_100225AB4(v12, v14);

    }
    else
    {
      if (qword_1007B41A0 != -1)
        swift_once(&qword_1007B41A0, sub_1004A22D8);
      v20 = type metadata accessor for Logger(0);
      sub_100221DF8(v20, (uint64_t)qword_1007C2700);
      sub_10022E4A8(v12, v14);
      v21 = sub_10022E4A8(v12, v14);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter();
      v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        v51 = v24;
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v55 = v50;
        v52 = a2;
        *(_DWORD *)v25 = 136315138;
        v48 = v25 + 4;
        v49 = v25;
        sub_10038D14C(v12, v14);
        v27 = v26;
        v53 = (uint64_t)v26;
        v28 = sub_100008384((uint64_t *)&unk_1007BD6A0);
        v29 = sub_10026E2FC((unint64_t *)&qword_1007B6D40, (uint64_t *)&unk_1007BD6A0, (uint64_t)&protocol conformance descriptor for [A]);
        v30 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v28, v29);
        v32 = v31;
        swift_bridgeObjectRelease(v27);
        v53 = sub_100228BD8(v30, (unint64_t)v32, &v55);
        a2 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v48);
        swift_bridgeObjectRelease(v32);
        sub_100225AB4(v12, v14);
        sub_100225AB4(v12, v14);
        v33 = v49;
        _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v51, "Starting advertisement for AirDrop %s", v49, 0xCu);
        v34 = v50;
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {
        sub_100225AB4(v12, v14);
        sub_100225AB4(v12, v14);
      }

      v35 = *(void **)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue];
      v36 = objc_allocWithZone((Class)type metadata accessor for SDBLEAdvertiser());
      sub_10022E4A8(v12, v14);
      sub_10022E4A8(v12, v14);
      v37 = sub_100486AE4(v35, v12, v14, 0x3200000100);
      v38 = *(void **)&v9[v19];
      *(_QWORD *)&v9[v19] = v37;

      v39 = *(void **)&v9[v19];
      if (v39)
      {
        v40 = swift_allocObject(&unk_10072AC80, 24, 7);
        swift_unknownObjectWeakInit(v40 + 16, v9);
        v41 = v39;
        swift_retain(v40);
        sub_100486C60((uint64_t)sub_1004A5E4C, v40);

        swift_release_n(v40, 2);
      }
      v42 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v6, 1, 1, v42);
      v43 = qword_1007B3D98;
      swift_retain(a2);
      if (v43 != -1)
        swift_once(&qword_1007B3D98, sub_1002ACAEC);
      v44 = static AirDropActor.shared;
      v45 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
      v46 = (_QWORD *)swift_allocObject(&unk_10072AED8, 40, 7);
      v46[2] = v44;
      v46[3] = v45;
      v46[4] = a2;
      swift_retain(v44);
      v47 = sub_100252EC0((uint64_t)v6, (uint64_t)&unk_1007C2790, (uint64_t)v46);
      sub_100225AB4(v12, v14);
      sub_100225AB4(v12, v14);

      swift_release(v47);
    }
  }
}

void sub_1004A2BA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  id v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser);
    if (v5)
    {
      v6 = v5;

      sub_1004881D4(22);
      v4 = v6;
    }

  }
}

uint64_t sub_1004A2C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004A2C80, static AirDropActor.shared, 0);
}

void sub_1004A2C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v3 = 0x8000000100615770;
    v0 = getpid();
    goto LABEL_29;
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    v0 = 0;
    v3 = 0xE000000000000000;
    goto LABEL_29;
  }
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)&v5 = swift_bridgeObjectRetain((const char *)*(_QWORD *)(v2 + 24)).n128_u64[0];
    if (v4)
      goto LABEL_5;
    goto LABEL_15;
  }
  if (v3 < 0)
    v8 = *(_QWORD *)(v2 + 24);
  else
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(const char **)(v2 + 24));
  if (!_CocoaArrayWrapper.endIndex.getter(v8))
  {
LABEL_15:
    swift_bridgeObjectRelease((const char *)v3, v5);
    v3 = 0xE000000000000000;
    v0 = *(_QWORD *)(v2 + 24);
    if (v0)
      goto LABEL_16;
LABEL_29:
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease((const char *)v3);
    sub_100045388((uint64_t)CFSTR("BluetoothAdvertise"), (uint64_t)CFSTR("Start"), (uint64_t)v15, v0);

    (*(void (**)(void))(v1 + 8))();
    return;
  }
LABEL_5:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    *(_QWORD *)&v13 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    v3 = *(_QWORD *)(v12 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain((const char *)v3, v13);
    swift_unknownObjectRelease(v12);
    v0 = *(_QWORD *)(v2 + 24);
    if (!v0)
      goto LABEL_29;
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_24;
    }
    v6 = (char *)*(id *)(v3 + 32);
    *(_QWORD *)&v7 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    v3 = *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain((const char *)v3, v7);

    v0 = *(_QWORD *)(v2 + 24);
    if (!v0)
      goto LABEL_29;
  }
LABEL_16:
  if (!((unint64_t)v0 >> 62))
  {
    v9 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)&v10 = swift_bridgeObjectRetain((const char *)v0).n128_u64[0];
    if (v9)
      goto LABEL_18;
LABEL_28:
    swift_bridgeObjectRelease((const char *)v0, v10);
    v0 = 0;
    goto LABEL_29;
  }
LABEL_24:
  if (v0 < 0)
    v14 = v0;
  else
    v14 = v0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v0);
  if (!_CocoaArrayWrapper.endIndex.getter(v14))
    goto LABEL_28;
LABEL_18:
  if ((v0 & 0xC000000000000001) != 0)
  {
    v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0);
    swift_bridgeObjectRelease((const char *)v0);
    v0 = *(unsigned int *)(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v16);
    goto LABEL_29;
  }
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = (char *)*(id *)(v0 + 32);
    swift_bridgeObjectRelease((const char *)v0);
    v0 = *(unsigned int *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_29;
  }
  __break(1u);
}

void sub_1004A2EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *Strong;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v21[24];

  v4 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v21, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser;
    v11 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser];
    if (v11)
    {
      v12 = v11;
      sub_100487B8C(0, 0, 0.0);

      v13 = *(void **)&v9[v10];
      *(_QWORD *)&v9[v10] = 0;

      v14 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
      v15 = qword_1007B3D98;
      swift_retain(a2);
      if (v15 != -1)
        swift_once(&qword_1007B3D98, sub_1002ACAEC);
      v16 = static AirDropActor.shared;
      v17 = sub_100220D78((unint64_t *)&qword_1007BCF00, (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor, (uint64_t)&protocol conformance descriptor for AirDropActor);
      v18 = (_QWORD *)swift_allocObject(&unk_10072AF50, 40, 7);
      v18[2] = v16;
      v18[3] = v17;
      v18[4] = a2;
      swift_retain(v16);
      v19 = sub_100252EC0((uint64_t)v6, (uint64_t)&unk_1007C27A0, (uint64_t)v18);

      swift_release(v19);
    }
    else
    {

    }
  }
}

uint64_t sub_1004A30A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004A3108, static AirDropActor.shared, 0);
}

void sub_1004A3108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v3 = 0x8000000100615770;
    v0 = getpid();
    goto LABEL_29;
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    v0 = 0;
    v3 = 0xE000000000000000;
    goto LABEL_29;
  }
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)&v5 = swift_bridgeObjectRetain((const char *)*(_QWORD *)(v2 + 24)).n128_u64[0];
    if (v4)
      goto LABEL_5;
    goto LABEL_15;
  }
  if (v3 < 0)
    v8 = *(_QWORD *)(v2 + 24);
  else
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(const char **)(v2 + 24));
  if (!_CocoaArrayWrapper.endIndex.getter(v8))
  {
LABEL_15:
    swift_bridgeObjectRelease((const char *)v3, v5);
    v3 = 0xE000000000000000;
    v0 = *(_QWORD *)(v2 + 24);
    if (v0)
      goto LABEL_16;
LABEL_29:
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease((const char *)v3);
    sub_100045388((uint64_t)CFSTR("BluetoothAdvertise"), (uint64_t)CFSTR("Stop"), (uint64_t)v15, v0);

    (*(void (**)(void))(v1 + 8))();
    return;
  }
LABEL_5:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    *(_QWORD *)&v13 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    v3 = *(_QWORD *)(v12 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain((const char *)v3, v13);
    swift_unknownObjectRelease(v12);
    v0 = *(_QWORD *)(v2 + 24);
    if (!v0)
      goto LABEL_29;
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_24;
    }
    v6 = (char *)*(id *)(v3 + 32);
    *(_QWORD *)&v7 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    v3 = *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain((const char *)v3, v7);

    v0 = *(_QWORD *)(v2 + 24);
    if (!v0)
      goto LABEL_29;
  }
LABEL_16:
  if (!((unint64_t)v0 >> 62))
  {
    v9 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)&v10 = swift_bridgeObjectRetain((const char *)v0).n128_u64[0];
    if (v9)
      goto LABEL_18;
LABEL_28:
    swift_bridgeObjectRelease((const char *)v0, v10);
    v0 = 0;
    goto LABEL_29;
  }
LABEL_24:
  if (v0 < 0)
    v14 = v0;
  else
    v14 = v0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain((const char *)v0);
  if (!_CocoaArrayWrapper.endIndex.getter(v14))
    goto LABEL_28;
LABEL_18:
  if ((v0 & 0xC000000000000001) != 0)
  {
    v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0);
    swift_bridgeObjectRelease((const char *)v0);
    v0 = *(unsigned int *)(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v16);
    goto LABEL_29;
  }
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = (char *)*(id *)(v0 + 32);
    swift_bridgeObjectRelease((const char *)v0);
    v0 = *(unsigned int *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_29;
  }
  __break(1u);
}

void sub_1004A3384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *Strong;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  const char **v26;
  char isUniquelyReferenced_nonNull_native;
  const char *v28;
  __n128 v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  void **aBlock;
  uint64_t v46;
  void (*v47)(uint64_t, void *);
  void *v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  const char *v51;
  char v52[24];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + 16;
  swift_beginAccess(a1 + 16, v52, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a1 + 16, v13);
  if (Strong)
  {
    v15 = Strong;
    v16 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner;
    if (!*(_QWORD *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner])
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      v25 = swift_allocObject(&unk_10072AD70, 32, 7);
      *(_QWORD *)(v25 + 16) = a3;
      *(_QWORD *)(v25 + 24) = a4;
      v26 = (const char **)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers];
      swift_beginAccess(&v15[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers], &aBlock, 33, 0);
      swift_retain(a4);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
      v51 = *v26;
      *v26 = (const char *)0x8000000000000000;
      sub_10046D44C((uint64_t)sub_1004A5CDC, v25, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      v28 = *v26;
      *v26 = v51;
      v29 = swift_bridgeObjectRelease(v28);
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v29);
      swift_endAccess(&aBlock);
      v30 = objc_msgSend(objc_allocWithZone((Class)CBDiscovery), "init");
      objc_msgSend(v30, "setDispatchQueue:", *(_QWORD *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue]);
      objc_msgSend(v30, "addDiscoveryType:", 1);
      objc_msgSend(v30, "setDiscoveryFlags:", 0x40000000);
      objc_msgSend(v30, "setUseCase:", 131090);
      v31 = swift_allocObject(&unk_10072AC80, 24, 7);
      swift_unknownObjectWeakInit(v31 + 16, v15);
      v49 = sub_1004A5D04;
      v50 = v31;
      aBlock = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_1002C3A3C;
      v48 = &unk_10072AD88;
      v32 = _Block_copy(&aBlock);
      swift_release(v50);
      objc_msgSend(v30, "setDeviceFoundHandler:", v32);
      _Block_release(v32);
      v33 = swift_allocObject(&unk_10072AC80, 24, 7);
      swift_unknownObjectWeakInit(v33 + 16, v15);
      v49 = sub_1004A5D20;
      v50 = v33;
      aBlock = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_1002C3A3C;
      v48 = &unk_10072ADB0;
      v34 = _Block_copy(&aBlock);
      swift_release(v50);
      objc_msgSend(v30, "setDeviceLostHandler:", v34);
      _Block_release(v34);
      if (qword_1007B41A0 != -1)
        swift_once(&qword_1007B41A0, sub_1004A22D8);
      v35 = type metadata accessor for Logger(0);
      v36 = sub_100221DF8(v35, (uint64_t)qword_1007C2700);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Starting to scan for AirDrop", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }

      v40 = swift_allocObject(&unk_10072AC80, 24, 7);
      swift_unknownObjectWeakInit(v40 + 16, v15);
      v49 = sub_1004A5D3C;
      v50 = v40;
      aBlock = _NSConcreteStackBlock;
      v46 = 1107296256;
      v47 = sub_1002D6B08;
      v48 = &unk_10072ADD8;
      v41 = _Block_copy(&aBlock);
      swift_release(v50);
      objc_msgSend(v30, "activateWithCompletion:", v41);
      _Block_release(v41);
      v42 = *(void **)&v15[v16];
      *(_QWORD *)&v15[v16] = v30;
      v43 = v30;

      v24 = String._bridgeToObjectiveC()();
      v44 = getpid();
      sub_100045388((uint64_t)CFSTR("BluetoothScanning"), (uint64_t)CFSTR("Start"), (uint64_t)v24, v44);

      goto LABEL_15;
    }

  }
  if (qword_1007B41A0 != -1)
    swift_once(&qword_1007B41A0, sub_1004A22D8);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100221DF8(v17, (uint64_t)qword_1007C2700);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Attempting to start scanning but already scanning", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  swift_beginAccess(v12, &aBlock, 0, 0);
  v23 = swift_unknownObjectWeakLoadStrong(v12, v22);
  if (v23)
  {
    v24 = (NSString)v23;
    sub_1004A390C(a2, a3, a4, (uint64_t)&unk_10072AE10, (uint64_t)sub_1004A5DDC, (uint64_t)&unk_10072AE28);
LABEL_15:

  }
}

uint64_t sub_1004A390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v35 = a5;
  v36 = a6;
  v32 = a4;
  v33 = a2;
  v34 = a3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  v18 = swift_allocObject(&unk_10072AC80, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(v32, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v17, v14);
  v23 = (_QWORD *)(v22 + v21);
  v24 = v34;
  *v23 = v33;
  v23[1] = v24;
  aBlock[4] = v35;
  v43 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = v36;
  v25 = _Block_copy(aBlock);
  swift_retain(v18);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v41 = _swiftEmptyArrayStorage;
  v27 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100008384((uint64_t *)&unk_1007B6410);
  v29 = sub_10026E2FC((unint64_t *)&qword_1007B6860, (uint64_t *)&unk_1007B6410, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v8, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  v30 = v43;
  swift_release(v18);
  return swift_release(v30);
}

uint64_t sub_1004A3BC4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *, char *);
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[24];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
    goto LABEL_27;
  v12 = (_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers);
  swift_beginAccess(v12, v32, 0, 0);
  v13 = *v12;
  v14 = *v12 + 64;
  v15 = 1 << *(_BYTE *)(*v12 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(*v12 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  v19 = a2 & 1;
  result = swift_bridgeObjectRetain(*v12);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v20 << 6);
      goto LABEL_6;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v26 >= v18)
      return swift_release(v13);
    v27 = *(_QWORD *)(v14 + 8 * v26);
    ++v20;
    if (!v27)
    {
      v20 = v26 + 1;
      if (v26 + 1 >= v18)
        return swift_release(v13);
      v27 = *(_QWORD *)(v14 + 8 * v20);
      if (!v27)
      {
        v20 = v26 + 2;
        if (v26 + 2 >= v18)
          return swift_release(v13);
        v27 = *(_QWORD *)(v14 + 8 * v20);
        if (!v27)
        {
          v20 = v26 + 3;
          if (v26 + 3 >= v18)
            return swift_release(v13);
          v27 = *(_QWORD *)(v14 + 8 * v20);
          if (!v27)
            break;
        }
      }
    }
LABEL_23:
    v17 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_6:
    v23 = *(_QWORD *)(v13 + 56) + 16 * v22;
    v25 = *(void (**)(uint64_t *, char *))v23;
    v24 = *(_QWORD *)(v23 + 8);
    v31 = a1;
    v30 = v19;
    swift_retain(v24);
    v25(&v31, &v30);
    result = swift_release(v24);
  }
  v28 = v26 + 4;
  if (v28 >= v18)
    return swift_release(v13);
  v27 = *(_QWORD *)(v14 + 8 * v28);
  if (v27)
  {
    v20 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v20 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v20 >= v18)
      return swift_release(v13);
    v27 = *(_QWORD *)(v14 + 8 * v20);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1004A3E00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  _BYTE v9[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_1004A3BC4(a1, a3 & 1);

  }
}

void sub_1004A3E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *Strong;
  void *v20;
  NSObject *oslog;
  uint64_t v22;
  uint64_t v23[3];

  if (a1)
  {
    v3 = a2 + 16;
    swift_errorRetain(a1);
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v4 = type metadata accessor for Logger(0);
    sub_100221DF8(v4, (uint64_t)qword_1007C2700);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v22 = a1;
      v23[0] = v9;
      *(_DWORD *)v8 = 136315138;
      swift_errorRetain(a1);
      v10 = sub_100008384(&qword_1007B5A60);
      v11 = String.init<A>(describing:)(&v22, v10);
      v13 = (const char *)v12;
      v22 = sub_100228BD8(v11, v12, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v8 + 4);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to start scanning for AirDrop: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v3, v23, 0, 0);
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v3, v18);
    swift_errorRelease(a1);
    if (Strong)
    {
      v20 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner];
      *(_QWORD *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner] = 0;

    }
  }
  else
  {
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100221DF8(v14, (uint64_t)qword_1007C2700);
    oslog = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v16, "Started scanning for AirDrop", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
}

void sub_1004A4240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *Strong;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner;
    v8 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner];
    if (v8)
    {
      swift_beginAccess(&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers], v20, 33, 0);
      v9 = v8;
      v10 = sub_10026B15C(a2);
      v12 = v11;
      swift_endAccess(v20);
      sub_1002845F4(v10, v12);
      objc_msgSend(v9, "invalidate");
      v13 = *(void **)&v6[v7];
      *(_QWORD *)&v6[v7] = 0;

      v14 = String._bridgeToObjectiveC()();
      v15 = getpid();
      sub_100045388((uint64_t)CFSTR("BluetoothScanning"), (uint64_t)CFSTR("Stop"), (uint64_t)v14, v15);

      goto LABEL_9;
    }

  }
  if (qword_1007B41A0 != -1)
    swift_once(&qword_1007B41A0, sub_1004A22D8);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100221DF8(v16, (uint64_t)qword_1007C2700);
  v14 = Logger.logObject.getter(v17);
  v18 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Attempting to stop scanning but not scanning", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }
LABEL_9:

}

void sub_1004A44D8(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t Strong;
  char *v14;
  uint64_t v15;
  const char **v16;
  char isUniquelyReferenced_nonNull_native;
  const char *v18;
  __n128 v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _BYTE v31[24];
  char v32[24];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v32, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v12);
  if (Strong)
  {
    v14 = (char *)Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    v15 = swift_allocObject(&unk_10072AE60, 32, 7);
    *(_QWORD *)(v15 + 16) = a3;
    *(_QWORD *)(v15 + 24) = a4;
    v16 = (const char **)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers];
    swift_beginAccess(&v14[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers], v31, 33, 0);
    swift_retain(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
    v30 = *v16;
    *v16 = (const char *)0x8000000000000000;
    sub_10046D44C((uint64_t)sub_1004A60BC, v15, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
    v18 = *v16;
    *v16 = v30;
    v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v19);
    swift_endAccess(v31);
    v20 = *(void **)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner];
    if (!v20)
    {

      return;
    }
    v21 = objc_msgSend(v20, "discoveredDevices");
    v22 = sub_100221EDC(0, &qword_1007B94D8, CBDevice_ptr);
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v28 = v23;
      else
        v28 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain((const char *)v23);
      v24 = _CocoaArrayWrapper.endIndex.getter(v28);
      if (v24)
        goto LABEL_5;
    }
    else
    {
      v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain((const char *)v23);
      if (v24)
      {
LABEL_5:
        if (v24 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v24; ++i)
        {
          if ((v23 & 0xC000000000000001) != 0)
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
          else
            v26 = *(id *)(v23 + 8 * i + 32);
          v27 = v26;
          a3(v26, 1);

        }
      }
    }

    swift_bridgeObjectRelease_n(v23, 2);
  }
}

void sub_1004A4740(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    swift_beginAccess(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers, v10, 33, 0);
    v7 = sub_10026B15C(a2);
    v9 = v8;
    swift_endAccess(v10);
    sub_1002845F4(v7, v9);

  }
}

uint64_t type metadata accessor for SDAirDropBLEController()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary22SDAirDropBLEController);
}

uint64_t sub_1004A4888()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A48B0()
{
  return sub_10026EB58((uint64_t (*)(_QWORD, uint64_t))sub_1004A4240);
}

uint64_t sub_1004A48BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004A48CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1004A48D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _BYTE v20[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong
    && (v4 = (void *)Strong,
        v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner),
        v6 = v5,
        v4,
        v5))
  {
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100221DF8(v7, (uint64_t)qword_1007C2700);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting aggressive scan for Ask to AirDrop", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    -[NSObject setBleScanRate:](v6, "setBleScanRate:", 50);
    -[NSObject setDiscoveryFlags:](v6, "setDiscoveryFlags:", 0x240000000);
    -[NSObject setUseCase:](v6, "setUseCase:", 131093);
    swift_beginAccess(v1, &v19, 0, 0);
    v13 = swift_unknownObjectWeakLoadStrong(v1, v12);
    if (v13)
    {
      v14 = (void *)v13;
      sub_1004A4B14();

    }
  }
  else
  {
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100221DF8(v15, (uint64_t)qword_1007C2700);
    v6 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v17, "Attempting to scan aggressively for Ask to AirDrop but not scanning yet", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
  }

}

uint64_t sub_1004A4B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(_QWORD *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v1 = v0;
  v48 = type metadata accessor for DispatchTimeInterval(0);
  v45 = *(_QWORD *)(v48 - 8);
  v2 = __chkstk_darwin(v48);
  v47 = (uint64_t *)((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v37 - v4);
  v46 = type metadata accessor for DispatchTime(0);
  v43 = *(_QWORD *)(v46 - 8);
  v6 = __chkstk_darwin(v46);
  v42 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v44 = (char *)&v37 - v8;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer;
  v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer);
  if (v20)
  {
    swift_getObjectType(v20);
    swift_unknownObjectRetain(v20);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v20);
  }
  sub_100221EDC(0, (unint64_t *)&qword_1007B7390, OS_dispatch_source_ptr);
  static OS_dispatch_source.TimerFlags.strict.getter();
  v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v18, *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue));
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v22 = *(_QWORD *)(v1 + v19);
  *(_QWORD *)(v1 + v19) = v21;
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v22);
  ObjectType = swift_getObjectType(v21);
  v24 = swift_allocObject(&unk_10072AC80, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v1);
  aBlock[4] = sub_1004A6020;
  v50 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10072B030;
  v25 = _Block_copy(aBlock);
  swift_retain(v24);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_10048671C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v14, v11, v25, ObjectType);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
  v26 = v50;
  swift_release(v24);
  v27 = swift_release(v26);
  v28 = v42;
  static DispatchTime.now()(v27);
  *v5 = 10;
  v29 = v45;
  v30 = v48;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v45 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v48);
  v31 = v44;
  + infix(_:_:)(v28, v5);
  v32 = *(void (**)(_QWORD *, uint64_t))(v29 + 8);
  v32(v5, v30);
  v33 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34 = v46;
  v33(v28, v46);
  sub_10027D6F8((uint64_t)v5);
  v35 = v47;
  sub_10027D73C(v47);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v31, v5, v35, ObjectType);
  v32(v35, v30);
  v32(v5, v30);
  v33(v31, v34);
  OS_dispatch_source.activate()();
  return swift_unknownObjectRelease(v21);
}

void sub_1004A4F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  _BYTE v22[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong
    || (v4 = (void *)Strong,
        v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner),
        v6 = v5,
        v4,
        !v5))
  {
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100221DF8(v17, (uint64_t)qword_1007C2700);
    v6 = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v19, "Attempting to stop aggressive scan for Ask to AirDrop but not scanning yet", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    goto LABEL_15;
  }
  if (qword_1007B41A0 != -1)
    swift_once(&qword_1007B41A0, sub_1004A22D8);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100221DF8(v7, (uint64_t)qword_1007C2700);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Stopping aggressive scan for Ask to AirDrop", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  -[NSObject setBleScanRate:](v6, "setBleScanRate:", 0);
  -[NSObject setDiscoveryFlags:](v6, "setDiscoveryFlags:", 0x40000000);
  -[NSObject setUseCase:](v6, "setUseCase:", 131090);
  swift_beginAccess(v1, &v21, 0, 0);
  v13 = swift_unknownObjectWeakLoadStrong(v1, v12);
  if (!v13)
  {
LABEL_15:

    return;
  }
  v14 = (char *)v13;
  v15 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer;
  v16 = *(_QWORD *)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer);
  if (v16)
  {
    swift_getObjectType(*(_QWORD *)(v13
                                  + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer));
    swift_unknownObjectRetain(v16);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v16);
    v16 = *(_QWORD *)&v14[v15];
  }
  *(_QWORD *)&v14[v15] = 0;

  swift_unknownObjectRelease(v16);
}

void sub_1004A5190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *Strong;
  void *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v25, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong)
    goto LABEL_5;
  v4 = Strong;
  v5 = *(char **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser];
  if (!v5
    || (v6 = (uint64_t *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration],
        v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8],
        v7 >> 60 == 15))
  {

LABEL_5:
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100221DF8(v8, (uint64_t)qword_1007C2700);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempting to start Ask to AirDrop without already advertising", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    return;
  }
  v13 = *v6;
  v14 = v6[2];
  v15 = v5;
  sub_100244404(v13, v7);
  if (qword_1007B41A0 != -1)
    swift_once(&qword_1007B41A0, sub_1004A22D8);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100221DF8(v16, (uint64_t)qword_1007C2700);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Adding Ask to AirDrop data to advertisement", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = sub_10022E4A8(v13, v7);
  v23 = SFDeviceClassCodeGet(v21, v22);
  v24 = v14 & 0xFFFFFFFFFFFF0000 | (SFDeviceModelCodeGet() & 0x1F | (32 * v23)) | 0x1800000;
  sub_10022E4A8(v13, v7);
  sub_1004887FC(v13, v7, v24);
  sub_100225AB4(v13, v7);
  sub_100486848(50);
  sub_100486864(131093);

  sub_100225AA0(v13, v7);
  sub_100225AB4(v13, v7);
}

void sub_1004A5434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _BYTE v21[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong)
    goto LABEL_5;
  v4 = (void *)Strong;
  v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser);
  v6 = v5;

  if (!v5)
    goto LABEL_5;
  v7 = (uint64_t *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
  v8 = *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
  if (v8 >> 60 == 15)
  {

LABEL_5:
    if (qword_1007B41A0 != -1)
      swift_once(&qword_1007B41A0, sub_1004A22D8);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100221DF8(v9, (uint64_t)qword_1007C2700);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Attempting to stop Ask to AirDrop without already advertising", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return;
  }
  v14 = *v7;
  v15 = v7[2];
  sub_10022E4A8(*v7, *(_QWORD *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8]);
  if (qword_1007B41A0 != -1)
    swift_once(&qword_1007B41A0, sub_1004A22D8);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100221DF8(v16, (uint64_t)qword_1007C2700);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Removing Ask to AirDrop data from advertisement", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  sub_100244404(v14, v8);
  sub_10022E4A8(v14, v8);
  sub_1004887FC(v14, v8, (v15 & 0x1800000 ^ 0xFFFFFFFFFFFF0000) & v15);
  sub_100225AB4(v14, v8);
  sub_100486848(0);
  sub_100486864(131090);

  sub_100225AA0(v14, v8);
  sub_100225AB4(v14, v8);
}

void sub_1004A56C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  _BYTE v29[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    v5 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser;
    if (*(_QWORD *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser))
    {
      if (qword_1007B41A0 != -1)
        swift_once(&qword_1007B41A0, sub_1004A22D8);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_100221DF8(v6, (uint64_t)qword_1007C2700);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Attempting to start advertising temp auth tag but already advertising", v10, 2u);
        swift_slowDealloc(v10, -1, -1);

        return;
      }

    }
    else
    {
      if (qword_1007B41A0 != -1)
        swift_once(&qword_1007B41A0, sub_1004A22D8);
      v11 = type metadata accessor for Logger(0);
      v12 = sub_100221DF8(v11, (uint64_t)qword_1007C2700);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting to advertise temp auth tag", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
      }

      v16 = *(void **)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue];
      v17 = objc_allocWithZone((Class)type metadata accessor for SDBLEAdvertiser());
      v18 = sub_100486AE4(v16, 0, 0xF000000000000000, 0);
      v19 = *(void **)&v4[v5];
      *(_QWORD *)&v4[v5] = v18;

      v20 = *(void **)&v4[v5];
      if (v20)
      {
        v21 = v20;
        sub_100486864(131094);

        v22 = *(void **)&v4[v5];
        if (v22)
        {
          v23 = v22;
          sub_100486848(30);

          v24 = *(void **)&v4[v5];
          if (v24)
          {
            v25 = v24;
            sub_100486C60(0, 0);

            v26 = *(void **)&v4[v5];
            if (v26)
            {
              v27 = swift_allocObject(&unk_10072AC80, 24, 7);
              swift_unknownObjectWeakInit(v27 + 16, v4);
              v28 = v26;
              swift_retain(v27);
              sub_100487B8C((void (*)(uint64_t))sub_1004A6000, v27, 15.0);

              swift_release_n(v27, 2);
              return;
            }
          }
        }
      }
    }

  }
}

void sub_1004A5984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *Strong;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser];
    if (v5)
    {
      v6 = qword_1007B41A0;
      v7 = v5;
      if (v6 != -1)
        swift_once(&qword_1007B41A0, sub_1004A22D8);
      v8 = type metadata accessor for Logger(0);
      v9 = sub_100221DF8(v8, (uint64_t)qword_1007C2700);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stop advertising temp auth tag", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

      v13 = swift_allocObject(&unk_10072AC80, 24, 7);
      swift_unknownObjectWeakInit(v13 + 16, v4);
      swift_retain(v13);
      sub_100487B8C((void (*)(uint64_t))sub_1004A6000, v13, 0.0);

      swift_release_n(v13, 2);
    }
    else
    {

    }
  }
}

void sub_1004A5B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *Strong;
  void *v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser] = 0;

  }
}

void sub_1004A5B5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t Strong;
  char *v8;
  void *v9;
  id v10;
  _BYTE v12[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v6);
  if (Strong)
  {
    v8 = (char *)Strong;
    v9 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
    *v5 = v9;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    v10 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)(v5);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
    if ((v9 & 1) != 0)
    {
      if (*(_QWORD *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer])
        sub_1004A1C00((uint64_t)sub_1004A5F6C, (uint64_t)&unk_10072AF68);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1004A5C6C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A5C90()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1004A5CAC()
{
  return sub_1004A5DE8((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1004A3384);
}

uint64_t sub_1004A5CB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004A5CDC(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

void sub_1004A5D04(uint64_t a1)
{
  uint64_t v1;

  sub_1004A3E00(a1, v1, 1);
}

void sub_1004A5D20(uint64_t a1)
{
  uint64_t v1;

  sub_1004A3E00(a1, v1, 0);
}

void sub_1004A5D3C(uint64_t a1)
{
  uint64_t v1;

  sub_1004A3E6C(a1, v1);
}

uint64_t sub_1004A5D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1004A5DDC()
{
  return sub_1004A5DE8((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1004A44D8);
}

uint64_t sub_1004A5DE8(uint64_t (*a1)(_QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *v4, v4[1]);
}

void sub_1004A5E44()
{
  uint64_t v0;

  sub_1004A26A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1004A5E4C()
{
  uint64_t v0;

  sub_1004A2BA4(v0);
}

uint64_t sub_1004A5E58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C2784);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1004A2C18(a1, v4, v5, v6);
}

uint64_t sub_1004A5EC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1004A5EF4()
{
  uint64_t v0;

  sub_1004A2EFC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1004A5F00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C279C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_1004A30A0(a1, v4, v5, v6);
}

void sub_1004A5F6C()
{
  uint64_t v0;

  sub_1004A4F10(v0);
}

uint64_t sub_1004A5F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004A5FEC()
{
  return sub_10026EB58((uint64_t (*)(_QWORD, uint64_t))sub_1004A4740);
}

void sub_1004A5FF8()
{
  uint64_t v0;

  sub_1004A56C0(v0);
}

void sub_1004A6000()
{
  uint64_t v0;

  sub_1004A5B00(v0);
}

void sub_1004A6018()
{
  uint64_t v0;

  sub_1004A48D4(v0);
}

void sub_1004A6020()
{
  uint64_t v0;

  sub_1004A5B5C(v0);
}

void sub_1004A6028()
{
  uint64_t v0;

  sub_1004A5984(v0);
}

void sub_1004A6030()
{
  uint64_t v0;

  sub_1004A5434(v0);
}

void sub_1004A6038()
{
  uint64_t v0;

  sub_1004A5190(v0);
}

id sub_1004A60C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1004A61A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C27A8);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C27A8);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004A6234(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384((uint64_t *)&unk_1007B5200);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.TransferType(0);
  v2[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[17] = v11;
  v2[18] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004A6360, static AirDropActor.shared, 0);
}

uint64_t sub_1004A6360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BOOL8 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  NSObject *log;
  uint64_t *v59;
  uint64_t v60;
  os_log_type_t type;
  uint64_t v62;
  uint64_t v63;

  v2 = *(_QWORD *)(v1 + 136);
  v3 = *(_QWORD *)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 128);
  v5 = SFAirDropReceive.AskRequest.type.getter(a1);
  v6 = SFAirDrop.TransferType.isLinks.getter(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  if ((v6 & 1) == 0)
  {
LABEL_24:
    v26 = 0;
    goto LABEL_31;
  }
  v62 = v1 + 24;
  v8 = *(_QWORD *)(v1 + 104);
  v9 = SFAirDropReceive.AskRequest.urlItems.getter(v7);
  v10 = v9;
  v11 = 0;
  v12 = v9 + 56;
  v13 = -1;
  v14 = -1 << *(_BYTE *)(v9 + 32);
  if (-v14 < 64)
    v13 = ~(-1 << -(char)v14);
  v15 = v13 & *(_QWORD *)(v9 + 56);
  v16 = (unint64_t)(63 - v14) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v11 << 6);
      goto LABEL_21;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v19 >= v16)
      goto LABEL_25;
    v20 = *(_QWORD *)(v12 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v16)
        goto LABEL_25;
      v20 = *(_QWORD *)(v12 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v16)
          goto LABEL_25;
        v20 = *(_QWORD *)(v12 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_21:
    v22 = *(_QWORD *)(v1 + 120);
    v23 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v22, *(_QWORD *)(v10 + 48) + *(_QWORD *)(v8 + 72) * v18, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v22, 1, v23) == 1)
      goto LABEL_26;
    v3 = *(_QWORD *)(v1 + 112);
    v24 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 32))(v3, *(_QWORD *)(v1 + 120), v24);
    v25 = sub_1004A7054();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v24);
    if ((v25 & 1) == 0)
    {
      swift_release(v10);
      goto LABEL_24;
    }
  }
  v21 = v19 + 3;
  if (v21 >= v16)
  {
LABEL_25:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v8 + 56))(*(_QWORD *)(v1 + 120), 1, 1, *(_QWORD *)(v1 + 96));
LABEL_26:
    swift_release(v10);
    sub_100221EDC(0, (unint64_t *)&qword_1007BD6C0, LSBundleRecord_ptr);
    v27 = sub_1004A60C0(0xD00000000000001CLL, 0x800000010061D420, 1);
    v50 = *(_QWORD *)(v1 + 40);
    v51 = *(void **)(v50 + 16);
    *(_QWORD *)(v50 + 16) = v27;

    goto LABEL_30;
  }
  v20 = *(_QWORD *)(v12 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v16)
      goto LABEL_25;
    v20 = *(_QWORD *)(v12 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_33:
  __break(1u);
  swift_once(&qword_1007B41B0, sub_1004A61A4);
  v28 = *(_QWORD *)(v1 + 80);
  v29 = *(_QWORD *)(v1 + 88);
  v30 = *(_QWORD *)(v1 + 72);
  v31 = *(_QWORD *)(v1 + 32);
  v32 = type metadata accessor for Logger(0);
  sub_100221DF8(v32, (uint64_t)qword_1007C27A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v29, v31, v30);
  swift_errorRetain(v3);
  v33 = swift_errorRetain(v3);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v37 = *(_QWORD *)(v1 + 80);
  v38 = *(_QWORD *)(v1 + 88);
  v39 = *(_QWORD *)(v1 + 72);
  if (v36)
  {
    type = v35;
    v40 = *(_QWORD *)(v1 + 64);
    v57 = *(_QWORD *)(v1 + 56);
    v41 = *(_QWORD *)(v1 + 48);
    v42 = swift_slowAlloc(22, -1);
    v59 = (uint64_t *)swift_slowAlloc(8, -1);
    v60 = swift_slowAlloc(32, -1);
    v63 = v60;
    *(_DWORD *)v42 = 136315394;
    log = v34;
    SFAirDropReceive.AskRequest.id.getter(v60);
    v43 = sub_1002232C0();
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v41, v43);
    v46 = v45;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v40, v41);
    *(_QWORD *)(v1 + 16) = sub_100228BD8(v44, (unint64_t)v46, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v62, v42 + 4);
    v47 = swift_bridgeObjectRelease(v46);
    (*(void (**)(uint64_t, uint64_t, __n128))(v37 + 8))(v38, v39, v47);
    *(_WORD *)(v42 + 12) = 2112;
    swift_errorRetain(v3);
    v48 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v1 + 24) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v1 + 32, v42 + 14);
    *v59 = v48;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to get ShareBear for ask request %s: %@", (uint8_t *)v42, 0x16u);
    v49 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v59, 1, v49);
    swift_slowDealloc(v59, -1, -1);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
LABEL_30:
  v26 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 16) != 0;
LABEL_31:
  v53 = *(_QWORD *)(v1 + 112);
  v52 = *(_QWORD *)(v1 + 120);
  v54 = *(_QWORD *)(v1 + 88);
  v55 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 144));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(_BOOL8))(v1 + 8))(v26);
}

uint64_t type metadata accessor for SDAirDropContentHandlerSharediCloudDocumentsLinks()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary49SDAirDropContentHandlerSharediCloudDocumentsLinks);
}

uint64_t sub_1004A68FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SDAirDropContentHandlerSharediCloudDocumentsLinks();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1004A6930(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007C27EC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10022320C;
  return sub_1004A6234(a1);
}

void sub_1004A6984(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  NSURL *v16;
  void *v17;
  void *v18;
  id object;
  uint64_t v20;
  const char *v21;
  const char *v22;
  Swift::String v23;
  uint64_t countAndFlagsBits;
  const char *v25;
  __n128 v26;
  NSURL *v27;
  void *v28;
  void *v29;
  id v30;
  double v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t inited;
  double v39;
  Swift::String v40;
  Swift::String v41;
  double v42;
  Swift::String v43;
  Swift::String v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  double v75;
  char v76;
  __int128 v77;
  int v78;
  _BYTE v79[56];
  uint64_t v80;
  unint64_t v81;
  _BYTE v82[64];

  v78 = a2;
  v2 = sub_100008384((uint64_t *)&unk_1007B5200);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v77 - v7;
  v9 = SFAirDropReceive.AskRequest.urlItems.getter(v6);
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease((const char *)v9);
  v12 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v11);
  sub_100298F1C((uint64_t)v12, (uint64_t)v8);
  swift_bridgeObjectRelease(v12);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v17 = 0;
  if (v15(v8, 1, v13) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    v17 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
  }
  object = (id)SFSharediCloudDocumentsLinkToAppName(v17);

  if (object)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(object);
    v22 = v21;

    v23 = String.lowercased()();
    countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    countAndFlagsBits = 0;
  }
  v25 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v20);
  sub_100298F1C((uint64_t)v25, (uint64_t)v5);
  v26 = swift_bridgeObjectRelease(v25);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v15)(v5, 1, v13, v26) == 1)
  {
    v28 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v27);
    v28 = v29;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v13);
  }
  v30 = (id)SFSharediCloudDocumentsLinkToFileName(v28);

  if (v30)
  {
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v34 = v33;

  }
  else
  {
    v32 = 0;
    v34 = 0;
  }
  v35 = 0xD00000000000001CLL;
  if (v10 == 1)
  {
    if (object)
    {
      if (!v34)
      {
        swift_bridgeObjectRelease((const char *)object, v31);
        goto LABEL_31;
      }
      v36 = (char *)0x800000010061D400;
      if (countAndFlagsBits == 0x65746F6E79656BLL && object == (id)0xE700000000000000)
        goto LABEL_24;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 0x65746F6E79656BLL, 0xE700000000000000, 0) & 1) != 0)goto LABEL_24;
      v36 = (char *)0x800000010061D3E0;
      if (countAndFlagsBits == 0x737265626D756ELL && object == (id)0xE700000000000000)
        goto LABEL_24;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 0x737265626D756ELL, 0xE700000000000000, 0) & 1) != 0)goto LABEL_24;
      v36 = (char *)0x800000010061D3C0;
      if (countAndFlagsBits == 0x7365676170 && object == (id)0xE500000000000000)
      {
        v35 = 0xD00000000000001ALL;
LABEL_24:
        swift_bridgeObjectRelease((const char *)object);
        goto LABEL_25;
      }
      v76 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 0x7365676170, 0xE500000000000000, 0);
      *(_QWORD *)&v31 = swift_bridgeObjectRelease((const char *)object).n128_u64[0];
      if ((v76 & 1) != 0)
      {
        v35 = 0xD00000000000001ALL;
LABEL_25:
        v37 = sub_100008384(&qword_1007B7600);
        inited = swift_initStackObject(v37, v79);
        v77 = xmmword_1005CD2A0;
        *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
        *(_QWORD *)(inited + 32) = v35;
        *(_QWORD *)(inited + 40) = v36;
        *(_QWORD *)(inited + 48) = 1;
        v80 = 0x545F4E5245444F4DLL;
        v81 = 0xEF524546534E4152;
        *(_QWORD *)&v39 = swift_bridgeObjectRetain(v36).n128_u64[0];
        swift_bridgeObjectRetain((const char *)inited, v39);
        v40._countAndFlagsBits = 95;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        v41._countAndFlagsBits = v35;
        v41._object = v36;
        String.append(_:)(v41);
        *(_QWORD *)&v42 = swift_bridgeObjectRelease((const char *)inited).n128_u64[0];
        swift_bridgeObjectRelease(v36, v42);
        if ((v78 & 1) != 0)
        {
          v43._countAndFlagsBits = 0x4C4154495041435FLL;
          v43._object = (void *)0xEC00000044455A49;
          String.append(_:)(v43);
        }
        v44._countAndFlagsBits = 0x545845545FLL;
        v44._object = (void *)0xE500000000000000;
        String.append(_:)(v44);
        v45 = (const char *)v81;
        swift_setDeallocating(inited);
        v46 = *(_QWORD *)(inited + 16);
        v47 = sub_100008384(&qword_1007B7608);
        swift_arrayDestroy(inited + 32, v46, v47);
        v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
        v50 = (id)SFLocalizedStringForKey(v48, v49);

        if (v50)
        {
          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v53 = v52;

          v54 = sub_100008384((uint64_t *)&unk_1007B86C0);
          v55 = swift_allocObject(v54, 72, 7);
          *(_OWORD *)(v55 + 16) = v77;
          *(_QWORD *)(v55 + 56) = &type metadata for String;
          *(_QWORD *)(v55 + 64) = sub_100299AB0();
          *(_QWORD *)(v55 + 32) = v32;
          *(_QWORD *)(v55 + 40) = v34;
          v56 = v51;
LABEL_37:
          static String.localizedStringWithFormat(_:_:)(v56, v53, v55);
          *(_QWORD *)&v75 = swift_bridgeObjectRelease(v53).n128_u64[0];
          swift_bridgeObjectRelease((const char *)v55, v75);
          return;
        }
        goto LABEL_42;
      }
    }
  }
  else
  {
    *(_QWORD *)&v31 = swift_bridgeObjectRelease((const char *)object).n128_u64[0];
  }
  swift_bridgeObjectRelease(v34, v31);
LABEL_31:
  v57 = sub_100008384(&qword_1007B7600);
  v58 = swift_initStackObject(v57, v82);
  v77 = xmmword_1005CD2A0;
  *(_OWORD *)(v58 + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(v58 + 32) = 0xD00000000000001BLL;
  v59 = v58 + 32;
  *(_QWORD *)(v58 + 40) = 0x800000010061D3A0;
  *(_QWORD *)(v58 + 48) = v10;
  v80 = 0x545F4E5245444F4DLL;
  v81 = 0xEF524546534E4152;
  *(_QWORD *)&v60 = swift_bridgeObjectRetain((const char *)0x800000010061D3A0).n128_u64[0];
  swift_bridgeObjectRetain((const char *)v58, v60);
  v61._countAndFlagsBits = 95;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  v62._countAndFlagsBits = 0xD00000000000001BLL;
  v62._object = (void *)0x800000010061D3A0;
  String.append(_:)(v62);
  swift_bridgeObjectRelease((const char *)0x800000010061D3A0);
  if (v10 > 1)
  {
    v63._countAndFlagsBits = 0x4C4152554C505FLL;
    v63._object = (void *)0xE700000000000000;
    String.append(_:)(v63);
  }
  swift_bridgeObjectRelease((const char *)v58);
  if ((v78 & 1) != 0)
  {
    v64._countAndFlagsBits = 0x4C4154495041435FLL;
    v64._object = (void *)0xEC00000044455A49;
    String.append(_:)(v64);
  }
  v65._countAndFlagsBits = 0x545845545FLL;
  v65._object = (void *)0xE500000000000000;
  String.append(_:)(v65);
  v66 = (const char *)v81;
  swift_setDeallocating(v58);
  v67 = *(_QWORD *)(v58 + 16);
  v68 = sub_100008384(&qword_1007B7608);
  swift_arrayDestroy(v59, v67, v68);
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  v71 = (id)SFLocalizedStringForKey(v69, v70);

  if (v71)
  {
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v53 = v73;

    v74 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v55 = swift_allocObject(v74, 72, 7);
    *(_OWORD *)(v55 + 16) = v77;
    *(_QWORD *)(v55 + 56) = &type metadata for Int;
    *(_QWORD *)(v55 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v55 + 32) = v10;
    v56 = v72;
    goto LABEL_37;
  }
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_1004A7054()
{
  void *v0;
  NSURL *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  _BYTE v36[32];
  _QWORD v37[2];

  v0 = (void *)objc_opt_self(LSAppLink);
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v35 = 0;
  v4 = objc_msgSend(v0, "appLinksWithURL:limit:error:", v2, 0x7FFFFFFFFFFFFFFFLL, &v35);

  v5 = v35;
  if (v4)
  {
    v6 = sub_100221EDC(0, &qword_1007BA9D8, LSAppLink_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
    v8 = v5;

    v37[0] = 0xD00000000000001CLL;
    v37[1] = 0x800000010061D420;
    if ((unint64_t)v7 >> 62)
      goto LABEL_24;
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v9)
    {
      v10 = 4;
      while (1)
      {
        v12 = (v7 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7)
            : *(id *)(v7 + 8 * v10);
        v13 = v12;
        v14 = v10 - 3;
        if (__OFADD__(v10 - 4, 1))
          break;
        v15 = objc_msgSend(v12, "targetApplicationRecord");
        v16 = objc_msgSend(v15, "bundleIdentifier");

        if (v16)
        {
          v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v19 = v18;

          if (v17 == 0xD00000000000001CLL && v19 == (const char *)0x800000010061D420)
          {
            *(_QWORD *)&v31 = swift_bridgeObjectRelease((const char *)v7).n128_u64[0];
            swift_bridgeObjectRelease((const char *)0x800000010061D420, v31);

LABEL_22:
            v32 = 1;
            swift_arrayDestroy(v37, 1, &type metadata for String);
            return v32;
          }
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x800000010061D420, v17, v19, 0);
          swift_bridgeObjectRelease(v19);

          if ((v11 & 1) != 0)
          {
            swift_bridgeObjectRelease((const char *)v7);
            goto LABEL_22;
          }
        }
        else
        {

        }
        ++v10;
        if (v14 == v9)
          goto LABEL_28;
      }
      __break(1u);
LABEL_24:
      if (v7 < 0)
        v33 = v7;
      else
        v33 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain((const char *)v7);
      v9 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease((const char *)v7);
    }
LABEL_28:
    swift_bridgeObjectRelease((const char *)v7);
    swift_arrayDestroy(v37, 1, &type metadata for String);
  }
  else
  {
    v20 = v35;
    v21 = _convertNSErrorToError(_:)(v5);

    swift_willThrow(v22);
    if (qword_1007B41B0 != -1)
      swift_once(&qword_1007B41B0, sub_1004A61A4);
    v23 = type metadata accessor for Logger(0);
    sub_100221DF8(v23, (uint64_t)qword_1007C27A8);
    swift_errorRetain(v21);
    v24 = swift_errorRetain(v21);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      swift_errorRetain(v21);
      v29 = (void *)_swift_stdlib_bridgeErrorToNSError(v21);
      v35 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v27 + 4);
      *v28 = v29;
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to get app links with error %@", v27, 0xCu);
      v30 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(v21);
    }
    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      swift_errorRelease(v21);

    }
  }
  return 0;
}

void sub_1004A74A0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1004A74FC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A75B0 + 4 * byte_1005DA986[a2]))(0x6C61636F4C736469);
}

uint64_t sub_1004A75B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C61636F4C736469 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C61636F4C736469, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_1004A76B4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A7720(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A7780 + 4 * byte_1005DA990[a2]))(0x444955557462);
}

uint64_t sub_1004A7780(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x444955557462 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x444955557462, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_1004A7828(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1004A789C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A7914 + 4 * byte_1005DA99A[a2]))(0xD000000000000010);
}

uint64_t sub_1004A7914(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100611310;
  if (a1 == 0xD000000000000010 && v1 == 0x8000000100611310)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000010, 0x8000000100611310, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1004A79D0(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1004A7A1C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_1004A7ACC + 4 * byte_1005DA9A9[a2]))(v2 + 8);
}

uint64_t sub_1004A7ACC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x80000001006113D0;
  if (a1 == v1 + 8 && v2 == 0x80000001006113D0)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 8, 0x80000001006113D0, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_1004A7BB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A7C0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A7CA8 + 4 * byte_1005DA9B8[a2]))(0x6D614E6E65766947);
}

uint64_t sub_1004A7CA8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D614E6E65766947 && v1 == 0xE900000000000065)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D614E6E65766947, 0xE900000000000065, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000065);
  return v2 & 1;
}

void sub_1004A7D98(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A7DF4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A7EC4 + 4 * byte_1005DA9C5[a2]))(0x7479426C61746F54);
}

uint64_t sub_1004A7EC4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7479426C61746F54 && v1 == 0xEA00000000007365)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7479426C61746F54, 0xEA00000000007365, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007365);
  return v2 & 1;
}

uint64_t sub_1004A7FF0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x726F727245;
  else
    v3 = 0x726566736E617254;
  if (v2)
    v4 = 0xEA00000000004449;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x726F727245;
  else
    v5 = 0x726566736E617254;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xEA00000000004449;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1004A8094(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1004A80E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A817C + 4 * byte_1005DA9D3[a2]))(0xD000000000000011);
}

uint64_t sub_1004A817C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100611410;
  if (a1 == 0xD000000000000011 && v1 == 0x8000000100611410)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000011, 0x8000000100611410, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1004A8258(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A82A8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A836C + 4 * byte_1005DA9E1[a2]))(0x65707954656C6946);
}

uint64_t sub_1004A836C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x65707954656C6946 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65707954656C6946, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1004A847C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A84D8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1004A8548 + 4 * byte_1005DA9ED[a2]))(0x6572676F72506E69);
}

uint64_t sub_1004A8548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = v1 + 3854;
  if (a1 == 0x6572676F72506E69 && v2 == v3)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x6572676F72506E69, v3, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_1004A8604(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1004A8660()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x8000000100611310);
  swift_bridgeObjectRelease(0x8000000100611310);
  return Hasher._finalize()();
}

void sub_1004A8708(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1004A875C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6D614E6E65766947, 0xE900000000000065);
  swift_bridgeObjectRelease(0xE900000000000065);
  return Hasher._finalize()();
}

void sub_1004A8808(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_1004A8864()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C61636F4C736469, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_1004A8924(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A8970(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000010, 0x8000000100611310);
  return swift_bridgeObjectRelease(0x8000000100611310);
}

void sub_1004A8A04(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1004A8A4C(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 8, 0x80000001006113D0);
  return swift_bridgeObjectRelease(0x80000001006113D0);
}

void sub_1004A8AF0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A8B34(uint64_t a1)
{
  String.hash(into:)(a1, 0x6D614E6E65766947, 0xE900000000000065);
  return swift_bridgeObjectRelease(0xE900000000000065);
}

void sub_1004A8BCC(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1004A8C14(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000011, 0x8000000100611410);
  return swift_bridgeObjectRelease(0x8000000100611410);
}

void sub_1004A8CA4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1004A8CE4(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x65707954656C6946, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1004A8DA0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1004A8DF8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C61636F4C736469, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_1004A8EB8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1004A8F10()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x8000000100611310);
  swift_bridgeObjectRelease(0x8000000100611310);
  return Hasher._finalize()();
}

void sub_1004A8FB8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1004A9008()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6D614E6E65766947, 0xE900000000000065);
  swift_bridgeObjectRelease(0xE900000000000065);
  return Hasher._finalize()();
}

void sub_1004A90B4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1004A9104()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7479426C61746F54, 0xEA00000000007365);
  swift_bridgeObjectRelease(0xEA00000000007365);
  return Hasher._finalize()();
}

void sub_1004A91E4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1004A923C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000011, 0x8000000100611410);
  swift_bridgeObjectRelease(0x8000000100611410);
  return Hasher._finalize()();
}

void sub_1004A92E4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1004A9330()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x65707954656C6946, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

uint64_t sub_1004A9400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C28B0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C28B0);
  if (qword_1007B3EC0 != -1)
    swift_once(&qword_1007B3EC0, sub_1002EA004);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D8310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004A9490(char *a1)
{
  sub_1004A74A0(*a1);
}

void sub_1004A949C()
{
  char *v0;

  sub_1004A8808(*v0);
}

void sub_1004A94A4()
{
  __asm { BR              X10 }
}

uint64_t sub_1004A94EC(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C61636F4C736469, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_1004A9598(uint64_t a1)
{
  char *v1;

  sub_1004A8DA0(a1, *v1);
}

unint64_t sub_1004A95A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004B3BAC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004A95CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1004A9608 + 4 * byte_1005DAA54[*v0]))();
}

void sub_1004A9608(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61636F4C736469;
  a1[1] = 0xE800000000000000;
}

void sub_1004A9624(_QWORD *a1@<X8>)
{
  *a1 = 0x7265746E49736469;
  a1[1] = 0xEB0000000074656ELL;
}

void sub_1004A9648(_QWORD *a1@<X8>)
{
  *a1 = 0x4274726F70706172;
  a1[1] = 0xE900000000000054;
}

void sub_1004A9668(_QWORD *a1@<X8>)
{
  *a1 = 0x4174726F70706172;
  a1[1] = 0xEB000000004C4457;
}

void sub_1004A968C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "coreBluetooth");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1004A96B4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;

  v6 = v5;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100221DF8(v11, (uint64_t)qword_1007C28B0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "TransportManager: handling", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v35 = a3;
  if (os_log_type_enabled(v17, v18))
  {
    v33 = v6;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v37 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = sub_1003FDF2C(a3);
    v22 = a4;
    v24 = (const char *)v23;
    v36 = sub_100228BD8(v21, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 4);
    v25 = v24;
    a4 = v22;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "TransportManager: handling message of type: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v26 = v19;
    v6 = v33;
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = v6 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate;
  result = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate, v28);
  if (result)
  {
    v30 = result;
    v31 = *(_QWORD *)(v27 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8))(a1, a2, v35, a4, a5, ObjectType, v31);
    return swift_unknownObjectRelease(v30);
  }
  return result;
}

uint64_t sub_1004A9920(int a1, uint64_t a2, const char *a3, uint64_t a4, unint64_t a5, int a6)
{
  void *v6;
  void *v7;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v7 = v6;
  v33 = a6;
  v32 = a2;
  v31 = a1;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  __chkstk_darwin(v14);
  v16 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100221DF8(v17, (uint64_t)qword_1007C28B0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "TransportManager: handling error", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = swift_allocObject(&unk_10072B4B0, 65, 7);
  *(_QWORD *)(v22 + 16) = v7;
  *(_DWORD *)(v22 + 24) = v31;
  *(_QWORD *)(v22 + 32) = v32;
  *(_QWORD *)(v22 + 40) = a3;
  *(_QWORD *)(v22 + 48) = a4;
  *(_QWORD *)(v22 + 56) = a5;
  *(_BYTE *)(v22 + 64) = v33;
  aBlock[4] = sub_1004B3A54;
  v39 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025BBB4;
  aBlock[3] = &unk_10072B4C8;
  v23 = _Block_copy(aBlock);
  v24 = v7;
  swift_bridgeObjectRetain(a3);
  v25 = sub_10022E4A8(a4, a5);
  static DispatchQoS.unspecified.getter(v25);
  v37 = _swiftEmptyArrayStorage;
  v26 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100008384((uint64_t *)&unk_1007B6410);
  v28 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v27, v28, v11, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v23);
  _Block_release(v23);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v13, v11);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v16, v35);
  return swift_release(v39);
}

uint64_t sub_1004A9BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v13 = a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate;
  result = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate, a2);
  if (result)
  {
    v15 = result;
    v16 = *(_QWORD *)(v13 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(a2, a3, a4, a5, a6, a7, ObjectType, v16);
    return swift_unknownObjectRelease(v15);
  }
  return result;
}

uint64_t sub_1004A9CA0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport]);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(ObjectType, v9);
  if ((result & 1) != 0)
  {
    v12 = *(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport + 8];
    v13 = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport]);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
    if ((result & 1) != 0)
    {
      v14 = *(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport + 8];
      v15 = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport]);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v15, v14);
      if ((result & 1) != 0)
      {
        v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT + 8];
        v17 = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT]);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v17, v16);
        if ((result & 1) != 0)
        {
          v18 = *(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL
                             + 8];
          v19 = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL]);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v19, v18);
          if ((result & 1) != 0)
          {
            v20 = *(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport
                               + 8];
            v21 = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport]);
            result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v21, v20);
            if ((result & 1) != 0)
            {
              v22 = swift_allocObject(&unk_10072B460, 24, 7);
              *(_QWORD *)(v22 + 16) = v0;
              aBlock[4] = sub_1004B3A18;
              v30 = v22;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10025BBB4;
              aBlock[3] = &unk_10072B478;
              v23 = _Block_copy(aBlock);
              static DispatchQoS.unspecified.getter(v0);
              v28 = _swiftEmptyArrayStorage;
              v24 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v25 = sub_100008384((uint64_t *)&unk_1007B6410);
              v26 = sub_100273050();
              dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v25, v26, v1, v24);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v23);
              _Block_release(v23);
              (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              return swift_release(v30);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1004A9F60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v2 = a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate;
  result = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate, a2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_1004A9FB8(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);

  v2 = (_QWORD *)(v1 + *off_10072B7D8[a1]);
  v4 = *v2;
  v3 = v2[1];
  ObjectType = swift_getObjectType(*v2);
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain(v4);
  v6(ObjectType, v3);
  return swift_unknownObjectRelease(v4);
}

uint64_t type metadata accessor for SDAuthenticationTransportManager()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary32SDAuthenticationTransportManager);
}

uint64_t sub_1004AA120(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 40) = 0;
  swift_unknownObjectWeakInit(v1 + 32, 0);
  *(_QWORD *)(v1 + 16) = a1;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 48) = sub_1004AA218;
  *(_QWORD *)(v1 + 56) = 0;
  v3 = (void *)objc_opt_self(NSNotificationCenter);
  v4 = a1;
  v5 = objc_msgSend(v3, "defaultCenter");
  v6 = qword_1007B41C0;
  swift_retain(v1);
  if (v6 != -1)
    swift_once(&qword_1007B41C0, sub_1004AB160);
  objc_msgSend(v5, "addObserver:selector:name:object:", v1, "handleBLEMessage:", qword_1007D84C8, 0);

  swift_release(v1);
  return v1;
}

id sub_1004AA218(void *a1)
{
  return sub_1004AE044(a1);
}

void sub_1004AA25C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v2 = type metadata accessor for Logger(0);
    sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v16 = a1;
      v17 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_errorRetain(a1);
      v7 = sub_100008384((uint64_t *)&unk_1007C31A0);
      v8 = String.init<A>(describing:)(&v16, v7);
      v10 = (const char *)v9;
      v16 = sub_100228BD8(v8, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error sending data: %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100221DF8(v11, (uint64_t)qword_1007C28B0);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Sent data", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
  }

}

void sub_1004AA4E0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  void **v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  int v40;
  id v41;
  unint64_t v42;
  Class isa;
  id v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(void *, char *);
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const void *v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void **aBlock;
  unint64_t v78;
  uint64_t (*v79)(uint64_t);
  void *v80;
  void (*v81)();
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v0 - 8);
  v75 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B7280);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v65 - v10;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = Notification.userInfo.getter(v14);
  if (!v17)
  {
    v85 = 0u;
    v86 = 0u;
LABEL_13:
    v28 = (uint64_t *)&unk_1007B6890;
    v29 = (char *)&v85;
LABEL_23:
    sub_10000D0F0((uint64_t)v29, v28);
    goto LABEL_24;
  }
  v18 = v17;
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("SDNearbyAgentNotificationInfoKeyBLEData"));
  v84 = v19;
  AnyHashable.init<A>(_:)(&aBlock, &v83, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v18 + 16) && (v20 = sub_10045C1D0((uint64_t)&aBlock), (v21 & 1) != 0))
  {
    sub_10022E77C(*(_QWORD *)(v18 + 56) + 32 * v20, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }
  swift_bridgeObjectRelease((const char *)v18);
  sub_10022E6C0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v86 + 1))
    goto LABEL_13;
  v22 = swift_dynamicCast(&aBlock, &v85, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
  if ((v22 & 1) == 0)
    goto LABEL_24;
  v71 = v78;
  v72 = aBlock;
  v23 = Notification.userInfo.getter(v22);
  if (!v23)
  {
    v85 = 0u;
    v86 = 0u;
LABEL_20:
    sub_10000D0F0((uint64_t)&v85, (uint64_t *)&unk_1007B6890);
    goto LABEL_21;
  }
  v24 = v23;
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("SDNearbyAgentNotificationInfoKeyBLEDevice"));
  v84 = v25;
  AnyHashable.init<A>(_:)(&aBlock, &v83, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v24 + 16) && (v26 = sub_10045C1D0((uint64_t)&aBlock), (v27 & 1) != 0))
  {
    sub_10022E77C(*(_QWORD *)(v24 + 56) + 32 * v26, (uint64_t)&v85);
  }
  else
  {
    v85 = 0u;
    v86 = 0u;
  }
  swift_bridgeObjectRelease((const char *)v24);
  sub_10022E6C0((uint64_t)&aBlock);
  if (!*((_QWORD *)&v86 + 1))
    goto LABEL_20;
  v30 = sub_100221EDC(0, (unint64_t *)&unk_1007C3210, SFBLEDevice_ptr);
  if ((swift_dynamicCast(&aBlock, &v85, (char *)&type metadata for Any + 8, v30, 6) & 1) == 0)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    v34 = (uint64_t)v72;
LABEL_22:
    sub_100225AB4(v34, v71);
    v28 = &qword_1007B7280;
    v29 = v11;
    goto LABEL_23;
  }
  v31 = aBlock;
  v32 = objc_msgSend(aBlock, "identifier");

  if (v32)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v33 = 0;
  }
  else
  {
    v33 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, v33, 1, v12);
  sub_1004B4544((uint64_t)v9, (uint64_t)v11);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  v34 = (uint64_t)v72;
  if (v40 == 1)
    goto LABEL_22;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  v41 = objc_allocWithZone((Class)SDAutoUnlockSessionWrapper);
  v42 = v71;
  sub_10022E4A8(v34, v71);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(v34, v42);
  v44 = objc_msgSend(v41, "initWithData:", isa);
  v45 = v34;
  v46 = v44;

  if (v46)
  {
    if ((objc_msgSend(v46, "hasEncryptedPayload") & 1) != 0)
    {
      v47 = v76;
      v49 = (uint64_t (*)(void *, char *))v76[6];
      v48 = v76[7];
      swift_retain();
      v70 = v49(v46, v16);
      v51 = v50;
      swift_release(v48);
      if (v51 >> 60 != 15)
      {
        v54 = v51;
        v69 = v47[2];
        v55 = swift_allocObject(&unk_10072B770, 24, 7);
        swift_weakInit(v55 + 16, v47);
        v56 = (_QWORD *)swift_allocObject(&unk_10072B798, 48, 7);
        v57 = v70;
        v56[2] = v70;
        v56[3] = v54;
        v67 = v54;
        v56[4] = v46;
        v56[5] = v55;
        v68 = v55;
        v81 = sub_1004B45C0;
        v82 = v56;
        aBlock = _NSConcreteStackBlock;
        v78 = 1107296256;
        v79 = sub_10025BBB4;
        v80 = &unk_10072B7B0;
        v66 = _Block_copy(&aBlock);
        sub_100244404(v57, v54);
        v76 = v46;
        v58 = swift_retain();
        static DispatchQoS.unspecified.getter(v58);
        *(_QWORD *)&v85 = _swiftEmptyArrayStorage;
        v59 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v60 = sub_100008384((uint64_t *)&unk_1007B6410);
        v61 = sub_100273050();
        v62 = v75;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v60, v61, v75, v59);
        v63 = v66;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v66);
        _Block_release(v63);

        sub_100225AA0(v57, v67);
        sub_100225AB4((uint64_t)v72, v71);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v2, v62);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v5, v3);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
        v64 = v82;
        swift_release(v68);
        swift_release(v64);
        return;
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      v53 = v71;
      v52 = (uint64_t)v72;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      v52 = (uint64_t)v72;
      v53 = v42;
    }
    sub_100225AB4(v52, v53);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_100225AB4(v45, v42);
  }
LABEL_24:
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_100221DF8(v35, (uint64_t)qword_1007C28B0);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Received corrupt wrapper", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

}

void sub_1004AAC2C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t ObjectType;
  uint64_t v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];

  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v8 = type metadata accessor for Logger(0);
  sub_100221DF8(v8, (uint64_t)qword_1007C28B0);
  sub_10022E4A8(a1, a2);
  v9 = sub_10022E4A8(a1, a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v41[0] = v39;
    *(_DWORD *)v12 = 136315138;
    sub_10022E4A8(a1, a2);
    v13 = a3;
    v14 = Data.description.getter(a1, a2);
    v15 = a4;
    v17 = v16;
    sub_100225AB4(a1, a2);
    v18 = v14;
    a3 = v13;
    v40 = sub_100228BD8(v18, v17, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v12 + 4);
    v19 = (const char *)v17;
    a4 = v15;
    swift_bridgeObjectRelease(v19);
    sub_100225AB4(a1, a2);
    sub_100225AB4(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received data: %s", v12, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_100225AB4(a1, a2);
    sub_100225AB4(a1, a2);
  }

  v20 = objc_msgSend(a3, "messageType");
  v21 = sub_1003FE934(v20);
  if (v21 != 11)
  {
    v25 = v21;
    swift_beginAccess(a4 + 16, v41, 0, 0);
    Strong = swift_weakLoadStrong(a4 + 16);
    if (!Strong)
      return;
    v28 = Strong;
    v29 = swift_unknownObjectWeakLoadStrong(Strong + 32, v27);
    v30 = *(_QWORD *)(v28 + 40);
    swift_release(v28);
    if (!v29)
      return;
    v31 = objc_msgSend((id)objc_opt_self(SDAutoUnlockTransport), "sharedTransport");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "activeDevice");

      if (v33)
      {
        v34 = objc_msgSend(v33, "uniqueIDOverride");

        if (v34)
        {
          ObjectType = swift_getObjectType(v29);
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v38 = v37;

          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t))(v30 + 8))(a1, a2, v25, v36, v38, ObjectType, v30);
          swift_bridgeObjectRelease(v38);
          swift_unknownObjectRelease(v29);
          return;
        }
LABEL_19:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 67109120;
    LODWORD(v41[0]) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, (char *)v41 + 4, v24 + 4);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Received unknown message type %u", v24, 8u);
    swift_slowDealloc(v24, -1, -1);
  }

}

uint64_t sub_1004AB0B4()
{
  uint64_t v0;

  sub_100232F78(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for SDAuthenticationTransportNearbyAgent()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary36SDAuthenticationTransportNearbyAgent);
}

uint64_t sub_1004AB108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1004AB138(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 a4)
{
  unint64_t v4;

  v4 = sub_1004B33E4(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

__CFString *sub_1004AB160()
{
  qword_1007D84C8 = (uint64_t)CFSTR("SDNearbyAgentNotificationUnlockBLEDataReceived");
  return CFSTR("SDNearbyAgentNotificationUnlockBLEDataReceived");
}

void sub_1004AB178(void *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  char *v6;
  id v7;
  _BYTE *v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  uint64_t v13;
  _UNKNOWN **v14;
  void (*v15)(id, id, uint64_t, _UNKNOWN **);
  id v16;
  id v17;
  objc_super v18;
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;

  v6 = &v3[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate];
  *((_QWORD *)v6 + 1) = 0;
  swift_unknownObjectWeakInit(v6, 0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_queue] = a1;
  v3[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_ready] = 1;
  v7 = objc_allocWithZone((Class)IDSService);
  v8 = v3;
  v9 = a1;
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v7, "initWithService:", v10, swift_bridgeObjectRelease(a3).n128_f64[0]);

  if (v11)
  {
    v20 = sub_100221EDC(0, (unint64_t *)&unk_1007C3190, IDSService_ptr);
    v21 = &off_1007259B8;
    *(_QWORD *)&v19 = v11;
    sub_10026EE60(&v19, (uint64_t)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_idsService]);

    v18.receiver = v8;
    v18.super_class = (Class)type metadata accessor for SDAuthenticationTransportIDSService();
    v12 = objc_msgSendSuper2(&v18, "init");
    sub_100244418((uint64_t)v12 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_idsService, (uint64_t)&v19);
    v13 = v20;
    v14 = v21;
    sub_10023A834(&v19, v20);
    v15 = (void (*)(id, id, uint64_t, _UNKNOWN **))v14[2];
    v16 = v9;
    v17 = v12;
    v15(v12, v9, v13, v14);

    sub_10022E75C(&v19);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1004AB310(uint64_t a1, unint64_t a2, _QWORD *a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  id v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  id v56;
  id v57;
  uint64_t v58;
  id v60;
  uint64_t v61;
  _BYTE v62[72];
  id v63;
  _BYTE v64[248];
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[72];

  v5 = v4;
  v10 = a4 + 2006;
  v11 = objc_allocWithZone((Class)IDSProtobuf);
  sub_10022E4A8(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100225AB4(a1, a2);
  v13 = objc_msgSend(v11, "initWithProtobufData:type:isResponse:", isa, v10, 0);

  v14 = a3[3];
  v15 = a3[4];
  sub_10023A834(a3, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  v17 = sub_100008384((uint64_t *)&unk_1007C31E0);
  if ((v16 & 1) != 0)
  {
    inited = swift_initStackObject(v17, v62);
    *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDefaultPairedDevice);
    v67 = v19;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v66, &type metadata for String, &protocol witness table for String);
    v20 = (const char *)sub_100285E28(inited);
    swift_setDeallocating(inited);
    v21 = inited + 32;
    v22 = 1;
LABEL_11:
    swift_arrayDestroy(v21, v22, &type metadata for AnyHashable);
    goto LABEL_12;
  }
  v23 = swift_initStackObject(v17, v70);
  *(_OWORD *)(v23 + 16) = xmmword_1005CD2A0;
  v24 = (_QWORD *)(v23 + 32);
  sub_100244418((uint64_t)a3, (uint64_t)&v66);
  v25 = sub_100008384(&qword_1007B5358);
  v26 = sub_100221EDC(0, (unint64_t *)&qword_1007C31F0, IDSDevice_ptr);
  if (swift_dynamicCast(&v65, &v66, v25, v26, 6))
    v27 = v65;
  else
    v27 = 0;
  v28 = (void *)IDSCopyIDForDevice(v27);

  if (v28)
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  v66 = v29;
  v67 = v31;
  v32 = sub_100008384(&qword_1007B54E0);
  v33 = sub_1004B44E8();
  AnyHashable.init<A>(_:)(v24, &v66, v32, v33);
  v34 = *(_QWORD *)(v23 + 16);
  if (v34)
  {
    v20 = (const char *)sub_100285E28(v23);
    swift_setDeallocating(v23);
    v21 = v23 + 32;
    v22 = v34;
    goto LABEL_11;
  }
  swift_setDeallocating(v23);
  swift_arrayDestroy(v24, 0, &type metadata for AnyHashable);
  v20 = (const char *)&_swiftEmptySetSingleton;
LABEL_12:
  v35 = sub_100008384((uint64_t *)&unk_1007C31D0);
  v36 = swift_initStackObject(v35, v64);
  *(_OWORD *)(v36 + 16) = xmmword_1005CF140;
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionTimeoutKey);
  v67 = v37;
  AnyHashable.init<A>(_:)((_QWORD *)(v36 + 32), &v66, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v36 + 96) = &type metadata for Int;
  *(_QWORD *)(v36 + 72) = 15;
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionLocalDeliveryKey);
  v67 = v38;
  AnyHashable.init<A>(_:)((_QWORD *)(v36 + 104), &v66, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v36 + 168) = &type metadata for Bool;
  *(_BYTE *)(v36 + 144) = v16 & 1;
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionRequireBluetoothKey);
  v67 = v39;
  AnyHashable.init<A>(_:)((_QWORD *)(v36 + 176), &v66, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v36 + 240) = &type metadata for Bool;
  *(_BYTE *)(v36 + 216) = v16 & 1;
  v40 = (const char *)sub_10021E5F8(v36);
  sub_100221EDC(0, (unint64_t *)&unk_1007B59E0, NSString_ptr);
  v41 = (void *)NSString.init(stringLiteral:)("", 0, 2);
  sub_100244418(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_idsService, (uint64_t)&v66);
  v42 = v68;
  v43 = v69;
  sub_10023A834(&v66, v68);
  v63 = v41;
  (*(void (**)(id, const char *, uint64_t, const char *, id *, uint64_t, uint64_t))(v43 + 24))(v13, v20, 300, v40, &v63, v42, v43);
  *(_QWORD *)&v44 = swift_bridgeObjectRelease(v20).n128_u64[0];
  swift_bridgeObjectRelease(v40, v44);
  v65 = v63;
  v45 = v63;

  sub_10022E75C(&v66);
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v46 = type metadata accessor for Logger(0);
  v47 = sub_100221DF8(v46, (uint64_t)qword_1007C28B0);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    v50 = swift_slowAlloc(22, -1);
    v51 = (_QWORD *)swift_slowAlloc(8, -1);
    v52 = (void *)swift_slowAlloc(32, -1);
    v63 = v52;
    *(_DWORD *)v50 = 136315394;
    v53 = sub_1003FDF2C(a4);
    v55 = (const char *)v54;
    v66 = sub_100228BD8(v53, v54, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v50 + 4);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v50 + 12) = 2112;
    swift_beginAccess(&v65, &v66, 0, 0);
    v56 = v65;
    if (v65)
    {
      v60 = v65;
      v57 = v65;
    }
    else
    {
      v60 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v50 + 14);
    *v51 = v56;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Sent %s: %@", (uint8_t *)v50, 0x16u);
    v58 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v51, 1, v58);
    swift_slowDealloc(v51, -1, -1);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }

  return 0x100000000;
}

id sub_1004ABCAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SDAuthenticationTransportIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SDAuthenticationTransportIDSService()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService);
}

uint64_t type metadata accessor for SDAuthenticationTransportIDSServiceLocal()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary40SDAuthenticationTransportIDSServiceLocal);
}

uint64_t sub_1004ABD68()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_ready);
}

uint64_t type metadata accessor for SDAuthenticationTransportIDSServiceInternet()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary43SDAuthenticationTransportIDSServiceInternet);
}

uint64_t sub_1004ABD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate;
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1004ABDD4(uint64_t a1, unint64_t a2, _QWORD *a3, unsigned __int8 a4)
{
  unint64_t v4;

  v4 = sub_1004AB310(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

void sub_1004ABDFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v2 = type metadata accessor for Logger(0);
    sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4);
      *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Received error upon activation: %@)", v5, 0xCu);
      v8 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100221DF8(v9, (uint64_t)qword_1007C28B0);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Successfully activated and registered request", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

void sub_1004AC080(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t aBlock[5];
  uint64_t v23;

  v2 = v1;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100221DF8(v4, (uint64_t)qword_1007C28B0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    aBlock[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = sub_1003FDF2C(a1);
    v12 = v11;
    v21 = sub_100228BD8(v10, v11, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock, v8 + 4);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Registering for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v13 = *(void **)(v2 + 32);
  sub_1003FDF2C(a1);
  v15 = v14;
  v16 = v13;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v18 = swift_allocObject(&unk_10072B6F8, 24, 7);
  swift_weakInit(v18 + 16, v2);
  v19 = swift_allocObject(&unk_10072B720, 32, 7);
  *(_BYTE *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = v18;
  aBlock[4] = (uint64_t)sub_1004B44DC;
  v23 = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004AC88C;
  aBlock[3] = (uint64_t)&unk_10072B738;
  v20 = _Block_copy(aBlock);
  swift_release(v23);
  objc_msgSend(v16, "registerEventID:options:handler:", v17, 0, v20);
  _Block_release(v20);

}

void sub_1004AC2E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Strong;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  os_log_type_t v43;
  uint8_t *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50[5];
  __int128 v51;
  __int128 v52;

  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100221DF8(v7, (uint64_t)qword_1007C28B0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = a4;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v50[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = sub_1003FDF2C(a3);
    v16 = v15;
    *(_QWORD *)&v51 = sub_100228BD8(v14, v15, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 8, v12 + 4);
    v17 = v16;
    a4 = v11;
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  v48 = 1635017060;
  v49 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v50, &v48, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v18 = sub_10045C1D0((uint64_t)v50), (v19 & 1) != 0))
  {
    sub_10022E77C(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v51);
  }
  else
  {
    v51 = 0u;
    v52 = 0u;
  }
  sub_10022E6C0((uint64_t)v50);
  if (!*((_QWORD *)&v52 + 1))
  {
    sub_10000D0F0((uint64_t)&v51, (uint64_t *)&unk_1007B6890);
    goto LABEL_16;
  }
  if ((swift_dynamicCast(&v48, &v51, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_16:
    v25 = swift_bridgeObjectRetain_n(a1, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (!os_log_type_enabled(v26, v27))
    {

      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v50[0] = v29;
    *(_DWORD *)v28 = 136315138;
    v30 = swift_bridgeObjectRetain(a1);
    v31 = Dictionary.description.getter(v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v33 = v32;
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v51 = sub_100228BD8(v31, v33, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 8, v28 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to get data: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
    goto LABEL_31;
  }
  v21 = v48;
  v20 = v49;
  if (!a2)
  {
    v51 = 0u;
    v52 = 0u;
LABEL_26:
    v34 = sub_10000D0F0((uint64_t)&v51, (uint64_t *)&unk_1007B6890);
    goto LABEL_27;
  }
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  v49 = v22;
  AnyHashable.init<A>(_:)(v50, &v48, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v23 = sub_10045C1D0((uint64_t)v50), (v24 & 1) != 0))
  {
    sub_10022E77C(*(_QWORD *)(a2 + 56) + 32 * v23, (uint64_t)&v51);
  }
  else
  {
    v51 = 0u;
    v52 = 0u;
  }
  sub_10022E6C0((uint64_t)v50);
  if (!*((_QWORD *)&v52 + 1))
    goto LABEL_26;
  v34 = swift_dynamicCast(v50, &v51, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v34 & 1) != 0)
  {
    v35 = a4 + 16;
    v36 = v50[0];
    v37 = v50[1];
    swift_beginAccess(v35, v50, 0, 0);
    Strong = swift_weakLoadStrong(v35);
    if (Strong)
    {
      v39 = Strong;
      v40 = *(_QWORD *)(Strong + 16);
      v41 = *(_QWORD *)(Strong + 24);
      swift_unknownObjectRetain(v40);
      swift_release(v39);
      if (v40)
      {
        ObjectType = swift_getObjectType(v40);
        (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 8))(v21, v20, a3, v36, v37, ObjectType, v41);
        swift_bridgeObjectRelease(v37);
        swift_unknownObjectRelease(v40);
        sub_100225AB4(v21, v20);
        return;
      }
    }
    swift_bridgeObjectRelease(v37);
    v26 = Logger.logObject.getter(v46);
    v43 = static os_log_type_t.error.getter(v26);
    if (!os_log_type_enabled(v26, v43))
      goto LABEL_30;
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    v45 = "No delegate to send date to";
    goto LABEL_29;
  }
LABEL_27:
  v26 = Logger.logObject.getter(v34);
  v43 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    v45 = "No sender IDS ID";
LABEL_29:
    _os_log_impl((void *)&_mh_execute_header, v26, v43, v45, v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }
LABEL_30:
  sub_100225AB4(v21, v20);
LABEL_31:

}

uint64_t sub_1004AC88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a3)
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v4);
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_1004AC938()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportReceiver()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary40SDAuthenticationTransportRapportReceiver);
}

uint64_t sub_1004AC984(uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, unsigned __int8 a5)
{
  uint64_t v5;
  id v10;
  double v11;
  uint64_t v12;
  id v13;
  const char *v14;
  const char *v15;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  NSString v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  void **aBlock;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  v10 = objc_msgSend(*(id *)(v5 + 48), "destinationDevice");
  v12 = (uint64_t)v10;
  if (v10)
  {
    v13 = objc_msgSend(v10, "identifier");

    if (v13)
    {
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v15 = v14;

      if (v12 == a3 && v15 == a4)
      {
        LOBYTE(v12) = 1;
        v15 = a4;
      }
      else
      {
        LOBYTE(v12) = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v15, a3, a4, 0);
      }
      *(_QWORD *)&v11 = swift_bridgeObjectRelease(v15).n128_u64[0];
    }
    else
    {
      LOBYTE(v12) = 0;
    }
  }
  v17 = objc_msgSend(*(id *)(v5 + 48), "destinationDevice", v11);

  if (v17 && (v12 & 1) == 0 || *(_BYTE *)(v5 + 56) == 1)
  {
    objc_msgSend(*(id *)(v5 + 48), "invalidate");
    v18 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
    v19 = *(void **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = v18;

  }
  v20 = objc_msgSend(*(id *)(v5 + 48), "destinationDevice");

  if (((v20 != 0) & v12) == 1 && *(_BYTE *)(v5 + 56) != 1)
  {
    sub_1004AD434(a5, a1, a2);
  }
  else
  {
    v21 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkDevice), "init");
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v21, "setIdentifier:", v22);

    objc_msgSend(*(id *)(v5 + 48), "setDestinationDevice:", v21);
    objc_msgSend(*(id *)(v5 + 48), "setControlFlags:", *(_QWORD *)(v5 + 64));
    v23 = *(void **)(v5 + 48);
    v39 = sub_1004B4468;
    v40 = v5;
    aBlock = _NSConcreteStackBlock;
    v36 = 1107296256;
    v37 = sub_10025BBB4;
    v38 = &unk_10072B670;
    v24 = _Block_copy(&aBlock);
    v25 = v40;
    v26 = v23;
    swift_retain();
    swift_release(v25);
    objc_msgSend(v26, "setInvalidationHandler:", v24);
    _Block_release(v24);

    v27 = *(void **)(v5 + 48);
    v28 = swift_allocObject(&unk_10072B608, 24, 7);
    swift_weakInit(v28 + 16, v5);
    v29 = swift_allocObject(&unk_10072B6A8, 64, 7);
    *(_QWORD *)(v29 + 16) = v28;
    *(_QWORD *)(v29 + 24) = a1;
    *(_QWORD *)(v29 + 32) = a2;
    *(_BYTE *)(v29 + 40) = a5;
    *(_QWORD *)(v29 + 48) = a3;
    *(_QWORD *)(v29 + 56) = a4;
    v39 = sub_1004B44A4;
    v40 = v29;
    aBlock = _NSConcreteStackBlock;
    v36 = 1107296256;
    v37 = sub_1002D6B08;
    v38 = &unk_10072B6C0;
    v30 = _Block_copy(&aBlock);
    v31 = v40;
    v32 = v27;
    sub_10022E4A8(a1, a2);
    swift_bridgeObjectRetain(a4);
    swift_release(v31);
    objc_msgSend(v32, "activateWithCompletion:", v30);
    _Block_release(v30);

  }
  return 0x100000000;
}

void sub_1004ACD04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "rpSender object invalidated", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  *(_BYTE *)(a1 + 56) = 1;
}

uint64_t sub_1004ACDDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t Strong;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  id v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v9 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v12 = type metadata accessor for Logger(0);
    sub_100221DF8(v12, (uint64_t)qword_1007C28B0);
    swift_errorRetain(a1);
    swift_retain();
    swift_errorRetain(a1);
    v13 = swift_retain();
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v56 = a5;
      v16 = 7562617;
      v17 = swift_slowAlloc(22, -1);
      v18 = (uint64_t *)swift_slowAlloc(8, -1);
      v55 = swift_slowAlloc(32, -1);
      v62[0] = v55;
      *(_DWORD *)v17 = 138412546;
      swift_errorRetain(a1);
      v19 = _swift_stdlib_bridgeErrorToNSError(a1);
      v60 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v17 + 4);
      *v18 = v19;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v17 + 12) = 2080;
      swift_beginAccess(v9, &v60, 0, 0);
      Strong = swift_weakLoadStrong(v9);
      v21 = (const char *)0xE300000000000000;
      if (Strong)
      {
        v22 = *(_QWORD *)(Strong + 32);
        swift_release(Strong);
        if (v22)
        {
          v16 = 28526;
          v21 = (const char *)0xE200000000000000;
        }
      }
      v59 = sub_100228BD8(v16, (unint64_t)v21, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v17 + 14);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received error upon activation: %@). Delegate is nil: %s", (uint8_t *)v17, 0x16u);
      v23 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v18, 1, v23);
      swift_slowDealloc(v18, -1, -1);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      a5 = v56;
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      swift_release_n(a2, 2);
    }
    swift_beginAccess(v9, v62, 0, 0);
    v38 = swift_weakLoadStrong(v9);
    if (v38)
    {
      v39 = v38;
      v41 = *(_QWORD *)(v38 + 32);
      v40 = *(_QWORD *)(v38 + 40);
      swift_unknownObjectRetain(v41);
      swift_release(v39);
      if (v41)
      {
        v42 = (void *)_convertErrorToNSError(_:)(a1);
        v43 = objc_msgSend(v42, "description");
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

        v47 = objc_msgSend(v42, "code");
        if (v47 == (id)-6722)
          v48 = 12;
        else
          v48 = 25;
        if (v47 == (id)-6727)
          v49 = 20;
        else
          v49 = v48;
        ObjectType = swift_getObjectType(v41);
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v40 + 16))(v49, v44, v46, a3, a4, a5, ObjectType, v40);
        swift_errorRelease(a1);
        swift_bridgeObjectRelease(v46);
        return swift_unknownObjectRelease(v41);
      }
    }
    return swift_errorRelease(a1);
  }
  else
  {
    swift_beginAccess(v9, v62, 0, 0);
    v26 = swift_weakLoadStrong(v9);
    if (v26)
    {
      v27 = v26;
      *(_BYTE *)(v26 + 56) = 0;
      *(_BYTE *)(v26 + 24) = 1;
      v28 = *(_QWORD *)(v26 + 32);
      if (v28)
      {
        v29 = *(_QWORD *)(v26 + 40);
        v30 = swift_getObjectType(*(_QWORD *)(v26 + 32));
        v31 = *(void (**)(uint64_t, uint64_t))(v29 + 24);
        swift_unknownObjectRetain(v28);
        v31(v30, v29);
        swift_unknownObjectRelease(v28);
      }
      if (qword_1007B41B8 != -1)
        swift_once(&qword_1007B41B8, sub_1004A9400);
      v32 = type metadata accessor for Logger(0);
      sub_100221DF8(v32, (uint64_t)qword_1007C28B0);
      v33 = swift_bridgeObjectRetain_n(a7, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v60 = v37;
        *(_DWORD *)v36 = 136315138;
        swift_bridgeObjectRetain(a7);
        v59 = sub_100228BD8(a6, (unint64_t)a7, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v36 + 4);
        swift_bridgeObjectRelease_n(a7, 3);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully activated for connecting to IDS ID %s", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a7, 2);
      }
      sub_1004AD434(a5, a3, a4);
      return swift_release(v27);
    }
    else
    {
      swift_beginAccess(v9, &v60, 0, 0);
      result = swift_weakLoadStrong(v9);
      if (result)
      {
        v52 = result;
        v41 = *(_QWORD *)(result + 32);
        v53 = *(_QWORD *)(result + 40);
        swift_unknownObjectRetain(v41);
        result = swift_release(v52);
        if (v41)
        {
          v54 = swift_getObjectType(v41);
          (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v53 + 16))(14, 0xD000000000000029, 0x800000010061D9B0, a3, a4, a5, v54, v53);
          return swift_unknownObjectRelease(v41);
        }
      }
    }
  }
  return result;
}

void sub_1004AD434(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  const char *v9;
  const char *v10;
  id v11;
  NSString v12;
  uint64_t v13;
  uint64_t inited;
  const char *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t aBlock;
  unint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  char v27[104];

  v4 = v3;
  v8 = *(void **)(v3 + 48);
  sub_1003FDF2C(a1);
  v10 = v9;
  v11 = v8;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v13 = sub_100008384((uint64_t *)&unk_1007C31D0);
  inited = swift_initStackObject(v13, v27);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  aBlock = 1635017060;
  v22 = 0xE400000000000000;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &aBlock, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Data;
  *(_QWORD *)(inited + 72) = a2;
  *(_QWORD *)(inited + 80) = a3;
  sub_10022E4A8(a2, a3);
  v15 = (const char *)sub_10021E5F8(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  v17 = swift_allocObject(&unk_10072B608, 24, 7);
  swift_weakInit(v17 + 16, v4);
  v18 = swift_allocObject(&unk_10072B630, 41, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = a2;
  *(_QWORD *)(v18 + 32) = a3;
  *(_BYTE *)(v18 + 40) = a1;
  v25 = sub_1004B4458;
  v26 = v18;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_1002D6B08;
  v24 = &unk_10072B648;
  v19 = _Block_copy(&aBlock);
  v20 = v26;
  sub_10022E4A8(a2, a3);
  swift_release(v20);
  objc_msgSend(v11, "sendEventID:event:options:completion:", v12, isa, 0, v19);
  _Block_release(v19);

}

void sub_1004AD624(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  id v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t ObjectType;
  uint64_t v58;
  uint64_t v59;
  NSObject *oslog;
  os_log_t osloga;
  _BYTE v62[24];
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if (a1)
  {
    v9 = a2 + 16;
    v65 = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v10 = sub_100008384(&qword_1007B5A60);
    v11 = sub_100221EDC(0, &qword_1007B57B0, NSError_ptr);
    if ((swift_dynamicCast(&v63, &v65, v10, v11, 6) & 1) != 0)
    {
      v12 = v63;
      if (objc_msgSend(v63, "code") == (id)-71148)
      {
        if (qword_1007B41B8 != -1)
          swift_once(&qword_1007B41B8, sub_1004A9400);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_100221DF8(v13, (uint64_t)qword_1007C28B0);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.default.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "rpSender was invalidated. Retrying", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

        swift_beginAccess(v9, &v65, 0, 0);
        Strong = swift_weakLoadStrong(v9);
        if (Strong)
        {
          *(_BYTE *)(Strong + 56) = 1;
          swift_release(Strong);
        }
        swift_beginAccess(v9, &v63, 0, 0);
        v19 = swift_weakLoadStrong(v9);
        if (v19)
        {
          v20 = v19;
          v21 = *(id *)(v19 + 48);
          swift_release(v20);
          v22 = objc_msgSend(v21, "destinationDevice");

          if (v22)
          {
            v23 = objc_msgSend(v22, "identifier");

            if (v23)
            {
              v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
              v26 = v25;

              swift_beginAccess(v9, v62, 0, 0);
              v27 = swift_weakLoadStrong(v9);
              if (v27)
              {
                v28 = v27;
                sub_1004AC984(a3, a4, v24, v26, a5);
                swift_errorRelease(a1);
                swift_release(v28);
              }
              else
              {
                swift_errorRelease(a1);
              }
              swift_bridgeObjectRelease(v26);

              return;
            }
          }
        }

LABEL_38:
        swift_errorRelease(a1);
        return;
      }

    }
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v37 = type metadata accessor for Logger(0);
    sub_100221DF8(v37, (uint64_t)qword_1007C28B0);
    swift_errorRetain(a1);
    v38 = swift_errorRetain(a1);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    osloga = a3;
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v41 = 138412290;
      swift_errorRetain(a1);
      v43 = _swift_stdlib_bridgeErrorToNSError(a1);
      v65 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 4);
      *v42 = v43;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Received error for sending request: %@", v41, 0xCu);
      v44 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v42, 1, v44);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v9, &v65, 0, 0);
    v45 = swift_weakLoadStrong(v9);
    if (v45)
    {
      v46 = v45;
      v47 = *(_QWORD *)(v45 + 32);
      v48 = *(_QWORD *)(v45 + 40);
      swift_unknownObjectRetain(v47);
      swift_release(v46);
      if (v47)
      {
        v49 = (void *)_convertErrorToNSError(_:)(a1);
        v50 = objc_msgSend(v49, "description");
        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
        v53 = v52;

        v54 = objc_msgSend(v49, "code");
        if (v54 == (id)-6722)
          v55 = 12;
        else
          v55 = 25;
        if (v54 == (id)-6727)
          v56 = 20;
        else
          v56 = v55;
        ObjectType = swift_getObjectType(v47);
        (*(void (**)(uint64_t, uint64_t, const char *, os_log_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 16))(v56, v51, v53, osloga, a4, a5, ObjectType, v48);
        swift_bridgeObjectRelease(v53);
        swift_unknownObjectRelease(v47);
      }
    }
    swift_beginAccess(v9, &v63, 0, 0);
    v58 = swift_weakLoadStrong(v9);
    if (v58)
    {
      v59 = v58;
      sub_1004ADCFC();
      swift_errorRelease(a1);
      swift_release(v59);
      return;
    }
    goto LABEL_38;
  }
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100221DF8(v29, (uint64_t)qword_1007C28B0);
  oslog = Logger.logObject.getter(v30);
  v31 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v65 = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = sub_1003FDF2C(a5);
    v36 = (const char *)v35;
    v63 = (id)sub_100228BD8(v34, v35, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v32 + 4);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, oslog, v31, "Sent request: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
}

id sub_1004ADCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
  v3 = swift_retain_n(v0, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v1;
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = type metadata accessor for SDAuthenticationTransportRapport();
    swift_retain();
    v9 = String.init<A>(describing:)(&v13, v8);
    v11 = (const char *)v10;
    v13 = sub_100228BD8(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Disconnecting", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  *(_BYTE *)(v1 + 56) = 1;
  return objc_msgSend(*(id *)(v1 + 48), "invalidate");
}

uint64_t sub_1004ADECC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapport()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary32SDAuthenticationTransportRapport);
}

uint64_t sub_1004ADF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1004ADF30()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_1004ADF38(uint64_t a1, unint64_t a2, _QWORD *a3, unsigned __int8 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  const char *v11;
  unint64_t v12;

  v7 = a3[3];
  v8 = a3[4];
  sub_10023A834(a3, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if (v10)
  {
    v11 = v10;
    v12 = sub_1004AC984(a1, a2, result, v10, a4);
    swift_bridgeObjectRelease(v11);
    return v12 | ((HIDWORD(v12) & 1) << 32);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportBTOnly()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary38SDAuthenticationTransportRapportBTOnly);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportAWDLOnly()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary40SDAuthenticationTransportRapportAWDLOnly);
}

void sub_1004AE02C()
{
  word_1007D84D0 = CBAssignedL2CAPPSMForOysterAutoUnlock;
}

id sub_1004AE044(void *a1)
{
  id v2;
  objc_class *v3;
  Class isa;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  objc_class *v8;
  Class v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  objc_class *v13;
  Class v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Class v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;

  v26 = 0;
  v2 = objc_msgSend((id)objc_opt_self(SDAutoUnlockAKSManager), "sharedManager");
  if (!v2)
  {
LABEL_12:
    if (!v26)
      return v2;
    goto LABEL_13;
  }
  v3 = (objc_class *)objc_msgSend(a1, "encryptedPayload");
  isa = v3;
  if (v3)
  {
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100225AB4(v5, v7);
  }
  v8 = (objc_class *)objc_msgSend(a1, "authTag", v26);
  v9 = v8;
  if (v8)
  {
    v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

    v9 = Data._bridgeToObjectiveC()().super.isa;
    sub_100225AB4(v10, v12);
  }
  v13 = (objc_class *)objc_msgSend(a1, "nonce");
  v14 = v13;
  if (v13)
  {
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    v14 = Data._bridgeToObjectiveC()().super.isa;
    sub_100225AB4(v15, v17);
  }
  v18 = UUID._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v2, "decryptMessage:authTag:nonce:bluetoothID:cachedDevices:errorCode:", isa, v9, v14, v18, 1, &v26);

  if (!v19)
  {
    v2 = 0;
    goto LABEL_12;
  }
  v2 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if (!v26)
    return v2;
LABEL_13:
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100221DF8(v20, (uint64_t)qword_1007C28B0);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decrypt message", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  return v2;
}

void sub_1004AE304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v1 = v0;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configuring CBServer", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(id *)(v1 + 48);
  objc_msgSend(v8, "setDispatchQueue:", v7);
  if (qword_1007B41C8 != -1)
    swift_once(&qword_1007B41C8, sub_1004AE02C);
  objc_msgSend(v8, "setBleListenPSM:", (unsigned __int16)word_1007D84D0);
  v9 = swift_allocObject(&unk_10072B370, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v16 = sub_1004B3370;
  v17 = v9;
  v12 = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = sub_1004AEC78;
  v15 = &unk_10072B388;
  v10 = _Block_copy(&v12);
  swift_release(v17);
  objc_msgSend(v8, "setAcceptHandler:", v10);
  _Block_release(v10);
  v16 = sub_1004AED58;
  v17 = 0;
  v12 = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = sub_1002D6B08;
  v15 = &unk_10072B3B0;
  v11 = _Block_copy(&v12);
  objc_msgSend(v8, "activateWithCompletion:", v11);
  _Block_release(v11);

}

uint64_t sub_1004AE524(void *a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t Strong;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  _QWORD v60[2];
  _BYTE v61[24];
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[32];

  v6 = a4 + 16;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100221DF8(v7, (uint64_t)qword_1007C28B0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accepted connection", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  swift_beginAccess(v6, v64, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (!Strong)
    goto LABEL_8;
  v13 = Strong;
  v14 = *(void **)(Strong + 72);
  v15 = v14;
  Strong = swift_release(v13);
  if (!v14
    || (sub_100221EDC(0, &qword_1007C3188, CBConnection_ptr),
        v16 = v15,
        v17 = a1,
        v18 = static NSObject.== infix(_:_:)(v16, v17),
        v16,
        v16,
        v17,
        (v18 & 1) == 0))
  {
LABEL_8:
    v19 = Logger.logObject.getter(Strong);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "New connection", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    swift_beginAccess(v6, v63, 0, 0);
    v22 = swift_weakLoadStrong(v6);
    if (v22)
    {
      v23 = v22;
      v24 = *(void **)(v22 + 72);
      *(_QWORD *)(v22 + 72) = a1;

      v25 = a1;
      swift_release(v23);
    }
    swift_beginAccess(v6, v62, 0, 0);
    v26 = swift_weakLoadStrong(v6);
    if (v26)
    {
      v27 = v26;
      v28 = *(id *)(v26 + 16);
      swift_release(v27);
      swift_beginAccess(v6, v61, 0, 0);
      v29 = swift_weakLoadStrong(v6);
      if (v29)
      {
        v30 = v29;
        v31 = *(void **)(v29 + 72);
        if (v31)
        {
          v32 = v31;
          swift_release(v30);
          objc_msgSend(v32, "setDispatchQueue:", v28);

        }
        else
        {
          swift_release(v29);
        }
      }

    }
  }
  a2(0);
  v33 = a1;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v58[0] = v37;
    *(_DWORD *)v36 = 136315394;
    v38 = objc_msgSend(v33, "peerDevice");
    v39 = objc_msgSend(v38, "identifier");

    if (v39)
    {
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

    }
    else
    {
      v40 = 0xD000000000000015;
      v59 = 0;
      v60[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v42 = 0x8000000100612DF0;
    }
    v59 = sub_100228BD8(v40, v42, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v36 + 4);

    *(_QWORD *)&v43 = swift_bridgeObjectRelease(v42).n128_u64[0];
    *(_WORD *)(v36 + 12) = 2080;
    v44 = objc_msgSend(v33, "peerDevice", v43);
    v45 = objc_msgSend(v44, "idsDeviceID");

    if (v45)
    {
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

    }
    else
    {
      v46 = 0xD000000000000015;
      v59 = 0;
      v60[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v60[0]);
      v48 = 0x8000000100612DF0;
    }
    v59 = sub_100228BD8(v46, v48, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v36 + 14);

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "connection peer device: %s, idsID: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

  }
  swift_beginAccess(v6, &v59, 0, 0);
  v49 = swift_weakLoadStrong(v6);
  if (v49)
  {
    *(_BYTE *)(v49 + 24) = 1;
    swift_release(v49);
  }
  swift_beginAccess(v6, v58, 0, 0);
  v50 = swift_weakLoadStrong(v6);
  if (v50)
  {
    v51 = v50;
    v52 = *(_QWORD *)(v50 + 32);
    if (v52)
    {
      v53 = *(_QWORD *)(v50 + 40);
      swift_unknownObjectRetain(*(_QWORD *)(v50 + 32));
      swift_release(v51);
      ObjectType = swift_getObjectType(v52);
      (*(void (**)(uint64_t, uint64_t))(v53 + 24))(ObjectType, v53);
      swift_unknownObjectRelease(v52);
    }
    else
    {
      swift_release(v50);
    }
  }
  swift_beginAccess(v6, &v57, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v56 = result;
    sub_1004AEB40(v33);
    return swift_release(v56);
  }
  return result;
}

void sub_1004AEB40(void *a1)
{
  uint64_t v1;
  id v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  _QWORD *v12;

  v3 = objc_msgSend(objc_allocWithZone((Class)CBReadRequest), "init");
  objc_msgSend(v3, "setMinLength:", 1);
  objc_msgSend(v3, "setMaxLength:", 500);
  v4 = (_QWORD *)swift_allocObject(&unk_10072B410, 40, 7);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = a1;
  v11[4] = sub_1004B33D8;
  v12 = v4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10025BBB4;
  v11[3] = &unk_10072B428;
  v5 = _Block_copy(v11);
  v6 = v12;
  v7 = v3;
  swift_retain(v1);
  v8 = a1;
  swift_release(v6);
  objc_msgSend(v7, "setCompletion:", v5);
  _Block_release(v5);
  v9 = *(void **)(v1 + 72);
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v10, "readWithCBReadRequest:", v7);

  }
}

void sub_1004AEC78(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4;
  void (*v5)(void);
  void *v6;
  uint64_t v7;
  id v8;

  v5 = *(void (**)(void))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_10072B3E8, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(v4);
  v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);

}

void sub_1004AED0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void sub_1004AED58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v2 = type metadata accessor for Logger(0);
    sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4);
      *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Encountered error while activating CBServer %@", v5, 0xCu);
      v8 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100221DF8(v9, (uint64_t)qword_1007C28B0);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Activated CBServer", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

void sub_1004AEFC0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  NSObject *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for UUID(0);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v8 = objc_msgSend(a1, "error");
  if (!v8)
  {
    v16 = objc_msgSend(a1, "data");
    if (v16)
    {
      v17 = v16;
      v27 = a3;
      v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

      v21 = (char *)&loc_1004AF1A8 + dword_1004AFCAC[v20 >> 62];
      v28 = v18;
      __asm { BR              X9 }
    }
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100221DF8(v22, (uint64_t)qword_1007C28B0);
    v28 = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v24, "data is nil!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }
    goto LABEL_10;
  }

  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v9 = type metadata accessor for Logger(0);
  sub_100221DF8(v9, (uint64_t)qword_1007C28B0);
  v28 = a1;
  v10 = Logger.logObject.getter(v28);
  v11 = static os_log_type_t.error.getter(v10);
  if (!os_log_type_enabled(v10, v11))
  {

LABEL_10:
    return;
  }
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v12 = 138412290;
  v14 = -[NSObject error](v28, "error");
  if (v14)
  {
    v15 = _swift_stdlib_bridgeErrorToNSError(v14);
    v29 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 4);
  }
  else
  {
    v29 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 4);
    v15 = 0;
  }
  *v13 = v15;

  _os_log_impl((void *)&_mh_execute_header, v10, v11, "Encountered error while trying to read: %@", v12, 0xCu);
  v26 = sub_100008384(&qword_1007B4C30);
  swift_arrayDestroy(v13, 1, v26);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

}

uint64_t sub_1004AFCBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch(sub_1004AFCD4, 0, 0);
}

uint64_t sub_1004AFCD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;

  v1 = *(_QWORD *)(v0 + 128);
  objc_msgSend(*(id *)(v1 + 72), "invalidate");
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
  *(_QWORD *)(v0 + 136) = v3;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating CBConnection", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_msgSend(objc_allocWithZone((Class)CBConnection), "init");
  v8 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v7;

  v9 = *(id *)(v1 + 72);
  if (v9
    && (objc_msgSend(v9, "setDispatchQueue:", *(_QWORD *)(*(_QWORD *)(v0 + 128) + 16)), (v9 = *(id *)(v1 + 72)) != 0))
  {
    v10 = *(_QWORD *)(v0 + 128);
    v9 = objc_msgSend(v9, "setUseCase:", 131088);
    v11 = *(void **)(v1 + 72);
    *(_QWORD *)(v0 + 144) = v11;
    *(_BYTE *)(v10 + 88) = 0;
    if (v11)
    {
      v12 = *(_QWORD *)(v0 + 120);
      v13 = v11;
      objc_msgSend(v13, "setConnectionFlags:", 256);
      objc_msgSend(v13, "setPeerDevice:", v12);
      objc_msgSend(v13, "setConnectTimeoutSeconds:", 4.0);
      if (qword_1007B41C8 != -1)
        swift_once(&qword_1007B41C8, sub_1004AE02C);
      v14 = v0 + 16;
      objc_msgSend(v13, "setBlePSM:", (unsigned __int16)word_1007D84D0);
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1004AFFB8;
      v16 = swift_continuation_init(v0 + 16, 1, v15);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v17 = (_QWORD *)(v0 + 80);
      v17[1] = 0x40000000;
      v17[2] = sub_1002EF5D4;
      v17[3] = &unk_10072B5E0;
      v17[4] = v16;
      objc_msgSend(v13, "activateWithCompletion:", v17);
      return swift_continuation_await(v14);
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(v0 + 128) + 88) = 0;
  }
  v19 = Logger.logObject.getter(v9);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to create CBConnection", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004AFFB8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_1004B00D4;
  else
    v2 = sub_1004B0018;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004B0018(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully activated CBConnection!!!", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(void **)(v1 + 144);
  v6 = *(_QWORD *)(v1 + 128);

  *(_BYTE *)(v6 + 88) = 1;
  sub_1004B0114();

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1004B00D4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004B0114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const char **v3;
  double v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];

  v1 = v0;
  v2 = *(_QWORD *)v0;
  if (!*(_QWORD *)(v0 + 72) || *(_BYTE *)(v0 + 88) != 1)
  {
LABEL_39:
    if (qword_1007B41B8 != -1)
      goto LABEL_47;
    goto LABEL_40;
  }
  v3 = (const char **)(v0 + 80);
  *(_QWORD *)&v4 = swift_beginAccess(v1 + 80, v30, 0, 0).n128_u64[0];
  while (1)
  {
    v5 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v5 < 0)
        v11 = (uint64_t)*v3;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v3, v4);
      v12 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease((const char *)v5);
      if (v12 < 1)
        return;
    }
    else if (*(uint64_t *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
    {
      return;
    }
    v6 = swift_beginAccess(v1 + 80, &v28, 33, 0).n128_u64[0];
    v2 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v2 < 0)
        v13 = (uint64_t)*v3;
      else
        v13 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v3, *(double *)&v6);
      v14 = _CocoaArrayWrapper.endIndex.getter(v13);
      v6 = swift_bridgeObjectRelease((const char *)v2).n128_u64[0];
      if (!v14)
        goto LABEL_45;
    }
    else if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_45;
    }
    v2 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v2 < 0)
        v15 = (uint64_t)*v3;
      else
        v15 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v3, *(double *)&v6);
      v16 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease((const char *)v2);
      if (!v16)
        goto LABEL_46;
    }
    else if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_46;
    }
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_14:
    v2 = (uint64_t)v7;
    v8 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v8 < 0)
        v17 = (uint64_t)*v3;
      else
        v17 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v3);
      v18 = _CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease((const char *)v8);
      if (!v18)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_38;
    }
    sub_10047778C(0, 1);
    swift_endAccess(&v28);
    v9 = *(void **)(v1 + 72);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v10, "writeWithCBWriteRequest:", v2);

    }
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = (char *)*(id *)(v2 + 32);
    goto LABEL_14;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_once(&qword_1007B41B8, sub_1004A9400);
LABEL_40:
  v19 = type metadata accessor for Logger(0);
  sub_100221DF8(v19, (uint64_t)qword_1007C28B0);
  v20 = swift_retain_n(v1, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v30[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v28 = v1;
    swift_retain();
    v25 = String.init<A>(describing:)(&v28, v2);
    v27 = (const char *)v26;
    v28 = sub_100228BD8(v25, v26, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v23 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: Not connected yet", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

unint64_t sub_1004B04B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  char **v26;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  double v41;
  void *v42;
  void (*v43)();
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  os_log_t v48;
  uint64_t v49;
  char **v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t result;
  const char *v57;
  const char *v58;
  NSString v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  Class isa;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t ObjectType;
  void (*v97)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v98;
  int v99;
  os_log_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t aBlock[3];
  void *v109;
  void (*v110)();
  uint64_t v111;

  v5 = v4;
  v103 = a1;
  v104 = a2;
  v8 = *v4;
  v9 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v12);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)v4[9];
  v101 = v8;
  if (v15
    && (v16 = objc_msgSend(v15, "peerDevice"),
        v17 = objc_msgSend(v16, "idsDeviceID"),
        v16,
        v17))
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = a3[3];
  v22 = a3[4];
  sub_10023A834(a3, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  v25 = v24;
  v26 = &selRef_handleStreamResponse_;
  v102 = a4;
  if (v20)
  {
    if (v24)
    {
      if (v18 == v23 && v20 == v24)
      {
        *(_QWORD *)&v41 = swift_bridgeObjectRelease(v20).n128_u64[0];
        swift_bridgeObjectRelease(v25, v41);
        goto LABEL_31;
      }
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v23, v24, 0);
      *(_QWORD *)&v29 = swift_bridgeObjectRelease(v20).n128_u64[0];
      swift_bridgeObjectRelease(v25, v29);
      if ((v28 & 1) != 0)
      {
LABEL_31:
        v67 = sub_1004B13F8(v103, v104, a3, a4);
        v69 = v68 >> 60;
        if (v68 >> 60 != 15)
        {
          v70 = v67;
          v71 = v68;
          v72 = objc_msgSend(objc_allocWithZone((Class)CBWriteRequest), v26[225]);
          v73 = sub_100008384(&qword_1007B86E0);
          v74 = swift_allocObject(v73, 48, 7);
          *(_OWORD *)(v74 + 16) = xmmword_1005CD2A0;
          *(_QWORD *)(v74 + 32) = v70;
          *(_QWORD *)(v74 + 40) = v71;
          sub_10022E4A8(v70, v71);
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v72, "setDataArray:", isa, swift_bridgeObjectRelease((const char *)v74).n128_f64[0]);

          v76 = swift_allocObject(&unk_10072B550, 32, 7);
          *(_QWORD *)(v76 + 16) = v70;
          *(_QWORD *)(v76 + 24) = v71;
          v110 = sub_1004B3B60;
          v111 = v76;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_10025BBB4;
          v109 = &unk_10072B568;
          v77 = _Block_copy(aBlock);
          v78 = v111;
          sub_10022E4A8(v70, v71);
          swift_release(v78);
          objc_msgSend(v72, "setCompletion:", v77);
          _Block_release(v77);
          swift_beginAccess(v5 + 10, aBlock, 33, 0);
          v79 = v72;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
          v80 = v5[10] & 0xFFFFFFFFFFFFFF8;
          v82 = *(_QWORD *)(v80 + 0x10);
          v81 = *(_QWORD *)(v80 + 24);
          if (v82 >= v81 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
          v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v79);
          specialized Array._endMutation()(v83);
          swift_endAccess(aBlock);
          sub_100225AA0(v70, v71);

          v84 = 0;
          goto LABEL_42;
        }
        if (qword_1007B41B8 != -1)
          swift_once(&qword_1007B41B8, sub_1004A9400);
        v85 = type metadata accessor for Logger(0);
        sub_100221DF8(v85, (uint64_t)qword_1007C28B0);
        v86 = swift_retain_n(v5, 2);
        v87 = Logger.logObject.getter(v86);
        v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc(12, -1);
          v90 = swift_slowAlloc(32, -1);
          aBlock[0] = v90;
          *(_DWORD *)v89 = 136315138;
          v105 = (uint64_t)v5;
          swift_retain();
          v91 = String.init<A>(describing:)(&v105, v101);
          v93 = (const char *)v92;
          v105 = sub_100228BD8(v91, v92, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v89 + 4);
          swift_release_n(v5, 2);
          swift_bridgeObjectRelease(v93);
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "%s: Error encrypting message", v89, 0xCu);
          swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v89, -1, -1);

          v94 = v5[4];
          if (v94)
          {
LABEL_39:
            v95 = v5[5];
            ObjectType = swift_getObjectType(v94);
            v97 = *(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v95 + 16);
            swift_unknownObjectRetain(v94);
            v84 = 1;
            v97(1, 0xD000000000000018, 0x800000010061D970, v103, v104, v102, ObjectType, v95);
            swift_unknownObjectRelease(v94);
LABEL_42:
            LOBYTE(aBlock[0]) = v69 < 0xF;
            return v84 | ((unint64_t)(v69 < 0xF) << 32);
          }
        }
        else
        {

          swift_release_n(v5, 2);
          v94 = v5[4];
          if (v94)
            goto LABEL_39;
        }
        v84 = 1;
        goto LABEL_42;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v20);
    }
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v30 = type metadata accessor for Logger(0);
    sub_100221DF8(v30, (uint64_t)qword_1007C28B0);
    sub_100244418((uint64_t)a3, (uint64_t)aBlock);
    v31 = swift_retain_n(v5, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, (os_log_type_t)v33))
    {
      v99 = v33;
      v100 = v32;
      v34 = swift_slowAlloc(22, -1);
      v98 = swift_slowAlloc(64, -1);
      v107 = v98;
      *(_DWORD *)v34 = 136315394;
      v35 = (void *)v5[9];
      if (v35
        && (v36 = objc_msgSend(v35, "peerDevice"),
            v37 = objc_msgSend(v36, "idsDeviceID"),
            v36,
            v37))
      {
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

      }
      else
      {
        v38 = 0xD000000000000015;
        v105 = 0;
        v106 = (const char *)0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v106);
        v40 = (const char *)0x8000000100612DF0;
      }
      v105 = sub_100228BD8(v38, (unint64_t)v40, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v34 + 4);
      swift_release_n(v5, 2);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v34 + 12) = 2080;
      v42 = v109;
      v43 = v110;
      sub_10023A834(aBlock, (uint64_t)v109);
      v44 = (*((uint64_t (**)(void *, void (*)()))v43 + 1))(v42, v43);
      if (v45)
      {
        v46 = v44;
        v47 = v45;
      }
      else
      {
        v46 = 0xD000000000000015;
        v105 = 0;
        v106 = (const char *)0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v106);
        v47 = (const char *)0x8000000100612DF0;
      }
      v105 = sub_100228BD8(v46, (unint64_t)v47, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v34 + 14);
      swift_bridgeObjectRelease(v47);
      sub_10022E75C(aBlock);
      v48 = v100;
      _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v99, "peer device changed from %s to %s. Invalidating old BT connection", (uint8_t *)v34, 0x16u);
      v49 = v98;
      swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v26 = &selRef_handleStreamResponse_;
    }
    else
    {
      swift_release_n(v5, 2);
      sub_10022E75C(aBlock);

    }
  }
  else
  {
    if (!v24)
      goto LABEL_31;
    swift_bridgeObjectRelease(v24);
  }
  v50 = v26;
  v51 = objc_msgSend(objc_allocWithZone((Class)CBDevice), v26[225]);
  v52 = a3[3];
  v53 = a3[4];
  sub_10023A834(a3, v52);
  (*(void (**)(uint64_t, uint64_t))(v53 + 48))(v52, v53);
  v54 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v54 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48))(v14, 1, v54);
  if ((_DWORD)result != 1)
  {
    UUID.uuidString.getter(result);
    v58 = v57;
    v59 = String._bridgeToObjectiveC()();
    v60 = swift_bridgeObjectRelease(v58);
    (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v14, v54, v60);
    objc_msgSend(v51, "setIdentifier:", v59);

    v61 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v11, 1, 1, v61);
    v62 = swift_allocObject(&unk_10072B528, 65, 7);
    *(_QWORD *)(v62 + 16) = 0;
    *(_QWORD *)(v62 + 24) = 0;
    *(_QWORD *)(v62 + 32) = v5;
    *(_QWORD *)(v62 + 40) = v51;
    v64 = v103;
    v63 = v104;
    *(_QWORD *)(v62 + 48) = v103;
    *(_QWORD *)(v62 + 56) = v63;
    v65 = v102;
    *(_BYTE *)(v62 + 64) = v102;
    swift_retain();
    sub_10022E4A8(v64, v63);
    v66 = sub_100252EC0((uint64_t)v11, (uint64_t)&unk_1007C31B8, v62);
    swift_release(v66);
    v26 = v50;
    a4 = v65;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B0E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  *(_BYTE *)(v8 + 168) = a8;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 96) = a7;
  *(_QWORD *)(v8 + 80) = a4;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v8 + 104) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 112) = v12;
  *(_QWORD *)(v8 + 120) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v8 + 128) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 136) = v14;
  *(_QWORD *)(v8 + 144) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_task_alloc(dword_1007C31CC);
  *(_QWORD *)(v8 + 152) = v15;
  *v15 = v8;
  v15[1] = sub_1004B0EEC;
  v15[15] = a5;
  v15[16] = a4;
  return swift_task_switch(sub_1004AFCD4, 0, 0);
}

uint64_t sub_1004B0EEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1004B0F6C, 0, 0);
  v5 = *(_QWORD *)(v3 + 120);
  swift_task_dealloc(*(_QWORD *)(v3 + 144));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1004B0F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 72) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CBConnection activation failed with error: %@. Is the other device running CBServer?", v8, 0xCu);
    v11 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 160));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(void **)(v12 + 72);
  if (v13)
  {
    objc_msgSend(v13, "invalidate");
    v12 = *(_QWORD *)(v0 + 80);
  }
  v14 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 120);
  v30 = *(_QWORD *)(v0 + 136);
  v31 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 112);
  v18 = *(_BYTE *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 96);
  v21 = swift_allocObject(&unk_10072B5A0, 49, 7);
  *(_QWORD *)(v21 + 16) = v12;
  *(_QWORD *)(v21 + 24) = v14;
  *(_QWORD *)(v21 + 32) = v19;
  *(_QWORD *)(v21 + 40) = v20;
  *(_BYTE *)(v21 + 48) = v18;
  *(_QWORD *)(v0 + 48) = sub_1004B3B9C;
  *(_QWORD *)(v0 + 56) = v21;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_10025BBB4;
  *(_QWORD *)(v0 + 40) = &unk_10072B5B8;
  v22 = _Block_copy((const void *)(v0 + 16));
  swift_errorRetain(v14);
  swift_retain();
  v23 = sub_10022E4A8(v19, v20);
  static DispatchQoS.unspecified.getter(v23);
  *(_QWORD *)(v0 + 64) = _swiftEmptyArrayStorage;
  v24 = sub_100220D78((unint64_t *)&qword_1007B6850, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100008384((uint64_t *)&unk_1007B6410);
  v26 = sub_100273050();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 64, v25, v26, v17, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v16, v22);
  _Block_release(v22);
  swift_errorRelease(v14);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v15, v31);
  swift_release(*(_QWORD *)(v0 + 56));
  v27 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B12B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t ObjectType;

  v5 = *(_QWORD *)(result + 32);
  if (v5)
  {
    v10 = *(_QWORD *)(result + 40);
    swift_unknownObjectRetain(*(_QWORD *)(result + 32));
    v11 = (void *)_convertErrorToNSError(_:)(a2);
    v12 = objc_msgSend(v11, "description");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = objc_msgSend(v11, "code");
    if (v16 == (id)-6722)
      v17 = 12;
    else
      v17 = 25;
    if (v16 == (id)-6727)
      v18 = 20;
    else
      v18 = v17;
    ObjectType = swift_getObjectType(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(v18, v13, v15, a3, a4, a5, ObjectType, v10);
    swift_bridgeObjectRelease(v15);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t sub_1004B13F8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  id v26;
  void *v27;
  NSData v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  double v32;
  const char *v33;
  NSString v34;
  id v35;
  id v36;
  void *v37;
  unsigned int v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  void (*v48)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  id v52;
  const char *v53;
  id v54;
  id v55[3];
  uint64_t v56;
  uint64_t v57;

  v5 = v4;
  v9 = *v4;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v10 = type metadata accessor for Logger(0);
  sub_100221DF8(v10, (uint64_t)qword_1007C28B0);
  sub_100244418((uint64_t)a3, (uint64_t)v55);
  v11 = swift_retain_n(v4, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v50 = a2;
    v14 = a4;
    v15 = swift_slowAlloc(22, -1);
    v16 = (void *)swift_slowAlloc(64, -1);
    v54 = v16;
    *(_DWORD *)v15 = 136315394;
    v52 = v4;
    swift_retain();
    v17 = String.init<A>(describing:)(&v52, v9);
    v19 = (const char *)v18;
    v52 = (id)sub_100228BD8(v17, v18, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v15 + 4);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2080;
    v20 = v56;
    v21 = v57;
    sub_10023A834(v55, v56);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
    if (v23)
    {
      v24 = v22;
      v25 = v23;
    }
    else
    {
      v24 = 0xD000000000000015;
      v52 = 0;
      v53 = (const char *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v53);
      v25 = (const char *)0x8000000100612DF0;
    }
    v52 = (id)sub_100228BD8(v24, (unint64_t)v25, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v15 + 14);
    swift_bridgeObjectRelease(v25);
    sub_10022E75C(v55);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: Beginning encryption with key for device %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    a4 = v14;
    a2 = v50;
  }
  else
  {
    swift_release_n(v4, 2);
    sub_10022E75C(v55);

  }
  v26 = objc_msgSend((id)objc_opt_self(SDAutoUnlockAKSManager), "sharedManager");
  if (!v26)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
LABEL_21:
    v45 = v5[4];
    if (v45)
    {
      v46 = v5[5];
      ObjectType = swift_getObjectType(v5[4]);
      v48 = *(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 16);
      swift_unknownObjectRetain(v45);
      v48(1, 0xD000000000000019, 0x800000010061D990, a1, a2, a4, ObjectType, v46);
      swift_unknownObjectRelease(v45);
    }
    goto LABEL_23;
  }
  v27 = v26;
  v28.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v29 = a3[3];
  v30 = a3[4];
  sub_10023A834(a3, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  if (v31)
  {
    v33 = v31;
    v34 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v32 = swift_bridgeObjectRelease(v33).n128_u64[0];
  }
  else
  {
    v34 = 0;
  }
  v54 = 0;
  v55[0] = 0;
  v52 = 0;
  v38 = objc_msgSend(v27, "encryptMessageData:deviceID:encryptedMessage:authTag:nonce:", v28.super.isa, v34, v55, &v52, &v54, v32);

  v35 = v54;
  v36 = v52;
  v39 = v55[0];
  v37 = v39;
  if (!v38 || !v39 || !v36 || !v35)
    goto LABEL_21;
  v40 = objc_msgSend(objc_allocWithZone((Class)SDAutoUnlockSessionWrapper), "init");
  if (!v40)
  {
LABEL_23:

    return 0;
  }
  v41 = v40;
  objc_msgSend(v40, "setEncryptedPayload:", v37);
  objc_msgSend(v41, "setAuthTag:", v36);
  objc_msgSend(v41, "setNonce:", v35);
  objc_msgSend(v41, "setMessageType:", a4 + 2006);
  v42 = objc_msgSend(v41, "data");
  if (!v42)
  {

    return 0;
  }
  v43 = v42;
  v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);

  return v44;
}

void sub_1004B1900(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v4 = type metadata accessor for Logger(0);
  sub_100221DF8(v4, (uint64_t)qword_1007C28B0);
  sub_10022E4A8(a1, a2);
  v5 = sub_10022E4A8(a1, a2);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_10022E4A8(a1, a2);
    v9 = Data.description.getter(a1, a2);
    v11 = v10;
    sub_100225AB4(a1, a2);
    v13 = sub_100228BD8(v9, (unint64_t)v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4);
    swift_bridgeObjectRelease(v11);
    sub_100225AB4(a1, a2);
    sub_100225AB4(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Wrote data %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    sub_100225AB4(a1, a2);
    sub_100225AB4(a1, a2);

  }
}

id sub_1004B1B14()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  id result;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v3 = type metadata accessor for Logger(0);
  sub_100221DF8(v3, (uint64_t)qword_1007C28B0);
  v4 = swift_retain_n(v0, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (!os_log_type_enabled(v5, v6))
  {

    swift_release_n(v1, 2);
    result = (id)v1[9];
    if (!result)
      return result;
    return objc_msgSend(result, "invalidate");
  }
  v7 = (uint8_t *)swift_slowAlloc(12, -1);
  v8 = swift_slowAlloc(32, -1);
  v13 = (uint64_t)v1;
  v14 = v8;
  *(_DWORD *)v7 = 136315138;
  swift_retain();
  v9 = String.init<A>(describing:)(&v13, v2);
  v11 = (const char *)v10;
  v13 = sub_100228BD8(v9, v10, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4);
  swift_release_n(v1, 2);
  swift_bridgeObjectRelease(v11);
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Disconnecting", v7, 0xCu);
  swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v7, -1, -1);

  result = (id)v1[9];
  if (result)
    return objc_msgSend(result, "invalidate");
  return result;
}

uint64_t sub_1004B1CE4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 64));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocClassInstance(v0, 89, 7);
}

uint64_t type metadata accessor for SDAuthenticationTransportCoreBluetooth()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary38SDAuthenticationTransportCoreBluetooth);
}

uint64_t sub_1004B1D50(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;

  v4 = sub_1004B04B4(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1004B1D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isCancelled;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  if (!v2
    || (v3 = swift_retain(v2),
        isCancelled = swift_task_isCancelled(v3),
        result = swift_release(v2),
        (isCancelled & 1) == 0))
  {
    if (qword_1007B41B8 != -1)
      swift_once(&qword_1007B41B8, sub_1004A9400);
    v6 = type metadata accessor for Logger(0);
    sub_100221DF8(v6, (uint64_t)qword_1007C28B0);
    v7 = swift_retain_n(v1, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v1;
      v19 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = type metadata accessor for ResponseTimer();
      swift_retain(v1);
      v13 = String.init<A>(describing:)(&v18, v12);
      v15 = (const char *)v14;
      v18 = sub_100228BD8(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Timer cancelled", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      v16 = *(_QWORD *)(v1 + 32);
      if (v16)
      {
LABEL_7:
        swift_retain(v16);
        Task.cancel()();
        swift_release(v16);
        v17 = *(_QWORD *)(v1 + 32);
LABEL_10:
        *(_QWORD *)(v1 + 32) = 0;
        return swift_release(v17);
      }
    }
    else
    {

      swift_release_n(v1, 2);
      v16 = *(_QWORD *)(v1 + 32);
      if (v16)
        goto LABEL_7;
    }
    v17 = 0;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1004B1FA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for ContinuousClock.Instant(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  v6 = type metadata accessor for ContinuousClock(0);
  v2[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[13] = v7;
  v2[14] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004B2040, 0, 0);
}

uint64_t sub_1004B2040(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)(v1[7] + 32))
    a1 = sub_1004B1D7C();
  ContinuousClock.init()(a1);
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v2 = v1[7];
  v3 = type metadata accessor for Logger(0);
  v1[15] = sub_100221DF8(v3, (uint64_t)qword_1007C28B0);
  v4 = swift_retain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v1[7];
  if (v7)
  {
    v23 = v1[6];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v24 = v10;
    *(_DWORD *)v9 = 136315394;
    v1[3] = v8;
    v11 = type metadata accessor for ResponseTimer();
    swift_retain(v8);
    v12 = String.init<A>(describing:)(v1 + 3, v11);
    v14 = (const char *)v13;
    v1[4] = sub_100228BD8(v12, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v9 + 4);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v8, 2);
    *(_WORD *)(v9 + 12) = 2048;
    v1[5] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Starting timer for %ld sec", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release_n(v1[7], 2);
  }

  v15 = v1[10];
  v16 = v1[8];
  v17 = v1[9];
  v18 = v1[6];
  static ContinuousClock.now.getter(v19);
  ContinuousClock.Instant.advanced(by:)(1000000000000000000 * v18, ((v18 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v18 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64));
  v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v1[16] = v20;
  v20(v15, v16);
  v21 = (_QWORD *)swift_task_alloc(async function pointer to ContinuousClock.sleep(until:tolerance:)[1]);
  v1[17] = v21;
  *v21 = v1;
  v21[1] = sub_1004B22EC;
  return ContinuousClock.sleep(until:tolerance:)(v1[11], 0, 0, 1);
}

uint64_t sub_1004B22EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    v6 = sub_1004B23E0;
  else
    v6 = sub_1004B236C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1004B236C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  sub_1004B25A0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B23E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 144);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 144);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ran into error creating timer: %@", v6, 0xCu);
    v9 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 144);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v12 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 80);
  sub_1004B25A0();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004B25A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C28B0);
  v3 = swift_retain_n(v0, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (!os_log_type_enabled(v4, v5))
  {

    swift_release_n(v1, 2);
    v12 = *(_QWORD *)(v1 + 16);
    if (!v12)
      return;
    goto LABEL_7;
  }
  v6 = (uint8_t *)swift_slowAlloc(12, -1);
  v7 = swift_slowAlloc(32, -1);
  v13 = v1;
  v14 = v7;
  *(_DWORD *)v6 = 136315138;
  v8 = type metadata accessor for ResponseTimer();
  swift_retain(v1);
  v9 = String.init<A>(describing:)(&v13, v8);
  v11 = (const char *)v10;
  v13 = sub_100228BD8(v9, v10, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4);
  swift_release_n(v1, 2);
  swift_bridgeObjectRelease(v11);
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Timer fired", v6, 0xCu);
  swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

  v12 = *(_QWORD *)(v1 + 16);
  if (v12)
  {
LABEL_7:
    swift_unknownObjectRetain(v12);
    sub_1003651D4();
    swift_unknownObjectRelease(v12);
  }
}

uint64_t sub_1004B277C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ResponseTimer()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary13ResponseTimer);
}

uint64_t storeEnumTagSinglePayload for SDAuthenticationTransportType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1004B2814 + 4 * byte_1005DAA5F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1004B2848 + 4 * byte_1005DAA5A[v4]))();
}

uint64_t sub_1004B2848(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004B2850(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004B2858);
  return result;
}

uint64_t sub_1004B2864(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004B286CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1004B2870(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004B2878(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDAuthenticationTransportType()
{
  return &type metadata for SDAuthenticationTransportType;
}

unint64_t sub_1004B2898()
{
  unint64_t result;

  result = qword_1007C3178;
  if (!qword_1007C3178)
  {
    result = swift_getWitnessTable(&unk_1005DAE28, &type metadata for SDAuthenticationTransportType);
    atomic_store(result, (unint64_t *)&qword_1007C3178);
  }
  return result;
}

char *sub_1004B28DC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  objc_class *ObjectType;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  id v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  objc_super v67;

  ObjectType = (objc_class *)swift_getObjectType(a8);
  v17 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate];
  *((_QWORD *)v17 + 1) = 0;
  swift_unknownObjectWeakInit(v17, 0);
  *(_QWORD *)&a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_queue] = a1;
  v18 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport];
  *(_QWORD *)v18 = a2;
  *((_QWORD *)v18 + 1) = &off_10072B2D8;
  v19 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = &off_10072B298;
  v20 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport];
  *(_QWORD *)v20 = a4;
  *((_QWORD *)v20 + 1) = &off_10072B258;
  v21 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT];
  *(_QWORD *)v21 = a5;
  *((_QWORD *)v21 + 1) = &off_10072B218;
  v64 = a5;
  v65 = a7;
  v22 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL];
  *(_QWORD *)v22 = a6;
  *((_QWORD *)v22 + 1) = &off_10072B218;
  v23 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport];
  *(_QWORD *)v23 = a7;
  *((_QWORD *)v23 + 1) = &off_10072B1D8;
  v24 = type metadata accessor for SDAuthenticationTransportRapportReceiver();
  swift_allocObject(v24, 40, 7);
  v25 = a1;
  v26 = a8;
  swift_retain(a2);
  v66 = a3;
  v63 = a4;
  swift_retain(a5);
  swift_retain(a6);
  swift_retain(a7);
  v27 = v25;
  *(_QWORD *)&v26[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportReceiver] = sub_1004B2FE0((uint64_t)v25);

  v67.receiver = v26;
  v67.super_class = ObjectType;
  v28 = (char *)objc_msgSendSuper2(&v67, "init");
  v29 = *(_QWORD *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport];
  v30 = *(_QWORD *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport + 8];
  v31 = swift_getObjectType(v29);
  v32 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v30 + 16);
  v33 = v28;
  swift_unknownObjectRetain(v29);
  v32(v28, &off_10072B318, v31, v30);
  swift_unknownObjectRelease(v29);
  v34 = *(_QWORD *)&v33[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport];
  v35 = *(_QWORD *)&v33[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport + 8];
  v36 = swift_getObjectType(v34);
  v37 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v35 + 16);
  v38 = v33;
  swift_unknownObjectRetain(v34);
  v37(v28, &off_10072B318, v36, v35);
  swift_unknownObjectRelease(v34);
  v39 = *(_QWORD *)&v38[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport];
  v40 = *(_QWORD *)&v38[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport + 8];
  v41 = swift_getObjectType(v39);
  v42 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v40 + 16);
  v43 = v38;
  swift_unknownObjectRetain(v39);
  v42(v28, &off_10072B318, v41, v40);
  swift_unknownObjectRelease(v39);
  v44 = *(_QWORD *)&v43[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT];
  v45 = *(_QWORD *)&v43[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT + 8];
  v46 = swift_getObjectType(v44);
  v47 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v45 + 16);
  v48 = v43;
  swift_unknownObjectRetain(v44);
  v47(v28, &off_10072B318, v46, v45);
  swift_unknownObjectRelease(v44);
  v49 = *(_QWORD *)&v48[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL];
  v50 = *(_QWORD *)&v48[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL + 8];
  v51 = swift_getObjectType(v49);
  v52 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v50 + 16);
  v53 = v48;
  swift_unknownObjectRetain(v49);
  v52(v28, &off_10072B318, v51, v50);
  swift_unknownObjectRelease(v49);
  v54 = *(_QWORD *)&v53[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport];
  v55 = *(_QWORD *)&v53[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport + 8];
  v56 = swift_getObjectType(v54);
  v57 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v55 + 16);
  v58 = v53;
  swift_unknownObjectRetain(v54);
  v57(v28, &off_10072B318, v56, v55);
  swift_unknownObjectRelease(v54);

  swift_release(a2);
  swift_release(v64);
  swift_release(a6);
  swift_release(v65);
  v59 = *(_QWORD *)&v58[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportReceiver];
  v60 = *(_QWORD *)(v59 + 16);
  *(_QWORD *)(v59 + 16) = v28;
  *(_QWORD *)(v59 + 24) = &off_10072B318;
  v61 = v58;
  swift_unknownObjectRelease(v60);
  return v61;
}

uint64_t sub_1004B2CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  uint64_t v38;
  uint64_t v39[2];
  _QWORD v40[5];

  v40[3] = a7;
  v40[4] = a8;
  v14 = sub_100244348(v40);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v14, a3, a7);
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100221DF8(v15, (uint64_t)qword_1007C28B0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "TransportManager: sending", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v39[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = sub_1003FDF2C(a4);
    v26 = a5;
    v28 = v27;
    v38 = sub_100228BD8(v25, v27, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v23 + 4);
    v29 = v28;
    a5 = v26;
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "TransportManager: sending message of type: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }

  v30 = (_QWORD *)(a6 + *off_10072B7D8[a5]);
  v31 = *v30;
  v32 = v30[1];
  ObjectType = swift_getObjectType(*v30);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(v32 + 48);
  swift_unknownObjectRetain(v31);
  v35 = v34(a1, a2, v40, a4, ObjectType, v32);
  swift_unknownObjectRelease(v31);
  sub_10022E75C(v40);
  return v35 | ((HIDWORD(v35) & 1) << 32);
}

uint64_t sub_1004B2F60(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;

  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  *(_BYTE *)(v1 + 24) = 0;
  v3 = objc_allocWithZone((Class)CBServer);
  v4 = a1;
  v5 = objc_msgSend(v3, "init");
  *(_QWORD *)(v1 + 80) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 56) = sub_1004AA218;
  *(_QWORD *)(v1 + 64) = 0;
  sub_1004AE304();
  return v1;
}

_QWORD *sub_1004B2FE0(uint64_t a1)
{
  _QWORD *v1;
  id v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[6];

  v1[2] = 0;
  v1[3] = 0;
  v3 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
  v1[4] = v3;
  objc_msgSend(v3, "setDispatchQueue:", a1);
  v4 = 11;
  v5 = (unsigned __int8 *)&byte_10071C908;
  do
  {
    v6 = *v5++;
    sub_1004AC080(v6);
    --v4;
  }
  while (v4);
  v7 = (void *)v1[4];
  v11[4] = sub_1004ABDFC;
  v11[5] = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1002D6B08;
  v11[3] = &unk_10072B338;
  v8 = _Block_copy(v11);
  v9 = v7;
  objc_msgSend(v9, "activateWithCompletion:", v8);
  _Block_release(v8);

  return v1;
}

char *sub_1004B30D0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  char *v29;

  v2 = type metadata accessor for SDAuthenticationTransportNearbyAgent();
  v3 = swift_allocObject(v2, 64, 7);
  v4 = a1;
  sub_1004AA120(v4);
  v5 = objc_allocWithZone((Class)type metadata accessor for SDAuthenticationTransportIDSServiceLocal());
  v6 = v4;
  sub_1004AB178(v6, 0xD000000000000027, 0x800000010061D8E0);
  v8 = v7;
  v9 = objc_allocWithZone((Class)type metadata accessor for SDAuthenticationTransportIDSServiceInternet());
  v10 = v6;
  sub_1004AB178(v10, 0xD000000000000029, 0x800000010061D910);
  v12 = v11;
  v13 = type metadata accessor for SDAuthenticationTransportRapportBTOnly();
  v14 = swift_allocObject(v13, 72, 7);
  *(_BYTE *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  v15 = objc_allocWithZone((Class)RPCompanionLinkClient);
  v16 = v10;
  v17 = objc_msgSend(v15, "init");
  *(_QWORD *)(v14 + 48) = v17;
  *(_QWORD *)(v14 + 16) = v16;
  *(_BYTE *)(v14 + 24) = 0;
  objc_msgSend(v17, "setDispatchQueue:", v16);
  *(_QWORD *)(v14 + 64) = 0x40000600102;
  v18 = type metadata accessor for SDAuthenticationTransportRapportAWDLOnly();
  v19 = swift_allocObject(v18, 72, 7);
  *(_BYTE *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  v20 = objc_allocWithZone((Class)RPCompanionLinkClient);
  v21 = v16;
  v22 = objc_msgSend(v20, "init");
  *(_QWORD *)(v19 + 48) = v22;
  *(_QWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 24) = 0;
  objc_msgSend(v22, "setDispatchQueue:", v21);
  *(_QWORD *)(v19 + 64) = 0x8040000220002;
  v23 = type metadata accessor for SDAuthenticationTransportCoreBluetooth();
  swift_allocObject(v23, 89, 7);
  v24 = v21;
  v25 = sub_1004B2F60(v24);

  v26 = (char *)objc_allocWithZone((Class)type metadata accessor for SDAuthenticationTransportManager());
  swift_retain(v3);
  v27 = v8;
  v28 = v12;
  swift_retain(v14);
  swift_retain(v19);
  swift_retain(v25);
  v29 = sub_1004B28DC(v24, v3, v27, v28, v14, v19, v25, v26);
  swift_release(v25);
  swift_release(v19);
  swift_release(v14);

  swift_release(v3);
  return v29;
}

uint64_t sub_1004B3334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004B3344(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1004B334C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004B3370(void *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  return sub_1004AE524(a1, a2, a3, v3);
}

uint64_t sub_1004B3378()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004B339C(uint64_t a1)
{
  uint64_t v1;

  sub_1004AED0C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1004B33A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1004B33D8()
{
  uint64_t v0;

  sub_1004AEFC0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t sub_1004B33E4(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  NSObject *v15;
  NSData v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  double v20;
  const char *v21;
  NSString v22;
  NSObject *v23;
  NSObject *v24;
  unsigned int v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t result;
  Class isa;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  Class v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  os_log_type_t v51;
  uint8_t *v52;
  NSObject *v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  id aBlock[6];
  id v58;
  id v59;

  v6 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B41B8 != -1)
    swift_once(&qword_1007B41B8, sub_1004A9400);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100221DF8(v9, (uint64_t)qword_1007C28B0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Beginning encryption", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = objc_msgSend((id)objc_opt_self(SDAutoUnlockAKSManager), "sharedManager");
  v15 = v14;
  if (!v14)
  {
    v23 = 0;
    v24 = 0;
    goto LABEL_20;
  }
  v16.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v17 = a3[3];
  v18 = a3[4];
  sub_10023A834(a3, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  if (v19)
  {
    v21 = v19;
    v22 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v21).n128_u64[0];
  }
  else
  {
    v22 = 0;
  }
  aBlock[0] = 0;
  v58 = 0;
  v59 = 0;
  v25 = -[NSObject encryptMessageData:deviceID:encryptedMessage:authTag:nonce:](v15, "encryptMessageData:deviceID:encryptedMessage:authTag:nonce:", v16.super.isa, v22, aBlock, &v59, &v58, v20);

  v23 = v58;
  v24 = v59;
  v14 = aBlock[0];
  v15 = v14;
  if (!v25 || !v14 || !v24 || !v23)
  {
LABEL_20:
    v48 = Logger.logObject.getter(v14);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error converting message to data", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }
    goto LABEL_26;
  }
  v26 = objc_msgSend(objc_allocWithZone((Class)SDAutoUnlockSessionWrapper), "init");
  v27 = v26;
  if (!v26
    || (-[NSObject setEncryptedPayload:](v26, "setEncryptedPayload:", v15),
        -[NSObject setAuthTag:](v27, "setAuthTag:", v24),
        -[NSObject setNonce:](v27, "setNonce:", v23),
        -[NSObject setMessageType:](v27, "setMessageType:", a4 + 2006),
        (v26 = -[NSObject data](v27, "data")) == 0))
  {
    v48 = Logger.logObject.getter(v26);
    v51 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v51, "Error encrypting message", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
      v53 = v27;
    }
    else
    {
      v53 = v48;
      v48 = v27;
    }

LABEL_26:
    v47 = 0;
    v46 = 10;
LABEL_27:

    LOBYTE(aBlock[0]) = v47;
    return v46 | ((unint64_t)v47 << 32);
  }
  v28 = v26;
  v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v55 = v30;
  v56 = v29;

  v54 = objc_msgSend(objc_allocWithZone((Class)SFBLEDevice), "init");
  v32 = a3[3];
  v31 = a3[4];
  sub_10023A834(a3, v32);
  (*(void (**)(uint64_t, uint64_t))(v31 + 48))(v32, v31);
  v33 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v33 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v8, 1, v33);
  if ((_DWORD)result != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v33);
    v37 = v54;
    objc_msgSend(v54, "setIdentifier:", isa);

    v38 = Logger.logObject.getter(objc_msgSend(v37, "setUseBTPipe:", 1));
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Sending data", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = objc_msgSend((id)objc_opt_self(SDNearbyAgent), "sharedNearbyAgent");
    v43 = v55;
    v42 = v56;
    v44 = Data._bridgeToObjectiveC()().super.isa;
    aBlock[4] = sub_1004AA25C;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1002D6B08;
    aBlock[3] = &unk_10072B4F0;
    v45 = _Block_copy(aBlock);
    objc_msgSend(v41, "sendUnlockData:toBLEDevice:completion:", v44, v37, v45);
    _Block_release(v45);

    sub_100225AB4(v42, v43);
    v46 = 0;
    v47 = 1;
    v48 = v15;
    v15 = v24;
    v24 = v23;
    v23 = v27;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B39F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004B3A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1004A9F60(*(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1004B3A20()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(const char **)(v0 + 40));
  sub_100225AB4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_1004B3A54()
{
  uint64_t v0;

  return sub_1004A9BEC(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1004B3A6C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  sub_100225AB4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_1004B3AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_1007C31B4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10000D12C;
  return sub_1004B0E2C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1004B3B3C()
{
  uint64_t v0;

  sub_100225AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1004B3B60()
{
  uint64_t v0;

  sub_1004B1900(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1004B3B68()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_errorRelease(v0[3]);
  sub_100225AB4(v0[4], v0[5]);
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1004B3B9C()
{
  uint64_t v0;

  return sub_1004B12B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

unint64_t sub_1004B3BAC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10071D208, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

void sub_1004B3BF4(void *a1, void *a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Strong;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  uint64_t ObjectType;
  uint64_t v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;

  v5 = v4;
  v66 = a1;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_1007B41B8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B41B8, sub_1004A9400);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100221DF8(v16, (uint64_t)qword_1007C28B0);
  v18 = a2;
  swift_bridgeObjectRetain_n(a4, 2);
  v19 = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v65 = v5;
    v23 = v22;
    v62 = (_QWORD *)swift_slowAlloc(8, -1);
    v63 = swift_slowAlloc(32, -1);
    v67 = (uint64_t)v19;
    v68 = v63;
    *(_DWORD *)v23 = 138412546;
    v64 = v17;
    v24 = a4;
    v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v23 + 4);
    v26 = v62;
    *v62 = v19;

    a4 = v24;
    *(_WORD *)(v23 + 12) = 2080;
    swift_bridgeObjectRetain(v24);
    v67 = sub_100228BD8(a3, (unint64_t)v24, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v23 + 14);
    swift_bridgeObjectRelease_n(v24, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received: %@ from: %s", (uint8_t *)v23, 0x16u);
    v27 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v26, 1, v27);
    swift_slowDealloc(v26, -1, -1);
    v28 = v63;
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v29 = v23;
    v5 = v65;
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v30 = objc_msgSend(v19, "type");
  v31 = v30;
  v32 = sub_1003FE934(v30);
  if (v32 == 11)
  {
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(6, -1);
      *(_DWORD *)v35 = 33554688;
      LOWORD(v68) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 2, v35 + 4);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Received unknown message type %hu", v35, 6u);
      swift_slowDealloc(v35, -1, -1);
    }

  }
  else
  {
    v36 = v32;
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v66, "deviceForFromID:", v37);

    if (v38)
    {
      v40 = v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate;
      Strong = swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate, v39);
      if (Strong)
      {
        v42 = Strong;
        v43 = *(_QWORD *)(v40 + 8);
        v44 = objc_msgSend(v19, "data");
        if (v44)
        {
          v45 = v44;
          v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v48 = v47;

          v49 = objc_msgSend(v38, "uniqueIDOverride");
          if (v49)
          {
            v50 = v49;
            ObjectType = swift_getObjectType(v42);
            v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
            v54 = v53;

            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t))(v43 + 8))(v46, v48, v36, v52, v54, ObjectType, v43);
            swift_bridgeObjectRelease(v54);

            swift_unknownObjectRelease(v42);
            sub_100225AB4(v46, v48);
            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
      }
      else
      {

      }
    }
    else
    {
      v55 = swift_bridgeObjectRetain_n(a4, 2);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, (os_log_type_t)v57))
      {
        v58 = a3;
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        v60 = swift_slowAlloc(32, -1);
        v68 = v60;
        *(_DWORD *)v59 = 136315138;
        swift_bridgeObjectRetain(a4);
        v67 = sub_100228BD8(v58, (unint64_t)a4, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v59 + 4);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v57, "Could not find same account device matching fromID %s", v59, 0xCu);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
    }
  }
}

void sub_1004B41E4(uint64_t a1, const char *a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    if (qword_1007B41B8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1007B41B8, sub_1004A9400);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  sub_100221DF8(v13, (uint64_t)qword_1007C28B0);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(18, -1);
    v18 = swift_slowAlloc(32, -1);
    v20 = v18;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain(a2);
    v19 = sub_100228BD8(a1, (unint64_t)a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v17 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v19) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 4, v17 + 14);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received confirmation that message: %s sent success: %{BOOL}d", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
}

uint64_t sub_1004B442C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100225AB4(v0[3], v0[4]);
  return swift_deallocObject(v0, 41, 7);
}

void sub_1004B4458(uint64_t a1)
{
  uint64_t v1;

  sub_1004AD624(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

void sub_1004B4468()
{
  uint64_t v0;

  sub_1004ACD04(v0);
}

uint64_t sub_1004B4470()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100225AB4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(const char **)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004B44A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1004ACDDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(const char **)(v1 + 56));
}

uint64_t sub_1004B44B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1004B44DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004AC2E8(a1, a2, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_1004B44E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007C3200;
  if (!qword_1007C3200)
  {
    v1 = sub_10021FF9C(&qword_1007B54E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1007C3200);
  }
  return result;
}

uint64_t sub_1004B4544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008384(&qword_1007B7280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B458C()
{
  uint64_t v0;

  sub_100225AB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1004B45C0()
{
  uint64_t v0;

  sub_1004AAC2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1004B464C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C3220);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C3220);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1004B4804(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  v5 = (_QWORD *)(a1 + *a3);
  if (!*v5)
    return 0;
  v6 = v5[1];
  v10[4] = *v5;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = a4;
  v10[3] = a5;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(v6);
  swift_release(v8);
  return v7;
}

__n128 sub_1004B488C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(const char *);
  uint64_t v5;
  const char *v6;

  v4 = *(void (**)(const char *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_100008384(&qword_1007C3470);
  v6 = (const char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain();
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

void sub_1004B4958(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_100008384(&qword_1007C3470);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

char *sub_1004B4B20(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  objc_class *ObjectType;
  objc_super v31;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v8 = type metadata accessor for SFAirDropClient.Identifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR___SDShareSheetAirDropController_browser] = 0;
  v12 = &v3[OBJC_IVAR___SDShareSheetAirDropController_realName];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v3[OBJC_IVAR___SDShareSheetAirDropController_currentTransferID];
  v14 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR___SDShareSheetAirDropController_helperConnection], 0);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR___SDShareSheetAirDropController_delegate], 0);
  v15 = OBJC_IVAR___SDShareSheetAirDropController_lockStateMonitor;
  v16 = type metadata accessor for SFLockStateMonitor(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = v4;
  *(_QWORD *)&v4[v15] = SFLockStateMonitor.init()();
  v18 = &v17[OBJC_IVAR___SDShareSheetAirDropController_transferUpdateChangedHandler];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v19 = &v17[OBJC_IVAR___SDShareSheetAirDropController_availableNodesChangedHandler];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v17[OBJC_IVAR___SDShareSheetAirDropController_availableNodes] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v17[OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask] = 0;
  v20 = &v17[OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction];
  v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = &v17[OBJC_IVAR___SDShareSheetAirDropController_sessionID];
  *(_QWORD *)v22 = a1;
  *((_QWORD *)v22 + 1) = a2;
  *(_QWORD *)&v17[OBJC_IVAR___SDShareSheetAirDropController_queue] = a3;
  type metadata accessor for SFAirDropClient(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for SFAirDropClient.Identifier.shareSheet(_:), v8);
  v23 = a3;
  *(_QWORD *)&v17[OBJC_IVAR___SDShareSheetAirDropController_airDropClient] = SFAirDropClient.__allocating_init(identifier:)(v11);

  v31.receiver = v17;
  v31.super_class = ObjectType;
  v24 = (char *)objc_msgSendSuper2(&v31, "init");
  v25 = *(_QWORD *)&v24[OBJC_IVAR___SDShareSheetAirDropController_lockStateMonitor];
  v26 = sub_100220D78((unint64_t *)&unk_1007C3480, type metadata accessor for ShareSheetAirDropController, (uint64_t)&unk_1005DAFB0);
  v27 = v24;
  swift_retain();
  dispatch thunk of SFLockStateMonitor.delegate.setter(v24, v26);

  swift_release(v25);
  return v27;
}

uint64_t sub_1004B4DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = sub_100008384(&qword_1007B68A0);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NWBrowser.Descriptor(0);
  v6[6] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[7] = v9;
  v6[8] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWBrowser.Descriptor.Options.Scope(0);
  v6[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWBrowser.Descriptor.Options(0);
  v6[10] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[11] = v12;
  v6[12] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004B4EF4, static AirDropActor.shared, 0);
}

uint64_t sub_1004B4EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR___SDShareSheetAirDropController_browser;
  if (*(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_browser))
  {
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100221DF8(v3, (uint64_t)qword_1007C3220);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "We already have a AirDrop browser for Share Sheet, ignoring", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD **)(v0 + 64);
    v42 = *(_QWORD *)(v0 + 56);
    v43 = *(_QWORD *)(v0 + 48);
    v13 = *(_QWORD *)(v0 + 24);
    v14 = *(_QWORD *)(v0 + 32);
    type metadata accessor for NWParameters(0);
    v15 = static NWParameters.airDropClientBrowserParameters(domain:type:bundleID:)(0xD000000000000011, 0x800000010061E080, 0xD000000000000013, 0x800000010061E0A0, v13, v14);
    static NWBrowser.Descriptor.Options.Scope.all.getter();
    NWBrowser.Descriptor.Options.init(scope:)(v11);
    NWBrowser.Descriptor.Options.applicationServiceEndpointsOnly.setter(1);
    v16 = (char *)v12 + *(int *)(sub_100008384(&qword_1007C3460) + 48);
    *v12 = 0x706F7264726961;
    v12[1] = 0xE700000000000000;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v9, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v42 + 104))(v12, enum case for NWBrowser.Descriptor.applicationServiceWithOptions(_:), v43);
    v17 = type metadata accessor for NWBrowser(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    swift_retain();
    v18 = NWBrowser.init(for:using:)(v12, v15);
    v19 = *(_QWORD *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v18;
    swift_release(v19);
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100221DF8(v20, (uint64_t)qword_1007C3220);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Activating AirDrop browser for share sheet", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = *(_QWORD *)(v1 + v2);
    if (v25)
    {
      v26 = *(_QWORD *)(v0 + 16);
      v27 = swift_allocObject(&unk_10072B8C0, 24, 7);
      swift_unknownObjectWeakInit(v27 + 16, v26);
      swift_retain();
      swift_retain();
      NWBrowser.browseResultsChangedHandler.setter(sub_1004BC578, v27);
      swift_release(v25);
      swift_release(v27);
      v28 = *(_QWORD *)(v1 + v2);
      if (v28)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___SDShareSheetAirDropController_queue);
        swift_retain();
        NWBrowser.start(queue:)(v29);
        swift_release(v28);
      }
    }
    v31 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 80);
    v33 = *(_QWORD *)(v0 + 40);
    v34 = *(void **)(v0 + 16);
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v33, 1, 1, v35);
    v36 = (_QWORD *)swift_allocObject(&unk_10072BA00, 40, 7);
    v36[2] = 0;
    v36[3] = 0;
    v36[4] = v34;
    v34;
    v37 = sub_100252AF4(v33, (uint64_t)&unk_1007C3468, (uint64_t)v36);
    swift_release(v37);
    sub_1004B9ACC();
    swift_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  }
  v38 = *(_QWORD *)(v0 + 64);
  v39 = *(_QWORD *)(v0 + 72);
  v40 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v39);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004B5318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4, v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    sub_1004B5370(a1);

  }
}

void sub_1004B5370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  int64_t v25;
  unint64_t v26;
  unint64_t i;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  void (*v39)(char *, uint64_t);
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *Strong;
  id v51;
  char *v52;
  unint64_t v53;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  NSObject *v61;
  int v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint8_t *v79;
  os_log_t v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  double v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  const char *v96;
  double v97;
  void (*v98)(__n128);
  uint64_t v99;
  const char *v100;
  __n128 v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  int v112;
  _DWORD *v113;
  os_log_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  int64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127[3];
  uint64_t v128;
  const char *v129;
  char v130[8];
  const char *v131;

  v108 = type metadata accessor for UUID(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v104 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008384(&qword_1007B7280);
  v5 = __chkstk_darwin(v4);
  v106 = (uint64_t)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v115 = (uint64_t)&v102 - v7;
  v8 = type metadata accessor for NWEndpoint(0);
  v122 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v123 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v125 = (char *)&v102 - v11;
  v12 = type metadata accessor for NWBrowser.Result(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v121 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v102 - v17;
  __chkstk_darwin(v16);
  v120 = (char *)&v102 - v19;
  v131 = (const char *)_swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(a1 + 56);
  v116 = a1 + 56;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v118 = v1 + OBJC_IVAR___SDShareSheetAirDropController_helperConnection;
  v117 = (unint64_t)(v21 + 63) >> 6;
  v24 = swift_bridgeObjectRetain((const char *)a1, v1);
  v25 = 0;
  v24.n128_u64[0] = 136315138;
  v110 = v24;
  v103 = (unint64_t)"AirDropNetworkAgent";
  v105 = (char *)&type metadata for Any + 8;
  v119 = v8;
  v109 = a1;
  if (v23)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v28 < v117)
    {
      v29 = *(_QWORD *)(v116 + 8 * v28);
      v30 = v25 + 1;
      if (v29)
        goto LABEL_21;
      v30 = v25 + 2;
      if (v25 + 2 >= v117)
        break;
      v29 = *(_QWORD *)(v116 + 8 * v30);
      if (v29)
        goto LABEL_21;
      v30 = v25 + 3;
      if (v25 + 3 >= v117)
        break;
      v29 = *(_QWORD *)(v116 + 8 * v30);
      if (v29)
      {
LABEL_21:
        v23 = (v29 - 1) & v29;
        v124 = v30;
        for (i = __clz(__rbit64(v29)) + (v30 << 6); ; i = v26 | (v25 << 6))
        {
          v32 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
          v33 = v120;
          v32(v120, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v13 + 72) * i, v12);
          v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v18, v33, v12);
          v35 = (uint64_t)v125;
          NWBrowser.Result.endpoint.getter(v34);
          v36 = sub_1002BE330(v35);
          v38 = v37;
          if (v37
            && (v36 == 63 && v37 == (const char *)0xE100000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, 63, 0xE100000000000000, 0) & 1) != 0))
          {
            swift_bridgeObjectRelease(v38);
            v38 = 0;
          }
          v39 = *(void (**)(char *, uint64_t))(v122 + 8);
          v39(v125, v8);
          v40 = swift_bridgeObjectRelease(v38);
          v41 = v121;
          v42 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v32)(v121, v18, v12, v40);
          if (v38)
          {
            v43 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
            v44 = v43(v41, v12);
          }
          else
          {
            v45 = (uint64_t)v123;
            NWBrowser.Result.endpoint.getter(v42);
            sub_1002BE318(v45);
            v47 = v46;
            v39((char *)v45, v8);
            v43 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
            v43(v41, v12);
            swift_bridgeObjectRelease(v47);
            if (!v47)
              goto LABEL_6;
          }
          v48 = (uint64_t)v123;
          NWBrowser.Result.endpoint.getter(v44);
          Strong = (void *)swift_unknownObjectWeakLoadStrong(v118, v49);
          v51 = objc_allocWithZone((Class)type metadata accessor for ShareSheetAirDropNode(0));
          v52 = (char *)sub_1004BCB94(v48, Strong);

          v53 = *(_QWORD *)&v52[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayName + 8];
          if (!v53)
          {
            __break(1u);
            return;
          }
          if ((v53 & 0x2000000000000000) != 0
             ? HIBYTE(v53) & 0xF
             : *(_QWORD *)&v52[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayName] & 0xFFFFFFFFFFFFLL)
          {
            break;
          }
          if (qword_1007B41D0 != -1)
            swift_once(&qword_1007B41D0, sub_1004B464C);
          v59 = type metadata accessor for Logger(0);
          sub_100221DF8(v59, (uint64_t)qword_1007C3220);
          v60 = v52;
          v61 = Logger.logObject.getter(v60);
          v62 = static os_log_type_t.default.getter(v61);
          if (!os_log_type_enabled(v61, (os_log_type_t)v62))
          {

            goto LABEL_6;
          }
          v112 = v62;
          v114 = v61;
          v63 = (_DWORD *)swift_slowAlloc(12, -1);
          v111 = swift_slowAlloc(32, -1);
          v127[0] = v111;
          v113 = v63;
          *v63 = v110.n128_u32[0];
          v64 = &v60[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_nodeIdentifier];
          swift_beginAccess(&v60[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_nodeIdentifier], v130, 0, 0);
          v65 = (uint64_t)v64;
          v66 = v115;
          sub_100221F28(v65, v115, &qword_1007B7280);
          v67 = v106;
          sub_100221F28(v66, v106, &qword_1007B7280);
          v68 = v107;
          v69 = v108;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v67, 1, v108) == 1)
          {
            v128 = 0;
            v129 = (const char *)0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease(v129);
            v70 = (const char *)(v103 | 0x8000000000000000);
            v71 = 0xD000000000000013;
          }
          else
          {
            v72 = v104;
            (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v104, v67, v69);
            v73 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v74 = v69;
            v75 = dispatch thunk of CustomStringConvertible.description.getter(v69, v73);
            v76 = v68;
            v71 = v75;
            v70 = v77;
            (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v74);
          }
          v25 = v124;
          sub_10000D0F0(v115, &qword_1007B7280);
          v78 = sub_100228BD8(v71, (unint64_t)v70, v127);
          v79 = (uint8_t *)v113;
          *(_QWORD *)(v113 + 1) = v78;

          swift_bridgeObjectRelease(v70);
          v80 = v114;
          _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)v112, "Skipping node with no display name: %s", v79, 0xCu);
          v81 = v111;
          swift_arrayDestroy(v111, 1, v105);
          swift_slowDealloc(v81, -1, -1);
          swift_slowDealloc(v79, -1, -1);

          v43(v18, v12);
          a1 = v109;
          v8 = v119;
          if (!v23)
            goto LABEL_8;
LABEL_7:
          v26 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          v124 = v25;
        }
        v55 = v52;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
        v57 = *(_QWORD *)(((unint64_t)v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v56 = *(_QWORD *)(((unint64_t)v131 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v57 >= v56 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v55);
        specialized Array._endMutation()(v58);

LABEL_6:
        v43(v18, v12);
        v8 = v119;
        v25 = v124;
        if (!v23)
          continue;
        goto LABEL_7;
      }
      v31 = v25 + 4;
      if (v25 + 4 < v117)
      {
        v29 = *(_QWORD *)(v116 + 8 * v31);
        if (v29)
        {
          v30 = v25 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v30 = v31 + 1;
          if (__OFADD__(v31, 1))
            goto LABEL_53;
          if (v30 >= v117)
            goto LABEL_46;
          v29 = *(_QWORD *)(v116 + 8 * v30);
          ++v31;
          if (v29)
            goto LABEL_21;
        }
      }
    }
    break;
  }
LABEL_46:
  swift_release(a1);
  v82 = v131;
  v83 = *(const char **)(v102 + OBJC_IVAR___SDShareSheetAirDropController_availableNodes);
  *(_QWORD *)(v102 + OBJC_IVAR___SDShareSheetAirDropController_availableNodes) = v131;
  *(_QWORD *)&v84 = swift_bridgeObjectRetain(v82).n128_u64[0];
  swift_bridgeObjectRelease(v83, v84);
  if (qword_1007B41D0 != -1)
LABEL_54:
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v85 = type metadata accessor for Logger(0);
  v86 = sub_100221DF8(v85, (uint64_t)qword_1007C3220);
  v87 = Logger.logObject.getter(v86);
  v88 = static os_log_type_t.default.getter(v87);
  if (os_log_type_enabled(v87, v88))
  {
    v89 = (uint8_t *)swift_slowAlloc(12, -1);
    v90 = swift_slowAlloc(32, -1);
    v128 = v90;
    *(_DWORD *)v89 = v110.n128_u32[0];
    *(_QWORD *)&v91 = swift_beginAccess(&v131, v127, 0, 0).n128_u64[0];
    v92 = v131;
    swift_bridgeObjectRetain(v131, v91);
    v93 = sub_100008384(&qword_1007C3470);
    v94 = Array.description.getter(v92, v93);
    v96 = v95;
    swift_bridgeObjectRelease(v92);
    v126 = sub_100228BD8(v94, (unint64_t)v96, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v89 + 4);
    swift_bridgeObjectRelease(v96);
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Share sheet AirDrop nodes changed: %s", v89, 0xCu);
    swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v89, -1, -1);
  }

  v98 = *(void (**)(__n128))(v102 + OBJC_IVAR___SDShareSheetAirDropController_availableNodesChangedHandler);
  if (v98)
  {
    v99 = *(_QWORD *)(v102 + OBJC_IVAR___SDShareSheetAirDropController_availableNodesChangedHandler + 8);
    swift_beginAccess(&v131, &v128, 0, 0);
    v100 = v131;
    sub_1002845E4((uint64_t)v98, v99);
    v101 = swift_bridgeObjectRetain(v100);
    v98(v101);
    sub_1002845F4((uint64_t)v98, v99);
    *(_QWORD *)&v97 = swift_bridgeObjectRelease(v100).n128_u64[0];
  }
  swift_bridgeObjectRelease(v131, v97);
}

uint64_t sub_1004B5F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_100008384(&qword_1007B68A0);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004B5F8C, static AirDropActor.shared, 0);
}

uint64_t sub_1004B5F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR___SDShareSheetAirDropController_browser;
  if (*(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_browser))
  {
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100221DF8(v3, (uint64_t)qword_1007C3220);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Invalidating AirDrop browser for share sheet", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = *(_QWORD *)(v1 + v2);
    if (v8)
    {
      swift_retain();
      NWBrowser.cancel()();
      swift_release(v8);
      v9 = *(_QWORD *)(v1 + v2);
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v1 + v2) = 0;
    swift_release(v9);
    v11 = OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask;
    v12 = *(_QWORD *)(v10 + OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask);
    if (v12)
    {
      swift_retain();
      Task.cancel()();
      swift_release(v12);
      v13 = *(_QWORD *)(v10 + v11);
    }
    else
    {
      v13 = 0;
    }
    v15 = *(void **)(v0 + 16);
    v14 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v10 + v11) = 0;
    swift_release(v13);
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject(&unk_10072B9B0, 40, 7);
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v18 = v15;
    v19 = sub_100252AF4(v14, (uint64_t)&unk_1007C3448, (uint64_t)v17);
    swift_release(v19);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B62A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v8[15] = v17;
  v8[16] = v18;
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  v9 = type metadata accessor for SFAirDropSend.Transfer(0);
  v8[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[18] = v10;
  v8[19] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384((uint64_t *)&unk_1007B7E50);
  v8[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008384(&qword_1007B6578);
  v8[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[22] = v13;
  v8[23] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v8[24] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[25] = v15;
  v8[26] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004B6390, 0, 0);
}

uint64_t sub_1004B6390(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t type;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1[10];
  v3 = UUID.uuidString.getter(a1);
  v4 = (uint64_t *)(v2 + OBJC_IVAR___SDShareSheetAirDropController_realName);
  v5 = *(const char **)(v2 + OBJC_IVAR___SDShareSheetAirDropController_realName + 8);
  *v4 = v3;
  v4[1] = v6;
  swift_bridgeObjectRelease(v5);
  if (qword_1007B41D0 != -1)
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v8 = v1[25];
  v7 = v1[26];
  v9 = v1[24];
  v11 = v1[11];
  v10 = v1[12];
  v12 = type metadata accessor for Logger(0);
  v1[27] = sub_100221DF8(v12, (uint64_t)qword_1007C3220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v11, v9);
  v13 = swift_bridgeObjectRetain_n(v10, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v18 = v1[25];
  v17 = v1[26];
  v19 = v1[24];
  v20 = (const char *)v1[12];
  if (v16)
  {
    v37 = v1[25];
    v21 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v39 = v38;
    *(_DWORD *)v21 = 136315394;
    type = v15;
    v22 = type metadata accessor for URL(0);
    swift_bridgeObjectRetain(v20);
    v24 = Array.description.getter(v23, v22);
    v26 = v25;
    swift_bridgeObjectRelease(v20);
    v1[8] = sub_100228BD8(v24, (unint64_t)v26, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v21 + 4);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v21 + 12) = 2080;
    v27 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v19, v27);
    v30 = (const char *)v29;
    v1[9] = sub_100228BD8(v28, v29, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v21 + 14);
    v31 = swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, uint64_t, __n128))(v37 + 8))(v17, v19, v31);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "Sending URLs: %s to %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1[12], 2);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }

  v1[5] = v1[12];
  v32 = (_QWORD *)swift_task_alloc(async function pointer to Sequence<>.coordinateRead(withSaveToTempDir:options:)[1]);
  v1[28] = v32;
  v33 = sub_100008384((uint64_t *)&unk_1007B6820);
  v34 = sub_10026E2FC(&qword_1007BA360, (uint64_t *)&unk_1007B6820, (uint64_t)&protocol conformance descriptor for [A]);
  *v32 = v1;
  v32[1] = sub_1004B66C0;
  return Sequence<>.coordinateRead(withSaveToTempDir:options:)(1, 1, v33, v34);
}

uint64_t sub_1004B66C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 224);
  *(_QWORD *)(v3 + 232) = a1;
  *(_QWORD *)(v3 + 240) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1004B6A04;
  else
    v5 = sub_1004B672C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004B672C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[31] = *(_QWORD *)(v0[10] + OBJC_IVAR___SDShareSheetAirDropController_airDropClient);
  v1 = async function pointer to SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[32] = v2;
  *v2 = v0;
  v2[1] = sub_1004B67B0;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:)(v0[23], v0[29], v0[11], v0[13], v0[14], v0[15], v0[16], 0);
}

uint64_t sub_1004B67B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 248);
  v5 = *(const char **)(v2 + 232);
  if (v0)
  {
    swift_bridgeObjectRelease(v5);
    swift_release(v4);
    v6 = sub_1004B6BD8;
  }
  else
  {
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    v6 = sub_1004B6844;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1004B6844()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[20];
  v3 = v0[18];
  v2 = v0[19];
  v4 = v0[17];
  v5 = v0[10];
  v6 = SFXPCProgressTask.initialValue.getter(v0[21]);
  SFAirDropSend.Transfer.id.getter(v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 0, 1, v7);
  v8 = v5 + OBJC_IVAR___SDShareSheetAirDropController_currentTransferID;
  swift_beginAccess(v5 + OBJC_IVAR___SDShareSheetAirDropController_currentTransferID, v0 + 2, 33, 0);
  sub_10023A084(v1, v8, (uint64_t *)&unk_1007B7E50);
  swift_endAccess(v0 + 2);
  v9 = (_QWORD *)swift_task_alloc(dword_1007C33C4);
  v0[34] = v9;
  *v9 = v0;
  v9[1] = sub_1004B6948;
  return sub_1004B6DAC(v0[23]);
}

uint64_t sub_1004B6948()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  return swift_task_switch(sub_1004B699C, 0, 0);
}

uint64_t sub_1004B699C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B6A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 240);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136315138;
    v15 = v6;
    *(_QWORD *)(v0 + 48) = v1;
    swift_errorRetain(v1);
    v7 = sub_100008384(&qword_1007B5A60);
    v8 = String.init<A>(describing:)(v0 + 48, v7);
    v10 = (const char *)v9;
    *(_QWORD *)(v0 + 56) = sub_100228BD8(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to send URLs: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v11 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B6BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 264);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136315138;
    v15 = v6;
    *(_QWORD *)(v0 + 48) = v1;
    swift_errorRetain(v1);
    v7 = sub_100008384(&qword_1007B5A60);
    v8 = String.init<A>(describing:)(v0 + 48, v7);
    v10 = (const char *)v9;
    *(_QWORD *)(v0 + 56) = sub_100228BD8(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to send URLs: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v11 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B6DAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2[12] = a1;
  v2[13] = v1;
  v3 = sub_100008384(&qword_1007B68A0);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v2[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[16] = v5;
  v2[17] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007B7280);
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v2[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[20] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v2[21] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v10);
  v2[23] = swift_task_alloc(v10);
  v11 = sub_100008384((uint64_t *)&unk_1007B7E50);
  v2[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFAirDropSend.Failure(0);
  v2[25] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[26] = v13;
  v2[27] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008384(&qword_1007C33C8);
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007C33D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v15);
  v2[30] = swift_task_alloc(v15);
  v2[31] = swift_task_alloc(v15);
  v2[32] = swift_task_alloc(v15);
  v16 = type metadata accessor for SFAirDrop.Progress(0);
  v2[33] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[34] = v17;
  v2[35] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v2[36] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[37] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v20);
  v2[39] = swift_task_alloc(v20);
  v21 = type metadata accessor for SFAirDropSend.Transfer(0);
  v2[40] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v2[41] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v23);
  v2[43] = swift_task_alloc(v23);
  v24 = sub_100008384(&qword_1007B8130);
  v2[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100008384(&qword_1007C33E0);
  v2[45] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v2[46] = v26;
  v2[47] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004B7034, 0, 0);
}

uint64_t sub_1004B7034()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v0[48] = sub_100008384(&qword_1007B6578);
  SFXPCProgressTask.makeAsyncIterator()();
  v1 = OBJC_IVAR___SDShareSheetAirDropController_sessionID;
  v0[49] = OBJC_IVAR___SDShareSheetAirDropController_realName;
  v0[50] = v1;
  v0[51] = OBJC_IVAR___SDShareSheetAirDropController_transferUpdateChangedHandler;
  v2 = sub_10026E2FC(&qword_1007C33E8, &qword_1007C33E0, (uint64_t)&protocol conformance descriptor for SFXPCAsyncSequence<A>.AsyncIterator);
  v0[52] = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[53] = v3;
  *v3 = v0;
  v3[1] = sub_1004B70F0;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[44], v0[45], v2);
}

uint64_t sub_1004B70F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 424));
  if (v0)
  {
    *(_QWORD *)(v2 + 456) = v0;
    v3 = sub_1004B7EA0;
  }
  else
  {
    *(_DWORD *)(v2 + 464) = enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:);
    *(_DWORD *)(v2 + 468) = enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:);
    *(_DWORD *)(v2 + 472) = enum case for SFAirDropSend.Transfer.State.transferring(_:);
    *(_DWORD *)(v2 + 476) = enum case for SFAirDropSend.Transfer.State.waitingForShareContactPermissionResponse(_:);
    *(_DWORD *)(v2 + 480) = enum case for SFAirDropSend.Transfer.State.exchanging(_:);
    *(_DWORD *)(v2 + 484) = enum case for SFAirDropSend.Transfer.State.waitingForImportContactResponse(_:);
    *(_DWORD *)(v2 + 488) = enum case for SFAirDropSend.Transfer.State.transferFailed(_:);
    *(_DWORD *)(v2 + 492) = enum case for SFAirDropSend.Transfer.State.completedSuccessfully(_:);
    *(_DWORD *)(v2 + 496) = enum case for SFAirDropSend.Transfer.State.created(_:);
    *(_DWORD *)(v2 + 500) = enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:);
    v3 = sub_1004B71F4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004B71F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char **v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  const char **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  const char *v34;
  uint64_t *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  objc_class *v39;
  char *v40;
  char *v41;
  char *v42;
  double v43;
  double v44;
  char *v45;
  void (*v46)(char *);
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 8))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 360));
    v4 = (_QWORD *)swift_task_alloc(async function pointer to SFXPCProgressTask.finalValue.getter[1]);
    *(_QWORD *)(v0 + 440) = v4;
    *v4 = v0;
    v4[1] = sub_1004B7808;
    return SFXPCProgressTask.finalValue.getter(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 384));
  }
  v6 = *(_DWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 296);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 344), v1, v2);
  SFAirDropSend.Transfer.state.getter(v10);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8);
  if (v11 == v6)
  {
    v12 = *(const char ***)(v0 + 312);
    (*(void (**)(const char **, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v12, *(_QWORD *)(v0 + 288));
    swift_bridgeObjectRelease(*v12);
    v13 = (char *)v12 + *(int *)(sub_100008384(&qword_1007BA4A8) + 64);
    v14 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = 0.0;
    v16 = 3;
    goto LABEL_12;
  }
  if (v11 == *(_DWORD *)(v0 + 468))
  {
    v17 = *(const char ***)(v0 + 312);
    (*(void (**)(const char **, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v17, *(_QWORD *)(v0 + 288));
    swift_bridgeObjectRelease(*v17);
    v18 = (char *)v17 + *(int *)(sub_100008384(&qword_1007BA4C8) + 48);
    v19 = sub_100008384((uint64_t *)&unk_1007C3420);
LABEL_23:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
LABEL_24:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
    v51 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 432) = v51;
    *v51 = v0;
    v51[1] = sub_1004B77A4;
    return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 416));
  }
  if (v11 == *(_DWORD *)(v0 + 472))
  {
    v20 = *(_QWORD *)(v0 + 312);
    v22 = *(_QWORD *)(v0 + 272);
    v21 = *(_QWORD *)(v0 + 280);
    v23 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v20, *(_QWORD *)(v0 + 288));
    swift_bridgeObjectRelease(*(const char **)(v20 + 8));
    v24 = (int *)sub_100008384((uint64_t *)&unk_1007C3410);
    v25 = v20 + v24[12];
    v26 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v20 + 8 + v24[16]));
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v22 + 32))(v21, v25, v23, v26);
    v28 = COERCE_DOUBLE(SFAirDrop.Progress.percent.getter(v27));
    v29 = v20 + v24[20];
    if ((v30 & 1) != 0)
      v15 = 0.0;
    else
      v15 = v28 * 100.0;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v31 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v29, v31);
    v16 = 7;
    goto LABEL_12;
  }
  if (v11 == *(_DWORD *)(v0 + 476))
  {
    v18 = *(char **)(v0 + 312);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v18, *(_QWORD *)(v0 + 288));
    v48 = &v18[*(int *)(sub_100008384(&qword_1007BA3B0) + 48)];
    v49 = (uint64_t *)&unk_1007BB630;
LABEL_22:
    v50 = sub_100008384(v49);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v48, v50);
    v19 = type metadata accessor for SFAirDrop.ContactInfo(0);
    goto LABEL_23;
  }
  if (v11 == *(_DWORD *)(v0 + 480))
  {
    v18 = *(char **)(v0 + 312);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v18, *(_QWORD *)(v0 + 288));
    v19 = type metadata accessor for SFAirDrop.ContactRequest(0);
    goto LABEL_23;
  }
  if (v11 == *(_DWORD *)(v0 + 484))
  {
    v18 = *(char **)(v0 + 312);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v18, *(_QWORD *)(v0 + 288));
    v48 = &v18[*(int *)(sub_100008384(&qword_1007BA3D8) + 48)];
    v49 = (uint64_t *)&unk_1007C3400;
    goto LABEL_22;
  }
  if (v11 == *(_DWORD *)(v0 + 488))
  {
    v52 = *(_QWORD *)(v0 + 312);
    v53 = *(_QWORD *)(v0 + 200);
    v54 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 296) + 96))(v52, *(_QWORD *)(v0 + 288));
    v55 = sub_100008384(&qword_1007B8858);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52 + *(int *)(v55 + 48), v53);
    v56 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v52, v56);
    v15 = 0.0;
    v16 = 10;
    goto LABEL_12;
  }
  if (v11 == *(_DWORD *)(v0 + 492))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 288));
    v15 = 100.0;
    v16 = 9;
    goto LABEL_12;
  }
  v15 = 0.0;
  v16 = 3;
  if (v11 == *(_DWORD *)(v0 + 496) || v11 == *(_DWORD *)(v0 + 500))
  {
LABEL_12:
    v32 = *(_QWORD *)(v0 + 104);
    v33 = (uint64_t *)(v32 + *(_QWORD *)(v0 + 392));
    v34 = (const char *)v33[1];
    if (v34)
    {
      v57 = *(_QWORD *)(v0 + 408);
      v35 = (uint64_t *)(v32 + *(_QWORD *)(v0 + 400));
      v36 = *v33;
      v38 = *v35;
      v37 = (const char *)v35[1];
      v39 = (objc_class *)type metadata accessor for ShareSheetAirDropTransferUpdate();
      v40 = (char *)objc_allocWithZone(v39);
      *(_QWORD *)&v40[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_state] = 1;
      *(_QWORD *)&v40[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_progress] = 0;
      v41 = &v40[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_sessionID];
      *(_QWORD *)v41 = v38;
      *((_QWORD *)v41 + 1) = v37;
      v42 = &v40[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_realName];
      *(_QWORD *)v42 = v36;
      *((_QWORD *)v42 + 1) = v34;
      *(_QWORD *)(v0 + 64) = v40;
      *(_QWORD *)(v0 + 72) = v39;
      *(_QWORD *)&v43 = swift_bridgeObjectRetain(v37).n128_u64[0];
      *(_QWORD *)&v44 = swift_bridgeObjectRetain(v34, v43).n128_u64[0];
      v45 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 64), "init", v44);
      *(_QWORD *)&v45[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_state] = v16;
      *(double *)&v45[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_progress] = v15;
      v46 = *(void (**)(char *))(v32 + v57);
      if (v46)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + *(_QWORD *)(v0 + 408) + 8);
        swift_retain();
        v46(v45);
        sub_1002845F4((uint64_t)v46, v47);
      }

    }
    goto LABEL_24;
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "DaemoniOSLibrary/ShareSheetAirDropController.swift", 50, 2, 192, 0);
}

uint64_t sub_1004B77A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 432));
  if (v0)
  {
    *(_QWORD *)(v2 + 456) = v0;
    v3 = sub_1004B7EA0;
  }
  else
  {
    v3 = sub_1004B71F4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004B7808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004B8114;
  else
    v3 = sub_1004B786C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004B786C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v3 = *(_QWORD *)(v1 + 296);
  v2 = *(_QWORD *)(v1 + 304);
  v4 = *(_QWORD *)(v1 + 288);
  v5 = *(_QWORD *)(v1 + 224);
  v6 = SFAirDropSend.Transfer.state.getter(a1);
  SFAirDropSend.Transfer.State.metrics.getter(v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v7 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  v10 = *(_QWORD *)(v1 + 248);
  v11 = *(_QWORD *)(v1 + 224);
  if (v9 == 1)
  {
    sub_10000D0F0(*(_QWORD *)(v1 + 224), &qword_1007C33C8);
    v12 = type metadata accessor for SFAirDropSend.Transfer.Metrics.TransferResult(0);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v10, 1, 1, v12);
LABEL_4:
    v15 = *(_QWORD *)(v1 + 248);
    v14 = *(_QWORD *)(v1 + 256);
    type metadata accessor for SFAirDropSend.Transfer.Metrics.TransferResult(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, 1, 1, v12);
    sub_10000D0F0(v15, (uint64_t *)&unk_1007C33D0);
    goto LABEL_6;
  }
  SFAirDropSend.Transfer.Metrics.result.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  v12 = type metadata accessor for SFAirDropSend.Transfer.Metrics.TransferResult(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
    goto LABEL_4;
  v16 = *(_QWORD *)(v1 + 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 32))(v16, *(_QWORD *)(v1 + 248), v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
LABEL_6:
  v17 = *(_QWORD *)(v1 + 240);
  sub_100221F28(*(_QWORD *)(v1 + 256), v17, (uint64_t *)&unk_1007C33D0);
  type metadata accessor for SFAirDropSend.Transfer.Metrics.TransferResult(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12) == 1)
  {
    v18 = 0.0;
    v19 = 10;
LABEL_12:
    sub_1004B8EFC(v19, v18);
LABEL_13:
    v27 = *(_QWORD *)(v1 + 328);
    v26 = *(_QWORD *)(v1 + 336);
    v28 = *(_QWORD *)(v1 + 320);
    v29 = *(_QWORD *)(v1 + 240);
    sub_10000D0F0(*(_QWORD *)(v1 + 256), (uint64_t *)&unk_1007C33D0);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    sub_10000D0F0(v29, (uint64_t *)&unk_1007C33D0);
    v30 = *(_QWORD *)(v1 + 192);
    v31 = *(_QWORD *)(v1 + 120);
    v32 = *(_QWORD *)(v1 + 128);
    v33 = *(_QWORD *)(v1 + 104);
    v34 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v30, 1, 1, v34);
    v35 = v33 + OBJC_IVAR___SDShareSheetAirDropController_currentTransferID;
    swift_beginAccess(v33 + OBJC_IVAR___SDShareSheetAirDropController_currentTransferID, v1 + 16, 33, 0);
    sub_10023A084(v30, v35, (uint64_t *)&unk_1007B7E50);
    swift_endAccess(v1 + 16);
    v36 = v33 + OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction;
    v37 = swift_beginAccess(v33 + OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction, v1 + 40, 0, 0);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v32 + 48))(v36, 1, v31, v37);
    v39 = *(_QWORD *)(v1 + 152);
    v40 = *(_QWORD *)(v1 + 160);
    v41 = *(_QWORD *)(v1 + 144);
    if (v38)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v40 + 56))(*(_QWORD *)(v1 + 144), 1, 1, *(_QWORD *)(v1 + 152));
    }
    else
    {
      v43 = *(_QWORD *)(v1 + 128);
      v42 = *(_QWORD *)(v1 + 136);
      v44 = *(_QWORD *)(v1 + 120);
      v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v42, v36, v44);
      SFAirDrop.NearbySharingInteraction.id.getter(v45);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) != 1)
      {
        v57 = *(_QWORD *)(v1 + 176);
        v56 = *(_QWORD *)(v1 + 184);
        v59 = *(_QWORD *)(v1 + 160);
        v58 = *(_QWORD *)(v1 + 168);
        v60 = *(_QWORD *)(v1 + 152);
        v62 = *(void **)(v1 + 104);
        v61 = *(_QWORD *)(v1 + 112);
        v80 = v61;
        v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32);
        v63(v56, *(_QWORD *)(v1 + 144), v60);
        v64 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v61, 1, 1, v64);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v57, v56, v60);
        v65 = *(unsigned __int8 *)(v59 + 80);
        v66 = (v65 + 32) & ~v65;
        v67 = (v58 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        v68 = swift_allocObject(&unk_10072B960, v67 + 8, v65 | 7);
        *(_QWORD *)(v68 + 16) = 0;
        *(_QWORD *)(v68 + 24) = 0;
        v63(v68 + v66, v57, v60);
        *(_QWORD *)(v68 + v67) = v62;
        v69 = v62;
        v70 = sub_100252AF4(v80, (uint64_t)&unk_1007C33F8, v68);
        swift_release(v70);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, v60);
        goto LABEL_17;
      }
    }
    sub_10000D0F0(*(_QWORD *)(v1 + 144), &qword_1007B7280);
LABEL_17:
    v47 = *(_QWORD *)(v1 + 344);
    v46 = *(_QWORD *)(v1 + 352);
    v48 = *(_QWORD *)(v1 + 336);
    v49 = *(_QWORD *)(v1 + 304);
    v50 = *(_QWORD *)(v1 + 312);
    v51 = *(_QWORD *)(v1 + 280);
    v53 = *(_QWORD *)(v1 + 248);
    v52 = *(_QWORD *)(v1 + 256);
    v54 = *(_QWORD *)(v1 + 240);
    v71 = *(_QWORD *)(v1 + 232);
    v72 = *(_QWORD *)(v1 + 224);
    v73 = *(_QWORD *)(v1 + 216);
    v74 = *(_QWORD *)(v1 + 192);
    v75 = *(_QWORD *)(v1 + 184);
    v76 = *(_QWORD *)(v1 + 176);
    v77 = *(_QWORD *)(v1 + 144);
    v78 = *(_QWORD *)(v1 + 136);
    v79 = *(_QWORD *)(v1 + 112);
    swift_task_dealloc(*(_QWORD *)(v1 + 376));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v20 = *(_QWORD *)(v1 + 232);
  sub_100221F28(*(_QWORD *)(v1 + 240), v20, (uint64_t *)&unk_1007C33D0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v20, v12);
  if (v21 == enum case for SFAirDropSend.Transfer.Metrics.TransferResult.failure(_:))
  {
    v22 = *(_QWORD *)(v1 + 232);
    v24 = *(_QWORD *)(v1 + 208);
    v23 = *(_QWORD *)(v1 + 216);
    v25 = *(_QWORD *)(v1 + 200);
    (*(void (**)(uint64_t, uint64_t))(v13 + 96))(v22, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
    sub_1004B9030(v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    goto LABEL_13;
  }
  if (v21 == enum case for SFAirDropSend.Transfer.Metrics.TransferResult.success(_:))
  {
    v18 = 100.0;
    v19 = 9;
    goto LABEL_12;
  }
  (*(void (**)(_QWORD, uint64_t))(v13 + 8))(*(_QWORD *)(v1 + 232), v12);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "DaemoniOSLibrary/ShareSheetAirDropController.swift", 50, 2, 216, 0);
}

uint64_t sub_1004B7EA0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 456);
  v1 = sub_100008384(&qword_1007B5A60);
  swift_willThrowTypedImpl(v0 + 80, v1, &protocol self-conformance witness table for Error);
  return swift_task_switch(sub_1004B7F00, 0, 0);
}

uint64_t sub_1004B7F00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  (*(void (**)(_QWORD, _QWORD))(v0[46] + 8))(v0[47], v0[45]);
  if (qword_1007B41D0 != -1)
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v1 = v0[57];
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C3220);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[57];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    v0[11] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Transfer failed {error: %@}", v8, 0xCu);
    v11 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v0[57]);
    swift_errorRelease(v7);
  }
  v12 = v0[57];

  sub_1004B8EFC(10, 0.0);
  swift_errorRelease(v12);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to SFXPCProgressTask.finalValue.getter[1]);
  v0[55] = v13;
  *v13 = v0;
  v13[1] = sub_1004B7808;
  return SFXPCProgressTask.finalValue.getter(v0[42], v0[48]);
}

uint64_t sub_1004B8114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  swift_errorRelease(*(_QWORD *)(v0 + 448));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v6 = v4 + OBJC_IVAR___SDShareSheetAirDropController_currentTransferID;
  swift_beginAccess(v4 + OBJC_IVAR___SDShareSheetAirDropController_currentTransferID, v0 + 16, 33, 0);
  sub_10023A084(v1, v6, (uint64_t *)&unk_1007B7E50);
  swift_endAccess(v0 + 16);
  v7 = v4 + OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction;
  v8 = swift_beginAccess(v4 + OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction, v0 + 40, 0, 0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 48))(v7, 1, v2, v8);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 144);
  if (v9)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v11 + 56))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 152));
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v7, v15);
    SFAirDrop.NearbySharingInteraction.id.getter(v16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) != 1)
    {
      v18 = *(_QWORD *)(v0 + 176);
      v17 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 160);
      v19 = *(_QWORD *)(v0 + 168);
      v21 = *(_QWORD *)(v0 + 152);
      v23 = *(void **)(v0 + 104);
      v22 = *(_QWORD *)(v0 + 112);
      v50 = v22;
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
      v24(v17, *(_QWORD *)(v0 + 144), v21);
      v25 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v17, v21);
      v26 = *(unsigned __int8 *)(v20 + 80);
      v27 = (v26 + 32) & ~v26;
      v28 = (v19 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
      v29 = swift_allocObject(&unk_10072B960, v28 + 8, v26 | 7);
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      v24(v29 + v27, v18, v21);
      *(_QWORD *)(v29 + v28) = v23;
      v30 = v23;
      v31 = sub_100252AF4(v50, (uint64_t)&unk_1007C33F8, v29);
      swift_release(v31);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v21);
      goto LABEL_6;
    }
  }
  sub_10000D0F0(*(_QWORD *)(v0 + 144), &qword_1007B7280);
LABEL_6:
  v33 = *(_QWORD *)(v0 + 344);
  v32 = *(_QWORD *)(v0 + 352);
  v34 = *(_QWORD *)(v0 + 336);
  v35 = *(_QWORD *)(v0 + 304);
  v36 = *(_QWORD *)(v0 + 312);
  v37 = *(_QWORD *)(v0 + 280);
  v39 = *(_QWORD *)(v0 + 248);
  v38 = *(_QWORD *)(v0 + 256);
  v40 = *(_QWORD *)(v0 + 240);
  v42 = *(_QWORD *)(v0 + 232);
  v43 = *(_QWORD *)(v0 + 224);
  v44 = *(_QWORD *)(v0 + 216);
  v45 = *(_QWORD *)(v0 + 192);
  v46 = *(_QWORD *)(v0 + 184);
  v47 = *(_QWORD *)(v0 + 176);
  v48 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B870C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  id v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[4];

  v1 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject(&unk_10072B910, 40, 7);
  v6[2] = 0;
  v7 = v6 + 2;
  v6[3] = 0;
  v6[4] = v0;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v9 = v0;
  if (v8 == 1)
  {
    sub_10000D0F0((uint64_t)v3, &qword_1007B68A0);
    v10 = 7168;
LABEL_6:
    v18 = 0;
    goto LABEL_7;
  }
  v11 = TaskPriority.rawValue.getter(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  v10 = v11 | 0x1C00;
  v12 = *v7;
  if (!*v7)
    goto LABEL_6;
  v13 = v6[3];
  ObjectType = swift_getObjectType(*v7);
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
LABEL_7:
  v19 = swift_task_create(v10, v18, (char *)&type metadata for () + 8, &unk_1007C33A0, v6);
  return swift_release(v19);
}

uint64_t sub_1004B88C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[9] = a4;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100008384((uint64_t *)&unk_1007B7E50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v5);
  v4[11] = swift_task_alloc(v5);
  v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v4[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[13] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v8);
  v4[15] = swift_task_alloc(v8);
  return swift_task_switch(sub_1004B896C, 0, 0);
}

uint64_t sub_1004B896C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  __n128 v33;
  void (*v34)(uint64_t, uint64_t, __n128);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = OBJC_IVAR___SDShareSheetAirDropController_currentTransferID;
  *(_QWORD *)(v0 + 128) = OBJC_IVAR___SDShareSheetAirDropController_currentTransferID;
  v6 = v1 + v5;
  swift_beginAccess(v1 + v5, v0 + 16, 0, 0);
  sub_100221F28(v6, v4, (uint64_t *)&unk_1007B7E50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10000D0F0(*(_QWORD *)(v0 + 88), (uint64_t *)&unk_1007B7E50);
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100221DF8(v7, (uint64_t)qword_1007C3220);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attempting to cancel but no transfer found.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v17 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    v20 = type metadata accessor for Logger(0);
    sub_100221DF8(v20, (uint64_t)qword_1007C3220);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v16, v18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    v24 = os_log_type_enabled(v22, v23);
    v26 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 96);
    if (v24)
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v38 = v37;
      *(_DWORD *)v28 = 136315138;
      v29 = sub_100220D78(&qword_1007B7E60, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v27, v29);
      v32 = (const char *)v31;
      *(_QWORD *)(v0 + 64) = sub_100228BD8(v30, v31, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v28 + 4);
      v33 = swift_bridgeObjectRelease(v32);
      v34 = *(void (**)(uint64_t, uint64_t, __n128))(v26 + 8);
      v34(v25, v27, v33);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Canceling transfer with ID: %s", v28, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      v34 = *(void (**)(uint64_t, uint64_t, __n128))(v26 + 8);
      ((void (*)(_QWORD, _QWORD))v34)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    }

    *(_QWORD *)(v0 + 136) = v34;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(*(_QWORD *)(v0 + 72) + OBJC_IVAR___SDShareSheetAirDropController_airDropClient);
    v35 = async function pointer to SFAirDropClient.cancelTransfer(_:)[1];
    swift_retain();
    v36 = (_QWORD *)swift_task_alloc(v35);
    *(_QWORD *)(v0 + 152) = v36;
    *v36 = v0;
    v36[1] = sub_1004B8D28;
    return SFAirDropClient.cancelTransfer(_:)(*(_QWORD *)(v0 + 120));
  }
}

uint64_t sub_1004B8D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
    v4 = sub_1004B8E5C;
  else
    v4 = sub_1004B8D94;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004B8D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, uint64_t))(v0 + 136))(*(_QWORD *)(v0 + 120), v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  swift_beginAccess(v4, v0 + 40, 33, 0);
  sub_10023A084(v3, v4, (uint64_t *)&unk_1007B7E50);
  swift_endAccess(v0 + 40);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B8E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(v0 + 136))(v2, *(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004B8EFC(uint64_t a1, double a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  char *v12;
  double v13;
  double v14;
  char *v15;
  void (*v16)(char *);
  uint64_t v17;
  objc_super v18;

  v3 = *(const char **)(v2 + OBJC_IVAR___SDShareSheetAirDropController_realName + 8);
  if (v3)
  {
    v6 = *(_QWORD *)(v2 + OBJC_IVAR___SDShareSheetAirDropController_realName);
    v8 = *(_QWORD *)(v2 + OBJC_IVAR___SDShareSheetAirDropController_sessionID);
    v7 = *(const char **)(v2 + OBJC_IVAR___SDShareSheetAirDropController_sessionID + 8);
    v9 = (objc_class *)type metadata accessor for ShareSheetAirDropTransferUpdate();
    v10 = (char *)objc_allocWithZone(v9);
    *(_QWORD *)&v10[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_state] = 1;
    *(_QWORD *)&v10[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_progress] = 0;
    v11 = &v10[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_sessionID];
    *(_QWORD *)v11 = v8;
    *((_QWORD *)v11 + 1) = v7;
    v12 = &v10[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_realName];
    *(_QWORD *)v12 = v6;
    *((_QWORD *)v12 + 1) = v3;
    *(_QWORD *)&v13 = swift_bridgeObjectRetain(v7, v10, v9).n128_u64[0];
    *(_QWORD *)&v14 = swift_bridgeObjectRetain(v3, v13).n128_u64[0];
    v15 = (char *)objc_msgSendSuper2(&v18, "init", v14);
    *(_QWORD *)&v15[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_state] = a1;
    *(double *)&v15[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_progress] = a2;
    v16 = *(void (**)(char *))(v2 + OBJC_IVAR___SDShareSheetAirDropController_transferUpdateChangedHandler);
    if (v16)
    {
      v17 = *(_QWORD *)(v2 + OBJC_IVAR___SDShareSheetAirDropController_transferUpdateChangedHandler + 8);
      swift_retain();
      v16(v15);
      sub_1002845F4((uint64_t)v16, v17);
    }

  }
}

void sub_1004B9030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  char *v16;
  char *v17;
  double v18;
  double v19;
  char *v20;
  void (*v21)(char *);
  uint64_t v22;
  objc_super v23;

  v3 = type metadata accessor for SFAirDropSend.Failure(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for SFAirDropSend.Failure.receiverDeclined(_:)
    || v7 == enum case for SFAirDropSend.Failure.cancelled(_:))
  {
    v9 = 4;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = 10;
  }
  v10 = *(const char **)(v1 + OBJC_IVAR___SDShareSheetAirDropController_realName + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_realName);
    v13 = *(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_sessionID);
    v12 = *(const char **)(v1 + OBJC_IVAR___SDShareSheetAirDropController_sessionID + 8);
    v14 = (objc_class *)type metadata accessor for ShareSheetAirDropTransferUpdate();
    v15 = (char *)objc_allocWithZone(v14);
    *(_QWORD *)&v15[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_state] = 1;
    *(_QWORD *)&v15[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_progress] = 0;
    v16 = &v15[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_sessionID];
    *(_QWORD *)v16 = v13;
    *((_QWORD *)v16 + 1) = v12;
    v17 = &v15[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_realName];
    *(_QWORD *)v17 = v11;
    *((_QWORD *)v17 + 1) = v10;
    *(_QWORD *)&v18 = swift_bridgeObjectRetain(v12, v15, v14).n128_u64[0];
    *(_QWORD *)&v19 = swift_bridgeObjectRetain(v10, v18).n128_u64[0];
    v20 = (char *)objc_msgSendSuper2(&v23, "init", v19);
    *(_QWORD *)&v20[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_state] = v9;
    *(_QWORD *)&v20[OBJC_IVAR___SDShareSheetAirDropTransferUpdate_progress] = 0;
    v21 = *(void (**)(char *))(v1 + OBJC_IVAR___SDShareSheetAirDropController_transferUpdateChangedHandler);
    if (v21)
    {
      v22 = *(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_transferUpdateChangedHandler + 8);
      swift_retain();
      v21(v20);
      sub_1002845F4((uint64_t)v21, v22);
    }

  }
}

uint64_t sub_1004B91F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for ContinuousClock(0);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v5[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_1004B928C, 0, 0);
}

uint64_t sub_1004B928C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  __n128 v19;
  void (*v20)(uint64_t, uint64_t, __n128);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v26;

  if (qword_1007B41D0 != -1)
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v1 = v0[4];
  v2 = v0[12];
  v3 = v0[9];
  v4 = v0[10];
  v5 = type metadata accessor for Logger(0);
  v0[13] = sub_100221DF8(v5, (uint64_t)qword_1007C3220);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[14] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[12];
  v12 = v0[9];
  v13 = v0[10];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v26 = v24;
    *(_DWORD *)v14 = 136315138;
    v15 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v18 = (const char *)v17;
    v0[3] = sub_100228BD8(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 4);
    v19 = swift_bridgeObjectRelease(v18);
    v20 = *(void (**)(uint64_t, uint64_t, __n128))(v13 + 8);
    v20(v11, v12, v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "will end currentNearbySharingInteraction:%s", v14, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t, __n128))(v13 + 8);
    ((void (*)(uint64_t, uint64_t))v20)(v11, v12);
  }

  v0[15] = v20;
  ContinuousClock.init()(v21);
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v22 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  v0[16] = v22;
  *v22 = v0;
  v22[1] = sub_1004B94E8;
  return v25(2000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1004B94E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 128));
  v4 = v2[7];
  v3 = v2[8];
  v5 = v2[6];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1004BD3B0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1004B9580;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1004B9580()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[17] = *(_QWORD *)(v0[5] + OBJC_IVAR___SDShareSheetAirDropController_airDropClient);
  v1 = async function pointer to SFAirDropClient.endNearbySharingInteraction(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[18] = v2;
  *v2 = v0;
  v2[1] = sub_1004B95F0;
  return SFAirDropClient.endNearbySharingInteraction(_:)(v0[4]);
}

uint64_t sub_1004B95F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1004B9820;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 136));
    v4 = sub_1004B965C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004B965C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, __n128);
  uint64_t v17;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 72));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v16 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 120);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v17 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = (const char *)v10;
    *(_QWORD *)(v0 + 16) = sub_100228BD8(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    v12 = swift_bridgeObjectRelease(v11);
    v16(v4, v5, v12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "did end currentNearbySharingInteraction:%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B9820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[2] = a4;
  v5 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.PollingType(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request(0);
  v4[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[7] = v8;
  v4[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004B9904, 0, 0);
}

uint64_t sub_1004B9904()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[5];
  v2 = v0[2];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[4] + 104))(v1, enum case for SFAirDrop.NearbySharingDiscovery.PollingType.automatic(_:), v0[3]);
  SFAirDrop.NearbySharingDiscovery.Request.init(pollingType:applicationLabel:)(v1, 0x6568736572616873, 0xEA00000000007465);
  v0[9] = *(_QWORD *)(v2 + OBJC_IVAR___SDShareSheetAirDropController_airDropClient);
  v3 = async function pointer to SFAirDropClient.startNearbySharingDiscovery(request:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[10] = v4;
  *v4 = v0;
  v4[1] = sub_1004B99C0;
  return SFAirDropClient.startNearbySharingDiscovery(request:)(v0[8]);
}

uint64_t sub_1004B99C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
    v4 = sub_1004B9A7C;
  else
    v4 = sub_1004B9A2C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004B9A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B9A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004B9ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10031AF00();
  v6 = (void *)static NSUserDefaults.airdrop.getter(v5);
  v7 = SFAirDropUserDefaults.boopToAirDropEnabled.getter();

  if ((v7 & 1) != 0)
  {
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
    v9 = *(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_airDropClient);
    v10 = swift_allocObject(&unk_10072B8C0, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, v1);
    type metadata accessor for MainActor(0);
    swift_retain();
    v11 = swift_retain();
    v12 = static MainActor.shared.getter(v11);
    v13 = (_QWORD *)swift_allocObject(&unk_10072B8E8, 48, 7);
    v13[2] = v12;
    v13[3] = &protocol witness table for MainActor;
    v13[4] = v9;
    v13[5] = v10;
    swift_release(v10);
    v14 = sub_100252EC0((uint64_t)v4, (uint64_t)&unk_1007C3368, (uint64_t)v13);
    v15 = *(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask);
    *(_QWORD *)(v1 + OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask) = v14;
    swift_release(v15);
  }
}

uint64_t sub_1004B9C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_1004B9C44, 0, 0);
}

uint64_t sub_1004B9C44()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[3] = *(_QWORD *)(v0[2] + OBJC_IVAR___SDShareSheetAirDropController_airDropClient);
  v1 = async function pointer to SFAirDropClient.stopNearbySharingDiscovery(applicationLabel:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_1004B9CC4;
  return SFAirDropClient.stopNearbySharingDiscovery(applicationLabel:)(0x6568736572616873, 0xEA00000000007465);
}

uint64_t sub_1004B9CC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1004B9D38, 0, 0);
  swift_release(*(_QWORD *)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1004B9D38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004B9D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5[10] = a5;
  v6 = sub_100008384((uint64_t *)&unk_1007C3370);
  v5[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[12] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[13] = v8;
  v9 = type metadata accessor for MainActor(0);
  v5[14] = v9;
  v5[15] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDropClient.nearbySharingInteractions()[1]);
  v5[16] = v10;
  *v10 = v5;
  v10[1] = sub_1004B9E18;
  return SFAirDropClient.nearbySharingInteractions()(v8);
}

uint64_t sub_1004B9E18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v4 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 144) = v6;
  *(_QWORD *)(v2 + 152) = v5;
  if (v0)
    v7 = sub_1004BA434;
  else
    v7 = sub_1004B9EA4;
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_1004B9EA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10] + 16;
  v0[7] = SFXPCResilientAsyncSequence.makeAsyncIterator()(v0[11]);
  swift_beginAccess(v1, v0 + 2, 0, 0);
  v0[20] = static MainActor.shared.getter(v2);
  v3 = sub_100008384(&qword_1007C3380);
  v4 = sub_10026E2FC(&qword_1007C3388, &qword_1007C3380, (uint64_t)&protocol conformance descriptor for SFXPCResilientAsyncSequence<A>.AsyncIterator);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[21] = v5;
  *v5 = v0;
  v5[1] = sub_1004B9F80;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 8, v3, v4);
}

uint64_t sub_1004B9F80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 160);
  if (v0)
  {
    if (v4)
    {
      ObjectType = swift_getObjectType(v4);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
      v8 = v7;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v11 = sub_1004BA1B0;
  }
  else
  {
    if (v4)
    {
      v9 = swift_getObjectType(v4);
      v6 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
      v8 = v10;
    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    v11 = sub_1004BA044;
  }
  return swift_task_switch(v11, v6, v8);
}

uint64_t sub_1004BA044()
{
  _QWORD *v0;

  swift_release(v0[20]);
  v0[23] = v0[8];
  return swift_task_switch(sub_1004BA084, v0[18], v0[19]);
}

uint64_t sub_1004BA084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(const char **)(v2 + 184);
  if (v3)
  {
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v2 + 80) + 16, a2);
    if (Strong)
    {
      v5 = (void *)Strong;
      sub_1004BA62C((uint64_t)v3);

    }
    swift_bridgeObjectRelease(v3);
    *(_QWORD *)(v2 + 160) = static MainActor.shared.getter(v6);
    v7 = sub_100008384(&qword_1007C3380);
    v8 = sub_10026E2FC(&qword_1007C3388, &qword_1007C3380, (uint64_t)&protocol conformance descriptor for SFXPCResilientAsyncSequence<A>.AsyncIterator);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v2 + 168) = v9;
    *v9 = v2;
    v9[1] = sub_1004B9F80;
    return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 64, v7, v8);
  }
  else
  {
    v12 = *(_QWORD *)(v2 + 96);
    v11 = *(_QWORD *)(v2 + 104);
    v13 = *(_QWORD *)(v2 + 88);
    swift_release(*(_QWORD *)(v2 + 120));
    swift_release(*(_QWORD *)(v2 + 56));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_1004BA1B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[20];
  v0[9] = v0[22];
  v2 = sub_100008384(&qword_1007B5A60);
  swift_willThrowTypedImpl(v0 + 9, v2, &protocol self-conformance witness table for Error);
  swift_release(v1);
  return swift_task_switch(sub_1004BA218, v0[18], v0[19]);
}

uint64_t sub_1004BA218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 176);
  if (qword_1007B41D0 != -1)
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v5 = type metadata accessor for Logger(0);
  sub_100221DF8(v5, (uint64_t)qword_1007C3220);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_DWORD *)v9 = 136315138;
    v16 = v10;
    *(_QWORD *)(v0 + 40) = v4;
    swift_errorRetain(v4);
    v11 = sub_100008384(&qword_1007B5A60);
    v12 = String.init<A>(reflecting:)(v0 + 40, v11);
    v14 = (const char *)v13;
    *(_QWORD *)(v0 + 48) = sub_100228BD8(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v9 + 4);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error registering for updates to nearby sharing interactions: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004BA434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 136);
  if (qword_1007B41D0 != -1)
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C3220);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 40) = v1;
    swift_errorRetain(v1);
    v8 = sub_100008384(&qword_1007B5A60);
    v9 = String.init<A>(reflecting:)(v0 + 40, v8);
    v11 = (const char *)v10;
    *(_QWORD *)(v0 + 48) = sub_100228BD8(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4);
    swift_bridgeObjectRelease(v11, v13);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error registering for updates to nearby sharing interactions: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004BA62C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char v62;
  double v63;
  __n128 v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, __n128);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t Strong;
  void *v74;
  Class isa;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;

  v2 = type metadata accessor for DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v83 = v2;
  v84 = v3;
  v4 = __chkstk_darwin(v2);
  v82 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v76 - v6;
  v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v87 = *(_QWORD *)(v8 - 8);
  v88 = v8;
  v9 = __chkstk_darwin(v8);
  v85 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v86 = (char *)&v76 - v11;
  v12 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v12);
  v94 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v89 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v91 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v90 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008384((uint64_t *)&unk_1007B6220);
  __chkstk_darwin(v22);
  v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B41D0 != -1)
    swift_once(&qword_1007B41D0, sub_1004B464C);
  v25 = type metadata accessor for Logger(0);
  sub_100221DF8(v25, (uint64_t)qword_1007C3220);
  v26 = swift_bridgeObjectRetain_n(a1, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v92 = v20;
  if (!v29)
  {

    swift_bridgeObjectRelease_n(a1, 2);
    if (!*(_QWORD *)(a1 + 16))
      return;
LABEL_7:
    v45 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
    v46 = *(_QWORD *)(v45 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v24, a1 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80)), v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v24, 0, 1, v45);
    v47 = v95 + OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction;
    swift_beginAccess(v95 + OBJC_IVAR___SDShareSheetAirDropController_currentNearbySharingInteraction, &v98, 33, 0);
    sub_10023A084((uint64_t)v24, v47, (uint64_t *)&unk_1007B6220);
    v48 = swift_endAccess(&v98);
    SFAirDrop.NearbySharingInteraction.state.getter(v48);
    if ((*(unsigned int (**)(char *, uint64_t))(v17 + 88))(v19, v16) != enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      return;
    }
    (*(void (**)(char *, uint64_t))(v17 + 96))(v19, v16);
    v49 = v90;
    v50 = v91;
    v51 = v92;
    v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v91 + 32))(v90, v19, v92);
    v53 = v94;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter(v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v53, 1, v93) == 1)
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
      sub_10000D0F0(v94, &qword_1007B7280);
      return;
    }
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 32))(v89, v94, v93);
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v54);
    v55 = v88;
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v85, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v88);
    v56 = sub_100220D78(&qword_1007B6550, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    dispatch thunk of RawRepresentable.rawValue.getter(&v98, v55, v56);
    dispatch thunk of RawRepresentable.rawValue.getter(&v96, v55, v56);
    v57 = v99;
    v58 = v97;
    if (v98 == v96 && v99 == v97)
    {
      swift_bridgeObjectRelease_n(v99, 2);
      v59 = v88;
      v60 = *(void (**)(char *, uint64_t))(v87 + 8);
      v60(v85, v88);
      v61 = ((uint64_t (*)(char *, uint64_t))v60)(v86, v59);
    }
    else
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v99, v96, v97, 0);
      *(_QWORD *)&v63 = swift_bridgeObjectRelease(v57).n128_u64[0];
      v64 = swift_bridgeObjectRelease(v58, v63);
      v65 = v88;
      v66 = *(void (**)(char *, uint64_t, __n128))(v87 + 8);
      v66(v85, v88, v64);
      v61 = ((uint64_t (*)(char *, uint64_t))v66)(v86, v65);
      if ((v62 & 1) == 0)
      {
LABEL_18:
        (*(void (**)(char *, uint64_t))(v14 + 8))(v89, v93);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v92);
        return;
      }
    }
    dispatch thunk of SFLockStateMonitor.lockState.getter(v61);
    v68 = v83;
    v67 = v84;
    v69 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v82, enum case for DeviceLockState.unlocked(_:), v83);
    v70 = static DeviceLockState.== infix(_:_:)(v7, v69);
    v71 = *(void (**)(char *, uint64_t))(v67 + 8);
    v71(v69, v68);
    v71(v7, v68);
    if ((v70 & 1) != 0)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v95 + OBJC_IVAR___SDShareSheetAirDropController_delegate, v72);
      if (Strong)
      {
        v74 = (void *)Strong;
        isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v74, "didConnectNearbySharingInteractionWithEndpointUUID:", isa);
        swift_unknownObjectRelease(v74);

      }
    }
    goto LABEL_18;
  }
  v79 = v19;
  v78 = v16;
  v30 = swift_slowAlloc(12, -1);
  v81 = v7;
  v31 = (uint8_t *)v30;
  v32 = swift_slowAlloc(32, -1);
  v80 = v14;
  v33 = v32;
  v98 = v32;
  *(_DWORD *)v31 = 136315138;
  v77 = v31 + 4;
  v34 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  swift_bridgeObjectRetain((const char *)a1);
  v36 = v24;
  v37 = v17;
  v38 = Array.description.getter(v35, v34);
  v40 = v39;
  swift_bridgeObjectRelease((const char *)a1);
  v41 = v38;
  v17 = v37;
  v24 = v36;
  v96 = sub_100228BD8(v41, v40, &v98);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v77);
  swift_bridgeObjectRelease_n(a1, 2);
  v42 = (const char *)v40;
  v16 = v78;
  v19 = v79;
  swift_bridgeObjectRelease(v42);
  _os_log_impl((void *)&_mh_execute_header, v27, v28, "Boop2ShareSheet: Nearby sharing interactions changed: %s", v31, 0xCu);
  swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
  v43 = v33;
  v14 = v80;
  swift_slowDealloc(v43, -1, -1);
  v44 = v31;
  v7 = v81;
  swift_slowDealloc(v44, -1, -1);

  if (*(_QWORD *)(a1 + 16))
    goto LABEL_7;
}

uint64_t sub_1004BAEAC()
{
  return type metadata accessor for ShareSheetAirDropController(0);
}

uint64_t type metadata accessor for ShareSheetAirDropController(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C3298, (uint64_t)&nominal type descriptor for ShareSheetAirDropController);
}

void sub_1004BAEC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];

  v6[0] = "\b";
  v6[1] = &unk_1005DAF08;
  sub_100260B1C(319, (unint64_t *)&qword_1007BD730, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[4] = &unk_1005DAF20;
    v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[6] = &unk_1005DAF38;
    v6[7] = &unk_1005DAF38;
    v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[9] = &unk_1005DAF08;
    v6[10] = &unk_1005DAF08;
    v6[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[12] = "\b";
    sub_100260B1C(319, &qword_1007C32B0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction);
    if (v5 <= 0x3F)
    {
      v6[13] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 14, v6, a1 + 80);
    }
  }
}

void sub_1004BAFD0(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DeviceLockState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DeviceLockState.unlocked(_:), v6);
  LOBYTE(a1) = static DeviceLockState.== infix(_:_:)(a1, v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((a1 & 1) != 0)
  {
    v10 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
    v11 = (_QWORD *)swift_allocObject(&unk_10072B898, 40, 7);
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = v1;
    v12 = v1;
    v13 = sub_100252AF4((uint64_t)v5, (uint64_t)&unk_1007C3350, (uint64_t)v11);
    swift_release(v13);
    sub_1004B9ACC();
  }
  else
  {
    v14 = OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask;
    v15 = *(_QWORD *)&v1[OBJC_IVAR___SDShareSheetAirDropController_updateNearbySharingInteractionsTask];
    if (v15)
    {
      swift_retain();
      Task.cancel()();
      swift_release(v15);
      v16 = *(_QWORD *)&v1[v14];
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)&v1[v14] = 0;
    swift_release(v16);
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 1, 1, v17);
    v18 = (_QWORD *)swift_allocObject(&unk_10072B870, 40, 7);
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v1;
    v19 = v1;
    v20 = sub_100252AF4((uint64_t)v5, (uint64_t)&unk_1007C3340, (uint64_t)v18);
    swift_release(v20);
  }
}

uint64_t type metadata accessor for ShareSheetAirDropTransferUpdate()
{
  return objc_opt_self(SDShareSheetAirDropTransferUpdate);
}

id sub_1004BB5A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  v3 = a1 + *a3;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 8));
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

uint64_t sub_1004BB604(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = (uint64_t *)(a1 + *a4);
  v9 = v8[1];
  *v8 = v6;
  v8[1] = v7;
  return swift_bridgeObjectRelease(v9);
}

id sub_1004BB754(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  v3 = *(_QWORD *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1004BBBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  Swift::String v10;
  const char *object;
  __n128 v12;
  Swift::String v13;
  Swift::String v14;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = 0;
  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v19 = v17;
  v20 = v18;
  v6._object = (void *)0x800000010061DFB0;
  v6._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v6);
  v7 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_endpointUUID;
  v8 = swift_beginAccess(v7, &v17, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v7, v2, v8);
  v9 = sub_100220D78((unint64_t *)&qword_1007B63F0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v9);
  object = (const char *)v10._object;
  String.append(_:)(v10);
  v12 = swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v12);
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v16 = *(_OWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayName);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
  v14._countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v19;
}

uint64_t sub_1004BBE50()
{
  return type metadata accessor for ShareSheetAirDropNode(0);
}

uint64_t type metadata accessor for ShareSheetAirDropNode(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007C3328, (uint64_t)&nominal type descriptor for ShareSheetAirDropNode);
}

void sub_1004BBE6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[15];

  sub_100260B1C(319, (unint64_t *)&qword_1007B6230, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1005DAF08;
    v6[2] = &unk_1005DAF08;
    v6[3] = &unk_1005DAF08;
    v6[4] = &unk_1005DAF08;
    v6[5] = "\b";
    v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[7] = &unk_1005DAF20;
    v6[8] = &unk_1005DAF98;
    v6[9] = &unk_1005DAF98;
    v6[10] = &unk_1005DAF98;
    v6[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[12] = "\b";
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[13] = *(_QWORD *)(v4 - 8) + 64;
      v6[14] = "\b";
      swift_updateClassMetadata2(a1, 256, 15, v6, a1 + 80);
    }
  }
}

uint64_t sub_1004BBF54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1007C333C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000D098;
  v3[2] = v2;
  return swift_task_switch(sub_1004B9C44, 0, 0);
}

uint64_t sub_1004BBFB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C334C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1004B987C(a1, v4, v5, v6);
}

uint64_t sub_1004BC024()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004BC048()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004BC07C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1007C3364);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000D098;
  return sub_1004B9D6C(a1, v4, v5, v7, v6);
}

uint64_t sub_1004BC0F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C339C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_1004B88C8(a1, v4, v5, v6);
}

uint64_t sub_1004BC164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(const char **)(v0 + v5));
  v7 = *(_QWORD *)(v0 + v6 + 8);
  if (v7 >> 60 != 15)
    sub_100225AB4(*(_QWORD *)(v0 + v6), v7);
  v8 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 16;
  swift_bridgeObjectRelease(*(const char **)(v0 + v8 + 8));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_1004BC234(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = (uint64_t)v1 + v4;
  v11 = *(_QWORD *)((char *)v1 + v5);
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *(_QWORD *)((char *)v1 + v6 + 8);
  v14 = (_QWORD *)swift_task_alloc(dword_1007C33AC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10000D098;
  return sub_1004B62A8(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1004BC31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1004BC3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1007C33F4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10000D098;
  return sub_1004B91F4(a1, v6, v7, v8, v9);
}

uint64_t sub_1004BC454(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C3434);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_1004B5F00(a1, v4, v5, v6);
}

uint64_t sub_1004BC4C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004BC4F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1007C3454);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10000D098;
  return sub_1004B4DF4(a1, v4, v5, v6, v7, v8);
}

void sub_1004BC578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004B5318(a1, a2, v2);
}

id sub_1004BC584(uint64_t a1, const char *a2)
{
  BOOL v2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  void *v25;
  id v26;
  NSString v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;

  if (&protocol conformance descriptor for iosmacHardware)
    v2 = &protocol conformance descriptor for iosmacHardware == 0;
  else
    v2 = 1;
  if (v2
    || &type metadata accessor for iosmacHardware == 0
    || &type metadata for iosmacHardware == 0
    || &nominal type descriptor for iosmacHardware == 0)
  {
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100221DF8(v14, (uint64_t)qword_1007C3220);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_29;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ProductKit not available on this platform", v18, 2u);
    v19 = v18;
LABEL_28:
    swift_slowDealloc(v19, -1, -1);
LABEL_29:

    return 0;
  }
  v8 = sub_100008384(&qword_1007C3478);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_bridgeObjectRetain(a2);
  iosmacHardware.init(_:)(a1, a2, v11);
  v12 = type metadata accessor for iosmacHardware(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    sub_10000D0F0((uint64_t)v10, &qword_1007C3478);
LABEL_24:
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v31 = type metadata accessor for Logger(0);
    sub_100221DF8(v31, (uint64_t)qword_1007C3220);
    v32 = swift_bridgeObjectRetain_n(a2, 2);
    v16 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v50 = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(a2);
      v49 = sub_100228BD8(a1, (unint64_t)a2, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v34 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v33, "Missing image for device model %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      v19 = v34;
      goto LABEL_28;
    }

    v36 = a2;
LABEL_31:
    swift_bridgeObjectRelease_n(v36, 2);
    return 0;
  }
  v20 = iosmacHardware.imageName.getter();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  if (!v22)
    goto LABEL_24;
  v23 = type metadata accessor for ProductKitCatalog(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
  v25 = (void *)objc_opt_self(NSBundle);
  v26 = objc_msgSend(v25, "bundleForClass:", ObjCClassFromMetadata, swift_bridgeObjectRetain(v22).n128_f64[0]);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v28 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v27, v26);

  if (!v28)
  {
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v38 = type metadata accessor for Logger(0);
    sub_100221DF8(v38, (uint64_t)qword_1007C3220);
    swift_bridgeObjectRetain(v22);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v50 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain(v22);
      v49 = sub_100228BD8(v20, (unint64_t)v22, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v42 + 4);
      swift_bridgeObjectRelease_n(v22, 3);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Missing image in catalog %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      return 0;
    }

    v36 = v22;
    goto LABEL_31;
  }
  v29 = objc_msgSend(v28, "CGImage", swift_bridgeObjectRelease(v22).n128_f64[0]);
  if (!v29)
  {
    if (qword_1007B41D0 != -1)
      swift_once(&qword_1007B41D0, sub_1004B464C);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100221DF8(v44, (uint64_t)qword_1007C3220);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to create CGImage", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    return 0;
  }
  v30 = v29;

  return v30;
}

id sub_1004BCB94(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t *v37;
  const char *v38;
  double v39;
  id result;
  void *v41;
  char *v42;
  NSString v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t *v60;
  const char *v61;
  double v62;
  double v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  Class isa;
  void *v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t *v88;
  objc_class *ObjectType;
  uint64_t v90;
  uint64_t v91;
  objc_super v92;
  char v93[24];

  v87 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_nodeIdentifier], 1, 1, v4);
  v88 = (uint64_t *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_contactIdentifier];
  *(_OWORD *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_contactIdentifier] = xmmword_1005DAEC0;
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayName];
  *(_OWORD *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayName] = xmmword_1005DAEC0;
  v9 = (uint64_t *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_realName];
  *v9 = 0;
  v9[1] = 0;
  v84 = (uint64_t *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_model];
  *(_OWORD *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_model] = xmmword_1005DAEC0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_formattedHandles] = &_swiftEmptySetSingleton;
  v10 = OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_suggestionIndex;
  v11 = objc_allocWithZone((Class)NSNumber);
  v12 = v2;
  *(_QWORD *)&v2[v10] = objc_msgSend(v11, "initWithInteger:", 0);
  v13 = &v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_transportBundleID];
  *(_QWORD *)v13 = 0xD000000000000020;
  *((_QWORD *)v13 + 1) = 0x800000010061E0E0;
  v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_isClassroom] = 0;
  v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_isDisabled] = 0;
  v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_isSuggestion] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_selectionReason] = 0;
  v85 = OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayIcon;
  *(_QWORD *)&v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_displayIcon] = 0;
  v86 = OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_contact;
  *(_QWORD *)&v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_contact] = 0;
  v14 = sub_1002BE324(a1);
  if (v15)
    v16 = v14;
  else
    v16 = 0;
  v17 = 0xE000000000000000;
  v18 = (const char *)v8[1];
  if (v15)
    v17 = v15;
  *v8 = v16;
  v8[1] = v17;
  swift_bridgeObjectRelease(v18);
  NWEndpoint.endpointUUID()(v19);
  v20 = v12;
  v21 = &v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_endpointUUID];
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[OBJC_IVAR____TtC16DaemoniOSLibrary21ShareSheetAirDropNode_endpointUUID], v7, v4);
  v22 = swift_beginAccess(v21, v93, 0, 0);
  v23 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v5 + 16))(v7, v21, v4, v22);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v27 = (const char *)v9[1];
  *v9 = v24;
  v9[1] = v26;
  v28 = a1;
  swift_bridgeObjectRelease(v27);
  v29 = sub_1002BE330(a1);
  if (v30)
  {
    v31 = v29;
    v32 = v30;
    if ((v29 != 63 || v30 != (const char *)0xE100000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, 63, 0xE100000000000000, 0) & 1) == 0)
    {
      v60 = v84;
      v61 = (const char *)v84[1];
      *v84 = v31;
      v60[1] = (uint64_t)v32;
      *(_QWORD *)&v62 = swift_bridgeObjectRetain(v32).n128_u64[0];
      *(_QWORD *)&v63 = swift_bridgeObjectRelease(v61, v62).n128_u64[0];
      if (v87)
      {
        v64 = sub_1004BC584(v31, v32);
        swift_bridgeObjectRelease(v32);
        v42 = v20;
        v65 = *(void **)&v20[v85];
        *(_QWORD *)&v20[v85] = v64;
        goto LABEL_33;
      }
      swift_bridgeObjectRelease(v32, v63);
LABEL_36:
      v42 = v12;
      goto LABEL_37;
    }
    swift_bridgeObjectRelease(v32);
  }
  v33 = sub_1002BE318(a1);
  if (!v34)
    goto LABEL_36;
  v35 = v33;
  v36 = v34;
  v37 = v88;
  v38 = (const char *)v88[1];
  *v88 = v33;
  v37[1] = (uint64_t)v34;
  *(_QWORD *)&v39 = swift_bridgeObjectRetain(v34).n128_u64[0];
  swift_bridgeObjectRelease(v38, v39);
  result = objc_msgSend((id)objc_opt_self(SDStatusMonitor), "sharedMonitor");
  if (result)
  {
    v41 = result;
    v42 = v12;
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v41, "contactWithContactIdentifier:", v43);

    if (!v44)
    {

      if (qword_1007B41D0 != -1)
        swift_once(&qword_1007B41D0, sub_1004B464C);
      v54 = type metadata accessor for Logger(0);
      sub_100221DF8(v54, (uint64_t)qword_1007C3220);
      swift_bridgeObjectRetain(v36);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = swift_slowAlloc(32, -1);
        v91 = v59;
        *(_DWORD *)v58 = 136315138;
        swift_bridgeObjectRetain(v36);
        v90 = sub_100228BD8(v35, (unint64_t)v36, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v58 + 4);
        swift_bridgeObjectRelease_n(v36, 3);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to find contact with identifier: %s", v58, 0xCu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v36, 2);
      }
      goto LABEL_38;
    }
    v45 = *(void **)&v12[v86];
    *(_QWORD *)&v12[v86] = v44;
    v46 = v44;

    v47 = objc_msgSend((id)objc_opt_self(CNContactFormatter), "stringFromContact:style:", v46, 0);
    if (v47)
    {
      v48 = v47;
      swift_bridgeObjectRelease(v36);
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

      v52 = (const char *)v8[1];
      *v8 = v49;
      v8[1] = v51;
      swift_bridgeObjectRelease(v52);
      v53 = v87;
      if (!v87)
        goto LABEL_34;
    }
    else
    {
      if (qword_1007B41D0 != -1)
        swift_once(&qword_1007B41D0, sub_1004B464C);
      v66 = type metadata accessor for Logger(0);
      sub_100221DF8(v66, (uint64_t)qword_1007C3220);
      swift_bridgeObjectRetain(v36);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.error.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = swift_slowAlloc(32, -1);
        v91 = v71;
        *(_DWORD *)v70 = 136315138;
        v88 = (uint64_t *)(v70 + 4);
        swift_bridgeObjectRetain(v36);
        v90 = sub_100228BD8(v35, (unint64_t)v36, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v88);
        swift_bridgeObjectRelease_n(v36, 3);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "No name for contact with identifier: %s", v70, 0xCu);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);

        v53 = v87;
        if (!v87)
          goto LABEL_34;
      }
      else
      {

        swift_bridgeObjectRelease_n(v36, 2);
        v53 = v87;
        if (!v87)
        {
LABEL_34:

LABEL_37:
          goto LABEL_38;
        }
      }
    }
    v72 = sub_10004E578(v46, 1, 0, v53);
    if (!v72)
      goto LABEL_34;
    v73 = v72;
    v74 = v72;
    v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v77 = v76;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100225AB4(v75, v77);
    v79 = (void *)SFCreateCGImageFromData(isa);

    if (!v79)
      goto LABEL_34;
    v80 = v79;

    v65 = *(void **)&v42[v85];
    *(_QWORD *)&v42[v85] = v79;
LABEL_33:

LABEL_38:
    v92.receiver = v42;
    v92.super_class = ObjectType;
    v81 = objc_msgSendSuper2(&v92, "init");
    v82 = type metadata accessor for NWEndpoint(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v28, v82);
    return v81;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004BD360()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004BD384(uint64_t a1)
{
  uint64_t v1;

  sub_1004B4958(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1004BD38C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004BD39C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1004BD3B4(uint64_t a1, uint64_t a2)
{
  return sub_1004BD3D8(a1, a2, (SEL *)&selRef_uniqueIDOverride);
}

uint64_t sub_1004BD3C0(uint64_t a1, uint64_t a2)
{
  return sub_1004BD3D8(a1, a2, (SEL *)&selRef_modelIdentifier);
}

uint64_t sub_1004BD3CC(uint64_t a1, uint64_t a2)
{
  return sub_1004BD3D8(a1, a2, (SEL *)&selRef_productBuildVersion);
}

uint64_t sub_1004BD3D8(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

id sub_1004BD438()
{
  id *v0;

  return objc_msgSend(*v0, "isActive");
}

id sub_1004BD458()
{
  id *v0;

  return objc_msgSend(*v0, "isNearby");
}

uint64_t sub_1004BD478@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "nsuuid");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t sub_1004BD4FC()
{
  id *v0;
  uint64_t v2;

  objc_msgSend(*v0, "operatingSystemVersion");
  return v2;
}

uint64_t sub_1004BD530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C3490);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C3490);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004BD5C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SFAirDropReceive.AskRequest(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008384((uint64_t *)&unk_1007B5200);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SFAirDrop.TransferType(0);
  v2[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[17] = v11;
  v2[18] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004BD6EC, static AirDropActor.shared, 0);
}

uint64_t sub_1004BD6EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSURL *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  NSObject *log;
  uint64_t *v67;
  uint64_t v68;
  os_log_type_t type;
  uint64_t v70;
  uint64_t v71;

  v2 = *(_QWORD *)(v1 + 136);
  v3 = *(_QWORD *)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 128);
  v5 = SFAirDropReceive.AskRequest.type.getter(a1);
  v6 = SFAirDrop.TransferType.isLinks.getter(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  if ((v6 & 1) == 0)
    goto LABEL_32;
  v70 = v1 + 24;
  v8 = *(_QWORD *)(v1 + 104);
  v9 = SFAirDropReceive.AskRequest.urlItems.getter(v7);
  v10 = v9;
  v11 = 0;
  v12 = v9 + 56;
  v13 = -1;
  v14 = -1 << *(_BYTE *)(v9 + 32);
  if (-v14 < 64)
    v13 = ~(-1 << -(char)v14);
  v15 = v13 & *(_QWORD *)(v9 + 56);
  v16 = (unint64_t)(63 - v14) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v11 << 6);
      goto LABEL_21;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v19 >= v16)
      goto LABEL_24;
    v20 = *(_QWORD *)(v12 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v16)
        goto LABEL_24;
      v20 = *(_QWORD *)(v12 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v16)
          goto LABEL_24;
        v20 = *(_QWORD *)(v12 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_21:
    v22 = *(_QWORD *)(v1 + 120);
    v23 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v22, *(_QWORD *)(v10 + 48) + *(_QWORD *)(v8 + 72) * v18, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v22, 1, v23) == 1)
      goto LABEL_25;
    v24 = *(_QWORD *)(v1 + 112);
    v25 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 32))(v24, *(_QWORD *)(v1 + 120), v25);
    URL._bridgeToObjectiveC()(v26);
    v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v25);
    LOBYTE(v24) = SFIsNewsLink(v28);

    if ((v24 & 1) == 0)
    {
      swift_release(v10);
      goto LABEL_32;
    }
  }
  v21 = v19 + 3;
  if (v21 >= v16)
  {
LABEL_24:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v8 + 56))(*(_QWORD *)(v1 + 120), 1, 1, *(_QWORD *)(v1 + 96));
LABEL_25:
    swift_release(v10);
    v29 = objc_allocWithZone((Class)LSApplicationRecord);
    v30 = sub_100528FF4(0x6C7070612E6D6F63, 0xEE007377656E2E65, 1);
    v53 = *(_QWORD *)(v1 + 40);
    v54 = *(void **)(v53 + 16);
    *(_QWORD *)(v53 + 16) = v30;

    goto LABEL_29;
  }
  v20 = *(_QWORD *)(v12 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v16)
      goto LABEL_24;
    v20 = *(_QWORD *)(v12 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_35:
  __break(1u);
  swift_once(&qword_1007B41D8, sub_1004BD530);
  v31 = *(_QWORD *)(v1 + 80);
  v32 = *(_QWORD *)(v1 + 88);
  v33 = *(_QWORD *)(v1 + 72);
  v34 = *(_QWORD *)(v1 + 32);
  v35 = type metadata accessor for Logger(0);
  sub_100221DF8(v35, (uint64_t)qword_1007C3490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v34, v33);
  swift_errorRetain(v10);
  v36 = swift_errorRetain(v10);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v1 + 80);
  v41 = *(_QWORD *)(v1 + 88);
  v42 = *(_QWORD *)(v1 + 72);
  if (v39)
  {
    type = v38;
    v43 = *(_QWORD *)(v1 + 64);
    v65 = *(_QWORD *)(v1 + 56);
    v44 = *(_QWORD *)(v1 + 48);
    v45 = swift_slowAlloc(22, -1);
    v67 = (uint64_t *)swift_slowAlloc(8, -1);
    v68 = swift_slowAlloc(32, -1);
    v71 = v68;
    *(_DWORD *)v45 = 136315394;
    log = v37;
    SFAirDropReceive.AskRequest.id.getter(v68);
    v46 = sub_1002232C0();
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v44, v46);
    v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v43, v44);
    *(_QWORD *)(v1 + 16) = sub_100228BD8(v47, (unint64_t)v49, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v70, v45 + 4);
    v50 = swift_bridgeObjectRelease(v49);
    (*(void (**)(uint64_t, uint64_t, __n128))(v40 + 8))(v41, v42, v50);
    *(_WORD *)(v45 + 12) = 2112;
    swift_errorRetain(v10);
    v51 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v1 + 24) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v1 + 32, v45 + 14);
    *v67 = v51;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to get News app for ask request %s: %@", (uint8_t *)v45, 0x16u);
    v52 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v67, 1, v52);
    swift_slowDealloc(v67, -1, -1);
    swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(v10);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
LABEL_29:
  v55 = *(void **)(*(_QWORD *)(v1 + 40) + 16);
  if (!v55
    || (v56 = v55,
        v57 = objc_msgSend(v56, "applicationState"),
        v58 = objc_msgSend(v57, "isInstalled"),
        v56,
        v57,
        (v58 & 1) == 0))
  {
LABEL_32:
    v59 = 0;
    goto LABEL_33;
  }
  v59 = 1;
LABEL_33:
  v61 = *(_QWORD *)(v1 + 112);
  v60 = *(_QWORD *)(v1 + 120);
  v62 = *(_QWORD *)(v1 + 88);
  v63 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 144));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v59);
}

uint64_t type metadata accessor for SDAirDropContentHandlerNewsLinks()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary32SDAirDropContentHandlerNewsLinks);
}

uint64_t sub_1004BDCD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SDAirDropContentHandlerNewsLinks();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1004BDD04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1007C34D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10022320C;
  return sub_1004BD5C0(a1);
}

void sub_1004BDD58(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  double v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  _BYTE v25[56];

  v3 = SFAirDropReceive.AskRequest.urlItems.getter(a1);
  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease((const char *)v3);
  v5 = sub_100008384(&qword_1007B7600);
  inited = swift_initStackObject(v5, v25);
  *(_OWORD *)(inited + 16) = xmmword_1005CD2A0;
  *(_QWORD *)(inited + 32) = 0x4E494C5F5357454ELL;
  v7 = inited + 32;
  *(_QWORD *)(inited + 40) = 0xE90000000000004BLL;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)&v8 = swift_bridgeObjectRetain((const char *)0xE90000000000004BLL).n128_u64[0];
  swift_bridgeObjectRetain((const char *)inited, v8);
  v9._countAndFlagsBits = 95;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x4E494C5F5357454ELL;
  v10._object = (void *)0xE90000000000004BLL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease((const char *)0xE90000000000004BLL);
  if (v4 > 1)
  {
    v11._countAndFlagsBits = 0x4C4152554C505FLL;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
  }
  swift_bridgeObjectRelease((const char *)inited);
  if ((a2 & 1) != 0)
  {
    v12._countAndFlagsBits = 0x4C4154495041435FLL;
    v12._object = (void *)0xEC00000044455A49;
    String.append(_:)(v12);
  }
  v13._countAndFlagsBits = 0x545845545FLL;
  v13._object = (void *)0xE500000000000000;
  String.append(_:)(v13);
  swift_setDeallocating(inited);
  v14 = *(_QWORD *)(inited + 16);
  v15 = sub_100008384(&qword_1007B7608);
  swift_arrayDestroy(v7, v14, v15);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((const char *)0xEF524546534E4152);
  v18 = (id)SFLocalizedStringForKey(v16, v17);

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22 = sub_100008384((uint64_t *)&unk_1007B86C0);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1005CD2A0;
    *(_QWORD *)(v23 + 56) = &type metadata for Int;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v23 + 32) = v4;
    static String.localizedStringWithFormat(_:_:)(v19, v21, v23);
    *(_QWORD *)&v24 = swift_bridgeObjectRelease(v21).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v23, v24);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1004BDFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return swift_task_switch(sub_1004BDFCC, v4, 0);
}

uint64_t sub_1004BDFCC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v8;
  uint64_t v9;
  __SecTrust *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *log;
  const char *v28;
  uint64_t *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    if (qword_1007B41E0 != -1)
      swift_once(&qword_1007B41E0, sub_1004BEAC4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100221DF8(v2, (uint64_t)qword_1007C3590);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No record data received for contact lookup", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0, 0);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 96) = *(_QWORD *)(v9 + 112);
    v10 = *(__SecTrust **)(v9 + 120);
    sub_10022E4A8(v8, v1);
    sub_1003908B8(v10, &v30);
    v11 = v30;
    v12 = v31;
    v13 = v32;
    v14 = v33;
    *(_QWORD *)(v0 + 104) = v30;
    *(_QWORD *)(v0 + 112) = v13;
    v15 = v34;
    *(_QWORD *)(v0 + 120) = v34;
    if (qword_1007B41E0 != -1)
      swift_once(&qword_1007B41E0, sub_1004BEAC4);
    v16 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 128) = sub_100221DF8(v16, (uint64_t)qword_1007C3590);
    swift_bridgeObjectRetain_n(v15, 4);
    swift_bridgeObjectRetain_n(v11, 4);
    v17 = swift_bridgeObjectRetain_n(v13, 4);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      log = v18;
      v29 = (uint64_t *)(v0 + 48);
      v20 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v35 = v26;
      *(_DWORD *)v20 = 136315394;
      v28 = v12;
      v21 = v13;
      if (!v13)
      {
        v12 = (const char *)0xD000000000000015;
        v30 = 0;
        v31 = (const char *)0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v31);
        v21 = (const char *)0x8000000100612DF0;
      }
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(v0 + 40) = sub_100228BD8((uint64_t)v12, (unint64_t)v21, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v29, v20 + 4);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v15, 2);
      *(_WORD *)(v20 + 12) = 2080;
      v22 = v14;
      v23 = v15;
      if (!v15)
      {
        v22 = 0xD000000000000015;
        v30 = 0;
        v31 = (const char *)0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v31);
        v23 = (const char *)0x8000000100612DF0;
      }
      swift_bridgeObjectRetain(v15);
      *v29 = sub_100228BD8(v22, (unint64_t)v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v0 + 56, v20 + 14);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v15, 2);
      _os_log_impl((void *)&_mh_execute_header, log, v19, "Hash lookup complete: email hash - %s phone hash - %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      v12 = v28;
    }
    else
    {
      swift_bridgeObjectRelease_n(v11, 4);
      swift_bridgeObjectRelease_n(v13, 4);
      swift_bridgeObjectRelease_n(v15, 4);

    }
    v24 = (_QWORD *)swift_task_alloc(dword_1007C35DC);
    *(_QWORD *)(v0 + 136) = v24;
    *v24 = v0;
    v24[1] = sub_1004BE444;
    v25 = *(_QWORD *)(v0 + 88);
    v24[5] = v15;
    v24[6] = v25;
    v24[3] = v13;
    v24[4] = v14;
    v24[2] = v12;
    return swift_task_switch(sub_1004BEB74, v25, 0);
  }
}

uint64_t sub_1004BE444(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 136);
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1004BE4A4, v5, 0);
}

uint64_t sub_1004BE4A4()
{
  uint64_t v0;
  const char *v1;
  void *v2;
  NSString v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  const char *v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  const char *v20;
  const char *v21;
  double v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  double v31;
  const char *v32;
  void *v33;
  Class isa;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint8_t *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  const char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  const char *v61;
  unint64_t v62;
  NSObject *log;
  uint64_t v64;

  v1 = *(const char **)(v0 + 152);
  if (!v1)
  {
    v13 = *(const char **)(v0 + 112);
    v14 = *(const char **)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)&v17 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 104)).n128_u64[0];
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v14, v17).n128_u64[0];
    swift_bridgeObjectRelease(v13, v18);
    sub_100225AA0(v16, v15);
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144), 0, *(_QWORD *)(v0 + 144), 0);
  }
  v2 = *(void **)(v0 + 96);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "verifiedIdentityForAppleID:", v3, swift_bridgeObjectRelease(v1).n128_f64[0]);

  if (!v4)
  {
    v21 = *(const char **)(v0 + 112);
    v20 = *(const char **)(v0 + 120);
    *(_QWORD *)&v22 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0 + 104)).n128_u64[0];
    *(_QWORD *)&v23 = swift_bridgeObjectRelease(v20, v22).n128_u64[0];
    swift_bridgeObjectRelease(v21, v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 56);
    v28 = *(_QWORD *)(v0 + 64);
    if (v27)
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No Verified identity found", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
    goto LABEL_19;
  }
  v5 = v4;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(const char **)(v0 + 120);
  if (v8)
  {
    v61 = *(const char **)(v0 + 120);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    *(_QWORD *)(v0 + 32) = v5;
    v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 4);
    *v59 = v4;

    v9 = v61;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Confirmed verified identity %@", v10, 0xCu);
    v12 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v59, 1, v12);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {

  }
  *(_QWORD *)&v31 = swift_bridgeObjectRelease(v9).n128_u64[0];
  v32 = *(const char **)(v0 + 104);
  v33 = *(void **)(v0 + 96);
  swift_bridgeObjectRelease(*(const char **)(v0 + 112), v31);
  sub_1004BECBC();
  sub_100391DD4();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend(v33, "contactWithPreferredIdentifierForContacts:", isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

  if (v35)
  {
    v37 = objc_msgSend(v35, "identifier");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v41 = objc_msgSend(objc_allocWithZone((Class)CNContactFormatter), "init");
    v42 = objc_msgSend(v41, "stringFromContact:", v35);

    if (v42)
    {
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

    }
    else
    {
      v43 = 0;
      v45 = 0;
    }
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 80), 2);
    v49 = swift_bridgeObjectRetain_n(v40, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    log = v50;
    v52 = os_log_type_enabled(v50, v51);
    v53 = *(const char **)(v0 + 80);
    if (v52)
    {
      v57 = *(_QWORD *)(v0 + 72);
      v60 = *(_QWORD *)(v0 + 56);
      v62 = *(_QWORD *)(v0 + 64);
      v54 = swift_slowAlloc(22, -1);
      v58 = swift_slowAlloc(64, -1);
      v64 = v58;
      *(_DWORD *)v54 = 136315394;
      swift_bridgeObjectRetain(v53);
      *(_QWORD *)(v0 + 16) = sub_100228BD8(v57, (unint64_t)v53, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v54 + 4);
      swift_bridgeObjectRelease_n(v53, 3);
      *(_WORD *)(v54 + 12) = 2080;
      swift_bridgeObjectRetain(v40);
      *(_QWORD *)(v0 + 24) = sub_100228BD8(v38, (unint64_t)v40, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v54 + 14);
      swift_bridgeObjectRelease_n(v40, 3);
      _os_log_impl((void *)&_mh_execute_header, log, v51, "Matched serviceName %s to contactID %s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v54, -1, -1);

      sub_100225AA0(v60, v62);
    }
    else
    {
      v56 = *(_QWORD *)(v0 + 56);
      v55 = *(_QWORD *)(v0 + 64);

      swift_bridgeObjectRelease_n(v53, 2);
      swift_bridgeObjectRelease_n(v40, 2);

      sub_100225AA0(v56, v55);
    }
    return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v0 + 8))(v38, v40, v43, v45);
  }
  v25 = Logger.logObject.getter(v36);
  v46 = static os_log_type_t.default.getter(v25);
  v47 = os_log_type_enabled(v25, v46);
  v29 = *(_QWORD *)(v0 + 56);
  v28 = *(_QWORD *)(v0 + 64);
  if (!v47)
  {

LABEL_19:
    sub_100225AA0(v29, v28);

    goto LABEL_20;
  }
  v48 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v48 = 0;
  _os_log_impl((void *)&_mh_execute_header, v25, v46, "No matching contacts found", v48, 2u);
  swift_slowDealloc(v48, -1, -1);
  sub_100225AA0(v29, v28);

LABEL_20:
  v38 = 0;
  v40 = 0;
  v43 = 0;
  v45 = 0;
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v0 + 8))(v38, v40, v43, v45);
}

uint64_t sub_1004BEAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C3590);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C3590);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004BEB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_1004BEB74, v4, 0);
}

uint64_t sub_1004BEB74()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(*(_QWORD *)(v0 + 48) + 112);
  if (*(_QWORD *)(v0 + 24))
  {
    v2 = String._bridgeToObjectiveC()();
    if (*(_QWORD *)(v0 + 40))
    {
LABEL_3:
      v3 = String._bridgeToObjectiveC()();
      goto LABEL_6;
    }
  }
  else
  {
    v2 = 0;
    if (*(_QWORD *)(v0 + 40))
      goto LABEL_3;
  }
  v3 = 0;
LABEL_6:
  v4 = objc_msgSend(v1, "emailOrPhoneForEmailHash:phoneHash:", v2, v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v7);
}

uint64_t sub_1004BEC70()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SDAirDropBonjourContactFetcher()
{
  return objc_opt_self(_TtC16DaemoniOSLibrary30SDAirDropBonjourContactFetcher);
}

unint64_t sub_1004BECBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1007B5470;
  if (!qword_1007B5470)
  {
    v1 = objc_opt_self(CNContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1007B5470);
  }
  return result;
}

void sub_1004BECF8(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(void **__return_ptr, _OWORD *);
  uint64_t v3;
  uint64_t (*v4)(void **);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void (*v22)(id *__return_ptr, _OWORD *);
  uint64_t v23;
  void *v24;
  _OWORD v25[2];
  uint64_t v26;
  id v27[2];
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v2 = (void (*)(void **__return_ptr, _OWORD *))a1[1];
  v3 = a1[2];
  v4 = (uint64_t (*)(void **))a1[3];
  v33 = *a1;
  v1 = v33;
  v5 = -1 << *(_BYTE *)(v33 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v33 + 56);
  v8 = a1[4];
  v22 = (void (*)(id *__return_ptr, _OWORD *))a1[5];
  v9 = a1[6];
  sub_1004C3F68(&v33);
  v10 = (unint64_t)(63 - v5) >> 6;
  swift_retain(v3);
  swift_retain(v8);
  v23 = v9;
  swift_retain(v9);
  v11 = 0;
  if (!v7)
    goto LABEL_9;
LABEL_7:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v11 << 6);
LABEL_8:
  sub_10026EFF8(*(_QWORD *)(v1 + 48) + 40 * v13, (uint64_t)v30);
  while (1)
  {
    sub_10022E718((uint64_t)v30, (uint64_t)v27, &qword_1007C3710);
    if (!*((_QWORD *)&v28 + 1))
    {
LABEL_36:
      sub_10022E5B4(v1);
      swift_release(v23);
      swift_release(v8);
      swift_release(v3);
      return;
    }
    v25[0] = *(_OWORD *)v27;
    v25[1] = v28;
    v26 = v29;
    v2(&v24, v25);
    v17 = v24;
    sub_10022E6C0((uint64_t)v25);
    v32 = v17;
    if ((v4(&v32) & 1) != 0)
    {
      *(_QWORD *)&v30[0] = v17;
      v22(v27, v30);

      v18 = v27[0];
      if ((objc_msgSend(v27[0], "isActive") & 1) != 0)
        goto LABEL_36;

      if (v7)
        goto LABEL_7;
    }
    else
    {

      if (v7)
        goto LABEL_7;
    }
LABEL_9:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v14 >= v10)
    {
      v16 = v11;
    }
    else
    {
      v15 = *(_QWORD *)(v21 + 8 * v14);
      if (v15)
        goto LABEL_12;
      v19 = v11 + 2;
      v16 = v11 + 1;
      if (v11 + 2 < v10)
      {
        v15 = *(_QWORD *)(v21 + 8 * v19);
        if (v15)
          goto LABEL_22;
        v20 = v11 + 3;
        v16 = v11 + 2;
        if (v11 + 3 < v10)
        {
          v15 = *(_QWORD *)(v21 + 8 * v20);
          if (v15)
            goto LABEL_25;
          v19 = v11 + 4;
          v16 = v11 + 3;
          if (v11 + 4 < v10)
          {
            v15 = *(_QWORD *)(v21 + 8 * v19);
            if (v15)
            {
LABEL_22:
              v14 = v19;
LABEL_12:
              v7 = (v15 - 1) & v15;
              v13 = __clz(__rbit64(v15)) + (v14 << 6);
              v11 = v14;
              goto LABEL_8;
            }
            v20 = v11 + 5;
            v16 = v11 + 4;
            if (v11 + 5 < v10)
            {
              v15 = *(_QWORD *)(v21 + 8 * v20);
              if (v15)
              {
LABEL_25:
                v14 = v20;
                goto LABEL_12;
              }
              v14 = v11 + 6;
              v16 = v11 + 5;
              if (v11 + 6 < v10)
              {
                v15 = *(_QWORD *)(v21 + 8 * v14);
                if (v15)
                  goto LABEL_12;
                while (v10 - 7 != v11)
                {
                  v15 = *(_QWORD *)(v1 + 112 + 8 * v11++);
                  if (v15)
                  {
                    v14 = v11 + 6;
                    goto LABEL_12;
                  }
                }
                v16 = v10 - 1;
              }
            }
          }
        }
      }
    }
    v7 = 0;
    v31 = 0;
    v11 = v16;
    memset(v30, 0, sizeof(v30));
  }
  __break(1u);
}

void sub_1004BF048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v39 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.Component(0);
  v5 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  v42 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar(0);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008384(&qword_1007C4330);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v34 - v18;
  v20 = v0 + 96;
  swift_beginAccess(v0 + 96, v43, 32, 0);
  v21 = (void *)sub_10027A0D4();
  v40 = v0;
  sub_10023A834((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  sub_100279178((uint64_t)v19);
  swift_endAccess(v43);
  if ((sub_1004C34D4(v21, (uint64_t)v19) & 1) == 0)
  {
    sub_1002D4730((uint64_t)v19);

    return;
  }
  sub_10027ACA0((uint64_t)v19, (uint64_t)v17);
  v35 = v2;
  v36 = v1;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v17, 1, v1);
  v23 = sub_1002D4730((uint64_t)v17);
  if (v22 != 1)
    goto LABEL_7;
  static Calendar.current.getter(v23);
  v24 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v7, enum case for Calendar.Component.second(_:), v41);
  v26 = sub_1003CB6E0();
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return;
  }
  v27 = (uint64_t)v26;
  v28 = v39;
  static Date.now.getter(v25);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v7, v27, v28, 0);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
  sub_1002D4730((uint64_t)v19);
  sub_10022E718((uint64_t)v14, (uint64_t)v19, &qword_1007C4330);
  sub_10027ACA0((uint64_t)v19, (uint64_t)v14);
  swift_beginAccess(v20, v43, 33, 0);
  v29 = *(_QWORD *)(v40 + 120);
  v30 = *(_QWORD *)(v40 + 128);
  sub_10026EEE8(v20, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 40))(v14, v29, v30);
  swift_endAccess(v43);
  sub_1004BF8BC((uint64_t)v19);
LABEL_7:
  if (v21)
  {
    v31 = v21;
    v32 = objc_msgSend(v31, "URI");
    v33 = objc_msgSend(v32, "prefixedURI");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  }
  sub_1002D4730((uint64_t)v19);
}

uint64_t sub_1004BF404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C35E0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C35E0);
  if (qword_1007B3E48 != -1)
    swift_once(&qword_1007B3E48, sub_1002E9E20);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D81A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004BF494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  if (qword_1007B41E8 != -1)
    swift_once(&qword_1007B41E8, sub_1004BF404);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100221DF8(v2, (uint64_t)qword_1007C35E0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pseudonym service network path monitor is reachable", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(v1, v9, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v8 = result;
    sub_1004BF59C();
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1004BF59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v30[24];

  v1 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v1);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_100008384(&qword_1007C4330);
  v5 = __chkstk_darwin(v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v30[-v8 - 8];
  sub_1004BFB18();
  swift_beginAccess(v0 + 96, v30, 32, 0);
  v10 = (void *)sub_10027A0D4();
  sub_10023A834((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  sub_100279178((uint64_t)v9);
  swift_endAccess(v30);
  if ((sub_1004C34D4(v10, (uint64_t)v9) & 1) != 0)
  {
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v11, "properties");
      v13 = objc_msgSend(v12, "expirationDate");

      static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v14 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);
    }
    else
    {
      v21 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21);
    }
    sub_1004BFBC4((uint64_t)v7);
    sub_1002D4730((uint64_t)v7);
    sub_1004BF8BC((uint64_t)v9);
  }
  else
  {
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v3, 1, 1, v15);
    v16 = qword_1007B3D98;
    swift_retain(v0);
    if (v16 != -1)
      swift_once(&qword_1007B3D98, sub_1002ACAEC);
    v17 = static AirDropActor.shared;
    v18 = sub_1002ACBAC();
    v19 = (_QWORD *)swift_allocObject(&unk_10072BC70, 40, 7);
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = v0;
    swift_retain(v17);
    v20 = sub_100252EC0((uint64_t)v3, (uint64_t)&unk_1007C3788, (uint64_t)v19);
    swift_release(v20);
  }
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v3, 1, 1, v22);
  v23 = qword_1007B3D98;
  swift_retain(v0);
  if (v23 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v24 = static AirDropActor.shared;
  v25 = sub_1002ACBAC();
  v26 = (_QWORD *)swift_allocObject(&unk_10072BC98, 40, 7);
  v26[2] = v24;
  v26[3] = v25;
  v26[4] = v0;
  swift_retain(v24);
  v27 = sub_100252EC0((uint64_t)v3, (uint64_t)&unk_1007C3798, (uint64_t)v26);
  swift_release(v27);

  return sub_1002D4730((uint64_t)v9);
}

uint64_t sub_1004BF8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);

  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - v14;
  sub_10027ACA0(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_1002D4730((uint64_t)v8);
  v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v28(v15, v8, v9);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 1, 1, v17);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v18 = qword_1007B3D98;
  swift_retain(v1);
  v27 = v5;
  if (v18 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v19 = static AirDropActor.shared;
  v20 = sub_1002ACBAC();
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_10072BBA8, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v19;
  *(_QWORD *)(v24 + 24) = v20;
  v28((char *)(v24 + v22), v13, v9);
  *(_QWORD *)(v24 + v23) = v1;
  swift_retain(v19);
  v25 = sub_100252EC0((uint64_t)v27, (uint64_t)&unk_1007C3720, v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v26 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 184) = v25;
  return swift_release(v26);
}

uint64_t sub_1004BFB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 176);
  if (v1)
  {
    swift_retain(*(_QWORD *)(v0 + 176));
    Task.cancel()();
    swift_release(v1);
    v2 = *(_QWORD *)(v0 + 176);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(v0 + 176) = 0;
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 184);
  if (v3)
  {
    swift_retain(*(_QWORD *)(v0 + 184));
    Task.cancel()();
    swift_release(v3);
    v4 = *(_QWORD *)(v0 + 184);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v0 + 184) = 0;
  return swift_release(v4);
}

uint64_t sub_1004BFBC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);

  v3 = sub_100008384(&qword_1007B68A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008384(&qword_1007C4330);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - v14;
  sub_10027ACA0(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_1002D4730((uint64_t)v8);
  v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v28(v15, v8, v9);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 1, 1, v17);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v18 = qword_1007B3D98;
  swift_retain(v1);
  v27 = v5;
  if (v18 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v19 = static AirDropActor.shared;
  v20 = sub_1002ACBAC();
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_10072BC20, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v19;
  *(_QWORD *)(v24 + 24) = v20;
  v28((char *)(v24 + v22), v13, v9);
  *(_QWORD *)(v24 + v23) = v1;
  swift_retain(v19);
  v25 = sub_100252EC0((uint64_t)v27, (uint64_t)&unk_1007C3768, v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v26 = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 176) = v25;
  return swift_release(v26);
}

uint64_t sub_1004BFE20()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v1 = (_QWORD *)swift_task_alloc(dword_1007C373C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000D098;
  return sub_1004BFE90();
}

uint64_t sub_1004BFE90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[30] = v0;
  v2 = sub_100008384(&qword_1007B68A0);
  v1[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100008384(&qword_1007C4330) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v3);
  v1[33] = swift_task_alloc(v3);
  v1[34] = swift_task_alloc(v3);
  v1[35] = swift_task_alloc(v3);
  v4 = type metadata accessor for ContinuousClock(0);
  v1[36] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[37] = v5;
  v1[38] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v6 = static AirDropActor.shared;
  v1[39] = static AirDropActor.shared;
  return swift_task_switch(sub_1004BFF94, v6, 0);
}

uint64_t sub_1004BFF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_1007B41E8 != -1)
    swift_once(&qword_1007B41E8, sub_1004BF404);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100221DF8(v1, (uint64_t)qword_1007C35E0);
  *(_QWORD *)(v0 + 320) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for first unlock to provision AirDrop pseudonym", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1007BD67C);
  *(_QWORD *)(v0 + 328) = v6;
  *v6 = v0;
  v6[1] = sub_1004C00A0;
  return sub_10038F058();
}

uint64_t sub_1004C00A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_1004C00F8, v1, 0);
}

uint64_t sub_1004C00F8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v11;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting to start provisioning", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 240);

  v6 = static Duration.seconds(_:)(*(double *)(v5
                                             + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropPseudonymService_processStartupDelaySeconds));
  v8 = v7;
  ContinuousClock.init()(v6);
  v11 = (char *)&dword_1007B6518 + dword_1007B6518;
  v9 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 336) = v9;
  *v9 = v1;
  v9[1] = sub_1004C020C;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v11)(v6, v8, 0, 0, 1);
}

uint64_t sub_1004C020C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 336));
  v4 = v2[38];
  v3 = v2[39];
  v7 = v2 + 36;
  v5 = v2[36];
  v6 = v7[1];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v8 = sub_1004C43A8;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v8 = sub_1004C02AC;
  }
  return swift_task_switch(v8, v3, 0);
}

uint64_t sub_1004C02AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t *, uint64_t, uint64_t);
  id v60;
  void (*v61)(uint64_t *, _QWORD, __n128);
  const char **v62;
  const char **v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  const char *v66;
  double v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t *v94;
  NSObject **v95;
  _QWORD *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t (*v103)(NSObject *, uint64_t, uint64_t);
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  const char *v107;
  unint64_t v108;

  v2 = (uint64_t *)(v0 + 240);
  v1 = *(_QWORD **)(v0 + 240);
  v3 = v1[5];
  v4 = v1[6];
  sub_10023A834(v1 + 2, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  v2[13] = v5;
  v2[14] = (uint64_t)v6;
  v8 = v1[5];
  v9 = v1[6];
  sub_10023A834(v1 + 2, v8);
  v10 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, double))(v9 + 40))(0x51706F7244726941, 0xE900000000000052, v8, v9, 31536000.0);
  v2[15] = (uint64_t)v10;
  swift_bridgeObjectRetain_n(v7, 2);
  v11 = v10;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v100 = v1 + 2;
  v102 = v1;
  if (os_log_type_enabled(v12, v13))
  {
    v98 = v11;
    v94 = v2 - 2;
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(8, -1);
    v16 = swift_slowAlloc(32, -1);
    v106 = v16;
    *(_DWORD *)v14 = 136315394;
    v96 = (_QWORD *)v15;
    v97 = v16;
    v95 = (NSObject **)(v2 - 1);
    if (v7)
    {
      v17 = v7;
    }
    else
    {
      v107 = 0;
      v108 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease((const char *)0xE000000000000000);
      v17 = (const char *)0x8000000100612DF0;
      v5 = 0xD000000000000015;
    }
    swift_bridgeObjectRetain(v7);
    *v94 = sub_100228BD8(v5, (unint64_t)v17, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, v95, v14 + 4);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2112;
    v18 = v98;
    *v95 = v98;
    v19 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v95, v2, v14 + 14);
    *v96 = v98;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Provisioning pseudonym for service %s and properties %@", (uint8_t *)v14, 0x16u);
    v20 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v96, 1, v20);
    swift_slowDealloc(v96, -1, -1);
    swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v97, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
    v18 = v11;
  }
  v21 = v105;
  if ((sub_1003CBC5C() & 1) == 0)
  {
    v39 = v2 - 24;
    v40 = v2 - 18;
    swift_bridgeObjectRelease(v7);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Pseudonym provisioning is disabled", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }
    v45 = *v2;

    v46 = v45 + 96;
    v47 = (void *)sub_10027A0D4();
    if (v47)
    {
      v48 = v47;
      v49 = v2 - 21;
      v99 = v2 - 21;
      v101 = v2 - 28;
      v50 = *v2;
      v51 = objc_msgSend(v47, "URI");
      v104 = v39;
      v52 = objc_msgSend(v51, "prefixedURI");

      v53 = v40;
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v56 = v55;

      swift_beginAccess(v46, v49, 33, 0);
      v58 = *(_QWORD *)(v50 + 120);
      v57 = *(_QWORD *)(v50 + 128);
      sub_10026EEE8(v46, v58);
      v59 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v57 + 72);
      v60 = v48;
      v61 = (void (*)(uint64_t *, _QWORD, __n128))v59(v101, v58, v57);
      v63 = v62;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v62);
      v107 = *v63;
      *v63 = (const char *)0x8000000000000000;
      v65 = v54;
      v40 = v53;
      sub_10046BEE8((uint64_t)v60, v65, v56, isUniquelyReferenced_nonNull_native);
      v66 = *v63;
      *v63 = v107;
      v39 = v104;
      v21 = v105;
      *(_QWORD *)&v67 = swift_bridgeObjectRelease(v56).n128_u64[0];
      v68 = swift_bridgeObjectRelease(v66, v67);
      v61(v101, 0, v68);
      swift_endAccess(v99);

    }
    v69 = v21[33];
    v70 = v21[30];
    swift_beginAccess(v46, v40, 33, 0);
    v71 = *(_QWORD *)(v70 + 120);
    v72 = *(_QWORD *)(v70 + 128);
    sub_10026EEE8(v46, v71);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v72 + 16))(0, v71, v72);
    v73 = type metadata accessor for Date(0);
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56);
    v74(v69, 1, 1, v73);
    v75 = *(_QWORD *)(v70 + 120);
    v76 = *(_QWORD *)(v70 + 128);
    sub_10026EEE8(v46, v75);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 40))(v69, v75, v76);
    swift_endAccess(v40);
    v18 = v21[45];
    v77 = v21[31];
    v78 = v21[32];
    v79 = v21[30];
    v74(v78, 1, 1, v73);
    sub_1004BFBC4(v78);
    sub_1002D4730(v78);
    v80 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v77, 1, 1, v80);
    v81 = static AirDropActor.shared;
    v82 = sub_1002ACBAC();
    v83 = (_QWORD *)swift_allocObject(&unk_10072BBF8, 40, 7);
    v83[2] = v81;
    v83[3] = v82;
    v83[4] = v79;
    swift_retain();
    swift_retain();
    v84 = sub_100252EC0(v77, (uint64_t)&unk_1007C3748, (uint64_t)v83);
    swift_release(v84);
    swift_beginAccess(v79 + 136, v39, 0, 0);
    sub_10023A834((_QWORD *)(v79 + 136), *(_QWORD *)(v79 + 160));
    sub_100424940();
LABEL_17:

    v85 = v21[34];
    v86 = v21[35];
    v88 = v21[32];
    v87 = v21[33];
    v89 = v21[31];
    swift_task_dealloc(v21[38]);
    swift_task_dealloc(v86);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    return ((uint64_t (*)(void))v21[1])();
  }
  v22 = v105[35];
  v23 = v105[30] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropPseudonymService_lastProvisionAttempt;
  swift_beginAccess(v23, v2 - 15, 0, 0);
  sub_10027ACA0(v23, v22);
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = sub_1002D4730(v22);
  if (v27 == 1)
  {
LABEL_11:
    v34 = v105[33];
    Date.init()(v28);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v34, 0, 1, v24);
    swift_beginAccess(v23, v105 + 18, 33, 0);
    sub_1002D4998(v34, v23);
    swift_endAccess(v105 + 18);
    v35 = v102[5];
    v36 = v102[6];
    sub_10023A834(v100, v35);
    v37 = *(int **)(v36 + 24);
    v103 = (uint64_t (*)(NSObject *, uint64_t, uint64_t))((char *)v37 + *v37);
    v38 = (_QWORD *)swift_task_alloc(v37[1]);
    v105[46] = v38;
    *v38 = v105;
    v38[1] = sub_1004C0B34;
    return v103(v18, v35, v36);
  }
  v29 = v105[34];
  sub_10027ACA0(v23, v29);
  result = v26(v29, 1, v24);
  if ((_DWORD)result != 1)
  {
    v31 = v105[34];
    v32 = v105[30];
    v33 = Date.timeIntervalSinceNow.getter(result);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v31, v24);
    if (*(double *)(v32 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropPseudonymService_provisionThrottleSeconds) < -v33)
      goto LABEL_11;
    swift_bridgeObjectRelease(v7);
    v91 = Logger.logObject.getter(v90);
    v92 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Attempting to provision AirDrop pseudonyms too frequetly.", v93, 2u);
      swift_slowDealloc(v93, -1, -1);

    }
    else
    {

      v18 = v91;
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004C0B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 368);
  *(_QWORD *)(v3 + 376) = a1;
  *(_QWORD *)(v3 + 384) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = *(_QWORD *)(v3 + 312);
    v6 = sub_1004C1088;
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 312);
    swift_bridgeObjectRelease(*(const char **)(v3 + 352));
    v6 = sub_1004C0BB0;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004C0BB0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  id v23;
  void (*v24)(uint64_t, _QWORD, __n128);
  const char **v25;
  const char **v26;
  char isUniquelyReferenced_nonNull_native;
  const char *v28;
  double v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void *, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  const char *v64;

  v1 = v0;
  v62 = *(void **)(v0 + 376);
  v2 = v62;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v60 = v2;
  v61 = v0 + 96;
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 376);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    *(_QWORD *)(v0 + 216) = v5;
    v8 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v6 + 4);
    *v7 = v62;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Provisioned pseudonym %@)", v6, 0xCu);
    v9 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(void **)(v0 + 376);

    v3 = *(NSObject **)(v1 + 376);
  }
  v11 = *(_QWORD *)(v1 + 240);

  v12 = v11 + 96;
  v13 = (void *)sub_10027A0D4();
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)(v1 + 240);
    v16 = objc_msgSend(v13, "URI");
    v17 = objc_msgSend(v16, "prefixedURI");

    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    swift_beginAccess(v12, v1 + 72, 33, 0);
    v20 = *(_QWORD *)(v15 + 120);
    v21 = *(_QWORD *)(v15 + 128);
    sub_10026EEE8(v12, v20);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 72);
    v23 = v14;
    v24 = (void (*)(uint64_t, _QWORD, __n128))v22(v1 + 16, v20, v21);
    v26 = v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    v64 = *v26;
    *v26 = (const char *)0x8000000000000000;
    sub_10046BEE8((uint64_t)v23, v59, v19, isUniquelyReferenced_nonNull_native);
    v28 = *v26;
    *v26 = v64;
    *(_QWORD *)&v29 = swift_bridgeObjectRelease(v19).n128_u64[0];
    v30 = swift_bridgeObjectRelease(v28, v29);
    v24(v1 + 16, 0, v30);
    swift_endAccess(v1 + 72);

  }
  v31 = *(_QWORD *)(v1 + 264);
  v32 = *(_QWORD *)(v1 + 240);
  swift_beginAccess(v12, v61, 33, 0);
  v33 = *(_QWORD *)(v32 + 120);
  v34 = *(_QWORD *)(v32 + 128);
  sub_10026EEE8(v12, v33);
  v35 = *(void (**)(void *, uint64_t, uint64_t))(v34 + 16);
  v36 = v60;
  v35(v62, v33, v34);
  v37 = type metadata accessor for Date(0);
  v38 = 1;
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
  v63(v31, 1, 1, v37);
  v39 = *(_QWORD *)(v32 + 120);
  v40 = *(_QWORD *)(v32 + 128);
  sub_10026EEE8(v12, v39);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 40))(v31, v39, v40);
  swift_endAccess(v61);
  if (v36)
  {
    v41 = v36;
    v42 = objc_msgSend(v41, "properties");
    v43 = objc_msgSend(v42, "expirationDate");

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v38 = 0;
  }
  v44 = *(void **)(v1 + 360);
  v45 = *(_QWORD *)(v1 + 248);
  v46 = *(_QWORD *)(v1 + 256);
  v47 = *(_QWORD *)(v1 + 240);
  v63(v46, v38, 1, v37);
  sub_1004BFBC4(v46);
  sub_1002D4730(v46);
  v48 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v45, 1, 1, v48);
  v49 = static AirDropActor.shared;
  v50 = sub_1002ACBAC();
  v51 = (_QWORD *)swift_allocObject(&unk_10072BBF8, 40, 7);
  v51[2] = v49;
  v51[3] = v50;
  v51[4] = v47;
  swift_retain();
  swift_retain();
  v52 = sub_100252EC0(v45, (uint64_t)&unk_1007C3748, (uint64_t)v51);
  swift_release(v52);
  swift_beginAccess(v47 + 136, v1 + 48, 0, 0);
  sub_10023A834((_QWORD *)(v47 + 136), *(_QWORD *)(v47 + 160));
  sub_100424940();

  v54 = *(_QWORD *)(v1 + 272);
  v53 = *(_QWORD *)(v1 + 280);
  v56 = *(_QWORD *)(v1 + 256);
  v55 = *(_QWORD *)(v1 + 264);
  v57 = *(_QWORD *)(v1 + 248);
  swift_task_dealloc(*(_QWORD *)(v1 + 304));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1004C1088()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  os_log_type_t v31;
  uint64_t v32;
  NSObject *log;
  uint64_t v34[3];

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(const char **)(v0 + 352);
  v3 = *(id *)(v0 + 360);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = v3;
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v31 = v7;
    log = v6;
    v8 = *(_QWORD *)(v0 + 352);
    v9 = swift_slowAlloc(32, -1);
    v30 = (_QWORD *)swift_slowAlloc(16, -1);
    v32 = swift_slowAlloc(32, -1);
    v34[0] = v32;
    *(_DWORD *)v9 = 136315650;
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 344);
      v11 = *(const char **)(v0 + 352);
      v12 = v11;
    }
    else
    {
      v34[1] = 0;
      v34[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease((const char *)0xE000000000000000);
      v11 = *(const char **)(v0 + 352);
      v12 = (const char *)0x8000000100612DF0;
      v10 = 0xD000000000000015;
    }
    v16 = *(_QWORD *)(v0 + 384);
    v17 = *(void **)(v0 + 360);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 192) = sub_100228BD8(v10, (unint64_t)v12, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v9 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v11, 2);
    *(_WORD *)(v9 + 12) = 2112;
    *(_QWORD *)(v0 + 200) = v17;
    v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 14);
    *v30 = v17;

    *(_WORD *)(v9 + 22) = 2112;
    swift_errorRetain(v16);
    v19 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(_QWORD *)(v0 + 208) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 24);
    v30[1] = v19;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, log, v31, "Failed to provision pseudonym for service %s and %@ with error: %@", (uint8_t *)v9, 0x20u);
    v20 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v30, 2, v20);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v13 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 352);
    v14 = *(void **)(v0 + 360);

    swift_bridgeObjectRelease_n(v15, 2);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  v21 = *(_QWORD *)(v0 + 384);
  v22 = *(void **)(v0 + 360);
  v23 = *(_QWORD *)(v0 + 240);
  swift_beginAccess(v23 + 136, v0 + 168, 0, 0);
  sub_10023A834((_QWORD *)(v23 + 136), *(_QWORD *)(v23 + 160));
  sub_1004247B8();

  swift_errorRelease(v21);
  v24 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 280);
  v27 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v0 + 264);
  v28 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C13E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004C1450, static AirDropActor.shared, 0);
}

uint64_t sub_1004C1450()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = sub_10027A4E8();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1007C3754);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_1004C43A0;
  return sub_1004C14A8((uint64_t)v1);
}

uint64_t sub_1004C14A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v3 = static AirDropActor.shared;
  v2[4] = static AirDropActor.shared;
  return swift_task_switch(sub_1004C1514, v3, 0);
}

uint64_t sub_1004C1514()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v0 + 72) = v2;
    v3 = -1;
    v4 = -1 << v2;
    if (-(-1 << v2) < 64)
      v3 = ~(-1 << -(char)v4);
    v5 = v3 & *(_QWORD *)(v1 + 64);
    swift_bridgeObjectRetain((const char *)v1);
    if (v5)
    {
      v7 = 0;
      v8 = __clz(__rbit64(v5));
      v9 = (v5 - 1) & v5;
LABEL_6:
      *(_QWORD *)(v0 + 40) = v7;
      *(_QWORD *)(v0 + 48) = v9;
      v10 = *(void **)(v6[7] + 8 * v8);
      *(_QWORD *)(v0 + 56) = v10;
      v11 = dword_1007C375C;
      v12 = v10;
      v13 = (_QWORD *)swift_task_alloc(v11);
      *(_QWORD *)(v0 + 64) = v13;
      *v13 = v0;
      v13[1] = sub_1004C1694;
      return sub_1004C26DC((uint64_t)v12);
    }
    v15 = 63 - v4;
    if ((unint64_t)(63 - v4) > 0x7F)
    {
      v16 = v6[9];
      if (v16)
      {
        v7 = 1;
LABEL_10:
        v9 = (v16 - 1) & v16;
        v8 = __clz(__rbit64(v16)) + (v7 << 6);
        goto LABEL_6;
      }
      if (v15 >= 0xC0)
      {
        v16 = v6[10];
        if (v16)
        {
          v7 = 2;
          goto LABEL_10;
        }
        if (v15 >= 0x100)
        {
          v16 = v6[11];
          if (v16)
          {
            v7 = 3;
            goto LABEL_10;
          }
          if (v15 >= 0x140)
          {
            v16 = v6[12];
            if (v16)
            {
              v7 = 4;
              goto LABEL_10;
            }
            v17 = 0;
            v18 = v15 >> 6;
            if (v18 <= 5)
              v18 = 5;
            v19 = v18 - 5;
            while (v19 != v17)
            {
              v16 = v6[v17++ + 13];
              if (v16)
              {
                v7 = v17 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
    swift_release(v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C1694()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1004C16EC, v1, 0);
}

void sub_1004C16EC()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    v3 = __clz(__rbit64(v2));
    v4 = (v2 - 1) & v2;
    v5 = v3 | (v1 << 6);
    v6 = *(_QWORD *)(v0 + 16);
LABEL_3:
    *(_QWORD *)(v0 + 40) = v1;
    *(_QWORD *)(v0 + 48) = v4;
    v7 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v5);
    *(_QWORD *)(v0 + 56) = v7;
    v8 = dword_1007C375C;
    v9 = v7;
    v10 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 64) = v10;
    *v10 = v0;
    v10[1] = sub_1004C1694;
    sub_1004C26DC((uint64_t)v9);
    return;
  }
  v11 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = (unint64_t)((1 << *(_BYTE *)(v0 + 72)) + 63) >> 6;
    v6 = *(_QWORD *)(v0 + 16);
    if (v11 >= v12)
      goto LABEL_18;
    v13 = v6 + 64;
    v14 = *(_QWORD *)(v6 + 64 + 8 * v11);
    ++v1;
    if (v14)
    {
LABEL_7:
      v4 = (v14 - 1) & v14;
      v5 = __clz(__rbit64(v14)) + (v1 << 6);
      goto LABEL_3;
    }
    v1 = v11 + 1;
    if (v11 + 1 >= v12)
      goto LABEL_18;
    v14 = *(_QWORD *)(v13 + 8 * v1);
    if (v14)
      goto LABEL_7;
    v1 = v11 + 2;
    if (v11 + 2 >= v12)
      goto LABEL_18;
    v14 = *(_QWORD *)(v13 + 8 * v1);
    if (v14)
      goto LABEL_7;
    v15 = v11 + 3;
    if (v15 >= v12)
    {
LABEL_18:
      swift_release(v6);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v14 = *(_QWORD *)(v13 + 8 * v15);
    if (v14)
    {
      v1 = v15;
      goto LABEL_7;
    }
    while (1)
    {
      v1 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      if (v1 >= v12)
        goto LABEL_18;
      v14 = *(_QWORD *)(v13 + 8 * v1);
      ++v15;
      if (v14)
        goto LABEL_7;
    }
  }
  __break(1u);
}

uint64_t sub_1004C184C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for CancellationError(0);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B68A0);
  v5[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContinuousClock(0);
  v5[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v11 = static AirDropActor.shared;
  v5[13] = static AirDropActor.shared;
  return swift_task_switch(sub_1004C192C, v11, 0);
}

uint64_t sub_1004C192C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v2 = ContinuousClock.init()(a1);
  v3 = Date.timeIntervalSinceNow.getter(v2);
  v4 = static Duration.seconds(_:)(v3);
  v6 = v5;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v7 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 112) = v7;
  *v7 = v1;
  v7[1] = sub_1004C19C0;
  return v9(v4, v6, 0, 0, 1);
}

uint64_t sub_1004C19C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v6 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1004C1B28;
  else
    v7 = sub_1004C1A4C;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_1004C1A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v4 = static AirDropActor.shared;
  v5 = sub_1002ACBAC();
  v6 = (_QWORD *)swift_allocObject(&unk_10072BC48, 40, 7);
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  swift_retain();
  swift_retain();
  v7 = sub_100252EC0(v1, (uint64_t)&unk_1007C3778, (uint64_t)v6);
  swift_release(v7);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C1B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  swift_errorRetain(v1);
  v4 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v2, v0 + 16, v4, v3, 0) & 1) != 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100221DF8(v5, (uint64_t)qword_1007C35E0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cancelled pseudonym expiration task", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_errorRelease(*(_QWORD *)(v0 + 16));
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v13 = *(_QWORD *)(v0 + 120);
    v14 = type metadata accessor for Logger(0);
    sub_100221DF8(v14, (uint64_t)qword_1007C35E0);
    swift_errorRetain(v13);
    v15 = swift_errorRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 120);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      swift_errorRetain(v19);
      v22 = _swift_stdlib_bridgeErrorToNSError(v19);
      *(_QWORD *)(v0 + 24) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v20 + 4);
      *v21 = v22;
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to start task for pseudonym expiration with error %@", v20, 0xCu);
      v23 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v19);
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 120));
      swift_errorRelease(v19);
      swift_errorRelease(v19);

    }
  }
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C1E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004C1E98, static AirDropActor.shared, 0);
}

uint64_t sub_1004C1E98()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1004BFB18();
  v1 = (_QWORD *)swift_task_alloc(dword_1007C373C);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1004C1EE8;
  return sub_1004BFE90();
}

uint64_t sub_1004C1EE8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1004C1F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[4] = a4;
  v5[5] = a5;
  v6 = type metadata accessor for CancellationError(0);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008384(&qword_1007B68A0);
  v5[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContinuousClock(0);
  v5[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v11 = static AirDropActor.shared;
  v5[13] = static AirDropActor.shared;
  return swift_task_switch(sub_1004C2010, v11, 0);
}

uint64_t sub_1004C2010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v2 = ContinuousClock.init()(a1);
  v3 = Date.timeIntervalSinceNow.getter(v2);
  v4 = static Duration.seconds(_:)(v3);
  v6 = v5;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1007B6518 + dword_1007B6518);
  v7 = (_QWORD *)swift_task_alloc(unk_1007B651C);
  *(_QWORD *)(v1 + 112) = v7;
  *v7 = v1;
  v7[1] = sub_1004C20A4;
  return v9(v4, v6, 0, 0, 1);
}

uint64_t sub_1004C20A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v6 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1004C220C;
  else
    v7 = sub_1004C2130;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_1004C2130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v4 = static AirDropActor.shared;
  v5 = sub_1002ACBAC();
  v6 = (_QWORD *)swift_allocObject(&unk_10072BBD0, 40, 7);
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  swift_retain();
  swift_retain();
  v7 = sub_100252EC0(v1, (uint64_t)&unk_1007C3730, (uint64_t)v6);
  swift_release(v7);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C220C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  swift_errorRetain(v1);
  v4 = sub_100008384(&qword_1007B5A60);
  if ((swift_dynamicCast(v2, v0 + 16, v4, v3, 0) & 1) != 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100221DF8(v5, (uint64_t)qword_1007C35E0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cancelled after first use expiration task", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_errorRelease(*(_QWORD *)(v0 + 16));
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v13 = *(_QWORD *)(v0 + 120);
    v14 = type metadata accessor for Logger(0);
    sub_100221DF8(v14, (uint64_t)qword_1007C35E0);
    swift_errorRetain(v13);
    v15 = swift_errorRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 120);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      swift_errorRetain(v19);
      v22 = _swift_stdlib_bridgeErrorToNSError(v19);
      *(_QWORD *)(v0 + 24) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v20 + 4);
      *v21 = v22;
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to start task for after first use expiration with error %@", v20, 0xCu);
      v23 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v19);
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 120));
      swift_errorRelease(v19);
      swift_errorRelease(v19);

    }
  }
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C2514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004C257C, static AirDropActor.shared, 0);
}

uint64_t sub_1004C257C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1004BFB18();
  v1 = (_QWORD *)swift_task_alloc(dword_1007C373C);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1004C43A4;
  return sub_1004BFE90();
}

uint64_t sub_1004C25CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  return swift_task_switch(sub_1004C2634, static AirDropActor.shared, 0);
}

uint64_t sub_1004C2634()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = sub_10027A4E8();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1007C3754);
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_1004C268C;
  return sub_1004C14A8((uint64_t)v1);
}

uint64_t sub_1004C268C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 24);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1004C26DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[18] = a1;
  v2[19] = v1;
  if (qword_1007B3D98 != -1)
    swift_once(&qword_1007B3D98, sub_1002ACAEC);
  v3 = static AirDropActor.shared;
  v2[20] = static AirDropActor.shared;
  return swift_task_switch(sub_1004C2748, v3, 0);
}

uint64_t sub_1004C2748()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  const char *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  int *v33;
  uint64_t v34[3];

  v1 = (_QWORD *)v0[19];
  v2 = v1 + 2;
  v3 = v1[5];
  v4 = v1[6];
  sub_10023A834(v1 + 2, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  v0[21] = v5;
  v0[22] = v6;
  if (qword_1007B41E8 != -1)
    swift_once(&qword_1007B41E8, sub_1004BF404);
  v8 = (void *)v0[18];
  v9 = type metadata accessor for Logger(0);
  v0[23] = sub_100221DF8(v9, (uint64_t)qword_1007C35E0);
  swift_bridgeObjectRetain_n(v7, 2);
  v10 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = (void *)v0[18];
  if (v12)
  {
    v26 = v5;
    v27 = v1;
    v28 = v10;
    v29 = v1 + 2;
    v32 = v0 + 17;
    v14 = swift_slowAlloc(22, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    v31 = swift_slowAlloc(32, -1);
    v34[0] = v31;
    *(_DWORD *)v14 = 138412546;
    v0[16] = v13;
    v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v14 + 4);
    v30 = v15;
    *v15 = v13;

    *(_WORD *)(v14 + 12) = 2080;
    if (v7)
    {
      v17 = v7;
      v18 = v28;
      v2 = v29;
      v19 = v26;
    }
    else
    {
      v34[1] = 0;
      v34[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease((const char *)0xE000000000000000);
      v17 = (const char *)0x8000000100612DF0;
      v19 = 0xD000000000000015;
      v18 = v28;
      v2 = v29;
    }
    v1 = v27;
    swift_bridgeObjectRetain(v7, v26);
    *v32 = sub_100228BD8(v19, (unint64_t)v17, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v0 + 18, v14 + 14);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v11, "Revoking pseudonym %@ for service %s", (uint8_t *)v14, 0x16u);
    v20 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v30, 1, v20);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  v21 = v1[5];
  v22 = v1[6];
  sub_10023A834(v2, v21);
  v23 = *(int **)(v22 + 32);
  v33 = (int *)((char *)v23 + *v23);
  v24 = (_QWORD *)swift_task_alloc(v23[1]);
  v0[24] = v24;
  *v24 = v0;
  v24[1] = sub_1004C2A84;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v33)(v0[18], v21, v22);
}

uint64_t sub_1004C2A84(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 160);
  if (v1)
  {
    v7 = sub_1004C3018;
  }
  else
  {
    *(_BYTE *)(v4 + 208) = a1 & 1;
    v7 = sub_1004C2AFC;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004C2AFC()
{
  uint64_t v0;
  int v1;
  const char *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD);
  void *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  NSObject *log;
  NSObject *loga;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v1 = *(unsigned __int8 *)(v0 + 208);
  v2 = *(const char **)(v0 + 176);
  v3 = *(id *)(v0 + 144);
  swift_bridgeObjectRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(void **)(v0 + 144);
  if (v1 == 1)
  {
    v10 = v0 + 16;
    v11 = v0 + 48;
    if (v7)
    {
      log = v5;
      v12 = swift_slowAlloc(22, -1);
      v39 = v8;
      v13 = (_QWORD *)swift_slowAlloc(8, -1);
      v40 = swift_slowAlloc(32, -1);
      v45 = v40;
      *(_DWORD *)v12 = 138412546;
      *(_QWORD *)(v0 + 112) = v9;
      v14 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v12 + 4);
      *v13 = v9;
      v15 = v13;

      *(_WORD *)(v12 + 12) = 2080;
      if (v39)
      {
        v16 = *(_QWORD *)(v0 + 168);
        v17 = *(const char **)(v0 + 176);
        v18 = v17;
        swift_bridgeObjectRetain(v17, v39);
      }
      else
      {
        v16 = 0xD000000000000015;
        v46 = 0;
        v47 = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease((const char *)0xE000000000000000);
        v17 = *(const char **)(v0 + 176);
        v18 = (const char *)0x8000000100612DF0;
        swift_bridgeObjectRetain(v17, 0);
      }
      *(_QWORD *)(v0 + 120) = sub_100228BD8(v16, (unint64_t)v18, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v12 + 14);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease_n(v17, 2);
      _os_log_impl((void *)&_mh_execute_header, log, v6, "Revoked pseudonym %@ for service %s", (uint8_t *)v12, 0x16u);
      v25 = sub_100008384(&qword_1007B4C30);
      swift_arrayDestroy(v15, 1, v25);
      swift_slowDealloc(v15, -1, -1);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      v10 = v0 + 16;
      v11 = v0 + 48;
    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
    }
    v26 = *(_QWORD *)(v0 + 152);
    v27 = objc_msgSend(*(id *)(v0 + 144), "URI");
    v28 = objc_msgSend(v27, "prefixedURI");

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v32 = v26 + 96;
    swift_beginAccess(v26 + 96, v11, 33, 0);
    v33 = *(_QWORD *)(v26 + 120);
    v34 = *(_QWORD *)(v26 + 128);
    sub_10026EEE8(v32, v33);
    v35 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 72))(v10, v33, v34);
    v36 = (void *)sub_10026A394(v29, (uint64_t)v31);
    v35(v10, 0);
    swift_endAccess(v11);
    swift_bridgeObjectRelease(v31);
    goto LABEL_15;
  }
  if (v7)
  {
    v41 = v6;
    loga = v5;
    v19 = swift_slowAlloc(22, -1);
    v20 = (_QWORD *)swift_slowAlloc(8, -1);
    v42 = swift_slowAlloc(32, -1);
    v45 = v42;
    *(_DWORD *)v19 = 138412546;
    *(_QWORD *)(v0 + 80) = v9;
    v21 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 4);
    *v20 = v9;

    *(_WORD *)(v19 + 12) = 2080;
    if (v8)
    {
      v23 = *(_QWORD *)(v0 + 168);
      v22 = *(const char **)(v0 + 176);
      v24 = v22;
    }
    else
    {
      v23 = 0xD000000000000015;
      v46 = 0;
      v47 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease((const char *)0xE000000000000000);
      v22 = *(const char **)(v0 + 176);
      v24 = (const char *)0x8000000100612DF0;
    }
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(v0 + 88) = sub_100228BD8(v23, (unint64_t)v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v19 + 14);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v22, 2);
    v36 = loga;
    _os_log_impl((void *)&_mh_execute_header, loga, v41, "Did not revoke pseudonym %@ for service %s", (uint8_t *)v19, 0x16u);
    v37 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v20, 1, v37);
    swift_slowDealloc(v20, -1, -1);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v19, -1, -1);
LABEL_15:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_bridgeObjectRelease_n(v8, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C3018()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v22;
  uint64_t v23;
  NSObject *log;
  uint64_t v25[3];

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(const char **)(v0 + 176);
  v3 = *(id *)(v0 + 144);
  swift_errorRetain(v1);
  v4 = v3;
  swift_bridgeObjectRetain(v2);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 176);
  v10 = *(void **)(v0 + 144);
  if (v8)
  {
    v22 = v7;
    log = v6;
    v11 = swift_slowAlloc(32, -1);
    v12 = (_QWORD *)swift_slowAlloc(16, -1);
    v23 = swift_slowAlloc(32, -1);
    v25[0] = v23;
    *(_DWORD *)v11 = 138412802;
    *(_QWORD *)(v0 + 96) = v10;
    v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v11 + 4);
    *v12 = v10;

    *(_WORD *)(v11 + 12) = 2080;
    if (v9)
    {
      v14 = *(_QWORD *)(v0 + 168);
      v15 = *(const char **)(v0 + 176);
      v16 = v15;
    }
    else
    {
      v25[1] = 0;
      v25[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease((const char *)0xE000000000000000);
      v15 = *(const char **)(v0 + 176);
      v16 = (const char *)0x8000000100612DF0;
      v14 = 0xD000000000000015;
    }
    v18 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v0 + 104) = sub_100228BD8(v14, (unint64_t)v16, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v11 + 14);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v15, 2);
    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain(v18);
    v19 = _swift_stdlib_bridgeErrorToNSError(v18);
    *(_QWORD *)(v0 + 72) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v11 + 24);
    v12[1] = v19;
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, log, v22, "Failed to revoke pseudonym %@ for service %s with error: %@", (uint8_t *)v11, 0x20u);
    v20 = sub_100008384(&qword_1007B4C30);
    swift_arrayDestroy(v12, 2, v20);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v18);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 200);
    swift_errorRelease(v17);

    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C3308()
{
  _QWORD *v0;

  sub_10022E75C(v0 + 2);
  sub_10022E75C(v0 + 7);
  sub_10022E75C(v0 + 12);
  sub_10022E75C(v0 + 17);
  swift_release(v0[22]);
  swift_release(v0[23]);
  sub_1002D4730((uint64_t)v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropPseudonymService_lastProvisionAttempt);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1004C3378()
{
  return type metadata accessor for SDAirDropPseudonymService(0);
}

uint64_t type metadata accessor for SDAirDropPseudonymService(uint64_t a1)
{
  uint64_t result;

  result = qword_1007C3640;
  if (!qword_1007C3640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropPseudonymService);
  return result;
}

void sub_1004C33BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  v4[3] = "(";
  v4[4] = &unk_1005DB138;
  v4[5] = &unk_1005DB138;
  sub_10023EB48(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

uint64_t sub_1004C3460@<X0>(uint64_t *a1@<X8>)
{
  NSObject v2;
  uint64_t v3;
  uint64_t result;

  v2.isa = AnyHashable._bridgeToObjectiveC()().isa;
  v3 = objc_opt_self(IDSAccount);
  result = swift_dynamicCastObjCClass(v2.isa, v3);
  if (!result)
  {

    result = 0;
  }
  *a1 = result;
  return result;
}

BOOL sub_1004C34B0(_QWORD *a1)
{
  return *a1 != 0;
}

id sub_1004C34C0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004C34D4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  void (*v53)(char *, uint64_t);
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;

  v4 = sub_100008384(&qword_1007C4330);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v57 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v57 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v57 - v18;
  if (!a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_10;
  }
  v20 = objc_msgSend(a1, "properties");
  v21 = objc_msgSend(v20, "expirationDate");

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v22(v9, 1, v10) == 1)
  {
LABEL_10:
    sub_1002D4730((uint64_t)v9);
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100221DF8(v30, (uint64_t)qword_1007C35E0);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Pseudonym is not set", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    return 0;
  }
  v23 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
  v24 = v23(v19, v9, v10);
  static Date.now.getter(v24);
  sub_10027ACA0(a2, (uint64_t)v7);
  if (v22(v7, 1, v10) == 1)
  {
    sub_1002D4730((uint64_t)v7);
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100221DF8(v25, (uint64_t)qword_1007C35E0);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Pseudonym has not been used", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
  else
  {
    v23(v14, v7, v10);
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_100221DF8(v35, (uint64_t)qword_1007C35E0);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Current pseudonym has been used", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    v40 = static Date.< infix(_:_:)(v17, v14);
    if ((v40 & 1) == 0)
    {
      v54 = Logger.logObject.getter(v40);
      v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Pseudonym is not valid; expired after first use", v56, 2u);
        swift_slowDealloc(v56, -1, -1);
      }

      v53 = *(void (**)(char *, uint64_t))(v11 + 8);
      v53(v14, v10);
      v53(v17, v10);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  if ((static Date.< infix(_:_:)(v17, v19) & 1) == 0)
  {
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_100221DF8(v48, (uint64_t)qword_1007C35E0);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Pseudonym is not valid; expired", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    v53 = *(void (**)(char *, uint64_t))(v11 + 8);
    v53(v17, v10);
LABEL_35:
    v53(v19, v10);
    return 0;
  }
  if (qword_1007B41E8 != -1)
    swift_once(&qword_1007B41E8, sub_1004BF404);
  v41 = type metadata accessor for Logger(0);
  v42 = sub_100221DF8(v41, (uint64_t)qword_1007C35E0);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Pseudonym is valid", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }

  v46 = *(void (**)(char *, uint64_t))(v11 + 8);
  v46(v17, v10);
  v46(v19, v10);
  return 1;
}

uint64_t sub_1004C3B20()
{
  id v0;
  NSString v1;
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34[7];

  if ((sub_1003EF9D0() & 1) == 0)
  {
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100221DF8(v16, (uint64_t)qword_1007C35E0);
    v2 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v2, v18))
      goto LABEL_17;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = "Pseudonym service is disabled";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v2, v18, v20, v19, 2u);
    swift_slowDealloc(v19, -1, -1);
LABEL_17:

    return 0;
  }
  v0 = objc_allocWithZone((Class)IDSAccountController);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithService:", v1);

  if (!v2)
  {
LABEL_12:
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100221DF8(v21, (uint64_t)qword_1007C35E0);
    v2 = Logger.logObject.getter(v22);
    v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v2, v18))
      goto LABEL_17;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = "Pseudonym service does not have an IDS account";
    goto LABEL_16;
  }
  v3 = -[NSObject accounts](v2, "accounts");
  if (!v3)
  {

    goto LABEL_12;
  }
  v4 = v3;
  v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

  v34[0] = v5;
  v34[1] = (uint64_t)sub_1004C3460;
  v34[2] = 0;
  v34[3] = (uint64_t)sub_1004C34B0;
  v34[4] = 0;
  v34[5] = (uint64_t)sub_1004C34C0;
  v34[6] = 0;
  sub_1004BECF8(v34);
  v7 = v6;
  swift_bridgeObjectRelease(v5);
  if (!v7)
  {
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100221DF8(v24, (uint64_t)qword_1007C35E0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Pseudonym service does not have an active IDS account", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    goto LABEL_17;
  }
  v8 = v7;
  v9 = objc_msgSend(v8, "pushToken");
  if (!v9)
  {
    if (qword_1007B41E8 != -1)
      swift_once(&qword_1007B41E8, sub_1004BF404);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100221DF8(v29, (uint64_t)qword_1007C35E0);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Pseudonym service does not have an active IDS account push token", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    goto LABEL_17;
  }
  v10 = v9;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  v14 = sub_100358394();
  v15 = Sequence<>.hexString(separator:uppercase:maxBytes:truncator:)(0, 0xE000000000000000, 0, 0x7FFFFFFFFFFFFFFFLL, 3026478, 0xE300000000000000, &type metadata for Data, v14, v11, v13);

  sub_100225AB4(v11, v13);
  return v15;
}

_QWORD *sub_1004C3F68(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_1004C3F94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1007C371C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10000D098;
  return sub_1004C1F30(a1, v6, v7, v8, v9);
}

uint64_t sub_1004C403C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C372C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1004C2514(a1, v4, v5, v6);
}

uint64_t sub_1004C40AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C3744);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D12C;
  return sub_1004C25CC(a1, v4, v5, v6);
}

uint64_t sub_1004C411C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1004C41AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1007C3764);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10000D098;
  return sub_1004C184C(a1, v6, v7, v8, v9);
}

uint64_t sub_1004C4254(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C3774);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1004C1E30(a1, v4, v5, v6);
}

uint64_t sub_1004C42C4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1007C3784);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000D098;
  return sub_1004BFE20();
}

uint64_t sub_1004C4334(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1007C3794);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000D098;
  return sub_1004C13E8(a1, v4, v5, v6);
}

uint64_t sub_1004C43AC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  return 0xD000000000000012;
}

uint64_t sub_1004C4428(uint64_t (*a1)(char *), uint64_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  const char *v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  _QWORD *v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v6 = sub_100008384(&qword_1007B7280);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v35 = (char *)&v26 - v14;
  v36 = _swiftEmptyArrayStorage;
  v32 = *((_QWORD *)a3 + 2);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *((_QWORD *)a3 + 2))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, const char *, uint64_t))(v10 + 16))(v8, &a3[v16 + v17 * v15], v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease(v30);
        return swift_release(v36);
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100229C0C(0, v21[2] + 1, 1);
          v21 = v36;
        }
        v24 = v21[2];
        v23 = v21[3];
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_100229C0C(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        v21[2] = v25;
        result = ((uint64_t (*)(char *, char *, uint64_t))v18)((char *)v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease(a3);
    sub_10000D0F0((uint64_t)v8, &qword_1007B7280);
    return (uint64_t)v36;
  }
  return result;
}

uint64_t sub_1004C46F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100221E9C(v0, qword_1007C37A0);
  v1 = sub_100221DF8(v0, (uint64_t)qword_1007C37A0);
  if (qword_1007B3EA8 != -1)
    swift_once(&qword_1007B3EA8, sub_1002E9FB8);
  v2 = sub_100221DF8(v0, (uint64_t)qword_1007D82C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004C4784()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  sub_100221E9C(v0, qword_1007C37B8);
  *(_QWORD *)sub_100221DF8(v0, (uint64_t)qword_1007C37B8) = 50;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

void sub_1004C47E4()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  id v3;

  static String._unconditionallyBridgeFromObjectiveC(_:)(CBUUIDHumanInterfaceDeviceServiceString);
  v1 = v0;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v3 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v2);

  qword_1007D8588 = (uint64_t)v3;
}

void sub_1004C4854(char a1, uint64_t *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  int v12;
  uint64_t v13;

  v4 = *a2;
  if (*(_BYTE *)(v3 + *a2) != (a1 & 1))
  {
    v6 = v3;
    if (qword_1007B41F0 != -1)
      swift_once(&qword_1007B41F0, sub_1004C46F4);
    v7 = type metadata accessor for Logger(0);
    sub_100221DF8(v7, (uint64_t)qword_1007C37A0);
    v8 = swift_retain();
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 67109120;
      v12 = *(unsigned __int8 *)(v6 + v4);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v11 + 4);
      swift_release(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, a3, v11, 8u);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_release(v6);
    }
  }
}

void sub_1004C49B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DefaultStringInterpolation.PrintUtilsHexFormat(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007B41F0 != -1)
    swift_once(&qword_1007B41F0, sub_1004C46F4);
  v6 = type metadata accessor for Logger(0);
  sub_100221DF8(v6, (uint64_t)qword_1007C37A0);
  v7 = swift_retain_n(v0, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v12 = v11;
    v23 = v11;
    *(_DWORD *)v10 = 136315138;
    v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_b332BTAddr + 8);
    if (v13 >> 60 == 15)
    {
      v21 = 0;
      v22 = (const char *)0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v22);
      v14 = (const char *)0x8000000100612DF0;
      v15 = 0xD000000000000015;
    }
    else
    {
      v19 = v11;
      v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_b332BTAddr);
      v21 = 0;
      v22 = (const char *)0xE000000000000000;
      v20[0] = v16;
      v20[1] = v13;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DefaultStringInterpolation.PrintUtilsHexFormat.hex(_:), v2);
      sub_10022E4A8(v16, v13);
      v17 = sub_100358394();
      DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(v20, v5, 58, 0xE100000000000000, &type metadata for Data, v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v18 = v16;
      v12 = v19;
      sub_100225AA0(v18, v13);
      v15 = v21;
      v14 = v22;
    }
    v21 = sub_100228BD8(v15, (unint64_t)v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "b332BTAddr set. formatted: %s", v10, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
}

void sub_1004C4C58(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_pairedPencilsIsEmpty;
  v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_pairedPencilsIsEmpty);
  if (a1 == 2)
  {
    if (v4 == 2)
      return;
  }
  else if (v4 != 2 && ((((v4 & 1) == 0) ^ a1) & 1) != 0)
  {
    return;
  }
  if (qword_1007B41F0 != -1)
    swift_once(&qword_1007B41F0, sub_1004C46F4);
  v5 = type metadata accessor for Logger(0);
  sub_100221DF8(v5, (uint64_t)qword_1007C37A0);
  v6 = swift_retain_n(v1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = *(unsigned __int8 *)(v2 + v3);
    v12 = 1702195828;
    if ((v11 & 1) == 0)
      v12 = 0x65736C6166;
    v13 = 0xE400000000000000;
    if ((v11 & 1) == 0)
      v13 = 0xE500000000000000;
    if (v11 == 2)
      v14 = 0xD00000000000001ELL;
    else
      v14 = v12;
    if (v11 == 2)
      v15 = (const char *)0x800000010061EF70;
    else
      v15 = (const char *)v13;
    v16 = sub_100228BD8(v14, (unint64_t)v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "didSet pairedPencilsIsEmpty: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
}

void sub_1004C4E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  if (qword_1007B41F0 != -1)
    swift_once(&qword_1007B41F0, sub_1004C46F4);
  v2 = type metadata accessor for Logger(0);
  sub_100221DF8(v2, (uint64_t)qword_1007C37A0);
  v3 = swift_retain_n(v0, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_didPairingSucceed);
    v9 = 1702195828;
    if ((v8 & 1) == 0)
      v9 = 0x65736C6166;
    v10 = 0xE400000000000000;
    if ((v8 & 1) == 0)
      v10 = 0xE500000000000000;
    if (v8 == 2)
      v11 = 0xD00000000000001BLL;
    else
      v11 = v9;
    if (v8 == 2)
      v12 = (const char *)0x800000010061F0F0;
    else
      v12 = (const char *)v10;
    v13 = sub_100228BD8(v11, (unint64_t)v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "didSet didPairingSucceed: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
}

void sub_1004C5064(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  BOOL v5;
  id v6;

  v3 = *(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sbRemoteHandle);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sbRemoteHandle) = a1;
  v4 = a1;
  v6 = v4;
  if (!a1)
  {
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v3)
    v5 = v4 == v3;
  else
    v5 = 0;
  if (!v5)
LABEL_6:
    objc_msgSend(v3, "invalidate");
LABEL_7:

}

void sub_1004C50D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  v1 = OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sessionTimeout;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sessionTimeout);
  if (v2)
  {
    v3 = v0;
    v4 = qword_1007B41F0;
    swift_retain();
    if (v4 != -1)
      swift_once(&qword_1007B41F0, sub_1004C46F4);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100221DF8(v5, (uint64_t)qword_1007C37A0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "- stopSessionTimeout", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer));
    OS_dispatch_source.cancel()();
    swift_release(v2);
    v10 = *(_QWORD *)(v3 + v1);
    *(_QWORD *)(v3 + v1) = 0;
    swift_release(v10);
  }
}

uint64_t sub_1004C5204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;

  sub_1004C50D8();
  swift_release(*(_QWORD *)(v0 + 16));
  v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_uuid;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  sub_100225AA0(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sentBluetoothAddress), *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sentBluetoothAddress + 8));
  *(_QWORD *)&v3 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0
                                                                     + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needingUnpair)).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needingDisconnect), v3);

  *(_QWORD *)&v4 = swift_bridgeObjectRelease((const char *)*(_QWORD *)(v0
                                                                     + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_accInfoDict)).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_babyHash + 8), v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sessionTimeout));
  swift_bridgeObjectRelease(*(const char **)(v0
                                           + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState__accessoryUID
                                           + 8));
  sub_100225AA0(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState__blePairingUUID), *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState__blePairingUUID + 8));
  swift_bridgeObjectRelease(*(const char **)(v0
                                           + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_devicePencilBtTag
                                           + 8));
  sub_100225AA0(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_oobd), *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_oobd + 8));
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_viewServiceConnection);

  sub_100225AA0(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_b332BTAddr), *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_b332BTAddr + 8));
  return v0;
}

uint64_t sub_1004C53A0()
{
  uint64_t v0;

  sub_1004C5204();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1004C53C4()
{
  return type metadata accessor for SDB332SetupAgentSessionState(0);
}

uint64_t type metadata accessor for SDB332SetupAgentSessionState(uint64_t a1)
{
  return sub_1002442D0(a1, qword_1007C37F8, (uint64_t)&nominal type descriptor for SDB332SetupAgentSessionState);
}

uint64_t sub_1004C53E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[55];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_1005DB210;
    v4[4] = &unk_1005DB228;
    v4[5] = &unk_1005DB228;
    v4[6] = &unk_1005DB228;
    v4[7] = &unk_1005DB228;
    v4[8] = &unk_1005DB228;
    v4[9] = &unk_1005DB228;
    v4[10] = &unk_1005DB228;
    v4[11] = &unk_1005DB228;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[13] = &unk_1005DB240;
    v4[14] = &unk_1005DB228;
    v4[15] = &unk_1005DB228;
    v4[16] = &unk_1005DB228;
    v4[17] = &unk_1005DB228;
    v4[18] = &unk_1005DB228;
    v4[19] = &unk_1005DB228;
    v4[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[22] = &unk_1005DB228;
    v4[23] = &unk_1005DB228;
    v4[24] = &unk_1005DB228;
    v4[25] = &unk_1005DB228;
    v4[26] = &unk_1005DB228;
    v4[27] = &unk_1005DB228;
    v4[28] = &unk_1005DB228;
    v4[29] = &unk_1005DB258;
    v4[30] = &unk_1005DB270;
    v4[31] = &unk_1005DB258;
    v4[32] = &unk_1005DB288;
    v4[33] = &unk_1005DB258;
    v4[34] = &unk_1005DB2A0;
    v4[35] = &unk_1005DB258;
    v4[36] = &unk_1005DB2A0;
    v4[37] = &unk_1005DB240;
    v4[38] = &unk_1005DB288;
    v4[39] = &unk_1005DB2A0;
    v4[40] = &unk_1005DB288;
    v4[41] = &unk_1005DB240;
    v4[42] = &unk_1005DB270;
    v4[43] = &unk_1005DB2B8;
    v4[44] = &unk_1005DB258;
    v4[45] = &unk_1005DB258;
    v4[46] = &unk_1005DB270;
    v4[47] = &unk_1005DB288;
    v4[48] = &unk_1005DB258;
    v4[49] = &unk_1005DB228;
    v4[50] = &unk_1005DB228;
    v4[51] = &unk_1005DB240;
    v4[52] = &unk_1005DB270;
    v4[53] = &unk_1005DB270;
    v4[54] = &unk_1005DB258;
    return swift_updateClassMetadata2(a1, 256, 55, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1004C5524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for OnceManager();
  v2 = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(v2 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 16) = v2;
  UUID.init()(v2);
  v3 = OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_defaults;
  *(_QWORD *)(v0 + v3) = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_btCnxState) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_hidServiceDiscovered) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_ranEnsurePairingStarted) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_handledPairRequest) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_handledPairResult) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_pairConsented) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_showedPairingStarted) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_showedPairPrompt) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_showedEnableBTPrompt) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_lastSentBatteryPercentage) = 0;
  *(_OWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sentBluetoothAddress) = xmmword_1005CF260;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_ranHandleDiscover) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_ranHandleUnpairs) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needsUnlockPrompt) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needToStopBLEUpdates) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_hideBattery) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_didCleanup) = 0;
  v4 = OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needingUnpair;
  *(_QWORD *)(v0 + v4) = sub_10021FA58((uint64_t)_swiftEmptyArrayStorage);
  v5 = OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needingDisconnect;
  *(_QWORD *)(v0 + v5) = sub_10021FA58((uint64_t)_swiftEmptyArrayStorage);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_startedUnpairProcess) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_startedCheckingFindMyStatus) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_finishedCheckingFindMyStatus) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needsHiddenChargeStatusForReplacementB332) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_didShowSuccess) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_needToResetFromBTAddrRotation) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_secondNeedsHiddenChargeStatusForReplacementB332) = 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_storePeripheral) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_isPaired) = 2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_peerRequestingPairing) = 0;
  v6 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_peerPairingType;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_accInfoDict) = 0;
  v7 = (_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_babyHash);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sessionTimeout) = 0;
  v8 = (_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState__accessoryUID);
  *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState__blePairingUUID) = xmmword_1005CF260;
  v9 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_deviceType;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = (_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_devicePencilBtTag);
  *v10 = 0;
  v10[1] = 0;
  v11 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_devicePencilCode;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_OWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_oobd) = xmmword_1005CF260;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_viewServiceXPCConnectionEstablished) = 2;
  swift_unknownObjectWeakInit(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_viewServiceConnection, 0);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_discoveredBatteryInfo) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_btBatteryScanner) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_remoteHandleActivated) = 2;
  v12 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_powerSourceID;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_findMyUnpairAlert) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sendsUIUpdates) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_didComplete) = 0;
  *(_OWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_b332BTAddr) = xmmword_1005CF260;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_pairedPencilsIsEmpty) = 2;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_didPairingSucceed) = 2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_sbRemoteHandle) = 0;
  return v0;
}

id sub_1004C5888()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SDB332SetupAgent(0)), "init");
  qword_1007D8590 = (uint64_t)result;
  return result;
}

uint64_t sub_1004C58F8(void *a1, int a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Class isa;
  uint64_t v49;
  id v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t aBlock[6];

  v59 = a2;
  v4 = sub_100008384(&qword_1007B7280);
  v5 = __chkstk_darwin(v4);
  v56 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v57 = (char *)&v52 - v7;
  if (qword_1007B41F0 != -1)
    swift_once(&qword_1007B41F0, sub_1004C46F4);
  v8 = type metadata accessor for Logger(0);
  sub_100221DF8(v8, (uint64_t)qword_1007C37A0);
  v9 = v2;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(14, -1);
    *(_DWORD *)v12 = 67109376;
    LODWORD(aBlock[0]) = *(unsigned __int8 *)(*(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState]
                                            + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_hideBattery);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v12 + 4);

    *(_WORD *)(v12 + 8) = 1024;
    LODWORD(aBlock[0]) = v59 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v12 + 10);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "updateStateRemotely. hideBattery: %{BOOL}d, isCharging: %{BOOL}d", (uint8_t *)v12, 0xEu);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  aBlock[4] = (uint64_t)sub_1004E0890;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002377A0;
  aBlock[3] = (uint64_t)&unk_10072BEF8;
  v13 = _Block_copy(aBlock);
  v55 = objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:", v13);
  _Block_release(v13);
  v14 = *(double *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_ioKitBatteryLevel];
  v15 = v9[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_ioKitBatteryLevel + 8];
  v16 = OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState;
  v17 = *(_QWORD *)(*(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState]
                  + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_discoveredBatteryInfo);
  if (v17)
  {
    objc_msgSend(*(id *)(*(_QWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState]+ OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_discoveredBatteryInfo), "batteryLevel");
    v19 = v18;
  }
  else
  {
    v19 = 0.0;
  }
  if (v15)
    v20 = v19;
  else
    v20 = v14;
  if ((v15 & (v17 == 0)) != 0)
    v21 = 0.0;
  else
    v21 = v20;
  v22 = *(_QWORD *)&v9[v16];
  if ((v59 & 1) != 0
    && v21 <= *(double *)(v22
                        + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_lastSentBatteryPercentage))
  {
    v21 = *(double *)(v22 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_lastSentBatteryPercentage);
  }
  *(double *)(v22 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_lastSentBatteryPercentage) = v21;
  v58 = v59;
  if ((v15 & (v17 == 0)) == 0)
    v58 = (*(_BYTE *)(*(_QWORD *)&v9[v16]
                                     + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_hideBattery) & v59);
  v23 = v9;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v54 = v23;
    v26 = swift_slowAlloc(48, -1);
    v53 = swift_slowAlloc(64, -1);
    aBlock[0] = v53;
    *(_DWORD *)v26 = 134219010;
    v60 = *(_QWORD *)&v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v26 + 4);
    *(_WORD *)(v26 + 12) = 2080;
    if ((v15 & 1) != 0)
    {
      v27 = (const char *)0x800000010061ED50;
      v28 = 0xD000000000000014;
    }
    else
    {
      v28 = Double.description.getter(v14);
      v27 = v30;
    }
    v60 = sub_100228BD8(v28, (unint64_t)v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v26 + 14);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v26 + 22) = 2080;
    if (v17)
    {
      v31 = Double.description.getter(v19);
      v33 = v32;
    }
    else
    {
      v31 = 0xD00000000000001CLL;
      v33 = (const char *)0x800000010061ED70;
    }
    v60 = sub_100228BD8(v31, (unint64_t)v33, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v26 + 24);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v26 + 32) = 2048;
    v60 = *(_QWORD *)(*(_QWORD *)&v9[v16]
                    + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_lastSentBatteryPercentage);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v26 + 34);
    v29 = v54;

    *(_WORD *)(v26 + 42) = 1024;
    LODWORD(v60) = v58 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 4, v26 + 44);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Sending B332 battery level: %f |\nIOKitLevel: %s, advertisementLevel: %s, lastSent: %f, hiding: %{BOOL}d", (uint8_t *)v26, 0x30u);
    v34 = v53;
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    v29 = v23;
  }
  v35 = *(_QWORD *)&v9[v16];
  v36 = *(_QWORD *)(v35 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_deviceType);
  v37 = *(unsigned __int8 *)(v35 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_deviceType + 8);
  v38 = *(void **)(v35 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_storePeripheral);
  v39 = (uint64_t)v57;
  if (v38)
  {
    v40 = objc_msgSend(v38, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v41 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 0, 1, v41);
  }
  else
  {
    v42 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v39, 1, 1, v42);
  }
  v43 = v56;
  v44 = *(_QWORD *)&v29[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_orientation] - 1;
  if (v44 > 3)
    v45 = 1;
  else
    v45 = qword_1005DB370[v44];
  sub_100221F28(v39, v56, &qword_1007B7280);
  v46 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v46 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v43, 1, v46) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v43, v46);
  }
  if (v37)
    v49 = 0;
  else
    v49 = v36;
  v50 = v55;
  objc_msgSend(v55, "updateDeviceInfoWithDeviceType:batteryLevel:batteryLevelKnown:edge:orientation:isCharging:identifier:", v49, (v58 & 1) == 0, v45, 0, v59 & 1, isa, v21);
  swift_unknownObjectRelease(v50);

  return sub_10000D0F0(v39, &qword_1007B7280);
}

void sub_1004C5F9C(char a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;

  v2 = OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sbHasStarted;
  if (v1[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sbHasStarted] != (a1 & 1))
  {
    v3 = v1;
    if (qword_1007B41F0 != -1)
      swift_once(&qword_1007B41F0, sub_1004C46F4);
    v4 = type metadata accessor for Logger(0);
    sub_100221DF8(v4, (uint64_t)qword_1007C37A0);
    v8 = v1;
    v5 = Logger.logObject.getter(v8);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 67109120;
      v9 = v3[v2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4);

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "sbHasStarted = %{BOOL}d", v7, 8u);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1004C60F0()
{
  uint64_t v0;
  int IsAlive;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  int v17;

  v15 = 0;
  v0 = SBSSpringBoardBlockableServerPort();
  if (!(_DWORD)v0)
  {
    if (qword_1007B41F0 != -1)
      swift_once(&qword_1007B41F0, sub_1004C46F4);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100221DF8(v3, (uint64_t)qword_1007C37A0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_13;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "sbPort = 0", v7, 2u);
    v8 = (uint64_t)v7;
    goto LABEL_12;
  }
  IsAlive = SBGetIsAlive(v0, &v15, 900);
  if (v15)
    return 1;
  v9 = IsAlive;
  if (qword_1007B41F0 != -1)
    swift_once(&qword_1007B41F0, sub_1004C46F4);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100221DF8(v10, (uint64_t)qword_1007C37A0);
  v5 = Logger.logObject.getter(v11);
  v12 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v12))
  {
    v13 = swift_slowAlloc(11, -1);
    *(_DWORD *)v13 = 67109376;
    v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v13 + 4);
    *(_WORD *)(v13 + 8) = 256;
    swift_beginAccess(&v15, &v16, 0, 0);
    v14 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13 + 10);
    _os_log_impl((void *)&_mh_execute_header, v5, v12, "getSBIsAlive() - SBGetIsAlive result: %d, outIsAlive: %hhu", (uint8_t *)v13, 0xBu);
    v8 = v13;
LABEL_12:
    swift_slowDealloc(v8, -1, -1);
  }
LABEL_13:

  return 0;
}

uint64_t sub_1004C6324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for DefaultStringInterpolation.PrintUtilsHexFormat(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = 0;
  v6 = (uint64_t *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState)
                 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_b332BTAddr);
  v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    v8 = *v6;
    v13 = 0;
    v14 = 0xE000000000000000;
    v12[0] = v8;
    v12[1] = v7;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DefaultStringInterpolation.PrintUtilsHexFormat.hex(_:), v1);
    sub_10022E4A8(v8, v7);
    v9 = sub_100358394();
    DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(v12, v4, 58, 0xE100000000000000, &type metadata for Data, v9);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v10._countAndFlagsBits = v13;
    v11 = (void *)v14;
    v13 = 0x206D6F646E6152;
    v14 = 0xE700000000000000;
    v10._object = v11;
    String.append(_:)(v10);
    swift_bridgeObjectRelease((const char *)v11);
    sub_100225AA0(v8, v7);
    return v13;
  }
  return result;
}

void sub_1004C6468()
{
  void *v0;
  uint64_t v1;
  _BYTE *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *Strong;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1007B41F0 != -1)
    swift_once(&qword_1007B41F0, sub_1004C46F4);
  v1 = type metadata accessor for Logger(0);
  sub_100221DF8(v1, (uint64_t)qword_1007C37A0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v17 = v6;
    *(_DWORD *)v5 = 136315138;
    if ((v2[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_ioKitBatteryLevel + 8] & 1) != 0)
    {
      v7 = (const char *)0x800000010061F0C0;
      v8 = 0xD000000000000020;
    }
    else
    {
      v8 = Double.description.getter(*(double *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_ioKitBatteryLevel]);
      v7 = v10;
    }
    v16 = sub_100228BD8(v8, (unint64_t)v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4);

    swift_bridgeObjectRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Update b332 status: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(*(_QWORD *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState]+ OBJC_IVAR____TtC16DaemoniOSLibrary28SDB332SetupAgentSessionState_viewServiceConnection, v9);
  if (Strong)
  {
    v13 = Strong;
    sub_1004C58F8(Strong, 1);

  }
  v14 = (void *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_uiAgentConnection], v12);
  if (v14)
  {
    v15 = v14;
    sub_1004C58F8(v14, 1);

  }
}

id sub_1004C6684()
{
  void *v0;
  __CFNotificationCenter *v1;
  objc_super v3;

  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for SDB332SetupAgent(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1004C6828()
{
  return type metadata accessor for SDB332SetupAgent(0);
}

uint64_t type metadata accessor for SDB332SetupAgent(uint64_t a1)
{
  return sub_1002442D0(a1, (uint64_t *)&unk_1007C3FF8, (uint64_t)&nominal type descriptor for SDB332SetupAgent);
}

char *sub_1004C6844()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  objc_class *v27;
  char *v28;
  void *v29;
  uint64_t v30;
  char *v31;
  id v32;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  objc_super v37;
  _QWORD *v38;

  v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v3 = (char *)v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_q;
  v34[1] = sub_100221EDC(0, (unint64_t *)&qword_1007B42D0, OS_dispatch_queue_ptr);
  v10 = v0;
  static DispatchQoS.unspecified.getter(v10);
  v38 = _swiftEmptyArrayStorage;
  v11 = sub_100220D78((unint64_t *)&unk_1007BD2A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100008384((uint64_t *)&unk_1007B42E0);
  v13 = sub_10026E2FC((unint64_t *)&qword_1007BD2B0, (uint64_t *)&unk_1007B42E0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v36);
  v14 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x800000010061F430, v9, v6, v3, 0);
  *(_QWORD *)(v34[2] + v35) = v14;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_bleProvider] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_orientationObserver] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_orientation] = 0;
  swift_unknownObjectWeakInit(&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_uiAgentConnection], 0);
  v15 = OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_systemMonitor;
  *(_QWORD *)&v10[v15] = objc_msgSend(objc_allocWithZone((Class)CUSystemMonitor), "init");
  v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_systemMonitorActivated] = 0;
  v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sbHasStarted] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_peripheralsIConnectedTo] = &_swiftEmptyDictionarySingleton;
  v16 = &v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_lastB332WeWantedToPair];
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_powerSourceMonitor;
  *(_QWORD *)&v10[v18] = objc_msgSend(objc_allocWithZone((Class)CUPowerSourceMonitor), "init");
  v19 = &v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_lastAccessoryDetachTimestamp];
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = &v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_lastAttachedAccessorySerialNum];
  *v21 = 0;
  v21[1] = 0;
  v22 = &v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_ioKitBatteryLevel];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  v23 = OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_sessionState;
  v24 = type metadata accessor for SDB332SetupAgentSessionState(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  sub_1004C5524();
  *(_QWORD *)&v10[v23] = v25;
  v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_b222ConnectionInProgress] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_b222ConnectionAttempt] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_b222ConnectionMaxAttempts] = 10;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_b222ConnectionWaitDelay] = 0x3FE8000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_b222ConnectionWaitIndex] = 0;
  v26 = objc_msgSend(objc_allocWithZone((Class)CBCentralManager), "init");
  *(_QWORD *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_central] = v26;

  v27 = (objc_class *)type metadata accessor for SDB332SetupAgent(0);
  v37.receiver = v10;
  v37.super_class = v27;
  v28 = (char *)objc_msgSendSuper2(&v37, "init");
  v29 = *(void **)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_powerSourceMonitor];
  v30 = *(_QWORD *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_q];
  v31 = v28;
  objc_msgSend(v29, "setDispatchQueue:", v30);
  objc_msgSend(*(id *)&v31[OBJC_IVAR____TtC16DaemoniOSLibrary16SDB332SetupAgent_systemMonitor], "setDispatchQueue:", v30);
  v32 = v29;
  objc_msgSend(v32, "setChangeFlags:", 0xFFFFFFFFLL);

  return v31;
}

