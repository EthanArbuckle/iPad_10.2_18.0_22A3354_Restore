id sub_1000C5B5C()
{
  if (qword_1001E4768 != -1)
    dispatch_once(&qword_1001E4768, &stru_1001B7398);
  return (id)qword_1001E4760;
}

void sub_1000C5B9C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4760;
  qword_1001E4760 = (uint64_t)v1;

}

void sub_1000C6C78(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 255)
  {
    if (qword_1001E4768 != -1)
      dispatch_once(&qword_1001E4768, &stru_1001B7398);
    if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
    {
      if (qword_1001E4768 != -1)
        dispatch_once(&qword_1001E4768, &stru_1001B7398);
      _NRLogWithArgs(qword_1001E4760, 1, "%s%.30s:%-4d Ignoring as link is cancelled: %@", "", "-[NRLinkManagerWired linkDidReceiveData:data:]_block_invoke", 702, *(_QWORD *)(a1 + 32));
    }
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkDidReceiveData:data:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

  }
}

void sub_1000C6D88(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  id v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "linkIsUnavailable:", *(_QWORD *)(a1 + 40));

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = sub_100137F48((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v6, "count"))
      sub_1000C6E3C(v4, v6);
    v5 = sub_100137CA4((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v5, "count"))
      sub_1000C6E3C(v4, v5);

  }
}

void sub_1000C6E3C(uint64_t a1, void *a2)
{
  void *i;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  char *v25;
  id v26;
  id WeakRetained;
  unsigned int v28;
  id *v29;
  id *v30;
  char v31;
  char v32;
  BOOL v33;
  char v34;
  char v35;
  int v36;
  id v37;
  id v38;
  id v39;
  char v40;
  uint64_t v41;
  void *j;
  void *v43;
  void *v44;
  unsigned int v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  unsigned __int8 v76;
  unsigned int v77;
  void *v78;
  id v79;
  __CFString *v80;
  __CFString *v81;
  void *v82;
  NRLinkWired *v83;
  void *v84;
  id v85;
  __CFString *v86;
  __CFString *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  __CFString *v93;
  id v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  NRLinkWired *v99;
  id v100;
  int IsLevelEnabled;
  id v102;
  id v103;
  int v104;
  id v105;
  int v106;
  id v107;
  int v108;
  id v109;
  int v110;
  id v111;
  id *location;
  id v113;
  char *v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  id v123;
  uint64_t v124;
  id v125;
  void *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  id v130;
  id v131;
  id v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  void *v137;
  id obj;
  id obja;
  id objb;
  uint64_t v141;
  void *v142;
  id v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  objc_super v177;
  _BYTE v178[128];
  _BYTE v179[128];
  _BYTE v180[128];
  _BYTE v181[128];
  _BYTE v182[128];
  _BYTE v183[128];
  _BYTE v184[128];
  _BYTE v185[128];

  v136 = a2;
  v173 = 0u;
  v174 = 0u;
  v175 = 0u;
  v176 = 0u;
  obj = objc_msgSend(*(id *)(a1 + 40), "copy");
  v134 = a1;
  v143 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v173, v185, 16);
  if (v143)
  {
    v141 = *(_QWORD *)v174;
    do
    {
      for (i = 0; i != v143; i = (char *)i + 1)
      {
        if (*(_QWORD *)v174 != v141)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v173 + 1) + 8 * (_QWORD)i);
        v6 = *(id *)(a1 + 80);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localInterfaceName"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

        if (!v8 || !objc_msgSend(v8, "count"))
          objc_msgSend(v5, "cancelWithReason:", CFSTR("interface went away"));

        v9 = *(id *)(v134 + 88);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "nrUUID"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

        if (!v11)
          goto LABEL_6;
        v171 = 0u;
        v172 = 0u;
        v169 = 0u;
        v170 = 0u;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "interfaceToPeerAddressDictionary"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allValues"));

        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v169, v184, 16);
        if (!v14)
        {
LABEL_5:

LABEL_6:
          v4 = 0;
          goto LABEL_7;
        }
        v15 = v14;
        v16 = *(_QWORD *)v170;
LABEL_17:
        v17 = 0;
        while (1)
        {
          if (*(_QWORD *)v170 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v169 + 1) + 8 * v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "remoteOuterEndpoint"));
          v20 = objc_msgSend(v18, "containsObject:", v19);

          if ((v20 & 1) != 0)
            break;
          if (v15 == (id)++v17)
          {
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v169, v184, 16);
            if (v15)
              goto LABEL_17;
            goto LABEL_5;
          }
        }
        v4 = v18;

        if (v4 && objc_msgSend(v4, "count"))
          goto LABEL_8;
LABEL_7:
        objc_msgSend(v5, "cancelWithReason:", CFSTR("peer went away"));
LABEL_8:

        a1 = v134;
      }
      v143 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v173, v185, 16);
    }
    while (v143);
  }

  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v113 = v136;
  v116 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v165, v183, 16);
  if (v116)
  {
    location = (id *)(a1 + 16);
    v115 = *(_QWORD *)v166;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v166 != v115)
        {
          v23 = v21;
          objc_enumerationMutation(v113);
          v21 = v23;
        }
        v120 = v21;
        v24 = *(void **)(*((_QWORD *)&v165 + 1) + 8 * v21);
        v25 = sub_10012FFF4((uint64_t)NRDLocalDevice, v24);
        v122 = v25;
        if (!v25 || (v26 = *((id *)v25 + 16), v26, !v26))
        {
          if (qword_1001E4768 != -1)
            dispatch_once(&qword_1001E4768, &stru_1001B7398);
          if (_NRLogIsLevelEnabled(qword_1001E4760, 0))
          {
            if (qword_1001E4768 != -1)
              dispatch_once(&qword_1001E4768, &stru_1001B7398);
            _NRLogWithArgs(qword_1001E4760, 0, "%s%.30s:%-4d Deferring creating link for invalid local device for %@", "", "-[NRLinkManagerWired createLinkForNRUUIDs:]", 199, v24);
          }
          goto LABEL_34;
        }
        if (!v122[9])
        {
          if (qword_1001E4768 != -1)
            dispatch_once(&qword_1001E4768, &stru_1001B7398);
          if (_NRLogIsLevelEnabled(qword_1001E4760, 0))
          {
            if (qword_1001E4768 != -1)
              dispatch_once(&qword_1001E4768, &stru_1001B7398);
            _NRLogWithArgs(qword_1001E4760, 0, "%s%.30s:%-4d Deferring creating link for disabled local device for %@", "", "-[NRLinkManagerWired createLinkForNRUUIDs:]", 204, v24);
          }
          goto LABEL_34;
        }
        if (a1)
          WeakRetained = objc_loadWeakRetained(location);
        else
          WeakRetained = 0;
        v28 = objc_msgSend(WeakRetained, "perpetualStandaloneMeadowEnabledForNRUUID:", v24);

        if (v28)
        {
          if (qword_1001E4768 != -1)
            dispatch_once(&qword_1001E4768, &stru_1001B7398);
          if (_NRLogIsLevelEnabled(qword_1001E4760, 0))
          {
            if (qword_1001E4768 != -1)
              dispatch_once(&qword_1001E4768, &stru_1001B7398);
            _NRLogWithArgs(qword_1001E4760, 0, "%s%.30s:%-4d Deferring creating link for %@ as device is in perpetual standalone Meadow mode", "", "-[NRLinkManagerWired createLinkForNRUUIDs:]", 210, v122);
          }
          goto LABEL_34;
        }
        v29 = (id *)v122;
        if (!*(_BYTE *)(a1 + 32))
        {
          if (qword_1001E4870 != -1)
          {
            dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
            v29 = (id *)v122;
          }
          if (!byte_1001E4868)
          {
            v46 = v29[16];
            v29 = (id *)v122;
            if (v46)
            {
              v47 = v46;
              v48 = *((id *)v122 + 16);
              v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "allowedLinkTypes"));
              v50 = objc_msgSend(v49, "containsObject:", &off_1001C4768);

              v29 = (id *)v122;
              if ((v50 & 1) == 0)
              {
                if (qword_1001E4768 != -1)
                  dispatch_once(&qword_1001E4768, &stru_1001B7398);
                if (_NRLogIsLevelEnabled(qword_1001E4760, 0))
                {
                  if (qword_1001E4768 != -1)
                    dispatch_once(&qword_1001E4768, &stru_1001B7398);
                  _NRLogWithArgs(qword_1001E4760, 0, "%s%.30s:%-4d Deferring creating link for %@ as Wired is unsupported", "", "-[NRLinkManagerWired createLinkForNRUUIDs:]", 219, v122);
                }
                goto LABEL_34;
              }
            }
          }
        }
        v30 = v29;
        if (sub_10010DF88(v29) == 1)
        {
          if (*((_BYTE *)v30 + 15))
          {
            v31 = 1;
            if (*((_BYTE *)v30 + 12))
              goto LABEL_68;
          }
          else
          {
            if (*((_BYTE *)v30 + 14))
              v33 = 1;
            else
              v33 = *((unsigned __int16 *)v30 + 14) > 0x12u;
            v31 = v33;
            if (*((_BYTE *)v30 + 12))
            {
LABEL_68:
              if (*((_BYTE *)v30 + 13))
                v32 = v31;
              else
                v32 = 0;
              goto LABEL_79;
            }
          }
        }
        v32 = 0;
LABEL_79:
        v34 = sub_100137E98((_BOOL8)v30);
        v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "objectForKeyedSubscript:", v24));
        if (v119)
        {
          v35 = v32 & ~v34;
          if ((v35 & 1) != 0)
          {
            v36 = 0;
          }
          else
          {
            v163 = 0u;
            v164 = 0u;
            v161 = 0u;
            v162 = 0u;
            v37 = *(id *)(a1 + 40);
            v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v161, v182, 16);
            if (v38)
            {
              v39 = v38;
              v40 = v35;
              v41 = *(_QWORD *)v162;
              do
              {
                for (j = 0; j != v39; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v162 != v41)
                    objc_enumerationMutation(v37);
                  v43 = *(void **)(*((_QWORD *)&v161 + 1) + 8 * (_QWORD)j);
                  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "nrUUID"));
                  v45 = objc_msgSend(v44, "isEqual:", v24);

                  if (v45 && objc_msgSend(v43, "state") != 255)
                  {
                    v36 = 1;
                    goto LABEL_97;
                  }
                }
                v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v161, v182, 16);
              }
              while (v39);
              v36 = 0;
LABEL_97:
              v35 = v40;
            }
            else
            {
              v36 = 0;
            }

          }
          v159 = 0u;
          v160 = 0u;
          v157 = 0u;
          v158 = 0u;
          v114 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "interfaceToPeerAddressDictionary"));
          v118 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v157, v181, 16);
          if (!v118)
            goto LABEL_32;
          v117 = *(_QWORD *)v158;
          v137 = v24;
          v128 = v35;
LABEL_110:
          v51 = 0;
          while (1)
          {
            if (*(_QWORD *)v158 != v117)
            {
              v52 = v51;
              objc_enumerationMutation(v114);
              v51 = v52;
            }
            if (!(v35 & 1 | ((v36 & 1) == 0)))
              goto LABEL_32;
            v121 = v51;
            v53 = *(void **)(*((_QWORD *)&v157 + 1) + 8 * v51);
            v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", v53));
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "interfaceToPeerAddressDictionary"));
            v144 = v53;
            v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", v53));

            v155 = 0u;
            v156 = 0u;
            v153 = 0u;
            v154 = 0u;
            v123 = v54;
            v125 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v153, v180, 16);
            if (v125)
            {
              v124 = *(_QWORD *)v154;
LABEL_117:
              v56 = 0;
LABEL_119:
              if (*(_QWORD *)v154 != v124)
              {
                v57 = v56;
                objc_enumerationMutation(v123);
                v56 = v57;
              }
              if (v35 & 1 | ((v36 & 1) == 0))
                break;
            }
LABEL_111:

            v51 = v121 + 1;
            if ((id)(v121 + 1) == v118)
            {
              v118 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v157, v181, 16);
              if (!v118)
                goto LABEL_32;
              goto LABEL_110;
            }
          }
          v127 = v56;
          v142 = *(void **)(*((_QWORD *)&v153 + 1) + 8 * v56);
          v151 = 0u;
          v152 = 0u;
          v149 = 0u;
          v150 = 0u;
          v131 = v126;
          v58 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v149, v179, 16);
          if (!v58)
            goto LABEL_118;
          v59 = v58;
          v60 = *(_QWORD *)v150;
          v129 = *(_QWORD *)v150;
          while (2)
          {
            v61 = 0;
            v130 = v59;
LABEL_128:
            if (*(_QWORD *)v150 != v60)
              objc_enumerationMutation(v131);
            if (!(v35 & 1 | ((v36 & 1) == 0)))
              goto LABEL_118;
            obja = *(id *)(*((_QWORD *)&v149 + 1) + 8 * v61);
            if (!objc_msgSend((id)a1, "endpointsAreCompatible:remoteEndpoint:", v142))
              goto LABEL_127;
            v135 = v61;
            v133 = v36;
            v147 = 0u;
            v148 = 0u;
            v145 = 0u;
            v146 = 0u;
            v62 = objc_msgSend(*(id *)(a1 + 40), "copy");
            v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v145, v178, 16);
            if (!v63)
            {
LABEL_148:

              goto LABEL_149;
            }
            v64 = v63;
            v65 = *(_QWORD *)v146;
LABEL_135:
            v66 = 0;
LABEL_140:
            if (*(_QWORD *)v146 != v65)
              objc_enumerationMutation(v62);
            v67 = *(void **)(*((_QWORD *)&v145 + 1) + 8 * v66);
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "nrUUID"));
            if (objc_msgSend(v68, "isEqual:", v24))
            {
              v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "localInterfaceName"));
              v70 = objc_msgSend(v69, "isEqualToString:", v144);

              if (v70)
              {
                v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "localOuterEndpoint"));
                v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "hostname"));

                v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "remoteOuterEndpoint"));
                v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "hostname"));

                v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "hostname"));
                if ((objc_msgSend(v68, "isEqualToString:", v74) & 1) != 0)
                {
                  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "hostname"));
                  v76 = objc_msgSend(v73, "isEqualToString:", v75);

                  v24 = v137;
                  if ((v76 & 1) != 0)
                  {
                    v77 = objc_msgSend(v67, "state");

                    if (v77 != 255)
                    {
                      a1 = v134;
                      v61 = v135;
                      v35 = v128;
                      v36 = v133;
                      v60 = v129;
                      v59 = v130;
                      goto LABEL_127;
                    }
LABEL_149:
                    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obja, "hostname"));
                    objc_opt_self(NRIKEv2Listener);
                    if (qword_1001E44D8 != -1)
                      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
                    v79 = (id)qword_1001E44D0;
                    v80 = CFSTR("62743");
                    if (!v79)
                      v80 = 0;
                    v81 = v80;
                    v82 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v78, v81));

                    v83 = [NRLinkWired alloc];
                    if (v134)
                      v84 = *(void **)(v134 + 24);
                    else
                      v84 = 0;
                    v85 = v84;
                    objc_opt_self(NRIKEv2Listener);
                    if (qword_1001E44D8 != -1)
                      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
                    v132 = (id)qword_1001E44D0;
                    v86 = CFSTR("62743");
                    if (!v132)
                      v86 = 0;
                    v87 = v86;
                    v88 = v85;
                    v89 = (id)v134;
                    v90 = v24;
                    objb = v144;
                    v91 = v142;
                    v92 = v82;
                    v93 = v87;
                    if (!v83)
                      goto LABEL_201;
                    if (!v88)
                    {
                      if (qword_1001E4758 != -1)
                        dispatch_once(&qword_1001E4758, &stru_1001B7378);
                      v100 = (id)qword_1001E4750;
                      IsLevelEnabled = _NRLogIsLevelEnabled(v100, 17);

                      if (IsLevelEnabled)
                      {
                        if (qword_1001E4758 != -1)
                          dispatch_once(&qword_1001E4758, &stru_1001B7378);
                        v24 = v137;
                        v102 = (id)qword_1001E4750;
                        _NRLogWithArgs(v102, 17, "%s called with null queue");
LABEL_192:

LABEL_201:
                        v99 = 0;
                        v96 = objb;
                        goto LABEL_166;
                      }
LABEL_193:
                      v99 = 0;
                      v24 = v137;
                      v96 = objb;
                      goto LABEL_166;
                    }
                    if (!v24)
                    {
                      if (qword_1001E4758 != -1)
                        dispatch_once(&qword_1001E4758, &stru_1001B7378);
                      v103 = (id)qword_1001E4750;
                      v104 = _NRLogIsLevelEnabled(v103, 17);

                      if (v104)
                      {
                        if (qword_1001E4758 != -1)
                          dispatch_once(&qword_1001E4758, &stru_1001B7378);
                        v24 = v137;
                        v102 = (id)qword_1001E4750;
                        _NRLogWithArgs(v102, 17, "%s called with null nrUUID");
                        goto LABEL_192;
                      }
                      goto LABEL_193;
                    }
                    if ((_NRIsUUIDNonZero(v90) & 1) == 0)
                    {
                      if (qword_1001E4758 != -1)
                        dispatch_once(&qword_1001E4758, &stru_1001B7378);
                      v105 = (id)qword_1001E4750;
                      v106 = _NRLogIsLevelEnabled(v105, 17);

                      if (v106)
                      {
                        if (qword_1001E4758 != -1)
                          dispatch_once(&qword_1001E4758, &stru_1001B7378);
                        v24 = v137;
                        v102 = (id)qword_1001E4750;
                        _NRLogWithArgs(v102, 17, "called with all-zero nrUUID");
                        goto LABEL_192;
                      }
                      goto LABEL_193;
                    }
                    if (!v144)
                    {
                      if (qword_1001E4758 != -1)
                        dispatch_once(&qword_1001E4758, &stru_1001B7378);
                      v107 = (id)qword_1001E4750;
                      v108 = _NRLogIsLevelEnabled(v107, 17);

                      if (v108)
                      {
                        if (qword_1001E4758 != -1)
                          dispatch_once(&qword_1001E4758, &stru_1001B7378);
                        v24 = v137;
                        v102 = (id)qword_1001E4750;
                        _NRLogWithArgs(v102, 17, "%s called with null localInterfaceName");
                        goto LABEL_192;
                      }
                      goto LABEL_193;
                    }
                    v177.receiver = v83;
                    v177.super_class = (Class)NRLinkWired;
                    v94 = objc_msgSendSuper2(&v177, "initLinkWithQueue:linkDelegate:nrUUID:", v88, v89, v90);
                    if (!v94)
                    {
                      if (qword_1001E4758 != -1)
                        dispatch_once(&qword_1001E4758, &stru_1001B7378);
                      v109 = (id)qword_1001E4750;
                      v110 = _NRLogIsLevelEnabled(v109, 17);

                      if (v110)
                      {
                        if (qword_1001E4758 != -1)
                          dispatch_once(&qword_1001E4758, &stru_1001B7378);
                        v111 = (id)qword_1001E4750;
                        _NRLogWithArgs(v111, 17, "[NRLink initLinkWithQueue:] failed");

                      }
                      v83 = 0;
                      goto LABEL_201;
                    }
                    v95 = v94;
                    objc_msgSend(v94, "setType:", 5);
                    objc_msgSend(v95, "setLocalInterfaceName:", objb);
                    objc_msgSend(v95, "setLocalOuterEndpoint:", v91);
                    objc_msgSend(v95, "setRemoteOuterEndpoint:", v92);
                    objc_msgSend(v95, "setListenerPortString:", v93);
                    objc_msgSend(v95, "setOnlyAllowClassC:", 1);
                    v96 = objb;
                    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "UUIDString"));
                    objc_msgSend(v95, "reportEvent:details:", 3000, v97);

                    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "linkDelegate"));
                    objc_msgSend(v98, "linkIsAvailable:", v95);

                    v83 = v95;
                    v99 = v83;
LABEL_166:

                    if (v99)
                    {
                      v36 = 1;
                      v35 = v128;
                    }
                    else
                    {
                      objc_msgSend(v89, "reportEvent:", 3210);
                      v35 = v128;
                      v36 = v133;
                    }
                    v60 = v129;
                    v59 = v130;
                    a1 = v134;
                    v61 = v135;

LABEL_127:
                    if ((id)++v61 == v59)
                    {
                      v59 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v149, v179, 16);
                      if (!v59)
                      {
LABEL_118:

                        v56 = v127 + 1;
                        if ((id)(v127 + 1) != v125)
                          goto LABEL_119;
                        v125 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v153, v180, 16);
                        if (v125)
                          goto LABEL_117;
                        goto LABEL_111;
                      }
                      continue;
                    }
                    goto LABEL_128;
                  }
                }
                else
                {

                }
                goto LABEL_138;
              }
            }
            else
            {
LABEL_138:

            }
            break;
          }
          if (v64 == (id)++v66)
          {
            v64 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v145, v178, 16);
            if (!v64)
              goto LABEL_148;
            goto LABEL_135;
          }
          goto LABEL_140;
        }
        if (qword_1001E4768 != -1)
          dispatch_once(&qword_1001E4768, &stru_1001B7398);
        if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
        {
          if (qword_1001E4768 != -1)
            dispatch_once(&qword_1001E4768, &stru_1001B7398);
          v22 = (id)qword_1001E4760;
          v114 = sub_10012FFF4((uint64_t)NRDLocalDevice, v24);
          _NRLogWithArgs(v22, 1, "%s%.30s:%-4d deferring creating link until a peer is discovered for %@", "", "-[NRLinkManagerWired createLinkForNRUUIDs:]", 238, v114);

LABEL_32:
        }

LABEL_34:
        v21 = v120 + 1;
      }
      while ((id)(v120 + 1) != v116);
      v116 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v165, v183, 16);
    }
    while (v116);
  }

}

void sub_1000C81CC(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 9)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsSuspended:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4768 != -1)
      dispatch_once(&qword_1001E4768, &stru_1001B7398);
    if (_NRLogIsLevelEnabled(qword_1001E4760, 16))
    {
      if (qword_1001E4768 != -1)
        dispatch_once(&qword_1001E4768, &stru_1001B7398);
      _NRLogWithArgs(qword_1001E4760, 16, "%s%.30s:%-4d %@: link %@ is not in suspended state anymore", "", "-[NRLinkManagerWired linkIsSuspended:]_block_invoke", 661, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000C82DC(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 8)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsReady:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4768 != -1)
      dispatch_once(&qword_1001E4768, &stru_1001B7398);
    if (_NRLogIsLevelEnabled(qword_1001E4760, 16))
    {
      if (qword_1001E4768 != -1)
        dispatch_once(&qword_1001E4768, &stru_1001B7398);
      _NRLogWithArgs(qword_1001E4760, 16, "%s%.30s:%-4d %@: link %@ is not in ready state anymore", "", "-[NRLinkManagerWired linkIsReady:]_block_invoke", 638, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000C83EC(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsAvailable:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4768 != -1)
      dispatch_once(&qword_1001E4768, &stru_1001B7398);
    if (_NRLogIsLevelEnabled(qword_1001E4760, 16))
    {
      if (qword_1001E4768 != -1)
        dispatch_once(&qword_1001E4768, &stru_1001B7398);
      _NRLogWithArgs(qword_1001E4760, 16, "%s%.30s:%-4d %@: link %@ is not in initial state anymore", "", "-[NRLinkManagerWired linkIsAvailable:]_block_invoke", 615, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000C84FC(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  BOOL v4;

  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (v2)
      v4 = v2[8] != 0;
    else
      v4 = 0;
    *(_BYTE *)(v3 + 32) = v4;
  }

}

void sub_1000C8584(uint64_t a1)
{
  id v2;
  uint64_t v3;
  SCDynamicStoreRef v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  const __CFString *v10;
  __CFString *NetworkInterfaceEntity;
  __CFString *v12;
  const __SCDynamicStore *v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  const void *v17;
  id v18;
  int v19;
  id v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int IsLevelEnabled;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  int v31;
  id v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD v41[5];
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  SCDynamicStoreContext v47;
  _BYTE v48[128];

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 48), "count");
    v3 = *(_QWORD *)(a1 + 56);
    if (v2)
    {
      if (!v3)
      {
        v47.version = 0;
        memset(&v47.retain, 0, 24);
        v47.info = (void *)a1;
        v4 = SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("NRLinkManagerWired"), (SCDynamicStoreCallBack)sub_1000C8A84, &v47);
        *(_QWORD *)(a1 + 56) = v4;
        if (!v4)
        {
          v25 = sub_1000C5B5C();
          IsLevelEnabled = _NRLogIsLevelEnabled(v25, 16);

          if (IsLevelEnabled)
          {
            v27 = sub_1000C5B5C();
            _NRLogWithArgs(v27, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (self.scdynamicStoreRef) != ((void *)0)", "", "-[NRLinkManagerWired setupSCDWatcher]", 564);

          }
          v28 = _os_log_pack_size(12);
          v22 = (char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
          v29 = *__error();
          v24 = _os_log_pack_fill(v22, v28, v29, &_mh_execute_header, "%{public}s Assertion Failed: (self.scdynamicStoreRef) != ((void *)0)");
          goto LABEL_27;
        }
        SCDynamicStoreSetDisconnectCallBack(v4, sub_1000C8AE8);
      }
      v38 = v3;
      v5 = objc_alloc_init((Class)NSMutableArray);
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v39 = a1;
      v40 = *(id *)(a1 + 48);
      v6 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v44;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v44 != v8)
              objc_enumerationMutation(v40);
            v10 = *(const __CFString **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
            NetworkInterfaceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetIPv4);
            v12 = (__CFString *)SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetIPv6);
            objc_msgSend(v5, "addObject:", NetworkInterfaceEntity);
            objc_msgSend(v5, "addObject:", v12);

          }
          v7 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
        }
        while (v7);
      }

      if (SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(v39 + 56), (CFArrayRef)v5, 0))
      {
        if (v38
          || (v13 = *(const __SCDynamicStore **)(v39 + 56),
              v14 = *(id *)(v39 + 24),
              LODWORD(v13) = SCDynamicStoreSetDispatchQueue(v13, v14),
              v14,
              (_DWORD)v13))
        {
          v15 = *(id *)(v39 + 24);
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          v41[2] = sub_1000C8C2C;
          v41[3] = &unk_1001B8778;
          v41[4] = v39;
          v42 = v5;
          v16 = v5;
          dispatch_async(v15, v41);

          return;
        }
        v30 = sub_1000C5B5C();
        v31 = _NRLogIsLevelEnabled(v30, 16);

        if (v31)
        {
          v32 = sub_1000C5B5C();
          _NRLogWithArgs(v32, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: retval", "", "-[NRLinkManagerWired setupSCDWatcher]", 586);

        }
        v33 = _os_log_pack_size(12);
        v22 = (char *)&v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
        v34 = __error();
        v35 = _os_log_pack_fill(v22, v33, *v34, &_mh_execute_header, "%{public}s Assertion Failed: retval");
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)(v35 + 4) = "-[NRLinkManagerWired setupSCDWatcher]";
LABEL_31:
        v36 = sub_1000C5B5C();
        _NRLogAbortWithPack(v36, v22);
      }
      v18 = sub_1000C5B5C();
      v19 = _NRLogIsLevelEnabled(v18, 16);

      if (v19)
      {
        v20 = sub_1000C5B5C();
        _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: retval", "", "-[NRLinkManagerWired setupSCDWatcher]", 582);

      }
      v21 = _os_log_pack_size(12);
      v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = *__error();
      v24 = _os_log_pack_fill(v22, v21, v23, &_mh_execute_header, "%{public}s Assertion Failed: retval");
LABEL_27:
      *(_DWORD *)v24 = 136446210;
      *(_QWORD *)(v24 + 4) = "-[NRLinkManagerWired setupSCDWatcher]";
      goto LABEL_31;
    }
    if (v3)
    {
      SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 56), 0);
      v17 = *(const void **)(a1 + 56);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
  }
}

void sub_1000C8A84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  if (a3)
  {
    v5 = a3;
    if (*((_DWORD *)v5 + 3) != 1004 && *((_QWORD *)v5 + 7) == a1)
    {
      v6 = v5;
      sub_1000C8CB0((uint64_t)v5, a2);
      v5 = v6;
    }

  }
}

void sub_1000C8AE8(id a1, void *a2)
{
  id *v3;
  id *v4;
  NSObject *v5;
  _QWORD block[4];
  id *v7;

  if (a2)
  {
    v3 = a2;
    v4 = v3;
    if (*((_DWORD *)v3 + 3) != 1004 && v3[7] == a1)
    {
      if (qword_1001E4768 != -1)
        dispatch_once(&qword_1001E4768, &stru_1001B7398);
      if (_NRLogIsLevelEnabled(qword_1001E4760, 16))
      {
        if (qword_1001E4768 != -1)
          dispatch_once(&qword_1001E4768, &stru_1001B7398);
        _NRLogWithArgs(qword_1001E4760, 16, "%s%.30s:%-4d SCD server restarted", "", "scdDisconnectCallback", 537);
      }
      v5 = v4[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000C9AA4;
      block[3] = &unk_1001B8AE0;
      v7 = v4;
      dispatch_async(v5, block);

    }
  }
}

void sub_1000C8C2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = v1[7];
    v3 = *(void **)(a1 + 40);
    v4 = v1;
    if (*((_DWORD *)v4 + 3) != 1004 && v4[7] == v2)
    {
      v5 = v4;
      sub_1000C8CB0((uint64_t)v4, v3);
      v4 = v5;
    }

  }
}

void sub_1000C8CB0(uint64_t a1, void *a2)
{
  const __CFArray *v3;
  void *v4;
  NSObject *v5;
  const __CFArray *v6;
  id v7;
  id v8;
  int v9;
  char v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  const __CFArray *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  CFStringRef v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *j;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t k;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v41;
  unsigned int v42;
  id v45;
  void *v46;
  id v47;
  const __CFArray *v48;
  id v49;
  id v50;
  uint64_t v51;
  CFStringRef v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  void *m;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  char *v65;
  char *n;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  int v72;
  BOOL v73;
  id v74;
  id v75;
  uint64_t v76;
  void *ii;
  uint64_t v78;
  id v79;
  id *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  const __CFArray *v89;
  const __CFArray *v90;
  id v91;
  void *v92;
  uint64_t v93;
  const __CFArray *v94;
  uint64_t v95;
  id v96;
  CFDictionaryRef v97;
  void *v98;
  id v99;
  id v100;
  uint64_t v101;
  id obj;
  id obja;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[128];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];
  _BYTE v140[128];
  _BYTE v141[128];
  _BYTE v142[128];

  v3 = a2;
  if (a1)
    v4 = *(void **)(a1 + 24);
  else
    v4 = 0;
  v5 = v4;
  dispatch_assert_queue_V2(v5);

  v97 = SCDynamicStoreCopyMultiple(*(SCDynamicStoreRef *)(a1 + 56), v3, 0);
  if (qword_1001E4768 != -1)
    dispatch_once(&qword_1001E4768, &stru_1001B7398);
  if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
  {
    if (qword_1001E4768 != -1)
      dispatch_once(&qword_1001E4768, &stru_1001B7398);
    _NRLogWithArgs(qword_1001E4760, 1, "%s%.30s:%-4d SCD update for NRLinkManagerWired: %@", "", "-[NRLinkManagerWired processSCDUpdate:]", 401, v97);
  }
  v101 = a1;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v6 = v3;
  v7 = -[__CFArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v128, v142, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)v129;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v129 != v11)
          objc_enumerationMutation(v6);
        v13 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v13, "containsString:", kSCEntNetIPv4) & 1) != 0)
          v10 = 1;
        else
          v9 |= objc_msgSend(v13, "containsString:", kSCEntNetIPv6);
      }
      v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v128, v142, 16);
    }
    while (v8);
  }
  else
  {
    LOBYTE(v9) = 0;
    v10 = 0;
  }

  v96 = objc_alloc_init((Class)NSMutableSet);
  v14 = v101;
  v89 = v6;
  if ((v10 & 1) != 0)
  {
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v15 = v6;
    v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v124, v141, 16);
    if (v16)
    {
      v17 = v16;
      v18 = 0;
      v19 = *(_QWORD *)v125;
      v20 = kSCEntNetIPv4;
      v21 = *(_QWORD *)v125;
      v93 = *(_QWORD *)v125;
      v94 = v15;
      while (1)
      {
        if (v21 != v19)
          objc_enumerationMutation(v15);
        v22 = *(void **)(*((_QWORD *)&v124 + 1) + 8 * v18);
        if (objc_msgSend(v22, "containsString:", v20))
        {
          obj = v17;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v23 = *(id *)(v14 + 48);
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v120, v140, 16);
          if (v24)
          {
            v25 = v24;
            v26 = *(_QWORD *)v121;
            while (2)
            {
              for (j = 0; j != v25; j = (char *)j + 1)
              {
                if (*(_QWORD *)v121 != v26)
                  objc_enumerationMutation(v23);
                v28 = *(_QWORD *)(*((_QWORD *)&v120 + 1) + 8 * (_QWORD)j);
                if (objc_msgSend(v22, "containsString:", v28))
                {
                  objc_msgSend(v96, "addObject:", v28);
                  objc_msgSend(*(id *)(v101 + 64), "setObject:forKeyedSubscript:", 0, v28);
                  v98 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v97, "objectForKeyedSubscript:", v22));
                  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "objectForKeyedSubscript:", kSCPropNetIPv4Addresses));
                  v100 = objc_alloc_init((Class)NSMutableArray);
                  v116 = 0u;
                  v117 = 0u;
                  v118 = 0u;
                  v119 = 0u;
                  v30 = v29;
                  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v116, v139, 16);
                  if (v31)
                  {
                    v32 = (unint64_t)v31;
                    v33 = 0;
                    v34 = *(_QWORD *)v117;
                    for (k = *(_QWORD *)v117; ; k = *(_QWORD *)v117)
                    {
                      if (k != v34)
                        objc_enumerationMutation(v30);
                      v36 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * v33);
                      v134 = 0;
                      v133 = 0;
                      if (inet_pton(2, (const char *)objc_msgSend(v36, "UTF8String"), (char *)&v133 + 4) == 1)
                      {
                        v37 = bswap32(HIDWORD(v133));
                        v38 = v37 & 0xFF000000;
                        v41 = HIWORD(v37) == 43518 || v38 == 0 || v38 == 2130706432 || v37 >> 28 == 14;
                        v42 = v37 & 0xFFFFFFF8;
                        if (v41 || HIDWORD(v133) == -1 || v42 == -1073741824)
                        {
                          if (qword_1001E4768 != -1)
                            dispatch_once(&qword_1001E4768, &stru_1001B7398);
                          if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
                          {
                            if (qword_1001E4768 != -1)
                              dispatch_once(&qword_1001E4768, &stru_1001B7398);
                            _NRLogWithArgs(qword_1001E4760, 1, "%s%.30s:%-4d Ignoring ipv4 address: %@", "", "-[NRLinkManagerWired processSCDUpdate:]", 437, v36);
                          }
                        }
                        else
                        {
                          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v36, CFSTR("0")));
                          objc_msgSend(v100, "addObject:", v46);

                        }
                      }
                      if (++v33 >= v32)
                      {
                        v45 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v116, v139, 16);
                        if (!v45)
                          break;
                        v32 = (unint64_t)v45;
                        v33 = 0;
                      }
                    }
                  }

                  if (objc_msgSend(v100, "count"))
                    objc_msgSend(*(id *)(v101 + 64), "setObject:forKeyedSubscript:", v100, v28);

                  goto LABEL_71;
                }
              }
              v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v120, v140, 16);
              if (v25)
                continue;
              break;
            }
          }
LABEL_71:

          v14 = v101;
          v17 = obj;
          v6 = v89;
          v19 = v93;
          v15 = v94;
          v20 = kSCEntNetIPv4;
        }
        if (++v18 >= (unint64_t)v17)
        {
          v47 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v124, v141, 16);
          if (!v47)
            break;
          v17 = v47;
          v18 = 0;
        }
        v21 = *(_QWORD *)v125;
      }
    }

  }
  if ((v9 & 1) != 0)
  {
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v48 = v6;
    v49 = -[__CFArray countByEnumeratingWithState:objects:count:](v48, "countByEnumeratingWithState:objects:count:", &v112, v138, 16);
    if (v49)
    {
      v50 = v49;
      v51 = *(_QWORD *)v113;
      v52 = kSCEntNetIPv6;
      v90 = v48;
      v95 = *(_QWORD *)v113;
      do
      {
        v53 = 0;
        v91 = v50;
        do
        {
          if (*(_QWORD *)v113 != v51)
            objc_enumerationMutation(v48);
          v55 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)v53);
          if (objc_msgSend(v55, "containsString:", v52))
          {
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v56 = *(id *)(v14 + 48);
            v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v108, v137, 16);
            if (v57)
            {
              v58 = v57;
              v59 = *(_QWORD *)v109;
              while (2)
              {
                for (m = 0; m != v58; m = (char *)m + 1)
                {
                  if (*(_QWORD *)v109 != v59)
                    objc_enumerationMutation(v56);
                  v61 = *(_QWORD *)(*((_QWORD *)&v108 + 1) + 8 * (_QWORD)m);
                  if (objc_msgSend(v55, "containsString:", v61))
                  {
                    objc_msgSend(v96, "addObject:", v61);
                    objc_msgSend(*(id *)(v101 + 72), "setObject:forKeyedSubscript:", 0, v61);
                    v54 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v97, "objectForKeyedSubscript:", v55));
                    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", kSCPropNetIPv6Addresses));
                    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectForKeyedSubscript:", kSCPropNetIPv6Flags));
                    v64 = objc_msgSend(v62, "count");
                    if (v64 == objc_msgSend(v63, "count"))
                    {
                      v92 = v54;
                      v65 = (char *)objc_msgSend(v62, "count");
                      v99 = objc_alloc_init((Class)NSMutableArray);
                      if (v65)
                      {
                        for (n = 0; n != v65; ++n)
                        {
                          v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectAtIndexedSubscript:", n));
                          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectAtIndexedSubscript:", n));
                          v70 = objc_msgSend(v68, "unsignedIntValue");
                          if (((unsigned __int16)v70 & 0x101F) != 0)
                          {
                            v71 = v70;
                            if (qword_1001E4768 != -1)
                              dispatch_once(&qword_1001E4768, &stru_1001B7398);
                            if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
                            {
                              if (qword_1001E4768 != -1)
                                dispatch_once(&qword_1001E4768, &stru_1001B7398);
                              _NRLogWithArgs(qword_1001E4760, 1, "%s%.30s:%-4d Ignoring ipv6 address: %@ (%#x)", "", "-[NRLinkManagerWired processSCDUpdate:]", 479, v69, v71);
                            }
                          }
                          else
                          {
                            v134 = 0;
                            v133 = 0;
                            v136 = 0;
                            v135 = 0;
                            if (inet_pton(30, (const char *)objc_msgSend(v69, "UTF8String"), &v134) == 1)
                            {
                              v72 = v134 | HIDWORD(v134) | v135;
                              if (!v72 && !HIDWORD(v135)
                                || (HIDWORD(v135) == 0x1000000 ? (v73 = v72 == 0) : (v73 = 0),
                                    v73 || v134 == 255 || (v134 & 0xC0FF) == 0x80FE))
                              {
                                if (qword_1001E4768 != -1)
                                  dispatch_once(&qword_1001E4768, &stru_1001B7398);
                                if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
                                {
                                  if (qword_1001E4768 != -1)
                                    dispatch_once(&qword_1001E4768, &stru_1001B7398);
                                  _NRLogWithArgs(qword_1001E4760, 1, "%s%.30s:%-4d Ignoring ipv6 address: %@", "", "-[NRLinkManagerWired processSCDUpdate:]", 491, v69);
                                }
                              }
                              else
                              {
                                v67 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v69, CFSTR("0")));
                                objc_msgSend(v99, "addObject:", v67);

                              }
                            }
                          }

                        }
                      }
                      if (objc_msgSend(v99, "count"))
                        objc_msgSend(*(id *)(v101 + 72), "setObject:forKeyedSubscript:", v99, v61);

                      v48 = v90;
                      v50 = v91;
                      v54 = v92;
                    }
                    else
                    {
                      if (qword_1001E4768 != -1)
                        dispatch_once(&qword_1001E4768, &stru_1001B7398);
                      if (_NRLogIsLevelEnabled(qword_1001E4760, 17))
                      {
                        if (qword_1001E4768 != -1)
                          dispatch_once(&qword_1001E4768, &stru_1001B7398);
                        _NRLogWithArgs(qword_1001E4760, 17, "Mismatch between ipv6 address and flags array: %@ %@", v62, v63);
                      }
                    }

                    v51 = v95;
                    goto LABEL_83;
                  }
                }
                v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v108, v137, 16);
                if (v58)
                  continue;
                break;
              }
            }
LABEL_83:

            v52 = kSCEntNetIPv6;
            v14 = v101;
          }
          v53 = (char *)v53 + 1;
        }
        while (v53 != v50);
        v50 = -[__CFArray countByEnumeratingWithState:objects:count:](v48, "countByEnumeratingWithState:objects:count:", &v112, v138, 16);
      }
      while (v50);
    }

  }
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  obja = v96;
  v74 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v104, v132, 16);
  if (v74)
  {
    v75 = v74;
    v76 = *(_QWORD *)v105;
    do
    {
      for (ii = 0; ii != v75; ii = (char *)ii + 1)
      {
        if (*(_QWORD *)v105 != v76)
          objc_enumerationMutation(obja);
        v78 = *(_QWORD *)(*((_QWORD *)&v104 + 1) + 8 * (_QWORD)ii);
        v79 = objc_alloc_init((Class)NSMutableArray);
        v80 = (id *)v14;
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v14 + 64), "objectForKeyedSubscript:", v78));

        if (v81)
        {
          v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80[8], "objectForKeyedSubscript:", v78));
          objc_msgSend(v79, "addObjectsFromArray:", v82);

        }
        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80[9], "objectForKeyedSubscript:", v78));

        if (v83)
        {
          v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80[9], "objectForKeyedSubscript:", v78));
          objc_msgSend(v79, "addObjectsFromArray:", v84);

        }
        objc_msgSend(v80[10], "setObject:forKeyedSubscript:", v79, v78);

        v14 = (uint64_t)v80;
      }
      v75 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v104, v132, 16);
    }
    while (v75);
  }

  if (qword_1001E4768 != -1)
    dispatch_once(&qword_1001E4768, &stru_1001B7398);
  if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
  {
    if (qword_1001E4768 != -1)
      dispatch_once(&qword_1001E4768, &stru_1001B7398);
    v85 = *(_QWORD *)(v14 + 80);
    v86 = (id)qword_1001E4760;
    _NRLogWithArgs(v86, 1, "%s%.30s:%-4d local endpoint list %@", "", "-[NRLinkManagerWired processSCDUpdate:]", 521, v85);

  }
  v87 = sub_100137F48((uint64_t)NRDLocalDevice);
  if (objc_msgSend(v87, "count"))
    sub_1000C6E3C(v14, v87);
  v88 = sub_100137CA4((uint64_t)NRDLocalDevice);
  if (objc_msgSend(v88, "count"))
    sub_1000C6E3C(v14, v88);

}

uint64_t sub_1000C9AA4(uint64_t a1)
{
  uint64_t v2;
  const __SCDynamicStore *v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_13;
  v3 = *(const __SCDynamicStore **)(v2 + 56);
  if (!v3
    || (SCDynamicStoreSetDispatchQueue(v3, 0), (v2 = *(_QWORD *)(a1 + 32)) != 0)
    && ((v4 = *(const void **)(v2 + 56)) == 0
     || (CFRelease(v4), (v5 = *(_QWORD *)(a1 + 32)) != 0)
     && (*(_QWORD *)(v5 + 56) = 0, (v2 = *(_QWORD *)(a1 + 32)) != 0)))
  {
    v6 = *(void **)(v2 + 64);
  }
  else
  {
LABEL_13:
    v6 = 0;
  }
  objc_msgSend(v6, "removeAllObjects");
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = *(void **)(v7 + 72);
  else
    v8 = 0;
  objc_msgSend(v8, "removeAllObjects");
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    v10 = *(void **)(v9 + 80);
  else
    v10 = 0;
  objc_msgSend(v10, "removeAllObjects");
  return sub_1000C8584(*(_QWORD *)(a1 + 32));
}

void sub_1000C9B6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  int *v11;
  NRDWiredPeer *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  id v19;
  __CFString *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  NRDWiredPeer *v29;
  uint64_t v30;
  id v31;
  id v32;
  int IsLevelEnabled;
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  id obj;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (a1)
  {
    if (v9)
    {
      v11 = &OBJC_IVAR___NRLinkUpgradeReport__timeOfLinkUpgrade;
      v12 = (NRDWiredPeer *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "objectForKeyedSubscript:", v9));
      if (v7 && objc_msgSend(v7, "count"))
      {
        if (v8)
        {
          v35 = a1;
          v36 = v10;
          if (!v12)
            v12 = objc_alloc_init(NRDWiredPeer);
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = v7;
          obj = v7;
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v40;
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(_QWORD *)v40 != v15)
                  objc_enumerationMutation(obj);
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1)
                                                                                   + 8 * (_QWORD)i), "hostname"));
                objc_opt_self(NRIKEv2Listener);
                if (qword_1001E44D8 != -1)
                  dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
                v19 = (id)qword_1001E44D0;
                v20 = CFSTR("62743");
                if (!v19)
                  v20 = 0;
                v21 = v20;
                v22 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v18, v21));

                v23 = (void *)objc_claimAutoreleasedReturnValue(-[NRDWiredPeer interfaceToPeerAddressDictionary](v12, "interfaceToPeerAddressDictionary"));
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v8));

                if (!v24 || (objc_msgSend(v24, "containsObject:", v22) & 1) == 0)
                {
                  v25 = objc_alloc_init((Class)NSMutableArray);
                  if (objc_msgSend(v24, "count"))
                    objc_msgSend(v25, "addObjectsFromArray:", v24);
                  objc_msgSend(v25, "addObject:", v22);
                  v17 = (void *)objc_claimAutoreleasedReturnValue(-[NRDWiredPeer interfaceToPeerAddressDictionary](v12, "interfaceToPeerAddressDictionary"));
                  objc_msgSend(v17, "setObject:forKeyedSubscript:", v25, v8);

                }
              }
              v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
            }
            while (v14);
          }

          v10 = v36;
          v7 = v37;
          a1 = v35;
          v11 = &OBJC_IVAR___NRLinkUpgradeReport__timeOfLinkUpgrade;
        }
      }
      else if (v8)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(-[NRDWiredPeer interfaceToPeerAddressDictionary](v12, "interfaceToPeerAddressDictionary"));
        objc_msgSend(v26, "setObject:forKeyedSubscript:", 0, v8);

      }
      else
      {
        -[NRDWiredPeer setInterfaceToPeerAddressDictionary:](v12, "setInterfaceToPeerAddressDictionary:", 0);
      }
      v27 = (void *)objc_claimAutoreleasedReturnValue(-[NRDWiredPeer interfaceToPeerAddressDictionary](v12, "interfaceToPeerAddressDictionary"));
      v28 = objc_msgSend(v27, "count");

      if (v28)
        v29 = v12;
      else
        v29 = 0;
      objc_msgSend(*(id *)(a1 + v11[508]), "setObject:forKeyedSubscript:", v29, v10);
      if (qword_1001E4768 != -1)
        dispatch_once(&qword_1001E4768, &stru_1001B7398);
      if (_NRLogIsLevelEnabled(qword_1001E4760, 1))
      {
        if (qword_1001E4768 != -1)
          dispatch_once(&qword_1001E4768, &stru_1001B7398);
        v30 = *(_QWORD *)(a1 + v11[508]);
        v31 = (id)qword_1001E4760;
        _NRLogWithArgs(v31, 1, "%s%.30s:%-4d updated peer endpoint state %@", "", "-[NRLinkManagerWired setPeerEndpoints:interfaceName:nrUUID:]", 357, v30);

      }
      sub_1000C9F88(a1);

    }
    else
    {
      v32 = sub_1000C5B5C();
      IsLevelEnabled = _NRLogIsLevelEnabled(v32, 17);

      if (IsLevelEnabled)
      {
        v34 = sub_1000C5B5C();
        _NRLogWithArgs(v34, 17, "%s called with null nrUUID", "-[NRLinkManagerWired setPeerEndpoints:interfaceName:nrUUID:]");

      }
    }
  }

}

void sub_1000C9F88(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = objc_alloc_init((Class)NSMutableSet);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "allValues", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "interfaceToPeerAddressDictionary"));
        v10 = objc_msgSend(v9, "count");

        if (v10)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "interfaceToPeerAddressDictionary"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "allKeys"));
          objc_msgSend(v2, "addObjectsFromArray:", v12);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

  if ((objc_msgSend(*(id *)(a1 + 48), "isEqualToSet:", v2) & 1) != 0)
  {
    v13 = sub_100137F48((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v13, "count"))
      sub_1000C6E3C(a1, v13);
    v14 = sub_100137CA4((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v14, "count"))
      sub_1000C6E3C(a1, v14);

  }
  else
  {
    objc_storeStrong((id *)(a1 + 48), v2);
    sub_1000C8584(a1);
  }

}

id sub_1000CA734()
{
  if (qword_1001E4778 != -1)
    dispatch_once(&qword_1001E4778, &stru_1001B73B8);
  return (id)qword_1001E4770;
}

void sub_1000CA774(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4770;
  qword_1001E4770 = (uint64_t)v1;

}

void sub_1000D1DFC(uint64_t a1, void *a2)
{
  unsigned int v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  nw_endpoint_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  int IsLevelEnabled;
  char *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  char *v33;
  id v34;

  v34 = a2;
  v3 = objc_msgSend(*(id *)(a1 + 128), "ikeClassDEstablished");
  v4 = v34;
  if (v3)
  {
    v5 = *(_QWORD **)(a1 + 632);
    if (v5)
      v5 = (_QWORD *)v5[4];
    v6 = v5;
    v7 = objc_msgSend(v6, "containsObject:", v34);

    v4 = v34;
    if (v7)
    {
      v8 = *(nw_endpoint_t *)(a1 + 632);
      v9 = v34;
      if (v8)
      {
        if (BYTE1(v8[1].isa))
        {
          v8 = 0;
        }
        else
        {
          objc_opt_self(NRApplicationServiceManager);
          if (qword_1001E47D8 != -1)
            dispatch_once(&qword_1001E47D8, &stru_1001B7770);
          v8 = sub_1000F6BA0(qword_1001E47D0, v9);
        }
      }

      v10 = *(_QWORD *)(a1 + 632);
      v11 = v9;
      if (!v10 || *(_BYTE *)(v10 + 9))
      {
        v12 = 0;
        goto LABEL_30;
      }
      objc_opt_self(NRApplicationServiceManager);
      if (qword_1001E47D8 != -1)
        dispatch_once(&qword_1001E47D8, &stru_1001B7770);
      v12 = (id *)qword_1001E47D0;
      v13 = v11;
      v14 = v13;
      if (v12)
      {
        if (v13)
        {
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12[3], "objectForKeyedSubscript:", v13));
          v16 = (id)v15;
          if (v15)
          {
            v12 = (id *)sub_1000F4274(*(void **)(v15 + 40));
LABEL_23:

            goto LABEL_24;
          }
LABEL_22:
          v12 = 0;
          goto LABEL_23;
        }
        v17 = sub_1000F4234();
        IsLevelEnabled = _NRLogIsLevelEnabled(v17, 17);

        if (IsLevelEnabled)
        {
          v16 = sub_1000F4234();
          _NRLogWithArgs(v16, 17, "%s called with null asName", "-[NRApplicationServiceManager copyListenerPublicKeyForASName:]");
          goto LABEL_22;
        }
        v12 = 0;
      }
LABEL_24:

      if (!v8 || !v12)
        goto LABEL_31;
      v11 = (id)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", v8));
      v19 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "port"));
      v33 = v19;
      v21 = sub_1001331E8(v19, v20);

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "port"));
      v32 = v21;
      v23 = sub_10010A268(v21, (unsigned __int16)objc_msgSend(v22, "intValue"), 0);
      v24 = objc_claimAutoreleasedReturnValue(v23);

      v25 = objc_alloc_init((Class)NSMutableData);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dataUsingEncoding:", 4));
      NRTLVAddData(v25, 5);
      NRTLVAddData(v25, 7);
      v31 = (void *)v24;
      NRTLVAddData(v25, 2);
      v27 = objc_alloc_init((Class)NSMutableData);
      NRTLVAddData(v27, 6);
      v28 = sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
      sub_1000231F8((uint64_t)v28, 21, v27);
      sub_100024728((uint64_t)v28);
      v29 = *(_QWORD *)(a1 + 632);
      v30 = v14;
      if (v29 && !*(_BYTE *)(v29 + 9))
        objc_msgSend(*(id *)(v29 + 32), "removeObject:", v30);

LABEL_30:
LABEL_31:

      v4 = v34;
    }
  }

}

void sub_1000D2168(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  void *v25;
  int v26;
  id v27;
  uint64_t v28;
  void *application_service;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *i;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *j;
  uint64_t v55;
  uint64_t v56;
  void (**v57)(id, _QWORD);
  uint64_t v58;
  void *v59;
  int v60;
  id v61;
  id v62;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  id v67;
  int IsLevelEnabled;
  id v69;
  int v70;
  _QWORD *v71;
  _QWORD *v72;
  id v73;
  _QWORD *v74;
  id v75;
  id v76;
  uint64_t v77;
  void *k;
  id v79;
  _QWORD *v80;
  void *v81;
  id v82;
  uint64_t v83;
  void *v84;
  unsigned int v85;
  void *v86;
  int v87;
  id v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  id v97;
  id v98;
  void *v99;
  int v100;
  id v101;
  uint64_t v102;
  void *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  int v108;
  uint64_t v109;
  void *v110;
  id v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *m;
  _QWORD *v116;
  _QWORD *v117;
  id v118;
  _QWORD *v119;
  _QWORD *v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  void *n;
  int v126;
  id v127;
  id v128;
  _QWORD *v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  uint64_t v135;
  id obj;
  _QWORD *obja;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[128];
  _BYTE v155[128];
  _BYTE v156[128];
  _QWORD v157[2];
  _BYTE v158[128];

  if (*(_QWORD *)(a1 + 632))
  {
    v5 = a1;
    v6 = *(void **)(a1 + 640);
    if (!v6)
    {
      v7 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v8 = *(void **)(v5 + 640);
      *(_QWORD *)(v5 + 640) = v7;

      v6 = *(void **)(v5 + 640);
    }
    v157[0] = 0;
    v157[1] = 0;
    objc_msgSend(v6, "getUUIDBytes:", v157);
    v9 = *(_QWORD **)(v5 + 632);
    if (v9)
      v9 = (_QWORD *)v9[2];
    v10 = v9;
    v11 = objc_msgSend(v10, "count");

    v135 = v5;
    if (v11 && a2)
    {
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v12 = *(_QWORD **)(v5 + 632);
      v126 = a3;
      if (v12)
        v12 = (_QWORD *)v12[2];
      v13 = v12;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v146, v156, 16);
      if (v14)
      {
        v15 = v14;
        obj = *(id *)v147;
        v129 = v13;
        do
        {
          v16 = 0;
          v134 = v15;
          do
          {
            if (*(id *)v147 != obj)
              objc_enumerationMutation(v13);
            if (*(_BYTE *)(v5 + 48))
            {
              v20 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * (_QWORD)v16);
              if (!sub_1000F7070(*(_QWORD *)(v5 + 632), v20)
                || (v21 = *(id *)(v5 + 128)) != 0
                && (v23 = v21, v24 = objc_msgSend(*(id *)(v5 + 128), "type"), v23, v24 != 4))
              {
                application_service = (void *)nw_endpoint_create_application_service(objc_msgSend(v20, "UTF8String"), v157);
                sub_1000D2DA0(v5, application_service);
                v30 = objc_msgSend(*(id *)(v5 + 128), "ikeClassDEstablished");
                v31 = *(_QWORD *)(v5 + 632);
                v19 = v20;
                v17 = application_service;
                if (v30)
                {
                  if (v31 && !*(_BYTE *)(v31 + 9))
                  {
                    objc_opt_self(NRApplicationServiceManager);
                    if (qword_1001E47D8 != -1)
                      dispatch_once(&qword_1001E47D8, &stru_1001B7770);
                    v32 = qword_1001E47D0;
                    v18 = v19;
                    v33 = v17;
                    v34 = v33;
                    if (v32)
                    {
                      v132 = v19;
                      if (v33)
                      {
                        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v32 + 8));
                        v35 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 32), "objectForKeyedSubscript:", v18));
                        if (objc_msgSend(v35, "count"))
                        {
                          v127 = v18;
                          v130 = v17;
                          v152 = 0u;
                          v153 = 0u;
                          v150 = 0u;
                          v151 = 0u;
                          v35 = v35;
                          v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v150, v158, 16);
                          if (v36)
                          {
                            v37 = v36;
                            v38 = *(_QWORD *)v151;
                            do
                            {
                              for (i = 0; i != v37; i = (char *)i + 1)
                              {
                                if (*(_QWORD *)v151 != v38)
                                  objc_enumerationMutation(v35);
                                v40 = *(_QWORD *)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)i);
                                if (v40)
                                {
                                  v41 = *(_QWORD *)(v40 + 56);
                                  if (!v41)
                                  {
                                    v42 = (void *)nw_array_create();
                                    objc_storeStrong((id *)(v40 + 56), v42);

                                    v41 = *(_QWORD *)(v40 + 56);
                                  }
                                  nw_array_append(v41, v34);
                                  v43 = *(id *)(v40 + 48);
                                  v44 = (uint64_t)v43 + 16;
                                  v45 = *(_QWORD *)(v40 + 56);
                                }
                                else
                                {

                                  nw_array_append(0, v34);
                                  v43 = 0;
                                  v45 = 0;
                                  v44 = 16;
                                }
                                (*(void (**)(id, uint64_t))v44)(v43, v45);

                              }
                              v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v150, v158, 16);
                            }
                            while (v37);
                          }

                          v5 = v135;
                          v17 = v130;
                          v18 = v127;
                        }
LABEL_15:

                        v19 = v132;
                      }
                      else
                      {
                        v67 = sub_1000F4234();
                        IsLevelEnabled = _NRLogIsLevelEnabled(v67, 17);

                        v19 = v132;
                        if (IsLevelEnabled)
                        {
                          v35 = sub_1000F4234();
                          _NRLogWithArgs(v35, 17, "%s called with null endpoint", "-[NRApplicationServiceManager reportBrowseResultAddedForASName:endpoint:]");
                          goto LABEL_15;
                        }
                      }
                    }

                    v13 = v129;
                  }

                  v15 = v134;
LABEL_18:

                  goto LABEL_19;
                }
                if (v31 && !*(_BYTE *)(v31 + 9))
                {
                  objc_opt_self(NRApplicationServiceManager);
                  if (qword_1001E47D8 != -1)
                    dispatch_once(&qword_1001E47D8, &stru_1001B7770);
                  v46 = qword_1001E47D0;
                  v133 = v19;
                  v47 = v19;
                  v48 = v17;
                  v49 = v48;
                  if (v46)
                  {
                    if (v48)
                    {
                      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v46 + 8));
                      v50 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v46 + 32), "objectForKeyedSubscript:", v47));
                      if (objc_msgSend(v50, "count"))
                      {
                        v128 = v47;
                        v131 = v17;
                        v152 = 0u;
                        v153 = 0u;
                        v150 = 0u;
                        v151 = 0u;
                        v50 = v50;
                        v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v150, v158, 16);
                        if (v51)
                        {
                          v52 = v51;
                          v53 = *(_QWORD *)v151;
                          do
                          {
                            for (j = 0; j != v52; j = (char *)j + 1)
                            {
                              if (*(_QWORD *)v151 != v53)
                                objc_enumerationMutation(v50);
                              v55 = *(_QWORD *)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)j);
                              if (v55)
                              {
                                v56 = *(_QWORD *)(v55 + 56);
                                if (v56)
                                {
                                  nw_array_remove_object(v56, v49);
                                  v57 = (void (**)(id, _QWORD))*(id *)(v55 + 48);
                                  v57[2](v57, *(_QWORD *)(v55 + 56));

                                }
                              }
                            }
                            v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v150, v158, 16);
                          }
                          while (v52);
                        }

                        v5 = v135;
                        v17 = v131;
                        v47 = v128;
                      }
LABEL_67:

                    }
                    else
                    {
                      v69 = sub_1000F4234();
                      v70 = _NRLogIsLevelEnabled(v69, 17);

                      if (v70)
                      {
                        v50 = sub_1000F4234();
                        _NRLogWithArgs(v50, 17, "%s called with null endpoint", "-[NRApplicationServiceManager reportBrowseResultRemovedForASName:endpoint:]");
                        goto LABEL_67;
                      }
                    }
                  }

                  v13 = v129;
                  v19 = v133;
                }

                v59 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v5 + 96), v58);
                v60 = _NRLogIsLevelEnabled(v59, 0);

                v15 = v134;
                if (v60)
                {
                  v61 = v17;
                  v62 = *(id *)(v5 + 96);
                  v64 = (void *)_NRCopyLogObjectForNRUUID(v62, v63);
                  v65 = *(_QWORD **)(v5 + 632);
                  if (v65)
                    v65 = (_QWORD *)v65[2];
                  v66 = v65;
                  _NRLogWithArgs(v64, 0, "%s%.30s:%-4d starting QR link for ongoing AS browse operations %@", "", "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]", 8319, v66);

                  v17 = v61;
                }
                if (!*(_BYTE *)(v5 + 70))
                {
                  *(_BYTE *)(v5 + 70) = 1;
                  objc_msgSend(*(id *)(v5 + 192), "assertAgentWithOptions:", 0);
                }
                goto LABEL_18;
              }
              v25 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v5 + 96), v22);
              v26 = _NRLogIsLevelEnabled(v25, 0);

              if (v26)
              {
                v27 = *(id *)(v5 + 96);
                v17 = (id)_NRCopyLogObjectForNRUUID(v27, v28);
                _NRLogWithArgs(v17, 0, "%s%.30s:%-4d not using QR link for ASName %@", "", "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]", 8309, v20);

                goto LABEL_18;
              }
            }
LABEL_19:
            v16 = (char *)v16 + 1;
          }
          while (v16 != v15);
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v146, v156, 16);
        }
        while (v15);
      }

      a3 = v126;
    }
    v71 = *(_QWORD **)(v5 + 632);
    if (v71)
      v71 = (_QWORD *)v71[3];
    v72 = v71;
    v73 = objc_msgSend(v72, "count");

    if (v73 && a3)
    {
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v74 = *(_QWORD **)(v5 + 632);
      if (v74)
        v74 = (_QWORD *)v74[3];
      obja = v74;
      v75 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v142, v155, 16);
      if (v75)
      {
        v76 = v75;
        v77 = *(_QWORD *)v143;
        do
        {
          for (k = 0; k != v76; k = (char *)k + 1)
          {
            if (*(_QWORD *)v143 != v77)
              objc_enumerationMutation(obja);
            v81 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * (_QWORD)k);
            if (sub_1000F7070(*(_QWORD *)(v5 + 632), v81)
              && ((v82 = *(id *)(v5 + 128)) == 0
               || (v84 = v82, v85 = objc_msgSend(*(id *)(v5 + 128), "type"), v84, v85 == 4)))
            {
              v86 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v5 + 96), v83);
              v87 = _NRLogIsLevelEnabled(v86, 0);

              if (v87)
              {
                v88 = *(id *)(v5 + 96);
                v90 = (void *)_NRCopyLogObjectForNRUUID(v88, v89);
                _NRLogWithArgs(v90, 0, "%s%.30s:%-4d not using QR link for ASName %@", "", "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]", 8335, v81);

              }
            }
            else if (objc_msgSend(*(id *)(v5 + 128), "ikeClassDEstablished"))
            {
              v92 = v81;
              v93 = v5;
              v94 = objc_alloc_init((Class)NSMutableData);
              v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "dataUsingEncoding:", 4));
              v96 = *(_QWORD *)(v93 + 632);
              v97 = v92;
              if (v96 && !*(_BYTE *)(v96 + 9))
              {
                objc_opt_self(NRApplicationServiceManager);
                if (qword_1001E47D8 != -1)
                  dispatch_once(&qword_1001E47D8, &stru_1001B7770);
                v98 = sub_1000F4064(qword_1001E47D0, v97);
              }
              else
              {
                v98 = 0;
              }

              if (!objc_msgSend(v98, "count"))
              {
                v107 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v135 + 96), v106);
                v108 = _NRLogIsLevelEnabled(v107, 16);

                if (v108)
                {
                  v110 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v135 + 96), v109);
                  _NRLogWithArgs(v110, 16, "%s%.30s:%-4d no public keys", "", "-[NRDDeviceConductor sendResolveRequestForASName:]", 8420);

                }
              }
              NRTLVAddData(v94, 5);
              v152 = 0u;
              v153 = 0u;
              v150 = 0u;
              v151 = 0u;
              v111 = v98;
              v112 = (char *)objc_msgSend(v111, "countByEnumeratingWithState:objects:count:", &v150, v158, 16);
              if (v112)
              {
                v113 = v112;
                v114 = *(_QWORD *)v151;
                do
                {
                  for (m = 0; m != v113; ++m)
                  {
                    if (*(_QWORD *)v151 != v114)
                      objc_enumerationMutation(v111);
                    NRTLVAddData(v94, 7);
                  }
                  v113 = (char *)objc_msgSend(v111, "countByEnumeratingWithState:objects:count:", &v150, v158, 16);
                }
                while (v113);
              }

              v79 = objc_alloc_init((Class)NSMutableData);
              NRTLVAddData(v79, 6);
              v80 = sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(v135 + 96));
              sub_1000231F8((uint64_t)v80, 20, v79);
              sub_100024728((uint64_t)v80);

              v5 = v135;
            }
            else
            {
              v99 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v5 + 96), v91);
              v100 = _NRLogIsLevelEnabled(v99, 0);

              if (v100)
              {
                v101 = *(id *)(v5 + 96);
                v103 = (void *)_NRCopyLogObjectForNRUUID(v101, v102);
                v104 = *(_QWORD **)(v5 + 632);
                if (v104)
                  v104 = (_QWORD *)v104[3];
                v105 = v104;
                _NRLogWithArgs(v103, 0, "%s%.30s:%-4d starting QR link for ongoing AS resolve operations %@", "", "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]", 8341, v105);

              }
              if (!*(_BYTE *)(v5 + 71))
              {
                *(_BYTE *)(v5 + 71) = 1;
                objc_msgSend(*(id *)(v5 + 192), "assertAgentWithOptions:", 0);
              }
            }
          }
          v76 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v142, v155, 16);
        }
        while (v76);
      }

    }
    v116 = *(_QWORD **)(v5 + 632);
    if (v116)
      v116 = (_QWORD *)v116[4];
    v117 = v116;
    v118 = objc_msgSend(v117, "count");

    if (v118 && objc_msgSend(*(id *)(v5 + 128), "ikeClassDEstablished"))
    {
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      v119 = *(_QWORD **)(v5 + 632);
      if (v119)
        v119 = (_QWORD *)v119[4];
      v120 = v119;
      v121 = objc_msgSend(v120, "copy");

      v122 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v138, v154, 16);
      if (v122)
      {
        v123 = v122;
        v124 = *(_QWORD *)v139;
        do
        {
          for (n = 0; n != v123; n = (char *)n + 1)
          {
            if (*(_QWORD *)v139 != v124)
              objc_enumerationMutation(v121);
            sub_1000D1DFC(v5, *(void **)(*((_QWORD *)&v138 + 1) + 8 * (_QWORD)n));
          }
          v123 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v138, v154, 16);
        }
        while (v123);
      }

    }
  }
}

void sub_1000D2DA0(uint64_t a1, void *a2)
{
  NSObject *v3;
  char *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *StringFromNRDeviceEndpointType;
  void *v10;
  id v11;
  void *v12;
  id v13;
  NSObject *endpoint;

  v3 = a2;
  if (!a1)
    goto LABEL_19;
  endpoint = v3;
  v4 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (nw_endpoint_get_type(endpoint) == (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    if (v4)
      v5 = (void *)*((_QWORD *)v4 + 14);
    else
      v5 = 0;
    v6 = v5;

    if (v6)
    {
      if (v4)
        v7 = (void *)*((_QWORD *)v4 + 14);
      else
        v7 = 0;
      v8 = v7;
      nw_endpoint_set_device_name(endpoint, objc_msgSend(v8, "UTF8String"));

    }
    if (v4)
    {
      if (v4[18])
      {
        StringFromNRDeviceEndpointType = (void *)createStringFromNRDeviceEndpointType(v4[18]);
        nw_endpoint_set_device_model(endpoint, objc_msgSend(StringFromNRDeviceEndpointType, "UTF8String"));

      }
      goto LABEL_13;
    }
LABEL_20:
    v10 = 0;
    goto LABEL_14;
  }
  if (!v4)
    goto LABEL_20;
LABEL_13:
  v10 = (void *)*((_QWORD *)v4 + 6);
LABEL_14:
  v11 = v10;

  if (v11)
  {
    if (v4)
      v12 = (void *)*((_QWORD *)v4 + 6);
    else
      v12 = 0;
    v13 = v12;
    nw_endpoint_set_device_id(endpoint, objc_msgSend(v13, "UTF8String"));

  }
  v3 = endpoint;
LABEL_19:

}

void sub_1000D2EC0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  unsigned int v17;
  void *v18;
  id v19;
  id *v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  if (*(_BYTE *)(a1 + 10))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v2 = (id)qword_1001E4708;
    v3 = v2;
    if (v2)
      v4 = (void *)*((_QWORD *)v2 + 6);
    else
      v4 = 0;
    v5 = v4;

    if (v5)
      v6 = (void *)v5[8];
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      v8 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      v9 = v8;
      if (v8)
      {
        v10 = *((id *)v8 + 16);

        if (v10)
        {
          if (!v9[13])
          {
            v11 = *(id *)(a1 + 96);
            objc_opt_self(NRDLocalDevice);
            v12 = sub_10013D10C((uint64_t)NRDLocalDevice, v11, &off_1001C4990);

            if (v12)
            {
              if (sub_1000D5DBC(a1) == 2 && objc_msgSend(v12, "addressFamily") == (id)30)
              {
                v21 = 0uLL;
                v23 = 0;
                v22 = 0;
                sub_1001340AC((uint64_t)NRDLocalDevice, &v21, v12);
                if (BYTE8(v21) == 254 && (BYTE9(v21) & 0xC0) == 0x80)
                {
                  v13 = sub_1000D4DBC(a1);
                  v14 = (_QWORD *)objc_claimAutoreleasedReturnValue(v13);
                  if (v14)
                  {
                    v15 = v14[14];
                    if (v15)
                      LODWORD(v15) = *(_DWORD *)(v15 + 12);
                  }
                  else
                  {
                    LODWORD(v15) = 0;
                  }
                  v23 = v15;

                }
                if (!WORD1(v21))
                {
                  v16 = sub_10000F084();
                  if (v16)
                    v17 = -2793;
                  else
                    v17 = 0;
                  WORD1(v21) = bswap32(v17) >> 16;

                }
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithAddress:](NWAddressEndpoint, "endpointWithAddress:", &v21));
                v19 = sub_1000D4DBC(a1);
                v20 = (id *)objc_claimAutoreleasedReturnValue(v19);
                sub_1001472F4(v20, v18, *(void **)(a1 + 96));

              }
            }
            else
            {
              sub_1000D56B8(a1, 2u, 102);
            }

          }
        }
      }

    }
  }
}

void sub_1000D3114(uint64_t a1, uint64_t a2)
{
  NRLinkDirectorRequest *v3;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  NRLinkDirectorRequest *v7;

  if (a1 && *(_BYTE *)(a1 + 14) && *(_BYTE *)(a1 + 10))
  {
    if (!*(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 52))
    {
      v3 = objc_alloc_init(NRLinkDirectorRequest);
      if (v3)
      {
        v3->_type = 11;
        v3->_requiredLinkType = 1;
        *(_WORD *)&v3->_attemptImmediately = 257;
      }
      v7 = v3;
      sub_1000D320C(a1, v3);
      goto LABEL_9;
    }
    v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 0);

    if (IsLevelEnabled)
    {
      v7 = (NRLinkDirectorRequest *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
      _NRLogWithArgs(v7, 0, "%s%.30s:%-4d Deferring sending AWDL address update to when we need it", "", "-[NRDDeviceConductor sendAWDLEndpoint]", 7104);
LABEL_9:

    }
  }
}

void sub_1000D320C(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int IsLevelEnabled;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  int v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v4 = *(void **)(a1 + 120);
    if (!v4)
    {
      v5 = objc_alloc_init((Class)NSMutableArray);
      v6 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v5;

      v4 = *(void **)(a1 + 120);
    }
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v7 = v4;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = *(_QWORD *)v30;
LABEL_6:
      v12 = 0;
      while (1)
      {
        v13 = v10;
        if (*(_QWORD *)v30 != v11)
          objc_enumerationMutation(v7);
        v10 = (unsigned __int8 *)*(id *)(*((_QWORD *)&v29 + 1) + 8 * v12);

        if (!v10)
          break;
        v14 = v10[10];
        if (v3)
          goto LABEL_13;
        if (!v10[10])
          goto LABEL_22;
LABEL_8:
        if (v9 == (id)++v12)
        {
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
          if (v9)
            goto LABEL_6;

          goto LABEL_20;
        }
      }
      if (!v3)
      {
        v10 = 0;
LABEL_22:

        v17 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v16);
        IsLevelEnabled = _NRLogIsLevelEnabled(v17, 1);

        if (IsLevelEnabled)
        {
          v19 = *(id *)(a1 + 96);
          v21 = (void *)_NRCopyLogObjectForNRUUID(v19, v20);
          _NRLogWithArgs(v21, 1, "%s%.30s:%-4d Removing existing request: %@", "", "-[NRDDeviceConductor addRequest:]", 2635, v10, (_QWORD)v29);

        }
        objc_msgSend(*(id *)(a1 + 120), "removeObject:", v10);
        goto LABEL_25;
      }
      v14 = 0;
LABEL_13:
      if (v14 == v3[10] && v14 != 6)
        goto LABEL_22;
      goto LABEL_8;
    }
LABEL_20:

    v10 = 0;
LABEL_25:
    if (!v3)
      goto LABEL_31;
    if (v3[13])
    {
      sub_1000D3508(a1, v3);
      if (!v3[12])
      {
        v22 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v15);
        v23 = _NRLogIsLevelEnabled(v22, 1);

        if (v23)
        {
          v24 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v15);
          _NRLogWithArgs(v24, 1, "%s%.30s:%-4d Could not immediately complete request %@", "", "-[NRDDeviceConductor addRequest:]", 2642, v3);

        }
      }
    }
    if (!v3[12])
    {
LABEL_31:
      v25 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v15);
      v26 = _NRLogIsLevelEnabled(v25, 1);

      if (v26)
      {
        v28 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v27);
        _NRLogWithArgs(v28, 1, "%s%.30s:%-4d Adding new request: %@", "", "-[NRDDeviceConductor addRequest:]", 2647, v3);

      }
      objc_msgSend(*(id *)(a1 + 120), "addObject:", v3);
    }

  }
}

void sub_1000D3508(uint64_t a1, void *a2)
{
  id *v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  __CFString *v10;
  void *v11;
  __objc2_prot *IsLevelEnabled;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  __objc2_prot *i;
  id *v20;
  void *v21;
  id *v22;
  void *v23;
  _BOOL4 v24;
  uint64_t v25;
  id *v26;
  int v27;
  int v28;
  uint64_t v29;
  id *v30;
  id *v31;
  id v32;
  id *v33;
  id *v34;
  id v35;
  id v36;
  _BOOL4 v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  __objc2_class *v43;
  __objc2_prot *v44;
  id *v45;
  _QWORD *v46;
  _QWORD *v47;
  id v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  NRLinkDirectorMessage *v54;
  id *v55;
  id *v56;
  id v57;
  void *v58;
  unsigned int v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  BOOL v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  const char *v82;
  id *v83;
  id *v84;
  const char *v85;
  id v86;
  unsigned __int8 *v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  int v92;
  id v93;
  id *v94;
  id v95;
  id v96;
  _BOOL4 v97;
  NSObject *v98;
  dispatch_time_t v99;
  id *v100;
  id v101;
  BOOL v102;
  uint64_t v103;
  void *v104;
  int v105;
  uint64_t v106;
  void *v107;
  NSObject *v108;
  id *v109;
  id v110;
  void (**v111)(void);
  void *v112;
  int v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  void *v117;
  unsigned int v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  const char *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  __objc2_prot *k;
  void *v138;
  id v139;
  void *v140;
  void *v141;
  _QWORD *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  int v150;
  uint64_t v151;
  void *v152;
  void *v153;
  int v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  void *v158;
  void *v159;
  id v160;
  BOOL v161;
  void *v162;
  int v163;
  uint64_t v164;
  void *v165;
  id v166;
  id v167;
  id v168;
  id v169;
  uint64_t v170;
  void *j;
  void *v172;
  BOOL v173;
  uint64_t ShortStringFromNRLinkSubtype;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  const char *v189;
  _BOOL8 v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  void *v198;
  int v199;
  uint64_t v200;
  void *v201;
  id v202;
  int v203;
  void (**v204)(void);
  id v205;
  int v206;
  id v207;
  int *v208;
  uint64_t v209;
  id v210;
  id v211;
  uint64_t v212;
  char *v213;
  __objc2_prot *v214;
  id *v215;
  uint64_t v216;
  id *v217;
  _QWORD v218[5];
  id v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  BOOL v232;
  id v233[2];
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  _BYTE v246[128];
  _BYTE v247[128];
  _BYTE v248[128];
  _BYTE v249[128];
  _BYTE v250[128];
  _BYTE v251[128];

  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (!v3
    || (v4 = *((unsigned __int8 *)v3 + 11), !*((_BYTE *)v3 + 11))
    || (*((_BYTE *)v3 + 10) & 0xFE) == 6 && v3[4]
    || !sub_1000D4C80(a1, v4))
  {
    v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
    IsLevelEnabled = (__objc2_prot *)_NRLogIsLevelEnabled(v11, 1);

    if ((_DWORD)IsLevelEnabled)
    {
      v14 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v13);
      _NRLogWithArgs(v14, 1, "%s%.30s:%-4d Processing request %@", "", "-[NRDDeviceConductor processRequest:]", 2718, v3);

    }
    if (v3)
      v15 = v3[2];
    else
      v15 = 0;
    v16 = v15;

    v216 = a1;
    v217 = v3;
    if (v16)
    {
      v244 = 0u;
      v245 = 0u;
      v242 = 0u;
      v243 = 0u;
      v17 = *(id *)(a1 + 112);
      IsLevelEnabled = (__objc2_prot *)objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v242, v251, 16);
      if (IsLevelEnabled)
      {
        v18 = *(_QWORD *)v243;
        do
        {
          for (i = 0; i != IsLevelEnabled; i = (__objc2_prot *)((char *)i + 1))
          {
            if (*(_QWORD *)v243 != v18)
              objc_enumerationMutation(v17);
            v20 = v217;
            if (v217)
              v20 = (id *)v217[2];
            v21 = *(void **)(*((_QWORD *)&v242 + 1) + 8 * (_QWORD)i);
            v22 = v20;
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", objc_msgSend(v21, "type")));
            if (objc_msgSend(v22, "containsObject:", v23))
            {
              v24 = objc_msgSend(v21, "state") == 8;

              if (v24)
              {
                v214 = v21;
                goto LABEL_32;
              }
            }
            else
            {

            }
          }
          IsLevelEnabled = (__objc2_prot *)objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v242, v251, 16);
        }
        while (IsLevelEnabled);
      }
      v214 = 0;
LABEL_32:

      a1 = v216;
      v3 = v217;
      goto LABEL_33;
    }
    if (v3)
    {
      if (*((_BYTE *)v3 + 9))
      {
        if (objc_msgSend(*(id *)(a1 + 128), "type") == *((unsigned __int8 *)v3 + 9))
          v214 = (__objc2_prot *)*(id *)(a1 + 128);
        else
          v214 = 0;
        goto LABEL_33;
      }
      if (*((_BYTE *)v3 + 8))
      {
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        v38 = *(id *)(a1 + 112);
        IsLevelEnabled = (__objc2_prot *)objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v238, v250, 16);
        if (!IsLevelEnabled)
          goto LABEL_68;
        v39 = *(_QWORD *)v239;
LABEL_58:
        v40 = 0;
        while (1)
        {
          if (*(_QWORD *)v239 != v39)
            objc_enumerationMutation(v38);
          v41 = *(void **)(*((_QWORD *)&v238 + 1) + 8 * v40);
          if (objc_msgSend(v41, "type") == *((unsigned __int8 *)v217 + 8)
            && (objc_msgSend(v41, "state") == 8
             || *((_BYTE *)v217 + 14) && objc_msgSend(v41, "state") == 9))
          {
            break;
          }
          if (IsLevelEnabled == (__objc2_prot *)++v40)
          {
            IsLevelEnabled = (__objc2_prot *)objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v238, v250, 16);
            if (!IsLevelEnabled)
            {
LABEL_68:

              a1 = v216;
              goto LABEL_139;
            }
            goto LABEL_58;
          }
        }
        v214 = v41;

        a1 = v216;
        v3 = v217;
        if (v214)
        {
LABEL_33:
          v213 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
          v26 = v217;
          if (v3)
          {
            v27 = *((unsigned __int8 *)v217 + 10);
            switch(*((_BYTE *)v217 + 10))
            {
              case 0:
                goto LABEL_265;
              case 1:
                v29 = v216;
                if (!*(_BYTE *)(v216 + 44))
                  goto LABEL_137;
                v43 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
                objc_opt_self(NRLinkDirector);
                v44 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                if (qword_1001E4710 != -1)
                  dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                IsLevelEnabled = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                v45 = (id *)(id)qword_1001E4708;
                v26 = v45;
                if (!v45)
                  goto LABEL_268;
                v46 = v45[6];
                if (v46)
                  v46 = (_QWORD *)v46[7];
                v47 = v46;
                goto LABEL_78;
              case 2:
              case 3:
                v212 = *((unsigned __int8 *)v217 + 10);
                v30 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(v216 + 96));
                v215 = v30;
                v31 = v30;
                if (v30)
                {
                  objc_storeStrong(v30 + 3, v214);
                  v31 = v215;
                }
                if (!v213 || *((unsigned __int16 *)v213 + 14) <= 0x11u)
                {
                  if (v31)
                  {
                    LOBYTE(v233[0]) = (_DWORD)v212 == 2;
                    v32 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v233, 1);
                    sub_1000231F8((uint64_t)v215, 5, v32);

                  }
LABEL_240:
                  v188 = sub_100024728((uint64_t)v215);
                  if (v188)
                  {
                    *((_BYTE *)v217 + 12) = 1;
                    v189 = "Successfully sent";
                  }
                  else
                  {
                    v189 = "Failed to send";
                  }
                  v190 = (_DWORD)v212 == 2;
                  if ((_DWORD)v212 == 2)
                    v191 = v188;
                  else
                    v191 = 0;
                  *(_BYTE *)(v216 + 16) = v191;
                  v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v190, v212));
                  sub_1000D5060(v216, 1008, CFSTR("%s prefer Wi-Fi request %@"), v192, v193, v194, v195, v196, (uint64_t)v189);
LABEL_247:

LABEL_248:
                  v28 = 1;
LABEL_249:
                  v29 = v216;
                  v26 = v217;
LABEL_250:
                  v197 = *((_BYTE *)v26 + 12) == 0;
                  v198 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v29 + 96), v25);
                  v199 = _NRLogIsLevelEnabled(v198, 1);

                  if (v197)
                  {
                    if (!v199)
                    {
LABEL_261:

                      goto LABEL_262;
                    }
                    v204 = (void (**)(void))_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v200);
                    _NRLogWithArgs(v204, 1, "%s%.30s:%-4d Could not complete request %@", "", "-[NRDDeviceConductor processRequest:]", 3039, v217);
                  }
                  else
                  {
                    if (v199)
                    {
                      v201 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v200);
                      _NRLogWithArgs(v201, 1, "%s%.30s:%-4d Completed request %@", "", "-[NRDDeviceConductor processRequest:]", 3034, v217);

                    }
                    v202 = v217[6];
                    if (v202)
                      v203 = v28;
                    else
                      v203 = 0;

                    if (!v203)
                      goto LABEL_261;
                    v204 = (void (**)(void))v217[6];
                    v204[2]();
                  }

                  goto LABEL_261;
                }
                memset(v233, 0, 9);
                *(_DWORD *)((char *)v233 + 1) = bswap32(arc4random_uniform(0xFFFFFFFF));
                if ((_DWORD)v212 != 2)
                {
                  v86 = 0;
                  goto LABEL_213;
                }
                LOBYTE(v233[0]) = 1;
                v86 = objc_alloc_init((Class)NSMutableArray);
                v232 = 0;
                v87 = (unsigned __int8 *)v216;
                if (*(_BYTE *)(v216 + 10))
                {
                  v88 = sub_1000A315C((uint64_t)NRLinkDirector);
                  v89 = v88;
                  if (v88)
                    v90 = (void *)*((_QWORD *)v88 + 12);
                  else
                    v90 = 0;
                  v91 = v90;
                  *(_BYTE *)(v216 + 53) = sub_100061594((uint64_t)v91, &v232);

                  v87 = (unsigned __int8 *)v216;
                }
                if (!v87[53])
                  goto LABEL_206;
                v92 = v87[10];
                if (!v87[10] && !v87[50])
                  goto LABEL_120;
                if (!v87[50])
                  goto LABEL_201;
                objc_msgSend(v86, "addObject:", &off_1001C47F8);
                v87 = (unsigned __int8 *)v216;
                if (!*(_BYTE *)(v216 + 53))
                  goto LABEL_206;
                v92 = *(unsigned __int8 *)(v216 + 10);
LABEL_201:
                if (v92)
                {
                  sub_1000D50E0((uint64_t)v87, v215);
                  objc_msgSend(v86, "addObject:", &off_1001C4780);
                  v87 = (unsigned __int8 *)v216;
                  if (!*(_BYTE *)(v216 + 53))
                    goto LABEL_206;
                }
                v156 = sub_1000D4DBC((uint64_t)v87);
                v157 = objc_claimAutoreleasedReturnValue(v156);
                v158 = (void *)v157;
                v159 = v157 ? *(void **)(v157 + 56) : 0;
                v160 = v159;
                v161 = v160 == 0;

                if (!v161)
                {
LABEL_206:
                  if (v232)
                  {
LABEL_120:
                    objc_msgSend(v86, "addObject:", &off_1001C47E0);
                    goto LABEL_213;
                  }
                  objc_msgSend(v86, "insertObject:atIndex:", &off_1001C47E0, 0);
                }
LABEL_213:
                if (v215)
                  *((_BYTE *)v215 + 8) = 1;
                v166 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", v233, 9);
                v167 = objc_alloc_init((Class)NSMutableString);
                v230 = 0u;
                v231 = 0u;
                v228 = 0u;
                v229 = 0u;
                v168 = v86;
                v169 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v228, v248, 16);
                if (v169)
                {
                  v170 = *(_QWORD *)v229;
                  do
                  {
                    for (j = 0; j != v169; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v229 != v170)
                        objc_enumerationMutation(v168);
                      v172 = *(void **)(*((_QWORD *)&v228 + 1) + 8 * (_QWORD)j);
                      v173 = objc_msgSend(v167, "length", v212) == 0;
                      ShortStringFromNRLinkSubtype = createShortStringFromNRLinkSubtype(objc_msgSend(v172, "unsignedCharValue"));
                      v175 = (void *)ShortStringFromNRLinkSubtype;
                      if (v173)
                        objc_msgSend(v167, "appendString:", ShortStringFromNRLinkSubtype);
                      else
                        objc_msgSend(v167, "appendFormat:", CFSTR("/%@"), ShortStringFromNRLinkSubtype);

                    }
                    v169 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v228, v248, 16);
                  }
                  while (v169);
                }

                sub_1000D5060(v216, 1050, CFSTR("send req %d %@"), v176, v177, v178, v179, v180, (_DWORD)v212 == 2);
                v226 = 0u;
                v227 = 0u;
                v224 = 0u;
                v225 = 0u;
                v181 = v168;
                v182 = objc_msgSend(v181, "countByEnumeratingWithState:objects:count:", &v224, v247, 16);
                if (!v182)
                  goto LABEL_239;
                v183 = *(_QWORD *)v225;
LABEL_227:
                v184 = 0;
                while (1)
                {
                  if (*(_QWORD *)v225 != v183)
                    objc_enumerationMutation(v181);
                  v185 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * v184);
                  v232 = 0;
                  v186 = (objc_msgSend(v185, "unsignedCharValue", v212) - 101);
                  if (v186 >= 4)
                    break;
                  v232 = 0x7060502u >> (8 * v186);
                  if (!v232)
                    goto LABEL_235;
LABEL_229:
                  NRTLVAdd(v166, 1, 1, &v232);
LABEL_230:
                  if (v182 == (id)++v184)
                  {
                    v182 = objc_msgSend(v181, "countByEnumeratingWithState:objects:count:", &v224, v247, 16);
                    if (!v182)
                    {
LABEL_239:

                      sub_1000231F8((uint64_t)v215, 13, v166);
                      goto LABEL_240;
                    }
                    goto LABEL_227;
                  }
                }
                v232 = 0;
LABEL_235:
                v187 = objc_msgSend(v185, "unsignedCharValue");
                if (v187 > 5)
                  goto LABEL_230;
                v232 = 0x40300020100uLL >> (8 * v187);
                if (!v232)
                  goto LABEL_230;
                goto LABEL_229;
              case 4:
              case 5:
              case 8:
                v28 = 1;
                if (v214)
                  *((_BYTE *)v217 + 12) = 1;
                else
                  v214 = 0;
                v29 = v216;
                goto LABEL_250;
              case 6:
              case 7:
                if (!v214)
                  goto LABEL_125;
                if (*((_BYTE *)v217 + 11)
                  && (v26 = v217, sub_1000D4C80(v216, *((unsigned __int8 *)v217 + 11))))
                {

                  v36 = v217[7];
                  v37 = v36 == 0;

                  v26 = v217;
                  if (!v37)
                  {
                    v214 = 0;
                    goto LABEL_261;
                  }
LABEL_125:
                  v95 = v26[7];
                  v94 = v26 + 7;
                  v96 = v95;
                  v97 = v96 == 0;

                  if (v97)
                  {
                    v98 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v216 + 104));
                    v99 = dispatch_time(0x8000000000000000, 1000000000 * (_QWORD)v217[4]);
                    dispatch_source_set_timer(v98, v99, 0xFFFFFFFFFFFFFFFFLL, 0);
                    objc_initWeak(v233, v217);
                    v218[0] = _NSConcreteStackBlock;
                    v218[1] = 3221225472;
                    v218[2] = sub_1000D552C;
                    v218[3] = &unk_1001B87F0;
                    objc_copyWeak(&v219, v233);
                    v218[4] = v216;
                    dispatch_source_set_event_handler(v98, v218);
                    dispatch_resume(v98);
                    objc_storeStrong(v94, v98);
                    objc_destroyWeak(&v219);
                    objc_destroyWeak(v233);

                  }
                  v214 = 0;
                  v28 = 0;
                }
                else
                {
                  v100 = v26 + 7;
                  v101 = v26[7];
                  v102 = v101 == 0;

                  if (!v102)
                  {
                    v104 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v103);
                    v105 = _NRLogIsLevelEnabled(v104, 1);

                    if (v105)
                    {
                      v107 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v106);
                      _NRLogWithArgs(v107, 1, "%s%.30s:%-4d Cancelling the timer request %@", "", "-[NRDDeviceConductor processRequest:]", 3017, v217);

                    }
                    v108 = *v100;
                    dispatch_source_cancel(v108);

                    objc_storeStrong(v100, 0);
                  }
                  v109 = v217;
                  *((_BYTE *)v217 + 12) = 1;
                  v110 = v109[3];

                  if (v110)
                  {
                    v111 = (void (**)(void))v217[3];
                    v111[2]();

                  }
                  v28 = 0;
                }
                goto LABEL_249;
              case 9:
              case 0xA:
                v33 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(v216 + 96));
                v215 = v33;
                v34 = v33;
                if (v33)
                {
                  objc_storeStrong(v33 + 3, v214);
                  v34 = v215;
                }
                if (!v213 || *((unsigned __int16 *)v213 + 14) <= 0x11u)
                {
                  if (v34)
                  {
                    LOBYTE(v233[0]) = v27 == 9;
                    v35 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v233, 1);
                    sub_1000231F8((uint64_t)v215, 7, v35);

                  }
LABEL_164:
                  if (sub_100024728((uint64_t)v215))
                  {
                    *((_BYTE *)v217 + 12) = 1;
                    v128 = "Successfully sent";
                  }
                  else
                  {
                    v128 = "Failed to send";
                  }
                  v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v27 == 9));
                  sub_1000D5060(v216, 1020, CFSTR("%s prefer Wi-Fi ack %@"), v130, v131, v132, v133, v134, (uint64_t)v128);
                  goto LABEL_247;
                }
                if (v34)
                  *((_BYTE *)v34 + 8) = 1;
                BYTE4(v233[0]) = 0;
                LODWORD(v233[0]) = 0;
                *(_DWORD *)((char *)v233 + 5) = 0x1000000;
                if (v27 == 9)
                {
                  LOBYTE(v233[0]) = 1;
                  v93 = *(id *)(v216 + 432);
                }
                else
                {
                  v93 = 0;
                }
                v119 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", v233, 9);
                v222 = 0u;
                v223 = 0u;
                v220 = 0u;
                v221 = 0u;
                v120 = v93;
                v121 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v220, v246, 16);
                if (!v121)
                  goto LABEL_163;
                v122 = *(_QWORD *)v221;
LABEL_147:
                v123 = 0;
                break;
              case 0xB:
                v29 = v216;
                if (!*(_BYTE *)(v216 + 10))
                {
LABEL_137:
                  v28 = 1;
                  goto LABEL_250;
                }
                v83 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(v216 + 96));
                v84 = v83;
                if (v83)
                  objc_storeStrong(v83 + 3, v214);
                sub_1000D50E0(v216, v84);
                if (sub_100024728((uint64_t)v84))
                {
                  *((_BYTE *)v217 + 12) = 1;
                  v85 = "Successfully sent";
                }
                else
                {
                  v85 = "Failed to send";
                }
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v216 + 104));
                objc_opt_self(NRLinkDirector);
                if (qword_1001E4710 != -1)
                  dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                v139 = (id)qword_1001E4708;
                v140 = v139;
                if (v139)
                  v141 = (void *)*((_QWORD *)v139 + 6);
                else
                  v141 = 0;
                v142 = v141;

                if (v142)
                  v143 = (void *)v142[8];
                else
                  v143 = 0;
                v211 = v143;
                sub_1000D5060(v216, 1040, CFSTR("%s AWDL address update %@"), v144, v145, v146, v147, v148, (uint64_t)v85);

                goto LABEL_248;
              default:
                v28 = 1;
                v29 = v216;
                goto LABEL_250;
            }
            while (1)
            {
              if (*(_QWORD *)v221 != v122)
                objc_enumerationMutation(v120);
              v124 = *(void **)(*((_QWORD *)&v220 + 1) + 8 * v123);
              v232 = 0;
              v125 = (objc_msgSend(v124, "unsignedCharValue") - 101);
              if (v125 >= 4)
                break;
              v232 = 0x7060502u >> (8 * v125);
              if (!v232)
                goto LABEL_155;
LABEL_158:
              if (objc_msgSend(v124, "unsignedCharValue") == 102)
                sub_1000D50E0(v216, v215);
              if (v232)
                NRTLVAdd(v119, 1, 1, &v232);
              if (v121 == (id)++v123)
              {
                v121 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v220, v246, 16);
                if (!v121)
                {
LABEL_163:

                  sub_1000231F8((uint64_t)v215, 13, v119);
                  goto LABEL_164;
                }
                goto LABEL_147;
              }
            }
            v232 = 0;
LABEL_155:
            v126 = objc_msgSend(v124, "unsignedCharValue");
            v127 = 0x40300020100uLL >> (8 * v126);
            if (v126 >= 6)
              LOBYTE(v127) = 0;
            v232 = v127;
            goto LABEL_158;
          }
LABEL_265:
          v205 = sub_1000D5594();
          v206 = _NRLogIsLevelEnabled(v205, 16);

          if (v206)
          {
            v207 = sub_1000D5594();
            _NRLogWithArgs(v207, 16, "%s%.30s:%-4d ABORTING: Received invalid request type", "", "-[NRDDeviceConductor processRequest:]", 3029);

          }
          v44 = (__objc2_prot *)_os_log_pack_size(12);
          v43 = (__objc2_class *)((char *)&v212 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
          v208 = __error();
          v209 = _os_log_pack_fill(v43, v44, *v208, &_mh_execute_header, "%{public}s Received invalid request type");
          *(_DWORD *)v209 = 136446210;
          *(_QWORD *)(v209 + 4) = "-[NRDDeviceConductor processRequest:]";
          v210 = sub_1000D5594();
          _NRLogAbortWithPack(v210, v43);
          __break(1u);
LABEL_268:
          v47 = 0;
LABEL_78:

          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v216 + 104));
          objc_opt_self(&v43[45]);
          if (v44[25].name != (char *)-1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v48 = IsLevelEnabled[25].isa;
          v49 = v48;
          if (v48)
          {
            v50 = (_QWORD *)*((_QWORD *)v48 + 6);
            if (v50)
              v50 = (_QWORD *)v50[7];
            v51 = v50;
          }
          else
          {
            v51 = 0;
          }

          v52 = objc_msgSend(*(id *)(v216 + 136), "isEqual:", v51);
          if (v52 && !*(_BYTE *)(v216 + 25))
          {
            v162 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v53);
            v163 = _NRLogIsLevelEnabled(v162, 1);

            if (v163)
            {
              v165 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v164);
              _NRLogWithArgs(v165, 1, "%s%.30s:%-4d We already sent this information to the gizmo", "", "-[NRDDeviceConductor processRequest:]", 2777);

            }
          }
          else
          {
            if (v47)
            {
              v54 = [NRLinkDirectorMessage alloc];
              v55 = (id *)sub_100022B68(v54, *(void **)(v216 + 96));
              v56 = v55;
              if (v55)
                objc_storeStrong(v55 + 3, v214);
              objc_opt_self(NRIKEv2Listener);
              if (qword_1001E44D8 != -1)
                dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
              v57 = (id)qword_1001E44D0;
              v58 = v57;
              if (v56)
              {
                if (v57)
                  v59 = 62743;
                else
                  v59 = 0;
                sub_1000236E0((uint64_t)v56, v47, v59, 0);
              }

              v60 = sub_1000D4DBC(v216);
              v61 = objc_claimAutoreleasedReturnValue(v60);
              v62 = (void *)v61;
              if (v61)
                v63 = *(void **)(v61 + 80);
              else
                v63 = 0;
              v64 = v63;
              v65 = v64 == 0;

              if (!v65)
              {
                v66 = sub_1000D4DBC(v216);
                v67 = objc_claimAutoreleasedReturnValue(v66);
                v68 = (void *)v67;
                if (v67)
                  v69 = *(void **)(v67 + 80);
                else
                  v69 = 0;
                v70 = v69;
                sub_1000231F8((uint64_t)v56, 4, v70);

              }
              if (sub_100024728((uint64_t)v56))
              {
                v76 = v216;
                *((_BYTE *)v217 + 12) = 1;
                sub_1000D4E4C(v76, v47);
                v77 = sub_1000D4DBC(v216);
                v78 = objc_claimAutoreleasedReturnValue(v77);
                v79 = (void *)v78;
                if (v78)
                  v80 = *(void **)(v78 + 80);
                else
                  v80 = 0;
                v81 = v80;
                sub_1000D4F68(v216, v81);

                v82 = "Successfully sent";
              }
              else
              {
                v82 = "Failed to send";
              }
              sub_1000D5060(v216, 1010, CFSTR("%s Wi-Fi address update %@"), v71, v72, v73, v74, v75, (uint64_t)v82);

              goto LABEL_211;
            }
            v149 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v53);
            v150 = _NRLogIsLevelEnabled(v149, 1);

            if (v150)
            {
              v152 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v151);
              _NRLogWithArgs(v152, 1, "%s%.30s:%-4d No Wi-Fi address present", "", "-[NRDDeviceConductor processRequest:]", 2783);

            }
          }
          *((_BYTE *)v217 + 12) = 1;
LABEL_211:

          goto LABEL_248;
        }
LABEL_139:
        v112 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v42);
        v113 = _NRLogIsLevelEnabled(v112, 1);

        v3 = v217;
        if (!v113)
          goto LABEL_263;
        v214 = (__objc2_prot *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v114);
        _NRLogWithArgs(v214, 1, "%s%.30s:%-4d Deferring request as there is no link that can honor", "", "-[NRDDeviceConductor processRequest:]", 2745);
LABEL_262:

        v3 = v217;
        goto LABEL_263;
      }
    }
    v115 = *(id *)(a1 + 128);
    if (v115
      && (v117 = v115, v118 = objc_msgSend(*(id *)(a1 + 128), "state"), v117, v118 == 8))
    {
      IsLevelEnabled = (__objc2_prot *)*(id *)(a1 + 128);
    }
    else
    {
      if (!v3 || !*((_BYTE *)v3 + 14))
      {
LABEL_194:
        v153 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v116);
        v154 = _NRLogIsLevelEnabled(v153, 1);

        v3 = v217;
        if (!v154)
          goto LABEL_263;
        v214 = (__objc2_prot *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v216 + 96), v155);
        _NRLogWithArgs(v214, 1, "%s%.30s:%-4d No link found", "", "-[NRDDeviceConductor processRequest:]", 2762);
        goto LABEL_262;
      }
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      v135 = *(id *)(a1 + 112);
      IsLevelEnabled = (__objc2_prot *)objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
      if (IsLevelEnabled)
      {
        v136 = *(_QWORD *)v235;
        do
        {
          for (k = 0; k != IsLevelEnabled; k = (__objc2_prot *)((char *)k + 1))
          {
            if (*(_QWORD *)v235 != v136)
              objc_enumerationMutation(v135);
            v138 = *(void **)(*((_QWORD *)&v234 + 1) + 8 * (_QWORD)k);
            if (objc_msgSend(v138, "state") == 9 && objc_msgSend(v138, "type") != 4)
            {
              IsLevelEnabled = v138;
              goto LABEL_192;
            }
          }
          IsLevelEnabled = (__objc2_prot *)objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
        }
        while (IsLevelEnabled);
      }
LABEL_192:

      a1 = v216;
      v3 = v217;
    }
    v214 = IsLevelEnabled;
    if (IsLevelEnabled)
      goto LABEL_33;
    goto LABEL_194;
  }
  v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
  v6 = _NRLogIsLevelEnabled(v5, 1);

  if (v6)
  {
    v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
    v9 = *((unsigned __int8 *)v3 + 11);
    if (v9 > 0xB)
      v10 = CFSTR("Unknown");
    else
      v10 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", (&off_1001B7B10)[v9]);
    _NRLogWithArgs(v8, 1, "%s%.30s:%-4d Deferring request %@ as request %@ exists", "", "-[NRDDeviceConductor processRequest:]", 2712, v3, v10);

  }
LABEL_263:

}

uint64_t sub_1000D4C80(uint64_t a1, int a2)
{
  uint64_t v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 *v9;
  id v10;
  unsigned __int8 *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = a1;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = *(id *)(v2 + 120);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v14;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(unsigned __int8 **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v8);
          if (v9)
          {
            if (v9[10] == a2)
              goto LABEL_15;
          }
          else if (!a2)
          {
LABEL_15:
            v11 = v9;
            goto LABEL_16;
          }
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        v6 = v10;
      }
      while (v10);
    }
    v11 = 0;
LABEL_16:

    v2 = v11 != 0;
  }
  return v2;
}

id sub_1000D4DBC(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v1 = (id)qword_1001E4708;
    v2 = v1;
    if (v1)
      v3 = (void *)*((_QWORD *)v1 + 6);
    else
      v3 = 0;
    v4 = v3;

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_1000D4E4C(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v12 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if ((objc_msgSend(*(id *)(a1 + 136), "isEqual:", v12) & 1) == 0)
  {
    v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

    if (IsLevelEnabled)
    {
      v7 = *(id *)(a1 + 96);
      v9 = (void *)_NRCopyLogObjectForNRUUID(v7, v8);
      _NRLogWithArgs(v9, 1, "%s%.30s:%-4d Setting last sent WiFi endpoint: %@ --> %@", "", "-[NRDDeviceConductor setLastSentWiFiEndpoint:]", 2039, *(_QWORD *)(a1 + 136), v12);

    }
    objc_storeStrong((id *)(a1 + 136), a2);
    v10 = *(id *)(a1 + 96);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "addressData"));
    sub_1000A0244(v10, CFSTR("WiFiEndpointAddressData"), v11);

  }
}

void sub_1000D4F68(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if ((objc_msgSend(*(id *)(a1 + 144), "isEqualToData:", v10) & 1) == 0)
  {
    v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

    if (IsLevelEnabled)
    {
      v7 = *(id *)(a1 + 96);
      v9 = (void *)_NRCopyLogObjectForNRUUID(v7, v8);
      _NRLogWithArgs(v9, 1, "%s%.30s:%-4d Setting last sent WiFi signature: %@ --> %@", "", "-[NRDDeviceConductor setLastSentWiFiSignature:]", 2075, *(_QWORD *)(a1 + 144), v10);

    }
    objc_storeStrong((id *)(a1 + 144), a2);
    sub_1000A0244(*(void **)(a1 + 96), CFSTR("WiFiSignature"), *(void **)(a1 + 144));
  }

}

void sub_1000D5060(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  id v12;

  if (a1)
  {
    v11 = a3;
    v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v11, &a9);

    sub_100121E18(*(void **)(a1 + 96), a2, 0, v12);
  }
}

void sub_1000D50E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id *v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  char v20;
  id v21;
  id v22;
  id v23;
  int v24;
  id v25;
  int IsLevelEnabled;
  id v27;
  _QWORD v28[4];
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;

  v27 = a2;
  if (v27)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v3 = (id)qword_1001E4708;
    v4 = v3;
    if (v3)
      v5 = (void *)*((_QWORD *)v3 + 6);
    else
      v5 = 0;
    v6 = v5;

    if (v6)
      v7 = (void *)v6[8];
    else
      v7 = 0;
    v8 = v7;

    LOBYTE(v31) = v8 != 0;
    v9 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v31, 1);
    sub_1000231F8((uint64_t)v27, 10, v9);

    if (!v8)
      goto LABEL_30;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "port"));
    sub_1000236E0((uint64_t)v27, v8, (unsigned __int16)objc_msgSend(v10, "intValue"), 1);

    v11 = v27;
    if (!*(_BYTE *)(a1 + 48) || !*(_BYTE *)(a1 + 44))
      goto LABEL_29;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v12 = (id)qword_1001E4708;
    v13 = v12;
    if (v12)
      v14 = (void *)*((_QWORD *)v12 + 6);
    else
      v14 = 0;
    v15 = v14;

    if (!v15)
    {
      v22 = 0;
      goto LABEL_27;
    }
    v16 = v15[3];
    dispatch_assert_queue_V2(v16);

    v31 = 0;
    v32 = &v31;
    v33 = 0x3032000000;
    v34 = sub_10014387C;
    v35 = sub_10014388C;
    v36 = 0;
    v17 = v15[22];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100149384;
    v28[3] = &unk_1001B8840;
    v30 = &v31;
    v18 = v17;
    v29 = v18;
    if (sub_1001437AC((uint64_t)NRLinkManagerWiFi, v28))
    {
      v25 = sub_100140BFC();
      IsLevelEnabled = _NRLogIsLevelEnabled(v25, 16);

      if (!IsLevelEnabled)
      {
LABEL_24:
        v22 = (id)v32[5];

        _Block_object_dispose(&v31, 8);
        if (!v22 || !objc_msgSend(v22, "compare:options:", CFSTR("XZ"), 1))
          goto LABEL_28;
        v15 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "dataUsingEncoding:", 4));
        sub_1000231F8((uint64_t)v11, 15, v15);
LABEL_27:

LABEL_28:
LABEL_29:

        goto LABEL_30;
      }
      v21 = sub_100140BFC();
      _NRLogWithArgs(v21, 16, "%s%.30s:%-4d timed out getting country code", "", "-[NRLinkManagerWiFi getDeviceCountryCode]", 1977);
    }
    else
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v19 = (id)qword_1001E4AB0;
      v20 = _NRLogIsLevelEnabled(v19, 1);

      if ((v20 & 1) == 0)
        goto LABEL_24;
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v21 = (id)qword_1001E4AB0;
      _NRLogWithArgs(v21, 1, "%s%.30s:%-4d retrieved country code", "", "-[NRLinkManagerWiFi getDeviceCountryCode]", 1975);
    }

    goto LABEL_24;
  }
  v23 = sub_1000D5594();
  v24 = _NRLogIsLevelEnabled(v23, 17);

  if (!v24)
    goto LABEL_31;
  v8 = sub_1000D5594();
  _NRLogWithArgs(v8, 17, "%s called with null message", "-[NRDDeviceConductor addAWDLEndpointToMessage:]");
LABEL_30:

LABEL_31:
}

void sub_1000D5514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D552C(uint64_t a1)
{
  id *WeakRetained;
  void (**v3)(void);
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v3 = (void (**)(void))WeakRetained[6];
    v3[2]();

    *((_BYTE *)v4 + 12) = 1;
    sub_1000D5604(*(_QWORD *)(a1 + 32), v4);
    WeakRetained = v4;
  }

}

id sub_1000D5594()
{
  if (qword_1001E4798 != -1)
    dispatch_once(&qword_1001E4798, &stru_1001B7628);
  return (id)qword_1001E4790;
}

void sub_1000D55D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4790;
  qword_1001E4790 = (uint64_t)v1;

}

void sub_1000D5604(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  if (a1)
  {
    v9 = v3;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

    if (IsLevelEnabled)
    {
      v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
      _NRLogWithArgs(v8, 1, "%s%.30s:%-4d Removing request: %@", "", "-[NRDDeviceConductor removeRequest:]", 2656, v9);

    }
    objc_msgSend(*(id *)(a1 + 120), "removeObject:", v9);
    v3 = v9;
  }

}

void sub_1000D56B8(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  void *v15;
  int IsLevelEnabled;
  uint64_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NRDiscoveryClient *v24;
  void *v25;
  id v26;
  id v27;
  id *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  unsigned int v34;
  void *v35;
  id v36;
  unsigned __int8 v37;
  uint64_t v38;
  int v39;
  void *v40;
  int v41;
  uint64_t v42;
  void *v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  char v64;
  id v65;
  uint64_t v66;
  void *v67;
  unsigned __int8 *v68;
  void *v69;
  int v70;
  unsigned __int8 *v71;
  void *v72;
  int v73;
  _BYTE *v74;
  id v75;
  _QWORD v76[4];
  id v77;
  id v78;
  _QWORD v79[4];
  id v80;
  id v81;
  _QWORD v82[4];
  id v83;
  id v84;
  id from;
  id location[2];

  if (!a1)
    return;
  if ((sub_1000D5F48(a1) & 1) != 0)
  {
    v7 = (a3 - 101);
    if (v7 >= 4)
    {
      if (a2 >= 6 || (v8 = 0x40300020100uLL >> (8 * a2), !(_BYTE)v8))
      {
LABEL_15:
        v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
        IsLevelEnabled = _NRLogIsLevelEnabled(v15, 16);

        if (IsLevelEnabled)
        {
          v75 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v17);
          _NRLogWithArgs(v75, 16, "%s%.30s:%-4d invalid link type/subtype %u/%u");
          goto LABEL_17;
        }
        return;
      }
    }
    else
    {
      LODWORD(v8) = 0x7060502u >> (8 * v7);
      if (!(_BYTE)v8)
        goto LABEL_15;
    }
    v12 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    v13 = v12;
    if (*(_BYTE *)(a1 + 69) && v12)
    {
      if (v12[15])
      {
        v14 = 1;
        if (!v12[12])
          goto LABEL_31;
      }
      else
      {
        if (v12[14])
          v18 = 1;
        else
          v18 = *((unsigned __int16 *)v12 + 14) > 0x12u;
        v14 = v18;
        if (!v12[12])
          goto LABEL_31;
      }
      if (!v12[13])
        v14 = 0;
      if (v14 == 1)
      {
        *(_BYTE *)(a1 + 69) = 0;
        v19 = *(void **)(a1 + 424);
        *(_QWORD *)(a1 + 424) = 0;

        v21 = *(_QWORD *)(a1 + 416);
        if (v21)
        {
          sub_100119F6C(v21, v20);
          v22 = *(void **)(a1 + 416);
          *(_QWORD *)(a1 + 416) = 0;

        }
      }
    }
LABEL_31:
    if (!*(_QWORD *)(a1 + 416))
    {
      if ((sub_1000D5F48(a1) & 1) != 0)
      {
        v24 = [NRDiscoveryClient alloc];
        v25 = *(void **)(a1 + 104);
        v26 = *(id *)(a1 + 96);
        v27 = v25;
        v28 = sub_100119DA4((id *)&v24->super.isa, v27, v26);
        v29 = *(void **)(a1 + 416);
        *(_QWORD *)(a1 + 416) = v28;

        v30 = *(_QWORD *)(a1 + 416);
        if (v30)
        {
          *(_BYTE *)(v30 + 15) = 1;
          v31 = *(_QWORD *)(a1 + 416);
          if (v31)
            *(_BYTE *)(v31 + 16) = 1;
        }
        if (v13)
          v32 = (void *)*((_QWORD *)v13 + 16);
        else
          v32 = 0;
        v33 = v32;
        v34 = objc_msgSend(v33, "allowedPeerDeviceType");

        if (v34 != 255)
        {
          if (v13)
            v35 = (void *)*((_QWORD *)v13 + 16);
          else
            v35 = 0;
          v36 = v35;
          v37 = objc_msgSend(v36, "allowedPeerDeviceType");
          v38 = *(_QWORD *)(a1 + 416);
          if (v38)
            *(_BYTE *)(v38 + 18) = v37;

        }
        if (*(_BYTE *)(a1 + 48))
        {
          if (qword_1001E4870 != -1)
            dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
          if (byte_1001E4868 && v13)
          {
            if (v13[15])
            {
              v39 = 1;
            }
            else
            {
              v44 = v13[14] || *((unsigned __int16 *)v13 + 14) > 0x12u;
              v39 = v44;
            }
            if (v13[12])
            {
              if (!v13[13])
                v39 = 0;
              if (v39 == 1)
              {
                v45 = *(_QWORD *)(a1 + 416);
                if (v45)
                  *(_BYTE *)(v45 + 17) = 1;
              }
            }
          }
        }
        objc_initWeak(location, (id)a1);
        objc_initWeak(&from, *(id *)(a1 + 416));
        v46 = *(id *)(a1 + 416);
        v82[0] = _NSConcreteStackBlock;
        v82[1] = 3221225472;
        v82[2] = sub_1000D600C;
        v82[3] = &unk_1001B7548;
        objc_copyWeak(&v83, location);
        objc_copyWeak(&v84, &from);
        v47 = v82;
        v48 = v47;
        if (v46 && !*((_BYTE *)v46 + 19))
        {
          v49 = objc_retainBlock(v47);
          v50 = (void *)v46[9];
          v46[9] = v49;

        }
        v51 = *(id *)(a1 + 416);
        v79[0] = _NSConcreteStackBlock;
        v79[1] = 3221225472;
        v79[2] = sub_1000D6084;
        v79[3] = &unk_1001B7548;
        objc_copyWeak(&v80, location);
        objc_copyWeak(&v81, &from);
        v52 = v79;
        v53 = v52;
        if (v51 && !*((_BYTE *)v51 + 19))
        {
          v54 = objc_retainBlock(v52);
          v55 = (void *)v51[10];
          v51[10] = v54;

        }
        v56 = *(id *)(a1 + 416);
        v76[0] = _NSConcreteStackBlock;
        v76[1] = 3221225472;
        v76[2] = sub_1000D6510;
        v76[3] = &unk_1001B7548;
        objc_copyWeak(&v77, location);
        objc_copyWeak(&v78, &from);
        v57 = v76;
        v58 = v57;
        if (v56 && !*((_BYTE *)v56 + 19))
        {
          v59 = objc_retainBlock(v57);
          v60 = (void *)v56[11];
          v56[11] = v59;

        }
        v61 = *(id *)(a1 + 96);
        v63 = (void *)_NRCopyLogObjectForNRUUID(v61, v62);
        v64 = _NRLogIsLevelEnabled(v63, 0);

        if ((v64 & 1) != 0)
        {
          v65 = *(id *)(a1 + 96);
          v67 = (void *)_NRCopyLogObjectForNRUUID(v65, v66);
          v68 = (unsigned __int8 *)*(id *)(a1 + 416);
          v69 = v68;
          if (v68)
            v70 = v68[15];
          else
            v70 = 0;
          v71 = (unsigned __int8 *)*(id *)(a1 + 416);
          v72 = v71;
          if (v71)
            v73 = v71[16];
          else
            v73 = 0;
          _NRLogWithArgs(v67, 0, "%s%.30s:%-4d initiating discovery for devices (a:%d/b:%d)", "", "-[NRDDeviceConductor startDiscoveryIfNeeded]", 7537, v70, v73);

        }
        v74 = *(id *)(a1 + 416);
        sub_10011DA3C(v74);

        objc_destroyWeak(&v78);
        objc_destroyWeak(&v77);
        objc_destroyWeak(&v81);
        objc_destroyWeak(&v80);
        objc_destroyWeak(&v84);
        objc_destroyWeak(&v83);
        objc_destroyWeak(&from);
        objc_destroyWeak(location);
      }
      else
      {
        v40 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v23);
        v41 = _NRLogIsLevelEnabled(v40, 1);

        if (v41)
        {
          v43 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v42);
          _NRLogWithArgs(v43, 1, "%s%.30s:%-4d not eligible to use device discovery", "", "-[NRDDeviceConductor startDiscoveryIfNeeded]", 7494);

        }
      }
    }

    sub_10011A4C8(*(_QWORD *)(a1 + 416), v8);
    return;
  }
  v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
  v10 = _NRLogIsLevelEnabled(v9, 16);

  if (v10)
  {
    v75 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
    _NRLogWithArgs(v75, 16, "%s%.30s:%-4d cannot use device discovery %u/%u");
LABEL_17:

  }
}

void sub_1000D5D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, id *a15, id *a16, id *a17)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v19 - 120));
  objc_destroyWeak((id *)(v19 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D5DBC(uint64_t a1)
{
  char *v1;
  id *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  v1 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!v1)
  {
    v9 = sub_1000D5594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

    if (IsLevelEnabled)
    {
      v11 = sub_1000D5594();
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "-[NRDDeviceConductor getPreferredLinkTypeFromConfiguration]", 517);

    }
    v12 = _os_log_pack_size(12);
    v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v15 + 4) = "-[NRDDeviceConductor getPreferredLinkTypeFromConfiguration]";
    v16 = sub_1000D5594();
    _NRLogAbortWithPack(v16, v13);
  }
  v2 = (id *)v1;
  v3 = *((id *)v1 + 16);

  if (v3)
  {
    v4 = v2[16];
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allowedLinkTypes"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

    v7 = objc_msgSend(v6, "unsignedShortValue");
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

id sub_1000D5F48(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  char *v5;
  char *v6;
  void *v7;
  id v8;
  id v9;

  if (!*(_BYTE *)(a1 + 14))
    return 0;
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (unsigned __int8 *)(id)qword_1001E4708;
  if (v2)
  {
    v3 = v2[8];

    if (v3)
      return 0;
  }
  v5 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  v6 = v5;
  if (v5)
    v7 = (void *)*((_QWORD *)v5 + 16);
  else
    v7 = 0;
  v8 = v7;
  v9 = objc_msgSend(v8, "allowsDeviceDiscovery");

  return v9;
}

void sub_1000D600C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = v4;
  if (WeakRetained && v4 && *((_BYTE *)WeakRetained + 14) && WeakRetained[52] == v4)
    sub_1000D6588((uint64_t)WeakRetained, v6);

}

void sub_1000D6084(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  int IsLevelEnabled;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *i;
  void *v42;
  void *v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];

  v44 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = v4;
  if (WeakRetained && v4 && *((_BYTE *)WeakRetained + 14) && *((id *)WeakRetained + 52) == v4)
  {
    v6 = v44;
    v7 = v6;
    if (*((_QWORD *)WeakRetained + 53))
    {
      if (v6)
        v8 = (void *)*((_QWORD *)v6 + 2);
      else
        v8 = 0;
      v9 = v8;
      v10 = (_QWORD *)*((_QWORD *)WeakRetained + 53);
      if (v10)
        v10 = (_QWORD *)v10[2];
      v11 = v10;
      v12 = objc_msgSend(v9, "isEqualToString:", v11);

      v14 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)WeakRetained + 12), v13);
      IsLevelEnabled = _NRLogIsLevelEnabled(v14, 1);

      if ((v12 & 1) != 0)
      {
        if (IsLevelEnabled)
        {
          v17 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)WeakRetained + 12), v16);
          _NRLogWithArgs(v17, 1, "%s%.30s:%-4d lost %@", "", "-[NRDDeviceConductor lostDevice:]", 7618, v7);

        }
        v18 = *((id *)WeakRetained + 12);
        objc_opt_self(NRDLocalDevice);
        v19 = sub_10013D10C((uint64_t)NRDLocalDevice, v18, &off_1001C49A8);

        if (!v19)
        {
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v20 = (id)qword_1001E4708;
          v21 = v20;
          if (v20)
            v22 = (void *)*((_QWORD *)v20 + 8);
          else
            v22 = 0;
          v23 = v22;
          sub_1000C9B6C((uint64_t)v23, 0, 0, *((void **)WeakRetained + 12));

        }
        v24 = *((id *)WeakRetained + 12);
        objc_opt_self(NRDLocalDevice);
        v25 = sub_10013D10C((uint64_t)NRDLocalDevice, v24, &off_1001C4960);

        if (!v25)
        {
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v26 = (id)qword_1001E4708;
          v27 = v26;
          if (v26)
            v28 = (void *)*((_QWORD *)v26 + 6);
          else
            v28 = 0;
          v29 = v28;
          sub_100146E4C(v29, 0, *((void **)WeakRetained + 12));

        }
        v30 = *((id *)WeakRetained + 12);
        objc_opt_self(NRDLocalDevice);
        v31 = sub_10013D10C((uint64_t)NRDLocalDevice, v30, &off_1001C4990);

        if (!v31)
        {
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v32 = (id)qword_1001E4708;
          v33 = v32;
          if (v32)
            v34 = (void *)*((_QWORD *)v32 + 6);
          else
            v34 = 0;
          v35 = v34;
          sub_1001472F4(v35, 0, *((void **)WeakRetained + 12));

        }
        v36 = (void *)*((_QWORD *)WeakRetained + 53);
        if (v36)
        {
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v37 = objc_msgSend(*((id *)WeakRetained + 14), "copy");
          v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
          if (v38)
          {
            v39 = v38;
            v40 = *(_QWORD *)v46;
            do
            {
              for (i = 0; i != v39; i = (char *)i + 1)
              {
                if (*(_QWORD *)v46 != v40)
                  objc_enumerationMutation(v37);
                v42 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v42, "state") == 8)
                  objc_msgSend(v42, "checkPeerAvailabilityWithForceAggressive:", 1);
              }
              v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
            }
            while (v39);
          }

          v36 = (void *)*((_QWORD *)WeakRetained + 53);
        }
        *((_QWORD *)WeakRetained + 53) = 0;

      }
      else if (IsLevelEnabled)
      {
        v43 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)WeakRetained + 12), v16);
        _NRLogWithArgs(v43, 1, "%s%.30s:%-4d ignoring lost stale device %@", "", "-[NRDDeviceConductor lostDevice:]", 7614, v7);

      }
    }

  }
}

void sub_1000D6510(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = v4;
  if (WeakRetained && v4 && *((_BYTE *)WeakRetained + 14) && WeakRetained[52] == v4)
    sub_1000D6588((uint64_t)WeakRetained, v6);

}

void sub_1000D6588(uint64_t a1, void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id *v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  id v49;
  int v50;
  id v51;
  void *v52;
  id v53;
  __CFString *v54;
  __CFString *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  void *v62;
  id v63;
  void *v64;
  unsigned __int8 v65;
  id v66;
  void *v67;
  void *v68;
  id *v69;
  id v70;
  void *v71;
  id v72;
  __CFString *v73;
  __CFString *v74;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  id *v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  NSObject *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  char *v90;
  void *v91;
  _QWORD *v92;
  id v93;
  id *v94;
  void *v95;
  id v96;
  void *v97;
  void *v98;
  _QWORD *v99;
  _QWORD *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  void *j;
  void *v107;
  void *v108;
  unsigned int v109;
  void *v110;
  id v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  __CFString *v116;
  __CFString *v117;
  void *v118;
  id v119;
  id v120;
  void *v121;
  void *v122;
  void *v123;
  id v124;
  void *v125;
  void *v126;
  id *v127;
  void *v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  void *k;
  void *v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  id v139;
  id v140;
  unsigned __int8 v141;
  void *v142;
  _QWORD *v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  id v148;
  void *v149;
  void *v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  void *m;
  void *v158;
  void *v159;
  unsigned __int8 v160;
  void *v161;
  unsigned int v162;
  NRLinkNAN *v163;
  void *v164;
  void *v165;
  char *v166;
  void *v167;
  id v168;
  void *v169;
  id v170;
  uint64_t v171;
  id *v172;
  char *v173;
  _QWORD *v174;
  void *v175;
  id v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _BYTE v185[128];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _BYTE v190[128];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;

  v4 = a2;
  v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v5);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 1);

  if (IsLevelEnabled)
  {
    v8 = *(id *)(a1 + 96);
    v10 = (void *)_NRCopyLogObjectForNRUUID(v8, v9);
    _NRLogWithArgs(v10, 1, "%s%.30s:%-4d discovered %@", "", "-[NRDDeviceConductor discoveredDevice:]", 7543, v4);

  }
  objc_storeStrong((id *)(a1 + 424), a2);
  v179 = 0u;
  v180 = 0u;
  v177 = 0u;
  v178 = 0u;
  v11 = *(id *)(a1 + 112);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v177, v185, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v178;
    do
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v178 != v14)
          objc_enumerationMutation(v11);
        sub_1000D7704(a1, *(void **)(*((_QWORD *)&v177 + 1) + 8 * (_QWORD)i));
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v177, v185, 16);
    }
    while (v13);
  }

  if (v4)
  {
    v16 = (void *)v4[12];
    if (v16)
    {
      v17 = v16;
      sub_10013D090((uint64_t)NRDLocalDevice, v17, *(void **)(a1 + 96));

      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v18 = (id)qword_1001E4708;
      v19 = v18;
      if (v18)
        v20 = (void *)*((_QWORD *)v18 + 5);
      else
        v20 = 0;
      v21 = v20;
      sub_10002E9DC((uint64_t)v21);

    }
    v22 = sub_1001199A8((uint64_t)v4, 5u, 0, 0);

    if (v22)
    {
      v23 = sub_100119B60((uint64_t)v4);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      if (v24)
      {
        v25 = (void *)v4[15];
        if (v25)
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 4));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v26));

        }
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v27 = (id)qword_1001E4708;
        v28 = v27;
        if (v27)
          v29 = (void *)*((_QWORD *)v27 + 8);
        else
          v29 = 0;
        v30 = v29;
        sub_1000C9B6C((uint64_t)v30, v25, v24, *(void **)(a1 + 96));

      }
    }
    v31 = sub_1001199A8((uint64_t)v4, 2u, 101, 0);

    if (v31)
    {
      v32 = (void *)v4[15];
      if (v32)
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 2));
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", v33));

      }
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v34 = (id)qword_1001E4708;
      v35 = v34;
      if (v34)
        v36 = (void *)*((_QWORD *)v34 + 6);
      else
        v36 = 0;
      v37 = v36;

      sub_100146E4C(v37, v32, *(void **)(a1 + 96));
    }
    v38 = sub_1001199A8((uint64_t)v4, 2u, 102, 0);

    v174 = v4;
    if (!v38)
      goto LABEL_71;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v39 = (id)qword_1001E4708;
    v40 = v39;
    if (v39)
      v41 = (void *)*((_QWORD *)v39 + 6);
    else
      v41 = 0;
    v42 = v41;

    if (v42)
    {
      v43 = v42[8];
      if (v43)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v44 = (id)qword_1001E4708;
        v45 = v44;
        if (v44)
          v46 = (void *)*((_QWORD *)v44 + 6);
        else
          v46 = 0;
        v47 = v46;

        if (v47)
          v48 = (void *)v47[8];
        else
          v48 = 0;
        v49 = v48;
        v50 = objc_msgSend(v49, "addressFamily");

        goto LABEL_54;
      }
    }
    else
    {
      v43 = 0;
    }
    v50 = 0;
LABEL_54:

    v51 = sub_1001199A8((uint64_t)v4, 2u, 102, v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "hostname"));
    objc_opt_self(NRIKEv2Listener);
    if (qword_1001E44D8 != -1)
      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
    v53 = (id)qword_1001E44D0;
    v54 = CFSTR("62743");
    if (!v53)
      v54 = 0;
    v55 = v54;
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v52, v55));

    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "hostname"));
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v58 = (id)qword_1001E4708;
    v59 = v58;
    if (v58)
      v60 = (void *)*((_QWORD *)v58 + 6);
    else
      v60 = 0;
    v61 = v60;

    if (v61)
      v62 = (void *)v61[8];
    else
      v62 = 0;
    v63 = v62;
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "hostname"));
    v65 = objc_msgSend(v57, "isEqualToString:", v64);

    if ((v65 & 1) == 0)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v66 = (id)qword_1001E4708;
      v67 = v66;
      if (v66)
        v68 = (void *)*((_QWORD *)v66 + 6);
      else
        v68 = 0;
      v69 = v68;

      sub_1001472F4(v69, v56, *(void **)(a1 + 96));
    }

    v4 = v174;
LABEL_71:
    v70 = sub_1001199A8((uint64_t)v4, 2u, 103, 0);

    if (v70)
    {
      v170 = sub_1001199A8((uint64_t)v4, 2u, 103, 0);
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v170, "hostname"));
      objc_opt_self(NRIKEv2Listener);
      if (qword_1001E44D8 != -1)
        dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
      v72 = (id)qword_1001E44D0;
      v73 = CFSTR("62743");
      if (!v72)
        v73 = 0;
      v74 = v73;
      v75 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v71, v74));

      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v76 = (id)qword_1001E4708;
      v77 = v76;
      if (v76)
        v78 = (void *)*((_QWORD *)v76 + 6);
      else
        v78 = 0;
      v79 = v78;

      v80 = *(void **)(a1 + 96);
      v81 = v75;
      v82 = v80;
      v83 = v81;
      if (v79)
      {
        v84 = v79[3];
        dispatch_assert_queue_V2(v84);

        v175 = (void *)sub_100146D88(v81);
        v85 = v79[15];
        if (v85)
          v85 = (_QWORD *)v85[9];
        v86 = v85;
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", v82));
        v88 = objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "firstObject"));

        v89 = (void *)v88;
        v83 = v175;
        if (!v89 || (objc_msgSend(v89, "isEqual:", v175) & 1) == 0)
        {
          v167 = v89;
          v90 = sub_10012FFF4((uint64_t)NRDLocalDevice, v82);
          v168 = v81;
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            v91 = (void *)qword_1001E4AB0;
            v92 = v79[15];
            v93 = v91;
            v94 = v79;
            if (v92)
              v95 = (void *)v92[9];
            else
              v95 = 0;
            v96 = v95;
            v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "objectForKeyedSubscript:", v82));
            v83 = v175;
            _NRLogWithArgs(v93, 1, "%s%.30s:%-4d Setting the peer NAN endpoint as %@ ----> %@ for %@", "", "-[NRLinkManagerWiFi setPeerNANEndpoint:nrUUID:]", 1006, v97, v175, v90);

            v79 = v94;
          }
          if (v83)
          {
            *(_QWORD *)&v191 = v83;
            v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v191, 1));
          }
          else
          {
            v98 = 0;
          }
          v99 = v79[15];
          if (v99)
            v99 = (_QWORD *)v99[9];
          v166 = v90;
          v100 = v99;
          objc_msgSend(v100, "setObject:forKeyedSubscript:", v98, v82);

          if (v175)
          v172 = v79;
          v101 = objc_msgSend(v79[19], "copy");
          v186 = 0u;
          v187 = 0u;
          v188 = 0u;
          v189 = 0u;
          v102 = v101;
          v103 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v186, v190, 16);
          if (v103)
          {
            v104 = v103;
            v105 = *(_QWORD *)v187;
            do
            {
              for (j = 0; j != v104; j = (char *)j + 1)
              {
                if (*(_QWORD *)v187 != v105)
                  objc_enumerationMutation(v102);
                v107 = *(void **)(*((_QWORD *)&v186 + 1) + 8 * (_QWORD)j);
                if (objc_msgSend(v107, "subtype") == 103)
                {
                  v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "nrUUID"));
                  v109 = objc_msgSend(v108, "isEqual:", v82);

                  if (v109)
                    objc_msgSend(v107, "cancelWithReason:", CFSTR("Peer NAN endpoint changed"));
                }
              }
              v104 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v186, v190, 16);
            }
            while (v104);
          }

          v4 = v174;
          v83 = v175;
          v81 = v168;
          if (v175)
          {
            v110 = (void *)nw_interface_create_with_name("nan0");
            v111 = objc_msgSend(v175, "copyCEndpoint");
            v112 = (void *)nw_interface_copy_local_address_for_remote_address(v110, v111);

            if (v112)
            {
              v165 = v110;
              v163 = [NRLinkNAN alloc];
              v113 = v172[3];
              v114 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", v112));
              objc_opt_self(NRIKEv2Listener);
              v164 = v112;
              if (qword_1001E44D8 != -1)
                dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
              v115 = (id)qword_1001E44D0;
              v116 = CFSTR("62743");
              if (!v115)
                v116 = 0;
              v117 = v116;
              v118 = v113;
              v119 = -[NRLinkNAN initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:](v163, "initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:", v113, v172, v82, CFSTR("nan0"), v114, v175, v117);

              if (!v119)
                objc_msgSend(v172, "reportEvent:", 3201);

              v4 = v174;
              v83 = v175;
              v112 = v164;
              v110 = v165;
            }

          }
          v79 = v172;
          v89 = v167;
        }

      }
    }
    v120 = sub_1001199A8((uint64_t)v4, 2u, 104, 0);

    if (v120)
    {
      v121 = (void *)v4[15];
      if (v121)
      {
        v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 7));
        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "objectForKeyedSubscript:", v122));

      }
      else
      {
        v123 = 0;
      }
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v124 = (id)qword_1001E4708;
      v125 = v124;
      if (v124)
        v126 = (void *)*((_QWORD *)v124 + 6);
      else
        v126 = 0;
      v127 = v126;

      v128 = *(void **)(a1 + 96);
      v129 = v123;
      v176 = v128;
      if (v127)
      {
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v130 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v191, v190, 16);
        if (v130)
        {
          v131 = v130;
          v132 = 0;
          v133 = *(_QWORD *)v192;
          do
          {
            for (k = 0; k != v131; k = (char *)k + 1)
            {
              if (*(_QWORD *)v192 != v133)
                objc_enumerationMutation(v129);
              v135 = (void *)sub_100146D88(*(void **)(*((_QWORD *)&v191 + 1) + 8 * (_QWORD)k));
              if (v135)
              {
                if (!v132)
                  v132 = objc_alloc_init((Class)NSMutableArray);
                objc_msgSend(v132, "addObject:", v135);
              }

            }
            v131 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v191, v190, 16);
          }
          while (v131);
        }
        else
        {
          v132 = 0;
        }
        v136 = v127[16];
        if (v136)
          v136 = (_QWORD *)v136[9];
        v137 = v136;
        v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", v176));

        if (!v138
          || (v139 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", v132),
              v140 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", v138),
              v141 = objc_msgSend(v139, "isEqualToSet:", v140),
              v140,
              v139,
              (v141 & 1) == 0))
        {
          v173 = sub_10012FFF4((uint64_t)NRDLocalDevice, v176);
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            v142 = (void *)qword_1001E4AB0;
            v143 = v127[16];
            v144 = v142;
            if (v143)
              v145 = (void *)v143[9];
            else
              v145 = 0;
            v146 = v145;
            v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "objectForKeyedSubscript:", v176));
            _NRLogWithArgs(v144, 1, "%s%.30s:%-4d Setting the peer IR endpoints as %@ ----> %@ for %@", "", "-[NRLinkManagerWiFi setPeerIREndpoints:forNRUUID:]", 1102, v147, v132, v173);

          }
          v148 = v127[16];
          v149 = v148;
          v169 = v138;
          if (v148)
            v150 = (void *)*((_QWORD *)v148 + 9);
          else
            v150 = 0;
          v151 = v150;
          objc_msgSend(v151, "setObject:forKeyedSubscript:", v132, v176);

          v171 = (uint64_t)v127;
          v152 = objc_msgSend(v127[19], "copy");
          v181 = 0u;
          v182 = 0u;
          v183 = 0u;
          v184 = 0u;
          v153 = v152;
          v154 = objc_msgSend(v153, "countByEnumeratingWithState:objects:count:", &v181, &v186, 16);
          if (v154)
          {
            v155 = v154;
            v156 = *(_QWORD *)v182;
            do
            {
              for (m = 0; m != v155; m = (char *)m + 1)
              {
                if (*(_QWORD *)v182 != v156)
                  objc_enumerationMutation(v153);
                v158 = *(void **)(*((_QWORD *)&v181 + 1) + 8 * (_QWORD)m);
                if (objc_msgSend(v158, "subtype") == 104)
                {
                  v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "remoteOuterEndpoint"));
                  v160 = objc_msgSend(v132, "containsObject:", v159);

                  if ((v160 & 1) == 0)
                  {
                    v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "nrUUID"));
                    v162 = objc_msgSend(v161, "isEqual:", v176);

                    if (v162)
                      objc_msgSend(v158, "cancelWithReason:", CFSTR("Peer Wi-Fi endpoint changed"));
                  }
                }
              }
              v155 = objc_msgSend(v153, "countByEnumeratingWithState:objects:count:", &v181, &v186, 16);
            }
            while (v155);
          }

          v127 = (id *)v171;
          if (objc_msgSend(v132, "count"))
            sub_1001460B4(v171);
          else
            sub_1001466B8(v171);
          v4 = v174;
          v138 = v169;

        }
      }

    }
  }

}

void sub_1000D7704(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  void *v15;
  int IsLevelEnabled;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v21 = a2;
  if (!a1 || !*(_QWORD *)(a1 + 424) || objc_msgSend(v21, "state") == 255)
    goto LABEL_24;
  v3 = *(_QWORD **)(a1 + 424);
  if (v3)
    v3 = (_QWORD *)v3[10];
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUIDString"));
  objc_msgSend(v21, "setPeerToken:", v5);

  v6 = *(_QWORD **)(a1 + 424);
  if (v6)
    v6 = (_QWORD *)v6[11];
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString"));
  objc_msgSend(v21, "setLocalToken:", v8);

  if (objc_msgSend(v21, "type") == 5)
  {
    v10 = v21;
    v11 = v10;
    v12 = *(_QWORD *)(a1 + 424);
    v14 = 0;
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 48);
      if ((v13 & 1) != 0 && ((v13 & 2) != 0 || (*(_BYTE *)(v12 + 56) & 2) != 0))
        v14 = 1;
    }
    if (objc_msgSend(v10, "startRequested"))
    {
      if (!v11)
      {
        if (!v14)
          goto LABEL_21;
        goto LABEL_18;
      }
      if (v14 != (v11[208] != 0))
      {
LABEL_18:
        objc_msgSend(v11, "cancelWithReason:", CFSTR("classD support changed"));
LABEL_21:

        goto LABEL_22;
      }
    }
    else if (!v11)
    {
      goto LABEL_21;
    }
    v11[208] = v14;
    goto LABEL_21;
  }
LABEL_22:
  v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v9);
  IsLevelEnabled = _NRLogIsLevelEnabled(v15, 1);

  if (IsLevelEnabled)
  {
    v18 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "peerToken"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "localToken"));
    _NRLogWithArgs(v18, 1, "%s%.30s:%-4d updated peer token %@ local token %@", "", "-[NRDDeviceConductor updateLinkWithDiscoveredEndpoint:]", 7673, v19, v20);

  }
LABEL_24:

}

BOOL sub_1000D78EC(uint64_t a1, int a2, BOOL a3, char a4, int a5, void *a6)
{
  id v11;
  unsigned int v12;
  NRLinkDirectorRequest *v13;
  const char *v14;
  NRLinkDirectorRequest *v15;
  char v16;
  uint64_t v17;
  _BOOL8 complete;

  v11 = a6;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (a2)
      v12 = 3;
    else
      v12 = 2;
    sub_1000D8BE4(a1, v12);
    v13 = objc_alloc_init(NRLinkDirectorRequest);
    v15 = v13;
    if (v13)
    {
      if (a2)
        v16 = 2;
      else
        v16 = 3;
      v13->_type = v16;
      if (a2)
        v17 = 2;
      else
        v17 = 3;
      v13->_allowsSuspendedLink = byte_10015D030[v17];
      *(_BYTE *)(a1 + 37) = v16;
      if (a5)
        v13->_requiredLinkType = 1;
      objc_setProperty_nonatomic_copy(v13, v14, v11, 48);
      v15->_attemptImmediately = a3;
      sub_1000D320C(a1, v15);
      if ((a4 & 1) != 0 && !v15->_complete)
        sub_1000D5604(a1, v15);
      complete = v15->_complete;
    }
    else
    {
      *(_BYTE *)(a1 + 37) = 0;
      sub_1000D320C(a1, 0);
      complete = 0;
      if ((a4 & 1) != 0)
      {
        sub_1000D5604(a1, 0);
        complete = 0;
      }
    }

  }
  else
  {
    complete = 0;
  }

  return complete;
}

void sub_1000D7A20(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NRAnalyticsPreferWiFi *v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _BYTE *v38;
  void *v39;
  int v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *i;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[5];
  char v54;
  _BYTE v55[128];

  if (!a1)
    return;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if ((a2 & 1) == 0)
    *(_BYTE *)(a1 + 16) = 0;
  if (*(unsigned __int8 *)(a1 + 15) == a2)
    return;
  sub_1000D5060(a1, 1008, CFSTR("%d -> %d"), v4, v5, v6, v7, v8, *(unsigned __int8 *)(a1 + 15));
  v10 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v9);
  IsLevelEnabled = _NRLogIsLevelEnabled(v10, 1);

  if (IsLevelEnabled)
  {
    v13 = *(id *)(a1 + 96);
    v15 = (void *)_NRCopyLogObjectForNRUUID(v13, v14);
    v16 = *(unsigned __int8 *)(a1 + 15);

    _NRLogWithArgs(v15, 1, "%s%.30s:%-4d Setting prefer Wi-Fi request: %d -> %d", "", "-[NRDDeviceConductor setPreferWiFiRequest:]", 1827, v16, a2);
  }
  *(_BYTE *)(a1 + 15) = a2;
  if (*(_QWORD *)(a1 + 368))
  {
    if (a2)
      goto LABEL_9;
LABEL_18:
    if (*(_BYTE *)(a1 + 18))
    {
      v28 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v12);
      v29 = _NRLogIsLevelEnabled(v28, 1);

      if (v29)
      {
        v31 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v30);
        _NRLogWithArgs(v31, 1, "%s%.30s:%-4d Not cancelling Wi-Fi as we do not have good BT connectivity", "", "-[NRDDeviceConductor setPreferWiFiRequest:]", 1890);

      }
      v32 = sub_1000D8AA8(a1, 2, 102);
      if (objc_msgSend(v32, "startRequested"))
        objc_msgSend(v32, "suspend");

    }
    *(_BYTE *)(a1 + 20) = 0;
    *(_BYTE *)(a1 + 26) = 0;
    sub_1000D8BE4(a1, 2u);
    sub_1000D8BE4(a1, 7u);
    v33 = mach_absolute_time();
    v34 = *(_QWORD *)(a1 + 368);
    if (v34)
    {
      *(_QWORD *)(v34 + 24) = v33;
      v35 = *(void **)(a1 + 368);
    }
    else
    {
      v35 = 0;
    }
    objc_msgSend(v35, "submit");
    v36 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = 0;

    sub_1000D8E60(a1, 0);
    *(_BYTE *)(a1 + 53) = 0;
    v37 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = 0;

    sub_1000D8F08(a1);
    v38 = *(_BYTE **)(a1 + 624);
    if (v38 && (v38[16] & 1) != 0)
      sub_1000D8FF0(a1, v38);
    return;
  }
  v26 = objc_alloc_init(NRAnalyticsPreferWiFi);
  v27 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v26;

  if (!*(_BYTE *)(a1 + 15))
    goto LABEL_18;
LABEL_9:
  v17 = *(_QWORD *)(a1 + 584);
  if (v17)
  {
    if (objc_msgSend(*(id *)(a1 + 584), "cancelled"))
    {
      v19 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v17 + 16), v18);
      v20 = _NRLogIsLevelEnabled(v19, 2);

      if (v20)
      {
        v22 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v17 + 16), v21);
        _NRLogWithArgs(v22, 2, "%s%.30s:%-4d %@: cancelled, ignoring request", "", "-[NRAutoLinkUpgradeMonitor reportPreferWiFiRequest]", 440, v17);

      }
    }
  }
  v23 = mach_absolute_time();
  v24 = *(_QWORD *)(a1 + 368);
  if (v24)
    *(_QWORD *)(v24 + 16) = v23;
  sub_1000D7EAC(a1);
  if (sub_1000D7F4C(a1))
  {
    sub_1000D808C(a1);
  }
  else
  {
    v39 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v25);
    v40 = _NRLogIsLevelEnabled(v39, 1);

    if (v40)
    {
      v42 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v41);
      _NRLogWithArgs(v42, 1, "%s%.30s:%-4d Suspending BT link as we have prefer Wi-Fi request", "", "-[NRDDeviceConductor setPreferWiFiRequest:]", 1850);

    }
    sub_1000D816C(a1);
  }
  sub_1000D834C(a1);
  sub_1000D8588(a1);
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v43 = *(id *)(a1 + 432);
  v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
  if (v44)
  {
    v45 = v44;
    v46 = *(_QWORD *)v50;
    while (2)
    {
      for (i = 0; i != v45; i = (char *)i + 1)
      {
        if (*(_QWORD *)v50 != v46)
          objc_enumerationMutation(v43);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i), "unsignedCharValue") == 101)
        {
          v48 = (*(_QWORD *)(a1 + 592) >> 2) & 1;
          v53[0] = _NSConcreteStackBlock;
          v53[1] = 3221225472;
          v53[2] = sub_1000D8770;
          v53[3] = &unk_1001B74A8;
          v54 = v48;
          v53[4] = a1;
          sub_1000D8878(a1, 2, v48, v53);
          goto LABEL_42;
        }
      }
      v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
      if (v45)
        continue;
      break;
    }
  }
LABEL_42:

}

void sub_1000D7EAC(uint64_t a1)
{
  const char *v2;
  NRLinkDirectorRequest *self;

  if (a1 && !*(_BYTE *)(a1 + 8))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    sub_1000D8BE4(a1, 3u);
    self = objc_alloc_init(NRLinkDirectorRequest);
    if (self)
    {
      self->_type = 9;
      self->_allowsSuspendedLink = 1;
      objc_setProperty_nonatomic_copy(self, v2, 0, 48);
      self->_attemptImmediately = 1;
    }
    sub_1000D320C(a1, self);

  }
}

uint64_t sub_1000D7F4C(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  id v5;
  int IsLevelEnabled;
  id v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  objc_opt_self(NRLinkManagerWiFi);
  v2 = (unsigned __int8 *)sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!v2)
  {
    v5 = sub_1000D5594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 16);

    if (IsLevelEnabled)
    {
      v7 = sub_1000D5594();
      _NRLogWithArgs(v7, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "-[NRDDeviceConductor isAlwaysOnWiFiSupported]", 2300);

    }
    v8 = _os_log_pack_size(12);
    v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)(v11 + 4) = "-[NRDDeviceConductor isAlwaysOnWiFiSupported]";
    v12 = sub_1000D5594();
    _NRLogAbortWithPack(v12, v9);
  }
  v3 = v2[17];

  return v3;
}

void sub_1000D808C(uint64_t a1)
{
  NRLinkDirectorRequest *v2;
  const char *v3;
  NRLinkDirectorRequest *v4;
  void **newValue;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;

  if (a1 && (sub_1000D4C80(a1, 5) & 1) == 0)
  {
    v2 = objc_alloc_init(NRLinkDirectorRequest);
    v4 = v2;
    if (v2)
    {
      v2->_type = 5;
      v2->_allowsSuspendedLink = 0;
      v2->_requiredLinkType = 2;
      newValue = _NSConcreteStackBlock;
      v6 = 3221225472;
      v7 = sub_1000DA7AC;
      v8 = &unk_1001B8AE0;
      v9 = a1;
      objc_setProperty_nonatomic_copy(v2, v3, &newValue, 48);
    }
    else
    {
      newValue = _NSConcreteStackBlock;
      v6 = 3221225472;
      v7 = sub_1000DA7AC;
      v8 = &unk_1001B8AE0;
      v9 = a1;
    }
    sub_1000D320C(a1, v4);

  }
}

void sub_1000D816C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *StringFromNRLinkType;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v2 = sub_1000D8AA8(a1, 1, 0);
    v18 = v2;
    if (v2)
    {
      if (objc_msgSend(v2, "state") == 1
        || objc_msgSend(v18, "state") == 9
        || objc_msgSend(v18, "state") == 8)
      {
        v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
        IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

        if (IsLevelEnabled)
        {
          v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
          _NRLogWithArgs(v8, 1, "%s%.30s:%-4d Suspending link: %@", "", "-[NRDDeviceConductor suspendLinkOfType:]", 3198, v18);

        }
        objc_msgSend(v18, "suspend");
      }
      else
      {
        v14 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
        v15 = _NRLogIsLevelEnabled(v14, 1);

        if (v15)
        {
          v17 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v16);
          _NRLogWithArgs(v17, 1, "%s%.30s:%-4d Link will be suspended once it becomes ready: %@", "", "-[NRDDeviceConductor suspendLinkOfType:]", 3193, v18);

        }
        objc_msgSend(v18, "setSuspendWhenReady:", 1);
      }
    }
    else
    {
      v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      v10 = _NRLogIsLevelEnabled(v9, 1);

      if (v10)
      {
        v12 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
        StringFromNRLinkType = (void *)createStringFromNRLinkType(1);
        _NRLogWithArgs(v12, 1, "%s%.30s:%-4d Cannot suspend link as no link of type '%@' is available", "", "-[NRDDeviceConductor suspendLinkOfType:]", 3188, StringFromNRLinkType);

      }
    }

  }
}

void sub_1000D834C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  NRLinkDirectorRequest *v6;
  NRLinkDirectorRequest *v7;
  SEL v8;
  id v9;
  void *v10;
  unsigned int v11;
  BOOL v12;
  const char *v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  BOOL v18;
  void **newValue;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t v23;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(_BYTE *)(a1 + 20))
    {
      v3 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v2);
      IsLevelEnabled = _NRLogIsLevelEnabled(v3, 1);

      if (IsLevelEnabled)
      {
        v15 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v5);
        _NRLogWithArgs(v15, 1, "%s%.30s:%-4d prefer Wi-Fi timeout already set", "", "-[NRDDeviceConductor setPreferWiFiTimeout]", 2161);

      }
    }
    else
    {
      *(_BYTE *)(a1 + 20) = 1;
      v6 = objc_alloc_init(NRLinkDirectorRequest);
      v7 = v6;
      if (v6)
      {
        v6->_type = 7;
        v6->_allowsSuspendedLink = 0;
        objc_storeStrong((id *)&v6->_cancelIfLinkTypeReady, &off_1001C4AE0);
        newValue = _NSConcreteStackBlock;
        v20 = 3221225472;
        v21 = sub_1000DA2DC;
        v22 = &unk_1001B8AE0;
        v23 = a1;
        objc_setProperty_nonatomic_copy(v7, v8, &newValue, 24);
        v7->_attemptImmediately = 1;
        v7->_timeout = 60;
      }
      else
      {
        newValue = _NSConcreteStackBlock;
        v20 = 3221225472;
        v21 = sub_1000DA2DC;
        v22 = &unk_1001B8AE0;
        v23 = a1;
      }
      sub_1000D8E60(a1, 0);
      v9 = *(id *)(a1 + 432);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));

      if (v10)
      {
        v11 = objc_msgSend(v10, "unsignedCharValue");
        if (v11 - 105 >= 0xFFFFFFFD && v7)
        {
          v7->_attemptImmediately = 1;
          v7->_timeout = 15;
        }
        sub_1000D8E60(a1, v11 == 102);
        v12 = *(_BYTE *)(a1 + 52) != 0;
      }
      else
      {
        v12 = 0;
      }
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1000DA30C;
      v16[3] = &unk_1001B80F8;
      v16[4] = a1;
      v17 = v10;
      v18 = v12;
      v14 = v10;
      if (v7)
        objc_setProperty_nonatomic_copy(v7, v13, v16, 48);
      sub_1000D320C(a1, v7);

    }
  }
}

void sub_1000D8588(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;

  if (!a1)
    return;
  sub_1000D98D4(a1);
  if (*(_BYTE *)(a1 + 18))
  {
    sub_1000D9BA0(a1);
    v3 = (_BYTE *)(a1 + 15);
    if (!*(_BYTE *)(a1 + 15))
      goto LABEL_8;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 15))
      return;
    v3 = (_BYTE *)(a1 + 15);
  }
  sub_1000D834C(a1);
LABEL_8:
  v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v4, 1);

  if (IsLevelEnabled)
  {
    v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
    _NRLogWithArgs(v7, 1, "%s%.30s:%-4d supportsAWDL %d needsAWDL %d preferWiFiRequest %d", "", "-[NRDDeviceConductor enableWiFiAutojoin]", 2459, *(unsigned __int8 *)(a1 + 10), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 15));

  }
  if (*(_BYTE *)(a1 + 10) && *(_BYTE *)(a1 + 52) && *v3)
  {
    sub_1000D9D80(a1);
  }
  else
  {
    sub_1000D9ACC(a1, 1);
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v13 = sub_1000D8AA8(a1, 2, 101);
    if (v13 && objc_msgSend(v13, "state") != 255)
      objc_msgSend(v13, "start");
    if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 18) && !*v3 && !*(_BYTE *)(a1 + 28))
    {
      v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v8);
      v10 = _NRLogIsLevelEnabled(v9, 1);

      if (v10)
      {
        v12 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
        _NRLogWithArgs(v12, 1, "%s%.30s:%-4d not adding suspend BT request", "", "-[NRDDeviceConductor enableWiFiAutojoin]", 2488);

      }
    }
    else
    {
      sub_1000D808C(a1);
    }

  }
}

void sub_1000D8770(uint64_t a1)
{
  dispatch_queue_t *v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  dispatch_queue_t *v7;
  uint64_t v8;
  _DWORD *v9;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(dispatch_queue_t **)(a1 + 32);
    if (v2)
    {
      dispatch_assert_queue_V2(v2[13]);
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v3 = (id)qword_1001E4708;
      v4 = v3;
      if (v3)
        v5 = (void *)*((_QWORD *)v3 + 6);
      else
        v5 = 0;
      v6 = v5;

      if (v6)
        v2 = (dispatch_queue_t *)v6[7];
      else
        v2 = 0;
    }
    else
    {
      v6 = 0;
    }
    v7 = v2;

    if (!v7)
    {
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
      {
        v9 = *(id *)(v8 + 624);
        if (v9)
          v9[4] |= 8u;
      }
      else
      {
        v9 = 0;
      }

    }
  }
}

void sub_1000D8878(uint64_t a1, int a2, char a3, void *a4)
{
  void (**v7)(void);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _BYTE *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  void *v14;
  int IsLevelEnabled;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void (**v20)(void);

  v7 = a4;
  if (!*(_BYTE *)(a1 + 12))
    goto LABEL_36;
  v20 = v7;
  if (a2 == 1)
  {
    v9 = 616;
  }
  else
  {
    if (a2 != 2)
    {
      v14 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v8);
      IsLevelEnabled = _NRLogIsLevelEnabled(v14, 16);

      if (!IsLevelEnabled)
      {
        v10 = 0;
        goto LABEL_19;
      }
      v11 = (_BYTE *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v16);
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d unsupported report type %u", "", "-[NRDDeviceConductor copyLinkUpgradeReportForType:]", 5016, a2);
      v10 = 0;
      goto LABEL_17;
    }
    v9 = 624;
  }
  v10 = (int *)*(id *)(a1 + v9);
  if (v10)
    goto LABEL_18;
  v11 = (id)sub_100066F00([NRLinkUpgradeReport alloc], a2);
  v12 = objc_msgSend(*(id *)(a1 + 128), "type");
  if (v11)
    v11[11] = v12;
  v13 = objc_msgSend(*(id *)(a1 + 128), "subtype");
  if (v11)
  {
    v11[12] = v13;
    if (*(_BYTE *)(a1 + 30))
      *((_DWORD *)v11 + 4) |= 0x100u;
    if (*(_QWORD *)(a1 + 256))
      *((_DWORD *)v11 + 4) |= 0x200u;
  }
  v10 = (int *)v11;
LABEL_17:

LABEL_18:
  if (a2 == 2)
  {
    v17 = 624;
LABEL_25:
    objc_storeStrong((id *)(a1 + v17), v10);
    goto LABEL_26;
  }
LABEL_19:
  if (a2 == 1)
  {
    if (v10)
      v10[4] |= 0x800u;
    v17 = 616;
    goto LABEL_25;
  }
LABEL_26:
  if (v10)
  {
    if (!*((_QWORD *)v10 + 8))
    {
      *((_QWORD *)v10 + 8) = mach_absolute_time();
      *((_QWORD *)v10 + 9) = 0;
    }
    v18 = v10[4] | 1;
    v10[4] = v18;
    ++v10[6];
    if ((a3 & 1) != 0)
    {
      *((_QWORD *)v10 + 4) = *(_QWORD *)(a1 + 592);
      v19 = *((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 5) |= *(_QWORD *)(a1 + 600);
      if (!v19)
      {
        *((_QWORD *)v10 + 6) = mach_absolute_time();
        *((_QWORD *)v10 + 7) = 0;
        v18 = v10[4];
      }
      v10[4] = v18 | 2;
    }
    if ((~*(_DWORD *)(a1 + 592) & 6) == 0)
      v10[4] |= 0x10u;
  }
  else
  {
    mach_absolute_time();
    if ((a3 & 1) != 0)
      mach_absolute_time();
  }
  v20[2]();

  v7 = v20;
LABEL_36:

}

id sub_1000D8AA8(uint64_t a1, int a2, int a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (!a1)
    return 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = *(id *)(a1 + 112);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
LABEL_5:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v14 != v8)
        objc_enumerationMutation(v5);
      v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v9);
      if (objc_msgSend(v10, "type", (_QWORD)v13) == a2
        && objc_msgSend(v10, "subtype") == a3)
      {
        break;
      }
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (!v7)
          goto LABEL_12;
        goto LABEL_5;
      }
    }
    v11 = v10;
  }
  else
  {
LABEL_12:
    v11 = 0;
  }

  return v11;
}

void sub_1000D8BE4(uint64_t a1, unsigned int a2)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 *v9;
  id v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  void *v19;
  int IsLevelEnabled;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v4 = *(id *)(a1 + 120);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v23;
      while (2)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v23 != v7)
            objc_enumerationMutation(v4);
          v9 = *(unsigned __int8 **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v8);
          if (v9)
          {
            if (v9[10] == a2)
            {
              v17 = v9;

              sub_1000D5604(a1, v17);
              v19 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v18);
              IsLevelEnabled = _NRLogIsLevelEnabled(v19, 1);

              if (!IsLevelEnabled)
                goto LABEL_26;
              v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v21);
              if (a2 > 0xB)
                v16 = CFSTR("Unknown");
              else
                v16 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", (&off_1001B7B10)[a2]);
              _NRLogWithArgs(v15, 1, "%s%.30s:%-4d Removed request of type %@", "", "-[NRDDeviceConductor removeRequestOfType:]", 2674, v16, (_QWORD)v22);
              goto LABEL_25;
            }
          }
          else if (!a2)
          {
            goto LABEL_14;
          }
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
        v6 = v10;
        if (v10)
          continue;
        break;
      }
    }
LABEL_14:

    v12 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
    v13 = _NRLogIsLevelEnabled(v12, 1);

    if (v13)
    {
      v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v14);
      if (a2 > 0xB)
        v16 = CFSTR("Unknown");
      else
        v16 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", (&off_1001B7B10)[a2]);
      _NRLogWithArgs(v15, 1, "%s%.30s:%-4d Could not remove request of type %@", "", "-[NRDDeviceConductor removeRequestOfType:]", 2676, v16, (_QWORD)v22);
      v17 = 0;
LABEL_25:

    }
    else
    {
      v17 = 0;
    }
LABEL_26:

  }
}

void sub_1000D8E60(uint64_t a1, uint64_t a2)
{
  int v2;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  void *v7;

  if (a1)
  {
    v2 = a2;
    if (*(unsigned __int8 *)(a1 + 52) != (_DWORD)a2)
    {
      v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), a2);
      IsLevelEnabled = _NRLogIsLevelEnabled(v4, 0);

      if (IsLevelEnabled)
      {
        v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
        _NRLogWithArgs(v7, 0, "%s%.30s:%-4d needsAWDL %d -> %d", "", "-[NRDDeviceConductor setNeedsAWDL:]", 1456, *(unsigned __int8 *)(a1 + 52), v2);

      }
      *(_BYTE *)(a1 + 52) = v2;
    }
  }
}

void sub_1000D8F08(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;

  if (a1)
  {
    sub_1000D98D4(a1);
    v2 = sub_1000D8AA8(a1, 2, 102);
    v5 = v2;
    if (*(_BYTE *)(a1 + 18) || *(_BYTE *)(a1 + 15))
    {
      if (objc_msgSend(v2, "startRequested"))
        sub_1000D8588(a1);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 44))
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        v3 = sub_1000D8AA8(a1, 2, 101);
        v4 = v3;
        if (v3 && objc_msgSend(v3, "startRequested"))
          objc_msgSend(v4, "cancelWithReason:", CFSTR("Wi-Fi link is not needed anymore"));

      }
      sub_1000D8BE4(a1, 5u);
      sub_1000D9ACC(a1, 0);
      if (objc_msgSend(v5, "startRequested"))
        objc_msgSend(v5, "cancelWithReason:", CFSTR("not needed anymore"));
    }

  }
}

void sub_1000D8FF0(uint64_t a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  id v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NRAnalyticsLinkUpgradeReport *v34;
  id v35;
  double v36;
  double v37;
  uint64_t *v38;
  unint64_t v39;
  double v40;
  __objc2_prot *v41;
  double v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t *v50;
  void *v51;
  void *v52;
  __CFString *v53;
  void *v54;
  __CFString *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  int v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;

  v3 = a2;
  if (!a1 || !v3)
    goto LABEL_71;
  v5 = *((unsigned __int8 *)v3 + 8);
  v83 = v3;
  if (v5 != 2)
  {
    if (v5 != 1)
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
      IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

      v3 = v83;
      if (!IsLevelEnabled)
        goto LABEL_71;
      v13 = (_QWORD *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v12);
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d unsupported type", "", "-[NRDDeviceConductor submitLinkUpgradeReport:]", 5115);
      goto LABEL_70;
    }
    v6 = *(id *)(a1 + 184);
    v7 = v6;
    if (v6 && *((_BYTE *)v6 + 8))
      goto LABEL_7;
    v14 = *(id *)(a1 + 616);
    if (!v14 || !v14[8])
    {

LABEL_7:
      goto LABEL_8;
    }
    v15 = *(_QWORD *)(a1 + 616);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 72);

      if (v16)
        goto LABEL_8;
    }
    else
    {

    }
    v17 = mach_absolute_time();
    v18 = *(_QWORD *)(a1 + 616);
    if (v18)
      *(_QWORD *)(v18 + 72) = v17;
LABEL_8:
    if ((*(_BYTE *)(a1 + 592) & 2) == 0)
    {
      v8 = *(id *)(a1 + 616);
      if (v8 && v8[7] || (v24 = *(_QWORD *)(a1 + 616)) == 0)
      {

      }
      else
      {
        v25 = *(_QWORD *)(v24 + 48);

        if (v25)
        {
          v26 = mach_absolute_time();
          v27 = *(_QWORD *)(a1 + 616);
          if (v27)
            *(_QWORD *)(v27 + 56) = v26;
        }
      }
    }
    v28 = *(_QWORD *)(a1 + 184);
    v3 = v83;
    if (v28 && *(_BYTE *)(v28 + 8))
      goto LABEL_71;
    v29 = *(_QWORD *)(a1 + 592);
    if ((v29 & 2) != 0)
      goto LABEL_71;
    goto LABEL_45;
  }
  if (!*(_BYTE *)(a1 + 15))
  {
    v19 = *(id *)(a1 + 624);
    if (v19 && v19[8])
    {
      v20 = *(_QWORD *)(a1 + 624);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 72);

        if (v21)
          goto LABEL_13;
      }
      else
      {

      }
      v22 = mach_absolute_time();
      v23 = *(_QWORD *)(a1 + 624);
      if (v23)
        *(_QWORD *)(v23 + 72) = v22;
    }
    else
    {

    }
  }
LABEL_13:
  if ((*(_BYTE *)(a1 + 592) & 4) == 0)
  {
    v9 = *(id *)(a1 + 624);
    if (v9 && v9[7] || (v30 = *(_QWORD *)(a1 + 624)) == 0)
    {

    }
    else
    {
      v31 = *(_QWORD *)(v30 + 48);

      if (v31)
      {
        v32 = mach_absolute_time();
        v33 = *(_QWORD *)(a1 + 624);
        if (v33)
          *(_QWORD *)(v33 + 56) = v32;
      }
    }
  }
  v3 = v83;
  if (!*(_BYTE *)(a1 + 15))
  {
    v29 = *(_QWORD *)(a1 + 592);
    if ((v29 & 4) == 0)
    {
LABEL_45:
      v3[12] = v29;
      v3[13] |= *(_QWORD *)(a1 + 600);
      v34 = [NRAnalyticsLinkUpgradeReport alloc];
      v35 = objc_alloc_init((Class)NSMutableDictionary);
      v38 = v83;
      v39 = v83[6];
      v40 = 0.0;
      v41 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
      v42 = 0.0;
      if (v39)
      {
        v43 = v83[7];
        v44 = v43 >= v39;
        v45 = v43 - v39;
        if (v45 != 0 && v44)
        {
          if (qword_1001E48A8 != -1)
          {
            v81 = v45;
            dispatch_once(&qword_1001E48A8, &stru_1001B7C30);
            v45 = v81;
            v38 = v83;
            v41 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
          }
          LODWORD(v36) = dword_1001E48B0;
          LODWORD(v37) = *(_DWORD *)algn_1001E48B4;
          v37 = (double)*(unint64_t *)&v37;
          v36 = 0.000000001 * (double)*(unint64_t *)&v36;
          v42 = (double)v45 * v36 / v37;
        }
      }
      v46 = v38[8];
      if (v46)
      {
        v47 = v38[9];
        v44 = v47 >= v46;
        v48 = v47 - v46;
        if (v48 != 0 && v44)
        {
          if (v41[30].inst_props != (__objc2_prop_list *)-1)
          {
            v82 = v48;
            dispatch_once(&qword_1001E48A8, &stru_1001B7C30);
            v48 = v82;
          }
          LODWORD(v36) = dword_1001E48B0;
          LODWORD(v37) = *(_DWORD *)algn_1001E48B4;
          v40 = (double)v48 * (0.000000001 * (double)*(unint64_t *)&v36) / (double)*(unint64_t *)&v37;
        }
      }
      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v83 + 8)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v49, CFSTR("upgradeType"));

      v50 = v83;
      if (v83[4] || v83[12])
      {
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
        objc_msgSend(v35, "setObject:forKeyedSubscript:", v51, CFSTR("startAdvice"));

        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v83[12]));
        objc_msgSend(v35, "setObject:forKeyedSubscript:", v52, CFSTR("endAdvice"));

        v53 = sub_1000671E0(v83[5]);
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        objc_msgSend(v35, "setObject:forKeyedSubscript:", v54, CFSTR("startReason"));

        v55 = sub_1000671E0(v83[13]);
        v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
        objc_msgSend(v35, "setObject:forKeyedSubscript:", v56, CFSTR("endReason"));

        v50 = v83;
      }
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v50 + 9)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v57, CFSTR("thermalState"));

      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v83 + 10)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v58, CFSTR("battery"));

      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)v42));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v59, CFSTR("adviceDuration"));

      if (v40 > 0.0)
      {
        v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", (unint64_t)v40));
        objc_msgSend(v35, "setObject:forKeyedSubscript:", v60, CFSTR("clientTriggerDuration"));

        if (v42 > 0.0)
        {
          v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v83[6] <= (unint64_t)v83[8]));
          objc_msgSend(v35, "setObject:forKeyedSubscript:", v61, CFSTR("adviceStartBeforeClient"));

          v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v83[7] <= (unint64_t)v83[9]));
          objc_msgSend(v35, "setObject:forKeyedSubscript:", v62, CFSTR("adviceEndBeforeClient"));

        }
      }
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v83 + 11)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v63, CFSTR("primaryLinkType"));

      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v83 + 12)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v64, CFSTR("primaryLinkSubtype"));

      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v83 + 5)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v65, CFSTR("adviceCount"));

      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v83 + 6)));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v66, CFSTR("clientTriggerCount"));

      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v83[2] & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v67, CFSTR("clientTriggered"));

      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 1) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v68, CFSTR("aluTriggered"));

      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 11) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v69, CFSTR("upgradeSuccessful"));

      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 2) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v70, CFSTR("againstWRM"));

      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 3) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v71, CFSTR("advisedWithNoLink"));

      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 4) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v72, CFSTR("overlappingAdvice"));

      v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 5) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v73, CFSTR("pluggedIn"));

      v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 6) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v74, CFSTR("lowPowerMode"));

      v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 8) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v75, CFSTR("activePhoneCall"));

      v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 9) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v76, CFSTR("dtcRequest"));

      v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (*((_DWORD *)v83 + 4) >> 10) & 1));
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v77, CFSTR("thermalWorsened"));

      v13 = sub_100121C94(v34, v35);
      objc_msgSend(v13, "submit");
      v78 = *((unsigned __int8 *)v83 + 8);
      if (v78 == 1)
      {
        v79 = 616;
        goto LABEL_69;
      }
      if (v78 == 2)
      {
        v79 = 624;
LABEL_69:
        v80 = *(void **)(a1 + v79);
        *(_QWORD *)(a1 + v79) = 0;

      }
LABEL_70:

      v3 = v83;
    }
  }
LABEL_71:

}

void sub_1000D98D4(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id *v14;
  id v15;

  if (*(_BYTE *)(a1 + 18))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v2 = sub_1000D8AA8(a1, 1, 0);
    v3 = v2;
    if (*(_BYTE *)(a1 + 28) && objc_msgSend(v2, "state") > 7)
      v4 = 0;
    else
      v4 = 2;

  }
  else
  {
    v4 = 0;
  }
  if (*(_BYTE *)(a1 + 15))
    v5 = v4 | 4;
  else
    v5 = v4;
  if (!v5)
  {
    v15 = 0;
    goto LABEL_26;
  }
  v15 = objc_alloc_init((Class)NSMutableArray);
  if (!*(_BYTE *)(a1 + 18))
  {
    if (!*(_BYTE *)(a1 + 15))
      goto LABEL_26;
    if (*(_BYTE *)(a1 + 8))
      goto LABEL_19;
  }
  objc_msgSend(v15, "addObject:", CFSTR("terminusd"));
  if (*(_BYTE *)(a1 + 15))
  {
    if (*(_BYTE *)(a1 + 8))
    {
LABEL_19:
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v6 = (id)qword_1001E4708;
      v7 = v6;
      if (v6)
        v8 = (void *)*((_QWORD *)v6 + 12);
      else
        v8 = 0;
      v9 = v8;
      v10 = sub_10006062C((uint64_t)v9);

      if (objc_msgSend(v10, "count"))
        objc_msgSend(v15, "addObjectsFromArray:", v10);

    }
  }
LABEL_26:
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v11 = (id)qword_1001E4708;
  v12 = v11;
  if (v11)
    v13 = (void *)*((_QWORD *)v11 + 6);
  else
    v13 = 0;
  v14 = v13;

  sub_100148BF4(v14, v5, *(void **)(a1 + 96), v15);
}

void sub_1000D9ACC(uint64_t a1, int a2)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  if ((a2 & 1) != 0 || !*(_BYTE *)(a1 + 18) && !*(_BYTE *)(a1 + 15))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v4 = (id)qword_1001E4708;
    v5 = v4;
    if (v4)
      v6 = (void *)*((_QWORD *)v4 + 6);
    else
      v6 = 0;
    v7 = v6;

    sub_100147674((uint64_t)v7, a2, *(void **)(a1 + 96));
  }
}

void sub_1000D9BA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  NRLinkDirectorRequest *v6;
  NRLinkDirectorRequest *v7;
  SEL v8;
  SEL v9;
  id v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void *v14;
  uint64_t v15;
  void **newValue;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  uint64_t v20;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(_BYTE *)(a1 + 19))
    {
      v3 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v2);
      IsLevelEnabled = _NRLogIsLevelEnabled(v3, 1);

      if (IsLevelEnabled)
      {
        v10 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v5);
        _NRLogWithArgs(v10, 1, "%s%.30s:%-4d Wi-Fi bring up timeout already set", "", "-[NRDDeviceConductor setWiFiLinkBringUpTimeout]", 2250);

      }
    }
    else
    {
      *(_BYTE *)(a1 + 19) = 1;
      v6 = objc_alloc_init(NRLinkDirectorRequest);
      v7 = v6;
      if (v6)
      {
        v6->_type = 6;
        v6->_allowsSuspendedLink = 0;
        objc_storeStrong((id *)&v6->_timerDescription, CFSTR("WiFi-bringup-timeout"));
        objc_storeStrong((id *)&v7->_cancelIfLinkTypeReady, &off_1001C4AF8);
        newValue = _NSConcreteStackBlock;
        v17 = 3221225472;
        v18 = sub_1000D9E8C;
        v19 = &unk_1001B8AE0;
        v20 = a1;
        objc_setProperty_nonatomic_copy(v7, v8, &newValue, 24);
        v7->_attemptImmediately = 1;
        v7->_timeout = 60;
        v7->_deferIfRequestExists = 5;
        v11 = _NSConcreteStackBlock;
        v12 = 3221225472;
        v13 = sub_1000D9E9C;
        v14 = &unk_1001B8AE0;
        v15 = a1;
        objc_setProperty_nonatomic_copy(v7, v9, &v11, 48);
      }
      else
      {
        v15 = a1;
        newValue = _NSConcreteStackBlock;
        v17 = 3221225472;
        v18 = sub_1000D9E8C;
        v19 = &unk_1001B8AE0;
        v20 = a1;
        v11 = _NSConcreteStackBlock;
        v12 = 3221225472;
        v13 = sub_1000D9E9C;
        v14 = &unk_1001B8AE0;
      }
      sub_1000D320C(a1, v7);

    }
  }
}

void sub_1000D9D80(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  void *v7;
  id v8;

  if (a1 && *(_BYTE *)(a1 + 10))
  {
    v2 = sub_1000D8AA8(a1, 2, 102);
    v8 = v2;
    if (v2)
    {
      if ((objc_msgSend(v2, "startRequested") & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 52) || *(_BYTE *)(a1 + 39) == 2)
        {
          objc_msgSend(v8, "start");
          if (!*(_BYTE *)(a1 + 57))
            sub_1000D808C(a1);
        }
        else
        {
          sub_1000D8BE4(a1, 5u);
        }
      }
    }
    else
    {
      v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      IsLevelEnabled = _NRLogIsLevelEnabled(v4, 1);

      if (IsLevelEnabled)
      {
        v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
        _NRLogWithArgs(v7, 1, "%s%.30s:%-4d no awdl link available", "", "-[NRDDeviceConductor startAWDLIfNeeded]", 3941);

      }
    }

  }
}

uint64_t sub_1000D9E8C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    *(_BYTE *)(v1 + 19) = 0;
  return result;
}

void sub_1000D9E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(_QWORD *)(v3 + 96);
  else
    v4 = 0;
  v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

  if (IsLevelEnabled)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 96);
    else
      v9 = 0;
    v10 = (void *)_NRCopyLogObjectForNRUUID(v9, v7);
    _NRLogWithArgs(v10, 1, "%s%.30s:%-4d WiFi link failed to become ready in 60s. Giving up Wi-Fi assertion", "", "-[NRDDeviceConductor setWiFiLinkBringUpTimeout]_block_invoke_2", 2269);

  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    *(_BYTE *)(v11 + 19) = 0;
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 592) & 4) == 0
        || (v13 = *(void **)(v12 + 584),
            v14 = *(void **)(v12 + 608),
            v15 = v13,
            sub_10006762C(v15, v14),
            v15,
            (v12 = *(_QWORD *)(a1 + 32)) != 0))
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v12 + 104));
        sub_1000D9FAC(v12, 0, 10);
      }
    }
  }
}

void sub_1000D9FAC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  int v14;
  _QWORD *v15;
  void *v16;
  NRLinkDirectorRequest *v17;
  NRLinkDirectorRequest *v18;
  SEL v19;
  NSObject *v20;
  NRLinkDirectorRequest *v21;
  const char *v22;
  NRLinkDirectorRequest *v23;
  id v24;
  void **newValue;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  _QWORD block[4];
  NRLinkDirectorRequest *v31;
  _QWORD v32[5];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (*(unsigned __int8 *)(a1 + 18) != a2)
  {
    v7 = *(unsigned __int8 *)(a1 + 23);
    v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 1);

    if (v7)
    {
      if (IsLevelEnabled)
      {
        v24 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v10);
        _NRLogWithArgs(v24, 1, "%s%.30s:%-4d Range extension disabled. Not bringing up Wi-Fi immediately", "", "-[NRDDeviceConductor setBringUpWiFiImmediatelyInner:timeout:addSuspendBTRequest:]", 1960);

      }
    }
    else
    {
      if (IsLevelEnabled)
      {
        v11 = *(id *)(a1 + 96);
        v13 = (void *)_NRCopyLogObjectForNRUUID(v11, v12);
        v14 = *(unsigned __int8 *)(a1 + 18);

        _NRLogWithArgs(v13, 1, "%s%.30s:%-4d Setting bringUpWiFiImmediately: %d -> %d", "", "-[NRDDeviceConductor setBringUpWiFiImmediatelyInner:timeout:addSuspendBTRequest:]", 1964, v14, a2);
      }
      *(_BYTE *)(a1 + 18) = a2;
      if (a2)
      {
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000DA288;
        v32[3] = &unk_1001B8AE0;
        v32[4] = a1;
        v15 = objc_retainBlock(v32);
        v16 = v15;
        if (a3)
        {
          v17 = objc_alloc_init(NRLinkDirectorRequest);
          v18 = v17;
          if (v17)
          {
            v17->_type = 6;
            v17->_allowsSuspendedLink = 0;
            objc_storeStrong((id *)&v17->_timerDescription, CFSTR("WiFi-bringup-hysteresis"));
            objc_storeStrong((id *)&v18->_cancelIfLinkTypeReady, &off_1001C4AC8);
            v18->_attemptImmediately = 1;
            v18->_timeout = a3;
            objc_setProperty_nonatomic_copy(v18, v19, v16, 48);
          }
          sub_1000D320C(a1, v18);
        }
        else
        {
          v20 = *(NSObject **)(a1 + 104);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000DA290;
          block[3] = &unk_1001B89B8;
          v31 = v15;
          dispatch_async(v20, block);
          v18 = v31;
        }

        v21 = objc_alloc_init(NRLinkDirectorRequest);
        v23 = v21;
        if (v21)
        {
          *(_WORD *)&v21->_type = 1284;
          v21->_allowsSuspendedLink = 0;
          v21->_requiredLinkType = 1;
          newValue = _NSConcreteStackBlock;
          v26 = 3221225472;
          v27 = sub_1000DA29C;
          v28 = &unk_1001B8AE0;
          v29 = a1;
          objc_setProperty_nonatomic_copy(v21, v22, &newValue, 48);
        }
        else
        {
          newValue = _NSConcreteStackBlock;
          v26 = 3221225472;
          v27 = sub_1000DA29C;
          v28 = &unk_1001B8AE0;
          v29 = a1;
        }
        sub_1000D320C(a1, v23);

      }
      else
      {
        sub_1000D8BE4(a1, 4u);
        sub_1000D8F08(a1);
      }
    }
  }
}

void sub_1000DA288(uint64_t a1)
{
  sub_1000D8588(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1000DA290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000DA29C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    return sub_1000D9FAC(v1, 0, 10);
  }
  return result;
}

uint64_t sub_1000DA2DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 368);
    if (!v2 || (*(_QWORD *)(v2 + 40) = 1, (v1 = *(_QWORD *)(result + 32)) != 0))
      *(_BYTE *)(v1 + 20) = 0;
  }
  return result;
}

void sub_1000DA30C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *StringFromNRLinkSubtype;
  int v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int IsLevelEnabled;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && *(_BYTE *)(v2 + 20))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      objc_msgSend(*(id *)(v2 + 432), "removeObject:");
      v2 = *(_QWORD *)(a1 + 32);
    }
    sub_1000D8E60(v2, 0);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 && (*(_BYTE *)(v3 + 20) = 0, (v4 = *(_QWORD *)(a1 + 32)) != 0))
      v5 = *(void **)(v4 + 432);
    else
      v5 = 0;
    v6 = objc_msgSend(v5, "count");
    v8 = *(_QWORD *)(a1 + 32);
    if (!v6)
    {
      if (v8 && ((v21 = *(_QWORD *)(v8 + 368)) == 0 || (*(_QWORD *)(v21 + 32) = 1, (v8 = *(_QWORD *)(a1 + 32)) != 0)))
        v22 = *(_QWORD *)(v8 + 96);
      else
        v22 = 0;
      v23 = (void *)_NRCopyLogObjectForNRUUID(v22, v7);
      IsLevelEnabled = _NRLogIsLevelEnabled(v23, 1);

      if (IsLevelEnabled)
      {
        v32 = *(_QWORD *)(a1 + 32);
        if (v32)
          v33 = *(_QWORD *)(v32 + 96);
        else
          v33 = 0;
        v34 = (void *)_NRCopyLogObjectForNRUUID(v33, v25);
        _NRLogWithArgs(v34, 1, "%s%.30s:%-4d WiFi link failed to become ready in 60s. Could not honor prefer Wi-Fi ", "", "-[NRDDeviceConductor setPreferWiFiTimeout]_block_invoke_2", 2234);

      }
      sub_1000DA624(*(_QWORD *)(a1 + 32), CFSTR("WiFi link did not come up"), v26, v27, v28, v29, v30, v31, v42);
      v35 = *(_QWORD *)(a1 + 32);
      if (v35
        && ((*(_BYTE *)(v35 + 592) & 4) == 0
         || (v36 = *(void **)(v35 + 608),
             v37 = *(id *)(v35 + 584),
             sub_10006762C(v37, v36),
             v37,
             (v35 = *(_QWORD *)(a1 + 32)) != 0)))
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v35 + 104));
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v38 = (id)qword_1001E4708;
        v39 = v38;
        if (v38)
          v40 = (void *)*((_QWORD *)v38 + 6);
        else
          v40 = 0;
        v43 = v40;

        sub_100148E24((uint64_t)v43);
      }
      else
      {
        v43 = 0;
        sub_100148E24(0);
      }
      goto LABEL_35;
    }
    if (v8)
      v9 = *(_QWORD *)(v8 + 96);
    else
      v9 = 0;
    v10 = (void *)_NRCopyLogObjectForNRUUID(v9, v7);
    v11 = _NRLogIsLevelEnabled(v10, 0);

    if (v11)
    {
      v12 = *(_QWORD **)(a1 + 32);
      if (v12)
        v12 = (_QWORD *)v12[12];
      v13 = v12;
      v15 = (void *)_NRCopyLogObjectForNRUUID(v13, v14);
      v16 = objc_msgSend(*(id *)(a1 + 40), "unsignedCharValue");

      StringFromNRLinkSubtype = (void *)createStringFromNRLinkSubtype(v16);
      _NRLogWithArgs(v15, 0, "%s%.30s:%-4d Failed to upgrade to %@, trying next link", "", "-[NRDDeviceConductor setPreferWiFiTimeout]_block_invoke_2", 2215, StringFromNRLinkSubtype);

    }
    sub_1000D834C(*(_QWORD *)(a1 + 32));
    v18 = *(unsigned __int8 *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 32);
    if (v18)
    {
      v43 = sub_1000D8AA8(v19, 2, 102);
      if (objc_msgSend(v43, "startRequested"))
      {
        v20 = CFSTR("AWDL link is not needed anymore");
LABEL_18:
        objc_msgSend(v43, "cancelWithReason:", v20);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    if (!v19)
    {
      v41 = 0;
      goto LABEL_36;
    }
    if (!*(_BYTE *)(v19 + 44))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v19 + 104));
      v41 = sub_1000D8AA8(v19, 2, 101);
      if (!v41)
        goto LABEL_36;
      v43 = v41;
      if (objc_msgSend(v41, "startRequested"))
      {
        v20 = CFSTR("Wi-Fi link is not needed anymore");
        goto LABEL_18;
      }
LABEL_35:
      v41 = v43;
LABEL_36:

    }
  }
}

void sub_1000DA624(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  int IsLevelEnabled;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;

  if (a1)
  {
    v10 = *(NSObject **)(a1 + 104);
    v11 = a2;
    dispatch_assert_queue_V2(v10);
    v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v11, &a9);

    v14 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v13);
    IsLevelEnabled = _NRLogIsLevelEnabled(v14, 1);

    if (IsLevelEnabled)
    {
      v17 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v16);
      _NRLogWithArgs(v17, 1, "%s%.30s:%-4d Rejecting prefer Wi-Fi request: %@", "", "-[NRDDeviceConductor rejectPreferWiFiRequest:]", 3139, v12);

    }
    sub_100121E18(*(void **)(a1 + 96), 1009, 0, v12);
    *(_BYTE *)(a1 + 16) = 0;
    if (*(_BYTE *)(a1 + 15))
    {
      if (*(_BYTE *)(a1 + 20))
        *(_BYTE *)(a1 + 20) = 0;
      sub_1000D78EC(a1, 0, 1, 0, 0, 0);
      sub_1000D7A20(a1, 0);
      *(_QWORD *)(a1 + 400) = mach_absolute_time();
    }
    else
    {
      v19 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v18);
      v20 = _NRLogIsLevelEnabled(v19, 1);

      if (v20)
      {
        v22 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v21);
        _NRLogWithArgs(v22, 1, "%s%.30s:%-4d ... we never had a prefer Wi-Fi request", "", "-[NRDDeviceConductor rejectPreferWiFiRequest:]", 3144);

      }
    }

  }
}

void sub_1000DA7AC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    v2 = sub_1000D8AA8(v1, 1, 0);
    if (v2)
    {
      v3 = v2;
      if (objc_msgSend(v2, "state") != 255)
      {
        if (objc_msgSend(v3, "state") == 8)
        {
          objc_msgSend(v3, "suspend");
        }
        else if (objc_msgSend(v3, "state") != 9)
        {
          objc_msgSend(v3, "setSuspendWhenReady:", 1);
        }
      }
      v2 = v3;
    }
  }
  else
  {
    v2 = 0;
  }

}

void sub_1000DA844(uint64_t a1, char a2)
{
  NRLinkDirectorRequest *v4;
  NRLinkDirectorRequest *v5;
  NRLinkDirectorRequest *v6;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(_BYTE *)(a1 + 44))
    {
      v4 = objc_alloc_init(NRLinkDirectorRequest);
      v6 = v4;
      if (v4)
      {
        v4->_type = 1;
        v4->_requiredLinkType = 1;
        *(_WORD *)&v4->_attemptImmediately = 257;
        sub_1000D320C(a1, v4);
        v5 = v6;
        if ((a2 & 1) == 0 || v6->_complete)
          goto LABEL_7;
      }
      else
      {
        sub_1000D320C(a1, 0);
        v5 = 0;
        if ((a2 & 1) == 0)
          goto LABEL_7;
      }
      sub_1000D5604(a1, v6);
      v5 = v6;
LABEL_7:

    }
  }
}

void sub_1000DA8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 26))
    {
      *(_BYTE *)(v3 + 26) = 0;
      return;
    }
    v4 = *(_QWORD *)(v3 + 96);
  }
  else
  {
    v4 = 0;
  }
  v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 17);

  if (IsLevelEnabled)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 96);
    else
      v9 = 0;
    v10 = (id)_NRCopyLogObjectForNRUUID(v9, v7);
    _NRLogWithArgs(v10, 17, "Sent prefer Wi-Fi request when we didn't have a pending request");

  }
}

void sub_1000DA9AC(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  if (*(_BYTE *)(a1 + 40))
  {
    v1 = *(_QWORD *)(a1 + 32);
    if (v1)
    {
      if (!*(_BYTE *)(v1 + 28))
      {
        v2 = *(id *)(v1 + 616);
        if (v2)
          v2[4] |= 8u;

      }
    }
    else
    {

    }
  }
}

void sub_1000DAA00(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NRLinkDirectorRequest *v10;
  const char *v11;
  NRLinkDirectorRequest *v12;
  void *v13;
  int v14;
  id v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  id v21;
  void **newValue;
  uint64_t v23;
  void (*v24)(uint64_t);
  void *v25;
  uint64_t v26;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v2 = (unsigned __int8 *)(id)qword_1001E4708;
    if (v2 && (v4 = v2[8], v2, v4))
    {
      v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

      if (IsLevelEnabled)
      {
        v21 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
        _NRLogWithArgs(v21, 0, "%s%.30s:%-4d Not starting QR link as conductor is operating in fixed interface mode");
LABEL_8:

      }
    }
    else if (*(_BYTE *)(a1 + 31))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      v9 = sub_1000D8AA8(a1, 4, 0);
      if (v9)
      {
        *(_QWORD *)(a1 + 224) = mach_continuous_time();
        objc_msgSend(v9, "start");
        v10 = objc_alloc_init(NRLinkDirectorRequest);
        v12 = v10;
        if (v10)
        {
          v10->_type = 8;
          v10->_allowsSuspendedLink = 0;
          v10->_requiredLinkType = 1;
          newValue = _NSConcreteStackBlock;
          v23 = 3221225472;
          v24 = sub_1000DACB0;
          v25 = &unk_1001B8AE0;
          v26 = a1;
          objc_setProperty_nonatomic_copy(v10, v11, &newValue, 48);
        }
        else
        {
          newValue = _NSConcreteStackBlock;
          v23 = 3221225472;
          v24 = sub_1000DACB0;
          v25 = &unk_1001B8AE0;
          v26 = a1;
        }
        sub_1000D320C(a1, v12);

      }
      else
      {
        v17 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v8);
        v18 = _NRLogIsLevelEnabled(v17, 0);

        if (v18)
        {
          v20 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v19);
          _NRLogWithArgs(v20, 0, "%s%.30s:%-4d No quick relay link", "", "-[NRDDeviceConductor startQuickRelayLinkIfApplicable:]", 1366);

        }
      }

    }
    else
    {
      v13 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      v14 = _NRLogIsLevelEnabled(v13, 0);

      if (v14)
      {
        v15 = *(id *)(a1 + 96);
        v21 = (id)_NRCopyLogObjectForNRUUID(v15, v16);

        _NRLogWithArgs(v21, 0, "%s%.30s:%-4d Not starting quick relay link (hasQuickRelayRequest=%d, apsIsConnected=%d)");
        goto LABEL_8;
      }
    }
  }
}

void sub_1000DACB0(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    v3 = sub_1000D8AA8(v1, 4, 0);
    v2 = objc_msgSend(v3, "ikeClassDEstablished");
  }
  else
  {
    v3 = 0;
    v2 = objc_msgSend(0, "ikeClassDEstablished");
  }
  if ((v2 & 1) != 0 || objc_msgSend(v3, "ikeClassCEstablished"))
    objc_msgSend(v3, "suspend");
  else
    objc_msgSend(v3, "cancelWithReason:", CFSTR("BT reconnected"));

}

void sub_1000DAD34(uint64_t a1)
{
  xpc_object_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (objc_msgSend(*(id *)(a1 + 168), "count"))
    {
      v2 = xpc_dictionary_create(0, 0, 0);
      if (!v2)
      {
        v9 = sub_1000D5594();
        IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

        if (IsLevelEnabled)
        {
          v11 = sub_1000D5594();
          _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

        }
        v12 = _os_log_pack_size(38);
        v13 = (char *)&v17 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v14 = __error();
        v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
        sub_1000DAF48(v15, (uint64_t)"nr_xpc_dictionary_create");
        v16 = sub_1000D5594();
        _NRLogAbortWithPack(v16, v13);
      }
      v3 = v2;
      sub_1000DAF7C(a1, v2);

      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v4 = *(id *)(a1 + 168);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v18;
        do
        {
          v8 = 0;
          do
          {
            if (*(_QWORD *)v18 != v7)
              objc_enumerationMutation(v4);
            xpc_connection_send_message(*(xpc_connection_t *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v8), v3);
            v8 = (char *)v8 + 1;
          }
          while (v6 != v8);
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        }
        while (v6);
      }

    }
  }
}

double sub_1000DAF48(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 136446978;
  *(_DWORD *)a1 = 136446978;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = 0;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = 0;
  return result;
}

id sub_1000DAF7C(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  _BOOL4 v14;
  void *v15;
  int IsLevelEnabled;
  id v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  BOOL v21;
  id v22;
  _BYTE *v23;
  void *v24;
  id v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  BOOL v28;
  unsigned int v29;
  int v31;
  void *v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  BOOL v36;
  int v37;
  int v38;

  v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  v4 = *(unsigned __int8 *)(a1 + 27);
  v5 = *(unsigned __int8 *)(a1 + 28);
  v6 = *(_BYTE *)(a1 + 28) != 0;
  v7 = *(unsigned __int8 *)(a1 + 29);
  v33 = *(_DWORD *)(a1 + 88);
  v8 = *(unsigned __int8 *)(a1 + 63);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  v9 = *(id *)(a1 + 128);
  v37 = v7;
  v38 = v8;
  v36 = v6;
  if (objc_msgSend(v9, "state") != 8)
  {
    v13 = 0;
    v14 = 0;
    v34 = 0;
    v35 = 0;
    v12 = 0;
    LOBYTE(v10) = 0;
    goto LABEL_14;
  }
  v10 = objc_msgSend(v9, "type");
  v35 = objc_msgSend(v9, "subtype");
  v34 = objc_msgSend(v9, "ikeClassCEstablished");
  if (v10 - 1 < 2)
    goto LABEL_47;
  if (v10 == 4)
  {
    v14 = 0;
    v12 = 0;
    v13 = 1;
    goto LABEL_14;
  }
  if (v10 == 5)
  {
LABEL_47:
    if (*(_QWORD *)(a1 + 448) && *(_QWORD *)(a1 + 464))
    {
      v12 = (void *)NEVirtualInterfaceCopyName();
      v13 = 0;
      v14 = 1;
    }
    else
    {
      v13 = 0;
      v12 = 0;
      v14 = 1;
    }
  }
  else
  {
    v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

    if (IsLevelEnabled)
    {
      v17 = *(id *)(a1 + 96);
      v19 = (void *)_NRCopyLogObjectForNRUUID(v17, v18);
      _NRLogWithArgs(v19, 17, "Link is ready when the link type is unknown/unsupported: %@", v9);

    }
    v13 = 0;
    v14 = 0;
    v12 = 0;
  }
LABEL_14:
  if (v4)
    v20 = v5 == 0;
  else
    v20 = 1;
  v21 = !v20;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  v22 = sub_1000D8AA8(a1, 4, 0);

  if (v22 && objc_msgSend(v22, "state") == 8)
    v13 = 1;
  if (v14)
  {
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v32 = v12;
    v23 = (id)qword_1001E4708;
    v24 = v23;
    if (v23 && v23[8])
    {
      v25 = v3;

LABEL_29:
      if (qword_1001E4870 != -1)
        dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
      v3 = v25;
      if (byte_1001E4868)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        v26 = objc_msgSend(*(id *)(a1 + 128), "ikeClassCEstablished");
        v21 = 0;
        v27 = 0;
        v28 = 1;
        LOBYTE(v10) = 1;
      }
      else
      {
        v21 = 0;
        v27 = 101;
        LOBYTE(v10) = 2;
        v28 = 1;
        v26 = 1;
      }
      v29 = v33;
      goto LABEL_43;
    }
    v25 = v3;
    if (qword_1001E4870 == -1)
    {
      if (byte_1001E4868)
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
      if (byte_1001E4868)
      {
LABEL_36:
        v31 = *(unsigned __int8 *)(a1 + 48);

        if (v31)
          goto LABEL_29;
LABEL_42:
        v29 = v33;
        v26 = v34;
        v27 = v35;
        v28 = v36;
LABEL_43:
        v12 = v32;
        goto LABEL_44;
      }
    }

    goto LABEL_42;
  }
  v29 = 0;
  v27 = v35;
  v28 = v36;
  v26 = v34;
LABEL_44:
  *(_DWORD *)(a1 + 92) = v29;
  *(_BYTE *)(a1 + 64) = v38;
  sub_1000DB310((uint64_t)NRDDeviceConductor, *(void **)(a1 + 96), v28, v14, v13, v21, v26, v37 != 0, v10, v27, v12, v29, v38 != 0, v3);

  return v3;
}

void *sub_1000DB310(uint64_t a1, void *a2, BOOL a3, BOOL a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8, unsigned __int8 a9, unsigned __int8 a10, void *a11, unsigned int a12, BOOL a13, void *a14)
{
  id v18;
  id v19;
  id v20;
  char *v21;
  id v22;
  void *v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  BOOL v33;
  BOOL v34;
  void *v35;
  int IsLevelEnabled;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  int v41;
  void *v46;
  __int128 v47;

  v18 = a2;
  v19 = a11;
  v20 = a14;
  objc_opt_self(a1);
  v46 = v18;
  v21 = sub_1001300EC((uint64_t)NRDLocalDevice, v18, 0);
  v22 = v20;
  v23 = v22;
  if (v21)
  {
    xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsRegistered, v21[8]);
    xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsEnabled, v21[9]);
    v47 = 0uLL;
    sub_100133C94(v21, &v47);
    objc_opt_self(NRDLocalDevice);
    if (WORD5(v47))
      v24 = WORD6(v47) == 0;
    else
      v24 = 1;
    v25 = !v24;
    v47 = 0uLL;
    sub_10013CDB8(v21, &v47);
    objc_opt_self(NRDLocalDevice);
    if (WORD5(v47))
      v27 = WORD6(v47) == 0;
    else
      v27 = 1;
    v28 = !v27;
    if (v21[8])
    {
      v29 = v21[9] ? v25 : 0;
      if ((v29 & v28 & 1) != 0)
      {
        v30 = a10;
        v31 = a9;
        v32 = v19;
        v33 = a3;
        v34 = a7;
        goto LABEL_26;
      }
    }
  }
  else
  {
    xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsRegistered, 0);
    xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsEnabled, 0);
    v25 = 0;
    v28 = 0;
  }
  v35 = (void *)_NRCopyLogObjectForNRUUID(v46, v26);
  IsLevelEnabled = _NRLogIsLevelEnabled(v35, 0);

  if (IsLevelEnabled)
  {
    v38 = _NRCopyLogObjectForNRUUID(v46, v37);
    v39 = (void *)v38;
    if (v21)
    {
      v40 = v21[8];
      v41 = v21[9];
    }
    else
    {
      v40 = 0;
      v41 = 0;
    }
    _NRLogWithArgs(v38, 0, "%s%.30s:%-4d Deferring the device monitor update (registered=%d, enabled=%d, hasClassDAddr=%d, hasClassCAddr=%d)", "", "+[NRDDeviceConductor createDeviceMonitorDictWithNRUUID:isNearby:isConnected:isCloudConnected:isAsleep:isClassCConnected:hasUnpairedBluetooth:linkType:linkSubtype:proxySvcIntfName:thermalPressure:pluggedIn:replyDict:]", 1566, v40, v41, v25, v28);

  }
  v34 = 0;
  v31 = 0;
  v30 = 0;
  v32 = 0;
  a6 = 0;
  a5 = 0;
  a4 = 0;
  v33 = 0;
LABEL_26:
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsNearby, v33);
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsConnected, a4);
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsCloudConnected, a5);
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsAsleep, a6);
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusIsClassCConnected, v34);
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusHasUnpairedBluetooth, a8);
  xpc_dictionary_set_uint64(v23, nrXPCKeyDeviceMonitorStatusLinkType, v31);
  xpc_dictionary_set_uint64(v23, nrXPCKeyDeviceMonitorStatusLinkSubtype, v30);
  if (v32)
    xpc_dictionary_set_string(v23, nrXPCKeyDeviceMonitorStatusProxySvcIntfName, (const char *)objc_msgSend(v32, "UTF8String"));
  xpc_dictionary_set_uint64(v23, nrXPCKeyDeviceMonitorStatusThermalPressureLevel, a12);
  xpc_dictionary_set_BOOL(v23, nrXPCKeyDeviceMonitorStatusPluggedIn, a13);

  return v23;
}

void sub_1000DB684(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 && *(_BYTE *)(v1 + 14) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(v1 + 216))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    v3 = sub_1000D8AA8(v1, 1, 0);
    v15 = v3;
    if (v3 && (objc_msgSend(v3, "ikeClassDEstablished") & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
        v6 = *(_QWORD *)(v5 + 96);
      else
        v6 = 0;
      v7 = (void *)_NRCopyLogObjectForNRUUID(v6, v4);
      IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

      if (IsLevelEnabled)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
          v11 = *(_QWORD *)(v10 + 96);
        else
          v11 = 0;
        v12 = (void *)_NRCopyLogObjectForNRUUID(v11, v9);
        _NRLogWithArgs(v12, 0, "%s%.30s:%-4d Not activating QR agent", "", "-[NRDDeviceConductor pipeDidConnectForNRUUID:nrUUID:]_block_invoke", 6627);

      }
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 32);
      if (v13)
        v14 = *(_QWORD *)(v13 + 192);
      else
        v14 = 0;
      sub_10003073C(v14);
    }

  }
}

void sub_1000DB7A8(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  void *v11;
  id *v12;
  id *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  id v17;
  void *v18;
  char v19;

  v4 = a2;
  v5 = v4;
  if (a1)
  {
    v18 = v4;
    v6 = objc_msgSend(v4, "ikeClassDEstablished");
    v5 = v18;
    if (v6)
    {
      v7 = objc_msgSend(v18, "type");
      v5 = v18;
      if (v7 != 4)
      {
        if (*(_BYTE *)(a1 + 28) && *(_BYTE *)(a1 + 27))
        {
          v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v18);
          IsLevelEnabled = _NRLogIsLevelEnabled(v8, 1);

          if (IsLevelEnabled)
          {
            v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v10);
            _NRLogWithArgs(v11, 1, "%s%.30s:%-4d deferring sending thermal pressure level update", "", "-[NRDDeviceConductor sendDeviceThermalPressureLevelOnLink:]", 3871);

          }
          *(_BYTE *)(a1 + 65) = 1;
          goto LABEL_27;
        }
        *(_BYTE *)(a1 + 65) = 0;
        v12 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
        v13 = v12;
        if (v12)
          objc_storeStrong(v12 + 3, a2);
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v14 = (unsigned int *)(id)qword_1001E4708;
        v15 = v14;
        if (v14)
        {
          if (!v13)
          {
LABEL_26:

            sub_100024728((uint64_t)v13);
LABEL_27:
            v5 = v18;
            goto LABEL_28;
          }
          v16 = v14[5];
          if (v16)
          {
            if (v16 >= 0xB)
            {
              if (v16 >= 0x15)
              {
                if (v16 >= 0x1F)
                {
                  if (v16 >= 0x29)
                    LOBYTE(v16) = 50;
                  else
                    LOBYTE(v16) = 40;
                }
                else
                {
                  LOBYTE(v16) = 30;
                }
              }
              else
              {
                LOBYTE(v16) = 20;
              }
            }
            else
            {
              LOBYTE(v16) = 10;
            }
          }
        }
        else
        {
          if (!v13)
            goto LABEL_26;
          LOBYTE(v16) = 0;
        }
        v19 = v16;
        v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v19, 1);
        sub_1000231F8((uint64_t)v13, 14, v17);

        goto LABEL_26;
      }
    }
  }
LABEL_28:

}

void sub_1000DB998(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  void *v11;
  id *v12;
  id *v13;
  id v14;
  void *v15;
  BOOL v16;
  id v17;
  void *v18;
  BOOL v19;

  v4 = a2;
  v5 = v4;
  if (a1)
  {
    v18 = v4;
    v6 = objc_msgSend(v4, "ikeClassDEstablished");
    v5 = v18;
    if (v6)
    {
      v7 = objc_msgSend(v18, "type");
      v5 = v18;
      if (v7 != 4)
      {
        if (*(_BYTE *)(a1 + 28) && *(_BYTE *)(a1 + 27))
        {
          v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v18);
          IsLevelEnabled = _NRLogIsLevelEnabled(v8, 1);

          if (IsLevelEnabled)
          {
            v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v10);
            _NRLogWithArgs(v11, 1, "%s%.30s:%-4d deferring sending device state update", "", "-[NRDDeviceConductor sendDeviceStateUpdateOnLink:]", 3851);

          }
          *(_BYTE *)(a1 + 66) = 1;
          goto LABEL_17;
        }
        *(_BYTE *)(a1 + 66) = 0;
        v12 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
        v13 = v12;
        if (v12)
          objc_storeStrong(v12 + 3, a2);
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v14 = (id)qword_1001E4708;
        v15 = v14;
        if (v14)
        {
          v16 = *((_BYTE *)v14 + 11) != 0;
          if (!v13)
          {
LABEL_16:

            sub_100024728((uint64_t)v13);
LABEL_17:
            v5 = v18;
            goto LABEL_18;
          }
        }
        else
        {
          v16 = 0;
          if (!v13)
            goto LABEL_16;
        }
        v19 = v16;
        v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v19, 1);
        sub_1000231F8((uint64_t)v13, 22, v17);

        goto LABEL_16;
      }
    }
  }
LABEL_18:

}

void sub_1000DBB4C(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  int v10;
  dispatch_queue_t *v11;
  uint64_t v12;
  id *v13;
  id *v14;
  uint64_t v15;
  void *v16;
  int IsLevelEnabled;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v4 = a2;
  v5 = v4;
  if (a1)
  {
    if (v4)
    {
      if (*(_QWORD *)(a1 + 488))
      {
        v21 = v4;
        v6 = objc_msgSend(v4, "ikeClassDEstablished");
        v5 = v21;
        if (v6)
        {
          v7 = objc_msgSend(v21, "state");
          v5 = v21;
          if (v7 != 255)
          {
            v8 = objc_msgSend(v21, "type");
            v5 = v21;
            if (v8 != 4)
            {
              if (!*(_BYTE *)(a1 + 27) || !*(_BYTE *)(a1 + 28))
              {
                v11 = sub_100017F3C(*(dispatch_queue_t **)(a1 + 488));
                if (v11)
                {
                  v12 = *(_QWORD *)(a1 + 488);
                  if (v12)
                    v12 = *(_QWORD *)(v12 + 32);
                  *(_QWORD *)(a1 + 496) = v12;
                  v13 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
                  v14 = v13;
                  if (v13)
                    objc_storeStrong(v13 + 3, a2);
                  sub_1000231F8((uint64_t)v14, 12, v11);
                  sub_100024728((uint64_t)v14);
                  v16 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v15);
                  IsLevelEnabled = _NRLogIsLevelEnabled(v16, 1);

                  if (IsLevelEnabled)
                  {
                    v18 = *(id *)(a1 + 96);
                    v20 = (void *)_NRCopyLogObjectForNRUUID(v18, v19);
                    _NRLogWithArgs(v20, 1, "%s%.30s:%-4d sending net-info update %@ generation %llu on %@", "", "-[NRDDeviceConductor sendNetInfoOnLink:]", 930, *(_QWORD *)(a1 + 488), *(_QWORD *)(a1 + 496), v21);

                  }
                }
                goto LABEL_19;
              }
              v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v21);
              v10 = _NRLogIsLevelEnabled(v9, 2);

              v5 = v21;
              if (v10)
              {
                v11 = (dispatch_queue_t *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v21);
                _NRLogWithArgs(v11, 2, "%s%.30s:%-4d deferring net-info update as peer is asleep", "", "-[NRDDeviceConductor sendNetInfoOnLink:]", 916);
LABEL_19:

                v5 = v21;
              }
            }
          }
        }
      }
    }
  }

}

void sub_1000DBD2C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  _QWORD *v32;
  _QWORD *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int16 *v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  int IsLevelEnabled;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  unsigned __int16 *v72;
  id v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  id v78;
  void *v79;
  void *v80;
  id *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unsigned __int16 *v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  void *v110;
  id *v111;
  id v112;
  void *v113;
  NSObject *v114;
  id v115;
  id v116;
  char v117;
  id v118;
  id v119;
  int v120;
  _QWORD *v121;
  unsigned __int16 *v122;
  void *v123;
  void *v124;
  _QWORD *v125;
  unsigned __int16 *v126;
  void *v127;
  _QWORD *v128;
  unsigned __int16 *v129;
  void *v130;
  void *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  id v144;
  void *v145;
  void *v146;
  id *v147;
  NSObject *v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  int v155;
  void *v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  _QWORD *v162;
  unsigned __int16 *v163;
  void *v164;
  uint64_t v165;
  void *v166;
  int v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  void *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  int v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  int v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  void *v198;
  void *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  void *v212;
  id v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  void *v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  id v231;
  int v232;
  id v233;
  id v234;
  void **v235;
  uint64_t v236;
  void (*v237)(uint64_t);
  void *v238;
  id v239;
  id v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t (*v247)(uint64_t, uint64_t);
  void (*v248)(uint64_t);
  id v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  char v257;
  void *v258;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v3 = (id)qword_1001E4708;
    v4 = v3;
    if (v3)
      v5 = (void *)*((_QWORD *)v3 + 6);
    else
      v5 = 0;
    v6 = v5;

    if (v6 && (v7 = v6[13]) != 0)
      v8 = *(_DWORD *)(v7 + 12);
    else
      v8 = 0;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }

  v9 = *(_QWORD **)(a1 + 40);
  if (!v9)
  {
    v11 = 0;
    v57 = *(_QWORD *)(a1 + 32);
    if (!v57)
      goto LABEL_97;
    goto LABEL_59;
  }
  v10 = sub_1000243F8(v9, v8, 0);
  v11 = v10;
  if (v10 && objc_msgSend(v10, "count"))
  {
    v12 = sub_100021BEC(*(_QWORD *)(a1 + 40));
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      if (v12 == *(_QWORD *)(v14 + 320))
      {
LABEL_14:
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v16 + 104));
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v17 = (id)qword_1001E4708;
          v18 = v17;
          if (v17)
            v19 = (void *)*((_QWORD *)v17 + 6);
          else
            v19 = 0;
          v20 = v19;

        }
        else
        {
          v20 = 0;
        }
        v258 = v15;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v258, 1));
        v22 = *(_QWORD *)(a1 + 32);
        if (v22)
          v23 = *(void **)(v22 + 96);
        else
          v23 = 0;
        sub_100146E4C(v20, v21, v23);

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "addressData"));
        v25 = *(_QWORD *)(a1 + 32);
        if (v25)
          v26 = *(void **)(v25 + 96);
        else
          v26 = 0;
        sub_1000A0244(v26, CFSTR("WiFiEndpointAddressData"), v24);
        v27 = *(_QWORD *)(a1 + 32);
        if (v27)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v27 + 104));
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v28 = (id)qword_1001E4708;
          v29 = v28;
          if (v28)
            v30 = (void *)*((_QWORD *)v28 + 6);
          else
            v30 = 0;
          v31 = v30;

          v32 = *(_QWORD **)(a1 + 32);
          if (v32)
            v32 = (_QWORD *)v32[12];
        }
        else
        {
          v31 = 0;
          v32 = 0;
        }
        v33 = v32;
        v34 = sub_10014725C((uint64_t)v31, v33);
        v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        sub_1000D5060(v27, 1010, CFSTR("received Wi-Fi address update: %@"), v36, v37, v38, v39, v40, (uint64_t)v35);

        v41 = *(_QWORD **)(a1 + 40);
        if (v41)
        {
          v42 = sub_1000238A4(v41, 4);
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "firstObject"));

          if (v43)
          {
            v44 = objc_msgSend(v43, "length");
            v45 = *(_QWORD *)(a1 + 32);
            if (v44)
            {
              if (v45)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v45 + 104));
                objc_opt_self(NRLinkDirector);
                if (qword_1001E4710 != -1)
                  dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                v46 = (id)qword_1001E4708;
                v47 = v46;
                if (v46)
                  v48 = (void *)*((_QWORD *)v46 + 6);
                else
                  v48 = 0;
                v49 = v48;

              }
              else
              {
                v49 = 0;
              }
              sub_100146C64((uint64_t)v49, v43);
            }
            else
            {
              if (v45)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v45 + 104));
                objc_opt_self(NRLinkDirector);
                if (qword_1001E4710 != -1)
                  dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                v58 = (id)qword_1001E4708;
                v59 = v58;
                if (v58)
                  v60 = (void *)*((_QWORD *)v58 + 6);
                else
                  v60 = 0;
                v49 = v60;

              }
              else
              {
                v49 = 0;
              }
              sub_100146C64((uint64_t)v49, 0);
            }

            v61 = *(_QWORD *)(a1 + 32);
            if (v61)
              v62 = *(void **)(v61 + 96);
            else
              v62 = 0;
            sub_1000A0244(v62, CFSTR("WiFiSignature"), v43);
          }
        }
        else
        {
          v43 = 0;
        }

        goto LABEL_58;
      }
      v50 = *(_QWORD *)(v14 + 96);
    }
    else
    {
      if (!v12)
        goto LABEL_14;
      v50 = 0;
    }
    v51 = (void *)_NRCopyLogObjectForNRUUID(v50, v13);
    IsLevelEnabled = _NRLogIsLevelEnabled(v51, 1);

    if (IsLevelEnabled)
    {
      v53 = *(_QWORD **)(a1 + 32);
      if (v53)
        v53 = (_QWORD *)v53[12];
      v54 = v53;
      v56 = (void *)_NRCopyLogObjectForNRUUID(v54, v55);
      _NRLogWithArgs(v56, 1, "%s%.30s:%-4d Skipping WiFi address update message %@", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 5989, *(_QWORD *)(a1 + 40));

      v57 = *(_QWORD *)(a1 + 32);
      if (!v57)
        goto LABEL_97;
      goto LABEL_59;
    }
  }
LABEL_58:
  v57 = *(_QWORD *)(a1 + 32);
  if (!v57)
    goto LABEL_97;
LABEL_59:
  if (!*(_BYTE *)(v57 + 10))
    goto LABEL_97;
  v63 = sub_100021BEC(*(_QWORD *)(a1 + 40));
  v64 = *(_QWORD *)(a1 + 32);
  if (v64)
  {
    if (v63 != *(_QWORD *)(v64 + 344))
      goto LABEL_97;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v64 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v65 = (id)qword_1001E4708;
    v66 = v65;
    if (v65)
      v67 = (void *)*((_QWORD *)v65 + 6);
    else
      v67 = 0;
    v68 = v67;

    if (v68 && (v69 = v68[14]) != 0)
      v70 = *(_DWORD *)(v69 + 12);
    else
      v70 = 0;
  }
  else
  {
    if (v63)
      goto LABEL_97;
    v68 = 0;
    v70 = 0;
  }

  v71 = *(_QWORD **)(a1 + 40);
  if (v71)
  {
    v72 = sub_1000238A4(v71, 10);
    v73 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "firstObject"));

    if (v73 && objc_msgSend(v73, "length"))
    {
      LOBYTE(v235) = 0;
      objc_msgSend(v73, "getBytes:length:", &v235, 1);
      if ((v235 & 1) != 0)
        v74 = &__kCFBooleanTrue;
      else
        v74 = &__kCFBooleanFalse;

      if ((objc_msgSend(v74, "BOOLValue") & 1) != 0)
      {
        v75 = *(_QWORD **)(a1 + 40);
        if (v75)
          v73 = sub_1000243F8(v75, v70, 1);
        else
          v73 = 0;
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "firstObject"));
        v77 = *(_QWORD *)(a1 + 32);
        if (v77)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v77 + 104));
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v78 = (id)qword_1001E4708;
          v79 = v78;
          if (v78)
            v80 = (void *)*((_QWORD *)v78 + 6);
          else
            v80 = 0;
          v81 = v80;

          v82 = *(_QWORD *)(a1 + 32);
          if (v82)
            v83 = *(void **)(v82 + 96);
          else
            v83 = 0;
        }
        else
        {
          v81 = 0;
          v83 = 0;
        }
        sub_1001472F4(v81, v76, v83);

        sub_1000D5060(*(_QWORD *)(a1 + 32), 1040, CFSTR("%@ received AWDL address update: %@"), v84, v85, v86, v87, v88, *(_QWORD *)(a1 + 32));
      }
      else
      {
        v89 = *(_QWORD *)(a1 + 32);
        if (v89)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v89 + 104));
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v90 = (id)qword_1001E4708;
          v91 = v90;
          if (v90)
            v92 = (void *)*((_QWORD *)v90 + 6);
          else
            v92 = 0;
          v73 = v92;

          v93 = *(_QWORD *)(a1 + 32);
          if (v93)
            v94 = *(void **)(v93 + 96);
          else
            v94 = 0;
        }
        else
        {
          v73 = 0;
          v94 = 0;
        }
        sub_1001472F4((id *)v73, 0, v94);
      }
    }
    else
    {
      v74 = 0;
    }

  }
  else
  {
    v74 = 0;
  }

LABEL_97:
  v95 = sub_100021BEC(*(_QWORD *)(a1 + 40));
  v96 = *(_QWORD *)(a1 + 32);
  if (v96)
  {
    if (v95 != *(_QWORD *)(v96 + 352))
      goto LABEL_137;
LABEL_99:
    v97 = *(_QWORD **)(a1 + 40);
    if (!v97)
    {
      v99 = 0;
      goto LABEL_136;
    }
    v98 = sub_1000238A4(v97, 15);
    v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "firstObject"));

    if (!v99)
    {
LABEL_136:

      v96 = *(_QWORD *)(a1 + 32);
      goto LABEL_137;
    }
    v100 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v99, 4);
    v101 = v100;
    if (!v100)
    {
LABEL_135:

      goto LABEL_136;
    }
    v102 = *(_QWORD *)(a1 + 32);
    _NRIsAppleInternal(v100);
    sub_1000D5060(v102, 1051, CFSTR("%@ received country code update: %@"), v103, v104, v105, v106, v107, v102);
    if (!*(_QWORD *)(a1 + 32))
    {
      v233 = v101;
      v111 = 0;
      goto LABEL_134;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v108 = (id)qword_1001E4708;
    v109 = v108;
    if (v108)
      v110 = (void *)*((_QWORD *)v108 + 6);
    else
      v110 = 0;
    v111 = v110;

    v112 = v101;
    if (!v111)
      goto LABEL_134;
    v113 = v112;
    v114 = v111[3];
    dispatch_assert_queue_V2(v114);

    if (!objc_msgSend(v113, "compare:options:", CFSTR("XZ"), 1))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 17, "received invalid country code");
      }
      goto LABEL_134;
    }
    v115 = v111[22];
    v254 = 0;
    v255 = &v254;
    v256 = 0x2020000000;
    v257 = 0;
    v250 = 0;
    v251 = &v250;
    v252 = 0x2020000000;
    v253 = 0;
    v244 = 0;
    v245 = &v244;
    v246 = 0x3032000000;
    v247 = sub_10014387C;
    v248 = sub_10014388C;
    v249 = 0;
    v235 = _NSConcreteStackBlock;
    v236 = 3221225472;
    v237 = sub_1001492DC;
    v238 = &unk_1001B8890;
    v234 = v115;
    v239 = v234;
    v241 = &v254;
    v240 = v113;
    v242 = &v244;
    v243 = &v250;
    if (sub_1001437AC((uint64_t)NRLinkManagerWiFi, &v235)
      || !*((_BYTE *)v255 + 24) && !*((_BYTE *)v251 + 24)
      || v245[5])
    {
      v231 = sub_100140BFC();
      v232 = _NRLogIsLevelEnabled(v231, 16);

      if (!v232)
        goto LABEL_133;
      v118 = sub_100140BFC();
      _NRLogWithArgs(v118, 16, "%s%.30s:%-4d failed to set peer country code %@", "", "-[NRLinkManagerWiFi setPeerCountryCodeIfApplicable:]", 1962, v245[5]);
    }
    else if (*((_BYTE *)v251 + 24))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v116 = (id)qword_1001E4AB0;
      v117 = _NRLogIsLevelEnabled(v116, 1);

      if ((v117 & 1) == 0)
        goto LABEL_133;
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v118 = (id)qword_1001E4AB0;
      _NRLogWithArgs(v118, 1, "%s%.30s:%-4d not setting companion country code as local country code is available", "", "-[NRLinkManagerWiFi setPeerCountryCodeIfApplicable:]", 1957);
    }
    else
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v119 = (id)qword_1001E4AB0;
      v120 = _NRLogIsLevelEnabled(v119, 1);

      if (!v120)
        goto LABEL_133;
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v118 = (id)qword_1001E4AB0;
      _NRLogWithArgs(v118, 1, "%s%.30s:%-4d successfully set peer country code", "", "-[NRLinkManagerWiFi setPeerCountryCodeIfApplicable:]", 1959);
    }

LABEL_133:
    _Block_object_dispose(&v244, 8);

    _Block_object_dispose(&v250, 8);
    _Block_object_dispose(&v254, 8);

LABEL_134:
    goto LABEL_135;
  }
  if (!v95)
    goto LABEL_99;
LABEL_137:
  if (v96 && *(_BYTE *)(v96 + 8))
  {
    LOBYTE(v236) = 0;
    v235 = 0;
    v121 = *(_QWORD **)(a1 + 40);
    if (v121)
    {
      v122 = sub_1000238A4(v121, 13);
      v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "firstObject"));

      if (v123)
      {
        objc_msgSend(v123, "getBytes:length:", &v235, 9);
        if ((v236 & 1) == 0)
        {
          v124 = 0;
          goto LABEL_226;
        }
        v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v235));
        v131 = v123;
        if (!v124)
        {
LABEL_223:
          v123 = v131;
          goto LABEL_226;
        }
LABEL_157:
        v132 = sub_100021BEC(*(_QWORD *)(a1 + 40));
        v134 = *(_QWORD *)(a1 + 32);
        if (v134)
        {
          if (v132 == *(_QWORD *)(v134 + 336))
            goto LABEL_159;
          v165 = *(_QWORD *)(v134 + 96);
        }
        else
        {
          if (!v132)
          {
LABEL_159:
            v140 = objc_msgSend(v124, "BOOLValue");
            v141 = a1 + 32;
            v142 = "disable";
            if (v140)
              v142 = "enable";
            sub_1000D5060(*(_QWORD *)(a1 + 32), 1021, CFSTR("%s"), v135, v136, v137, v138, v139, (uint64_t)v142);
            if (*(_QWORD *)v141)
            {
              *(_BYTE *)(*(_QWORD *)v141 + 16) = 0;
              v143 = *(_QWORD *)(a1 + 32);
              if ((v140 & 1) == 0)
              {
                if (v143)
                {
                  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v143 + 104));
                  objc_opt_self(NRLinkDirector);
                  if (qword_1001E4710 != -1)
                    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                  v144 = (id)qword_1001E4708;
                  v145 = v144;
                  if (v144)
                    v146 = (void *)*((_QWORD *)v144 + 6);
                  else
                    v146 = 0;
                  v147 = v146;

                  if (v147)
                  {
                    v148 = v147[3];
                    dispatch_assert_queue_V2(v148);

                    v149 = *((_DWORD *)v147 + 10) > 0;
                    v150 = *(_QWORD *)(a1 + 32);
                    if (!v150)
                      goto LABEL_171;
                    goto LABEL_170;
                  }
                  v149 = 0;
                  v150 = *(_QWORD *)(a1 + 32);
                  if (v150)
LABEL_170:
                    *(_BYTE *)(v150 + 26) = v149;
                }
                else
                {
                  v147 = 0;
                }
LABEL_171:

                v152 = *(_QWORD *)(a1 + 32);
                if (v152)
                  v153 = *(_QWORD *)(v152 + 96);
                else
                  v153 = 0;
                v154 = (void *)_NRCopyLogObjectForNRUUID(v153, v151);
                v155 = _NRLogIsLevelEnabled(v154, 0);

                v143 = *(_QWORD *)(a1 + 32);
                if (v155)
                {
                  if (v143)
                    v156 = *(void **)(v143 + 96);
                  else
                    v156 = 0;
                  v157 = v156;
                  v159 = _NRCopyLogObjectForNRUUID(v157, v158);
                  v160 = (void *)v159;
                  v161 = *(_QWORD *)(a1 + 32);
                  if (v161)
                    LODWORD(v161) = *(unsigned __int8 *)(v161 + 26);
                  _NRLogWithArgs(v159, 0, "%s%.30s:%-4d Pending prefer Wi-Fi set to: %d", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 6050, v161);

                  v143 = *(_QWORD *)(a1 + 32);
                }
              }
            }
            else
            {
              v147 = 0;
              v143 = 0;
              if ((v140 & 1) == 0)
                goto LABEL_171;
            }
            if (v123)
              sub_1000E0744(v143, v131);
            else
              sub_1000D7A20(v143, v140);
            goto LABEL_223;
          }
          v165 = 0;
        }
        v166 = (void *)_NRCopyLogObjectForNRUUID(v165, v133);
        v167 = _NRLogIsLevelEnabled(v166, 1);

        if (v167)
        {
          v168 = *(_QWORD **)(a1 + 32);
          if (v168)
            v168 = (_QWORD *)v168[12];
          v169 = v168;
          v171 = (void *)_NRCopyLogObjectForNRUUID(v169, v170);
          _NRLogWithArgs(v171, 1, "%s%.30s:%-4d Skipping Prefer Wi-Fi ACK message %@", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 6059, *(_QWORD *)(a1 + 40));

        }
        goto LABEL_223;
      }
      v128 = *(_QWORD **)(a1 + 40);
      if (v128)
      {
        v129 = sub_1000238A4(v128, 7);
        v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "firstObject"));

        if (v130 && objc_msgSend(v130, "length"))
        {
          LOBYTE(v244) = 0;
          objc_msgSend(v130, "getBytes:length:", &v244, 1);
          if ((v244 & 1) != 0)
            v124 = &__kCFBooleanTrue;
          else
            v124 = &__kCFBooleanFalse;
        }
        else
        {
          v124 = 0;
        }

        v131 = 0;
        if (!v124)
          goto LABEL_223;
        goto LABEL_157;
      }
    }
    v123 = 0;
    v124 = 0;
    goto LABEL_226;
  }
  LOBYTE(v236) = 0;
  v235 = 0;
  v125 = *(_QWORD **)(a1 + 40);
  if (!v125)
    goto LABEL_262;
  v126 = sub_1000238A4(v125, 13);
  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "firstObject"));

  if (v127)
  {
    objc_msgSend(v127, "getBytes:length:", &v235, 9);
    v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v235));
    v123 = v127;
    if (!v124)
      goto LABEL_226;
    goto LABEL_194;
  }
  v162 = *(_QWORD **)(a1 + 40);
  if (!v162)
  {
LABEL_262:
    v124 = 0;
    v123 = 0;
    goto LABEL_226;
  }
  v163 = sub_1000238A4(v162, 5);
  v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "firstObject"));

  if (v164 && objc_msgSend(v164, "length"))
  {
    LOBYTE(v244) = 0;
    objc_msgSend(v164, "getBytes:length:", &v244, 1);
    if ((v244 & 1) != 0)
      v124 = &__kCFBooleanTrue;
    else
      v124 = &__kCFBooleanFalse;
  }
  else
  {
    v124 = 0;
  }

  v123 = 0;
  if (!v124)
    goto LABEL_226;
LABEL_194:
  v172 = sub_100021BEC(*(_QWORD *)(a1 + 40));
  v174 = *(_QWORD *)(a1 + 32);
  if (!v174)
  {
    if (!v172)
      goto LABEL_196;
    v192 = 0;
LABEL_209:
    v193 = (void *)_NRCopyLogObjectForNRUUID(v192, v173);
    v194 = _NRLogIsLevelEnabled(v193, 1);

    if (v194)
    {
      v195 = *(_QWORD **)(a1 + 32);
      if (v195)
        v195 = (_QWORD *)v195[12];
      v196 = v195;
      v198 = (void *)_NRCopyLogObjectForNRUUID(v196, v197);
      _NRLogWithArgs(v198, 1, "%s%.30s:%-4d Skipping Prefer Wi-Fi message %@", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 6126, *(_QWORD *)(a1 + 40));

    }
    goto LABEL_226;
  }
  if (v172 != *(_QWORD *)(v174 + 328))
  {
    v192 = *(_QWORD *)(v174 + 96);
    goto LABEL_209;
  }
LABEL_196:
  v180 = objc_msgSend(v124, "BOOLValue");
  v181 = "dis";
  if (v180)
    v181 = "en";
  sub_1000D5060(*(_QWORD *)(a1 + 32), 1008, CFSTR("received prefer Wi-Fi request: %sable"), v175, v176, v177, v178, v179, (uint64_t)v181);
  v183 = *(_QWORD *)(a1 + 32);
  if (!v180)
  {
    if (v183)
      v183 = *(_QWORD *)(v183 + 96);
    v199 = (void *)_NRCopyLogObjectForNRUUID(v183, v182);
    v200 = _NRLogIsLevelEnabled(v199, 0);

    if (v200)
    {
      v202 = *(_QWORD *)(a1 + 32);
      if (v202)
        v203 = *(_QWORD *)(v202 + 96);
      else
        v203 = 0;
      v204 = (void *)_NRCopyLogObjectForNRUUID(v203, v201);
      _NRLogWithArgs(v204, 0, "%s%.30s:%-4d Disable prefer Wi-Fi request", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 6098);

    }
    v205 = *(_QWORD *)(a1 + 32);
    if (v205)
    {
      *(_BYTE *)(v205 + 26) = 0;
      v183 = *(_QWORD *)(a1 + 32);
      if (v127)
        goto LABEL_225;
    }
    else
    {
      v183 = 0;
      if (v127)
        goto LABEL_225;
    }
LABEL_221:
    sub_1000D7A20(v183, v180);
    goto LABEL_226;
  }
  if (v183)
  {
    if (*(_BYTE *)(v183 + 15))
    {
      v184 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v183 + 96), v182);
      v185 = _NRLogIsLevelEnabled(v184, 1);

      if (v185)
      {
        v186 = *(_QWORD **)(a1 + 32);
        if (v186)
          v186 = (_QWORD *)v186[12];
        v187 = v186;
        v189 = _NRCopyLogObjectForNRUUID(v187, v188);
        v190 = (void *)v189;
        v191 = *(_QWORD *)(a1 + 32);
        if (v191)
          LODWORD(v191) = *(unsigned __int8 *)(v191 + 15);
        _NRLogWithArgs(v189, 1, "%s%.30s:%-4d We already know about this prefer Wi-Fi request (%d). Ignoring this request", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 6081, v191);

      }
      sub_1000D7EAC(*(_QWORD *)(a1 + 32));
      goto LABEL_226;
    }
    if (v127)
    {
LABEL_225:
      sub_1000E0744(v183, v123);
      goto LABEL_226;
    }
    v206 = sub_1000E0B8C(v183);
    v207 = *(_QWORD *)(a1 + 32);
    if (!v206)
    {
      if (v207)
        *(_BYTE *)(v207 + 26) = 1;
      goto LABEL_226;
    }
  }
  else
  {
    v207 = 0;
    if (v127)
      goto LABEL_225;
  }
  v208 = sub_1000D4DBC(v207);
  v209 = objc_claimAutoreleasedReturnValue(v208);
  v210 = (void *)v209;
  v211 = *(_QWORD *)(a1 + 32);
  if (v211)
    v212 = *(void **)(v211 + 96);
  else
    v212 = 0;
  v213 = sub_10014725C(v209, v212);
  v214 = (void *)objc_claimAutoreleasedReturnValue(v213);

  v216 = *(_QWORD *)(a1 + 32);
  if (v214)
  {
    if (v216)
      v217 = *(_QWORD *)(v216 + 96);
    else
      v217 = 0;
    v218 = (void *)_NRCopyLogObjectForNRUUID(v217, v215);
    v219 = _NRLogIsLevelEnabled(v218, 1);

    if (v219)
    {
      v221 = *(_QWORD *)(a1 + 32);
      if (v221)
        v222 = *(_QWORD *)(v221 + 96);
      else
        v222 = 0;
      v223 = (void *)_NRCopyLogObjectForNRUUID(v222, v220);
      _NRLogWithArgs(v223, 1, "%s%.30s:%-4d Honoring prefer Wi-Fi request", "", "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke", 6114);

    }
    v183 = *(_QWORD *)(a1 + 32);
    goto LABEL_221;
  }
  if (v216)
    v224 = *(_QWORD *)(v216 + 96);
  else
    v224 = 0;
  v225 = (void *)_NRCopyLogObjectForNRUUID(v224, v215);
  v226 = _NRLogIsLevelEnabled(v225, 17);

  if (v226)
  {
    v228 = *(_QWORD *)(a1 + 32);
    if (v228)
      v229 = *(_QWORD *)(v228 + 96);
    else
      v229 = 0;
    v230 = (void *)_NRCopyLogObjectForNRUUID(v229, v227);
    _NRLogWithArgs(v230, 17, "Could not enable prefer Wi-Fi request as no peer address found");

  }
LABEL_226:

}

void sub_1000DD200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1000DD234(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  unsigned int v8;
  int64_t v9;
  dispatch_time_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  _QWORD block[4];
  id v15;
  id location;

  if (a1 && sub_1000E0460(a1, a2))
  {
    v4 = *(_QWORD *)(a1 + 576);
    if (v4 && *(_BYTE *)(v4 + 9))
    {
      v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      IsLevelEnabled = _NRLogIsLevelEnabled(v5, 2);

      if (IsLevelEnabled)
      {
        v13 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
        _NRLogWithArgs(v13, 2, "%s%.30s:%-4d discovery proxy already running", "", "-[NRDDeviceConductor startDiscoveryProxyClientIfNeeded]", 4671);

      }
      return;
    }
    *(_BYTE *)(a1 + 72) = 1;
    objc_initWeak(&location, (id)a1);
    v8 = *(_DWORD *)(a1 + 80);
    if (v8 >= 0xC)
    {
      LOBYTE(v8) = 12;
      *(_DWORD *)(a1 + 80) = 12;
    }
    else if (!v8)
    {
      v9 = 0;
LABEL_12:
      v10 = dispatch_time(0, v9);
      v11 = *(void **)(a1 + 104);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000E056C;
      block[3] = &unk_1001B7F28;
      v12 = v11;
      objc_copyWeak(&v15, &location);
      dispatch_after(v10, v12, block);

      objc_destroyWeak(&v15);
      objc_destroyWeak(&location);
      return;
    }
    v9 = 1000000000 << (v8 + 1);
    goto LABEL_12;
  }
}

void sub_1000DD3A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1 && *(_BYTE *)(a1 + 62))
  {
    if (*(_QWORD *)(a1 + 576))
    {
      sub_1000E0338(a1, 0);
      objc_msgSend(*(id *)(a1 + 576), "cancel");
      v2 = *(void **)(a1 + 576);
      *(_QWORD *)(a1 + 576) = 0;

    }
    v3 = *(void **)(a1 + 568);
    if (v3)
    {
      objc_msgSend(v3, "cancel");
      v4 = *(void **)(a1 + 568);
      *(_QWORD *)(a1 + 568) = 0;

    }
    *(_DWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
}

void sub_1000DD418(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  id v6;
  dispatch_queue_t *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;

  if (a1 && *(_BYTE *)(a1 + 56))
  {
    v4 = *(void **)(a1 + 504);
    *(_QWORD *)(a1 + 504) = 0;

    v5 = *(void **)(a1 + 528);
    *(_QWORD *)(a1 + 528) = 0;

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v6 = (id)qword_1001E4A18;
    sub_100127618((uint64_t)v6, *(void **)(a1 + 280));

    if (a2)
    {
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v7 = (dispatch_queue_t *)(id)qword_1001E4A18;
      v8 = v7;
      if (v7)
      {
        v14 = (id *)v7;
        dispatch_assert_queue_V2(v7[1]);
        v9 = objc_msgSend(v14[2], "apply");
        v8 = v14;
        if ((v9 & 1) == 0)
        {
          sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v10, v11, v12, v13);
          v8 = v14;
        }
      }

    }
  }
}

void sub_1000DD564(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  id v7;
  char *v8;
  uint64_t v9;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 128), "state") == 8)
    {
      *(_BYTE *)(a1 + 68) = 0;
      v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      v8 = v2;
      if (v2)
      {
        v3 = 2;
        v4 = 4;
        if (!*(_BYTE *)(a1 + 67))
        {
          v3 = 4;
          v4 = 8;
        }
        if (*((unsigned __int16 *)v2 + 14) <= 0x15u)
          v5 = v3;
        else
          v5 = v4;
      }
      else
      {
        v5 = 2;
        if (!*(_BYTE *)(a1 + 67))
          v5 = 4;
      }
      v9 = v5;
      v6 = (id *)sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
      v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v9, 8);
      sub_1000231F8((uint64_t)v6, 11, v7);
      if (v6)
        objc_storeStrong(v6 + 3, *(id *)(a1 + 128));
      sub_100024728((uint64_t)v6);

    }
    else
    {
      *(_BYTE *)(a1 + 68) = 1;
    }
  }
}

void sub_1000DD68C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  dispatch_queue_t *v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;

  if (a1 && *(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 512);
    *(_QWORD *)(a1 + 512) = 0;

    v3 = *(void **)(a1 + 520);
    *(_QWORD *)(a1 + 520) = 0;

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v4 = (id)qword_1001E4A18;
    sub_100127618((uint64_t)v4, *(void **)(a1 + 288));

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v5 = (dispatch_queue_t *)(id)qword_1001E4A18;
    v6 = v5;
    if (v5)
    {
      v12 = (id *)v5;
      dispatch_assert_queue_V2(v5[1]);
      v7 = objc_msgSend(v12[2], "apply");
      v6 = v12;
      if ((v7 & 1) == 0)
      {
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v8, v9, v10, v11);
        v6 = v12;
      }
    }

  }
}

void sub_1000DD7D0(uint64_t a1, char a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *j;
  void *v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  NRLinkDirectorRequest *v46;
  id *p_isa;
  const char *v48;
  void *v49;
  void *v50;
  char v51;
  id obj;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  _QWORD newValue[5];
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[128];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  _BYTE v75[128];
  _BYTE v76[128];
  _QWORD v77[2];

  if (a1)
  {
    v2 = a1;
    if (*(_QWORD *)(a1 + 632))
    {
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v4 = (id)qword_1001E4A18;
      sub_100127618((uint64_t)v4, *(void **)(v2 + 312));

      v54 = sub_1000E0118(v2);
      if (objc_msgSend(v54, "count"))
      {
        v51 = a2;
        v5 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition requiredAgentDomain:agentType:](NEPolicyCondition, "requiredAgentDomain:agentType:", CFSTR("com.apple.networkrelay"), CFSTR("ASResolver")));
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition requiredAgentDomain:agentType:](NEPolicyCondition, "requiredAgentDomain:agentType:", CFSTR("com.apple.networkrelay"), CFSTR("ASListener")));
        v50 = (void *)v5;
        v77[0] = v5;
        v77[1] = v49;
        v67 = 0u;
        v68 = 0u;
        v69 = 0u;
        v70 = 0u;
        obj = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v77, 2));
        v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
        if (v55)
        {
          v53 = *(_QWORD *)v68;
          v6 = v2;
          do
          {
            v7 = 0;
            do
            {
              if (*(_QWORD *)v68 != v53)
                objc_enumerationMutation(obj);
              v56 = v7;
              v10 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * v7);
              v63 = 0u;
              v64 = 0u;
              v65 = 0u;
              v66 = 0u;
              v11 = v54;
              v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
              if (v12)
              {
                v13 = v12;
                v14 = *(_QWORD *)v64;
                do
                {
                  for (i = 0; i != v13; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v64 != v14)
                      objc_enumerationMutation(v11);
                    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)i)));
                    v17 = objc_alloc((Class)NEPolicy);
                    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    v74[0] = v18;
                    v74[1] = v10;
                    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v74, 2));
                    v20 = objc_msgSend(v17, "initWithOrder:result:conditions:", 10, v16, v19);

                    objc_opt_self(NRDPolicySessionManager);
                    if (qword_1001E4A20 != -1)
                      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                    v2 = v6;
                    v21 = (id)qword_1001E4A18;
                    v22 = sub_100127310((uint64_t)v21, *(void **)(v6 + 312), v20);

                  }
                  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
                }
                while (v13);
              }

              v23 = *(_QWORD *)(v2 + 504);
              if (v23)
              {
                v73[0] = 0;
                v73[1] = 0;
                nw_agent_get_uuid(v23, v73);
                v24 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v73);
                v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v24));
                v26 = objc_alloc((Class)NEPolicy);
                v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                v72[0] = v27;
                v72[1] = v10;
                v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v72, 2));
                v29 = objc_msgSend(v26, "initWithOrder:result:conditions:", 10, v25, v28);

                objc_opt_self(NRDPolicySessionManager);
                if (qword_1001E4A20 != -1)
                  dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                v2 = v6;
                v8 = (id)qword_1001E4A18;
                v9 = sub_100127310((uint64_t)v8, *(void **)(v6 + 312), v29);

              }
              v7 = v56 + 1;
            }
            while ((id)(v56 + 1) != v55);
            v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
          }
          while (v55);
        }

        a2 = v51;
      }
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v30 = (id)qword_1001E4A18;
      v31 = (id *)v30;
      if (v30)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v30 + 1));
        if ((objc_msgSend(v31[2], "apply") & 1) == 0)
          sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v32, v33, v34, (uint64_t)v49);
      }

      if ((a2 & 1) == 0)
      {
        v35 = *(_QWORD *)(v2 + 448);
        if (v35)
        {
          v36 = (void *)NEVirtualInterfaceCopyName(v35);
          if (v36)
            sub_1000F6F8C(*(_QWORD *)(v2 + 632), v36);
        }
        else
        {
          v36 = 0;
        }
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v37 = *(id *)(v2 + 112);
        v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
        if (v38)
        {
          v39 = v38;
          v40 = *(_QWORD *)v60;
          do
          {
            for (j = 0; j != v39; j = (char *)j + 1)
            {
              if (*(_QWORD *)v60 != v40)
                objc_enumerationMutation(v37);
              v42 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)j);
              if (objc_msgSend(v42, "virtualInterface"))
              {
                v43 = (void *)NEVirtualInterfaceCopyName(objc_msgSend(v42, "virtualInterface"));
                v44 = objc_msgSend(v42, "isPrimary");
                v45 = *(_QWORD *)(v2 + 632);
                if (v44)
                  sub_1000F6E5C(v45, v43);
                else
                  sub_1000F6F8C(v45, v43);

              }
            }
            v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
          }
          while (v39);
        }

        if (!*(_QWORD *)(v2 + 128))
        {
          v46 = objc_alloc_init(NRLinkDirectorRequest);
          p_isa = (id *)&v46->super.isa;
          if (v46)
          {
            v46->_type = 6;
            *(_WORD *)&v46->_attemptImmediately = 1;
            v46->_timeout = 10;
            objc_storeStrong((id *)&v46->_timerDescription, CFSTR("Hysteresis for AS registrations"));
            objc_storeStrong(p_isa + 2, &off_1001C4B40);
          }
          newValue[0] = _NSConcreteStackBlock;
          newValue[1] = 3221225472;
          newValue[2] = sub_1000E0314;
          newValue[3] = &unk_1001B8778;
          newValue[4] = v2;
          v58 = v36;
          if (p_isa)
            objc_setProperty_nonatomic_copy(p_isa, v48, newValue, 48);
          sub_1000D320C(v2, p_isa);

        }
      }

    }
  }
}

void sub_1000DDEA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int16 *v5;
  void *v6;
  unsigned __int16 *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  int IsLevelEnabled;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned __int16 *v23;
  void *v24;
  unsigned __int16 *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  void *v33;
  id v34;
  int v35;
  uint64_t v36;
  int v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *i;
  void *v45;
  void *v46;
  NRDiscoveryProxyServer *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  NRDiscoveryProxyServer *v52;
  unsigned __int16 *v53;
  void *v54;
  unsigned __int16 *v55;
  void *v56;
  unsigned __int16 *v57;
  void *v58;
  unsigned __int16 *v59;
  void *v60;
  unsigned __int16 *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  unsigned __int8 v69;
  NRDNSProxyClient *v70;
  void *v71;
  void *v72;
  void *v73;
  int v74;
  id v75;
  id v76;
  id *v77;
  void *v78;
  void *v79;
  int v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *j;
  void *v88;
  void *v89;
  unsigned __int16 *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  id v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  id v102;
  unsigned __int8 v103;
  void *v104;
  int v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  NRDNSProxyClient *v110;
  void *v111;
  void *v112;
  void *v113;
  int v114;
  id v115;
  id v116;
  id *v117;
  void *v118;
  int Index;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void *v125;
  void *v126;
  int v127;
  __int16 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  objc_super v133;
  _BYTE v134[128];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(id *)(a1 + 40);
  v3 = v2;
  if (!v1)
    goto LABEL_111;
  if (!*(_BYTE *)(v1 + 14) || v2 == 0)
    goto LABEL_111;
  v5 = sub_1000238A4(v2, 16);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

  if (v6)
  {
    v7 = sub_1000238A4(v3, 16);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));

    if (v8 && objc_msgSend(v8, "length"))
    {
      v134[0] = 0;
      objc_msgSend(v8, "getBytes:length:", v134, 1);
      if ((v134[0] & 1) != 0)
        v9 = &__kCFBooleanTrue;
      else
        v9 = &__kCFBooleanFalse;
    }
    else
    {
      v9 = 0;
    }

    if (objc_msgSend(v9, "BOOLValue"))
    {
      v11 = *(unsigned __int8 *)(v1 + 45);
      *(_BYTE *)(v1 + 61) = v11;
      if (v11)
      {
        v12 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v10);
        IsLevelEnabled = _NRLogIsLevelEnabled(v12, 1);

        if (IsLevelEnabled)
        {
          v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v14);
          _NRLogWithArgs(v15, 1, "%s%.30s:%-4d received dns proxy enable request", "", "-[NRDDeviceConductor handleDNSProxyMessage:]", 4827);

        }
        if (!*(_BYTE *)(v1 + 45) || !objc_msgSend(*(id *)(v1 + 128), "ikeClassDEstablished"))
          goto LABEL_27;
        v16 = *(_QWORD *)(v1 + 560);
        if (v16)
        {
          v17 = *(unsigned __int8 *)(v16 + 8);
          if (v17 == 1)
          {
LABEL_27:

            goto LABEL_28;
          }
          if (v17 == 2)
          {
            objc_msgSend((id)v1, "didUpdateDNSProxyState:state:");
            goto LABEL_27;
          }
        }
        sub_1000DF834(v1);
        goto LABEL_27;
      }
    }
    else
    {
      *(_BYTE *)(v1 + 61) = 0;
    }
    v18 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v10);
    v19 = _NRLogIsLevelEnabled(v18, 1);

    if (v19)
    {
      v21 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v20);
      _NRLogWithArgs(v21, 1, "%s%.30s:%-4d received dns proxy disable request", "", "-[NRDDeviceConductor handleDNSProxyMessage:]", 4840);

    }
    objc_msgSend(*(id *)(v1 + 560), "cancel");
    v22 = *(void **)(v1 + 560);
    *(_QWORD *)(v1 + 560) = 0;

    goto LABEL_27;
  }
LABEL_28:
  v23 = sub_1000238A4(v3, 18);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "firstObject"));

  if (v24)
  {
    v25 = sub_1000238A4(v3, 18);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "firstObject"));

    if (v26 && objc_msgSend(v26, "length"))
    {
      v134[0] = 0;
      objc_msgSend(v26, "getBytes:length:", v134, 1);
      if ((v134[0] & 1) != 0)
        v27 = &__kCFBooleanTrue;
      else
        v27 = &__kCFBooleanFalse;
    }
    else
    {
      v27 = 0;
    }

    v28 = objc_msgSend(v27, "BOOLValue");
    v30 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v29);
    v31 = _NRLogIsLevelEnabled(v30, 1);

    if (!v28)
    {
      if (v31)
      {
        v38 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v32);
        _NRLogWithArgs(v38, 1, "%s%.30s:%-4d received dns proxy disable request", "", "-[NRDDeviceConductor handleDNSProxyMessage:]", 4883);

      }
      objc_msgSend(*(id *)(v1 + 568), "cancel");
      v39 = *(void **)(v1 + 568);
      *(_QWORD *)(v1 + 568) = 0;

      goto LABEL_68;
    }
    if (v31)
    {
      v33 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v32);
      _NRLogWithArgs(v33, 1, "%s%.30s:%-4d received discovery proxy enable request", "", "-[NRDDeviceConductor handleDNSProxyMessage:]", 4849);

    }
    if (*(_BYTE *)(v1 + 45))
    {
      v34 = *(id *)(v1 + 128);
      if ((objc_msgSend(v34, "ikeClassDEstablished") & 1) == 0)
      {
LABEL_67:

        goto LABEL_68;
      }
      v35 = *(unsigned __int8 *)(v1 + 62);

      if (v35)
      {
        v36 = *(_QWORD *)(v1 + 568);
        if (!v36)
        {
LABEL_49:
          objc_msgSend(*(id *)(v1 + 568), "cancel");
          v34 = objc_alloc_init((Class)NSMutableSet);
          v129 = 0u;
          v130 = 0u;
          v131 = 0u;
          v132 = 0u;
          v40 = *(id *)(v1 + 112);
          v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v129, v134, 16);
          if (v41)
          {
            v42 = v41;
            v43 = *(_QWORD *)v130;
            do
            {
              for (i = 0; i != v42; i = (char *)i + 1)
              {
                if (*(_QWORD *)v130 != v43)
                  objc_enumerationMutation(v40);
                if (*(_BYTE *)(v1 + 48))
                {
                  v45 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * (_QWORD)i);
                  if (objc_msgSend(v45, "ikeClassDEstablished"))
                  {
                    if (objc_msgSend(v45, "hasCompanionDatapath")
                      && objc_msgSend(v45, "virtualInterface")
                      && objc_msgSend(v45, "type") == 1)
                    {
                      v46 = (void *)NEVirtualInterfaceCopyName(objc_msgSend(v45, "virtualInterface"));
                      objc_msgSend(v34, "addObject:", v46);

                    }
                  }
                }
              }
              v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v129, v134, 16);
            }
            while (v42);
          }

          if (objc_msgSend(v34, "count"))
          {
            v47 = [NRDiscoveryProxyServer alloc];
            v48 = *(void **)(v1 + 104);
            v49 = *(id *)(v1 + 96);
            v50 = v48;
            v51 = v34;
            if (v47)
            {
              v133.receiver = v47;
              v133.super_class = (Class)NRDiscoveryProxyServer;
              v52 = (NRDiscoveryProxyServer *)objc_msgSendSuper2(&v133, "initWithQueue:nrUUID:delegate:", v50, v49, v1);
              v47 = v52;
              if (v52)
                objc_storeStrong((id *)&v52->_ifNamesSet, v34);
            }

            objc_storeStrong((id *)(v1 + 568), v47);
            objc_msgSend(*(id *)(v1 + 568), "start");
          }
          goto LABEL_67;
        }
        v37 = *(unsigned __int8 *)(v36 + 8);
        if (v37 != 1)
        {
          if (v37 == 2)
          {
            objc_msgSend((id)v1, "didUpdateDNSProxyState:state:");
            goto LABEL_68;
          }
          goto LABEL_49;
        }
      }
    }
LABEL_68:

  }
  v53 = sub_1000238A4(v3, 17);
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "firstObject"));

  if (v54
    || (v55 = sub_1000238A4(v3, 19),
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "firstObject")),
        v55,
        v56,
        v56))
  {
    v57 = sub_1000238A4(v3, 17);
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "firstObject"));

    v59 = sub_1000238A4(v3, 19);
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "firstObject"));

    v128 = 0;
    v127 = 0;
    v125 = 0;
    v126 = 0;
    if (v58)
    {
      v61 = sub_1000238A4(v3, 17);
      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "firstObject"));

      sub_1000DFA88(v1, v62, (_BYTE *)&v128 + 1, &v128, &v127, &v126, &v125);
      if (HIBYTE(v128))
      {
        if ((_BYTE)v128)
        {
          v64 = v126;
          v65 = *(id *)(v1 + 552);
          v66 = v65;
          v67 = v65 ? (void *)*((_QWORD *)v65 + 3) : 0;
          v68 = v67;
          v69 = objc_msgSend(v64, "isEqual:", v68);

          if ((v69 & 1) == 0)
          {
            objc_msgSend(*(id *)(v1 + 552), "cancel");
            v70 = [NRDNSProxyClient alloc];
            v72 = v125;
            v71 = v126;
            v73 = *(void **)(v1 + 104);
            v74 = v127;
            v75 = *(id *)(v1 + 96);
            v76 = v73;
            v77 = sub_10001E760((id *)&v70->super.super.isa, v71, v76, v75, (void *)v1, v72, v74, 0);
            v78 = *(void **)(v1 + 552);
            *(_QWORD *)(v1 + 552) = v77;

            objc_msgSend(*(id *)(v1 + 552), "start");
            *(_DWORD *)(v1 + 76) = 0;
          }
        }
      }
      else
      {
        v79 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v63);
        v80 = _NRLogIsLevelEnabled(v79, 1);

        if (v80)
        {
          v82 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v81);
          _NRLogWithArgs(v82, 1, "%s%.30s:%-4d peer failed to setup dns proxy", "", "-[NRDDeviceConductor handleDNSProxyMessage:]", 4909);

        }
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v83 = *(id *)(v1 + 112);
        v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v121, &v133, 16);
        if (v84)
        {
          v85 = v84;
          v86 = *(_QWORD *)v122;
          do
          {
            for (j = 0; j != v85; j = (char *)j + 1)
            {
              if (*(_QWORD *)v122 != v86)
                objc_enumerationMutation(v83);
              v88 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * (_QWORD)j);
              if (objc_msgSend(v88, "ikeClassDEstablished"))
                objc_msgSend(v88, "publishDNSConfig:", 0);
            }
            v85 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v121, &v133, 16);
          }
          while (v85);
        }

        objc_msgSend(*(id *)(v1 + 552), "cancel");
        v89 = *(void **)(v1 + 552);
        *(_QWORD *)(v1 + 552) = 0;

        ++*(_DWORD *)(v1 + 76);
        sub_1000DFCE8((unsigned int *)v1);
      }

    }
    if (!v60)
      goto LABEL_110;
    v90 = sub_1000238A4(v3, 19);
    v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "firstObject"));

    sub_1000DFA88(v1, v91, (_BYTE *)&v128 + 1, &v128, &v127, &v126, &v125);
    if (!HIBYTE(v128))
    {
      v104 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v92);
      v105 = _NRLogIsLevelEnabled(v104, 1);

      if (v105)
      {
        v107 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v106);
        _NRLogWithArgs(v107, 1, "%s%.30s:%-4d peer failed to setup discovery proxy", "", "-[NRDDeviceConductor handleDNSProxyMessage:]", 4942);

      }
      objc_msgSend(*(id *)(v1 + 576), "cancel");
      v108 = *(void **)(v1 + 576);
      *(_QWORD *)(v1 + 576) = 0;

      ++*(_DWORD *)(v1 + 80);
      sub_1000DD234(v1, v109);
      goto LABEL_109;
    }
    if ((_BYTE)v128)
    {
      v93 = v126;
      v94 = *(id *)(v1 + 576);
      v95 = v94;
      if (v94)
        v96 = (void *)*((_QWORD *)v94 + 3);
      else
        v96 = 0;
      v97 = v96;
      if ((objc_msgSend(v93, "isEqual:", v97) & 1) != 0)
      {
        v98 = v125;
        v99 = *(id *)(v1 + 576);
        v100 = v99;
        if (v99)
          v101 = (void *)*((_QWORD *)v99 + 4);
        else
          v101 = 0;
        v102 = v101;
        v103 = objc_msgSend(v98, "isEqualToData:", v102);

        if ((v103 & 1) != 0)
          goto LABEL_109;
      }
      else
      {

      }
      objc_msgSend(*(id *)(v1 + 576), "cancel");
      v110 = [NRDNSProxyClient alloc];
      v112 = v125;
      v111 = v126;
      v113 = *(void **)(v1 + 104);
      v114 = v127;
      v115 = *(id *)(v1 + 96);
      v116 = v113;
      v117 = sub_10001E760((id *)&v110->super.super.isa, v111, v116, v115, (void *)v1, v112, v114, 1);
      v118 = *(void **)(v1 + 576);
      *(_QWORD *)(v1 + 576) = v117;

      if (objc_msgSend(*(id *)(v1 + 128), "virtualInterface"))
      {
        Index = NEVirtualInterfaceGetIndex(objc_msgSend(*(id *)(v1 + 128), "virtualInterface"));
        v120 = *(_QWORD *)(v1 + 576);
        if (v120)
          *(_DWORD *)(v120 + 72) = Index;
      }
      objc_msgSend(*(id *)(v1 + 576), "start");
      *(_DWORD *)(v1 + 80) = 0;
    }
LABEL_109:

LABEL_110:
  }
LABEL_111:

}

id sub_1000DE974(void *a1)
{
  id v1;
  id v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = sub_1000DF41C;
  v9 = sub_1000DF42C;
  v10 = objc_alloc_init((Class)NSMutableDictionary);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000DF434;
  v4[3] = &unk_1001B7E50;
  v4[4] = &v5;
  NRTLVParse(v1, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1000DEA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEA54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a3;
  sub_1000D2DA0(v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", v5));

  v7 = *(_QWORD **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "port"));
  v9 = sub_100133714(v7, v8);

  objc_msgSend(*(id *)(a1 + 48), "addObject:", v9);
  return 1;
}

void sub_1000DEAEC(uint64_t a1, int a2)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *j;
  void *v26;
  nw_endpoint_t v27;
  void *k;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *m;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  id *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  id obj;
  uint64_t v77;
  void *v78;
  char *v79;
  id v80;
  id v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _QWORD v106[2];
  _BYTE v107[128];
  _BYTE v108[128];
  _QWORD v109[2];
  _BYTE v110[128];
  _BYTE v111[128];
  _BYTE v112[128];

  if (*(_QWORD *)(a1 + 632))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v4 = sub_1000D8AA8(a1, 4, 0);
    v5 = v4;
    if (v4 && objc_msgSend(v4, "state") == 8)
    {
      v73 = a1;
      HIDWORD(v71) = a2;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appSvcPolicyIDs"));
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v98, v111, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v99;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v99 != v9)
              objc_enumerationMutation(v6);
            v14 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)i);
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "policyIDs"));
            v16 = objc_msgSend(v15, "containsObject:", v14);

            if (v16)
            {
              objc_opt_self(NRDPolicySessionManager);
              if (qword_1001E4A20 != -1)
                dispatch_once(&qword_1001E4A20, &stru_1001B8590);
              v11 = (id)qword_1001E4A18;
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "policyIdentifierString"));
              sub_10012742C((uint64_t)v11, v12, v14);

              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "policyIDs"));
              objc_msgSend(v13, "removeObject:", v14);

            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v98, v111, 16);
        }
        while (v8);
      }

      v17 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(v5, "setAppSvcPolicyIDs:", v17);

      v84 = (void *)NEVirtualInterfaceCopyName(objc_msgSend(v5, "virtualInterface"));
      v79 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(v73 + 96));
      v18 = *(_QWORD *)(v73 + 632);
      v85 = v5;
      if (!v18 || *(_BYTE *)(v18 + 9))
        goto LABEL_17;
      objc_opt_self(NRApplicationServiceManager);
      if (qword_1001E47D8 != -1)
        dispatch_once(&qword_1001E47D8, &stru_1001B7770);
      v20 = qword_1001E47D0;
      if (qword_1001E47D0)
      {
        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v21 = *(id *)(qword_1001E47D0 + 24);
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v102, v112, 16);
        if (v22)
        {
          v23 = v22;
          v19 = 0;
          v24 = *(_QWORD *)v103;
          do
          {
            for (j = 0; j != v23; j = (char *)j + 1)
            {
              if (*(_QWORD *)v103 != v24)
                objc_enumerationMutation(v21);
              v26 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * (_QWORD)j);
              if (!v19)
                v19 = objc_alloc_init((Class)NSMutableArray);
              v27 = sub_1000F6BA0(v20, v26);
              if (v27)
                objc_msgSend(v19, "addObject:", v27);

            }
            v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v102, v112, 16);
          }
          while (v23);
        }
        else
        {
          v19 = 0;
        }

      }
      else
      {
LABEL_17:
        v19 = 0;
      }
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      obj = v19;
      v80 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v110, 16);
      if (v80)
      {
        v77 = *(_QWORD *)v95;
        do
        {
          for (k = 0; k != v80; k = (char *)k + 1)
          {
            if (*(_QWORD *)v95 != v77)
              objc_enumerationMutation(obj);
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)k)));
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "port"));
            v31 = sub_1001331E8(v79, v30);

            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v31, 128));
            v109[0] = v32;
            v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v109[1] = v33;
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v109, 2));

            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v84, 0));
            v36 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 1200, v35, v34);
            objc_opt_self(NRDPolicySessionManager);
            v82 = v29;
            if (qword_1001E4A20 != -1)
              dispatch_once(&qword_1001E4A20, &stru_1001B8590);
            v37 = (id)qword_1001E4A18;
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "policyIdentifierString"));
            v39 = sub_100127310((uint64_t)v37, v38, v36);
            v40 = (void *)objc_claimAutoreleasedReturnValue(v39);

            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "appSvcPolicyIDs"));
            objc_msgSend(v41, "addObject:", v40);

          }
          v80 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v110, 16);
        }
        while (v80);
      }

      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v42 = v73;
      v75 = *(id *)(v73 + 648);
      v43 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v90, v108, 16);
      v5 = v85;
      if (v43)
      {
        v44 = v43;
        v45 = *(_QWORD *)v91;
        v72 = *(_QWORD *)v91;
        do
        {
          v46 = 0;
          v74 = v44;
          do
          {
            if (*(_QWORD *)v91 != v45)
              objc_enumerationMutation(v75);
            v47 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * (_QWORD)v46);
            if ((sub_1000F7070(*(_QWORD *)(v42 + 632), v47) & 1) == 0)
            {
              v78 = v46;
              v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v42 + 648), "objectForKeyedSubscript:", v47));
              v86 = 0u;
              v87 = 0u;
              v88 = 0u;
              v89 = 0u;
              v81 = v48;
              v49 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v86, v107, 16);
              if (v49)
              {
                v50 = v49;
                v83 = *(_QWORD *)v87;
                do
                {
                  for (m = 0; m != v50; m = (char *)m + 1)
                  {
                    if (*(_QWORD *)v87 != v83)
                      objc_enumerationMutation(v81);
                    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", *(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)m), 128));
                    v106[0] = v52;
                    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    v106[1] = v53;
                    v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v106, 2));

                    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v84, 0));
                    v56 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 1200, v55, v54);
                    objc_opt_self(NRDPolicySessionManager);
                    if (qword_1001E4A20 != -1)
                      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                    v57 = (id)qword_1001E4A18;
                    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "policyIdentifierString"));
                    v59 = sub_100127310((uint64_t)v57, v58, v56);
                    v60 = (void *)objc_claimAutoreleasedReturnValue(v59);

                    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "appSvcPolicyIDs"));
                    objc_msgSend(v61, "addObject:", v60);

                  }
                  v50 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v86, v107, 16);
                }
                while (v50);
              }

              v5 = v85;
              v45 = v72;
              v42 = v73;
              v44 = v74;
              v46 = v78;
            }
            v46 = (char *)v46 + 1;
          }
          while (v46 != v44);
          v44 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v90, v108, 16);
        }
        while (v44);
      }

      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appSvcPolicyIDs"));
      v63 = objc_msgSend(v62, "count");

      if (v63)
      {
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "policyIDs"));
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appSvcPolicyIDs"));
        objc_msgSend(v64, "addObjectsFromArray:", v65);

        if (HIDWORD(v71))
        {
          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v66 = (id)qword_1001E4A18;
          v67 = (id *)v66;
          if (v66)
          {
            dispatch_assert_queue_V2(*((dispatch_queue_t *)v66 + 1));
            if ((objc_msgSend(v67[2], "apply") & 1) == 0)
              sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v68, v69, v70, v71);
          }

        }
      }

    }
  }
}

uint64_t sub_1000DF41C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000DF42C(uint64_t a1)
{

}

uint64_t sub_1000DF434(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id application_service;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  _QWORD v29[2];

  if (*(_BYTE *)a2 == 6)
  {
    v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16);
    v23 = 0;
    v24 = &v23;
    v25 = 0x3032000000;
    v26 = sub_1000DF41C;
    v27 = sub_1000DF42C;
    v28 = 0;
    v17 = 0;
    v18 = &v17;
    v19 = 0x3032000000;
    v20 = sub_1000DF41C;
    v21 = sub_1000DF42C;
    v22 = 0;
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = sub_1000DF41C;
    v15 = sub_1000DF42C;
    v16 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000DF6B4;
    v10[3] = &unk_1001B7590;
    v10[4] = &v23;
    v10[5] = &v17;
    v10[6] = &v11;
    NRTLVParse(v3, v10);
    if (v24[5] && objc_msgSend((id)v12[5], "count"))
    {
      v4 = (void *)v18[5];
      if (v4)
      {
        application_service = objc_msgSend(v4, "copyCEndpoint");
      }
      else
      {
        v29[0] = 0;
        v29[1] = 0;
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
        objc_msgSend(v6, "getUUIDBytes:", v29);

        application_service = (id)nw_endpoint_create_application_service(objc_msgSend((id)v24[5], "UTF8String"), v29);
      }
      v7 = application_service;
      nw_endpoint_set_public_keys(application_service, v12[5]);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectForKeyedSubscript:", v24[5]));
      if (!v8)
        v8 = (void *)nw_array_create();
      nw_array_append(v8, v7);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v8, v24[5]);

    }
    _Block_object_dispose(&v11, 8);

    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v23, 8);

  }
  return 1;
}

void sub_1000DF674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v8 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF6B4(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;

  v3 = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16;
  v4 = *a2;
  switch(v4)
  {
    case 2:
      v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v3);
      v8 = sub_10010A6B4(v5, 1, 0, 0);
      v6 = (id)objc_claimAutoreleasedReturnValue(v8);
      v7 = a1[5];
      goto LABEL_6;
    case 7:
      v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v3);
      v11 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
      if (!v11)
      {
        v12 = objc_alloc_init((Class)NSMutableArray);
        v13 = *(_QWORD *)(a1[6] + 8);
        v14 = *(void **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = v12;

        v11 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
      }
      objc_msgSend(v11, "addObject:", v5);
      goto LABEL_10;
    case 5:
      v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v3);
      v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v5, 4);
      v7 = a1[4];
LABEL_6:
      v9 = *(_QWORD *)(v7 + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v6;

LABEL_10:
      break;
  }
  return 1;
}

uint64_t sub_1000DF7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  v4 = (void *)nw_endpoint_copy_public_keys(a3);
  if (objc_msgSend(v4, "count"))
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v4);

  return 1;
}

void sub_1000DF834(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  NSNumber *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int8 v13;
  id v14;
  void *v15;
  NRDNSProxyServer *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  NRDNSProxyServer *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  objc_super v27;
  _BYTE v28[128];

  if (a1 && *(_BYTE *)(a1 + 61))
  {
    v2 = objc_alloc_init((Class)NSMutableSet);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v3 = *(id *)(a1 + 112);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v8, "ikeClassDEstablished", (_QWORD)v23))
          {
            v9 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", NEVirtualInterfaceGetIndex(objc_msgSend(v8, "virtualInterface")));
            v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
            objc_msgSend(v2, "addObject:", v10);

          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      }
      while (v5);
    }

    v11 = *(_QWORD **)(a1 + 560);
    if (v11)
      v11 = (_QWORD *)v11[9];
    v12 = v11;
    v13 = objc_msgSend(v12, "isEqualToSet:", v2);

    if ((v13 & 1) == 0)
    {
      v14 = *(id *)(a1 + 560);
      v15 = *(void **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = 0;

      objc_msgSend(v14, "cancel");
      if (objc_msgSend(v2, "count"))
      {
        v16 = [NRDNSProxyServer alloc];
        v17 = *(void **)(a1 + 104);
        v18 = *(id *)(a1 + 96);
        v19 = v17;
        v20 = v2;
        if (v16)
        {
          v27.receiver = v16;
          v27.super_class = (Class)NRDNSProxyServer;
          v21 = (NRDNSProxyServer *)objc_msgSendSuper2(&v27, "initWithQueue:nrUUID:delegate:", v19, v18, a1);
          v16 = v21;
          if (v21)
            objc_storeStrong((id *)&v21->_localIfIndices, v2);
        }

        v22 = *(void **)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v16;

        objc_msgSend(*(id *)(a1 + 560), "start");
      }

    }
  }
}

void sub_1000DFA88(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4, _DWORD *a5, void **a6, void **a7)
{
  id v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  int v18;
  id v19;
  int v20;
  id v21;
  int v22;
  id v23;
  int v24;
  id v25;
  int v26;
  id v27;
  int IsLevelEnabled;
  _QWORD v29[10];

  v13 = a2;
  if (v13)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (a7)
            {
              *a3 = 1;
              *a4 = 0;
              *a5 = 0;
              v14 = *a6;
              *a6 = 0;

              v15 = *a7;
              *a7 = 0;

              v29[0] = _NSConcreteStackBlock;
              v29[1] = 3221225472;
              v29[2] = sub_1000DFF54;
              v29[3] = &unk_1001B7480;
              v29[4] = a1;
              v29[5] = a3;
              v29[6] = a6;
              v29[7] = a4;
              v29[8] = a5;
              v29[9] = a7;
              v16 = objc_retainBlock(v29);
              NRTLVParse(v13, v16);
            }
            else
            {
              v27 = sub_1000D5594();
              IsLevelEnabled = _NRLogIsLevelEnabled(v27, 17);

              if (!IsLevelEnabled)
                goto LABEL_9;
              v16 = sub_1000D5594();
              _NRLogWithArgs(v16, 17, "%s called with null serverCertificateDataPtr");
            }
          }
          else
          {
            v25 = sub_1000D5594();
            v26 = _NRLogIsLevelEnabled(v25, 17);

            if (!v26)
              goto LABEL_9;
            v16 = sub_1000D5594();
            _NRLogWithArgs(v16, 17, "%s called with null serverEndpointPtr");
          }
        }
        else
        {
          v23 = sub_1000D5594();
          v24 = _NRLogIsLevelEnabled(v23, 17);

          if (!v24)
            goto LABEL_9;
          v16 = sub_1000D5594();
          _NRLogWithArgs(v16, 17, "%s called with null resolverProtocolPtr");
        }
      }
      else
      {
        v21 = sub_1000D5594();
        v22 = _NRLogIsLevelEnabled(v21, 17);

        if (!v22)
          goto LABEL_9;
        v16 = sub_1000D5594();
        _NRLogWithArgs(v16, 17, "%s called with null shouldStartPtr");
      }
    }
    else
    {
      v19 = sub_1000D5594();
      v20 = _NRLogIsLevelEnabled(v19, 17);

      if (!v20)
        goto LABEL_9;
      v16 = sub_1000D5594();
      _NRLogWithArgs(v16, 17, "%s called with null resultPtr");
    }
  }
  else
  {
    v17 = sub_1000D5594();
    v18 = _NRLogIsLevelEnabled(v17, 17);

    if (!v18)
      goto LABEL_9;
    v16 = sub_1000D5594();
    _NRLogWithArgs(v16, 17, "%s called with null tlvData");
  }

LABEL_9:
}

void sub_1000DFCE8(unsigned int *val)
{
  void *v2;
  unsigned int v3;
  dispatch_time_t v4;
  void *v5;
  NSObject *v6;
  unsigned __int8 *v7;
  _QWORD block[5];
  id v9;
  id location;

  if (val && *((_BYTE *)val + 60))
  {
    v2 = (void *)*((_QWORD *)val + 69);
    if (v2)
    {
      v7 = v2;
      objc_msgSend(val, "didUpdateDNSProxyState:state:", v7, v7[8]);

    }
    else
    {
      objc_initWeak(&location, val);
      v3 = val[19];
      if (v3 >= 0xC)
        v3 = 12;
      val[19] = v3;
      v4 = dispatch_time(0, 1000000000 << (v3 + 1));
      v5 = (void *)*((_QWORD *)val + 13);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000DFE14;
      block[3] = &unk_1001B87F0;
      v6 = v5;
      objc_copyWeak(&v9, &location);
      block[4] = val;
      dispatch_after(v4, v6, block);

      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1000DFE14(uint64_t a1)
{
  _BYTE *WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NRLinkDirectorMessage *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  _BYTE *v18;
  char v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && WeakRetained[14] && WeakRetained[60])
  {
    v4 = *(_QWORD *)(a1 + 32);
    v18 = WeakRetained;
    if (v4)
      v5 = *(_QWORD *)(v4 + 96);
    else
      v5 = 0;
    v6 = (void *)_NRCopyLogObjectForNRUUID(v5, v3);
    IsLevelEnabled = _NRLogIsLevelEnabled(v6, 1);

    if (IsLevelEnabled)
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (v9)
        v10 = *(_QWORD *)(v9 + 96);
      else
        v10 = 0;
      v11 = (void *)_NRCopyLogObjectForNRUUID(v10, v8);
      _NRLogWithArgs(v11, 1, "%s%.30s:%-4d requesting to start DNS proxy service", "", "-[NRDDeviceConductor startDNSProxyClientIfNeeded]_block_invoke", 4707);

    }
    v12 = [NRLinkDirectorMessage alloc];
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      v14 = *(void **)(v13 + 96);
    else
      v14 = 0;
    v15 = sub_100022C18(v12, v14);
    v16 = v15;
    if (v15)
    {
      *((_BYTE *)v15 + 9) = 1;
      v19 = 1;
      v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v19, 1);
      sub_1000231F8((uint64_t)v16, 16, v17);

    }
    sub_100024728((uint64_t)v16);

    WeakRetained = v18;
  }

}

uint64_t sub_1000DFF54(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void **v18;
  void *v19;
  char v20;
  id v21;
  void **v22;
  void *v23;

  v4 = bswap32(*(unsigned __int16 *)(a2 + 1));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = *(_QWORD *)(v5 + 96);
  else
    v6 = 0;
  v7 = HIWORD(v4);
  v8 = (void *)_NRCopyLogObjectForNRUUID(v6, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v8, 2);

  if (IsLevelEnabled)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      v12 = *(_QWORD *)(v11 + 96);
    else
      v12 = 0;
    v13 = (void *)_NRCopyLogObjectForNRUUID(v12, v10);
    _NRLogWithArgs(v13, 2, "%s%.30s:%-4d processing tlv %u (len %u)", "", "-[NRDDeviceConductor fillInDNSUpdateStateFromTLVData:resultPtr:shouldStartPtr:resolverProtocolPtr:serverEndpointPtr:serverCertificateDataPtr:]_block_invoke", 4772, *a2, v7);

  }
  switch(*a2)
  {
    case 1u:
      if (a2[3])
        goto LABEL_18;
      v14 = 0;
      **(_BYTE **)(a1 + 40) = 0;
      break;
    case 2u:
      v15 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v7);
      v14 = 1;
      v16 = sub_10010A6B4(v15, 1, 0, 0);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      v18 = *(void ***)(a1 + 48);
      v19 = *v18;
      *v18 = (void *)v17;

      if (**(_QWORD **)(a1 + 48))
        **(_BYTE **)(a1 + 56) = 1;

      break;
    case 3u:
      v20 = bswap64(*(_QWORD *)(a2 + 3));
      if ((v20 & 1) != 0)
      {
        **(_DWORD **)(a1 + 64) = 0;
        goto LABEL_18;
      }
      v14 = 1;
      if ((v20 & 2) != 0)
        **(_DWORD **)(a1 + 64) = 1;
      break;
    case 4u:
      v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v7);
      v22 = *(void ***)(a1 + 72);
      v23 = *v22;
      *v22 = v21;

      goto LABEL_18;
    default:
LABEL_18:
      v14 = 1;
      break;
  }
  return v14;
}

void *sub_1000E0118(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  if (!a1 || !*(_BYTE *)(a1 + 46))
    return 0;
  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = v2;
  if (*(_QWORD *)(a1 + 472))
    objc_msgSend(v2, "addObject:");
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = *(id *)(a1 + 112);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "proxyAgentUUID", (_QWORD)v19));

        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "proxyAgentUUID"));
          objc_msgSend(v3, "addObject:", v12);

        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "companionProxyAgent"));

        if (v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "companionProxyAgent"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "agentUUID"));
          objc_msgSend(v3, "addObject:", v15);

          v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "companionProxyAgent"));
          if (v16)
          {
            v17 = (void *)v16;
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v16 + 64), "agentUUID"));

            if (v9)
              objc_msgSend(v3, "addObject:", v9);
          }
          else
          {
            v9 = 0;
          }

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v6);
  }

  return v3;
}

void sub_1000E0314(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 128))
      return;
    v1 = *(_QWORD *)(v1 + 632);
  }
  sub_1000F6E5C(v1, *(void **)(a1 + 40));
}

void sub_1000E0338(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  id v11;
  _BYTE *v12;
  char v13;

  v2 = a2;
  if (sub_1000E0460(a1, a2))
  {
    v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

    if (IsLevelEnabled)
    {
      v8 = _NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
      v9 = (void *)v8;
      v10 = "stop";
      if (v2)
        v10 = "start";
      _NRLogWithArgs(v8, 1, "%s%.30s:%-4d requesting to %s discovery proxy service", "", "-[NRDDeviceConductor sendDiscoveryProxyClientMessageWithEnabled:]", 4657, v10);

    }
    v12 = sub_100022C18([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
    if (v12)
    {
      v12[9] = 1;
      v13 = v2;
      v11 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v13, 1);
      sub_1000231F8((uint64_t)v12, 18, v11);

    }
    sub_100024728((uint64_t)v12);

  }
}

id sub_1000E0460(uint64_t a1, uint64_t a2)
{
  id result;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int IsLevelEnabled;
  uint64_t v11;

  if (!*(_BYTE *)(a1 + 62))
  {
    v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 2);

    if (IsLevelEnabled)
    {
      v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
      _NRLogWithArgs(v8, 2, "%s%.30s:%-4d not eligible to use discovery proxy service");
      goto LABEL_9;
    }
    return 0;
  }
  if (!*(_BYTE *)(a1 + 46))
    return 0;
  result = objc_msgSend(*(id *)(a1 + 128), "ikeClassDEstablished");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 128), "type");
    if ((_DWORD)result != 1)
    {
      v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v4);
      v6 = _NRLogIsLevelEnabled(v5, 2);

      if (v6)
      {
        v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
        _NRLogWithArgs(v8, 2, "%s%.30s:%-4d not requesting discovery proxy service for non-BT primary link");
LABEL_9:

        return 0;
      }
      return 0;
    }
  }
  return result;
}

void sub_1000E056C(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[14] && WeakRetained[72])
  {
    v2 = WeakRetained;
    sub_1000E0338((uint64_t)WeakRetained, 1);
    WeakRetained = v2;
  }

}

void sub_1000E05B0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v3 = (id)qword_1001E4708;
    v4 = v3;
    if (v3)
      v5 = (void *)*((_QWORD *)v3 + 6);
    else
      v5 = 0;
    v6 = v5;

    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      v8 = *(void **)(v7 + 232);
    else
      v8 = 0;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  sub_100147674((uint64_t)v6, 0, v8);

  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 104));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v10 = (id)qword_1001E4708;
    v11 = v10;
    if (v10)
      v12 = (void *)*((_QWORD *)v10 + 6);
    else
      v12 = 0;
    v13 = v12;

    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
      v15 = *(void **)(v14 + 232);
    else
      v15 = 0;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  sub_100148B30(v13, v15);

  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    *(_BYTE *)(v16 + 34) = 0;
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
      sub_100121E18(*(void **)(v17 + 96), 1030, 0, 0);
  }
}

void sub_1000E0744(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  id *v19;
  BOOL v20;
  NSObject *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *i;
  void *v32;
  id v33;
  uint64_t ShortStringFromNRLinkSubtype;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  id v43;
  void *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[5];
  id v51;
  BOOL v52;
  _QWORD v53[2];
  _BYTE v54[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    memset(v53, 0, 9);
    if ((unint64_t)objc_msgSend(v3, "length") > 8)
    {
      objc_msgSend(v4, "getBytes:length:", v53, 9);
      v15 = *(_DWORD *)((char *)v53 + 5);
      if (LOBYTE(v53[0]))
      {
        if (*(_BYTE *)(a1 + 10) || *(_BYTE *)(a1 + 50))
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v16 = (id)qword_1001E4708;
          v17 = v16;
          if (v16)
            v18 = (void *)*((_QWORD *)v16 + 6);
          else
            v18 = 0;
          v19 = v18;

          v20 = v19 != 0;
          if (v19)
          {
            v21 = v19[3];
            dispatch_assert_queue_V2(v21);

          }
        }
        else
        {
          v20 = 0;
        }
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        v22 = sub_1000D8AA8(a1, 2, 101);
        v23 = v22;
        if (!*(_BYTE *)(a1 + 44))
          objc_msgSend(v22, "startRequested");
        v24 = objc_alloc_init((Class)NSMutableArray);
        if ((unint64_t)objc_msgSend(v4, "length") >= 0xA)
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subdataWithRange:", 9, objc_msgSend(v4, "length") - 9));
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_1000E0C94;
          v50[3] = &unk_1001B74D0;
          v50[4] = a1;
          v52 = v20;
          v51 = v24;
          NRTLVParse(v25, v50);

        }
        if (objc_msgSend(v24, "count"))
        {
          v43 = v24;
          v44 = v23;
          v45 = v15;
          objc_storeStrong((id *)(a1 + 432), v24);
          v26 = objc_alloc_init((Class)NSMutableString);
          v46 = 0u;
          v47 = 0u;
          v48 = 0u;
          v49 = 0u;
          v27 = *(id *)(a1 + 432);
          v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
          if (v28)
          {
            v29 = v28;
            v30 = *(_QWORD *)v47;
            do
            {
              for (i = 0; i != v29; i = (char *)i + 1)
              {
                if (*(_QWORD *)v47 != v30)
                  objc_enumerationMutation(v27);
                v32 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
                v33 = objc_msgSend(v26, "length");
                ShortStringFromNRLinkSubtype = createShortStringFromNRLinkSubtype(objc_msgSend(v32, "unsignedCharValue"));
                v35 = (void *)ShortStringFromNRLinkSubtype;
                if (v33)
                  objc_msgSend(v26, "appendFormat:", CFSTR("/%@"), ShortStringFromNRLinkSubtype);
                else
                  objc_msgSend(v26, "appendString:", ShortStringFromNRLinkSubtype);

              }
              v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
            }
            while (v29);
          }

          v41 = "ack";
          if ((v45 & 0x1000000) == 0)
            v41 = "req";
          sub_1000D5060(a1, 1050, CFSTR("recv %s %d %@"), v36, v37, v38, v39, v40, (uint64_t)v41);
          if (sub_1000E0B8C(a1))
            sub_1000D7A20(a1, 1);
          else
            *(_BYTE *)(a1 + 26) = 1;
          v24 = v43;
          v23 = v44;

        }
      }
      else
      {
        v42 = "ack ";
        if ((*(_DWORD *)((_BYTE *)v53 + 5) & 0x1000000) == 0)
          v42 = "req";
        sub_1000D5060(a1, 1050, CFSTR("recv %s %d"), v10, v11, v12, v13, v14, (uint64_t)v42);
        *(_BYTE *)(a1 + 53) = 0;
        sub_1000D7A20(a1, 0);
      }
    }
    else
    {
      v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v5);
      IsLevelEnabled = _NRLogIsLevelEnabled(v6, 16);

      if (IsLevelEnabled)
      {
        v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v8);
        _NRLogWithArgs(v9, 16, "%s%.30s:%-4d invalid request size %lu", "", "-[NRDDeviceConductor processLinkUpgradeRequest:]", 6446, objc_msgSend(v4, "length"));

      }
    }
  }

}

BOOL sub_1000E0B8C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  void *v11;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v3 = v2;
  if (v2)
    v4 = (void *)*((_QWORD *)v2 + 6);
  else
    v4 = 0;
  v5 = v4;

  v6 = sub_100148F4C((uint64_t)v5);
  if (!v6)
  {
    v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 0);

    if (IsLevelEnabled)
    {
      v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v10);
      _NRLogWithArgs(v11, 0, "%s%.30s:%-4d Deferring prefer Wi-Fi request as Wi-Fi is powered off", "", "-[NRDDeviceConductor canProcessPreferWiFiRequest]", 6567);

    }
  }
  return v6;
}

uint64_t sub_1000E0C94(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int IsLevelEnabled;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*(_BYTE *)a2 != 1)
    return 1;
  if (*(_WORD *)(a2 + 1) != 256)
  {
    v18 = *(_QWORD *)(a1 + 32);
    if (v18)
      v19 = *(_QWORD *)(v18 + 96);
    else
      v19 = 0;
    v20 = (void *)_NRCopyLogObjectForNRUUID(v19, a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v20, 16);

    if (IsLevelEnabled)
    {
      v23 = *(_QWORD *)(a1 + 32);
      if (v23)
        v24 = *(_QWORD *)(v23 + 96);
      else
        v24 = 0;
      v13 = (void *)_NRCopyLogObjectForNRUUID(v24, v22);
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d invalid size %u");
      goto LABEL_39;
    }
    return 1;
  }
  v3 = *(unsigned __int8 *)(a2 + 3);
  v4 = 0x6867660000650000uLL >> (8 * v3);
  if (v3 >= 8)
    LOBYTE(v4) = 0;
  if (v4 > 0x65u)
  {
    if (v4 == 102)
    {
      v29 = *(_QWORD *)(a1 + 32);
      if (!v29 || !*(_BYTE *)(v29 + 10) || !*(_BYTE *)(a1 + 48))
        return 1;
      v26 = *(void **)(a1 + 40);
      v27 = 102;
    }
    else
    {
      if (v4 != 103)
        return 1;
      v25 = *(_QWORD *)(a1 + 32);
      if (!v25 || !*(_BYTE *)(v25 + 50) || !*(_BYTE *)(a1 + 48))
        return 1;
      v26 = *(void **)(a1 + 40);
      v27 = 103;
    }
LABEL_38:
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v27));
    objc_msgSend(v26, "addObject:", v13);
    goto LABEL_39;
  }
  if (!(_BYTE)v4)
  {
    if (v3 > 7)
      return 1;
    v28 = 0x202020504020100uLL >> (8 * v3);
    if (!(_BYTE)v28)
      return 1;
    v26 = *(void **)(a1 + 40);
    v27 = v28;
    goto LABEL_38;
  }
  if (v4 == 101)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v6 = (id)qword_1001E4708;
      v7 = v6;
      if (v6)
        v8 = (void *)*((_QWORD *)v6 + 6);
      else
        v8 = 0;
      v9 = v8;

      v10 = *(_QWORD *)(a1 + 32);
      if (v10)
        v11 = *(void **)(v10 + 96);
      else
        v11 = 0;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v12 = sub_10014725C((uint64_t)v9, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    if (v13)
      goto LABEL_18;
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 44))
      {
LABEL_18:
        v16 = *(void **)(a1 + 40);
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 101));
        objc_msgSend(v16, "addObject:", v17);

LABEL_39:
        return 1;
      }
      v31 = *(_QWORD *)(v15 + 96);
    }
    else
    {
      v31 = 0;
    }
    v32 = (void *)_NRCopyLogObjectForNRUUID(v31, v14);
    v33 = _NRLogIsLevelEnabled(v32, 16);

    if (!v33)
      return 1;
    v35 = *(_QWORD *)(a1 + 32);
    if (v35)
      v36 = *(_QWORD *)(v35 + 96);
    else
      v36 = 0;
    v13 = (void *)_NRCopyLogObjectForNRUUID(v36, v34);
    _NRLogWithArgs(v13, 16, "%s%.30s:%-4d Could not enable prefer Wi-Fi request as no peer address found");
    goto LABEL_39;
  }
  return 1;
}

void sub_1000E0FAC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (a1)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v2 = *(id *)(a1 + 152);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v9;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v2);
          xpc_connection_cancel(*(xpc_connection_t *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6));
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v4);
    }

    objc_msgSend(*(id *)(a1 + 152), "removeAllObjects", (_QWORD)v8);
    v7 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;

  }
}

void sub_1000E10BC(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *v3;
  dispatch_queue_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NRLinkDirectorRequest *v14;
  NRLinkDirectorRequest *v15;
  SEL v16;
  uint64_t v17;
  void **newValue;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;

  v3 = *(dispatch_queue_t **)(a1 + 32);
  if (!v3)
    goto LABEL_16;
  dispatch_assert_queue_V2(v3[13]);
  v4 = (dispatch_queue_t *)sub_1000D8AA8((uint64_t)v3, 1, 0);
  v3 = v4;
  if (v4 && -[dispatch_queue_t state](v4, "state") == 8)
    goto LABEL_15;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = *(_QWORD *)(v5 + 96);
  else
LABEL_16:
    v6 = 0;
  v7 = (void *)_NRCopyLogObjectForNRUUID(v6, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

  if (IsLevelEnabled)
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      v11 = *(_QWORD *)(v10 + 96);
    else
      v11 = 0;
    v12 = (void *)_NRCopyLogObjectForNRUUID(v11, v9);
    _NRLogWithArgs(v12, 0, "%s%.30s:%-4d BT unavailable and ClassC is unlocked, starting Wi-Fi immediately", "", "-[NRDDeviceConductor linkIsUnavailable:]_block_invoke", 5747);

  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v13 + 104));
    sub_1000D9FAC(v13, 1, 0xAu);
  }
  v14 = objc_alloc_init(NRLinkDirectorRequest);
  v15 = v14;
  if (v14)
  {
    v14->_type = 6;
    v14->_allowsSuspendedLink = 0;
    objc_storeStrong((id *)&v14->_timerDescription, CFSTR("QR-activation-hysteresis"));
    objc_storeStrong((id *)&v15->_cancelIfLinkTypeReady, &off_1001C4B28);
    v15->_attemptImmediately = 1;
    v15->_timeout = 10;
    newValue = _NSConcreteStackBlock;
    v19 = 3221225472;
    v20 = sub_1000E313C;
    v21 = &unk_1001B8AE0;
    v22 = *(_QWORD *)(a1 + 32);
    objc_setProperty_nonatomic_copy(v15, v16, &newValue, 48);
    v17 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    newValue = _NSConcreteStackBlock;
    v19 = 3221225472;
    v20 = sub_1000E313C;
    v21 = &unk_1001B8AE0;
    v17 = *(_QWORD *)(a1 + 32);
    v22 = v17;
  }
  sub_1000D320C(v17, v15);

LABEL_15:
}

void sub_1000E129C(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    sub_1000D9FAC(a1, 1, 0xAu);
  }
}

void sub_1000E12D4(uint64_t a1)
{
  int v2;
  int v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  unsigned __int16 v10;
  void *i;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  int IsLevelEnabled;
  id v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (!objc_msgSend(*(id *)(a1 + 112), "count"))
    {
      sub_1000E1B64(a1, 0);
      return;
    }
    if (!*(_BYTE *)(a1 + 57))
    {
      v2 = *(unsigned __int8 *)(a1 + 39);
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      if (v2 == 2)
        v3 = 101;
      else
        v3 = 0;
      v4 = sub_1000D8AA8(a1, v2, v3);
      v5 = v4;
      if (v4 && objc_msgSend(v4, "state") == 8)
        goto LABEL_27;

    }
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v6 = *(id *)(a1 + 112);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v7)
    {
      v8 = v7;
      v5 = 0;
      v9 = *(_QWORD *)v21;
      v10 = -1;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v21 != v9)
            objc_enumerationMutation(v6);
          v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v12, "state") == 8 && objc_msgSend(v12, "metric") < v10)
          {
            v13 = v12;

            v10 = (unsigned __int16)objc_msgSend(v13, "metric");
            v5 = v13;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v8);

      if (!v5 || objc_msgSend(v5, "state") == 8)
        goto LABEL_27;
      v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v14);
      IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

      if (IsLevelEnabled)
      {
        v17 = *(id *)(a1 + 96);
        v19 = (void *)_NRCopyLogObjectForNRUUID(v17, v18);
        _NRLogWithArgs(v19, 17, "Attempting to set a non-ready link %@ as primary link", v5);

      }
    }
    else
    {
      v5 = v6;
    }

    v5 = 0;
LABEL_27:
    sub_1000E1B64(a1, v5);

  }
}

void sub_1000E1540(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];

  v31 = a2;
  if (a1 && objc_msgSend(*(id *)(a1 + 128), "state") == 8)
  {
    v4 = sub_100022B68([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
    v5 = v4;
    if (v4)
    {
      objc_storeStrong((id *)v4 + 3, a2);
      if (!*(_BYTE *)(a1 + 57))
        v5[8] = 1;
      v6 = *(id *)(a1 + 112);
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v7 = v6;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v38;
LABEL_9:
        v11 = 0;
        while (1)
        {
          if (*(_QWORD *)v38 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v11);
          if (objc_msgSend(v12, "state") != 255)
          {
            if (objc_msgSend(v12, "isPrimary"))
              break;
          }
          if (v9 == (id)++v11)
          {
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
            if (!v9)
              goto LABEL_21;
            goto LABEL_9;
          }
        }
        v13 = objc_msgSend(v12, "type");
        v14 = (objc_msgSend(v12, "subtype") - 101);
        v15 = 0x40300020100uLL >> (8 * v13);
        if (v13 >= 6)
          LOBYTE(v15) = 0;
        if (v14 >= 4)
          v16 = v15;
        else
          v16 = 0x7060502u >> (8 * v14);
        v36 = v16;
        v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v36, 1);
        sub_1000231F8((uint64_t)v5, 6, v17);

      }
LABEL_21:

      v30 = v7;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allObjects"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "sortedArrayUsingComparator:", &stru_1001B6478));
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v33 != v21)
              objc_enumerationMutation(v18);
            v23 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v23, "state") == 8
              && (objc_msgSend(v23, "isPrimary") & 1) == 0)
            {
              v36 = 0;
              v24 = objc_msgSend(v23, "type");
              v25 = (objc_msgSend(v23, "subtype") - 101);
              v26 = 0x40300020100uLL >> (8 * v24);
              if (v24 >= 6)
                LOBYTE(v26) = 0;
              if (v25 >= 4)
                v27 = v26;
              else
                v27 = 0x7060502u >> (8 * v25);
              v36 = v27;
              v28 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v36, 1);
              sub_1000231F8((uint64_t)v5, 6, v28);

            }
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
        }
        while (v20);
      }

    }
    else
    {

    }
    sub_100024728((uint64_t)v5);

  }
}

void sub_1000E18BC(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];

  if (a1 && sub_1000D5F48(a1))
  {
    if (qword_1001E4870 != -1)
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
    if (byte_1001E4868)
    {
      sub_1000D56B8(a1, 5u, 0);
    }
    else
    {
      v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      v3 = v2;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      if (v2)
        v4 = (void *)*((_QWORD *)v2 + 16);
      else
        v4 = 0;
      v5 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allowedLinkSubtypes"));

      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v24;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v24 != v9)
              objc_enumerationMutation(v6);
            sub_1000D56B8(a1, 0, (char)objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "unsignedShortValue"));
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        }
        while (v8);
      }

      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      if (v3)
        v11 = (void *)*((_QWORD *)v3 + 16);
      else
        v11 = 0;
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allowedLinkTypes", (_QWORD)v19));

      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v20;
        do
        {
          for (j = 0; j != v15; j = (char *)j + 1)
          {
            if (*(_QWORD *)v20 != v16)
              objc_enumerationMutation(v13);
            v18 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v18, "unsignedShortValue") != 2)
              sub_1000D56B8(a1, objc_msgSend(v18, "unsignedShortValue"), 0);
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        }
        while (v15);
      }

    }
  }
}

void sub_1000E1B64(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  int IsLevelEnabled;
  id v14;
  uint64_t v15;
  void *v16;
  char *v17;
  char *v18;
  void *v19;
  id v20;
  unsigned int v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  unsigned __int8 v31;
  id v32;
  unsigned int v33;
  void *v34;
  id v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  unsigned int v58;
  void *v59;
  unsigned int v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  void *v98;
  int v99;
  uint64_t v100;
  void *v101;
  id v102;
  id *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  void *v108;
  int v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  void *v113;
  int v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void *v118;
  int v119;
  uint64_t v120;
  void *v121;
  int v122;
  const char *v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  void *v133;
  void *v134;
  void *v135;
  id v136;
  _QWORD v137[2];
  void *v138;
  _QWORD v139[2];
  void *v140;
  _QWORD v141[2];
  _QWORD *v142;
  void *v143;
  _QWORD v144[2];
  char __strerrbuf[8];
  uint64_t v146;
  void *v147;

  v136 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  v9 = (id *)(a1 + 128);
  if (*(id *)(a1 + 128) == v136)
    goto LABEL_81;
  sub_1000D5060(a1, 1012, CFSTR("%@ -> (%@)"), v4, v5, v6, v7, v8, *(_QWORD *)(a1 + 128));
  v10 = *(id *)(a1 + 128);
  *(_BYTE *)(a1 + 41) = objc_msgSend(v10, "type");
  v12 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v11);
  IsLevelEnabled = _NRLogIsLevelEnabled(v12, 1);

  if (IsLevelEnabled)
  {
    v14 = *(id *)(a1 + 96);
    v16 = (void *)_NRCopyLogObjectForNRUUID(v14, v15);
    v123 = "";
    _NRLogWithArgs(v16, 1, "%s%.30s:%-4d Changing primary link %@ ----> %@");

  }
  objc_storeStrong((id *)(a1 + 128), a2);
  sub_1000E28B4(a1);
  v17 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  v18 = v17;
  if (!*(_BYTE *)(a1 + 48))
  {
    v19 = v17 ? (void *)*((_QWORD *)v17 + 16) : 0;
    v20 = v19;
    v21 = objc_msgSend(v20, "hasPoliciesForProxyCriteria");

    if (v21)
    {
      v22 = v18 ? (void *)*((_QWORD *)v18 + 16) : 0;
      v23 = v22;
      v24 = objc_msgSend(v23, "proxyCapability");

      if (v24 == (id)2)
      {
        if (v18)
          v25 = (void *)*((_QWORD *)v18 + 16);
        else
          v25 = 0;
        v26 = v25;
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "proxyProviderCriteria"));
        if (objc_msgSend(v27, "excludeLegacyClients"))
        {

          goto LABEL_47;
        }
        v28 = v18 ? (void *)*((_QWORD *)v18 + 16) : 0;
        v29 = v28;
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "proxyProviderCriteria"));
        v31 = objc_msgSend(v30, "excludeNonMatchingLegacyClients");

        if ((v31 & 1) == 0)
        {
          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v32 = (id)qword_1001E4A18;
          sub_100127618((uint64_t)v32, *(void **)(a1 + 296));

          v33 = objc_msgSend(*(id *)(a1 + 128), "state");
          if (v18)
            v34 = (void *)*((_QWORD *)v18 + 16);
          else
            v34 = 0;
          v35 = v34;
          v36 = objc_msgSend(v35, "hasCompanionDatapath");

          v37 = *v9;
          if (v36)
            v38 = NEVirtualInterfaceCopyName(objc_msgSend(v37, "virtualInterface"));
          else
            v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "localInterfaceName"));
          v39 = (void *)v38;
          if (v33 != 8)
            goto LABEL_41;
          v131 = (void *)v38;
          v40 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v41 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition usesModernNetworkAPI](NEPolicyCondition, "usesModernNetworkAPI"));
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allowsUnsafeSocketAccess](NEPolicyCondition, "allowsUnsafeSocketAccess"));
          objc_msgSend(v42, "setNegative:", 1);
          v43 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 620));
          v44 = objc_alloc((Class)NEPolicy);
          *(_QWORD *)__strerrbuf = v40;
          v146 = v41;
          v129 = v42;
          v130 = (void *)v41;
          v147 = v42;
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", __strerrbuf, 3));
          v46 = objc_msgSend(v44, "initWithOrder:result:conditions:", 600, v43, v45);

          v47 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v48 = sub_100127310((uint64_t)v47, *(void **)(a1 + 296), v46);

          v49 = +[NEPolicyCondition effectivePID:](NEPolicyCondition, "effectivePID:", getpid());
          v50 = objc_claimAutoreleasedReturnValue(v49);
          v51 = objc_alloc((Class)NEPolicy);
          v134 = (void *)v40;
          v144[0] = v40;
          v144[1] = v50;
          v128 = (void *)v50;
          v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v144, 2));
          v135 = (void *)v43;
          v53 = objc_msgSend(v51, "initWithOrder:result:conditions:", 600, v43, v52);

          v54 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v55 = sub_100127310((uint64_t)v54, *(void **)(a1 + 296), v53);

          if (v18)
            v56 = (void *)*((_QWORD *)v18 + 16);
          else
            v56 = 0;
          v57 = v56;
          v58 = objc_msgSend(v57, "usesTLS");

          if (v58)
          {
            v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 128), "remoteOuterEndpoint"));
            v60 = objc_msgSend(v59, "addressFamily");

            v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 128), "remoteOuterEndpoint"));
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "hostname"));
            v63 = objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v62, CFSTR("0")));

            if (v60 == 30)
              v64 = 128;
            else
              v64 = 32;
            v132 = (_QWORD *)v63;
            v65 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v63, v64));
            v142 = v65;
            v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v143 = v66;
            v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v142, 2));

            v68 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 600, v135, v67);
            v69 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v70 = sub_100127310((uint64_t)v69, *(void **)(a1 + 296), v68);
          }
          else
          {
            v71 = sub_1001348E8(v18);
            if (v71)
            {
              v72 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v71, 128));
              v142 = v72;
              v73 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
              v143 = v73;
              v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v142, 2));

              v75 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 600, v135, v74);
              v76 = sub_100126F30((uint64_t)NRDPolicySessionManager);
              v77 = sub_100127310((uint64_t)v76, *(void **)(a1 + 296), v75);

              v53 = v75;
            }
            v65 = sub_100134928(v18);
            if (!v65)
            {
              v124 = v53;
              v81 = v131;
              goto LABEL_38;
            }
            v132 = v71;
            v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v65, 128));
            v141[0] = v67;
            v78 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v141[1] = v78;
            v69 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v141, 2));

            v68 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 600, v135, v69);
            v79 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v80 = sub_100127310((uint64_t)v79, *(void **)(a1 + 296), v68);

          }
          v81 = v131;
          v124 = v68;

          v71 = v132;
LABEL_38:

          v133 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 7, v81));
          objc_msgSend(v133, "setControlUnit:", 0xFFFFFFFLL);
          v82 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowIPProtocol:](NEPolicyCondition, "flowIPProtocol:", 17));
          v83 = objc_alloc((Class)NEPolicy);
          v140 = v133;
          v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v140, 1));
          v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v84));
          v139[0] = v134;
          v139[1] = v82;
          v127 = (void *)v82;
          v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v139, 2));
          v125 = objc_msgSend(v83, "initWithOrder:result:conditions:", 610, v85, v86);

          v87 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v88 = sub_100127310((uint64_t)v87, *(void **)(a1 + 296), v125);

          v89 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowIPProtocol:](NEPolicyCondition, "flowIPProtocol:", 6));
          v90 = objc_alloc((Class)NEPolicy);
          v138 = v133;
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v138, 1));
          v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v91));
          v137[0] = v134;
          v137[1] = v89;
          v126 = (void *)v89;
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v137, 2));
          v94 = objc_msgSend(v90, "initWithOrder:result:conditions:", 610, v92, v93);

          v95 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v96 = sub_100127310((uint64_t)v95, *(void **)(a1 + 296), v94);

          v98 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v97);
          v99 = _NRLogIsLevelEnabled(v98, 0);

          if (v99)
          {
            v101 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v100);
            v123 = "";
            _NRLogWithArgs(v101, 0, "%s%.30s:%-4d %@: installed flow divert policies");

          }
          v39 = v131;
LABEL_41:
          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v102 = (id)qword_1001E4A18;
          v103 = (id *)v102;
          if (v102)
          {
            dispatch_assert_queue_V2(*((dispatch_queue_t *)v102 + 1));
            if ((objc_msgSend(v103[2], "apply") & 1) == 0)
              sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v104, v105, v106, (uint64_t)v123);
          }

        }
      }
    }
  }
LABEL_47:

  v107 = *(id *)(a1 + 368);
  if (v107)
    ++v107[6];

  if (!*v9)
  {
LABEL_53:
    if (!*(_BYTE *)(a1 + 45))
      goto LABEL_63;
    goto LABEL_54;
  }
  if (*(_QWORD *)(a1 + 408))
  {
    if (objc_msgSend(v10, "state") != 255)
      sub_100109BF4(*(void **)(a1 + 408));
    goto LABEL_53;
  }
  sub_1000E2DE4(a1);
  if (!*(_BYTE *)(a1 + 45))
    goto LABEL_63;
LABEL_54:
  if (*v9)
  {
    if (!*(_BYTE *)(a1 + 42) || !sub_1001099A0())
      goto LABEL_63;
    *(_BYTE *)(a1 + 42) = 0;
    v108 = *(void **)(a1 + 96);
    v109 = 1036;
  }
  else
  {
    LODWORD(v144[0]) = 0x10000;
    if (sysctlbyname("net.link.generic.system.companion_sndbuf_limit", 0, 0, v144, 4uLL) < 0)
    {
      v122 = *__error();
      if (strerror_r(v122, __strerrbuf, 0x80uLL))
        __strerrbuf[0] = 0;
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d sysctl net.link.generic.system.companion_sndbuf_limit -> %d failed: [%d] %s", "", "NRLimitCompanionLinkFlows", 893, LODWORD(v144[0]), v122, __strerrbuf);
      }
      goto LABEL_63;
    }
    *(_BYTE *)(a1 + 42) = 1;
    v108 = *(void **)(a1 + 96);
    v109 = 1035;
  }
  sub_100121E18(v108, v109, 0, 0);
LABEL_63:
  if (v10)
    objc_msgSend(v10, "setIsPrimary:", 0);
  if (*v9)
  {
    objc_msgSend(*v9, "setIsPrimary:", 1);
    sub_1000E1540(a1, *(void **)(a1 + 128));
    v110 = NEVirtualInterfaceCopyName(objc_msgSend(*(id *)(a1 + 128), "virtualInterface"));
    v111 = *(void **)(a1 + 408);
    *(_QWORD *)(a1 + 408) = v110;
  }
  else
  {
    v111 = *(void **)(a1 + 408);
    *(_QWORD *)(a1 + 408) = 0;
  }

  v112 = objc_msgSend(v10, "type");
  if (v136 && v112 == 1)
  {
    v113 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v136);
    v114 = _NRLogIsLevelEnabled(v113, 1);

    if (v114)
    {
      v116 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v115);
      _NRLogWithArgs(v116, 1, "%s%.30s:%-4d Suspending bluetooth link", "", "-[NRDDeviceConductor setPrimaryLink:]", 1522);

    }
    objc_msgSend(v10, "suspend");
  }
  else if (objc_msgSend(*v9, "type") == 1 && objc_msgSend(*v9, "state") != 8)
  {
    v118 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v117);
    v119 = _NRLogIsLevelEnabled(v118, 1);

    if (v119)
    {
      v121 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v120);
      _NRLogWithArgs(v121, 1, "%s%.30s:%-4d Resuming bluetooth link", "", "-[NRDDeviceConductor setPrimaryLink:]", 1525);

    }
    objc_msgSend(v10, "resume");
  }
  if (objc_msgSend(*v9, "type") != 1)
    sub_1000DD3A8(a1);
  sub_1000DD7D0(a1, 0);
  sub_1000D2168(a1, 1, 1);

LABEL_81:
}

void sub_1000E28B4(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int IsLevelEnabled;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int v43;
  void *v44;
  int v45;
  uint64_t v46;
  void *v47;
  void *v48;
  dispatch_time_t v49;
  void *v50;
  NSObject *v51;
  uint64_t v52;
  _QWORD block[4];
  id v54[2];
  id location[2];

  v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!sub_10010E128(v2) || !*(_QWORD *)(a1 + 384))
    goto LABEL_39;
  v4 = *(void **)(a1 + 128);
  if (!v4)
    goto LABEL_32;
  if (objc_msgSend(v4, "type") == 1)
  {
    v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

    if (!IsLevelEnabled)
      goto LABEL_16;
    v7 = *(id *)(a1 + 96);
    v9 = _NRCopyLogObjectForNRUUID(v7, v8);
    v10 = (void *)v9;
    v11 = *(_QWORD *)(a1 + 128);
    v12 = 1392;
    goto LABEL_15;
  }
  v13 = *(void **)(a1 + 128);
  if (!v13)
    goto LABEL_32;
  if (objc_msgSend(v13, "type") == 2)
  {
    v14 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
    v15 = _NRLogIsLevelEnabled(v14, 0);

    if (!v15)
      goto LABEL_16;
    v7 = *(id *)(a1 + 96);
    v9 = _NRCopyLogObjectForNRUUID(v7, v16);
    v10 = (void *)v9;
    v11 = *(_QWORD *)(a1 + 128);
    v12 = 1398;
    goto LABEL_15;
  }
  v17 = *(void **)(a1 + 128);
  if (!v17)
    goto LABEL_32;
  if (objc_msgSend(v17, "type") != 5)
  {
    if (*(_QWORD *)(a1 + 128))
    {
      v42 = 15000000000;
LABEL_38:
      objc_initWeak(location, (id)a1);
      v48 = *(void **)(a1 + 392);
      v49 = dispatch_time(0x8000000000000000, v42);
      v50 = *(void **)(a1 + 104);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000E2EA8;
      block[3] = &unk_1001B87C8;
      v51 = v50;
      objc_copyWeak(v54, location);
      v54[1] = v48;
      dispatch_after(v49, v51, block);

      objc_destroyWeak(v54);
      objc_destroyWeak(location);
      goto LABEL_39;
    }
LABEL_32:
    v42 = 15000000000;
    if (!*(_BYTE *)(a1 + 28))
    {
      v43 = *(unsigned __int8 *)(a1 + 41);
      if (v43 == 5 || v43 == 2)
      {
        v44 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
        v45 = _NRLogIsLevelEnabled(v44, 0);

        if (v45)
        {
          v47 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v46);
          _NRLogWithArgs(v47, 0, "%s%.30s:%-4d Skipping companion Link viability hysteresis timer", "", "-[NRDDeviceConductor updateCompanionLinkViability]", 1410);

        }
        v42 = 0;
      }
    }
    goto LABEL_38;
  }
  v18 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
  v19 = _NRLogIsLevelEnabled(v18, 0);

  if (!v19)
    goto LABEL_16;
  v7 = *(id *)(a1 + 96);
  v9 = _NRCopyLogObjectForNRUUID(v7, v20);
  v10 = (void *)v9;
  v11 = *(_QWORD *)(a1 + 128);
  v12 = 1404;
LABEL_15:
  _NRLogWithArgs(v9, 0, "%s%.30s:%-4d Companion Link viable due to primary link: %@", "", "-[NRDDeviceConductor updateCompanionLinkViability]", v12, v11);

LABEL_16:
  v21 = *(_QWORD *)(a1 + 384);
  ++*(_QWORD *)(a1 + 392);
  if (v21)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v21 + 40));
    if ((objc_msgSend((id)v21, "isActive") & 1) == 0)
    {
      objc_msgSend((id)v21, "setActive:", 1);
      objc_msgSend(*(id *)(v21 + 48), "updateNetworkAgent:", v21);
      v22 = *(void **)(v21 + 32);
      v23 = *(id *)(v21 + 64);
      v24 = v22;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v21, "agentUUID"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "UUIDString"));
      sub_100121E18(v24, 19005, v23, v26);

    }
  }
  v27 = *(_QWORD *)(a1 + 448);
  if (v27 && !*(_BYTE *)(a1 + 45) && !*(_BYTE *)(a1 + 59))
  {
    v28 = (void *)NEVirtualInterfaceCopyName(v27);
    v29 = objc_alloc((Class)NEPolicy);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult scopeSocketToInterfaceName:](NEPolicyResult, "scopeSocketToInterfaceName:", v28));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.networkrelay.cmpn-link-monitor")));
    location[0] = v31;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    location[1] = v32;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", location, 2));
    v34 = objc_msgSend(v29, "initWithOrder:result:conditions:", 50, v30, v33);

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v35 = (id)qword_1001E4A18;
    v36 = sub_100127310((uint64_t)v35, *(void **)(a1 + 536), v34);

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v37 = (id)qword_1001E4A18;
    v38 = (id *)v37;
    if (v37)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v37 + 1));
      if ((objc_msgSend(v38[2], "apply") & 1) == 0)
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v39, v40, v41, v52);
    }

    *(_BYTE *)(a1 + 59) = 1;
  }
LABEL_39:

}

void sub_1000E2DE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  void *v7;
  id v8;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 448);
    if (v2)
    {
      v8 = (id)NEVirtualInterfaceCopyName(v2);
      v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      IsLevelEnabled = _NRLogIsLevelEnabled(v4, 1);

      if (IsLevelEnabled)
      {
        v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
        _NRLogWithArgs(v7, 1, "%s%.30s:%-4d Setting interface availability for catch-all interface %@", "", "-[NRDDeviceConductor setInterfaceAvailabilityForCatchAllInterface]", 7683, v8);

      }
      sub_100109BF4(v8);

    }
  }
}

void sub_1000E2EA8(uint64_t a1)
{
  uint64_t *WeakRetained;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  void *v13;
  uint64_t *v14;

  WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((_BYTE *)WeakRetained + 14))
  {
    v14 = WeakRetained;
    if (*(_QWORD *)(a1 + 40) == WeakRetained[49])
    {
      if (*((_BYTE *)WeakRetained + 56))
      {
        sub_1000DD418((uint64_t)WeakRetained, 1);
        sub_1000DD68C((uint64_t)v14);
        WeakRetained = v14;
      }
      v4 = WeakRetained[48];
      if (v4)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 40));
        if (objc_msgSend((id)v4, "isActive"))
        {
          objc_msgSend((id)v4, "setActive:", 0);
          objc_msgSend(*(id *)(v4 + 48), "updateNetworkAgent:", v4);
          v5 = *(void **)(v4 + 32);
          v6 = *(id *)(v4 + 64);
          v7 = v5;
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4, "agentUUID"));
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
          sub_100121E18(v7, 19004, v6, v9);

        }
      }
      sub_1000E3034((uint64_t)v14);
      goto LABEL_12;
    }
    v10 = (void *)_NRCopyLogObjectForNRUUID(WeakRetained[12], v3);
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 2);

    WeakRetained = v14;
    if (IsLevelEnabled)
    {
      v13 = (void *)_NRCopyLogObjectForNRUUID(v14[12], v12);
      _NRLogWithArgs(v13, 2, "%s%.30s:%-4d Skipping viability update (%llu != %llu)", "", "-[NRDDeviceConductor updateCompanionLinkViability]_block_invoke", 1437, *(_QWORD *)(a1 + 40), v14[49]);

LABEL_12:
      WeakRetained = v14;
    }
  }

}

void sub_1000E3034(uint64_t a1)
{
  id v2;
  id v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 448) && *(_BYTE *)(a1 + 59))
  {
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v2 = (id)qword_1001E4A18;
    sub_100127618((uint64_t)v2, *(void **)(a1 + 536));

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v3 = (id)qword_1001E4A18;
    v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if ((objc_msgSend(v4[2], "apply") & 1) == 0)
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v5, v6, v7, v8);
    }

    *(_BYTE *)(a1 + 59) = 0;
  }
}

void sub_1000E313C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 28))
      sub_10003073C(*(_QWORD *)(v1 + 192));
  }
  else
  {
    sub_10003073C(0);
  }
}

void sub_1000E3160(void **a1)
{
  void *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void **v5;
  char *v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  char v35;
  void *v36;
  unsigned __int8 v37;
  void *v38;
  void *v39;
  NSObject *v40;
  _QWORD *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  unsigned __int8 v50;
  void *v51;
  void *v52;
  NSObject *v53;
  _QWORD *v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  void *v62;
  int v63;
  void *v64;
  id v65;
  id *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  uint64_t v73;
  void *v74;
  void *v75;
  int v76;
  uint64_t v77;
  id v78;
  int IsLevelEnabled;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  int v85;
  id v86;
  uint64_t v87;
  id v88;
  int v89;
  id v90;
  uint64_t v91;
  id v92;
  int v93;
  id v94;
  id v95;
  int v96;
  id v97;
  void *v98;
  void *v99;
  __int128 v100;
  _QWORD v101[2];
  _QWORD v102[2];

  if (a1)
  {
    v5 = a1;
    v6 = sub_10012FFF4((uint64_t)NRDLocalDevice, a1[12]);
    if (!v6)
    {
      v78 = sub_1000D5594();
      IsLevelEnabled = _NRLogIsLevelEnabled(v78, 16);

      if (IsLevelEnabled)
      {
        v80 = sub_1000D5594();
        _NRLogWithArgs(v80, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: localDevice", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7751);

      }
      v7 = _os_log_pack_size(12);
      v5 = (void **)((char *)&v98 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
      v81 = *__error();
      v82 = _os_log_pack_fill(v5, v7, v81, &_mh_execute_header, "%{public}s Assertion Failed: localDevice");
      goto LABEL_62;
    }
    v7 = (uint64_t)v6;
    v8 = *((id *)v6 + 16);
    v9 = objc_msgSend(v8, "hasCompanionDatapath");

    if (!v9)
    {
LABEL_57:

      return;
    }
    if (!v5[56])
    {
      v10 = sub_100111240(v5[13]);
      v5[56] = (void *)v10;
      if (v10)
      {
        objc_opt_self(NRDLocalDevice);
        v11 = sub_10014CFBC();
        dispatch_assert_queue_V2(v11);

        v100 = xmmword_10015D090;
        v12 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v100, 16);
        v13 = sub_100133E24((uint64_t)NRDLocalDevice, v12, CFSTR("0"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

        v15 = v5[56];
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "hostname"));
        NEVirtualInterfaceAddIPv6Route(v15, v16, &off_1001C4858, 0, 0);

        NEVirtualInterfaceSetIPv6Router(v5[56], CFSTR("fe80::"));
        NEVirtualInterfaceSetRankNever(v5[56], 1);
        v17 = (void *)NEVirtualInterfaceCopyName(v5[56]);
        if ((sub_100108088(v17, 8) & 1) != 0)
        {
          v19 = sub_1001088C8(v17);
          v21 = _NRCopyLogObjectForNRUUID(v5[12], v20);
          v22 = (void *)v21;
          if ((v19 & 1) != 0)
          {
            v23 = _NRLogIsLevelEnabled(v21, 0);

            if (v23)
            {
              v25 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v24);
              _NRLogWithArgs(v25, 0, "%s%.30s:%-4d Created catch-all interface (%@)", "", "-[NRDDeviceConductor createCatchAllInterface]", 7745, v17);

            }
            goto LABEL_22;
          }
          v30 = _NRLogIsLevelEnabled(v21, 17);

          if (v30)
          {
            v29 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v31);
            _NRLogWithArgs(v29, 17, "Failed to set no ack prioritization for catch-all %@", v17);
            goto LABEL_20;
          }
        }
        else
        {
          v26 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v18);
          v27 = _NRLogIsLevelEnabled(v26, 17);

          if (v27)
          {
            v29 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v28);
            _NRLogWithArgs(v29, 17, "Failed to set interface subfamily for catch-all %@", v17);
LABEL_20:

          }
        }
        sub_1000EB96C((uint64_t)v5);
LABEL_22:

        goto LABEL_23;
      }
      if (qword_1001E4798 != -1)
        dispatch_once(&qword_1001E4798, &stru_1001B7628);
      if (_NRLogIsLevelEnabled(qword_1001E4790, 17))
      {
        if (qword_1001E4798 != -1)
          dispatch_once(&qword_1001E4798, &stru_1001B7628);
        _NRLogWithArgs(qword_1001E4790, 17, "NRLinkVirtualInterfaceCreate failed");
      }
    }
LABEL_23:
    v1 = (void *)NEVirtualInterfaceCopyAddresses(v5[56]);
    v3 = (void *)NEVirtualInterfaceCopyName(v5[56]);
    v32 = sub_10014CFBC();
    dispatch_assert_queue_V2(v32);

    v4 = (void *)sub_100133920((_QWORD *)v7, CFSTR("0"));
    v33 = sub_10014CFBC();
    dispatch_assert_queue_V2(v33);

    v2 = sub_1001331E8((_QWORD *)v7, CFSTR("0"));
    sub_1000EB484((uint64_t)v5, v5[12]);
    v35 = 0;
    if (*(_BYTE *)(v7 + 12) && v2)
    {
      if (v1
        && (v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "hostname")),
            v37 = objc_msgSend(v1, "containsObject:", v36),
            v36,
            (v37 & 1) != 0))
      {
        v35 = 0;
      }
      else
      {
        v99 = v4;
        v38 = v5[56];
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "hostname"));
        NEVirtualInterfaceAddAddress(v38, v39, CFSTR("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"));

        NEVirtualInterfaceAddAddress(v5[56], CFSTR("192.0.0.6"), CFSTR("255.255.255.255"));
        v40 = sub_10014CFBC();
        dispatch_assert_queue_V2(v40);

        v41 = sub_100133714((_QWORD *)v7, CFSTR("0"));
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v41, 128));

        if (!v42)
        {
          v84 = sub_1000D5594();
          v85 = _NRLogIsLevelEnabled(v84, 16);

          if (v85)
          {
            v86 = sub_1000D5594();
            _NRLogWithArgs(v86, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (conditionPrefix) != ((void *)0)", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7778);

          }
          goto LABEL_66;
        }
        v43 = objc_alloc((Class)NEPolicy);
        v44 = v3;
        v3 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v3, 0));
        v102[0] = v42;
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v102[1] = v4;
        v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v102, 2));
        v46 = objc_msgSend(v43, "initWithOrder:result:conditions:", 4000, v3, v45);

        if (!v46)
        {
          v88 = sub_1000D5594();
          v89 = _NRLogIsLevelEnabled(v88, 16);

          if (v89)
          {
            v90 = sub_1000D5594();
            _NRLogWithArgs(v90, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (policyPrefix) != ((void *)0)", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7783);

          }
LABEL_69:
          v7 = _os_log_pack_size(12);
          v5 = (void **)((char *)&v98 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
          v91 = *__error();
          v82 = _os_log_pack_fill(v5, v7, v91, &_mh_execute_header, "%{public}s Assertion Failed: (policyPrefix) != ((void *)0)");
          goto LABEL_62;
        }
        objc_opt_self(NRDPolicySessionManager);
        v4 = v99;
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v3 = v44;
        v47 = (id)qword_1001E4A18;
        v48 = sub_100127310((uint64_t)v47, v5[34], v46);

        v35 = 1;
      }
    }
    if (!*(_BYTE *)(v7 + 13))
      goto LABEL_42;
    if (!v4)
      goto LABEL_42;
    if (v1)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostname"));
      v50 = objc_msgSend(v1, "containsObject:", v49);

      if ((v50 & 1) != 0)
        goto LABEL_42;
    }
    v98 = v1;
    v99 = v4;
    v51 = v5[56];
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostname", v1));
    NEVirtualInterfaceAddAddress(v51, v52, CFSTR("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"));

    v53 = sub_10014CFBC();
    dispatch_assert_queue_V2(v53);

    v54 = sub_100133AD8((_QWORD *)v7, CFSTR("0"));
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v54, 128));

    if (v55)
    {
      v56 = objc_alloc((Class)NEPolicy);
      v1 = v3;
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v3, 0));
      v101[0] = v55;
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v101[1] = v4;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v101, 2));
      v58 = objc_msgSend(v56, "initWithOrder:result:conditions:", 4000, v3, v57);

      if (v58)
      {
        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v3 = v1;
        v4 = v99;
        v59 = (id)qword_1001E4A18;
        v60 = sub_100127310((uint64_t)v59, v5[34], v58);

        v35 = 1;
        v1 = v98;
LABEL_42:
        if (*(unsigned __int16 *)(v7 + 28) >= 0xCu && !*((_BYTE *)v5 + 58))
        {
          NEVirtualInterfaceSetMTU(v5[56], 1400);
          *((_BYTE *)v5 + 58) = 1;
          v62 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v61);
          v63 = _NRLogIsLevelEnabled(v62, 0);

          if (v63)
          {
            v64 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v34);
            _NRLogWithArgs(v64, 0, "%s%.30s:%-4d Updated interface mtu for catch-all interface (%@)", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7810, v3);

          }
        }
        if ((v35 & 1) == 0)
        {
          v75 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v34);
          v76 = _NRLogIsLevelEnabled(v75, 0);

          if (!v76)
          {
LABEL_56:

            goto LABEL_57;
          }
          v74 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v77);
          _NRLogWithArgs(v74, 0, "%s%.30s:%-4d Not updating catch-all interface as there are no new addresses");
LABEL_55:

          goto LABEL_56;
        }
        NEVirtualInterfaceUpdateAdHocService(v5[56]);
        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 == -1)
        {
LABEL_48:
          v65 = (id)qword_1001E4A18;
          v66 = (id *)v65;
          if (v65)
          {
            dispatch_assert_queue_V2(*((dispatch_queue_t *)v65 + 1));
            if ((objc_msgSend(v66[2], "apply") & 1) == 0)
              sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v67, v68, v69, (uint64_t)v98);
          }

          v71 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v70);
          v72 = _NRLogIsLevelEnabled(v71, 0);

          if (!v72)
            goto LABEL_56;
          v74 = (void *)_NRCopyLogObjectForNRUUID(v5[12], v73);
          _NRLogWithArgs(v74, 0, "%s%.30s:%-4d Successfully created a catch-all interface (%@) and installed policies", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7821, v3);
          goto LABEL_55;
        }
LABEL_63:
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        goto LABEL_48;
      }
      v95 = sub_1000D5594();
      v96 = _NRLogIsLevelEnabled(v95, 16);

      if (v96)
      {
        v97 = sub_1000D5594();
        _NRLogWithArgs(v97, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (policyPrefix) != ((void *)0)", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7801);

      }
      goto LABEL_69;
    }
    v92 = sub_1000D5594();
    v93 = _NRLogIsLevelEnabled(v92, 16);

    if (v93)
    {
      v94 = sub_1000D5594();
      _NRLogWithArgs(v94, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (conditionPrefix) != ((void *)0)", "", "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]", 7796);

    }
LABEL_66:
    v7 = _os_log_pack_size(12);
    v5 = (void **)((char *)&v98 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    v87 = *__error();
    v82 = _os_log_pack_fill(v5, v7, v87, &_mh_execute_header, "%{public}s Assertion Failed: (conditionPrefix) != ((void *)0)");
LABEL_62:
    *(_DWORD *)v82 = 136446210;
    *(_QWORD *)(v82 + 4) = "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]";
    v83 = sub_1000D5594();
    _NRLogAbortWithPack(v83, v5);
    goto LABEL_63;
  }
}

void sub_1000E3DB8(uint64_t a1)
{
  char *v2;
  void *v3;
  nw_parameters_t v4;
  uint64_t v5;
  id v6;
  unsigned int v7;
  NRCompanionProxyConfigAgent *v8;
  void *v9;
  id v10;
  id v11;
  id *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int IsLevelEnabled;
  uint64_t v19;
  void *v20;
  id v21;
  int v22;
  id v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  id v28;
  id *v29;

  if (a1)
  {
    v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    if (v2)
    {
      v3 = (void *)*((_QWORD *)v2 + 16);
      v29 = (id *)v2;
      v4 = v3;
      if (v4 && *((_BYTE *)v29 + 12) && *(_BYTE *)(a1 + 45))
      {
        v5 = *(_QWORD *)(a1 + 440);

        if (v5)
        {
LABEL_13:

          return;
        }
        v4 = nw_parameters_create();
        v6 = v29[16];
        v7 = objc_msgSend(v6, "proxyProviderRequiresWiFi");

        if (v7)
          nw_parameters_set_required_interface_type(v4, nw_interface_type_wifi);
        nw_parameters_set_account_id(v4, "com.apple.networkrelay.companion_proxy");
        v8 = [NRCompanionProxyConfigAgent alloc];
        v9 = *(void **)(a1 + 104);
        v10 = *(id *)(a1 + 96);
        v11 = v9;
        v12 = sub_10005F1BC((id *)&v8->super.isa, v11, v4, v10);
        v13 = *(void **)(a1 + 440);
        *(_QWORD *)(a1 + 440) = v12;

        if ((sub_10005F454(*(_QWORD *)(a1 + 440), v14) & 1) == 0)
        {
          v15 = *(void **)(a1 + 440);
          *(_QWORD *)(a1 + 440) = 0;

          v17 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v16);
          IsLevelEnabled = _NRLogIsLevelEnabled(v17, 17);

          if (IsLevelEnabled)
          {
            v20 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v19);
            _NRLogWithArgs(v20, 17, "failed to register companion proxy config agent");

          }
        }
      }

      goto LABEL_13;
    }
    v21 = sub_1000D5594();
    v22 = _NRLogIsLevelEnabled(v21, 16);

    if (v22)
    {
      v23 = sub_1000D5594();
      _NRLogWithArgs(v23, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "-[NRDDeviceConductor setupCompanionProxyConfigAgentIfApplicable]", 491);

    }
    v24 = _os_log_pack_size(12);
    v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = __error();
    v27 = _os_log_pack_fill(v25, v24, *v26, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v27 + 4) = "-[NRDDeviceConductor setupCompanionProxyConfigAgentIfApplicable]";
    v28 = sub_1000D5594();
    _NRLogAbortWithPack(v28, v25);
  }
}

void sub_1000E4040(void **a1)
{
  id v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  NRCompanionLinkViabilityAgent *v13;
  void *v14;
  id v15;
  id v16;
  id *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  int IsLevelEnabled;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  id v65;
  void *v66;
  char *v67;
  _QWORD v68[2];
  __int128 v69;

  if (a1)
  {
    v67 = sub_10012FFF4((uint64_t)NRDLocalDevice, a1[12]);
    if (sub_10010E128(v67))
    {
      v2 = a1[48];
      if (!v2)
        goto LABEL_6;
      v4 = (unsigned __int8 *)a1[48];
      if (!v4)
      {

        v6 = (uint64_t)a1[48];
        if (!v6)
        {
LABEL_8:
          if (v67)
          {
            v69 = 0uLL;
            sub_100133C94(v67, &v69);
            objc_opt_self(NRDLocalDevice);
            if (WORD5(v69))
              v8 = WORD6(v69) == 0;
            else
              v8 = 1;
            v9 = !v8;
            v69 = 0uLL;
            sub_10013CDB8(v67, &v69);
            objc_opt_self(NRDLocalDevice);
            if (WORD5(v69))
              v10 = WORD6(v69) == 0;
            else
              v10 = 1;
            v11 = !v10;
            if (v67[8])
            {
              v12 = v67[9] ? v9 : 0;
              if ((v12 & v11 & 1) != 0)
              {
                v13 = [NRCompanionLinkViabilityAgent alloc];
                v14 = a1[12];
                v15 = a1[13];
                v16 = v14;
                v17 = sub_100067CB0((id *)&v13->super.isa, v16, v15);
                v18 = a1[48];
                a1[48] = v17;

                v19 = a1[48];
                if (v19)
                {
                  dispatch_assert_queue_V2(*((dispatch_queue_t *)v19 + 5));
                  if (!*((_BYTE *)v19 + 14))
                  {
                    v20 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(v19));
                    v21 = (void *)*((_QWORD *)v19 + 6);
                    *((_QWORD *)v19 + 6) = v20;

                    v22 = (void *)*((_QWORD *)v19 + 6);
                    if (v22)
                    {
                      if ((objc_msgSend(v22, "registerNetworkAgent:", v19) & 1) != 0)
                      {
                        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "agentUUID"));
                        v25 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v24));

                        v26 = sub_10012FFF4((uint64_t)NRDLocalDevice, *((void **)v19 + 4));
                        v27 = sub_100133714(v26, CFSTR("62742"));
                        v28 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v27, 128));

                        v64 = v26;
                        v29 = sub_100133AD8(v26, CFSTR("62742"));
                        v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v29, 128));

                        v30 = objc_alloc((Class)NEPolicy);
                        v63 = (void *)v28;
                        *(_QWORD *)&v69 = v28;
                        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                        *((_QWORD *)&v69 + 1) = v31;
                        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v69, 2));
                        v33 = (void *)v25;
                        v65 = objc_msgSend(v30, "initWithOrder:result:conditions:", 10, v25, v32);

                        objc_opt_self(NRDPolicySessionManager);
                        if (qword_1001E4A20 != -1)
                          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                        v34 = (id)qword_1001E4A18;
                        v35 = sub_100127310((uint64_t)v34, *((void **)v19 + 7), v65);

                        v36 = objc_alloc((Class)NEPolicy);
                        v68[0] = v66;
                        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                        v68[1] = v37;
                        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v68, 2));
                        v39 = objc_msgSend(v36, "initWithOrder:result:conditions:", 10, v25, v38);

                        objc_opt_self(NRDPolicySessionManager);
                        if (qword_1001E4A20 != -1)
                          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                        v40 = (id)qword_1001E4A18;
                        v41 = sub_100127310((uint64_t)v40, *((void **)v19 + 7), v39);

                        objc_opt_self(NRDPolicySessionManager);
                        if (qword_1001E4A20 != -1)
                          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                        v42 = (id)qword_1001E4A18;
                        v43 = (id *)v42;
                        if (v42)
                        {
                          dispatch_assert_queue_V2(*((dispatch_queue_t *)v42 + 1));
                          if ((objc_msgSend(v43[2], "apply") & 1) == 0)
                            sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v44, v45, v46, v62);
                        }

                        *((_BYTE *)v19 + 14) = 1;
                        v47 = (void *)*((_QWORD *)v19 + 4);
                        v48 = *((id *)v19 + 8);
                        v49 = v47;
                        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "agentUUID"));
                        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "UUIDString"));
                        sub_100121E18(v49, 19002, v48, v51);

                      }
                      else
                      {
                        v52 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v19 + 4), v23);
                        IsLevelEnabled = _NRLogIsLevelEnabled(v52, 17);

                        if (IsLevelEnabled)
                        {
                          v55 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v19 + 4), v54);
                          _NRLogWithArgs(v55, 17, "Failed to register CompanionLinkViability agent");

                        }
                      }
                    }
                  }
                }
                sub_1000E28B4((uint64_t)a1);
                goto LABEL_51;
              }
            }
          }
          else
          {
            v9 = 0;
            v11 = 0;
          }
          v56 = (void *)_NRCopyLogObjectForNRUUID(a1[12], v3);
          v57 = _NRLogIsLevelEnabled(v56, 0);

          if (v57)
          {
            v59 = (void *)_NRCopyLogObjectForNRUUID(a1[12], v58);
            if (v67)
            {
              v60 = v67[8];
              v61 = v67[9];
            }
            else
            {
              v60 = 0;
              v61 = 0;
            }
            _NRLogWithArgs(v59, 0, "%s%.30s:%-4d %@ Deferring the registration of viability agent (registered=%d, enabled=%d, hasClassDAddr=%d, hasClassCAddr=%d)", "", "-[NRDDeviceConductor createCmpLnkViabilityAgentIfApplicable]", 1758, v67, v60, v61, v9, v11);

          }
          goto LABEL_51;
        }
LABEL_7:
        sub_1000681D0(v6);
        v7 = a1[48];
        a1[48] = 0;

        goto LABEL_8;
      }
      v5 = v4[14];

      if (!v5)
      {
LABEL_6:
        v6 = (uint64_t)a1[48];
        if (!v6)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
LABEL_51:

  }
}

void sub_1000E4690(char *a1, void *a2)
{
  id v2;
  id v4;
  uint64_t v5;
  int v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  void *v10;
  id v11;
  _UNKNOWN **v12;
  id v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  unsigned __int8 v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  id *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  uint64_t v54;
  void *v55;
  int v56;
  uint64_t v57;
  void *v58;
  void *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  _UNKNOWN **v65;
  id v66;
  id v67;
  char *v68;
  _UNKNOWN **v69;
  NSObject *v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  uint64_t v79;
  _UNKNOWN **v80;
  NSObject *v81;
  void *v82;
  id v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  uint64_t v96;
  id v97;
  id *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  void *v105;
  int v106;
  id v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v111;
  void *v112;
  int v113;
  uint64_t v114;
  void *v115;
  int v116;
  uint64_t v117;
  void *v118;
  void *StringFromNRLinkType;
  void *v120;
  void *v121;
  void *v122;
  id v123;
  id v124;
  id v125;
  id v126;
  void *v127;
  id v128;
  void *v129;
  void *v130;
  void *v131;
  id v132;
  id v133;
  id v134;
  id v135;
  void *v136;
  id v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  id v143;
  id v144;
  id v145;
  void *v146;
  id v147;
  uint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  id v152;
  id v153;
  id v154;
  id v155;
  void *v156;
  id v157;
  void *v158;
  void *v159;
  void *v160;
  id v161;
  id v162;
  id v163;
  id v164;
  void *v165;
  id v166;
  id v167;
  _QWORD *v168;
  void *v169;
  void *v170;
  void *v171;
  id v172;
  id v173;
  id v174;
  id v175;
  void *v176;
  id v177;
  id v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  void *v182;
  id v183;
  id v184;
  id v185;
  id v186;
  void *v187;
  id v188;
  void *v189;
  void *v190;
  void *v191;
  id v192;
  id v193;
  id v194;
  id v195;
  void *v196;
  id v197;
  void *v198;
  void *v199;
  void *v200;
  id v201;
  id v202;
  id v203;
  id v204;
  void *v205;
  id v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  id v211;
  id v212;
  id v213;
  id v214;
  void *v215;
  id v216;
  uint64_t v217;
  void *v218;
  void *v219;
  void *v220;
  id v221;
  id v222;
  id v223;
  id v224;
  void *v225;
  id v226;
  void *v227;
  void *v228;
  void *v229;
  id v230;
  id v231;
  id v232;
  id v233;
  void *v234;
  id v235;
  id v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  id v241;
  id v242;
  id v243;
  id v244;
  void *v245;
  id v246;
  id v247;
  _QWORD *v248;
  void *v249;
  char *v250;
  void *v251;
  id v252;
  uint64_t v253;
  id v254;
  id v255;
  id v256;
  id v257;
  void *v258;
  id v259;
  void *v260;
  int v261;
  uint64_t v262;
  void *v263;
  void *v264;
  int v265;
  uint64_t v266;
  void *v267;
  void *v268;
  int v269;
  uint64_t v270;
  void *v271;
  void *v272;
  int v273;
  uint64_t v274;
  void *v275;
  id v276;
  int v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  int v282;
  id v283;
  uint64_t v284;
  id v285;
  void *v286;
  int v287;
  uint64_t v288;
  id v289;
  uint64_t v290;
  void *v291;
  void *v292;
  int v293;
  uint64_t v294;
  void *v295;
  void *v296;
  int v297;
  uint64_t v298;
  id v299;
  uint64_t v300;
  void *v301;
  void *v302;
  int v303;
  uint64_t v304;
  void *v305;
  void *v306;
  int v307;
  uint64_t v308;
  id v309;
  uint64_t v310;
  void *v311;
  void *v312;
  int v313;
  uint64_t v314;
  void *v315;
  id v316;
  void *v317;
  int v318;
  uint64_t v319;
  id v320;
  uint64_t v321;
  void *v322;
  void *v323;
  char v324;
  uint64_t v325;
  void *v326;
  void *v327;
  int v328;
  uint64_t v329;
  id v330;
  uint64_t v331;
  void *v332;
  void *v333;
  char v334;
  id v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  void *v339;
  id v340;
  id v341;
  uint64_t v342;
  void *v343;
  id v344;
  uint64_t v345;
  void *v346;
  id v347;
  id v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  void *v352;
  id v353;
  id v354;
  uint64_t v355;
  void *v356;
  id v357;
  uint64_t v358;
  void *v359;
  id v360;
  id v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  void *v365;
  id v366;
  id v367;
  uint64_t v368;
  void *v369;
  id v370;
  uint64_t v371;
  void *v372;
  id v373;
  id v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  void *v378;
  id v379;
  id v380;
  uint64_t v381;
  void *v382;
  id v383;
  uint64_t v384;
  void *v385;
  id v386;
  id v387;
  uint64_t v388;
  void *v389;
  uint64_t v390;
  void *v391;
  id v392;
  id v393;
  uint64_t v394;
  void *v395;
  id v396;
  uint64_t v397;
  void *v398;
  id v399;
  id v400;
  uint64_t v401;
  void *v402;
  uint64_t v403;
  void *v404;
  id v405;
  id v406;
  uint64_t v407;
  void *v408;
  id v409;
  uint64_t v410;
  void *v411;
  id v412;
  id v413;
  uint64_t v414;
  void *v415;
  int v416;
  id v417;
  uint64_t v418;
  void *v419;
  id v420;
  id v421;
  uint64_t v422;
  void *v423;
  int v424;
  id v425;
  uint64_t v426;
  void *v427;
  id v428;
  id v429;
  uint64_t v430;
  void *v431;
  int v432;
  id v433;
  uint64_t v434;
  void *v435;
  id v436;
  id v437;
  uint64_t v438;
  void *v439;
  int v440;
  id v441;
  uint64_t v442;
  void *v443;
  id v444;
  id v445;
  uint64_t v446;
  void *v447;
  int v448;
  id v449;
  uint64_t v450;
  void *v451;
  id v452;
  id v453;
  uint64_t v454;
  void *v455;
  int v456;
  id v457;
  uint64_t v458;
  void *v459;
  id v460;
  id v461;
  uint64_t v462;
  void *v463;
  int v464;
  id v465;
  uint64_t v466;
  void *v467;
  id v468;
  id v469;
  uint64_t v470;
  void *v471;
  int v472;
  id v473;
  uint64_t v474;
  void *v475;
  id v476;
  id v477;
  uint64_t v478;
  void *v479;
  int v480;
  id v481;
  uint64_t v482;
  void *v483;
  id v484;
  id v485;
  uint64_t v486;
  void *v487;
  int v488;
  id v489;
  uint64_t v490;
  void *v491;
  id v492;
  id v493;
  uint64_t v494;
  void *v495;
  int v496;
  id v497;
  uint64_t v498;
  void *v499;
  id v500;
  id v501;
  uint64_t v502;
  void *v503;
  int v504;
  id v505;
  uint64_t v506;
  void *v507;
  id v508;
  id v509;
  uint64_t v510;
  void *v511;
  int v512;
  id v513;
  uint64_t v514;
  void *v515;
  id v516;
  id v517;
  uint64_t v518;
  void *v519;
  int v520;
  id v521;
  uint64_t v522;
  void *v523;
  id v524;
  id v525;
  uint64_t v526;
  void *v527;
  int v528;
  id v529;
  uint64_t v530;
  void *v531;
  id v532;
  id v533;
  uint64_t v534;
  void *v535;
  int v536;
  id v537;
  uint64_t v538;
  void *v539;
  id v540;
  uint64_t v541;
  id v542;
  id v543;
  id v544;
  id v545;
  id v546;
  char *v547;
  char *v548;
  id v549;
  _QWORD v550[2];
  _QWORD v551[2];
  _QWORD v552[2];
  _QWORD v553[2];
  _QWORD v554[3];
  _QWORD v555[2];
  _QWORD v556[2];
  _QWORD v557[2];
  _QWORD v558[2];
  _QWORD v559[2];
  _QWORD v560[2];
  _QWORD v561[3];
  _QWORD v562[2];
  _QWORD v563[2];
  _QWORD v564[2];
  _QWORD v565[2];
  id v566;
  void *v567;
  void *v568;
  void *v569;
  void *v570;

  v4 = a2;
  if (!a1)
    goto LABEL_92;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)a1 + 13));
  if (objc_msgSend(v4, "state") != 8)
  {
    v7 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v5);
    IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

    if (IsLevelEnabled)
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v9);
      _NRLogWithArgs(v10, 0, "%s%.30s:%-4d Not setting IP tunnel policies because link is not ready %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3432, v4);

    }
    goto LABEL_92;
  }
  if ((objc_msgSend(v4, "hasCompanionDatapath") & 1) == 0)
  {
    v11 = v4;
    if ((objc_msgSend(v11, "hasCompanionDatapath") & 1) != 0)
    {
LABEL_44:

      goto LABEL_92;
    }
    v12 = &APSConnectionOverrideNamedDelegatePort_ptr;
    v13 = objc_alloc_init((Class)NSMutableArray);
    v14 = sub_10012FFF4((uint64_t)NRDLocalDevice, *((void **)a1 + 12));
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localInterfaceName"));
    if (v15)
    {
      v16 = (void *)v15;
      v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "proxyAgentUUID"));
      if (v17)
      {
        v18 = (void *)v17;
        v549 = v13;
        if (v14)
          v19 = (void *)*((_QWORD *)v14 + 16);
        else
          v19 = 0;
        v20 = v19;
        v21 = objc_msgSend(v20, "hasPoliciesForProxyCriteria");

        v13 = v549;
        if ((v21 & 1) == 0)
        {
          v547 = v14;
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v570 = v22;
          v23 = (char *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v570, 1));

          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localInterfaceName"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 5, v24));

          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "proxyAgentUUID"));
          objc_msgSend(v25, "setNetworkAgentUUID:", v26);

          v546 = v25;
          v569 = v25;
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v569, 1));
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v27));

          v545 = v28;
          v548 = v23;
          v29 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 10, v28, v23);
          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v30 = (id)qword_1001E4A18;
          v31 = sub_100127310((uint64_t)v30, *((void **)a1 + 34), v29);
          v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

          v544 = v29;
          if (objc_msgSend(v32, "unsignedIntegerValue"))
          {
            objc_msgSend(v549, "addObject:", v32);

            v34 = objc_alloc((Class)NEPolicy);
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "proxyAgentUUID"));
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v35));
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localInterfaceName"));
            v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v37));
            v568 = v38;
            v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v568, 1));
            v40 = objc_msgSend(v34, "initWithOrder:result:conditions:", 10, v36, v39);

            objc_opt_self(NRDPolicySessionManager);
            if (qword_1001E4A20 != -1)
              dispatch_once(&qword_1001E4A20, &stru_1001B8590);
            v41 = (id)qword_1001E4A18;
            v42 = sub_100127310((uint64_t)v41, *((void **)a1 + 34), v40);
            v32 = (void *)objc_claimAutoreleasedReturnValue(v42);

            if (objc_msgSend(v32, "unsignedIntegerValue"))
            {
              objc_msgSend(v549, "addObject:", v32);

              v13 = v549;
              v14 = v547;
              v12 = &APSConnectionOverrideNamedDelegatePort_ptr;
              goto LABEL_31;
            }
            v327 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v43);
            v328 = _NRLogIsLevelEnabled(v327, 16);

            if (v328)
            {
              v330 = *((id *)a1 + 12);
              v332 = (void *)_NRCopyLogObjectForNRUUID(v330, v331);
              _NRLogWithArgs(v332, 16, "%s%.30s:%-4d %@ failed to add generalPolicy %@ to session %@", "", "-[NRDDeviceConductor setPoliciesForNonCompanionDatapath:]", 3409, v11, v40, *((_QWORD *)a1 + 34));

            }
            v333 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v329);
            v334 = _NRLogIsLevelEnabled(v333, 17);

            v316 = v40;
            if ((v334 & 1) == 0)
            {
LABEL_180:
              objc_msgSend(v11, "cancelWithReason:", CFSTR("Failed to add generalPolicy %@ to session %@"), v316, *((_QWORD *)a1 + 34));

              v52 = v548;
              v13 = v549;
              v46 = v547;
              goto LABEL_42;
            }
          }
          else
          {
            v316 = v544;
            v317 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v33);
            v318 = _NRLogIsLevelEnabled(v317, 16);

            if (v318)
            {
              v320 = *((id *)a1 + 12);
              v322 = (void *)_NRCopyLogObjectForNRUUID(v320, v321);
              _NRLogWithArgs(v322, 16, "%s%.30s:%-4d %@ failed to add generalPolicy %@ to session %@", "", "-[NRDDeviceConductor setPoliciesForNonCompanionDatapath:]", 3404, v11, v544, *((_QWORD *)a1 + 34));

            }
            v323 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v319);
            v324 = _NRLogIsLevelEnabled(v323, 17);

            if ((v324 & 1) == 0)
              goto LABEL_180;
          }
          v326 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v325);
          _NRLogWithArgs(v326, 17, "Failed to add generalPolicy");

          goto LABEL_180;
        }
      }
      else
      {

      }
    }
LABEL_31:
    if (objc_msgSend(v13, "count"))
    {
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v46 = v14;
      v47 = (id)qword_1001E4A18;
      v48 = (id *)v47;
      if (v47)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v47 + 1));
        if ((objc_msgSend(v48[2], "apply") & 1) == 0)
          sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v49, v50, v51, v541);
      }

      v52 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "policyIDs"));
      v53 = objc_msgSend(objc_alloc((Class)v12[147]), "initWithArray:", v52);
      objc_msgSend(v53, "addObjectsFromArray:", v13);
      objc_msgSend(v11, "setPolicyIDs:", v53);
      v55 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v54);
      v56 = _NRLogIsLevelEnabled(v55, 0);

      if (v56)
      {
        v58 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v57);
        _NRLogWithArgs(v58, 0, "%s%.30s:%-4d Successfully set policies for TLS link: %@", "", "-[NRDDeviceConductor setPoliciesForNonCompanionDatapath:]", 3419, v11);

      }
    }
    else
    {
      v46 = v14;
      v59 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v45);
      v60 = _NRLogIsLevelEnabled(v59, 0);

      if (!v60)
      {
LABEL_43:

        goto LABEL_44;
      }
      v52 = (char *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v61);
      _NRLogWithArgs(v52, 0, "%s%.30s:%-4d No new policies added for link: %@", "", "-[NRDDeviceConductor setPoliciesForNonCompanionDatapath:]", 3421, v11);
    }
LABEL_42:

    goto LABEL_43;
  }
  if (objc_msgSend(v4, "type") == 1)
  {
    v6 = 800;
  }
  else if (objc_msgSend(v4, "type") == 2)
  {
    if (objc_msgSend(v4, "subtype") == 102)
    {
      v6 = 1100;
    }
    else if (objc_msgSend(v4, "subtype") == 103)
    {
      v6 = 1000;
    }
    else if (objc_msgSend(v4, "subtype") == 104)
    {
      v6 = 950;
    }
    else
    {
      v6 = 900;
    }
  }
  else if (objc_msgSend(v4, "type") == 4)
  {
    v6 = 1200;
  }
  else
  {
    if (objc_msgSend(v4, "type") != 5)
    {
      v115 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v44);
      v116 = _NRLogIsLevelEnabled(v115, 17);

      if (v116)
      {
        v118 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v117);
        StringFromNRLinkType = (void *)createStringFromNRLinkType(objc_msgSend(v4, "type"));
        _NRLogWithArgs(v118, 17, "Received unexpected link type %@", StringFromNRLinkType);

      }
      goto LABEL_92;
    }
    v6 = 700;
  }
  LODWORD(v547) = v6;
  if (objc_msgSend(v4, "virtualInterface"))
  {
    v64 = (id)NEVirtualInterfaceCopyName(objc_msgSend(v4, "virtualInterface"));
    if (!v64)
    {
      v268 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v63);
      v269 = _NRLogIsLevelEnabled(v268, 16);

      if (v269)
      {
        v271 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v270);
        _NRLogWithArgs(v271, 16, "%s%.30s:%-4d %@ failed to get virtual interface name to set IP tunnel policies", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3473, v4);

      }
      v272 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v270);
      v273 = _NRLogIsLevelEnabled(v272, 17);

      if (v273)
      {
        v275 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v274);
        _NRLogWithArgs(v275, 17, "Failed to get virtual interface name to set IP tunnel policies");

      }
      objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to get virtual interface name to set IP tunnel policies"));
      goto LABEL_91;
    }
    v65 = &APSConnectionOverrideNamedDelegatePort_ptr;
    v66 = objc_alloc_init((Class)NSMutableArray);
    if (v66)
    {
      v2 = v66;
      v67 = *((id *)a1 + 12);
      v68 = sub_10012FFF4((uint64_t)NRDLocalDevice, v67);

      v548 = v68;
      if (v68)
      {
        sub_1000EA9A0((uint64_t)a1);
        if (!a1[46] && a1[48] && (objc_msgSend(v4, "hasRouteRulePolicy") & 1) == 0)
        {
          v86 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v567 = v86;
          v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v567, 1));

          v546 = v64;
          v71 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 2, v64));
          v566 = v71;
          v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v566, 1));
          v89 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v88));

          v545 = v87;
          v90 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 210, v89, v87);
          objc_opt_self(NRDPolicySessionManager);
          v91 = (void *)v89;
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v92 = (id)qword_1001E4A18;
          v93 = *((id *)a1 + 34);
          v94 = sub_100127310((uint64_t)v92, v93, v90);
          v95 = (void *)objc_claimAutoreleasedReturnValue(v94);

          if (!objc_msgSend(v95, "unsignedIntegerValue"))
          {
            v306 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v96);
            v307 = _NRLogIsLevelEnabled(v306, 16);

            if (v307)
            {
              v309 = *((id *)a1 + 12);
              v311 = (void *)_NRCopyLogObjectForNRUUID(v309, v310);
              _NRLogWithArgs(v311, 16, "%s%.30s:%-4d %@ failed to add generalPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3502, v4, v90, *((_QWORD *)a1 + 34));

            }
            v312 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v308);
            v313 = _NRLogIsLevelEnabled(v312, 17);

            if (v313)
            {
              v315 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v314);
              _NRLogWithArgs(v315, 17, "Failed to add generalPolicy");

            }
            objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add generalPolicy %@ to session %@"), v90, *((_QWORD *)a1 + 34));

            v102 = v545;
            v64 = v546;
            goto LABEL_88;
          }
          objc_msgSend(v2, "addObject:", v95);

          objc_msgSend(v4, "setHasRouteRulePolicy:", 1);
          v64 = v546;
          v65 = &APSConnectionOverrideNamedDelegatePort_ptr;
        }
        v549 = v2;
        if (objc_msgSend(v4, "type") == 1
          || objc_msgSend(v4, "type") == 2
          || objc_msgSend(v4, "type") == 5)
        {
          if (objc_msgSend(v4, "ikeClassDEstablished")
            && (objc_msgSend(v4, "hasClassDPolicies") & 1) == 0)
          {
            v69 = v65;
            v70 = sub_10014CFBC();
            dispatch_assert_queue_V2(v70);

            v545 = sub_100133714(v548, CFSTR("0"));
            v71 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
            v565[0] = v71;
            v72 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v565[1] = v72;
            v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v565, 2));

            v546 = v64;
            v74 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v64, 0));
            v75 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v74, v73);
            objc_opt_self(NRDPolicySessionManager);
            if (qword_1001E4A20 != -1)
              dispatch_once(&qword_1001E4A20, &stru_1001B8590);
            v76 = (id)qword_1001E4A18;
            v77 = sub_100127310((uint64_t)v76, *((void **)a1 + 34), v75);
            v78 = (void *)objc_claimAutoreleasedReturnValue(v77);

            if (!objc_msgSend(v78, "unsignedIntegerValue"))
            {
              v286 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v79);
              v287 = _NRLogIsLevelEnabled(v286, 16);

              if (v287)
              {
                v289 = *((id *)a1 + 12);
                v291 = (void *)_NRCopyLogObjectForNRUUID(v289, v290);
                _NRLogWithArgs(v291, 16, "%s%.30s:%-4d %@ failed to add generalPolicyClassD %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3522, v4, v75, *((_QWORD *)a1 + 34));

              }
              v292 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v288);
              v293 = _NRLogIsLevelEnabled(v292, 17);

              if (v293)
              {
                v295 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v294);
                _NRLogWithArgs(v295, 17, "Failed to add generalPolicyClassD");

              }
              objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add generalPolicyClassD %@ to session %@"), v75, *((_QWORD *)a1 + 34));
              goto LABEL_170;
            }
            objc_msgSend(v549, "addObject:", v78);

            objc_msgSend(v4, "setHasClassDPolicies:", 1);
            v64 = v546;
            v65 = v69;
          }
          if (objc_msgSend(v4, "ikeClassCEstablished")
            && (objc_msgSend(v4, "hasClassCPolicies") & 1) == 0)
          {
            v80 = v65;
            v81 = sub_10014CFBC();
            dispatch_assert_queue_V2(v81);

            v545 = sub_100133AD8(v548, CFSTR("0"));
            v71 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
            v564[0] = v71;
            v82 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v564[1] = v82;
            v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v564, 2));

            v546 = v64;
            v74 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v64, 0));
            v75 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v74, v73);
            objc_opt_self(NRDPolicySessionManager);
            if (qword_1001E4A20 != -1)
              dispatch_once(&qword_1001E4A20, &stru_1001B8590);
            v83 = (id)qword_1001E4A18;
            v84 = sub_100127310((uint64_t)v83, *((void **)a1 + 34), v75);
            v78 = (void *)objc_claimAutoreleasedReturnValue(v84);

            if (objc_msgSend(v78, "unsignedIntegerValue"))
            {
              objc_msgSend(v549, "addObject:", v78);

              objc_msgSend(v4, "setHasClassCPolicies:", 1);
              v64 = v546;
              v65 = v80;
              goto LABEL_79;
            }
            v296 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v85);
            v297 = _NRLogIsLevelEnabled(v296, 16);

            if (v297)
            {
              v299 = *((id *)a1 + 12);
              v301 = (void *)_NRCopyLogObjectForNRUUID(v299, v300);
              _NRLogWithArgs(v301, 16, "%s%.30s:%-4d %@ failed to add generalPolicyClassC %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3539, v4, v75, *((_QWORD *)a1 + 34));

            }
            v302 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v298);
            v303 = _NRLogIsLevelEnabled(v302, 17);

            if (v303)
            {
              v305 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v304);
              _NRLogWithArgs(v305, 17, "Failed to add generalPolicyClassC");

            }
            objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add generalPolicyClassC %@ to session %@"), v75, *((_QWORD *)a1 + 34));
LABEL_170:

            v102 = v545;
            v64 = v546;
            v2 = v549;
LABEL_88:

LABEL_89:
            goto LABEL_90;
          }
LABEL_79:
          objc_msgSend(v4, "setLinkMTU:", 1400);
          v2 = v549;
          if (!objc_msgSend(v549, "count"))
          {
            v110 = *((id *)a1 + 12);
            v112 = (void *)_NRCopyLogObjectForNRUUID(v110, v111);
            v113 = _NRLogIsLevelEnabled(v112, 0);

            if (!v113)
            {
LABEL_90:

LABEL_91:
              goto LABEL_92;
            }
            v102 = *((id *)a1 + 12);
            v71 = (id)_NRCopyLogObjectForNRUUID(v102, v114);
            _NRLogWithArgs(v71, 0, "%s%.30s:%-4d No new policies added for link: %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3803, v4);
            goto LABEL_88;
          }
          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 == -1)
            goto LABEL_81;
          goto LABEL_159;
        }
        if (objc_msgSend(v4, "type") != 4)
          goto LABEL_79;
        if (objc_msgSend(v4, "ikeClassDEstablished")
          && (objc_msgSend(v4, "hasClassDPolicies") & 1) == 0)
        {
          v545 = sub_1001331E8(v548, CFSTR("61315"));
          v544 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:"));
          v563[0] = v544;
          v120 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v563[1] = v120;
          v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v563, 2));

          v546 = v64;
          v122 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v64, 0));
          v123 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v122, v121);
          v124 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v125 = *((id *)a1 + 34);
          v126 = sub_100127310((uint64_t)v124, v125, v123);
          v127 = (void *)objc_claimAutoreleasedReturnValue(v126);

          v128 = objc_msgSend(v127, "unsignedIntegerValue");
          if (v128)
          {
            objc_msgSend(v549, "addObject:", v127);
          }
          else
          {
            v335 = *((id *)a1 + 12);
            v337 = (void *)_NRCopyLogObjectForNRUUID(v335, v336);
            LODWORD(v543) = _NRLogIsLevelEnabled(v337, 16);

            if ((_DWORD)v543)
            {
              v543 = *((id *)a1 + 12);
              v339 = (void *)_NRCopyLogObjectForNRUUID(v543, v338);
              v340 = *((id *)a1 + 34);
              _NRLogWithArgs(v339, 16, "%s%.30s:%-4d %@ failed to add localConditionPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3558, v4, v123, v340);

            }
            v341 = *((id *)a1 + 12);
            v343 = (void *)_NRCopyLogObjectForNRUUID(v341, v342);
            LODWORD(v543) = _NRLogIsLevelEnabled(v343, 17);

            if ((_DWORD)v543)
            {
              v344 = *((id *)a1 + 12);
              v346 = (void *)_NRCopyLogObjectForNRUUID(v344, v345);
              _NRLogWithArgs(v346, 17, "Failed to add localConditionPolicy");

            }
            v347 = *((id *)a1 + 34);
            objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add localConditionPolicy %@ to session %@"), v123, v347);

          }
          v64 = v546;
          v2 = v549;
          if (!v128)
            goto LABEL_90;
          v545 = sub_100133714(v548, CFSTR("61315"));
          v544 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
          v562[0] = v544;
          v129 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v562[1] = v129;
          v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v562, 2));

          v131 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
          v132 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v131, v130);
          v133 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v134 = *((id *)a1 + 34);
          v135 = sub_100127310((uint64_t)v133, v134, v132);
          v136 = (void *)objc_claimAutoreleasedReturnValue(v135);

          v137 = objc_msgSend(v136, "unsignedIntegerValue");
          if (v137)
          {
            objc_msgSend(v549, "addObject:", v136);
          }
          else
          {
            v361 = *((id *)a1 + 12);
            v363 = (void *)_NRCopyLogObjectForNRUUID(v361, v362);
            LODWORD(v543) = _NRLogIsLevelEnabled(v363, 16);

            if ((_DWORD)v543)
            {
              v543 = *((id *)a1 + 12);
              v365 = (void *)_NRCopyLogObjectForNRUUID(v543, v364);
              v366 = *((id *)a1 + 34);
              _NRLogWithArgs(v365, 16, "%s%.30s:%-4d %@ failed to add remoteConditionPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3572, v4, v132, v366);

            }
            v367 = *((id *)a1 + 12);
            v369 = (void *)_NRCopyLogObjectForNRUUID(v367, v368);
            LODWORD(v543) = _NRLogIsLevelEnabled(v369, 17);

            if ((_DWORD)v543)
            {
              v370 = *((id *)a1 + 12);
              v372 = (void *)_NRCopyLogObjectForNRUUID(v370, v371);
              _NRLogWithArgs(v372, 17, "Failed to add remoteConditionPolicy");

            }
            v373 = *((id *)a1 + 34);
            objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add remoteConditionPolicy %@ to session %@"), v132, v373);

          }
          v64 = v546;
          v2 = v549;
          if (!v137)
            goto LABEL_90;
          v545 = sub_1001348E8(v548);
          v138 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
          v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 58));
          v544 = v138;
          v561[0] = v138;
          v561[1] = v543;
          v139 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v561[2] = v139;
          v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v561, 3));

          v141 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
          v142 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v141, v140);
          v143 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v144 = *((id *)a1 + 34);
          v145 = sub_100127310((uint64_t)v143, v144, v142);
          v146 = (void *)objc_claimAutoreleasedReturnValue(v145);

          v147 = objc_msgSend(v146, "unsignedIntegerValue");
          if (v147)
          {
            objc_msgSend(v549, "addObject:", v146);
          }
          else
          {
            v387 = *((id *)a1 + 12);
            v389 = (void *)_NRCopyLogObjectForNRUUID(v387, v388);
            LODWORD(v542) = _NRLogIsLevelEnabled(v389, 16);

            if ((_DWORD)v542)
            {
              v542 = *((id *)a1 + 12);
              v391 = (void *)_NRCopyLogObjectForNRUUID(v542, v390);
              v392 = *((id *)a1 + 34);
              _NRLogWithArgs(v391, 16, "%s%.30s:%-4d %@ failed to add icmpConditionPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3587, v4, v142, v392);

            }
            v393 = *((id *)a1 + 12);
            v395 = (void *)_NRCopyLogObjectForNRUUID(v393, v394);
            LODWORD(v542) = _NRLogIsLevelEnabled(v395, 17);

            if ((_DWORD)v542)
            {
              v396 = *((id *)a1 + 12);
              v398 = (void *)_NRCopyLogObjectForNRUUID(v396, v397);
              _NRLogWithArgs(v398, 17, "Failed to add icmpConditionPolicy");

            }
            v399 = *((id *)a1 + 34);
            objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add icmpConditionPolicy %@ to session %@"), v142, v399);

          }
          v64 = v546;
          v2 = v549;
          if (!v147)
            goto LABEL_90;
          if (_NRIsAppleInternal(v148))
          {
            v545 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "18999");
            v544 = sub_1001331E8(v548, v545);
            v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:"));
            v560[0] = v543;
            v149 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v560[1] = v149;
            v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v560, 2));

            v151 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
            v542 = v150;
            v152 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v151, v150);
            v153 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v154 = *((id *)a1 + 34);
            v155 = sub_100127310((uint64_t)v153, v154, v152);
            v156 = (void *)objc_claimAutoreleasedReturnValue(v155);

            v157 = objc_msgSend(v156, "unsignedIntegerValue");
            if (v157)
            {
              objc_msgSend(v549, "addObject:", v156);
            }
            else
            {
              v413 = *((id *)a1 + 12);
              v415 = (void *)_NRCopyLogObjectForNRUUID(v413, v414);
              v416 = _NRLogIsLevelEnabled(v415, 16);

              if (v416)
              {
                v417 = *((id *)a1 + 12);
                v419 = (void *)_NRCopyLogObjectForNRUUID(v417, v418);
                v420 = *((id *)a1 + 34);
                _NRLogWithArgs(v419, 16, "%s%.30s:%-4d %@ failed to add localConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3609, v4, v152, v420);

              }
              v421 = *((id *)a1 + 12);
              v423 = (void *)_NRCopyLogObjectForNRUUID(v421, v422);
              v424 = _NRLogIsLevelEnabled(v423, 17);

              if (v424)
              {
                v425 = *((id *)a1 + 12);
                v427 = (void *)_NRCopyLogObjectForNRUUID(v425, v426);
                _NRLogWithArgs(v427, 17, "Failed to add localConditionPolicyForTest");

              }
              v428 = *((id *)a1 + 34);
              objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add localConditionPolicyForTest %@ to session %@"), v152, v428);

              v2 = v549;
            }

            if (!v157)
              goto LABEL_141;
            v544 = sub_100133714(v548, v545);
            v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
            v559[0] = v543;
            v158 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v559[1] = v158;
            v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v559, 2));

            v160 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
            v542 = v159;
            v161 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v160, v159);
            v162 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v163 = *((id *)a1 + 34);
            v164 = sub_100127310((uint64_t)v162, v163, v161);
            v165 = (void *)objc_claimAutoreleasedReturnValue(v164);

            v166 = objc_msgSend(v165, "unsignedIntegerValue");
            if (v166)
            {
              objc_msgSend(v2, "addObject:", v165);
            }
            else
            {
              v445 = *((id *)a1 + 12);
              v447 = (void *)_NRCopyLogObjectForNRUUID(v445, v446);
              v448 = _NRLogIsLevelEnabled(v447, 16);

              if (v448)
              {
                v449 = *((id *)a1 + 12);
                v451 = (void *)_NRCopyLogObjectForNRUUID(v449, v450);
                v452 = *((id *)a1 + 34);
                _NRLogWithArgs(v451, 16, "%s%.30s:%-4d %@ failed to add remoteConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3626, v4, v161, v452);

              }
              v453 = *((id *)a1 + 12);
              v455 = (void *)_NRCopyLogObjectForNRUUID(v453, v454);
              v456 = _NRLogIsLevelEnabled(v455, 17);

              if (v456)
              {
                v457 = *((id *)a1 + 12);
                v459 = (void *)_NRCopyLogObjectForNRUUID(v457, v458);
                _NRLogWithArgs(v459, 17, "Failed to add remoteConditionPolicyForTest");

              }
              v460 = *((id *)a1 + 34);
              objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add remoteConditionPolicyForTest %@ to session %@"), v161, v460);

              v2 = v549;
            }

            if (!v166)
              goto LABEL_141;
            v167 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "19999");
            v168 = sub_1001331E8(v548, v167);

            v544 = v168;
            v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v168, 128));
            v558[0] = v543;
            v169 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v558[1] = v169;
            v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v558, 2));

            v171 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
            v542 = v170;
            v172 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v171, v170);
            v173 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v174 = *((id *)a1 + 34);
            v175 = sub_100127310((uint64_t)v173, v174, v172);
            v176 = (void *)objc_claimAutoreleasedReturnValue(v175);

            v177 = objc_msgSend(v176, "unsignedIntegerValue");
            if (v177)
            {
              objc_msgSend(v2, "addObject:", v176);
            }
            else
            {
              v477 = *((id *)a1 + 12);
              v479 = (void *)_NRCopyLogObjectForNRUUID(v477, v478);
              v480 = _NRLogIsLevelEnabled(v479, 16);

              if (v480)
              {
                v481 = *((id *)a1 + 12);
                v483 = (void *)_NRCopyLogObjectForNRUUID(v481, v482);
                v484 = *((id *)a1 + 34);
                _NRLogWithArgs(v483, 16, "%s%.30s:%-4d %@ failed to add localConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3643, v4, v172, v484);

              }
              v485 = *((id *)a1 + 12);
              v487 = (void *)_NRCopyLogObjectForNRUUID(v485, v486);
              v488 = _NRLogIsLevelEnabled(v487, 17);

              if (v488)
              {
                v489 = *((id *)a1 + 12);
                v491 = (void *)_NRCopyLogObjectForNRUUID(v489, v490);
                _NRLogWithArgs(v491, 17, "Failed to add localConditionPolicyForTest");

              }
              v492 = *((id *)a1 + 34);
              objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add localConditionPolicyForTest %@ to session %@"), v172, v492);

              v2 = v549;
            }

            if (!v177)
              goto LABEL_141;
            v178 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "19999");
            v179 = sub_100133714(v548, v178);

            v544 = v179;
            v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v179, 128));
            v557[0] = v543;
            v180 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v557[1] = v180;
            v181 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v557, 2));

            v182 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
            v542 = v181;
            v183 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v182, v181);
            v184 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v185 = *((id *)a1 + 34);
            v186 = sub_100127310((uint64_t)v184, v185, v183);
            v187 = (void *)objc_claimAutoreleasedReturnValue(v186);

            v188 = objc_msgSend(v187, "unsignedIntegerValue");
            if (v188)
            {
              objc_msgSend(v2, "addObject:", v187);
            }
            else
            {
              v509 = *((id *)a1 + 12);
              v511 = (void *)_NRCopyLogObjectForNRUUID(v509, v510);
              v512 = _NRLogIsLevelEnabled(v511, 16);

              if (v512)
              {
                v513 = *((id *)a1 + 12);
                v515 = (void *)_NRCopyLogObjectForNRUUID(v513, v514);
                v516 = *((id *)a1 + 34);
                _NRLogWithArgs(v515, 16, "%s%.30s:%-4d %@ failed to add remoteConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3660, v4, v183, v516);

              }
              v517 = *((id *)a1 + 12);
              v519 = (void *)_NRCopyLogObjectForNRUUID(v517, v518);
              v520 = _NRLogIsLevelEnabled(v519, 17);

              if (v520)
              {
                v521 = *((id *)a1 + 12);
                v523 = (void *)_NRCopyLogObjectForNRUUID(v521, v522);
                _NRLogWithArgs(v523, 17, "Failed to add remoteConditionPolicyForTest");

              }
              v524 = *((id *)a1 + 34);
              objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add remoteConditionPolicyForTest %@ to session %@"), v183, v524);

              v2 = v549;
            }

            v64 = v546;
            if (!v188)
              goto LABEL_90;
          }
          sub_1000DEAEC((uint64_t)a1, 0);
          objc_msgSend(v4, "setHasClassDPolicies:", 1);
          v65 = &APSConnectionOverrideNamedDelegatePort_ptr;
        }
        if (!objc_msgSend(v4, "ikeClassCEstablished")
          || (objc_msgSend(v4, "hasClassCPolicies") & 1) != 0)
        {
          goto LABEL_79;
        }
        v545 = (id)sub_100133920(v548, CFSTR("61315"));
        v544 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:"));
        v556[0] = v544;
        v189 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v556[1] = v189;
        v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v556, 2));

        v546 = v64;
        v191 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v64, 0));
        v192 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v191, v190);
        v193 = sub_100126F30((uint64_t)NRDPolicySessionManager);
        v194 = *((id *)a1 + 34);
        v195 = sub_100127310((uint64_t)v193, v194, v192);
        v196 = (void *)objc_claimAutoreleasedReturnValue(v195);

        v197 = objc_msgSend(v196, "unsignedIntegerValue");
        if (v197)
        {
          objc_msgSend(v549, "addObject:", v196);
        }
        else
        {
          v348 = *((id *)a1 + 12);
          v350 = (void *)_NRCopyLogObjectForNRUUID(v348, v349);
          LODWORD(v543) = _NRLogIsLevelEnabled(v350, 16);

          if ((_DWORD)v543)
          {
            v543 = *((id *)a1 + 12);
            v352 = (void *)_NRCopyLogObjectForNRUUID(v543, v351);
            v353 = *((id *)a1 + 34);
            _NRLogWithArgs(v352, 16, "%s%.30s:%-4d %@ failed to add localConditionPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3681, v4, v192, v353);

          }
          v354 = *((id *)a1 + 12);
          v356 = (void *)_NRCopyLogObjectForNRUUID(v354, v355);
          LODWORD(v543) = _NRLogIsLevelEnabled(v356, 17);

          if ((_DWORD)v543)
          {
            v357 = *((id *)a1 + 12);
            v359 = (void *)_NRCopyLogObjectForNRUUID(v357, v358);
            _NRLogWithArgs(v359, 17, "Failed to add localConditionPolicy");

          }
          v360 = *((id *)a1 + 34);
          objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add localConditionPolicy %@ to session %@"), v192, v360);

        }
        v64 = v546;
        v2 = v549;
        if (!v197)
          goto LABEL_90;
        v545 = sub_100133AD8(v548, CFSTR("61315"));
        v544 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
        v555[0] = v544;
        v198 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v555[1] = v198;
        v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v555, 2));

        v200 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
        v201 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v200, v199);
        v202 = sub_100126F30((uint64_t)NRDPolicySessionManager);
        v203 = *((id *)a1 + 34);
        v204 = sub_100127310((uint64_t)v202, v203, v201);
        v205 = (void *)objc_claimAutoreleasedReturnValue(v204);

        v206 = objc_msgSend(v205, "unsignedIntegerValue");
        if (v206)
        {
          objc_msgSend(v549, "addObject:", v205);
        }
        else
        {
          v374 = *((id *)a1 + 12);
          v376 = (void *)_NRCopyLogObjectForNRUUID(v374, v375);
          LODWORD(v543) = _NRLogIsLevelEnabled(v376, 16);

          if ((_DWORD)v543)
          {
            v543 = *((id *)a1 + 12);
            v378 = (void *)_NRCopyLogObjectForNRUUID(v543, v377);
            v379 = *((id *)a1 + 34);
            _NRLogWithArgs(v378, 16, "%s%.30s:%-4d %@ failed to add remoteConditionPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3695, v4, v201, v379);

          }
          v380 = *((id *)a1 + 12);
          v382 = (void *)_NRCopyLogObjectForNRUUID(v380, v381);
          LODWORD(v543) = _NRLogIsLevelEnabled(v382, 17);

          if ((_DWORD)v543)
          {
            v383 = *((id *)a1 + 12);
            v385 = (void *)_NRCopyLogObjectForNRUUID(v383, v384);
            _NRLogWithArgs(v385, 17, "Failed to add remoteConditionPolicy");

          }
          v386 = *((id *)a1 + 34);
          objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add remoteConditionPolicy %@ to session %@"), v201, v386);

        }
        v64 = v546;
        v2 = v549;
        if (!v206)
          goto LABEL_90;
        v545 = sub_100134928(v548);
        v207 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
        v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 58));
        v544 = v207;
        v554[0] = v207;
        v554[1] = v543;
        v208 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v554[2] = v208;
        v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v554, 3));

        v210 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
        v211 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v210, v209);
        v212 = sub_100126F30((uint64_t)NRDPolicySessionManager);
        v213 = *((id *)a1 + 34);
        v214 = sub_100127310((uint64_t)v212, v213, v211);
        v215 = (void *)objc_claimAutoreleasedReturnValue(v214);

        v216 = objc_msgSend(v215, "unsignedIntegerValue");
        if (v216)
        {
          objc_msgSend(v549, "addObject:", v215);
        }
        else
        {
          v400 = *((id *)a1 + 12);
          v402 = (void *)_NRCopyLogObjectForNRUUID(v400, v401);
          LODWORD(v542) = _NRLogIsLevelEnabled(v402, 16);

          if ((_DWORD)v542)
          {
            v542 = *((id *)a1 + 12);
            v404 = (void *)_NRCopyLogObjectForNRUUID(v542, v403);
            v405 = *((id *)a1 + 34);
            _NRLogWithArgs(v404, 16, "%s%.30s:%-4d %@ failed to add icmpConditionPolicy %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3710, v4, v211, v405);

          }
          v406 = *((id *)a1 + 12);
          v408 = (void *)_NRCopyLogObjectForNRUUID(v406, v407);
          LODWORD(v542) = _NRLogIsLevelEnabled(v408, 17);

          if ((_DWORD)v542)
          {
            v409 = *((id *)a1 + 12);
            v411 = (void *)_NRCopyLogObjectForNRUUID(v409, v410);
            _NRLogWithArgs(v411, 17, "Failed to add icmpConditionPolicy");

          }
          v412 = *((id *)a1 + 34);
          objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add icmpConditionPolicy %@ to session %@"), v211, v412);

        }
        v64 = v546;
        v2 = v549;
        if (!v216)
          goto LABEL_90;
        if (!_NRIsAppleInternal(v217))
        {
LABEL_140:
          objc_msgSend(v4, "setHasClassCPolicies:", 1);
          v65 = &APSConnectionOverrideNamedDelegatePort_ptr;
          goto LABEL_79;
        }
        v545 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "18999");
        v544 = (id)sub_100133920(v548, v545);
        v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:"));
        v553[0] = v543;
        v218 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v553[1] = v218;
        v219 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v553, 2));

        v220 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
        v542 = v219;
        v221 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v220, v219);
        v222 = sub_100126F30((uint64_t)NRDPolicySessionManager);
        v223 = *((id *)a1 + 34);
        v224 = sub_100127310((uint64_t)v222, v223, v221);
        v225 = (void *)objc_claimAutoreleasedReturnValue(v224);

        v226 = objc_msgSend(v225, "unsignedIntegerValue");
        if (v226)
        {
          objc_msgSend(v549, "addObject:", v225);
        }
        else
        {
          v429 = *((id *)a1 + 12);
          v431 = (void *)_NRCopyLogObjectForNRUUID(v429, v430);
          v432 = _NRLogIsLevelEnabled(v431, 16);

          if (v432)
          {
            v433 = *((id *)a1 + 12);
            v435 = (void *)_NRCopyLogObjectForNRUUID(v433, v434);
            v436 = *((id *)a1 + 34);
            _NRLogWithArgs(v435, 16, "%s%.30s:%-4d %@ failed to add localConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3732, v4, v221, v436);

          }
          v437 = *((id *)a1 + 12);
          v439 = (void *)_NRCopyLogObjectForNRUUID(v437, v438);
          v440 = _NRLogIsLevelEnabled(v439, 17);

          if (v440)
          {
            v441 = *((id *)a1 + 12);
            v443 = (void *)_NRCopyLogObjectForNRUUID(v441, v442);
            _NRLogWithArgs(v443, 17, "Failed to add localConditionPolicyForTest");

          }
          v444 = *((id *)a1 + 34);
          objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add localConditionPolicyForTest %@ to session %@"), v221, v444);

          v2 = v549;
        }

        if (v226)
        {
          v544 = sub_100133AD8(v548, v545);
          v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:"));
          v552[0] = v543;
          v227 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v552[1] = v227;
          v228 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v552, 2));

          v229 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
          v542 = v228;
          v230 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v229, v228);
          v231 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          v232 = *((id *)a1 + 34);
          v233 = sub_100127310((uint64_t)v231, v232, v230);
          v234 = (void *)objc_claimAutoreleasedReturnValue(v233);

          v235 = objc_msgSend(v234, "unsignedIntegerValue");
          if (v235)
          {
            objc_msgSend(v2, "addObject:", v234);
          }
          else
          {
            v461 = *((id *)a1 + 12);
            v463 = (void *)_NRCopyLogObjectForNRUUID(v461, v462);
            v464 = _NRLogIsLevelEnabled(v463, 16);

            if (v464)
            {
              v465 = *((id *)a1 + 12);
              v467 = (void *)_NRCopyLogObjectForNRUUID(v465, v466);
              v468 = *((id *)a1 + 34);
              _NRLogWithArgs(v467, 16, "%s%.30s:%-4d %@ failed to add remoteConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3749, v4, v230, v468);

            }
            v469 = *((id *)a1 + 12);
            v471 = (void *)_NRCopyLogObjectForNRUUID(v469, v470);
            v472 = _NRLogIsLevelEnabled(v471, 17);

            if (v472)
            {
              v473 = *((id *)a1 + 12);
              v475 = (void *)_NRCopyLogObjectForNRUUID(v473, v474);
              _NRLogWithArgs(v475, 17, "Failed to add remoteConditionPolicyForTest");

            }
            v476 = *((id *)a1 + 34);
            objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add remoteConditionPolicyForTest %@ to session %@"), v230, v476);

            v2 = v549;
          }

          if (v235)
          {
            v236 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "19999");
            v237 = (void *)sub_100133920(v548, v236);

            v544 = v237;
            v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:", v237, 128));
            v551[0] = v543;
            v238 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v551[1] = v238;
            v239 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v551, 2));

            v240 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
            v542 = v239;
            v241 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v547, v240, v239);
            v242 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v243 = *((id *)a1 + 34);
            v244 = sub_100127310((uint64_t)v242, v243, v241);
            v245 = (void *)objc_claimAutoreleasedReturnValue(v244);

            v246 = objc_msgSend(v245, "unsignedIntegerValue");
            if (v246)
            {
              objc_msgSend(v2, "addObject:", v245);
            }
            else
            {
              v493 = *((id *)a1 + 12);
              v495 = (void *)_NRCopyLogObjectForNRUUID(v493, v494);
              v496 = _NRLogIsLevelEnabled(v495, 16);

              if (v496)
              {
                v497 = *((id *)a1 + 12);
                v499 = (void *)_NRCopyLogObjectForNRUUID(v497, v498);
                v500 = *((id *)a1 + 34);
                _NRLogWithArgs(v499, 16, "%s%.30s:%-4d %@ failed to add localConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3766, v4, v241, v500);

              }
              v501 = *((id *)a1 + 12);
              v503 = (void *)_NRCopyLogObjectForNRUUID(v501, v502);
              v504 = _NRLogIsLevelEnabled(v503, 17);

              if (v504)
              {
                v505 = *((id *)a1 + 12);
                v507 = (void *)_NRCopyLogObjectForNRUUID(v505, v506);
                _NRLogWithArgs(v507, 17, "Failed to add localConditionPolicyForTest");

              }
              v508 = *((id *)a1 + 34);
              objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add localConditionPolicyForTest %@ to session %@"), v241, v508);

              v2 = v549;
            }

            if (v246)
            {
              v247 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "19999");
              v248 = sub_100133AD8(v548, v247);

              v544 = v248;
              v543 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v248, 128));
              v550[0] = v543;
              v249 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
              v550[1] = v249;
              v250 = (char *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v550, 2));

              v251 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:](NEPolicyResult, "tunnelIPToInterfaceName:secondaryResultType:", v546, 0));
              v252 = objc_alloc((Class)NEPolicy);
              v253 = v547;
              v547 = v250;
              v254 = objc_msgSend(v252, "initWithOrder:result:conditions:", v253, v251, v250);
              v255 = sub_100126F30((uint64_t)NRDPolicySessionManager);
              v256 = *((id *)a1 + 34);
              v257 = sub_100127310((uint64_t)v255, v256, v254);
              v258 = (void *)objc_claimAutoreleasedReturnValue(v257);

              v259 = objc_msgSend(v258, "unsignedIntegerValue");
              if (v259)
              {
                objc_msgSend(v2, "addObject:", v258);
              }
              else
              {
                v525 = *((id *)a1 + 12);
                v527 = (void *)_NRCopyLogObjectForNRUUID(v525, v526);
                v528 = _NRLogIsLevelEnabled(v527, 16);

                if (v528)
                {
                  v529 = *((id *)a1 + 12);
                  v531 = (void *)_NRCopyLogObjectForNRUUID(v529, v530);
                  v532 = *((id *)a1 + 34);
                  _NRLogWithArgs(v531, 16, "%s%.30s:%-4d %@ failed to add remoteConditionPolicyForTest %@ to session %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3783, v4, v254, v532);

                }
                v533 = *((id *)a1 + 12);
                v535 = (void *)_NRCopyLogObjectForNRUUID(v533, v534);
                v536 = _NRLogIsLevelEnabled(v535, 17);

                if (v536)
                {
                  v537 = *((id *)a1 + 12);
                  v539 = (void *)_NRCopyLogObjectForNRUUID(v537, v538);
                  _NRLogWithArgs(v539, 17, "Failed to add remoteConditionPolicyForTest");

                }
                v540 = *((id *)a1 + 34);
                objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to add remoteConditionPolicyForTest %@ to session %@"), v254, v540);

                v2 = v549;
              }

              v64 = v546;
              if (!v259)
                goto LABEL_90;
              goto LABEL_140;
            }
          }
        }
LABEL_141:
        v102 = v545;
        v64 = v546;
        goto LABEL_89;
      }
      v281 = sub_1000D5594();
      v282 = _NRLogIsLevelEnabled(v281, 16);

      if (v282)
      {
        v283 = sub_1000D5594();
        _NRLogWithArgs(v283, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3483);

      }
      v4 = (id)_os_log_pack_size(12);
      a1 = (char *)&v541 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v284 = *__error();
      v280 = _os_log_pack_fill(a1, v4, v284, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    }
    else
    {
      v276 = sub_1000D5594();
      v277 = _NRLogIsLevelEnabled(v276, 16);

      if (v277)
      {
        v278 = sub_1000D5594();
        _NRLogWithArgs(v278, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (addedPolicyIDs) != ((void *)0)", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3480);

      }
      v4 = (id)_os_log_pack_size(12);
      a1 = (char *)&v541 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v279 = *__error();
      v280 = _os_log_pack_fill(a1, v4, v279, &_mh_execute_header, "%{public}s Assertion Failed: (addedPolicyIDs) != ((void *)0)");
    }
    *(_DWORD *)v280 = 136446210;
    *(_QWORD *)(v280 + 4) = "-[NRDDeviceConductor setIPTunnelPolicyForLink:]";
    v285 = sub_1000D5594();
    _NRLogAbortWithPack(v285, a1);
LABEL_159:
    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
LABEL_81:
    v97 = (id)qword_1001E4A18;
    v98 = (id *)v97;
    if (v97)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v97 + 1));
      if ((objc_msgSend(v98[2], "apply") & 1) == 0)
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v99, v100, v101, v541);
    }

    v102 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "policyIDs"));
    v71 = objc_msgSend(objc_alloc((Class)v65[147]), "initWithArray:", v102);
    objc_msgSend(v71, "addObjectsFromArray:", v2);
    objc_msgSend(v4, "setPolicyIDs:", v71);
    v103 = *((id *)a1 + 12);
    v105 = (void *)_NRCopyLogObjectForNRUUID(v103, v104);
    v106 = _NRLogIsLevelEnabled(v105, 0);

    if (v106)
    {
      v107 = *((id *)a1 + 12);
      v109 = (void *)_NRCopyLogObjectForNRUUID(v107, v108);
      _NRLogWithArgs(v109, 0, "%s%.30s:%-4d Successfully set policies for link: %@", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3801, v4);

    }
    goto LABEL_88;
  }
  v260 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v62);
  v261 = _NRLogIsLevelEnabled(v260, 16);

  if (v261)
  {
    v263 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v262);
    _NRLogWithArgs(v263, 16, "%s%.30s:%-4d %@ failed to get virtual interface to set IP tunnel policies", "", "-[NRDDeviceConductor setIPTunnelPolicyForLink:]", 3465, v4);

  }
  v264 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v262);
  v265 = _NRLogIsLevelEnabled(v264, 17);

  if (v265)
  {
    v267 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)a1 + 12), v266);
    _NRLogWithArgs(v267, 17, "Failed to get virtual interface to set IP tunnel policies");

  }
  objc_msgSend(v4, "cancelWithReason:", CFSTR("Failed to get virtual interface to set IP tunnel policies"));
LABEL_92:

}

void sub_1000E7D54(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  id v5;
  unsigned __int8 v6;
  __CFString *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  unsigned int v14;
  id *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  id v33;
  int IsLevelEnabled;
  id v35;
  void *v36;
  id v37;
  char *v38;
  void *v39;
  BOOL v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  int v48;
  id v49;
  char *v50;
  char *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  int v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  void *i;
  id v83;
  id v84;
  void *v85;
  BOOL v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  uint64_t v92;
  void *j;
  uint64_t v94;
  void *v95;
  void *v96;
  unsigned int v97;
  uint64_t v98;
  void *v99;
  int v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  int v107;
  id v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  BOOL v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  _BOOL4 v121;
  uint64_t v122;
  id v123;
  void *v124;
  id v125;
  id v126;
  id v127;
  id v128;
  void *v129;
  void *v130;
  void *v131;
  id v132;
  id v133;
  id v134;
  id v135;
  uint64_t v136;
  void *k;
  void *v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  id v143;
  id v144;
  id v145;
  id v146;
  void *v147;
  void *v148;
  void *v149;
  id v150;
  id v151;
  id v152;
  void *v153;
  void *v154;
  id v155;
  id v156;
  id v157;
  id v158;
  uint64_t v159;
  void *m;
  void *v161;
  void *v162;
  dispatch_data_t v163;
  NSObject *v164;
  id v165;
  id v166;
  void *v167;
  id v168;
  void *v169;
  void *v170;
  id v171;
  id v172;
  id v173;
  id v174;
  void *v175;
  void *v176;
  void *v177;
  id v178;
  id v179;
  id v180;
  id v181;
  void *v182;
  void *v183;
  id v184;
  id v185;
  id v186;
  void *n;
  uint64_t v188;
  void *v189;
  id v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  id v196;
  id v197;
  id v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  void *v208;
  void *v209;
  void *v210;
  id v211;
  id obj;
  char v213;
  void *v214;
  char *v215;
  uint64_t v216;
  id v217;
  id v218;
  id v219;
  unsigned int v220;
  void *v221;
  int v222;
  id v223;
  id v224;
  void *v225;
  id v226;
  id v227;
  id v228;
  id *to;
  id *v230;
  id v231;
  id v232;
  id v233;
  id val;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  _QWORD v239[4];
  id v240;
  _QWORD v241[4];
  NSObject *v242;
  id v243;
  id v244;
  id from;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  _QWORD v258[4];
  id v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  _QWORD v268[2];
  void *v269;
  _BYTE v270[128];
  void *v271;
  void *v272;
  void *v273;
  id location[2];
  _BYTE v275[128];
  void *v276;
  void *v277;
  _QWORD v278[2];
  _BYTE v279[128];
  void *v280;
  _BYTE v281[128];
  _BYTE v282[128];
  _BYTE v283[128];
  void *v284;
  _QWORD v285[3];

  if (a1)
  {
    v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    v3 = v2;
    if (*(_BYTE *)(a1 + 48))
      goto LABEL_15;
    if (v2)
      v4 = (void *)*((_QWORD *)v2 + 16);
    else
      v4 = 0;
    v5 = v4;
    v6 = objc_msgSend(v5, "hasPoliciesForProxyCriteria");

    if ((v6 & 1) == 0)
    {
      sub_1000EA358(a1);
      goto LABEL_15;
    }
    if (objc_msgSend(*(id *)(a1 + 128), "state") != 8)
    {
LABEL_15:

      return;
    }
    v215 = v3;
    val = (id)a1;
    if (!*(_QWORD *)(a1 + 304))
    {
      v7 = CFSTR("proxyCriteria");
      v8 = objc_alloc((Class)NSString);
      v207 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "UUIDString"));
      v9 = objc_msgSend(v8, "initWithFormat:", CFSTR("NRDDC-%@-%@"));

      v10 = *(void **)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v9;

    }
    if (v3)
      v11 = (void *)*((_QWORD *)v3 + 16);
    else
      v11 = 0;
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "proxyProviderCriteria"));
    v14 = objc_msgSend(v13, "hasProxyCriteriaAssigningTokens");

    v15 = (id *)val;
    v16 = (void *)*((_QWORD *)val + 82);
    if (v14)
    {
      if (v16)
        goto LABEL_19;
      v17 = objc_alloc_init((Class)NSMutableDictionary);
      v16 = (void *)*((_QWORD *)val + 82);
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)val + 82) = v17;

LABEL_19:
    if (v3)
      v18 = (void *)*((_QWORD *)v3 + 16);
    else
      v18 = 0;
    v19 = v18;
    if (objc_msgSend(v19, "proxyCapability") == (id)1)
    {
      if (v3)
        v20 = (void *)*((_QWORD *)v3 + 16);
      else
        v20 = 0;
      v21 = v20;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "proxyProviderCriteria"));
      v23 = objc_msgSend(v22, "forwardNonMatchingTraffic");

      v15 = (id *)val;
      if ((v23 & 1) != 0)
        goto LABEL_15;
    }
    else
    {

    }
    if (v3)
      v24 = (void *)*((_QWORD *)v3 + 16);
    else
      v24 = 0;
    v25 = v24;
    v26 = objc_msgSend(v25, "proxyCapability");

    if (v26 == (id)2)
    {
      v210 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15[16], "proxyAgentUUID"));
      if (!v210)
      {
        v33 = sub_1000D5594();
        IsLevelEnabled = _NRLogIsLevelEnabled(v33, 17);

        if (IsLevelEnabled)
        {
          v35 = sub_1000D5594();
          _NRLogWithArgs(v35, 17, "invalid proxy agent uuid");

        }
        goto LABEL_167;
      }
      if (v3)
        v27 = (void *)*((_QWORD *)v3 + 16);
      else
        v27 = 0;
      v28 = val;
      v29 = v27;
      v30 = objc_msgSend(v29, "hasCompanionDatapath");

      v31 = (void *)*((_QWORD *)val + 16);
      if (v30)
      {
        v32 = NEVirtualInterfaceCopyName(objc_msgSend(v31, "virtualInterface"));
      }
      else
      {
        v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "localInterfaceName"));
        v28 = val;
      }
      v36 = (void *)v32;
      if (!v32)
      {
        v47 = sub_1000D5594();
        v48 = _NRLogIsLevelEnabled(v47, 17);

        if (v48)
        {
          v49 = sub_1000D5594();
          _NRLogWithArgs(v49, 17, "invalid interface name for %@", *((_QWORD *)v28 + 16));

        }
LABEL_166:

LABEL_167:
        v3 = v215;
        goto LABEL_15;
      }
      v209 = (void *)v32;
      v37 = sub_100126F30((uint64_t)NRDPolicySessionManager);
      sub_100127618((uint64_t)v37, *((void **)v28 + 38));

      v214 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v210));
      if (v3)
      {
        v38 = v3;
        v39 = (void *)*((_QWORD *)v3 + 16);
      }
      else
      {
        v39 = 0;
        v38 = 0;
      }
      v40 = v38 == 0;
      v41 = v39;
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "proxyProviderCriteria"));
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "proxyUsageRules"));

      if (v40)
        v44 = 0;
      else
        v44 = (void *)*((_QWORD *)v215 + 16);
      v45 = v44;
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "proxyProviderCriteria"));
      if (objc_msgSend(v46, "excludeLegacyClients"))
      {

      }
      else
      {
        v50 = v215;
        if (v215)
          v50 = (char *)*((_QWORD *)v215 + 16);
        v51 = v50;
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "proxyProviderCriteria"));
        v53 = objc_msgSend(v52, "excludeNonMatchingLegacyClients");

        if (!v53)
        {
          v75 = 301;
LABEL_57:
          v222 = v75;
          if (_NRIsAppleInternal(v54))
          {
            v76 = sub_1000A0710(0, CFSTR("TetheringBundleIDs"));
            v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
            v78 = objc_opt_class(NSArray);
            if ((objc_opt_isKindOfClass(v77, v78) & 1) != 0)
            {
              v266 = 0u;
              v267 = 0u;
              v264 = 0u;
              v265 = 0u;
              v79 = v77;
              v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v264, v283, 16);
              if (v80)
              {
                v226 = 0;
                v81 = *(_QWORD *)v265;
                do
                {
                  for (i = 0; i != v80; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v265 != v81)
                      objc_enumerationMutation(v79);
                    v83 = sub_1001078CC(*(void **)(*((_QWORD *)&v264 + 1) + 8 * (_QWORD)i));
                    if (!v226)
                      v226 = objc_alloc_init((Class)NSMutableArray);
                    if (objc_msgSend(v83, "count"))
                      objc_msgSend(v226, "addObjectsFromArray:", v83);

                  }
                  v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v264, v283, 16);
                }
                while (v80);
              }
              else
              {
                v226 = 0;
              }

            }
            else
            {
              v226 = 0;
            }

          }
          else
          {
            v226 = 0;
          }
          v211 = objc_alloc_init((Class)NSMutableSet);
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          obj = v43;
          v84 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v260, v282, 16);
          v217 = v84;
          if (v84)
          {
            v213 = 0;
            v216 = *(_QWORD *)v261;
            do
            {
              v221 = 0;
              do
              {
                if (*(_QWORD *)v261 != v216)
                  objc_enumerationMutation(obj);
                v225 = *(void **)(*((_QWORD *)&v260 + 1) + 8 * (_QWORD)v221);
                if ((_NRIsAppleInternal(v84) & (v226 != 0)) == 1)
                {
                  v232 = objc_alloc_init((Class)NSMutableArray);
                  objc_msgSend(v232, "addObjectsFromArray:", v226);
                }
                else
                {
                  v232 = 0;
                }
                v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "entitlements"));
                v86 = objc_msgSend(v85, "count") == 0;

                if (v86)
                  goto LABEL_106;
                v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "entitlements"));
                v227 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 0));
                v258[0] = _NSConcreteStackBlock;
                v258[1] = 3221225472;
                v258[2] = sub_1000EA45C;
                v258[3] = &unk_1001B7408;
                v223 = v87;
                v259 = v223;
                objc_msgSend(v227, "setFilter:", v258);
                v88 = objc_msgSend(v225, "copyExcludedBundleIdentifiers");
                v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "nextObject"));
                if (v89)
                {
                  do
                  {
                    v256 = 0u;
                    v257 = 0u;
                    v254 = 0u;
                    v255 = 0u;
                    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "machOUUIDs"));
                    v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v254, v281, 16);
                    if (v91)
                    {
                      v92 = *(_QWORD *)v255;
                      while (2)
                      {
                        for (j = 0; j != v91; j = (char *)j + 1)
                        {
                          if (*(_QWORD *)v255 != v92)
                            objc_enumerationMutation(v90);
                          v94 = *(_QWORD *)(*((_QWORD *)&v254 + 1) + 8 * (_QWORD)j);
                          if (!v232)
                            v232 = objc_alloc_init((Class)NSMutableArray);
                          v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "bundleIdentifier"));
                          if (v95)
                          {
                            v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "bundleIdentifier"));
                            v97 = objc_msgSend(v88, "containsObject:", v96);

                            if (v97)
                            {
                              v99 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)val + 12), v98);
                              v100 = _NRLogIsLevelEnabled(v99, 0);

                              if (v100)
                              {
                                v102 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)val + 12), v101);
                                v208 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "bundleIdentifier"));
                                v207 = "";
                                _NRLogWithArgs(v102, 0, "%s%.30s:%-4d found exclude bundle identifier %@. Skipping rule");

                              }
                              goto LABEL_100;
                            }
                          }
                          objc_msgSend(v232, "addObject:", v94);
                        }
                        v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v254, v281, 16);
                        if (v91)
                          continue;
                        break;
                      }
                    }
LABEL_100:

                    v103 = objc_claimAutoreleasedReturnValue(objc_msgSend(v227, "nextObject"));
                    v89 = (void *)v103;
                  }
                  while (v103);
                }
                v105 = objc_msgSend(v232, "count");
                if (v105)
                {
                  objc_msgSend(v211, "addObjectsFromArray:", v232);
                }
                else
                {
                  v106 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)val + 12), v104);
                  v107 = _NRLogIsLevelEnabled(v106, 0);

                  if (v107)
                  {
                    v108 = *((id *)val + 12);
                    v110 = (void *)_NRCopyLogObjectForNRUUID(v108, v109);
                    v207 = "";
                    _NRLogWithArgs(v110, 0, "%s%.30s:%-4d no app has entitlements %@. Skipping rule");

                  }
                }

                v213 = 1;
                if (v105)
                {
LABEL_106:
                  v224 = objc_alloc_init((Class)NSMutableArray);
                  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", objc_msgSend(v225, "trafficClass"), objc_msgSend(v225, "trafficClass")));
                  objc_msgSend(v224, "addObject:", v111);

                  if (objc_msgSend(v225, "transportProtocol"))
                  {
                    v112 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowIPProtocol:](NEPolicyCondition, "flowIPProtocol:", objc_msgSend(v225, "transportProtocol")));
                    objc_msgSend(v224, "addObject:", v112);

                  }
                  v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "domain"));
                  v114 = v113 == 0;

                  if (!v114)
                  {
                    v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "domain"));
                    v116 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v115));

                    objc_msgSend(v224, "addObject:", v116);
                  }
                  v117 = (v222 + 3);
                  v118 = (v222 + 5);
                  v220 = v222 + 7;
                  if (objc_msgSend(v224, "count"))
                  {
                    v119 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    objc_msgSend(v224, "addObject:", v119);

                    v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v225, "entitlements"));
                    v121 = objc_msgSend(v120, "count") == 0;

                    if (v121)
                      v122 = v118;
                    else
                      v122 = v117;
                    v123 = objc_alloc((Class)NEPolicy);
                    v124 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v122));
                    v125 = objc_msgSend(v123, "initWithOrder:result:conditions:", (v222 + 1), v124, v224);

                    objc_opt_self(NRDPolicySessionManager);
                    if (qword_1001E4A20 != -1)
                      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                    v126 = (id)qword_1001E4A18;
                    v127 = sub_100127310((uint64_t)v126, *((void **)val + 38), v125);

                    v128 = objc_alloc((Class)NEPolicy);
                    v129 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v220));
                    v130 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                    v280 = v130;
                    v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v280, 1));
                    v132 = objc_msgSend(v128, "initWithOrder:result:conditions:", (v222 + 2), v129, v131);

                    objc_opt_self(NRDPolicySessionManager);
                    if (qword_1001E4A20 != -1)
                      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                    v133 = (id)qword_1001E4A18;
                    v134 = sub_100127310((uint64_t)v133, *((void **)val + 38), v132);

                  }
                  v252 = 0u;
                  v253 = 0u;
                  v250 = 0u;
                  v251 = 0u;
                  v232 = v232;
                  v135 = objc_msgSend(v232, "countByEnumeratingWithState:objects:count:", &v250, v279, 16);
                  if (v135)
                  {
                    v136 = *(_QWORD *)v251;
                    do
                    {
                      for (k = 0; k != v135; k = (char *)k + 1)
                      {
                        if (*(_QWORD *)v251 != v136)
                          objc_enumerationMutation(v232);
                        v138 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v250 + 1) + 8 * (_QWORD)k)));
                        v139 = objc_alloc((Class)NEPolicy);
                        v140 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v118));
                        v141 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                        v278[0] = v141;
                        v278[1] = v138;
                        v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v278, 2));
                        v143 = objc_msgSend(v139, "initWithOrder:result:conditions:", v117, v140, v142);

                        objc_opt_self(NRDPolicySessionManager);
                        if (qword_1001E4A20 != -1)
                          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                        v144 = (id)qword_1001E4A18;
                        v145 = sub_100127310((uint64_t)v144, *((void **)val + 38), v143);

                      }
                      v135 = objc_msgSend(v232, "countByEnumeratingWithState:objects:count:", &v250, v279, 16);
                    }
                    while (v135);
                  }

                  v146 = objc_alloc((Class)NEPolicy);
                  v147 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v220));
                  v148 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  v277 = v148;
                  v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v277, 1));
                  v219 = objc_msgSend(v146, "initWithOrder:result:conditions:", (v222 + 4), v147, v149);

                  objc_opt_self(NRDPolicySessionManager);
                  if (qword_1001E4A20 != -1)
                    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                  v150 = (id)qword_1001E4A18;
                  v151 = sub_100127310((uint64_t)v150, *((void **)val + 38), v219);

                  v152 = objc_alloc((Class)NEPolicy);
                  v153 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  v276 = v153;
                  v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v276, 1));
                  v218 = objc_msgSend(v152, "initWithOrder:result:conditions:", v118, v214, v154);

                  objc_opt_self(NRDPolicySessionManager);
                  if (qword_1001E4A20 != -1)
                    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                  v155 = (id)qword_1001E4A18;
                  v156 = sub_100127310((uint64_t)v155, *((void **)val + 38), v218);

                  v157 = objc_msgSend(v225, "copyMatchTokens");
                  v248 = 0u;
                  v249 = 0u;
                  v246 = 0u;
                  v247 = 0u;
                  v228 = v157;
                  v158 = objc_msgSend(v228, "countByEnumeratingWithState:objects:count:", &v246, v275, 16);
                  if (v158)
                  {
                    v159 = *(_QWORD *)v247;
                    do
                    {
                      for (m = 0; m != v158; m = (char *)m + 1)
                      {
                        if (*(_QWORD *)v247 != v159)
                          objc_enumerationMutation(v228);
                        v161 = *(void **)(*((_QWORD *)&v246 + 1) + 8 * (_QWORD)m);
                        v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)val + 82), "objectForKeyedSubscript:", v161));
                        if (v162)
                          goto LABEL_140;
                        v162 = (void *)nw_agent_create("com.apple.networkrelay", "ProxyUsageTokenAgent", "", *((_QWORD *)val + 13));
                        v163 = dispatch_data_create(objc_msgSend(v161, "bytes"), (size_t)objc_msgSend(v161, "length"), *((dispatch_queue_t *)val + 13), 0);
                        nw_agent_change_state(v162, 1, 0, 0);
                        objc_initWeak(location, val);
                        objc_initWeak(&from, v162);
                        v241[0] = _NSConcreteStackBlock;
                        v241[1] = 3221225472;
                        v241[2] = sub_1000EA61C;
                        v241[3] = &unk_1001B7430;
                        objc_copyWeak(&v243, location);
                        objc_copyWeak(&v244, &from);
                        v164 = v163;
                        v242 = v164;
                        nw_agent_set_token_low_water_mark(v162, 1, v241);
                        v239[0] = _NSConcreteStackBlock;
                        v239[1] = 3221225472;
                        v239[2] = sub_1000EA6E8;
                        v239[3] = &unk_1001B7458;
                        objc_copyWeak(&v240, location);
                        nw_agent_set_error_handler(v162, v239);
                        sub_1000EA798(v162, v164);
                        v165 = *((id *)val + 82);
                        objc_msgSend(v165, "setObject:forKeyedSubscript:", v162, v161);

                        objc_destroyWeak(&v240);
                        objc_destroyWeak(&v244);
                        objc_destroyWeak(&v243);
                        objc_destroyWeak(&from);
                        objc_destroyWeak(location);

                        if (v162)
                        {
LABEL_140:
                          location[1] = 0;
                          location[0] = 0;
                          nw_agent_get_uuid(v162, location);
                          v166 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", location);
                          v167 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v166));
                          v168 = objc_alloc((Class)NEPolicy);
                          v169 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                          v273 = v169;
                          v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v273, 1));
                          v171 = objc_msgSend(v168, "initWithOrder:result:conditions:", v118, v167, v170);

                          objc_opt_self(NRDPolicySessionManager);
                          if (qword_1001E4A20 != -1)
                            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                          v172 = (id)qword_1001E4A18;
                          v173 = sub_100127310((uint64_t)v172, *((void **)val + 38), v171);

                        }
                      }
                      v158 = objc_msgSend(v228, "countByEnumeratingWithState:objects:count:", &v246, v275, 16);
                    }
                    while (v158);
                  }

                  v174 = objc_alloc((Class)NEPolicy);
                  v175 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 599));
                  v176 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  v272 = v176;
                  v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v272, 1));
                  v178 = objc_msgSend(v174, "initWithOrder:result:conditions:", (v222 + 6), v175, v177);

                  objc_opt_self(NRDPolicySessionManager);
                  if (qword_1001E4A20 != -1)
                    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                  v179 = (id)qword_1001E4A18;
                  v180 = sub_100127310((uint64_t)v179, *((void **)val + 38), v178);

                  v222 += 7;
                }

                v221 = (char *)v221 + 1;
              }
              while (v221 != v217);
              v84 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v260, v282, 16);
              v217 = v84;
            }
            while (v84);
          }
          else
          {
            v213 = 0;
          }

          if (objc_msgSend(v211, "count"))
          {
            v230 = (id *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 591));
            v181 = objc_alloc((Class)NEPolicy);
            v182 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            v271 = v182;
            v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v271, 1));
            to = (id *)objc_msgSend(v181, "initWithOrder:result:conditions:", 589, v230, v183);

            v184 = sub_100126F30((uint64_t)NRDPolicySessionManager);
            v185 = sub_100127310((uint64_t)v184, *((void **)val + 38), to);

            v237 = 0u;
            v238 = 0u;
            v235 = 0u;
            v236 = 0u;
            v231 = v211;
            v186 = objc_msgSend(v231, "countByEnumeratingWithState:objects:count:", &v235, v270, 16);
            if (v186)
            {
              v233 = *(id *)v236;
              do
              {
                for (n = 0; n != v186; n = (char *)n + 1)
                {
                  if (*(id *)v236 != v233)
                    objc_enumerationMutation(v231);
                  v188 = *(_QWORD *)(*((_QWORD *)&v235 + 1) + 8 * (_QWORD)n);
                  v189 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 7, 0));
                  objc_msgSend(v189, "setControlUnit:", 0xFFFFFFFLL);
                  v190 = objc_alloc((Class)NEPolicy);
                  v269 = v189;
                  v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v269, 1));
                  v192 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v191));
                  v193 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                  v268[0] = v193;
                  v194 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v188));
                  v268[1] = v194;
                  v195 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v268, 2));
                  v196 = objc_msgSend(v190, "initWithOrder:result:conditions:", 590, v192, v195);

                  objc_opt_self(NRDPolicySessionManager);
                  if (qword_1001E4A20 != -1)
                    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
                  v197 = (id)qword_1001E4A18;
                  v198 = sub_100127310((uint64_t)v197, *((void **)val + 38), v196);

                }
                v186 = objc_msgSend(v231, "countByEnumeratingWithState:objects:count:", &v235, v270, 16);
              }
              while (v186);
            }

          }
          v199 = sub_100126F30((uint64_t)NRDPolicySessionManager);
          sub_1001277C0((uint64_t)v199, v200, v201, v202, v203, v204, v205, v206, (uint64_t)v207);

          if ((v213 & 1) != 0)
            sub_1000EA884((uint64_t)val);
          else
            sub_1000EA358((uint64_t)val);

          v36 = v209;
          goto LABEL_166;
        }
      }
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition usesModernNetworkAPI](NEPolicyCondition, "usesModernNetworkAPI"));
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allowsUnsafeSocketAccess](NEPolicyCondition, "allowsUnsafeSocketAccess"));
      objc_msgSend(v57, "setNegative:", 1);
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 304));
      v59 = objc_alloc((Class)NEPolicy);
      v285[0] = v55;
      v285[1] = v56;
      v285[2] = v57;
      v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v285, 3));
      v61 = objc_msgSend(v59, "initWithOrder:result:conditions:", 302, v58, v60);

      v62 = sub_100126F30((uint64_t)NRDPolicySessionManager);
      v63 = sub_100127310((uint64_t)v62, *((void **)val + 38), v61);

      if (v215)
        v64 = (void *)*((_QWORD *)v215 + 16);
      else
        v64 = 0;
      v65 = v64;
      v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "proxyProviderCriteria"));
      v67 = objc_msgSend(v66, "excludeNonMatchingLegacyClients");

      if (v67)
        v68 = 590;
      else
        v68 = 599;
      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", v68));
      v70 = objc_alloc((Class)NEPolicy);
      v284 = v55;
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v284, 1));
      v72 = objc_msgSend(v70, "initWithOrder:result:conditions:", 303, v69, v71);

      v73 = sub_100126F30((uint64_t)NRDPolicySessionManager);
      v74 = sub_100127310((uint64_t)v73, *((void **)val + 38), v72);

      v75 = 304;
      goto LABEL_57;
    }
    goto LABEL_15;
  }
}

void sub_1000E9668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id *a32,id *a33,id *location,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a33);
  objc_destroyWeak(a32);
  objc_destroyWeak(&a58);
  objc_destroyWeak((id *)&STACK[0x3B8]);
  _Unwind_Resume(a1);
}

void sub_1000E96B0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *j;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *k;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *m;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *n;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *ii;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    v2 = *(id *)(a1 + 120);
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(*(id *)(a1 + 120), "count");

      if (v4)
      {
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v5 = objc_msgSend(*(id *)(a1 + 120), "copy");
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v60;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(_QWORD *)v60 != v8)
                objc_enumerationMutation(v5);
              sub_1000D3508(a1, *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i));
            }
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
          }
          while (v7);
        }

        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v10 = *(id *)(a1 + 120);
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
        if (v11)
        {
          v12 = v11;
          v13 = 0;
          v14 = *(_QWORD *)v56;
          do
          {
            for (j = 0; j != v12; j = (char *)j + 1)
            {
              if (*(_QWORD *)v56 != v14)
                objc_enumerationMutation(v10);
              v16 = *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)j);
              if (v16 && *(_BYTE *)(v16 + 12))
              {
                if (!v13)
                  v13 = objc_alloc_init((Class)NSMutableArray);
                objc_msgSend(v13, "addObject:", v16);
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
          }
          while (v12);
        }
        else
        {
          v13 = 0;
        }

        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v17 = v13;
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v51, v66, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v52;
          do
          {
            for (k = 0; k != v19; k = (char *)k + 1)
            {
              if (*(_QWORD *)v52 != v20)
                objc_enumerationMutation(v17);
              sub_1000D5604(a1, *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)k));
            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v51, v66, 16);
          }
          while (v19);
        }

        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v22 = *(id *)(a1 + 120);
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v47, v65, 16);
        if (v23)
        {
          v24 = v23;
          v25 = *(_QWORD *)v48;
          do
          {
            for (m = 0; m != v24; m = (char *)m + 1)
            {
              if (*(_QWORD *)v48 != v25)
                objc_enumerationMutation(v22);
              sub_1000D3508(a1, *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)m));
            }
            v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v47, v65, 16);
          }
          while (v24);
        }

        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v27 = *(id *)(a1 + 120);
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v64, 16);
        if (v28)
        {
          v29 = v28;
          v30 = 0;
          v31 = *(_QWORD *)v44;
          do
          {
            for (n = 0; n != v29; n = (char *)n + 1)
            {
              if (*(_QWORD *)v44 != v31)
                objc_enumerationMutation(v27);
              v33 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)n);
              if (v33 && *(_BYTE *)(v33 + 12))
              {
                if (!v30)
                  v30 = objc_alloc_init((Class)NSMutableArray);
                objc_msgSend(v30, "addObject:", v33);
              }
            }
            v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v64, 16);
          }
          while (v29);
        }
        else
        {
          v30 = 0;
        }

        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v34 = v30;
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v39, v63, 16);
        if (v35)
        {
          v36 = v35;
          v37 = *(_QWORD *)v40;
          do
          {
            for (ii = 0; ii != v36; ii = (char *)ii + 1)
            {
              if (*(_QWORD *)v40 != v37)
                objc_enumerationMutation(v34);
              sub_1000D5604(a1, *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)ii));
            }
            v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v39, v63, 16);
          }
          while (v36);
        }

      }
    }
  }
}

void sub_1000E9B4C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  char v5;
  BOOL v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NRApplicationServiceClient *v16;
  void *v17;
  id v18;
  id v19;
  id *v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  char *v37;
  uint64_t v38;
  void *i;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *j;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  void *v51;
  int IsLevelEnabled;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  void *v57;
  int v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[4];
  id v65;
  _QWORD v66[4];
  _QWORD *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD block[4];
  _QWORD *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  id location[16];

  if (a1 && *(_BYTE *)(a1 + 48) && !*(_QWORD *)(a1 + 632))
  {
    v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    v4 = v2;
    if (!v2)
      goto LABEL_21;
    if (v2[15])
    {
      v5 = 1;
      if (!v2[12])
        goto LABEL_21;
    }
    else
    {
      if (v2[14])
        v6 = 1;
      else
        v6 = *((unsigned __int16 *)v2 + 14) > 0x12u;
      v5 = v6;
      if (!v2[12])
        goto LABEL_21;
    }
    if (!v2[13])
      v5 = 0;
    if ((v5 & 1) != 0)
    {
      if (*((unsigned __int16 *)v2 + 14) > 0x15u)
      {
        v63 = a1;
        v14 = *((id *)v2 + 6);

        if (v14)
        {
          v16 = [NRApplicationServiceClient alloc];
          v17 = *(void **)(a1 + 104);
          v18 = *(id *)(v63 + 96);
          v19 = v17;
          v20 = sub_1000F6C68((id *)&v16->super.isa, (void *)v63, v19, v18);
          v21 = *(void **)(v63 + 632);
          *(_QWORD *)(v63 + 632) = v20;

          v23 = *(_BYTE **)(v63 + 632);
          if (v23 && !v23[9])
          {
            if (!v23[8])
            {
              v23[8] = 1;
              objc_opt_self(NRApplicationServiceManager);
              if (qword_1001E47D8 != -1)
                dispatch_once(&qword_1001E47D8, &stru_1001B7770);
              v33 = qword_1001E47D0;
              v34 = v23;
              if (v33)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v33 + 8));
                objc_msgSend(*(id *)(v33 + 48), "addObject:", v34);
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v62 = v33;
                v35 = *(id *)(v33 + 32);
                v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v76, location, 16);
                v37 = v4;
                if (v36)
                {
                  v38 = *(_QWORD *)v77;
                  do
                  {
                    for (i = 0; i != v36; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v77 != v38)
                        objc_enumerationMutation(v35);
                      v40 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
                      v41 = v34[8];
                      block[0] = _NSConcreteStackBlock;
                      block[1] = 3221225472;
                      block[2] = sub_1000F6B88;
                      block[3] = &unk_1001B8778;
                      v74 = v34;
                      v75 = v40;
                      v42 = v41;
                      v4 = v37;
                      dispatch_async(v42, block);

                    }
                    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v76, location, 16);
                  }
                  while (v36);
                }

                v72 = 0u;
                v70 = 0u;
                v71 = 0u;
                v69 = 0u;
                v43 = *(id *)(v62 + 40);
                v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v69, v80, 16);
                if (v44)
                {
                  v45 = *(_QWORD *)v70;
                  do
                  {
                    for (j = 0; j != v44; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v70 != v45)
                        objc_enumerationMutation(v43);
                      v47 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)j);
                      v48 = v34[8];
                      v66[0] = _NSConcreteStackBlock;
                      v66[1] = 3221225472;
                      v66[2] = sub_1000F6B94;
                      v66[3] = &unk_1001B8778;
                      v67 = v34;
                      v68 = v47;
                      v49 = v48;
                      v4 = v37;
                      dispatch_async(v49, v66);

                    }
                    v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v69, v80, 16);
                  }
                  while (v44);
                }

              }
              v51 = (void *)_NRCopyLogObjectForNRUUID(v34[7], v50);
              IsLevelEnabled = _NRLogIsLevelEnabled(v51, 1);

              if (IsLevelEnabled)
              {
                v54 = (void *)_NRCopyLogObjectForNRUUID(v34[7], v53);
                _NRLogWithArgs(v54, 1, "%s%.30s:%-4d %@ start", "", "-[NRApplicationServiceClient start]", 820, v34);

              }
            }
            v55 = objc_alloc_init((Class)NSMutableDictionary);
            objc_storeStrong((id *)(v63 + 648), v55);

            v57 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v63 + 96), v56);
            v58 = _NRLogIsLevelEnabled(v57, 0);

            if (v58)
            {
              v59 = *(id *)(v63 + 96);
              v61 = (void *)_NRCopyLogObjectForNRUUID(v59, v60);
              _NRLogWithArgs(v61, 0, "%s%.30s:%-4d registered application service client %@", "", "-[NRDDeviceConductor registerASClientIfNeeded]", 8595, *(_QWORD *)(v63 + 632));

            }
            sub_1000DD7D0(v63, 0);
          }
          else
          {
            v24 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v63 + 96), v22);
            v25 = _NRLogIsLevelEnabled(v24, 17);

            if (v25)
            {
              v27 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v63 + 96), v26);
              _NRLogWithArgs(v27, 17, "failed to start AS client");

            }
            sub_1000EA34C(v63);
          }
        }
        else
        {
          v28 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v15);
          v29 = _NRLogIsLevelEnabled(v28, 2);

          if (v29)
          {
            v31 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v30);
            _NRLogWithArgs(v31, 2, "%s%.30s:%-4d waiting on peer IDS device ID to complete ASClient registration", "", "-[NRDDeviceConductor registerASClientIfNeeded]", 8568);

          }
          objc_initWeak(location, (id)a1);
          v32 = *(id *)(a1 + 96);
          v64[0] = _NSConcreteStackBlock;
          v64[1] = 3221225472;
          v64[2] = sub_1000EA1F4;
          v64[3] = &unk_1001B7608;
          objc_copyWeak(&v65, location);
          sub_10013B92C((uint64_t)NRDLocalDevice, v32, v64);

          objc_destroyWeak(&v65);
          objc_destroyWeak(location);
        }
        goto LABEL_24;
      }
      v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
      v8 = _NRLogIsLevelEnabled(v7, 2);

      if (v8)
      {
        v10 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v9);
        _NRLogWithArgs(v10, 2, "%s%.30s:%-4d ignoring ASClient registration for unsupported peer");
LABEL_23:

      }
LABEL_24:

      return;
    }
LABEL_21:
    v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
    v12 = _NRLogIsLevelEnabled(v11, 2);

    if (v12)
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v13);
      _NRLogWithArgs(v10, 2, "%s%.30s:%-4d ignoring ASClient registration as peer not paired");
      goto LABEL_23;
    }
    goto LABEL_24;
  }
}

void sub_1000EA1D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 248));
  _Unwind_Resume(a1);
}

void sub_1000EA1F4(uint64_t a1, void *a2)
{
  id WeakRetained;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  unsigned int v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int IsLevelEnabled;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;

  v20 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained && *((_BYTE *)WeakRetained + 14))
  {
    v5 = *((id *)WeakRetained + 12);
    v6 = v20 ? (void *)v20[4] : 0;
    v7 = v6;
    v8 = objc_msgSend(v5, "isEqual:", v7);

    if (v8)
    {
      if (v20)
        v9 = (void *)v20[6];
      else
        v9 = 0;
      v10 = v9;

      v12 = _NRCopyLogObjectForNRUUID(v4[12], v11);
      v13 = (void *)v12;
      if (v10)
      {
        IsLevelEnabled = _NRLogIsLevelEnabled(v12, 0);

        if (IsLevelEnabled)
        {
          v16 = (void *)_NRCopyLogObjectForNRUUID(v4[12], v15);
          _NRLogWithArgs(v16, 0, "%s%.30s:%-4d received peer IDS device ID. Registering ASClient", "", "-[NRDDeviceConductor registerASClientIfNeeded]_block_invoke", 8580);

        }
        sub_1000E9B4C(v4);
      }
      else
      {
        v17 = _NRLogIsLevelEnabled(v12, 17);

        if (v17)
        {
          v19 = (void *)_NRCopyLogObjectForNRUUID(v4[12], v18);
          _NRLogWithArgs(v19, 17, "no IDS device ID");

        }
      }
    }
  }

}

void sub_1000EA34C(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 632), 0);
}

void sub_1000EA358(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  void *v6;
  id v7;

  if (*(_BYTE *)(a1 + 49))
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
    objc_msgSend(v7, "removeObserver:name:object:", a1, CFSTR("com.apple.LaunchServices.applicationRegistered"), 0);
    objc_msgSend(v7, "removeObserver:name:object:", a1, CFSTR("com.apple.LaunchServices.applicationStateChanged"), 0);
    objc_msgSend(v7, "removeObserver:name:object:", a1, CFSTR("com.apple.LaunchServices.applicationUnregistered"), 0);
    *(_BYTE *)(a1 + 49) = 0;
    v3 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v3, 0);

    if (IsLevelEnabled)
    {
      v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v5);
      _NRLogWithArgs(v6, 0, "%s%.30s:%-4d stopped monitoring LS events", "", "-[NRDDeviceConductor stopMonitoringLSAppEvents]", 3980);

    }
  }
}

uint64_t sub_1000EA45C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
LABEL_3:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v7)
        objc_enumerationMutation(v4);
      v9 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entitlements", (_QWORD)v16));
      v11 = objc_msgSend(v10, "objectForKey:ofClass:", v9, objc_opt_class(NSObject));
      v12 = objc_claimAutoreleasedReturnValue(v11);

      if (!v12)
        break;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9));
      if ((objc_msgSend((id)v12, "isEqual:", v13) & 1) == 0)
      {
        v14 = objc_opt_class(NSArray);
        if ((objc_opt_isKindOfClass(v12, v14) & 1) == 0
          || (objc_msgSend((id)v12, "containsObject:", v13) & 1) == 0)
        {

          v12 = 0;
          break;
        }
      }

      if (v6 == (id)++v8)
      {
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        v12 = 1;
        if (v6)
          goto LABEL_3;
        break;
      }
    }
  }
  else
  {
    v12 = 1;
  }

  return v12;
}

void sub_1000EA61C(void **a1)
{
  _BYTE *WeakRetained;
  uint64_t v3;
  id v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained && WeakRetained[14])
  {
    v9 = WeakRetained;
    v4 = objc_loadWeakRetained(a1 + 6);
    if (v4)
    {
      v5 = (void *)_NRCopyLogObjectForNRUUID(v9[12], v3);
      IsLevelEnabled = _NRLogIsLevelEnabled(v5, 1);

      if (IsLevelEnabled)
      {
        v8 = (void *)_NRCopyLogObjectForNRUUID(v9[12], v7);
        _NRLogWithArgs(v8, 1, "%s%.30s:%-4d tokens needed", "", "-[NRDDeviceConductor updateProxyCriteriaPoliciesIfNeeded]_block_invoke_2", 4310);

      }
      sub_1000EA798(v4, a1[4]);
    }

    WeakRetained = v9;
  }

}

void sub_1000EA6E8(uint64_t a1, uint64_t a2, int a3)
{
  id WeakRetained;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  void *v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (a3)
    {
      if (*((_BYTE *)WeakRetained + 14))
      {
        v10 = WeakRetained;
        v6 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)WeakRetained + 12), v5);
        IsLevelEnabled = _NRLogIsLevelEnabled(v6, 16);

        WeakRetained = v10;
        if (IsLevelEnabled)
        {
          v9 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v10 + 12), v8);
          _NRLogWithArgs(v9, 16, "%s%.30s:%-4d token agent received error %d", "", "-[NRDDeviceConductor updateProxyCriteriaPoliciesIfNeeded]_block_invoke_3", 4319, a3);

          WeakRetained = v10;
        }
      }
    }
  }

}

void sub_1000EA798(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = a1;
  ((void (*)(void))nw_agent_add_token)();
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);
  nw_agent_add_token(v4, v3);

}

void sub_1000EA884(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  void *v6;
  id v7;

  if (!*(_BYTE *)(a1 + 49))
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
    objc_msgSend(v7, "addObserver:selector:name:object:", a1, "processAppStateChanged:", CFSTR("com.apple.LaunchServices.applicationRegistered"), 0);
    objc_msgSend(v7, "addObserver:selector:name:object:", a1, "processAppStateChanged:", CFSTR("com.apple.LaunchServices.applicationStateChanged"), 0);
    objc_msgSend(v7, "addObserver:selector:name:object:", a1, "processAppStateChanged:", CFSTR("com.apple.LaunchServices.applicationUnregistered"), 0);
    *(_BYTE *)(a1 + 49) = 1;
    v3 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v3, 0);

    if (IsLevelEnabled)
    {
      v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v5);
      _NRLogWithArgs(v6, 0, "%s%.30s:%-4d started monitoring for LS events", "", "-[NRDDeviceConductor startMonitoringLSAppEvents]", 4004);

    }
  }
}

void sub_1000EA9A0(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int IsLevelEnabled;
  uint64_t v56;
  void *v57;
  int v58;
  uint64_t v59;
  void *v60;
  id v61;
  id *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  int v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  void *v73;
  __int128 v74;
  id v75;
  _QWORD v76[3];
  _QWORD v77[3];
  _QWORD v78[3];
  _QWORD v79[3];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (!*(_BYTE *)(a1 + 38) && !*(_BYTE *)(a1 + 46))
  {
    v2 = objc_alloc_init((Class)NSMutableArray);
    objc_opt_self(NRDLocalDevice);
    v3 = sub_10014CFBC();
    dispatch_assert_queue_V2(v3);

    v74 = xmmword_10015D090;
    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v74, 16);
    v5 = sub_100133E24((uint64_t)NRDLocalDevice, v4, CFSTR("0"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v6, 64));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 58));
    v79[0] = v7;
    v79[1] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v79[2] = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v79, 3));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 220));
    v12 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 200, v11, v10);
    objc_opt_self(NRDPolicySessionManager);
    v73 = v2;
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v13 = (id)qword_1001E4A18;
    v14 = sub_100127310((uint64_t)v13, *(void **)(a1 + 272), v12);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    objc_msgSend(v73, "addObject:", v15);
    objc_opt_self(NRDLocalDevice);
    v16 = sub_10014CFBC();
    dispatch_assert_queue_V2(v16);

    v74 = xmmword_10015D090;
    v17 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v74, 16);
    v18 = sub_100133E24((uint64_t)NRDLocalDevice, v17, CFSTR("0"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:", v19, 64));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
    v78[0] = v20;
    v78[1] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v78[2] = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v78, 3));

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 220));
    v25 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 200, v24, v23);
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v26 = (id)qword_1001E4A18;
    v27 = sub_100127310((uint64_t)v26, *(void **)(a1 + 272), v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

    objc_msgSend(v73, "addObject:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition requiredAgentDomain:agentType:](NEPolicyCondition, "requiredAgentDomain:agentType:", CFSTR("com.apple.networkrelay"), CFSTR("ASListener")));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
    v77[0] = v29;
    v77[1] = v30;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v77[2] = v31;
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v77, 3));

    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 220));
    v34 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 200, v33, v32);
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v35 = (id)qword_1001E4A18;
    v36 = sub_100127310((uint64_t)v35, *(void **)(a1 + 272), v34);
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

    objc_msgSend(v73, "addObject:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition requiredAgentDomain:agentType:](NEPolicyCondition, "requiredAgentDomain:agentType:", CFSTR("com.apple.networkrelay"), CFSTR("ASResolver")));
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
    v76[0] = v38;
    v76[1] = v39;
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v76[2] = v40;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v76, 3));

    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 220));
    v43 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 200, v42, v41);
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v44 = (id)qword_1001E4A18;
    v45 = sub_100127310((uint64_t)v44, *(void **)(a1 + 272), v43);
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);

    objc_msgSend(v73, "addObject:", v46);
    v47 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("4946eeba-8277-69b4-e898-d635c8fde872"));
    v75 = v47;
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v75, 1));
    sub_1000EB1FC(a1, v48, v73, CFSTR("4946eeba-8277-69b4-e898-d635c8fde872"));

    if (_NRIsAppleInternal(v49))
    {
      v50 = sub_1001078CC(CFSTR("com.apple.Home"));
      v51 = objc_msgSend(v50, "count");
      v53 = _NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v52);
      v54 = (void *)v53;
      if (v51)
      {
        IsLevelEnabled = _NRLogIsLevelEnabled(v53, 0);

        if (IsLevelEnabled)
        {
          v57 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v56);
          v72 = "";
          _NRLogWithArgs(v57, 0, "%s%.30s:%-4d UUIDs for '%s': %@");

        }
        sub_1000EB1FC(a1, v50, v73, CFSTR("com.apple.Home"));
      }
      else
      {
        v58 = _NRLogIsLevelEnabled(v53, 16);

        if (v58)
        {
          v60 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v59);
          _NRLogWithArgs(v60, 16, "%s%.30s:%-4d Failed to retrieve UUIDs for '%s' (may not be installed)", "", "-[NRDDeviceConductor setPermittedClientPolicies]", 3354, "com.apple.Home");

        }
      }

    }
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v61 = (id)qword_1001E4A18;
    v62 = (id *)v61;
    if (v61)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v61 + 1));
      if ((objc_msgSend(v62[2], "apply") & 1) == 0)
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v63, v64, v65, (uint64_t)v72);
    }

    v66 = *(_QWORD *)(a1 + 240);
    *(_BYTE *)(a1 + 38) = 1;
    objc_msgSend(v73, "addObjectsFromArray:", v66);
    objc_storeStrong((id *)(a1 + 240), v73);
    v68 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v67);
    v69 = _NRLogIsLevelEnabled(v68, 0);

    if (v69)
    {
      v71 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v70);
      _NRLogWithArgs(v71, 0, "%s%.30s:%-4d Added permitted client policies", "", "-[NRDDeviceConductor setPermittedClientPolicies]", 3369);

    }
  }
}

void sub_1000EB1FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  int IsLevelEnabled;
  uint64_t v22;
  id v23;
  id v24;
  id obj;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _BYTE v33[128];

  v6 = a2;
  v27 = a3;
  v24 = a4;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v29;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v29 != v9)
          objc_enumerationMutation(obj);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v10)));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v32[0] = v12;
        v32[1] = v11;
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v32, 2));

        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 220));
        v16 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 200, v14, v13);
        if (v16)
        {
          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v17 = (id)qword_1001E4A18;
          v18 = sub_100127310((uint64_t)v17, *(void **)(a1 + 272), v16);
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

          objc_msgSend(v27, "addObject:", v19);
          goto LABEL_10;
        }
        v20 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v15);
        IsLevelEnabled = _NRLogIsLevelEnabled(v20, 17);

        if (IsLevelEnabled)
        {
          v19 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v22);
          _NRLogWithArgs(v19, 17, "Failed to create effective application policy for %@", v24);
LABEL_10:

        }
        if (!v16)
          goto LABEL_17;
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      v8 = v23;
    }
    while (v23);
  }
LABEL_17:

}

void sub_1000EB484(uint64_t a1, void *a2)
{
  id v3;
  char *v4;
  id *v5;
  id v6;
  unsigned __int8 v7;
  id *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  unsigned __int8 v16;
  void *v17;
  id v18;
  void *v19;
  char v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  int IsLevelEnabled;
  id v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;

  v3 = a2;
  v4 = sub_10012FFF4((uint64_t)NRDLocalDevice, v3);
  if (!v4)
  {
    v25 = sub_1000D5594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v25, 16);

    if (IsLevelEnabled)
    {
      v27 = sub_1000D5594();
      _NRLogWithArgs(v27, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: localDevice", "", "-[NRDDeviceConductor updateProxyAgentForNRUUID:]", 7886);

    }
    v28 = _os_log_pack_size(12);
    v29 = (char *)&v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = __error();
    v31 = _os_log_pack_fill(v29, v28, *v30, &_mh_execute_header, "%{public}s Assertion Failed: localDevice");
    *(_DWORD *)v31 = 136446210;
    *(_QWORD *)(v31 + 4) = "-[NRDDeviceConductor updateProxyAgentForNRUUID:]";
    v32 = sub_1000D5594();
    _NRLogAbortWithPack(v32, v29);
  }
  v5 = (id *)v4;
  if (sub_10010E128(v4))
  {
    v6 = v5[16];
    v7 = objc_msgSend(v6, "hasPoliciesForProxyCriteria");

    if ((v7 & 1) == 0)
    {
      v8 = (id *)(a1 + 456);
      v9 = *(id *)(a1 + 456);
      if (!v9)
        goto LABEL_7;
      v10 = v9;
      v11 = *v8;
      v12 = v5[12];
      if (v11 == v12)
      {

        goto LABEL_14;
      }
      v13 = v12;
      v14 = *v8;
      v15 = v5[12];
      v16 = objc_msgSend(v14, "isEqual:", v15);

      if ((v16 & 1) == 0)
      {
LABEL_7:
        sub_1000EB798(a1);
        objc_storeStrong((id *)(a1 + 456), v5[12]);
        if (*(_QWORD *)(a1 + 456))
        {
          v34 = 0;
          v35 = 0;
          v33 = 0;
          v17 = (void *)NEVirtualInterfaceCopyName(*(_QWORD *)(a1 + 448));
          v18 = *(id *)(a1 + 456);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "description"));
          v20 = sub_10010F75C(v5, v18, v17, &v34, &v35, &v33, v19);

          if ((v20 & 1) != 0)
          {
            v21 = v34;
            objc_storeStrong((id *)(a1 + 464), v34);
            v22 = v35;
            objc_storeStrong((id *)(a1 + 472), v35);
            objc_storeStrong((id *)(a1 + 480), v33);
            if (*(_QWORD *)(a1 + 480))
              v23 = sub_100110B34(v22, v17, *(void **)(a1 + 544));
          }
          else
          {
            v24 = *(void **)(a1 + 456);
            *(_QWORD *)(a1 + 456) = 0;

            v21 = v34;
            objc_storeStrong((id *)(a1 + 464), v34);
            v22 = v35;
            objc_storeStrong((id *)(a1 + 472), v35);
            objc_storeStrong((id *)(a1 + 480), v33);
          }

        }
      }
    }
  }
LABEL_14:

}

void sub_1000EB798(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v2 = *(void **)(a1 + 464);
  if (v2)
  {
    objc_msgSend(v2, "unregisterNetworkAgent");
    v3 = *(void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = 0;

  }
  if (*(_QWORD *)(a1 + 480))
  {
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v4 = (id)qword_1001E4A18;
    sub_100127618((uint64_t)v4, *(void **)(a1 + 544));

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v5 = (id)qword_1001E4A18;
    v6 = (id *)v5;
    if (v5)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 1));
      if ((objc_msgSend(v6[2], "apply") & 1) == 0)
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v7, v8, v9, v13);
    }

    nw_proxy_config_unpublish(*(_QWORD *)(a1 + 480));
    v10 = *(void **)(a1 + 480);
    *(_QWORD *)(a1 + 480) = 0;

    if (qword_1001E4798 != -1)
      dispatch_once(&qword_1001E4798, &stru_1001B7628);
    if (_NRLogIsLevelEnabled(qword_1001E4790, 2))
    {
      if (qword_1001E4798 != -1)
        dispatch_once(&qword_1001E4798, &stru_1001B7628);
      _NRLogWithArgs(qword_1001E4790, 2, "%s%.30s:%-4d unregistered MASQUE proxy agent", "", "-[NRDDeviceConductor unregisterProxyAgent]", 7865);
    }
  }
  v11 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;

  v12 = *(void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;

}

void sub_1000EB96C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  void *v8;
  id v9;

  if (*(_QWORD *)(a1 + 448))
  {
    sub_1000EB798(a1);
    sub_1000E3034(a1);
    v9 = (id)NEVirtualInterfaceCopyName(*(_QWORD *)(a1 + 448));
    NEVirtualInterfaceInvalidate(*(_QWORD *)(a1 + 448), v2);
    v4 = *(const void **)(a1 + 448);
    if (v4)
      CFRelease(v4);
    *(_QWORD *)(a1 + 448) = 0;
    *(_BYTE *)(a1 + 58) = 0;
    v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

    if (IsLevelEnabled)
    {
      v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v7);
      _NRLogWithArgs(v8, 0, "%s%.30s:%-4d Removed catch-all interface (%@)", "", "-[NRDDeviceConductor removeCatchAllInterface]", 7714, v9);

    }
  }
}

void sub_1000EBA50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  id v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(_QWORD *)(v3 + 96);
  else
    v4 = 0;
  v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

  if (IsLevelEnabled)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 96);
    else
      v9 = 0;
    v10 = _NRCopyLogObjectForNRUUID(v9, v7);
    v12 = (id)v10;
    if (*(_BYTE *)(a1 + 40))
      v11 = "enable";
    else
      v11 = "disable";
    _NRLogWithArgs(v10, 0, "%s%.30s:%-4d Re-sent prefer wi-fi: %s", "", "-[NRDDeviceConductor linkIsAvailable:]_block_invoke", 5390, v11);

  }
}

void sub_1000EBB28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  int v27;
  id v28;
  void *v29;
  unsigned int v30;
  _QWORD v31[5];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && *(_BYTE *)(v2 + 14))
  {
    *(_BYTE *)(v2 + 51) = 0;
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      v5 = *(_QWORD *)(v4 + 96);
    else
      v5 = 0;
    v6 = (void *)_NRCopyLogObjectForNRUUID(v5, a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v6, 0);

    if (IsLevelEnabled)
    {
      v8 = *(_QWORD **)(a1 + 32);
      if (v8)
        v8 = (_QWORD *)v8[12];
      v9 = v8;
      v11 = _NRCopyLogObjectForNRUUID(v9, v10);
      v12 = (void *)v11;
      v13 = *(_QWORD *)(a1 + 32);
      if (v13)
      {
        v14 = *(unsigned __int8 *)(v13 + 15);
        LODWORD(v13) = *(unsigned __int8 *)(v13 + 26);
      }
      else
      {
        v14 = 0;
      }
      _NRLogWithArgs(v11, 0, "%s%.30s:%-4d attempting to send request %d %d ", "", "-[NRDDeviceConductor linkIsAvailable:]_block_invoke_2", 5461, v14, v13);

    }
    v15 = *(_QWORD *)(a1 + 32);
    if (v15 && (*(_BYTE *)(v15 + 15) || *(_BYTE *)(v15 + 26)))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v15 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v16 = (id)qword_1001E4708;
      v17 = v16;
      if (v16)
        v18 = (void *)*((_QWORD *)v16 + 6);
      else
        v18 = 0;
      v19 = v18;

      if (v19)
        v20 = (void *)v19[7];
      else
        v20 = 0;
      v21 = v20;

      if (v21)
        goto LABEL_21;
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v23 = (id)qword_1001E4708;
      v24 = v23;
      v25 = v23 ? (void *)*((_QWORD *)v23 + 12) : 0;
      v26 = v25;
      v27 = sub_100061594((uint64_t)v26, 0);

      if (v27)
      {
        v28 = sub_1000D8AA8(*(_QWORD *)(a1 + 32), 2, 102);
        if (v28)
        {
          v29 = v28;
          v30 = objc_msgSend(v28, "state");

          if (v30 != 255)
          {
LABEL_21:
            v22 = *(_QWORD *)(a1 + 32);
            v31[0] = _NSConcreteStackBlock;
            v31[1] = 3221225472;
            v31[2] = sub_1000EBDA0;
            v31[3] = &unk_1001B8AE0;
            v31[4] = v22;
            sub_1000D78EC(v22, 1, 1, 0, 0, v31);
          }
        }
      }
    }
  }
}

uint64_t sub_1000EBDA0(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    *(_BYTE *)(v1 + 26) = 0;
  return result;
}

_QWORD *sub_1000EBDB0(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  if (result)
  {
    v1 = result;
    if (*((_BYTE *)result + 12))
    {
      v2 = (void *)result[26];
      if (v2)
        return objc_msgSend(v2, "trackNOIAnyForInterfaceType:options:", 1, 0);
      v3 = objc_alloc_init((Class)NWNetworkOfInterestManager);
      v4 = (void *)v1[26];
      v1[26] = v3;

      v5 = (void *)v1[26];
      if (v5)
      {
        v6 = v1[13];
        v7 = v5;
        objc_msgSend(v7, "setQueue:", v6);

        objc_msgSend((id)v1[26], "setDelegate:", v1);
        v2 = (void *)v1[26];
        return objc_msgSend(v2, "trackNOIAnyForInterfaceType:options:", 1, 0);
      }
      if (qword_1001E4798 != -1)
        dispatch_once(&qword_1001E4798, &stru_1001B7628);
      result = (_QWORD *)_NRLogIsLevelEnabled(qword_1001E4790, 17);
      if ((_DWORD)result)
      {
        if (qword_1001E4798 != -1)
          dispatch_once(&qword_1001E4798, &stru_1001B7628);
        return (_QWORD *)_NRLogWithArgs(qword_1001E4790, 17, "[[NWNetworkOfInterestManager alloc] init] failed");
      }
    }
  }
  return result;
}

void sub_1000EBEC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  id v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = objc_opt_class(NRDNSProxyServer);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0
      || (v8 = objc_opt_class(NRDiscoveryProxyServer), (objc_opt_isKindOfClass(v5, v8) & 1) != 0))
    {
      v21 = 0;
      if (!v5 || *((_BYTE *)v5 + 8) != 2)
      {
        v16 = &v21;
        v17 = v6;
        v18 = 1;
        v19 = 1;
        goto LABEL_11;
      }
      v21 = 1;
      v9 = *((id *)v5 + 3);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "port"));
      v11 = sub_10010A268(v9, (unsigned __int16)objc_msgSend(v10, "intValue"), 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

      NRTLVAddData(v6, 2);
      v13 = *((_DWORD *)v5 + 4);
      v14 = *((id *)v5 + 4);

      if (v14)
      {
        v15 = *((id *)v5 + 4);
        NRTLVAddData(v6, 4);

      }
      NRTLVAdd(v6, 1, 1, &v21);
      if (v13 == 1)
      {
        v20 = 0x200000000000000;
        v16 = (char *)&v20;
        v17 = v6;
        v18 = 3;
        v19 = 8;
LABEL_11:
        NRTLVAdd(v17, v18, v19, v16);
      }
    }
  }

}

void sub_1000EC044(uint64_t a1)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 552), 0);
}

void sub_1000EC058(uint64_t a1)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 576), 0);
}

void sub_1000EC06C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  int IsLevelEnabled;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && *(_BYTE *)(v2 + 14) && *(_BYTE *)(v2 + 49))
  {
    v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v2 + 96), a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 0);

    if (IsLevelEnabled)
    {
      v6 = *(_QWORD **)(a1 + 32);
      if (v6)
        v6 = (_QWORD *)v6[12];
      v7 = v6;
      v9 = (void *)_NRCopyLogObjectForNRUUID(v7, v8);
      _NRLogWithArgs(v9, 0, "%s%.30s:%-4d received notification: %@", "", "-[NRDDeviceConductor processAppStateChanged:]_block_invoke", 4013, *(_QWORD *)(a1 + 40));

    }
    sub_1000E7D54(*(_QWORD *)(a1 + 32));
  }
}

char *sub_1000EC13C(char *a1, void *a2, void *a3)
{
  id *v3;
  id v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  __CFString *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  __CFString *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  __CFString *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  __CFString *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  __CFString *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  __CFString *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  __CFString *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  int v64;
  uint64_t v65;
  void *v66;
  void *v67;
  char *v68;
  id v70;
  int IsLevelEnabled;
  id v72;
  id v73;
  int v74;
  id v75;
  int v76;
  id v77;
  int *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  objc_super v82;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!a1)
    goto LABEL_19;
  if (!v7)
  {
    v70 = sub_1000D5594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v70, 17);

    if (IsLevelEnabled)
    {
      v72 = sub_1000D5594();
      _NRLogWithArgs(v72, 17, "%s called with null nrUUID");
LABEL_18:

      v68 = 0;
      goto LABEL_13;
    }
LABEL_19:
    v68 = 0;
    goto LABEL_13;
  }
  if (!v8)
  {
    v73 = sub_1000D5594();
    v74 = _NRLogIsLevelEnabled(v73, 17);

    if (v74)
    {
      v72 = sub_1000D5594();
      _NRLogWithArgs(v72, 17, "%s called with null queue");
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v82.receiver = a1;
  v82.super_class = (Class)NRDDeviceConductor;
  v10 = (char *)objc_msgSendSuper2(&v82, "init");
  if (!v10)
  {
    v75 = sub_1000D5594();
    v76 = _NRLogIsLevelEnabled(v75, 16);

    v11 = "-[NRDDeviceConductor initConductorWithNRUUID:queue:]";
    if (v76)
    {
      v77 = sub_1000D5594();
      _NRLogWithArgs(v77, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDDeviceConductor initConductorWithNRUUID:queue:]", 303);

    }
    v7 = (id)_os_log_pack_size(12);
    v9 = (char *)&v81 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v78 = __error();
    v79 = _os_log_pack_fill(v9, v7, *v78, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v79 = 136446210;
    *(_QWORD *)(v79 + 4) = "-[NRDDeviceConductor initConductorWithNRUUID:queue:]";
    v80 = sub_1000D5594();
    _NRLogAbortWithPack(v80, v9);
    goto LABEL_23;
  }
  v11 = v10;
  v3 = (id *)(v10 + 96);
  objc_storeStrong((id *)v10 + 12, a2);
  objc_storeStrong((id *)v11 + 13, a3);
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v11 + 13));
  v12 = (void *)*((_QWORD *)v11 + 26);
  *((_QWORD *)v11 + 26) = 0;

  v13 = objc_alloc_init((Class)NSMutableSet);
  v14 = (void *)*((_QWORD *)v11 + 14);
  *((_QWORD *)v11 + 14) = v13;

  v11[14] = 0;
  v15 = objc_alloc_init((Class)NSMutableSet);
  v16 = (void *)*((_QWORD *)v11 + 21);
  *((_QWORD *)v11 + 21) = v15;

  v17 = objc_alloc_init((Class)NSMutableSet);
  v18 = (void *)*((_QWORD *)v11 + 19);
  *((_QWORD *)v11 + 19) = v17;

  v19 = objc_alloc_init((Class)NSMutableSet);
  v20 = (void *)*((_QWORD *)v11 + 22);
  *((_QWORD *)v11 + 22) = v19;

  v21 = objc_alloc_init((Class)NSMutableArray);
  v22 = (void *)*((_QWORD *)v11 + 30);
  *((_QWORD *)v11 + 30) = v21;

  v11[25] = 1;
  v11[39] = 1;
  v23 = CFSTR("Policy");
  v24 = objc_alloc((Class)NSString);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v26 = objc_msgSend(v24, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v25, CFSTR("Policy"));

  v27 = (void *)*((_QWORD *)v11 + 34);
  *((_QWORD *)v11 + 34) = v26;

  v28 = CFSTR("NetInfo");
  v29 = objc_alloc((Class)NSString);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v31 = objc_msgSend(v29, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v30, CFSTR("NetInfo"));

  v32 = (void *)*((_QWORD *)v11 + 35);
  *((_QWORD *)v11 + 35) = v31;

  v33 = CFSTR("CmpnNWDesc");
  v34 = objc_alloc((Class)NSString);
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v36 = objc_msgSend(v34, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v35, CFSTR("CmpnNWDesc"));

  v37 = (void *)*((_QWORD *)v11 + 36);
  *((_QWORD *)v11 + 36) = v36;

  v38 = CFSTR("CmpnLnkMon");
  v39 = objc_alloc((Class)NSString);
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v41 = objc_msgSend(v39, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v40, CFSTR("CmpnLnkMon"));

  v42 = (void *)*((_QWORD *)v11 + 67);
  *((_QWORD *)v11 + 67) = v41;

  v43 = CFSTR("flowDivert");
  v44 = objc_alloc((Class)NSString);
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v46 = objc_msgSend(v44, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v45, CFSTR("flowDivert"));

  v47 = (void *)*((_QWORD *)v11 + 37);
  *((_QWORD *)v11 + 37) = v46;

  v48 = CFSTR("cmpnAgentRemoval");
  v49 = objc_alloc((Class)NSString);
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v51 = objc_msgSend(v49, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v50, CFSTR("cmpnAgentRemoval"));

  v52 = (void *)*((_QWORD *)v11 + 39);
  *((_QWORD *)v11 + 39) = v51;

  v53 = CFSTR("proxyConfig");
  v54 = objc_alloc((Class)NSString);
  v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v11 + 12), "UUIDString"));
  v56 = objc_msgSend(v54, "initWithFormat:", CFSTR("NRDDC-%@-%@"), v55, CFSTR("proxyConfig"));

  v57 = (void *)*((_QWORD *)v11 + 68);
  *((_QWORD *)v11 + 68) = v56;

  objc_opt_self(NRLinkDirectorMessageManager);
  if (qword_1001E45A0 != -1)
LABEL_23:
    dispatch_once(&qword_1001E45A0, &stru_1001B6438);
  v58 = (id)qword_1001E4598;
  v59 = *v3;
  if (v58)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v58 + 1));
    v60 = objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v58 + 2), "objectForKeyedSubscript:", v59));
    if (v60)
    {
      v62 = (id)v60;
      v63 = (void *)_NRCopyLogObjectForNRUUID(v59, v61);
      v64 = _NRLogIsLevelEnabled(v63, 17);

      if (v64)
      {
        v66 = (void *)_NRCopyLogObjectForNRUUID(v59, v65);
        _NRLogWithArgs(v66, 17, "registering uuid when already registered");

      }
    }
    else
    {
      v62 = objc_alloc_init((Class)NSMutableDictionary);
      objc_msgSend(*((id *)v58 + 2), "setObject:forKeyedSubscript:", v62, v59);
    }

  }
  v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "description"));
  sub_100121E18(*((void **)v11 + 12), 1500, 0, v67);

  a1 = v11;
  v68 = a1;
LABEL_13:

  return v68;
}

void sub_1000EC79C(id val)
{
  void *v2;
  NSObject *v3;
  _QWORD block[5];
  id v5;
  id location;

  if (!*((_BYTE *)val + 10)
    && (!*((_BYTE *)val + 48) || _os_feature_enabled_impl("terminus", "CompanionLinkAWDL")))
  {
    objc_initWeak(&location, val);
    v2 = (void *)*((_QWORD *)val + 13);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EC864;
    block[3] = &unk_1001B87F0;
    block[4] = val;
    v3 = v2;
    objc_copyWeak(&v5, &location);
    dispatch_async(v3, block);

    objc_destroyWeak(&v5);
    objc_destroyWeak(&location);
  }
}

void sub_1000EC864(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;

  objc_opt_self(NRLinkManagerWiFi);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 10) = 1;
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000EC958;
  v3[3] = &unk_1001B7F28;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  sub_1000AEC6C((uint64_t)v2, v3);

  objc_destroyWeak(&v4);
}

void sub_1000EC944(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000EC958(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id *v10;
  NSObject *v11;
  id v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((_BYTE *)WeakRetained + 14))
  {
    v12 = WeakRetained;
    v3 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)WeakRetained + 12), v2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v3, 0);

    if (IsLevelEnabled)
    {
      v6 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v12 + 12), v5);
      _NRLogWithArgs(v6, 0, "%s%.30s:%-4d starting AWDL manager", "", "-[NRDDeviceConductor setSupportsAWDL:]_block_invoke_2", 372);

    }
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v12 + 13));
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v7 = (id)qword_1001E4708;
    v8 = v7;
    if (v7)
      v9 = (void *)*((_QWORD *)v7 + 6);
    else
      v9 = 0;
    v10 = v9;

    if (v10)
    {
      v11 = v10[3];
      dispatch_assert_queue_V2(v11);

      if (!*((_BYTE *)v10 + 36) && *((_DWORD *)v10 + 3) != 1004)
      {
        *((_BYTE *)v10 + 36) = 1;
        sub_10014953C((uint64_t)v10, 1);
      }
    }

    WeakRetained = v12;
  }

}

void sub_1000ECAAC(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  BOOL v21;
  char v22;
  char *v23;
  id v24;
  id v25;
  BOOL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  BOOL v31;
  id v32;
  void *v33;
  unsigned int v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  unsigned int v40;
  id v41;
  unsigned int v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  unsigned int v49;
  id v50;
  int v51;
  int v52;
  char v53;
  char v54;
  char *v55;
  char v56;
  char v57;
  BOOL v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  id v72;
  int IsLevelEnabled;
  id v74;
  uint64_t v75;
  char *v76;
  int *v77;
  uint64_t v78;
  id v79;
  char *v80;

  v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!v2)
  {
    v72 = sub_1000D5594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v72, 16);

    if (IsLevelEnabled)
    {
      v74 = sub_1000D5594();
      _NRLogWithArgs(v74, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "-[NRDDeviceConductor updateOperatingMode]", 382);

    }
    v75 = _os_log_pack_size(12);
    v76 = (char *)&v80 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
    v77 = __error();
    v78 = _os_log_pack_fill(v76, v75, *v77, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v78 = 136446210;
    *(_QWORD *)(v78 + 4) = "-[NRDDeviceConductor updateOperatingMode]";
    v79 = sub_1000D5594();
    _NRLogAbortWithPack(v79, v76);
  }
  v80 = v2;
  v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v3);
  v5 = _NRLogIsLevelEnabled(v4, 0);

  if (v5)
  {
    v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v6);
    v8 = *((id *)v80 + 16);
    _NRLogWithArgs(v7, 0, "%s%.30s:%-4d starting with operational properties: %@", "", "-[NRDDeviceConductor updateOperatingMode]", 384, v8);

  }
  v9 = *((id *)v80 + 16);

  if (!v9)
  {
    *(_WORD *)(a1 + 54) = 257;
    *(_BYTE *)(a1 + 48) = 1;
    *(_BYTE *)(a1 + 57) = 1;
    *(_WORD *)(a1 + 44) = 257;
    *(_WORD *)(a1 + 8) = 257;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 46);
    sub_1000EC79C((id)a1);

    return;
  }
  v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v10);
  v12 = _NRLogIsLevelEnabled(v11, 0);

  if (v12)
  {
    v14 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v13);
    v15 = *((id *)v80 + 16);
    _NRLogWithArgs(v14, 0, "%s%.30s:%-4d retrieved operational properties: %@", "", "-[NRDDeviceConductor updateOperatingMode]", 412, v15);

  }
  v16 = *((id *)v80 + 16);
  if (objc_msgSend(v16, "proxyCapability") == (id)1)
  {

LABEL_11:
    v19 = *((id *)v80 + 16);
    v20 = objc_msgSend(v19, "proxyCapability");
LABEL_12:
    v21 = v20 == (id)1;
LABEL_13:
    v22 = v21;
    *(_BYTE *)(a1 + 57) = v22;
    goto LABEL_17;
  }
  v17 = *((id *)v80 + 16);
  v18 = objc_msgSend(v17, "proxyCapability");

  if (v18 == (id)2)
    goto LABEL_11;
  v59 = *((id *)v80 + 16);
  if (objc_msgSend(v59, "bluetoothRole") == (id)1)
  {

LABEL_72:
    v19 = *((id *)v80 + 16);
    v20 = objc_msgSend(v19, "bluetoothRole");
    goto LABEL_12;
  }
  v60 = *((id *)v80 + 16);
  v61 = objc_msgSend(v60, "bluetoothRole");

  if (v61 == (id)2)
    goto LABEL_72;
  v62 = *((id *)v80 + 16);
  if (objc_msgSend(v62, "bluetoothEndpointType") == (id)2)
  {

LABEL_76:
    v19 = *((id *)v80 + 16);
    v21 = objc_msgSend(v19, "bluetoothEndpointType") == (id)2;
    goto LABEL_13;
  }
  v63 = *((id *)v80 + 16);
  v64 = objc_msgSend(v63, "bluetoothEndpointType");

  if (v64 == (id)1)
    goto LABEL_76;
  v65 = (void *)sub_10013D1BC(v80);
  v66 = (void *)sub_10013D284(v80);
  v67 = objc_msgSend(v65, "compare:", v66);

  if (v67 == (id)-1)
  {
    *(_BYTE *)(a1 + 57) = 1;
    goto LABEL_18;
  }
  v69 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v68);
  v70 = _NRLogIsLevelEnabled(v69, 17);

  v23 = v80;
  if (v70)
  {
    v19 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v71);
    _NRLogWithArgs(v19, 17, "unable to determine link follower");
LABEL_17:

LABEL_18:
    v23 = v80;
  }
  *(_BYTE *)(a1 + 48) = sub_100137E98((_BOOL8)v23);
  *(_BYTE *)(a1 + 39) = sub_1000D5DBC(a1);
  v24 = *((id *)v80 + 16);
  *(_BYTE *)(a1 + 43) = objc_msgSend(v24, "handlesLinkRecommendations");

  v25 = *((id *)v80 + 16);
  if (objc_msgSend(v25, "isReachableOverWiFi"))
    v26 = *(_BYTE *)(a1 + 57) != 0;
  else
    v26 = 0;
  *(_BYTE *)(a1 + 44) = v26;

  v27 = *((id *)v80 + 16);
  *(_BYTE *)(a1 + 47) = objc_msgSend(v27, "allowsDirectToCloud");

  v28 = *((id *)v80 + 16);
  *(_BYTE *)(a1 + 45) = objc_msgSend(v28, "proxyCapability") == (id)1;

  v29 = *((id *)v80 + 16);
  *(_BYTE *)(a1 + 46) = objc_msgSend(v29, "proxyCapability") == (id)2;

  v30 = *((id *)v80 + 16);
  if (objc_msgSend(v30, "isReachableOverWiFi"))
    v31 = *(_BYTE *)(a1 + 45) != 0;
  else
    v31 = 0;
  *(_BYTE *)(a1 + 8) = v31;

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 46);
  v32 = *((id *)v80 + 16);
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "allowedLinkSubtypes"));
  v34 = objc_msgSend(v33, "containsObject:", &off_1001C4780);

  if (v34)
    sub_1000EC79C((id)a1);
  v35 = *((id *)v80 + 16);
  v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "allowedLinkTypes"));
  if (!v36)
  {

    goto LABEL_31;
  }
  v37 = (void *)v36;
  v38 = *((id *)v80 + 16);
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "allowedLinkTypes"));
  v40 = objc_msgSend(v39, "containsObject:", &off_1001C4798);

  if (v40)
  {
LABEL_31:
    *(_BYTE *)(a1 + 9) = 1;
    *(_BYTE *)(a1 + 54) = 1;
  }
  v41 = *((id *)v80 + 16);
  v42 = objc_msgSend(v41, "version");

  if (v42)
  {
    v43 = *((id *)v80 + 16);
    *(_BYTE *)(a1 + 9) = objc_msgSend(v43, "providesPhoneCallRelaySupport");

  }
  v44 = *((id *)v80 + 16);
  v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "allowedLinkTypes"));
  if (v45)
  {
    v46 = (void *)v45;
    v47 = *((id *)v80 + 16);
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "allowedLinkTypes"));
    v49 = objc_msgSend(v48, "containsObject:", &off_1001C47B0);

    if (!v49)
      goto LABEL_39;
  }
  else
  {

  }
  *(_BYTE *)(a1 + 55) = 1;
LABEL_39:
  objc_opt_self(NRLinkManagerQuickRelay);
  if (!objc_opt_class(IDSService) || !objc_opt_class(APSConnection))
    *(_BYTE *)(a1 + 55) = 0;
  if (*(_BYTE *)(a1 + 46))
  {
    v50 = *((id *)v80 + 16);
    if ((objc_msgSend(v50, "requiresReachability") & 1) != 0)
    {
      v51 = *(unsigned __int8 *)(a1 + 48);

      if (!v51)
        *(_BYTE *)(a1 + 60) = 1;
    }
    else
    {

    }
  }
  sub_1000E3DB8(a1);
  if (objc_opt_class(NWNetworkOfInterestManager) && *(_BYTE *)(a1 + 48))
  {
    v52 = *(unsigned __int8 *)(a1 + 46);
    *(_BYTE *)(a1 + 12) = v52;
    if (v52)
      v53 = _os_feature_enabled_impl("terminus", "CompanionLinkAutoUpgrade");
    else
      v53 = 0;
  }
  else
  {
    v53 = 0;
    *(_BYTE *)(a1 + 12) = 0;
  }
  *(_BYTE *)(a1 + 13) = v53;
  if (*(_BYTE *)(a1 + 48))
    v54 = _os_feature_enabled_impl("terminus", "DiscoveryProxy");
  else
    v54 = 0;
  *(_BYTE *)(a1 + 62) = v54;
  v55 = v80;
  if (v80[15])
  {
    v56 = 1;
    if (v80[12])
    {
LABEL_57:
      v57 = v56 ^ 1;
      if (!v80[13])
        v57 = 1;
      goto LABEL_67;
    }
  }
  else
  {
    if (v80[14])
      v58 = 1;
    else
      v58 = *((unsigned __int16 *)v80 + 14) > 0x12u;
    v56 = v58;
    if (v80[12])
      goto LABEL_57;
  }
  v57 = 1;
LABEL_67:
  *(_BYTE *)(a1 + 69) = v57;

}

void sub_1000ED294(uint64_t a1)
{
  id v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000EE3A0;
  v4[3] = &unk_1001B8778;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  sub_1000AEC6C((uint64_t)v2, v4);

}

void sub_1000ED350(uint64_t a1)
{
  id v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000EE234;
  v4[3] = &unk_1001B8778;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  sub_1000AEC6C((uint64_t)v2, v4);

}

void sub_1000ED40C(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  int v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void **v29;
  id v30;
  char IsLevelEnabled;
  id v32;
  void *v33;
  void **v34;
  char *v35;
  char *v36;
  void *v37;
  id v38;
  id v39;
  NRLinkDirectorRequest *v40;
  id *p_isa;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  const char *v46;
  id obj;
  _QWORD v48[5];
  _QWORD v49[4];
  id v50;
  id v51;
  id from;
  id location;
  void **newValue;
  uint64_t v55;
  void *v56;
  void *v57;
  void **v58;
  _BYTE *v59;
  id v60;
  id v61;
  void *v62;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 && *(_BYTE *)(v1 + 14))
  {
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v3 = (unsigned __int8 *)(id)qword_1001E4708;
    if (v3)
    {
      v4 = v3[8];

      if (v4)
      {
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v5 = (id)qword_1001E4708;
        v6 = v5;
        if (v5)
          v7 = (void *)*((_QWORD *)v5 + 9);
        else
          v7 = 0;
        v8 = v7;

        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v9 = (id)qword_1001E4708;
        v10 = v9;
        if (v9)
          v11 = (void *)*((_QWORD *)v9 + 10);
        else
          v11 = 0;
        v12 = v11;

        if (v8 && v12)
        {
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v13 = (id)qword_1001E4708;
          v14 = v13;
          if (v13)
            v15 = (void *)*((_QWORD *)v13 + 8);
          else
            v15 = 0;
          v16 = v15;
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v12, CFSTR("0")));
          v62 = v17;
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v62, 1));
          v19 = *(_QWORD *)(a1 + 32);
          if (v19)
            v20 = *(void **)(v19 + 96);
          else
            v20 = 0;
          sub_1000C9B6C((uint64_t)v16, v18, v8, v20);

        }
      }
    }
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v21 = (id)qword_1001E4708;
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_1000EDAE0;
    v48[3] = &unk_1001B8AE0;
    v48[4] = *(_QWORD *)(a1 + 32);
    sub_1000AEC6C((uint64_t)v21, v48);

    v22 = *(_QWORD *)(a1 + 32);
    if (v22 && *(_BYTE *)(v22 + 45) && *(_BYTE *)(v22 + 48) && !*(_QWORD *)(v22 + 488))
    {
      v23 = sub_100015D98([NRNetInfo alloc], *(void **)(v22 + 104));
      objc_initWeak(&location, (id)v22);
      objc_initWeak(&from, v23);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_1000EE1A4;
      v49[3] = &unk_1001B73E0;
      objc_copyWeak(&v50, &location);
      objc_copyWeak(&v51, &from);
      v24 = v49;
      v25 = v24;
      if (v23)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v23 + 6));
        if (!v23[10])
        {
          v26 = objc_retainBlock(v25);
          v27 = (void *)*((_QWORD *)v23 + 7);
          *((_QWORD *)v23 + 7) = v26;

        }
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v23 + 6));
        if (!v23[10])
        {
          objc_initWeak(&v61, v23);
          obj = (id)nw_path_create_evaluator_for_endpoint(0, 0);
          v28 = *((id *)v23 + 6);
          newValue = _NSConcreteStackBlock;
          v55 = 3221225472;
          v56 = sub_100016DFC;
          v57 = &unk_1001B6188;
          objc_copyWeak(&v60, &v61);
          v29 = (void **)obj;
          v58 = v29;
          v59 = v23;
          nw_path_evaluator_set_update_handler();

          nw_path_evaluator_start(v29);
          if (qword_1001E4528 != -1)
            dispatch_once(&qword_1001E4528, &stru_1001B6248);
          v30 = (id)qword_1001E4520;
          IsLevelEnabled = _NRLogIsLevelEnabled(v30, 0);

          if ((IsLevelEnabled & 1) != 0)
          {
            if (qword_1001E4528 != -1)
              dispatch_once(&qword_1001E4528, &stru_1001B6248);
            v32 = (id)qword_1001E4520;
            _NRLogWithArgs(v32, 0, "%s%.30s:%-4d started evaluator: %@", "", "-[NRNetInfo start]", 170, v29);

          }
          objc_storeStrong((id *)v23 + 9, obj);
          sub_10001730C((uint64_t)v23);

          objc_destroyWeak(&v60);
          objc_destroyWeak(&v61);
        }
      }
      else
      {

      }
      v33 = *(void **)(v22 + 488);
      *(_QWORD *)(v22 + 488) = v23;

      objc_destroyWeak(&v51);
      objc_destroyWeak(&v50);
      objc_destroyWeak(&from);
      objc_destroyWeak(&location);
      v22 = *(_QWORD *)(a1 + 32);
    }
    sub_1000E9B4C(v22);
    v34 = *(void ***)(a1 + 32);
    if (v34 && sub_1000D5F48((uint64_t)v34))
    {
      v35 = sub_10012FFF4((uint64_t)NRDLocalDevice, v34[12]);
      v36 = v35;
      if (v35)
        v37 = (void *)*((_QWORD *)v35 + 16);
      else
        v37 = 0;
      v38 = v37;
      v39 = objc_msgSend(v38, "activeOperationalScope");

      v40 = objc_alloc_init(NRLinkDirectorRequest);
      p_isa = (id *)&v40->super.isa;
      if (v40)
      {
        v42 = 2;
        if (!v39)
          v42 = 10;
        v40->_type = 6;
        *(_WORD *)&v40->_attemptImmediately = 1;
        v40->_timeout = v42;
        objc_storeStrong((id *)&v40->_timerDescription, CFSTR("start-device-discovery"));
      }
      if (v36)
        v43 = (void *)*((_QWORD *)v36 + 16);
      else
        v43 = 0;
      v44 = v43;
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "allowedLinkTypes"));
      if (p_isa)
        objc_storeStrong(p_isa + 2, v45);

      newValue = _NSConcreteStackBlock;
      v55 = 3221225472;
      v56 = sub_1000EE18C;
      v57 = &unk_1001B8AE0;
      v58 = v34;
      if (p_isa)
        objc_setProperty_nonatomic_copy(p_isa, v46, &newValue, 48);
      sub_1000D320C((uint64_t)v34, p_isa);

    }
  }
}

void sub_1000EDA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, uint64_t a15, id *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28,id a29)
{
  id *v29;
  uint64_t v30;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v30 - 128));
  objc_destroyWeak(v29);
  objc_destroyWeak(a16);
  objc_destroyWeak(&a28);
  objc_destroyWeak(&a29);
  _Unwind_Resume(a1);
}

void sub_1000EDAE0(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  id v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  id v15;
  void *v16;
  int v17;
  id v18;
  void *v19;
  unsigned int v20;
  __objc2_class *v21;
  id v22;
  void *v23;
  id v24;
  void *evaluator_for_endpoint;
  void *v26;
  uint64_t v27;
  void *v28;
  int v29;
  id v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  const char *name;
  const char *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  unsigned int v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  __CFString *v49;
  __CFString *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  id *v55;
  void *v56;
  id v57;
  void *v58;
  unsigned int v59;
  id v60;
  void *v61;
  unsigned int v62;
  void *v63;
  void *v64;
  void *v65;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 && *(_BYTE *)(v1 + 14))
  {
    v2 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(v1 + 96));
    v3 = v2;
    if (!v2)
      goto LABEL_67;
    v4 = *((id *)v2 + 16);

    if (!v4 || !v3[9])
      goto LABEL_67;
    if (v3[15])
    {
      v5 = 1;
      if (!v3[12])
        goto LABEL_19;
    }
    else
    {
      if (v3[14])
        v6 = 1;
      else
        v6 = *((unsigned __int16 *)v3 + 14) > 0x12u;
      v5 = v6;
      if (!v3[12])
        goto LABEL_19;
    }
    if (!v3[13])
      v5 = 0;
    if ((v5 & 1) != 0)
      goto LABEL_67;
LABEL_19:
    if (sub_100137E98((_BOOL8)v3))
    {
      if (qword_1001E4870 == -1)
      {
        if (!byte_1001E4868)
        {
LABEL_67:

          return;
        }
      }
      else
      {
        dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
        if (!byte_1001E4868)
          goto LABEL_67;
      }
    }
    v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v7);
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 0);

    if (IsLevelEnabled)
    {
      v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v10);
      _NRLogWithArgs(v11, 0, "%s%.30s:%-4d creating pairing links", "", "-[NRDDeviceConductor createPairingLinksIfNeeded]", 728);

    }
    if (qword_1001E4870 == -1)
    {
      if (byte_1001E4868)
      {
LABEL_26:
        v12 = v1;
        v13 = 5;
        v14 = 0;
LABEL_66:
        sub_1000D56B8(v12, v13, v14);
        goto LABEL_67;
      }
    }
    else
    {
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
      if (byte_1001E4868)
        goto LABEL_26;
    }
    v15 = *((id *)v3 + 16);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allowedLinkTypes"));
    if (objc_msgSend(v16, "containsObject:", &off_1001C4798) && v3[9] && v3[20])
    {
      v17 = v3[10];

      if (!v17)
        sub_1000D56B8(v1, 1u, 0);
    }
    else
    {

    }
    sub_1000D2EC0(v1);
    v18 = *((id *)v3 + 16);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "allowedLinkTypes"));
    v20 = objc_msgSend(v19, "containsObject:", &off_1001C47C8);

    v21 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
    if (v20)
    {
      v22 = *(id *)(v1 + 96);
      objc_opt_self(NRDLocalDevice);
      v23 = sub_10013D10C((uint64_t)NRDLocalDevice, v22, &off_1001C49A8);

      if (v23)
      {
        v24 = objc_msgSend(v23, "copyCEndpoint");
        evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint(v24, 0);

        v26 = (void *)nw_path_evaluator_copy_path(evaluator_for_endpoint);
        v28 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v1 + 96), v27);
        v29 = _NRLogIsLevelEnabled(v28, 0);

        if (v29)
        {
          v30 = *(id *)(v1 + 96);
          v32 = (void *)_NRCopyLogObjectForNRUUID(v30, v31);
          _NRLogWithArgs(v32, 0, "%s%.30s:%-4d path for wired endpoint %@ is %@", "", "-[NRDDeviceConductor createPairingLinksIfNeeded]", 749, v23, v26);

        }
        v33 = nw_path_copy_interface(v26);
        name = nw_interface_get_name(v33);
        if (name)
        {
          v35 = name;
          objc_opt_self(NRLinkDirector);
          v63 = evaluator_for_endpoint;
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v36 = (id)qword_1001E4708;
          v37 = v36;
          if (v36)
            v38 = (void *)*((_QWORD *)v36 + 8);
          else
            v38 = 0;
          v39 = v38;
          v65 = v23;
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v65, 1));
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35));
          sub_1000C9B6C((uint64_t)v39, v40, v41, *(void **)(v1 + 96));

          v21 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
          evaluator_for_endpoint = v63;
        }

      }
      else
      {
        sub_1000D56B8(v1, 5u, 0);
      }

    }
    v42 = *((id *)v3 + 16);
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "allowedLinkSubtypes"));
    v44 = objc_msgSend(v43, "containsObject:", &off_1001C47E0);

    if (v44)
    {
      v45 = *(id *)(v1 + 96);
      objc_opt_self(NRDLocalDevice);
      v46 = sub_10013D10C((uint64_t)&v21[55], v45, &off_1001C4960);

      if (v46)
      {
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "hostname"));
        objc_opt_self(NRIKEv2Listener);
        if (qword_1001E44D8 != -1)
          dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
        v48 = (id)qword_1001E44D0;
        v49 = CFSTR("62743");
        if (!v48)
          v49 = 0;
        v50 = v49;
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v47, v50));

        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v52 = (id)qword_1001E4708;
        v53 = v52;
        if (v52)
          v54 = (void *)*((_QWORD *)v52 + 6);
        else
          v54 = 0;
        v55 = v54;

        v64 = v51;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v64, 1));
        sub_100146E4C(v55, v56, *(void **)(v1 + 96));

        if (*(_BYTE *)(v1 + 48))
          sub_1000D9FAC(v1, 1, 0);

      }
      else
      {
        sub_1000D56B8(v1, 2u, 101);
      }

    }
    v57 = *((id *)v3 + 16);
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "allowedLinkSubtypes"));
    v59 = objc_msgSend(v58, "containsObject:", &off_1001C47F8);

    if (v59)
      sub_1000D56B8(v1, 2u, 103);
    v60 = *((id *)v3 + 16);
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "allowedLinkSubtypes"));
    v62 = objc_msgSend(v61, "containsObject:", &off_1001C4810);

    if (!v62)
      goto LABEL_67;
    v12 = v1;
    v13 = 2;
    v14 = 104;
    goto LABEL_66;
  }
}

void sub_1000EE18C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1 || !*(_QWORD *)(v1 + 128))
    sub_1000E18BC(v1);
}

void sub_1000EE1A4(uint64_t a1)
{
  _QWORD *v2;
  BOOL v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (*((_BYTE *)WeakRetained + 14))
      v3 = v2 == 0;
    else
      v3 = 1;
    if (!v3 && *((_QWORD **)WeakRetained + 61) == v2 && *((_QWORD *)WeakRetained + 62) != v2[4])
      sub_1000DBB4C((uint64_t)WeakRetained, *((void **)WeakRetained + 16));
  }

}

void sub_1000EE234(uint64_t a1)
{
  dispatch_queue_t *v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  dispatch_queue_t *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v2 = *(dispatch_queue_t **)(a1 + 32);
  if (v2)
  {
    dispatch_assert_queue_V2(v2[13]);
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v3 = (id)qword_1001E4708;
    v4 = v3;
    if (v3)
      v5 = (void *)*((_QWORD *)v3 + 6);
    else
      v5 = 0;
    v6 = v5;

    if (v6)
      v2 = (dispatch_queue_t *)v6[11];
    else
      v2 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = v2;

  if (!v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v9 = (id)qword_1001E4708;
      v10 = v9;
      if (v9)
        v11 = (void *)*((_QWORD *)v9 + 6);
      else
        v11 = 0;
      v12 = v11;

      sub_100146C64((uint64_t)v12, *(void **)(a1 + 40));
    }
    else
    {
      v12 = 0;
      sub_100146C64(0, *(void **)(a1 + 40));
    }

  }
}

void sub_1000EE3A0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id *v13;
  void *v14;
  uint64_t v15;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 104));
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v3 = v2;
  if (v2)
    v4 = (void *)*((_QWORD *)v2 + 6);
  else
    v4 = 0;
  v5 = v4;

  v6 = sub_10014725C((uint64_t)v5, *(void **)(*(_QWORD *)(a1 + 32) + 96));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  if (!v7)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (v9)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 104));
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v10 = (id)qword_1001E4708;
        v11 = v10;
        if (v10)
          v12 = (void *)*((_QWORD *)v10 + 6);
        else
          v12 = 0;
        v13 = v12;

        v8 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        v13 = 0;
      }
      v15 = v8;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
      sub_100146E4C(v13, v14, *(void **)(*(_QWORD *)(a1 + 32) + 96));

    }
  }

}

void sub_1000EE544(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id *v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int IsLevelEnabled;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  NSObject *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  void *v75;
  int v76;
  uint64_t v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  void *i;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  void *j;
  void *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[128];
  _BYTE v104[128];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(_BYTE *)(a1 + 14))
    {
      *(_BYTE *)(a1 + 14) = 0;
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "description"));
      sub_100121E18(*(void **)(a1 + 96), 1502, 0, v3);

      objc_opt_self(NRLinkDirectorMessageManager);
      if (qword_1001E45A0 != -1)
        dispatch_once(&qword_1001E45A0, &stru_1001B6438);
      v4 = (id)qword_1001E4598;
      v5 = (id *)v4;
      if (v4)
      {
        v6 = *((_QWORD *)v4 + 1);
        v7 = *(id *)(a1 + 96);
        dispatch_assert_queue_V2(v6);
        objc_msgSend(v5[2], "setObject:forKeyedSubscript:", 0, v7);

      }
      v8 = *(void **)(a1 + 584);
      if (v8 && (objc_msgSend(*(id *)(a1 + 584), "cancelled") & 1) == 0)
      {
        objc_msgSend(v8, "setCancelled:", 1);
        objc_msgSend(v8, "setUpdateBlock:", 0);
        objc_msgSend(v8, "invalidateAggregateStatsTimerSource");
        objc_msgSend(v8, "reportEvent:", 30003);
      }
      v9 = *(void **)(a1 + 624);
      *(_QWORD *)(a1 + 624) = 0;

      v10 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = 0;

      *(_OWORD *)(a1 + 592) = 0u;
      v11 = *(void **)(a1 + 208);
      if (v11)
      {
        objc_msgSend(v11, "setDelegate:", 0);
        objc_msgSend(*(id *)(a1 + 208), "destroy");
        v12 = *(void **)(a1 + 208);
        *(_QWORD *)(a1 + 208) = 0;

      }
      *(_BYTE *)(a1 + 23) = 0;
      *(_DWORD *)(a1 + 19) = 0;
      *(_DWORD *)(a1 + 25) = 0;
      *(_BYTE *)(a1 + 29) = 0;
      sub_1000D7A20(a1, 0);
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      sub_1000D9FAC(a1, 0, 0xAu);
      objc_msgSend(*(id *)(a1 + 560), "cancel");
      v13 = *(void **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = 0;

      objc_msgSend(*(id *)(a1 + 552), "cancel");
      v14 = *(void **)(a1 + 552);
      *(_QWORD *)(a1 + 552) = 0;

      sub_1000DD3A8(a1);
      v16 = *(_QWORD *)(a1 + 488);
      if (v16)
      {
        *(_BYTE *)(v16 + 10) = 1;
        v17 = *(_QWORD *)(v16 + 72);
        if (v17)
        {
          nw_path_evaluator_cancel(v17, v15);
          v18 = *(void **)(v16 + 72);
          *(_QWORD *)(v16 + 72) = 0;

        }
        v19 = *(void **)(a1 + 488);
        *(_QWORD *)(a1 + 488) = 0;

      }
      v20 = *(_QWORD *)(a1 + 192);
      if (v20)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v20 + 48));
        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v21 = (id)qword_1001E4A18;
        sub_100127618((uint64_t)v21, *(void **)(v20 + 72));

        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v22 = (id)qword_1001E4A18;
        v23 = (id *)v22;
        if (v22)
        {
          dispatch_assert_queue_V2(*((dispatch_queue_t *)v22 + 1));
          if ((objc_msgSend(v23[2], "apply") & 1) == 0)
            sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v24, v25, v26, v93);
        }

        v27 = *(void **)(v20 + 56);
        if (v27)
        {
          if ((objc_msgSend(v27, "unregisterNetworkAgent") & 1) == 0)
          {
            v29 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v20 + 40), v28);
            IsLevelEnabled = _NRLogIsLevelEnabled(v29, 17);

            if (IsLevelEnabled)
            {
              v32 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v20 + 40), v31);
              _NRLogWithArgs(v32, 17, "Failed to unregister PhoneCallRelay agent");

            }
          }
          v33 = *(void **)(v20 + 56);
          *(_QWORD *)(v20 + 56) = 0;

          v34 = *(void **)(v20 + 40);
          v35 = *(id *)(v20 + 80);
          v36 = v34;
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v20, "agentUUID"));
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "UUIDString"));
          sub_100121E18(v36, 17003, v35, v38);

        }
        *(_BYTE *)(v20 + 14) = 0;
        v39 = *(void **)(a1 + 192);
        *(_QWORD *)(a1 + 192) = 0;

      }
      v40 = *(_QWORD *)(a1 + 200);
      if (v40)
      {
        sub_1000656E4(v40);
        v41 = *(void **)(a1 + 200);
        *(_QWORD *)(a1 + 200) = 0;

      }
      v42 = *(_QWORD *)(a1 + 384);
      if (v42)
      {
        sub_1000681D0(v42);
        v43 = *(void **)(a1 + 384);
        *(_QWORD *)(a1 + 384) = 0;

      }
      v44 = *(_QWORD *)(a1 + 440);
      if (v44)
      {
        sub_10005DFE8(v44, v15);
        v45 = *(void **)(a1 + 440);
        *(_QWORD *)(a1 + 440) = 0;

      }
      v46 = *(_QWORD *)(a1 + 632);
      if (v46)
      {
        sub_1000F6A3C(v46, v15);
        v47 = *(void **)(a1 + 632);
        *(_QWORD *)(a1 + 632) = 0;

      }
      sub_1000EB96C(a1);
      sub_1000EA358(a1);
      v48 = *(void **)(a1 + 656);
      *(_QWORD *)(a1 + 656) = 0;

      if (*(_BYTE *)(a1 + 56))
      {
        v49 = *(void **)(a1 + 512);
        *(_QWORD *)(a1 + 512) = 0;

        v50 = *(void **)(a1 + 520);
        *(_QWORD *)(a1 + 520) = 0;

        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v51 = (id)qword_1001E4A18;
        sub_100127618((uint64_t)v51, *(void **)(a1 + 288));

        if (*(_BYTE *)(a1 + 56))
        {
          v52 = *(void **)(a1 + 504);
          *(_QWORD *)(a1 + 504) = 0;

          v53 = *(void **)(a1 + 528);
          *(_QWORD *)(a1 + 528) = 0;

          objc_opt_self(NRDPolicySessionManager);
          if (qword_1001E4A20 != -1)
            dispatch_once(&qword_1001E4A20, &stru_1001B8590);
          v54 = (id)qword_1001E4A18;
          sub_100127618((uint64_t)v54, *(void **)(a1 + 280));

        }
      }
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v55 = (id)qword_1001E4A18;
      sub_100127618((uint64_t)v55, *(void **)(a1 + 272));

      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v56 = (id)qword_1001E4A18;
      sub_100127618((uint64_t)v56, *(void **)(a1 + 312));

      if (*(_QWORD *)(a1 + 296))
      {
        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v57 = (id)qword_1001E4A18;
        sub_100127618((uint64_t)v57, *(void **)(a1 + 296));

      }
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v58 = (id)qword_1001E4A18;
      sub_100127618((uint64_t)v58, *(void **)(a1 + 544));

      if (*(_QWORD *)(a1 + 304))
      {
        objc_opt_self(NRDPolicySessionManager);
        if (qword_1001E4A20 != -1)
          dispatch_once(&qword_1001E4A20, &stru_1001B8590);
        v59 = (id)qword_1001E4A18;
        sub_100127618((uint64_t)v59, *(void **)(a1 + 304));

      }
      objc_opt_self(NRDPolicySessionManager);
      if (qword_1001E4A20 != -1)
        dispatch_once(&qword_1001E4A20, &stru_1001B8590);
      v60 = (id)qword_1001E4A18;
      v61 = (id *)v60;
      if (v60)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v60 + 1));
        if ((objc_msgSend(v61[2], "apply") & 1) == 0)
          sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v62, v63, v64, v93);
      }

      v65 = *(void **)(a1 + 424);
      *(_QWORD *)(a1 + 424) = 0;

      v67 = *(_QWORD *)(a1 + 416);
      if (v67)
      {
        sub_100119F6C(v67, v66);
        v68 = *(void **)(a1 + 416);
        *(_QWORD *)(a1 + 416) = 0;

      }
      v69 = *(void **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = 0;

      v70 = *(NSObject **)(a1 + 360);
      if (v70)
      {
        dispatch_source_cancel(v70);
        v71 = *(void **)(a1 + 360);
        *(_QWORD *)(a1 + 360) = 0;

      }
      objc_msgSend(*(id *)(a1 + 120), "removeAllObjects");
      v73 = *(_QWORD *)(a1 + 184);
      if (v73)
      {
        v74 = *(NSObject **)(v73 + 24);
        if (v74)
          dispatch_assert_queue_V2(v74);
        v75 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v73 + 16), v72);
        v76 = _NRLogIsLevelEnabled(v75, 0);

        if (v76)
        {
          v78 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v73 + 16), v77);
          _NRLogWithArgs(v78, 0, "%s%.30s:%-4d Cancel %@", "", "-[NRDevicePreferencesManager cancel]", 77, v73);

        }
        objc_msgSend(*(id *)(v73 + 32), "removeAllObjects");
        sub_1001141A8(v73);
        objc_msgSend(*(id *)(v73 + 40), "removeAllObjects");
        sub_100114958(v73);
        v79 = *(void **)(a1 + 184);
      }
      else
      {
        v79 = 0;
      }
      *(_QWORD *)(a1 + 184) = 0;

      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v80 = *(id *)(a1 + 168);
      v81 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v99, v104, 16);
      if (v81)
      {
        v82 = v81;
        v83 = *(_QWORD *)v100;
        do
        {
          for (i = 0; i != v82; i = (char *)i + 1)
          {
            if (*(_QWORD *)v100 != v83)
              objc_enumerationMutation(v80);
            xpc_connection_cancel(*(xpc_connection_t *)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)i));
          }
          v82 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v99, v104, 16);
        }
        while (v82);
      }

      objc_msgSend(*(id *)(a1 + 168), "removeAllObjects");
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v85 = *(id *)(a1 + 176);
      v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v95, v103, 16);
      if (v86)
      {
        v87 = v86;
        v88 = *(_QWORD *)v96;
        do
        {
          for (j = 0; j != v87; j = (char *)j + 1)
          {
            if (*(_QWORD *)v96 != v88)
              objc_enumerationMutation(v85);
            xpc_connection_cancel(*(xpc_connection_t *)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)j));
          }
          v87 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v95, v103, 16);
        }
        while (v87);
      }

      objc_msgSend(*(id *)(a1 + 176), "removeAllObjects");
      sub_1000E0FAC(a1);
    }
    else
    {
      v90 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v2);
      v91 = _NRLogIsLevelEnabled(v90, 1);

      if (v91)
      {
        v94 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v92);
        _NRLogWithArgs(v94, 1, "%s%.30s:%-4d Skipping cancel as conductor is already disabled", "", "-[NRDDeviceConductor cancelConductor]", 1240);

      }
    }
  }
}

void sub_1000EEF1C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  void *v22;
  int IsLevelEnabled;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id *v27;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (*(unsigned __int8 *)(a1 + 17) != a2)
  {
    sub_1000D5060(a1, 1033, CFSTR("%d -> %d"), v4, v5, v6, v7, v8, *(unsigned __int8 *)(a1 + 17));
    *(_BYTE *)(a1 + 17) = a2;
    if (a2)
      sub_1000DA624(a1, CFSTR("Device setup in progress"), v9, v10, v11, v12, v13, v14, v26);
    if (*(_BYTE *)(a1 + 8) && !*(_BYTE *)(a1 + 17))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v15 = (id)qword_1001E4708;
      v16 = v15;
      if (v15)
        v17 = (void *)*((_QWORD *)v15 + 6);
      else
        v17 = 0;
      v27 = v17;

      v18 = v27;
      if (v27
        && (v19 = v27[3],
            dispatch_assert_queue_V2(v19),
            v19,
            v18 = v27,
            *((int *)v27 + 10) >= 1))
      {
        v20 = *(unsigned __int8 *)(a1 + 15);

        if (!v20)
        {
          v22 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v21);
          IsLevelEnabled = _NRLogIsLevelEnabled(v22, 0);

          if (IsLevelEnabled)
          {
            v25 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v24);
            _NRLogWithArgs(v25, 0, "%s%.30s:%-4d processing outstanding prefer Wi-Fi requests", "", "-[NRDDeviceConductor setDeviceSetupInProgress:]", 1790);

          }
          objc_msgSend((id)a1, "preferWiFiRequestAvailable");
        }
      }
      else
      {

      }
    }
  }
}

void sub_1000EF0D0(uint64_t a1, void *a2)
{
  id v3;
  int IsLevelEnabled;
  id v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 168), "addObject:", v6);
    }
    else
    {
      v3 = sub_1000D5594();
      IsLevelEnabled = _NRLogIsLevelEnabled(v3, 17);

      if (IsLevelEnabled)
      {
        v5 = sub_1000D5594();
        _NRLogWithArgs(v5, 17, "%s called with null connection", "-[NRDDeviceConductor addDeviceMonitorConnection:]");

      }
    }
  }

}

uint64_t sub_1000EF168(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int IsLevelEnabled;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;

  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = *(_QWORD *)(v7 + 96);
  else
    v8 = 0;
  v9 = (void *)_NRCopyLogObjectForNRUUID(v8, v5);
  IsLevelEnabled = _NRLogIsLevelEnabled(v9, 0);

  if (IsLevelEnabled)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      v13 = *(_QWORD *)(v12 + 96);
    else
      v13 = 0;
    v14 = (void *)_NRCopyLogObjectForNRUUID(v13, v11);
    _NRLogWithArgs(v14, 0, "%s%.30s:%-4d Received data key: %s", "", "-[NRDDeviceConductor processXPCCommNotificationForConnection:notificationDictionary:]_block_invoke", 7254, a2);

  }
  if (!strcmp(a2, kNRXPCCommNotificationTypeXPCommDictionary))
  {
    if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
    {
      v24 = _CFXPCCreateCFObjectFromXPCObject(v6);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v26 = *(void **)(v25 + 40);
      *(_QWORD *)(v25 + 40) = v24;

      v28 = *(_QWORD *)(a1 + 32);
      if (v28)
        v29 = *(_QWORD *)(v28 + 96);
      else
        v29 = 0;
      v30 = (void *)_NRCopyLogObjectForNRUUID(v29, v27);
      v31 = _NRLogIsLevelEnabled(v30, 0);

      if (v31)
      {
        v32 = *(_QWORD **)(a1 + 32);
        if (v32)
          v32 = (_QWORD *)v32[12];
        v33 = v32;
        v23 = (void *)_NRCopyLogObjectForNRUUID(v33, v34);
        _NRLogWithArgs(v23, 0, "%s%.30s:%-4d Received data: %@", "", "-[NRDDeviceConductor processXPCCommNotificationForConnection:notificationDictionary:]_block_invoke", 7258, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

        goto LABEL_21;
      }
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
        v17 = *(_QWORD *)(v16 + 96);
      else
        v17 = 0;
      v18 = (void *)_NRCopyLogObjectForNRUUID(v17, v15);
      v19 = _NRLogIsLevelEnabled(v18, 17);

      if (v19)
      {
        v21 = *(_QWORD *)(a1 + 32);
        if (v21)
          v22 = *(_QWORD *)(v21 + 96);
        else
          v22 = 0;
        v23 = (void *)_NRCopyLogObjectForNRUUID(v22, v20);
        _NRLogWithArgs(v23, 17, "Invalid type for key %s", a2);
LABEL_21:

      }
    }
  }

  return 1;
}

void sub_1000EF368(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  char *v8;
  uint64_t v9;
  xpc_object_t v10;
  void *v11;
  xpc_object_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  xpc_object_t v24;
  void *v25;
  char *v26;
  char *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *j;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v37;
  id v38;
  int IsLevelEnabled;
  id v40;
  int v41;
  id v42;
  uint64_t v43;
  char *v44;
  int *v45;
  uint64_t v46;
  id v47;
  id v48;
  int v49;
  uint64_t v50;
  id v51;
  id v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  id v57;
  id v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[128];
  _BYTE v73[128];
  _BYTE v74[128];

  v3 = a2;
  if (a1 && *(_BYTE *)(a1 + 14))
  {
    v4 = objc_msgSend(*(id *)(a1 + 152), "count");
    if (!v3 || v4)
    {
      v51 = v3;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v52 = *(id *)(a1 + 160);
      v56 = (char *)objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v68, v74, 16);
      if (v56)
      {
        v55 = *(_QWORD *)v69;
        v54 = (const char *)kNRXPCCommNotificationTypeXPCommDictionary;
        v53 = (const char *)nrXPCKeyXPCCommNotification;
        do
        {
          v8 = 0;
          do
          {
            if (*(_QWORD *)v69 != v55)
              objc_enumerationMutation(v52);
            v9 = *(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)v8);
            v10 = xpc_dictionary_create(0, 0, 0);
            if (!v10)
            {
              if (qword_1001E4798 != -1)
                dispatch_once(&qword_1001E4798, &stru_1001B7628);
              v38 = (id)qword_1001E4790;
              IsLevelEnabled = _NRLogIsLevelEnabled(v38, 16);

              if (!IsLevelEnabled)
                goto LABEL_51;
              if (qword_1001E4798 == -1)
                goto LABEL_49;
LABEL_54:
              dispatch_once(&qword_1001E4798, &stru_1001B7628);
LABEL_49:
              v42 = (id)qword_1001E4790;
              _NRLogWithArgs(v42, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);
              goto LABEL_50;
            }
            v11 = v10;
            v12 = xpc_dictionary_create(0, 0, 0);
            if (!v12)
            {
              if (qword_1001E4798 != -1)
                dispatch_once(&qword_1001E4798, &stru_1001B7628);
              v40 = (id)qword_1001E4790;
              v41 = _NRLogIsLevelEnabled(v40, 16);

              if (!v41)
                goto LABEL_51;
              if (qword_1001E4798 != -1)
                goto LABEL_54;
              goto LABEL_49;
            }
            v13 = v12;
            v59 = v8;
            v57 = (id)_CFXPCCreateXPCObjectFromCFObject(v9);
            xpc_dictionary_set_value(v13, v54, v57);
            v58 = v13;
            xpc_dictionary_set_value(v11, v53, v13);
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v14 = *(id *)(a1 + 152);
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
            if (v15)
            {
              v16 = v15;
              v17 = *(_QWORD *)v65;
              do
              {
                for (i = 0; i != v16; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v65 != v17)
                    objc_enumerationMutation(v14);
                  xpc_connection_send_message(*(xpc_connection_t *)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i), v11);
                  v20 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v19);
                  v21 = _NRLogIsLevelEnabled(v20, 0);

                  if (v21)
                  {
                    v23 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v22);
                    _NRLogWithArgs(v23, 0, "%s%.30s:%-4d sending xpcComm pending message", "", "-[NRDDeviceConductor sendXPCCommDictionary:]", 7323);

                  }
                }
                v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
              }
              while (v16);
            }

            v8 = v59 + 1;
          }
          while (v59 + 1 != v56);
          v56 = (char *)objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v68, v74, 16);
        }
        while (v56);
      }

      objc_msgSend(*(id *)(a1 + 160), "removeAllObjects");
      v3 = v51;
      if (v51)
      {
        v24 = xpc_dictionary_create(0, 0, 0);
        if (!v24 || (v25 = v24, (v26 = (char *)xpc_dictionary_create(0, 0, 0)) == 0))
        {
          while (1)
          {
            v48 = sub_1000D5594();
            v49 = _NRLogIsLevelEnabled(v48, 16);

            if (v49)
            {
              v42 = sub_1000D5594();
              _NRLogWithArgs(v42, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);
LABEL_50:

            }
LABEL_51:
            v43 = _os_log_pack_size(38);
            v44 = (char *)&v50 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
            v45 = __error();
            v46 = _os_log_pack_fill(v44, v43, *v45, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
            sub_1000DAF48(v46, (uint64_t)"nr_xpc_dictionary_create");
            v47 = sub_1000D5594();
            _NRLogAbortWithPack(v47, v44);
          }
        }
        v27 = v26;
        v58 = (id)_CFXPCCreateXPCObjectFromCFObject(v51);
        xpc_dictionary_set_value(v27, kNRXPCCommNotificationTypeXPCommDictionary, v58);
        v59 = v27;
        xpc_dictionary_set_value(v25, nrXPCKeyXPCCommNotification, v27);
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v28 = *(id *)(a1 + 152);
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v61;
          do
          {
            for (j = 0; j != v30; j = (char *)j + 1)
            {
              if (*(_QWORD *)v61 != v31)
                objc_enumerationMutation(v28);
              xpc_connection_send_message(*(xpc_connection_t *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)j), v25);
              v34 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v33);
              v35 = _NRLogIsLevelEnabled(v34, 0);

              if (v35)
              {
                v37 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 96), v36);
                _NRLogWithArgs(v37, 0, "%s%.30s:%-4d sending xpcComm message", "", "-[NRDDeviceConductor sendXPCCommDictionary:]", 7337);

              }
            }
            v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
          }
          while (v30);
        }

        v3 = v51;
      }
    }
    else
    {
      v5 = *(void **)(a1 + 160);
      if (!v5)
      {
        v6 = objc_alloc_init((Class)NSMutableArray);
        v7 = *(void **)(a1 + 160);
        *(_QWORD *)(a1 + 160) = v6;

        v5 = *(void **)(a1 + 160);
      }
      objc_msgSend(v5, "addObject:", v3);
    }
  }

}

void sub_1000EFA44(_BYTE *a1, int a2)
{
  if (a1 && (a1[67] != 0) != a2 && a1[14] && a1[46] && a1[48])
  {
    if (qword_1001E4798 != -1)
      dispatch_once(&qword_1001E4798, &stru_1001B7628);
    if (_NRLogIsLevelEnabled(qword_1001E4790, 0))
    {
      if (qword_1001E4798 != -1)
        dispatch_once(&qword_1001E4798, &stru_1001B7628);
      _NRLogWithArgs(qword_1001E4790, 0, "%s%.30s:%-4d has non companion clients %d", "", "-[NRDDeviceConductor updateHasNonCompanionClients:]", 7977, a2);
    }
    a1[67] = a2;
    sub_1000DD564((uint64_t)a1);
  }
}

void sub_1000EFB50(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  int IsLevelEnabled;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unsigned __int8 v69;

  if (a1[4])
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deviceForBluetoothID:", a1[4]));
    if (!v4)
    {
      v60 = a1[5];
      if (v60)
        v61 = *(_QWORD *)(v60 + 96);
      else
        v61 = 0;
      v62 = (void *)_NRCopyLogObjectForNRUUID(v61, v3);
      IsLevelEnabled = _NRLogIsLevelEnabled(v62, 16);

      if (IsLevelEnabled)
      {
        v64 = (_QWORD *)a1[5];
        if (v64)
          v64 = (_QWORD *)v64[12];
        v65 = v64;
        v67 = (void *)_NRCopyLogObjectForNRUUID(v65, v66);
        _NRLogWithArgs(v67, 16, "%s%.30s:%-4d NanoRegistry didn't return device for %@", "", "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2", 8095, a1[6]);

      }
      v68 = a1[5];
      if (v68)
        *(_BYTE *)(v68 + 11) = 0;
      goto LABEL_51;
    }
    v6 = objc_msgSend(objc_alloc((Class)NPSDomainAccessor), "initWithDomain:pairedDevice:", CFSTR("com.apple.system.prefs"), v4);
    if (!v6)
    {
      v7 = a1[5];
      if (v7)
        v8 = *(_QWORD *)(v7 + 96);
      else
        v8 = 0;
      v9 = (void *)_NRCopyLogObjectForNRUUID(v8, v5);
      v10 = _NRLogIsLevelEnabled(v9, 16);

      if (v10)
      {
        v12 = a1[5];
        if (v12)
          v13 = *(_QWORD *)(v12 + 96);
        else
          v13 = 0;
        v14 = (void *)_NRCopyLogObjectForNRUUID(v13, v11);
        _NRLogWithArgs(v14, 16, "%s%.30s:%-4d Didn't get domain accessor for %@", "", "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2", 8103, v4);

      }
      v15 = a1[5];
      if (v15)
        *(_BYTE *)(v15 + 11) = 0;
    }
    v17 = objc_msgSend(v6, "copyKeyList");
    v18 = a1[5];
    if (v18)
      v19 = *(_QWORD *)(v18 + 96);
    else
      v19 = 0;
    v20 = (void *)_NRCopyLogObjectForNRUUID(v19, v16);
    v21 = _NRLogIsLevelEnabled(v20, 2);

    if (v21)
    {
      v23 = a1[5];
      if (v23)
        v24 = *(_QWORD *)(v23 + 96);
      else
        v24 = 0;
      v25 = (void *)_NRCopyLogObjectForNRUUID(v24, v22);
      _NRLogWithArgs(v25, 2, "%s%.30s:%-4d Perpetual standalone Meadow keySet: %@", "", "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2", 8108, v17);

    }
    v69 = 0;
    v27 = objc_msgSend(v6, "BOOLForKey:keyExistsAndHasValidFormat:", CFSTR("PerpetualMeadowStandaloneWiFiEnabled"), &v69);
    v28 = a1[5];
    if (v28)
      v29 = *(_QWORD *)(v28 + 96);
    else
      v29 = 0;
    v30 = (void *)_NRCopyLogObjectForNRUUID(v29, v26);
    v31 = _NRLogIsLevelEnabled(v30, 0);

    if (v31)
    {
      v33 = a1[5];
      if (v33)
        v34 = *(_QWORD *)(v33 + 96);
      else
        v34 = 0;
      v35 = (void *)_NRCopyLogObjectForNRUUID(v34, v32);
      _NRLogWithArgs(v35, 0, "%s%.30s:%-4d Perpetual standalone Meadow WiFi %u exists %u", "", "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2", 8113, v27, v69);

    }
    v69 = 0;
    v37 = objc_msgSend(v6, "BOOLForKey:keyExistsAndHasValidFormat:", CFSTR("PerpetualMeadowStandaloneCellularEnabled"), &v69);
    v38 = a1[5];
    if (v38)
      v39 = *(_QWORD *)(v38 + 96);
    else
      v39 = 0;
    v40 = (void *)_NRCopyLogObjectForNRUUID(v39, v36);
    v41 = _NRLogIsLevelEnabled(v40, 0);

    if (v41)
    {
      v43 = a1[5];
      if (v43)
        v44 = *(_QWORD *)(v43 + 96);
      else
        v44 = 0;
      v45 = (void *)_NRCopyLogObjectForNRUUID(v44, v42);
      _NRLogWithArgs(v45, 0, "%s%.30s:%-4d Perpetual standalone Meadow cell %u exists %u", "", "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2", 8118, v37, v69);

    }
    objc_msgSend(v6, "invalidate");
    v47 = a1[5];
    if (v47)
    {
      v48 = *(_BYTE *)(v47 + 11) & 1;
      *(_BYTE *)(v47 + 11) = v27 | v37;
      v49 = a1[5];
      if (v49)
      {
        if (((_DWORD)v48 != 0) != (*(_BYTE *)(v49 + 11) & 1))
        {
          v50 = *(_QWORD *)(v49 + 96);
          goto LABEL_34;
        }
      }
      else if ((_DWORD)v48)
      {
        v50 = 0;
        v48 = 1;
LABEL_34:
        v51 = (void *)_NRCopyLogObjectForNRUUID(v50, v46);
        v52 = _NRLogIsLevelEnabled(v51, 0);

        if (v52)
        {
          v53 = (_QWORD *)a1[5];
          if (v53)
            v53 = (_QWORD *)v53[12];
          v54 = v53;
          v56 = _NRCopyLogObjectForNRUUID(v54, v55);
          v57 = (void *)v56;
          v58 = a1[5];
          if (v58)
            v58 = *(_BYTE *)(v58 + 11) & 1;
          _NRLogWithArgs(v56, 0, "%s%.30s:%-4d perpetualStandaloneMeadowEnabled(%@): %u -> %u", "", "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2", 8128, a1[6], v48, v58);

        }
      }
    }

LABEL_51:
    return;
  }
  v59 = a1[5];
  if (v59)
    *(_BYTE *)(v59 + 11) = 0;
}

void sub_1000EFFCC(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;
  id v4;
  int IsLevelEnabled;
  id v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_create("com.apple.networkrelay.NanoRegistry", v1);

  if (!v2)
  {
    v4 = sub_1000D5594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 16);

    if (IsLevelEnabled)
    {
      v6 = sub_1000D5594();
      _NRLogWithArgs(v6, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create", 118, "com.apple.networkrelay.NanoRegistry");

    }
    v7 = _os_log_pack_size(22);
    v8 = (char *)&v12 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v10 = 136446466;
    *(_QWORD *)(v10 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v10 + 14) = "com.apple.networkrelay.NanoRegistry";
    v11 = sub_1000D5594();
    _NRLogAbortWithPack(v11, v8);
  }
  v3 = (void *)qword_1001E4780;
  qword_1001E4780 = (uint64_t)v2;

}

_QWORD *sub_1000F01E8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v8;
  int IsLevelEnabled;
  id v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  id v15;
  int v16;
  id v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  objc_super v23;

  if (!a1)
    return 0;
  v23.receiver = a1;
  v23.super_class = (Class)NRDIDSKeyManager;
  v1 = objc_msgSendSuper2(&v23, "init");
  if (!v1)
  {
    v8 = sub_1000F0418();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_1000F0418();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDIDSKeyManager initInternal]", 98);

    }
    v11 = _os_log_pack_size(12);
    v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v14 = 136446210;
    *(_QWORD *)(v14 + 4) = "-[NRDIDSKeyManager initInternal]";
    goto LABEL_11;
  }
  v2 = v1;
  v3 = sub_10014CFBC();
  v4 = (void *)v2[2];
  v2[2] = v3;

  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = (void *)v2[6];
  v2[6] = v5;

  if (!v2[6])
  {
    v15 = sub_1000F0418();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    if (v16)
    {
      v17 = sub_1000F0418();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (self.deviceRecords) != ((void *)0)", "", "-[NRDIDSKeyManager initInternal]", 101);

    }
    v18 = _os_log_pack_size(12);
    v12 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = __error();
    v20 = _os_log_pack_fill(v12, v18, *v19, &_mh_execute_header, "%{public}s Assertion Failed: (self.deviceRecords) != ((void *)0)");
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)(v20 + 4) = "-[NRDIDSKeyManager initInternal]";
LABEL_11:
    v21 = sub_1000F0418();
    _NRLogAbortWithPack(v21, v12);
    return 0;
  }
  return v2;
}

id sub_1000F0418()
{
  if (qword_1001E47B8 != -1)
    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
  return (id)qword_1001E47B0;
}

void sub_1000F0458(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E47B0;
  qword_1001E47B0 = (uint64_t)v1;

}

void sub_1000F0488(id a1)
{
  _QWORD *v1;
  void *v2;

  v1 = sub_1000F01E8([NRDIDSKeyManager alloc]);
  v2 = (void *)qword_1001E47A0;
  qword_1001E47A0 = (uint64_t)v1;

}

uint64_t sub_1000F04B4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v6;
  int v7;
  id v8;
  id v9;
  int IsLevelEnabled;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    v4 = objc_msgSend(v3, "fullIdentity");
    if (v4)
    {
      a1 = *((_QWORD *)v4 + 3);
      if (a1)
      {
        CFRetain(*((CFTypeRef *)v4 + 3));
        goto LABEL_5;
      }
      v9 = sub_1000F0418();
      IsLevelEnabled = _NRLogIsLevelEnabled(v9, 17);

      if (IsLevelEnabled)
      {
        v8 = sub_1000F0418();
        _NRLogWithArgs(v8, 17, "privateSigningKey missing from mpsFullID");
        goto LABEL_10;
      }
    }
    else
    {
      v6 = sub_1000F0418();
      v7 = _NRLogIsLevelEnabled(v6, 17);

      if (v7)
      {
        v8 = sub_1000F0418();
        _NRLogWithArgs(v8, 17, "Failed to extract fullIdentity from localPrivateIDSIdentity");
LABEL_10:

      }
    }
    a1 = 0;
  }
LABEL_5:

  return a1;
}

uint64_t sub_1000F0580(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v6;
  int v7;
  id v8;
  id v9;
  int IsLevelEnabled;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    v4 = objc_msgSend(v3, "publicIdentity");
    if (v4)
    {
      a1 = *((_QWORD *)v4 + 2);
      if (a1)
      {
        CFRetain(*((CFTypeRef *)v4 + 2));
        goto LABEL_5;
      }
      v9 = sub_1000F0418();
      IsLevelEnabled = _NRLogIsLevelEnabled(v9, 17);

      if (IsLevelEnabled)
      {
        v8 = sub_1000F0418();
        _NRLogWithArgs(v8, 17, "publicSigningKey missing from mpsPublicID");
        goto LABEL_10;
      }
    }
    else
    {
      v6 = sub_1000F0418();
      v7 = _NRLogIsLevelEnabled(v6, 17);

      if (v7)
      {
        v8 = sub_1000F0418();
        _NRLogWithArgs(v8, 17, "Failed to extract publicIdentity from remotePublicIDSIdentity");
LABEL_10:

      }
    }
    a1 = 0;
  }
LABEL_5:

  return a1;
}

void sub_1000F064C(uint64_t a1, int a2)
{
  NRAnalyticsKeyManager *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD block[5];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (*(_BYTE *)(a1 + 8))
    {
      if (a2)
        *(_BYTE *)(a1 + 9) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 1;
      if (!*(_QWORD *)(a1 + 56))
      {
        v4 = objc_alloc_init(NRAnalyticsKeyManager);
        v5 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v4;

      }
      sub_100121E18(0, 5500, &stru_1001B95A0, 0);
      v6 = mach_absolute_time();
      v7 = *(_QWORD *)(a1 + 56);
      if (v7)
        *(_QWORD *)(v7 + 24) = v6;
      if (qword_1001E47C0 != -1)
        dispatch_once(&qword_1001E47C0, &stru_1001B7750);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000F0758;
      block[3] = &unk_1001B8AE0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)qword_1001E47C8, block);
    }
  }
}

uint64_t sub_1000F0758(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000F07DC;
  v2[3] = &unk_1001B7670;
  v2[4] = *(_QWORD *)(a1 + 32);
  if (qword_1001E47C0 != -1)
    dispatch_once(&qword_1001E47C0, &stru_1001B7750);
  return IDSLocalPairingGetPairingRecordsWithCompletionBlock(v2, qword_1001E47C8);
}

void sub_1000F07DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    v12 = *(NSObject **)(v11 + 16);
  else
    v12 = 0;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000F08C0;
  v16[3] = &unk_1001B7898;
  v16[4] = v11;
  v17 = v9;
  v18 = v7;
  v19 = v8;
  v13 = v8;
  v14 = v7;
  v15 = v10;
  dispatch_async(v12, v16);

}

id sub_1000F08C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  __objc2_prot *v23;
  __objc2_prot *v24;
  void *v25;
  id v26;
  void *v27;
  const void *v28;
  id v29;
  void *v30;
  __CFString *LogString;
  void *v32;
  id v33;
  void *v34;
  const void *v35;
  id v36;
  void *v37;
  __CFString *v38;
  void *v39;
  id v40;
  void *v41;
  const void *v42;
  id v43;
  void *v44;
  __CFString *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void *i;
  __objc2_meth_list *v50;
  void *v51;
  void *v52;
  void *v53;
  NRDIDSKMDeviceRecord *v54;
  void *v55;
  id v56;
  void *v57;
  BOOL v58;
  __objc2_meth_list *v59;
  void *v60;
  const void *v61;
  __objc2_meth_list *v62;
  void *v63;
  id v64;
  __CFString *v65;
  void *v66;
  id v67;
  void *v68;
  const void *v69;
  __objc2_meth_list *v70;
  void *v71;
  id v72;
  __CFString *v73;
  __objc2_meth_list *v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  const void *v79;
  __objc2_meth_list *v80;
  void *v81;
  id v82;
  __CFString *v83;
  uint64_t v84;
  id v85;
  int IsLevelEnabled;
  id v87;
  id v88;
  int v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id obj;
  void *v97;
  id v98;
  id v99;
  id v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  id v105;
  _QWORD v106[16];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(NSObject **)(v2 + 16);
  else
    v3 = 0;
  dispatch_assert_queue_V2(v3);
  v4 = *(_QWORD *)(v1 + 32);
  if (v4)
    *(_BYTE *)(v4 + 8) = 0;
  v5 = mach_absolute_time();
  v11 = *(_QWORD *)(v1 + 32);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 56);
    if (v12)
      *(_QWORD *)(v12 + 32) = v5;
  }
  v13 = *(_QWORD *)(v1 + 48);
  if (!*(_QWORD *)(v1 + 40) && v13 && *(_QWORD *)(v1 + 56))
  {
    sub_1000F188C(*(_QWORD *)(v1 + 32), 5501, CFSTR("%@ %@"), v6, v7, v8, v9, v10, *(_QWORD *)(v1 + 48));
    v18 = *(_QWORD *)(v1 + 32);
    if (v18 && ((v19 = *(_QWORD *)(v18 + 56)) == 0 || (*(_BYTE *)(v19 + 16) = 1, (v18 = *(_QWORD *)(v1 + 32)) != 0)))
      v20 = *(void **)(v18 + 56);
    else
      v20 = 0;
    objc_msgSend(v20, "submit");
    v21 = *(_QWORD *)(v1 + 32);
    v22 = *(id *)(v1 + 48);
    v23 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    v24 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (v21)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v21 + 16));
      if (v22)
      {
        *(_QWORD *)&v101 = 0;
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fullIdentityClassD:", &v101));
        v26 = (id)v101;
        v27 = v26;
        if (!v25 || v26)
        {
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          if (_NRLogIsLevelEnabled(qword_1001E47B0, 16))
          {
            if (qword_1001E47B8 != -1)
              dispatch_once(&qword_1001E47B8, &stru_1001B7730);
            _NRLogWithArgs(qword_1001E47B0, 16, "%s%.30s:%-4d Failed to ingest IDS local classD identity: %@", "", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]", 132, v27);
          }
        }
        else
        {
          v28 = (const void *)sub_1000F04B4(v21, v25);
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          if (_NRLogIsLevelEnabled(qword_1001E47B0, 0))
          {
            if (qword_1001E47B8 != -1)
              dispatch_once(&qword_1001E47B8, &stru_1001B7730);
            v29 = (id)qword_1001E47B0;
            if (v28)
            {
              v106[0] = 0;
              SecKeyCopyPublicBytes(v28, v106);
              v30 = (void *)v106[0];
              v106[0] = 0;
              LogString = (__CFString *)_NRKeyCreateLogString(v30);

            }
            else
            {
              LogString = CFSTR("[nil]");
            }
            _NRLogWithArgs(v29, 0, "%s%.30s:%-4d Ingested IDS local classD identity %@", "", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]", 128, LogString);

          }
          objc_storeStrong((id *)(v21 + 24), v25);
          if (v28)
            CFRelease(v28);
        }

        v105 = 0;
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fullIdentityClassC:", &v105));
        v33 = v105;
        v34 = v33;
        if (!v32 || v33)
        {
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          if (_NRLogIsLevelEnabled(qword_1001E47B0, 16))
          {
            if (qword_1001E47B8 != -1)
              dispatch_once(&qword_1001E47B8, &stru_1001B7730);
            _NRLogWithArgs(qword_1001E47B0, 16, "%s%.30s:%-4d Failed to ingest IDS local classC identity: %@", "", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]", 147, v34);
          }
        }
        else
        {
          v35 = (const void *)sub_1000F04B4(v21, v32);
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          if (_NRLogIsLevelEnabled(qword_1001E47B0, 0))
          {
            if (qword_1001E47B8 != -1)
              dispatch_once(&qword_1001E47B8, &stru_1001B7730);
            v36 = (id)qword_1001E47B0;
            if (v35)
            {
              v106[0] = 0;
              SecKeyCopyPublicBytes(v35, v106);
              v37 = (void *)v106[0];
              v106[0] = 0;
              v38 = (__CFString *)_NRKeyCreateLogString(v37);

            }
            else
            {
              v38 = CFSTR("[nil]");
            }
            _NRLogWithArgs(v36, 0, "%s%.30s:%-4d Ingested IDS local classC identity %@", "", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]", 143, v38);

          }
          objc_storeStrong((id *)(v21 + 32), v32);
          if (v35)
            CFRelease(v35);
        }

        v100 = 0;
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "fullIdentityClassA:", &v100));
        v40 = v100;
        v41 = v40;
        if (!v39 || v40)
        {
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          if (_NRLogIsLevelEnabled(qword_1001E47B0, 16))
          {
            if (qword_1001E47B8 != -1)
              dispatch_once(&qword_1001E47B8, &stru_1001B7730);
            _NRLogWithArgs(qword_1001E47B0, 16, "%s%.30s:%-4d Failed to ingest IDS local classA identity: %@", "", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]", 162, v41);
          }
        }
        else
        {
          v42 = (const void *)sub_1000F04B4(v21, v39);
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          if (_NRLogIsLevelEnabled(qword_1001E47B0, 0))
          {
            if (qword_1001E47B8 != -1)
              dispatch_once(&qword_1001E47B8, &stru_1001B7730);
            v43 = (id)qword_1001E47B0;
            if (v42)
            {
              v106[0] = 0;
              SecKeyCopyPublicBytes(v42, v106);
              v44 = (void *)v106[0];
              v106[0] = 0;
              v45 = (__CFString *)_NRKeyCreateLogString(v44);

            }
            else
            {
              v45 = CFSTR("[nil]");
            }
            _NRLogWithArgs(v43, 0, "%s%.30s:%-4d Ingested IDS local classA identity %@", "", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]", 158, v45);

          }
          objc_storeStrong((id *)(v21 + 40), v39);
          if (v42)
            CFRelease(v42);
        }

        v23 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
        v24 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
      }
      else
      {
        v85 = sub_1000F0418();
        IsLevelEnabled = _NRLogIsLevelEnabled(v85, 17);

        if (IsLevelEnabled)
        {
          v87 = sub_1000F0418();
          _NRLogWithArgs(v87, 17, "%s called with null localDeviceRecord", "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]");

        }
      }
    }

    v46 = *(_QWORD *)(v1 + 32);
    v47 = *(id *)(v1 + 56);
    if (v46)
    {
      v95 = v46;
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v46 + 16));
      if (v47)
      {
        v91 = v47;
        v92 = v1;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        obj = v47;
        v48 = v46;
        v94 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, v106, 16);
        if (v94)
        {
          v93 = *(_QWORD *)v102;
          do
          {
            for (i = 0; i != v94; i = (char *)i + 1)
            {
              if (*(_QWORD *)v102 != v93)
                objc_enumerationMutation(obj);
              v53 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)i);
              v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "objectForKeyedSubscript:", v53));
              v54 = (NRDIDSKMDeviceRecord *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v48 + 48), "objectForKeyedSubscript:", v53));
              if (!v54)
                v54 = objc_alloc_init(NRDIDSKMDeviceRecord);
              v100 = 0;
              v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "publicIdentityClassD:", &v100));
              v56 = v100;
              v57 = v56;
              if (v55)
                v58 = v56 == 0;
              else
                v58 = 0;
              v97 = v52;
              if (v58)
              {
                v61 = (const void *)sub_1000F0580(v48, v55);
                if (v23[27].class_meths != (__objc2_meth_list *)-1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(v24[27].inst_meths, 0))
                {
                  if (v23[27].class_meths != (__objc2_meth_list *)-1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  v62 = v24[27].inst_meths;
                  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
                  if (v61)
                  {
                    v105 = 0;
                    SecKeyCopyPublicBytes(v61, &v105);
                    v64 = v105;
                    v105 = 0;
                    v65 = (__CFString *)_NRKeyCreateLogString(v64);

                    v48 = v95;
                  }
                  else
                  {
                    v65 = CFSTR("[nil]");
                  }
                  _NRLogWithArgs(v62, 0, "%s%.30s:%-4d Ingested IDS remote classD identity for BT<%@> %@", "", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]", 187, v63, v65);

                  v23 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                  v24 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                  v52 = v97;
                }
                if (v54)
                  objc_storeStrong((id *)&v54->_remoteIDSClassDIdentity, v55);
                if (v61)
                  CFRelease(v61);
              }
              else
              {
                if (v23[27].class_meths != (__objc2_meth_list *)-1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(v24[27].inst_meths, 16))
                {
                  if (v23[27].class_meths != (__objc2_meth_list *)-1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  v59 = v24[27].inst_meths;
                  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
                  _NRLogWithArgs(v59, 16, "%s%.30s:%-4d Failed to ingest IDS remote classD identity for bluetoothUUID %@: %@", "", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]", 192, v60, v57);

                  v48 = v95;
                  v52 = v97;
                }
              }

              v99 = 0;
              v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "publicIdentityClassC:", &v99));
              v67 = v99;
              v68 = v67;
              if (!v66 || v67)
              {
                if (v23[27].class_meths != (__objc2_meth_list *)-1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(v24[27].inst_meths, 16))
                {
                  if (v23[27].class_meths != (__objc2_meth_list *)-1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  v74 = v24[27].inst_meths;
                  v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
                  _NRLogWithArgs(v74, 16, "%s%.30s:%-4d Failed to ingest IDS remote classC identity for bluetoothUUID %@: %@", "", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]", 208, v75, v68);

                  v48 = v95;
                  v52 = v97;
                }
              }
              else
              {
                v69 = (const void *)sub_1000F0580(v48, v66);
                if (v23[27].class_meths != (__objc2_meth_list *)-1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(v24[27].inst_meths, 0))
                {
                  if (v23[27].class_meths != (__objc2_meth_list *)-1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  v70 = v24[27].inst_meths;
                  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
                  if (v69)
                  {
                    v105 = 0;
                    SecKeyCopyPublicBytes(v69, &v105);
                    v72 = v105;
                    v105 = 0;
                    v73 = (__CFString *)_NRKeyCreateLogString(v72);

                    v48 = v95;
                  }
                  else
                  {
                    v73 = CFSTR("[nil]");
                  }
                  _NRLogWithArgs(v70, 0, "%s%.30s:%-4d Ingested IDS remote classC identity for BT<%@> %@", "", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]", 203, v71, v73);

                  v23 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                  v24 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                  v52 = v97;
                }
                if (v54)
                  objc_storeStrong((id *)&v54->_remoteIDSClassCIdentity, v66);
                if (v69)
                  CFRelease(v69);
              }

              v98 = 0;
              v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "publicIdentityClassA:", &v98));
              v77 = v98;
              v78 = v77;
              if (!v76 || v77)
              {
                if (v23[27].class_meths != (__objc2_meth_list *)-1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(v24[27].inst_meths, 16))
                {
                  if (v23[27].class_meths != (__objc2_meth_list *)-1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  v50 = v24[27].inst_meths;
                  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
                  _NRLogWithArgs(v50, 16, "%s%.30s:%-4d Failed to ingest IDS remote classA identity for bluetoothUUID %@: %@", "", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]", 224, v51, v78);

                  v48 = v95;
                  v52 = v97;
                }
              }
              else
              {
                v79 = (const void *)sub_1000F0580(v48, v76);
                if (v23[27].class_meths != (__objc2_meth_list *)-1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(v24[27].inst_meths, 0))
                {
                  if (v23[27].class_meths != (__objc2_meth_list *)-1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  v80 = v24[27].inst_meths;
                  v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "UUIDString"));
                  if (v79)
                  {
                    v105 = 0;
                    SecKeyCopyPublicBytes(v79, &v105);
                    v82 = v105;
                    v105 = 0;
                    v83 = (__CFString *)_NRKeyCreateLogString(v82);

                    v48 = v95;
                  }
                  else
                  {
                    v83 = CFSTR("[nil]");
                  }
                  _NRLogWithArgs(v80, 0, "%s%.30s:%-4d Ingested IDS remote classA identity for BT<%@> %@", "", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]", 219, v81, v83);

                  v23 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                  v24 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
                  v52 = v97;
                }
                if (v54)
                  objc_storeStrong((id *)&v54->_remoteIDSClassAIdentity, v76);
                if (v79)
                  CFRelease(v79);
              }

              objc_msgSend(*(id *)(v48 + 48), "setObject:forKeyedSubscript:", v54, v53);
            }
            v94 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, v106, 16);
          }
          while (v94);
        }

        v47 = v91;
        v1 = v92;
      }
      else
      {
        v88 = sub_1000F0418();
        v89 = _NRLogIsLevelEnabled(v88, 17);

        if (v89)
        {
          v90 = sub_1000F0418();
          _NRLogWithArgs(v90, 17, "%s called with null pairedDevicesRecords", "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]");

        }
      }
    }

    result = *(id *)(v1 + 32);
    if (result)
    {
      result = (id)sub_1000F190C(result, 0);
      v84 = *(_QWORD *)(v1 + 32);
      if (v84)
      {
        if (*(_BYTE *)(v84 + 9))
        {
          *(_BYTE *)(v84 + 9) = 0;
          return (id)sub_1000F064C(*(_QWORD *)(v1 + 32), 0);
        }
      }
    }
  }
  else
  {
    sub_1000F188C(*(_QWORD *)(v1 + 32), 5502, CFSTR("%@ %@ %@"), v6, v7, v8, v9, v10, v13);
    v14 = *(_QWORD *)(v1 + 32);
    if (v14 && ((v15 = *(_QWORD *)(v14 + 56)) == 0 || (*(_BYTE *)(v15 + 16) = 0, (v14 = *(_QWORD *)(v1 + 32)) != 0)))
      v16 = *(void **)(v14 + 56);
    else
      v16 = 0;
    return objc_msgSend(v16, "submit");
  }
  return result;
}

void sub_1000F188C(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;

  if (a1)
  {
    v10 = a3;
    v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v10, &a9);

    sub_100121E18(0, a2, &stru_1001B95A0, v11);
  }
}

void sub_1000F190C(uint64_t a1, int a2)
{
  uint64_t v3;
  id v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id *v10;
  id v11;
  id v12;
  void *i;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  void *String;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  NSObject *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  dispatch_queue_t *v39;
  _QWORD *v40;
  NSObject *v41;
  dispatch_queue_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  _QWORD *v49;
  void *v50;
  id v51;
  id v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  int v67;
  int v68;
  id obj;
  uint64_t v70;
  id v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD block[4];
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD v92[5];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];

  if (a1)
  {
    v3 = a1;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v4 = *(id *)(v3 + 48);
    v57 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v88, v95, 16);
    if (v57)
    {
      v5 = 0;
      v6 = 0;
      v55 = *(_QWORD *)v89;
      v61 = a2;
      v56 = v4;
      v60 = v3;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v89 != v55)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)&v88 + 1) + 8 * v7);
          v9 = *(id *)(v3 + 48);
          v59 = v8;
          v10 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v8));

          if (v10)
            v11 = v10[4];
          else
            v11 = 0;
          v58 = v7;
          v12 = objc_msgSend(v11, "copy");
          v84 = 0u;
          v85 = 0u;
          v86 = 0u;
          v87 = 0u;
          obj = v12;
          v71 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v94, 16);
          if (v71)
          {
            v70 = *(_QWORD *)v85;
            do
            {
              for (i = 0; i != v71; i = (char *)i + 1)
              {
                if (*(_QWORD *)v85 != v70)
                  objc_enumerationMutation(obj);
                v14 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * (_QWORD)i);
                if (v14)
                {
                  v15 = *(unsigned __int8 *)(v14 + 9) != 4;
                  v16 = (*(_BYTE *)(v14 + 9) - 5) < 0xFEu;
                }
                else
                {
                  v16 = 1;
                  v15 = 1;
                }
                v17 = *(id *)(v3 + 24);
                if (!v17)
                  goto LABEL_46;
                if (!v10)
                {

LABEL_46:
                  if (v14)
                  {
                    if (*(_BYTE *)(v14 + 8))
                    {
                      v5 |= a2;
                    }
                    else
                    {
                      v5 = 1;
                      *(_BYTE *)(v14 + 8) = 1;
                    }
                  }
                  else
                  {
                    v5 = 1;
                  }
                  v6 = 1;
                  continue;
                }
                v18 = v10[1];

                if (!v18)
                  goto LABEL_46;
                if (v15)
                {
                  v19 = *(id *)(v3 + 32);
                  if (!v19)
                    goto LABEL_46;
                  v20 = v10[2];

                  if (!v20)
                    goto LABEL_46;
                }
                if (v16)
                {
                  v21 = *(id *)(v3 + 40);
                  if (!v21)
                    goto LABEL_46;
                  v22 = v10[3];

                  if (!v22)
                    goto LABEL_46;
                }
                if (qword_1001E47B8 != -1)
                  dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                if (_NRLogIsLevelEnabled(qword_1001E47B0, 0))
                {
                  if (qword_1001E47B8 != -1)
                    dispatch_once(&qword_1001E47B8, &stru_1001B7730);
                  if (v14)
                    v23 = *(unsigned __int8 *)(v14 + 9);
                  else
                    v23 = 0;
                  v24 = (id)qword_1001E47B0;
                  String = (void *)NRDataProtectionClassCreateString(v23);
                  _NRLogWithArgs(v24, 0, "%s%.30s:%-4d Completing query for %@ BT<%@>", "", "-[NRDIDSKeyManager checkOutstandingQueriesForceQueryIDS:]", 347, String, v59);

                }
                v67 = v6;
                v68 = v5;
                v66 = *(id *)(v3 + 24);
                v65 = *(id *)(v3 + 32);
                v26 = v3;
                v64 = *(id *)(v3 + 40);
                v27 = v10[1];
                v28 = v10[2];
                v29 = v10[3];
                if (v14)
                {
                  v30 = *(id *)(v14 + 16);
                  objc_setProperty_nonatomic_copy((id)v14, v31, 0, 16);
                }
                else
                {
                  v30 = 0;
                }
                objc_msgSend(v10[4], "removeObject:", v14);
                if (!objc_msgSend(v10[4], "count"))
                {
                  v32 = v10[4];
                  v10[4] = 0;

                }
                v33 = *(NSObject **)(v26 + 16);
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472;
                block[2] = sub_1000F218C;
                block[3] = &unk_1001B76C0;
                v82 = v29;
                v83 = v30;
                v77 = v66;
                v78 = v65;
                v79 = v64;
                v80 = v27;
                v81 = v28;
                v63 = v29;
                v62 = v28;
                v34 = v27;
                v35 = v64;
                v36 = v65;
                v37 = v66;
                v38 = v30;
                dispatch_async(v33, block);

                v3 = v60;
                a2 = v61;
                v6 = v67;
                v5 = v68;
              }
              v71 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v94, 16);
            }
            while (v71);
          }

          v7 = v58 + 1;
          v4 = v56;
        }
        while ((id)(v58 + 1) != v57);
        v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v88, v95, 16);
      }
      while (v57);

      if ((v5 & 1) != 0)
        sub_1000F064C(v3, a2);
      if ((v6 & 1) != 0)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 16));
        if (*(_BYTE *)(v3 + 10))
          return;
        *(_BYTE *)(v3 + 10) = 1;
        objc_opt_self(NRDKeyManager);
        if (qword_1001E4AD8 != -1)
          dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
        v39 = (dispatch_queue_t *)(id)qword_1001E4AD0;
        v92[0] = _NSConcreteStackBlock;
        v92[1] = 3221225472;
        v92[2] = sub_1000F21A8;
        v92[3] = &unk_1001B7698;
        v92[4] = v3;
        v40 = v92;
        if (v39)
        {
          dispatch_assert_queue_V2(v39[2]);
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Registering for IDS key manager data protection class updates", "", "-[NRDKeyManager registerForIDSKeyManagerUpdates:]", 99);
          }
          v41 = objc_retainBlock(v40);
          v42 = v39[3];
          v39[3] = v41;

          sub_10014A1C4((uint64_t)v39);
        }

        goto LABEL_68;
      }
    }
    else
    {

    }
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v39 = (dispatch_queue_t *)*(id *)(v3 + 48);
    v43 = -[dispatch_queue_t countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v72, v93, 16);
    if (v43)
    {
      v44 = v43;
      v45 = *(_QWORD *)v73;
LABEL_72:
      v46 = 0;
      while (1)
      {
        if (*(_QWORD *)v73 != v45)
          objc_enumerationMutation(v39);
        v47 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * v46);
        v48 = *(id *)(v3 + 48);
        v49 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectForKeyedSubscript:", v47));
        v50 = v49;
        if (v49)
          v49 = (_QWORD *)v49[4];
        v51 = objc_msgSend(v49, "count");

        if (v51)
          break;
        if (v44 == (id)++v46)
        {
          v44 = -[dispatch_queue_t countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v72, v93, 16);
          if (v44)
            goto LABEL_72;
          goto LABEL_80;
        }
      }
LABEL_68:

      return;
    }
LABEL_80:

    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 16));
    if (*(_BYTE *)(v3 + 10))
    {
      *(_BYTE *)(v3 + 10) = 0;
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v52 = (id)qword_1001E4AD0;
      v53 = v52;
      if (v52)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v52 + 2));
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Unregistering for IDS key manager data protection class updates", "", "-[NRDKeyManager unregisterForIDSKeyManagerUpdates]", 107);
        }
        v54 = (void *)v53[3];
        v53[3] = 0;

        if (!v53[3] && !v53[5] && !v53[6])
          sub_10014AB18((uint64_t)v53);
      }

    }
  }
}

uint64_t sub_1000F218C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[10] + 16))(a1[10], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

uint64_t sub_1000F21A8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(NSObject **)(v2 + 16);
  else
    v3 = 0;
  dispatch_assert_queue_V2(v3);
  return sub_1000F190C(*(_QWORD *)(a1 + 32), 1);
}

void sub_1000F21E4(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;
  id v4;
  int IsLevelEnabled;
  id v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_create("terminusd.IdentityServices.pairingRecords", v1);

  if (!v2)
  {
    v4 = sub_1000F0418();
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 16);

    if (IsLevelEnabled)
    {
      v6 = sub_1000F0418();
      _NRLogWithArgs(v6, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create", 118, "terminusd.IdentityServices.pairingRecords");

    }
    v7 = _os_log_pack_size(22);
    v8 = (char *)&v12 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v10 = 136446466;
    *(_QWORD *)(v10 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v10 + 14) = "terminusd.IdentityServices.pairingRecords";
    v11 = sub_1000F0418();
    _NRLogAbortWithPack(v11, v8);
  }
  v3 = (void *)qword_1001E47C8;
  qword_1001E47C8 = (uint64_t)v2;

}

void sub_1000F234C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  NRIDSKMOutstandingQuery *v8;
  const char *v9;
  id v10;
  id v11;
  void *String;
  NRDIDSKMDeviceRecord *v13;
  NSMutableArray *outstandingQueries;
  NSMutableArray *v15;
  NSMutableArray *v16;
  id v17;
  int v18;
  id v19;
  int v20;
  id v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  int IsLevelEnabled;
  id v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  id v37;
  id v38;

  v38 = a2;
  v7 = a4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (v7)
  {
    v8 = objc_alloc_init(NRIDSKMOutstandingQuery);
    if (v8)
    {
      v10 = v8;
      v8->_minDataProtectionClass = a3;
      objc_setProperty_nonatomic_copy(v8, v9, v7, 16);
      if (qword_1001E47B8 != -1)
        dispatch_once(&qword_1001E47B8, &stru_1001B7730);
      if (_NRLogIsLevelEnabled(qword_1001E47B0, 0))
      {
        if (qword_1001E47B8 != -1)
          dispatch_once(&qword_1001E47B8, &stru_1001B7730);
        v11 = (id)qword_1001E47B0;
        String = (void *)NRDataProtectionClassCreateString(a3);
        _NRLogWithArgs(v11, 0, "%s%.30s:%-4d Adding query %p for %@ BT<%@>", "", "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]", 412, v10, String, v38);

      }
      v13 = (NRDIDSKMDeviceRecord *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v38, v38));
      if (v13 || (v13 = objc_alloc_init(NRDIDSKMDeviceRecord)) != 0)
      {
        outstandingQueries = v13->_outstandingQueries;
        if (outstandingQueries
          || (v15 = (NSMutableArray *)objc_alloc_init((Class)NSMutableArray),
              v16 = v13->_outstandingQueries,
              v13->_outstandingQueries = v15,
              v16,
              (outstandingQueries = v13->_outstandingQueries) != 0))
        {
          -[NSMutableArray addObject:](outstandingQueries, "addObject:", v10);
          objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v13, v38);
          sub_1000F190C(a1, 0);

          goto LABEL_14;
        }
        v31 = sub_1000F0418();
        IsLevelEnabled = _NRLogIsLevelEnabled(v31, 16);

        if (IsLevelEnabled)
        {
          v33 = sub_1000F0418();
          _NRLogWithArgs(v33, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (deviceRecord.outstandingQueries) != ((void *)0)", "", "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]", 421);

        }
        v34 = _os_log_pack_size(12);
        v23 = (char *)&v38 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v35 = __error();
        v36 = _os_log_pack_fill(v23, v34, *v35, &_mh_execute_header, "%{public}s Assertion Failed: (deviceRecord.outstandingQueries) != ((void *)0)");
        *(_DWORD *)v36 = 136446210;
        *(_QWORD *)(v36 + 4) = "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]";
LABEL_28:
        v37 = sub_1000F0418();
        _NRLogAbortWithPack(v37, v23);
      }
      v26 = sub_1000F0418();
      v27 = _NRLogIsLevelEnabled(v26, 16);

      if (v27)
      {
        v28 = sub_1000F0418();
        _NRLogWithArgs(v28, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (deviceRecord) != ((void *)0)", "", "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]", 417);

      }
      v29 = _os_log_pack_size(12);
      v23 = (char *)&v38 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v30 = *__error();
      v25 = _os_log_pack_fill(v23, v29, v30, &_mh_execute_header, "%{public}s Assertion Failed: (deviceRecord) != ((void *)0)", v38);
    }
    else
    {
      v19 = sub_1000F0418();
      v20 = _NRLogIsLevelEnabled(v19, 16);

      if (v20)
      {
        v21 = sub_1000F0418();
        _NRLogWithArgs(v21, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (outstandingQuery) != ((void *)0)", "", "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]", 407);

      }
      v22 = _os_log_pack_size(12);
      v23 = (char *)&v38 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = *__error();
      v25 = _os_log_pack_fill(v23, v22, v24, &_mh_execute_header, "%{public}s Assertion Failed: (outstandingQuery) != ((void *)0)", v38);
    }
    *(_DWORD *)v25 = 136446210;
    *(_QWORD *)(v25 + 4) = "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]";
    goto LABEL_28;
  }
  v17 = sub_1000F0418();
  v18 = _NRLogIsLevelEnabled(v17, 17);

  if (!v18)
    goto LABEL_15;
  v10 = sub_1000F0418();
  _NRLogWithArgs(v10, 17, "%s called with null completionBlock", "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]");
LABEL_14:

LABEL_15:
}

void sub_1000F27C4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  int v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  int v70;
  id v71;
  id v72;
  int v73;
  id v74;
  int v75;
  id v76;
  int v77;
  id v78;
  int v79;
  id v80;
  int IsLevelEnabled;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v87 = a6;
  v86 = a7;
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v17 + 16));
    if (v13)
      goto LABEL_3;
LABEL_67:
    v80 = sub_1000F0418();
    IsLevelEnabled = _NRLogIsLevelEnabled(v80, 17);

    if (!IsLevelEnabled)
      goto LABEL_55;
    v71 = sub_1000F0418();
    _NRLogWithArgs(v71, 17, "%s called with null localIDSClassDIdentity");
    goto LABEL_69;
  }
  dispatch_assert_queue_V2(0);
  if (!v13)
    goto LABEL_67;
LABEL_3:
  if (!v16)
  {
    v69 = sub_1000F0418();
    v70 = _NRLogIsLevelEnabled(v69, 17);

    if (!v70)
      goto LABEL_55;
    v71 = sub_1000F0418();
    _NRLogWithArgs(v71, 17, "%s called with null remoteIDSClassDIdentity");
LABEL_69:

    goto LABEL_55;
  }
  v18 = *(unsigned __int8 *)(a1 + 80);
  if ((v18 | 2) != 3)
    goto LABEL_10;
  if (!v14)
  {
    v72 = sub_1000F0418();
    v73 = _NRLogIsLevelEnabled(v72, 17);

    if (!v73)
      goto LABEL_55;
    v71 = sub_1000F0418();
    _NRLogWithArgs(v71, 17, "%s called with null localIDSClassCIdentity");
    goto LABEL_69;
  }
  if (!v87)
  {
    v74 = sub_1000F0418();
    v75 = _NRLogIsLevelEnabled(v74, 17);

    if (!v75)
      goto LABEL_55;
    v71 = sub_1000F0418();
    _NRLogWithArgs(v71, 17, "%s called with null remoteIDSClassCIdentity");
    goto LABEL_69;
  }
  if (v18 != 1)
    goto LABEL_10;
  if (!v15)
  {
    v76 = sub_1000F0418();
    v77 = _NRLogIsLevelEnabled(v76, 17);

    if (!v77)
      goto LABEL_55;
    v71 = sub_1000F0418();
    _NRLogWithArgs(v71, 17, "%s called with null localIDSClassAIdentity");
    goto LABEL_69;
  }
  if (!v86)
  {
    v78 = sub_1000F0418();
    v79 = _NRLogIsLevelEnabled(v78, 17);

    if (!v79)
      goto LABEL_55;
    v71 = sub_1000F0418();
    _NRLogWithArgs(v71, 17, "%s called with null remoteIDSClassAIdentity");
    goto LABEL_69;
  }
LABEL_10:
  v19 = (const void *)sub_1000F0580(*(_QWORD *)(a1 + 32), v16);
  v20 = (const void *)sub_1000F04B4(*(_QWORD *)(a1 + 32), v13);
  v21 = *(_QWORD *)(a1 + 40);
  v90 = 0;
  v85 = v13;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "signAndProtectData:withSigner:error:", v21, v13, &v90));
  v23 = v90;
  v83 = v16;
  if (v23 || !v22)
  {
    if (qword_1001E47B8 != -1)
      dispatch_once(&qword_1001E47B8, &stru_1001B7730);
    if (_NRLogIsLevelEnabled(qword_1001E47B0, 17))
    {
      if (qword_1001E47B8 != -1)
        dispatch_once(&qword_1001E47B8, &stru_1001B7730);
      _NRLogWithArgs(qword_1001E47B0, 17, "Failed to encrypt and sign classD TLV for %@: %@", *(_QWORD *)(a1 + 48), v23);
    }
    v31 = *(_QWORD *)(a1 + 32);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
    sub_1000F188C(v31, 5504, CFSTR("ClassD BT<%@>: %@"), v32, v33, v34, v35, v36, (uint64_t)v25);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 32);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
    sub_1000F188C(v24, 5503, CFSTR("ClassD BT<%@>"), v26, v27, v28, v29, v30, (uint64_t)v25);
  }

  v37 = 0;
  v84 = v14;
  if (v14 && v87)
  {
    v38 = *(_QWORD *)(a1 + 56);
    if (v38)
    {
      v89 = 0;
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "signAndProtectData:withSigner:error:", v38, v14, &v89));
      v39 = v89;
      if (v39 || !v37)
      {
        if (qword_1001E47B8 != -1)
          dispatch_once(&qword_1001E47B8, &stru_1001B7730);
        if (_NRLogIsLevelEnabled(qword_1001E47B0, 17))
        {
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          _NRLogWithArgs(qword_1001E47B0, 17, "Failed to encrypt and sign classC TLV for %@: %@", *(_QWORD *)(a1 + 48), v39);
        }
        v47 = *(_QWORD *)(a1 + 32);
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
        sub_1000F188C(v47, 5504, CFSTR("ClassC BT<%@>: %@"), v48, v49, v50, v51, v52, (uint64_t)v41);
      }
      else
      {
        v40 = *(_QWORD *)(a1 + 32);
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
        sub_1000F188C(v40, 5503, CFSTR("ClassC BT<%@>"), v42, v43, v44, v45, v46, (uint64_t)v41);
      }

    }
    else
    {
      v37 = 0;
    }
  }
  v53 = 0;
  if (v15 && v86)
  {
    v54 = *(_QWORD *)(a1 + 64);
    if (v54)
    {
      v88 = 0;
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "signAndProtectData:withSigner:error:", v54, v15, &v88));
      v55 = v88;
      v82 = v15;
      if (v55 || !v53)
      {
        if (qword_1001E47B8 != -1)
          dispatch_once(&qword_1001E47B8, &stru_1001B7730);
        if (_NRLogIsLevelEnabled(qword_1001E47B0, 17))
        {
          if (qword_1001E47B8 != -1)
            dispatch_once(&qword_1001E47B8, &stru_1001B7730);
          _NRLogWithArgs(qword_1001E47B0, 17, "Failed to encrypt and sign classA TLV for %@: %@", *(_QWORD *)(a1 + 48), v55);
        }
        v63 = *(_QWORD *)(a1 + 32);
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
        sub_1000F188C(v63, 5504, CFSTR("ClassA BT<%@>: %@"), v64, v65, v66, v67, v68, (uint64_t)v57);
      }
      else
      {
        v56 = *(_QWORD *)(a1 + 32);
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
        sub_1000F188C(v56, 5503, CFSTR("ClassA BT<%@>"), v58, v59, v60, v61, v62, (uint64_t)v57);
      }

      v15 = v82;
    }
    else
    {
      v53 = 0;
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);

  v14 = v84;
  v13 = v85;
  v16 = v83;
LABEL_55:

}

void sub_1000F2E1C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  id v26;
  int IsLevelEnabled;
  id v28;

  v7 = a2;
  v8 = a5;
  v9 = a1[4];
  if (v9)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 16));
    if (v7)
      goto LABEL_3;
LABEL_19:
    v26 = sub_1000F0418();
    IsLevelEnabled = _NRLogIsLevelEnabled(v26, 17);

    if (!IsLevelEnabled)
      goto LABEL_15;
    v25 = sub_1000F0418();
    _NRLogWithArgs(v25, 17, "%s called with null localIDSClassDIdentity");
    goto LABEL_21;
  }
  dispatch_assert_queue_V2(0);
  if (!v7)
    goto LABEL_19;
LABEL_3:
  if (!v8)
  {
    v23 = sub_1000F0418();
    v24 = _NRLogIsLevelEnabled(v23, 17);

    if (!v24)
      goto LABEL_15;
    v25 = sub_1000F0418();
    _NRLogWithArgs(v25, 17, "%s called with null remoteIDSClassDIdentity");
LABEL_21:

    goto LABEL_15;
  }
  v10 = a1[5];
  v28 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "verifyAndExposeData:withSigner:error:", v10, v8, &v28));
  v17 = v28;
  if (v17 || !v11)
  {
    if (qword_1001E47B8 != -1)
      dispatch_once(&qword_1001E47B8, &stru_1001B7730);
    if (_NRLogIsLevelEnabled(qword_1001E47B0, 17))
    {
      if (qword_1001E47B8 != -1)
        dispatch_once(&qword_1001E47B8, &stru_1001B7730);
      _NRLogWithArgs(qword_1001E47B0, 17, "Failed to decrypt and check classD TLV for %@: %@", a1[6], v17);
    }
    sub_1000F188C(a1[4], 5506, CFSTR("ClassD BT<%@>: %@"), v18, v19, v20, v21, v22, a1[6]);
  }
  else
  {
    sub_1000F188C(a1[4], 5505, CFSTR("ClassD BT<%@>"), v12, v13, v14, v15, v16, a1[6]);
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_15:
}

void sub_1000F301C(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int v25;
  id v26;
  id v27;
  int IsLevelEnabled;
  id v29;

  v8 = a3;
  v9 = a6;
  v10 = a1[4];
  if (v10)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v10 + 16));
    if (v8)
      goto LABEL_3;
LABEL_19:
    v27 = sub_1000F0418();
    IsLevelEnabled = _NRLogIsLevelEnabled(v27, 17);

    if (!IsLevelEnabled)
      goto LABEL_15;
    v26 = sub_1000F0418();
    _NRLogWithArgs(v26, 17, "%s called with null localIDSClassCIdentity");
    goto LABEL_21;
  }
  dispatch_assert_queue_V2(0);
  if (!v8)
    goto LABEL_19;
LABEL_3:
  if (!v9)
  {
    v24 = sub_1000F0418();
    v25 = _NRLogIsLevelEnabled(v24, 17);

    if (!v25)
      goto LABEL_15;
    v26 = sub_1000F0418();
    _NRLogWithArgs(v26, 17, "%s called with null remoteIDSClassCIdentity");
LABEL_21:

    goto LABEL_15;
  }
  v11 = a1[5];
  v29 = 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "verifyAndExposeData:withSigner:error:", v11, v9, &v29));
  v18 = v29;
  if (v18 || !v12)
  {
    if (qword_1001E47B8 != -1)
      dispatch_once(&qword_1001E47B8, &stru_1001B7730);
    if (_NRLogIsLevelEnabled(qword_1001E47B0, 17))
    {
      if (qword_1001E47B8 != -1)
        dispatch_once(&qword_1001E47B8, &stru_1001B7730);
      _NRLogWithArgs(qword_1001E47B0, 17, "Failed to decrypt and check classC TLV for %@: %@", a1[6], v18);
    }
    sub_1000F188C(a1[4], 5506, CFSTR("ClassC BT<%@>: %@"), v19, v20, v21, v22, v23, a1[6]);
  }
  else
  {
    sub_1000F188C(a1[4], 5505, CFSTR("ClassC BT<%@>"), v13, v14, v15, v16, v17, a1[6]);
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_15:
}

void sub_1000F321C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int v26;
  id v27;
  id v28;
  int IsLevelEnabled;
  id v30;

  v9 = a4;
  v10 = a7;
  v11 = a1[4];
  if (v11)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v11 + 16));
    if (v9)
      goto LABEL_3;
LABEL_25:
    v28 = sub_1000F0418();
    IsLevelEnabled = _NRLogIsLevelEnabled(v28, 17);

    if (!IsLevelEnabled)
      goto LABEL_21;
    v27 = sub_1000F0418();
    _NRLogWithArgs(v27, 17, "%s called with null localIDSClassAIdentity");
    goto LABEL_27;
  }
  dispatch_assert_queue_V2(0);
  if (!v9)
    goto LABEL_25;
LABEL_3:
  if (!v10)
  {
    v25 = sub_1000F0418();
    v26 = _NRLogIsLevelEnabled(v25, 17);

    if (!v26)
      goto LABEL_21;
    v27 = sub_1000F0418();
    _NRLogWithArgs(v27, 17, "%s called with null remoteIDSClassAIdentity");
LABEL_27:

    goto LABEL_21;
  }
  v12 = a1[5];
  v30 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "verifyAndExposeData:withSigner:error:", v12, v10, &v30));
  v19 = v30;
  if (v19 || !v13)
  {
    if (qword_1001E47B8 != -1)
      dispatch_once(&qword_1001E47B8, &stru_1001B7730);
    if (_NRLogIsLevelEnabled(qword_1001E47B0, 16))
    {
      if (qword_1001E47B8 != -1)
        dispatch_once(&qword_1001E47B8, &stru_1001B7730);
      _NRLogWithArgs(qword_1001E47B0, 16, "%s%.30s:%-4d Failed to decrypt and check classA TLV for BT<%@>: %@, remotePublicClassAKeys=%@", "", "-[NRDIDSKeyManager decryptRemoteClassAKeysEncryptedWithIDS:bluetoothUUID:decryptCompletionBlock:]_block_invoke", 697, a1[6], v19, v13);
    }
    if (qword_1001E47B8 != -1)
      dispatch_once(&qword_1001E47B8, &stru_1001B7730);
    if (_NRLogIsLevelEnabled(qword_1001E47B0, 17))
    {
      if (qword_1001E47B8 != -1)
        dispatch_once(&qword_1001E47B8, &stru_1001B7730);
      _NRLogWithArgs(qword_1001E47B0, 17, "Failed to decrypt and check classA TLV for %@: %@", a1[6], v19);
    }
    sub_1000F188C(a1[4], 5506, CFSTR("ClassA BT<%@>: %@"), v20, v21, v22, v23, v24, a1[6]);
  }
  else
  {
    sub_1000F188C(a1[4], 5505, CFSTR("ClassA BT<%@>"), v14, v15, v16, v17, v18, a1[6]);
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_21:
}

id sub_1000F4064(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  void *v13;
  void *v14;
  id v16;
  int IsLevelEnabled;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
LABEL_23:
    v9 = 0;
    goto LABEL_20;
  }
  if (!v3)
  {
    v16 = sub_1000F4234();
    IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

    if (IsLevelEnabled)
    {
      v18 = sub_1000F4234();
      _NRLogWithArgs(v18, 17, "%s called with null asName", "-[NRApplicationServiceManager copyResolverPublicKeysForASName:]");

    }
    goto LABEL_23;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v3));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v6);
        v12 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        if (v12)
          v13 = *(void **)(v12 + 40);
        else
          v13 = 0;
        v14 = (void *)sub_1000F4274(v13);
        if (v14)
        {
          if (!v9)
            v9 = objc_alloc_init((Class)NSMutableArray);
          if ((objc_msgSend(v9, "containsObject:", v14) & 1) == 0)
            objc_msgSend(v9, "addObject:", v14);
        }

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }

LABEL_20:
  return v9;
}

id sub_1000F4234()
{
  if (qword_1001E47E8 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  return (id)qword_1001E47E0;
}

uint64_t sub_1000F4274(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD iterate_block[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v1 = a1;
  v2 = nw_agent_client_copy_parameters();
  v3 = nw_parameters_copy_default_protocol_stack(v2);
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_1000F4370;
  v11 = sub_1000F4380;
  v12 = 0;
  iterate_block[0] = _NSConcreteStackBlock;
  iterate_block[1] = 3221225472;
  iterate_block[2] = sub_1000F4388;
  iterate_block[3] = &unk_1001B77E8;
  iterate_block[4] = &v7;
  nw_protocol_stack_iterate_application_protocols(v3, iterate_block);
  if (v8[5])
    v4 = nw_quic_options_copy_local_public_key();
  else
    v4 = 0;
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1000F4358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F4370(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000F4380(uint64_t a1)
{

}

void sub_1000F4388(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  _BOOL4 is_quic;
  NSObject *v7;

  v4 = a2;
  v5 = v4;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v7 = v4;
    is_quic = nw_protocol_options_is_quic(v4);
    v5 = v7;
    if (is_quic)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      v5 = v7;
    }
  }

}

void sub_1000F43F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E47E0;
  qword_1001E47E0 = (uint64_t)v1;

}

void sub_1000F4424(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  const char *v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *application_service;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[2];
  _QWORD v24[2];

  v5 = a2;
  v6 = a3;
  v7 = sub_1000F4AFC((id *)[NRASMListenRequest alloc], v5);
  v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 48);
    v10 = sub_1000F4990((uint64_t)v9);
    v11 = qword_1001E47E8;
    if (v10)
    {
      v12 = v10;
      if (qword_1001E47E8 != -1)
        dispatch_once(&qword_1001E47E8, &stru_1001B7808);
      if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
      {
        if (qword_1001E47E8 != -1)
          dispatch_once(&qword_1001E47E8, &stru_1001B7808);
        v13 = v9[2];
        v14 = (id)qword_1001E47E0;
        _NRLogWithArgs(v14, 0, "%s%.30s:%-4d received start advertise request for %@ (%p) from %@", "", "-[NRApplicationServiceManager setupListenerAgent]_block_invoke", 684, v12, v5, v13);

      }
      v15 = *(_QWORD *)(a1 + 32);
      if (v15)
        v16 = *(void **)(v15 + 24);
      else
        v16 = 0;
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v9, v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v24[0] = 0;
      v24[1] = 0;
      objc_msgSend(v17, "getUUIDBytes:", v24);
      application_service = (void *)nw_endpoint_create_application_service(objc_msgSend(v12, "UTF8String"), v24);
      v23[0] = 0;
      v23[1] = 0;
      v19 = *(_QWORD *)(a1 + 32);
      if (v19)
        v20 = *(void **)(v19 + 88);
      else
        v20 = 0;
      objc_msgSend(v20, "getUUIDBytes:", v23);
      v21 = nw_endpoint_set_agent_identifier(application_service, v23);
      v22 = (void *)nw_array_create(v21);
      nw_array_append(v22, application_service);
      (*((void (**)(id, void *))v6 + 2))(v6, v22);
      sub_1000F4D1C(*(id **)(a1 + 32));

      goto LABEL_22;
    }
  }
  else
  {
    v11 = qword_1001E47E8;
  }
  if (v11 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
  {
    if (qword_1001E47E8 != -1)
      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d received start advertise request without an appsvc name", "", "-[NRApplicationServiceManager setupListenerAgent]_block_invoke", 681);
  }
  v12 = 0;
LABEL_22:

}

void sub_1000F46DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  id v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(void **)(v4 + 24);
  else
    v5 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allValues"));
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v10);
        if (v11)
        {
          if ((id)v11[5] == v3)
            goto LABEL_16;
        }
        else if (!v3)
        {
LABEL_16:
          v13 = v11;

          if (!v11)
            goto LABEL_26;
          v14 = sub_1000F4990((uint64_t)v13);
          if (qword_1001E47E8 != -1)
            dispatch_once(&qword_1001E47E8, &stru_1001B7808);
          if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
          {
            if (qword_1001E47E8 != -1)
              dispatch_once(&qword_1001E47E8, &stru_1001B7808);
            v15 = v13[2];
            v16 = (id)qword_1001E47E0;
            _NRLogWithArgs(v16, 0, "%s%.30s:%-4d received stop advertise request for %@ (%p) from %@", "", "-[NRApplicationServiceManager setupListenerAgent]_block_invoke_2", 712, v14, v3, v15, (_QWORD)v19);

          }
          v17 = *(_QWORD *)(a1 + 32);
          if (v17)
            v18 = *(void **)(v17 + 24);
          else
            v18 = 0;
          objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, v14);

          goto LABEL_32;
        }
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v12 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      v8 = v12;
      if (v12)
        continue;
      break;
    }
  }

LABEL_26:
  if (qword_1001E47E8 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
  {
    if (qword_1001E47E8 != -1)
      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d no listen request for client", "", "-[NRApplicationServiceManager setupListenerAgent]_block_invoke_2", 707);
  }
LABEL_32:

}

id sub_1000F4990(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  const char *application_service_name;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  id v15;
  int IsLevelEnabled;
  id v17;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v2 = *(void **)(a1 + 24);
      if (v2)
        return v2;
      v3 = objc_opt_class(NRASMBrowseRequest);
      if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
      {
        v4 = nw_agent_client_copy_browse_descriptor(*(_QWORD *)(a1 + 40));
        if (v4)
        {
          v5 = v4;
          application_service_name = nw_browse_descriptor_get_application_service_name(v4);
          goto LABEL_13;
        }
LABEL_15:
        v13 = 0;
        goto LABEL_16;
      }
      v7 = objc_opt_class(NRASMResolveRequest);
      if ((objc_opt_isKindOfClass(a1, v7) & 1) != 0)
      {
        v8 = nw_agent_client_copy_endpoint(*(_QWORD *)(a1 + 40));
        if (!v8)
          goto LABEL_15;
        v5 = (void *)v8;
        application_service_name = (const char *)nw_endpoint_get_application_service_name(v8);
      }
      else
      {
        v9 = objc_opt_class(NRASMListenRequest);
        if ((objc_opt_isKindOfClass(a1, v9) & 1) == 0)
          goto LABEL_17;
        v10 = nw_agent_client_copy_advertise_descriptor(*(_QWORD *)(a1 + 40));
        if (!v10)
          goto LABEL_15;
        v5 = v10;
        application_service_name = nw_advertise_descriptor_get_application_service_name(v10);
      }
LABEL_13:
      v11 = application_service_name;

      if (v11)
      {
        v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
        v13 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v12;
LABEL_16:

      }
LABEL_17:
      v2 = *(void **)(a1 + 24);
      return v2;
    }
    v15 = sub_1000F4234();
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

    if (IsLevelEnabled)
    {
      v17 = sub_1000F4234();
      _NRLogWithArgs(v17, 17, "%s called with null self.client", "-[NRASMRequest copyApplicationServiceName]");

    }
  }
  return 0;
}

id *sub_1000F4AFC(id *a1, void *a2)
{
  id v4;
  id *v5;
  id *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t pid;
  id v12;
  const char *account_id;
  id v14;
  id v15;
  id v17;
  int IsLevelEnabled;
  id v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  objc_super v26;
  _QWORD v27[2];

  v4 = a2;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)NRASMRequest;
    v5 = (id *)objc_msgSendSuper2(&v26, "init");
    if (!v5)
    {
      v17 = sub_1000F4234();
      IsLevelEnabled = _NRLogIsLevelEnabled(v17, 16);

      if (IsLevelEnabled)
      {
        v19 = sub_1000F4234();
        _NRLogWithArgs(v19, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRASMRequest initWithClient:]", 70);

      }
      v20 = _os_log_pack_size(12);
      v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = __error();
      v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v23 = 136446210;
      *(_QWORD *)(v23 + 4) = "-[NRASMRequest initWithClient:]";
      v24 = sub_1000F4234();
      _NRLogAbortWithPack(v24, v21);
    }
    v6 = v5;
    objc_storeStrong(v5 + 5, a2);
    v7 = (void *)nw_agent_client_copy_path(v4);
    v27[0] = 0;
    v27[1] = 0;
    nw_path_get_client_id(v7, v27);
    v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v27);
    v9 = v6[4];
    v6[4] = v8;

    v10 = (void *)nw_agent_client_copy_parameters(v4);
    pid = nw_parameters_get_pid(v10);
    v12 = sub_100109ADC(pid, 0);
    account_id = (const char *)nw_parameters_get_account_id(v10);
    if (account_id && !strcmp(account_id, "com.apple.network.local-asquic"))
      *((_BYTE *)v6 + 8) = 1;
    v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@"), v12);
    v15 = v6[2];
    v6[2] = v14;

    a1 = v6;
  }

  return a1;
}

void sub_1000F4D1C(id *a1)
{
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *j;
  uint64_t v22;
  id *v23;
  id v24;
  id v25;
  id obj;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD block[6];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  _BYTE v44[128];

  if (a1)
  {
    v1 = a1;
    v24 = objc_alloc_init((Class)NSMutableArray);
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v1[7];
    v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v39;
      v22 = *(_QWORD *)v39;
      v23 = v1;
      do
      {
        v5 = 0;
        v25 = v3;
        do
        {
          if (*(_QWORD *)v39 != v4)
            objc_enumerationMutation(obj);
          v6 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v5);
          v7 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[3], "objectForKeyedSubscript:", v6));
          if (v7)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[7], "objectForKeyedSubscript:", v6));
            if (v8)
            {
              v9 = nw_array_create();
              v28 = v8;
              nw_array_append(v9, v8);
              v27 = (void *)v9;
              (*(void (**)(void))(v7[6] + 16))();
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              v10 = v1[6];
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
              if (v11)
              {
                v12 = v11;
                v13 = *(_QWORD *)v35;
                do
                {
                  for (i = 0; i != v12; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v35 != v13)
                      objc_enumerationMutation(v10);
                    v15 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
                    if (v15)
                      v16 = *(NSObject **)(v15 + 64);
                    else
                      v16 = 0;
                    block[0] = _NSConcreteStackBlock;
                    block[1] = 3221225472;
                    block[2] = sub_1000F5058;
                    block[3] = &unk_1001B8778;
                    block[4] = v15;
                    block[5] = v6;
                    dispatch_async(v16, block);
                  }
                  v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
                }
                while (v12);
              }

              objc_msgSend(v24, "addObject:", v6);
              v4 = v22;
              v1 = v23;
              v3 = v25;
              v8 = v28;
            }

          }
          else
          {
            notify_post((const char *)objc_msgSend(v6, "UTF8String"));
          }

          v5 = (char *)v5 + 1;
        }
        while (v5 != v3);
        v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
      }
      while (v3);
    }

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v17 = v24;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v42, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v30;
      do
      {
        for (j = 0; j != v19; j = (char *)j + 1)
        {
          if (*(_QWORD *)v30 != v20)
            objc_enumerationMutation(v17);
          objc_msgSend(v1[7], "setObject:forKeyedSubscript:", 0, *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)j));
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v42, 16);
      }
      while (v19);
    }

  }
}

id sub_1000F5058(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didCompleteIncomingResolveRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

void sub_1000F5064(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  const char *v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  uint64_t v26;
  NSObject *v27;
  id *v28;
  id v29;
  _QWORD block[5];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  v7 = sub_1000F4AFC((id *)[NRASMBrowseRequest alloc], v5);
  v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 48);
    v10 = sub_1000F4990((uint64_t)v9);
    v11 = qword_1001E47E8;
    if (v10)
    {
      v12 = v10;
      if (qword_1001E47E8 != -1)
        dispatch_once(&qword_1001E47E8, &stru_1001B7808);
      if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
      {
        if (qword_1001E47E8 != -1)
          dispatch_once(&qword_1001E47E8, &stru_1001B7808);
        v13 = v9[2];
        v14 = (id)qword_1001E47E0;
        _NRLogWithArgs(v14, 0, "%s%.30s:%-4d received start browse request for %@ (%p) from %@", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke", 382, v12, v5, v13);

      }
      v15 = *(_QWORD *)(a1 + 32);
      if (v15)
        v16 = *(void **)(v15 + 32);
      else
        v16 = 0;
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v12));
      if (!v17)
        v17 = objc_alloc_init((Class)NSMutableArray);
      objc_msgSend(v17, "addObject:", v9);
      v18 = *(_QWORD *)(a1 + 32);
      if (v18)
        v19 = *(void **)(v18 + 32);
      else
        v19 = 0;
      objc_msgSend(v19, "setObject:forKeyedSubscript:", v17, v12);
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v20 = *(_QWORD **)(a1 + 32);
      v29 = v5;
      v28 = v9;
      if (v20)
        v20 = (_QWORD *)v20[6];
      v21 = v20;
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v22)
      {
        v23 = v22;
        v24 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(_QWORD *)v33 != v24)
              objc_enumerationMutation(v21);
            v26 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
            if (v26)
              v27 = *(NSObject **)(v26 + 64);
            else
              v27 = 0;
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000F63F4;
            block[3] = &unk_1001B8778;
            block[4] = v26;
            v31 = v12;
            dispatch_async(v27, block);

          }
          v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v23);
      }

      v5 = v29;
      v9 = v28;
      goto LABEL_37;
    }
  }
  else
  {
    v11 = qword_1001E47E8;
  }
  if (v11 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
  {
    if (qword_1001E47E8 != -1)
      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d received start browse request without an appsvc name", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke", 379);
  }
  v12 = 0;
LABEL_37:

}

void sub_1000F53E4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD block[5];
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];

  v3 = a2;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v39 = a1;
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
    v4 = (_QWORD *)v4[4];
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v51 != v8)
          objc_enumerationMutation(v5);
        v11 = *(_QWORD *)(v39 + 32);
        if (v11)
          v12 = *(void **)(v11 + 32);
        else
          v12 = 0;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i)));
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v14 = v13;
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v47;
          while (2)
          {
            v18 = 0;
            do
            {
              if (*(_QWORD *)v47 != v17)
                objc_enumerationMutation(v14);
              v19 = *(_QWORD **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v18);
              if (v19)
              {
                if ((id)v19[5] == v3)
                  goto LABEL_7;
              }
              else if (!v3)
              {
LABEL_7:
                v10 = v19;

                if (!v19)
                  goto LABEL_8;

                v21 = sub_1000F4990((uint64_t)v10);
                if (v21)
                {
                  if (qword_1001E47E8 != -1)
                    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                  if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
                  {
                    if (qword_1001E47E8 != -1)
                      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                    v22 = v10[2];
                    v23 = (id)qword_1001E47E0;
                    _NRLogWithArgs(v23, 0, "%s%.30s:%-4d received stop browse request for %@ (%p) from %@", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_3", 421, v21, v3, v22);

                  }
                  v24 = *(_QWORD *)(v39 + 32);
                  if (v24)
                    v25 = *(void **)(v24 + 32);
                  else
                    v25 = 0;
                  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v21));
                  objc_msgSend(v26, "removeObject:", v10);
                  if (!objc_msgSend(v26, "count"))
                  {
                    v27 = *(_QWORD *)(v39 + 32);
                    if (v27)
                      v28 = *(void **)(v27 + 32);
                    else
                      v28 = 0;
                    objc_msgSend(v28, "setObject:forKeyedSubscript:", 0, v21);
                    v44 = 0u;
                    v45 = 0u;
                    v42 = 0u;
                    v43 = 0u;
                    v29 = *(_QWORD **)(v39 + 32);
                    v37 = v26;
                    v38 = v10;
                    if (v29)
                      v29 = (_QWORD *)v29[6];
                    v30 = v29;
                    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
                    if (v31)
                    {
                      v32 = v31;
                      v33 = *(_QWORD *)v43;
                      do
                      {
                        for (j = 0; j != v32; j = (char *)j + 1)
                        {
                          if (*(_QWORD *)v43 != v33)
                            objc_enumerationMutation(v30);
                          v35 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)j);
                          if (v35)
                            v36 = *(NSObject **)(v35 + 64);
                          else
                            v36 = 0;
                          block[0] = _NSConcreteStackBlock;
                          block[1] = 3221225472;
                          block[2] = sub_1000F63E8;
                          block[3] = &unk_1001B8778;
                          block[4] = v35;
                          v41 = v21;
                          dispatch_async(v36, block);

                        }
                        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
                      }
                      while (v32);
                    }

                    v26 = v37;
                    v10 = v38;
                  }

                }
                else
                {
                  if (qword_1001E47E8 != -1)
                    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
                  {
                    if (qword_1001E47E8 != -1)
                      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d received stop browse request without an appsvc name", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_3", 418);
                  }
                }

                goto LABEL_67;
              }
              v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            v20 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
            v16 = v20;
            if (v20)
              continue;
            break;
          }
        }

LABEL_8:
        ;
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
    }
    while (v7);
  }

  if (qword_1001E47E8 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
  {
    if (qword_1001E47E8 != -1)
      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d no browse request for client", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_3", 412);
  }
LABEL_67:

}

void sub_1000F5928(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  const char *v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *i;
  uint64_t v38;
  NSObject *v39;
  id v40;
  id v41;
  _QWORD block[5];
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];

  v5 = a2;
  v6 = a3;
  v7 = sub_1000F4AFC((id *)[NRASMResolveRequest alloc], v5);
  v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 56);
    v10 = sub_1000F4990((uint64_t)v9);
    v11 = qword_1001E47E8;
    if (v10)
    {
      v12 = v10;
      if (qword_1001E47E8 != -1)
        dispatch_once(&qword_1001E47E8, &stru_1001B7808);
      v41 = v6;
      if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
      {
        if (qword_1001E47E8 != -1)
          dispatch_once(&qword_1001E47E8, &stru_1001B7808);
        v13 = v9[2];
        v14 = (id)qword_1001E47E0;
        _NRLogWithArgs(v14, 0, "%s%.30s:%-4d received start resolve request for %@ (%p) from %@", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_5", 447, v12, v5, v13);

        v6 = v41;
      }
      v15 = *(_QWORD *)(a1 + 32);
      if (v15)
        v16 = *(void **)(v15 + 40);
      else
        v16 = 0;
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v12));
      if (!v17)
        v17 = objc_alloc_init((Class)NSMutableArray);
      v40 = v5;
      if (objc_msgSend(v17, "count"))
      {
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v18 = v17;
        v19 = v17;
        v20 = (char *)objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v49;
LABEL_16:
          if (*(_QWORD *)v49 == v22)
          {
            v23 = *((_QWORD *)&v48 + 1);
            while (*(_QWORD *)v23 && *(_BYTE *)(*(_QWORD *)v23 + 48))
            {
              v23 += 8;
              if (!--v21)
                goto LABEL_28;
            }
          }
          else
          {
            v24 = 0;
            while (1)
            {
              if (*(_QWORD *)v49 != v22)
                objc_enumerationMutation(v19);
              v25 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v24);
              if (!v25 || !*(_BYTE *)(v25 + 48))
                break;
              if (v21 == (char *)++v24)
              {
LABEL_28:
                v21 = (char *)objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
                if (v21)
                  goto LABEL_16;
                goto LABEL_29;
              }
            }
          }

          objc_msgSend(v19, "addObject:", v9);
          v28 = *(_QWORD *)(a1 + 32);
          if (v28)
            v29 = *(void **)(v28 + 40);
          else
            v29 = 0;
          objc_msgSend(v29, "setObject:forKeyedSubscript:", v19, v12);
          if (qword_1001E47E8 != -1)
            dispatch_once(&qword_1001E47E8, &stru_1001B7808);
          v5 = v40;
          if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
          {
            if (qword_1001E47E8 != -1)
              dispatch_once(&qword_1001E47E8, &stru_1001B7808);
            _NRLogWithArgs(qword_1001E47E0, 0, "%s%.30s:%-4d already has resolve request for %@ (%p)", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_5", 473, v12, v40);
          }
          goto LABEL_57;
        }
LABEL_29:

        objc_msgSend(v19, "addObject:", v9);
        v26 = *(_QWORD *)(a1 + 32);
        if (v26)
          v27 = *(void **)(v26 + 40);
        else
          v27 = 0;
        objc_msgSend(v27, "setObject:forKeyedSubscript:", v19, v12);
        v17 = v18;
      }
      else
      {
        objc_msgSend(v17, "addObject:", v9);
        v30 = *(_QWORD *)(a1 + 32);
        if (v30)
          v31 = *(void **)(v30 + 40);
        else
          v31 = 0;
        objc_msgSend(v31, "setObject:forKeyedSubscript:", v17, v12);
      }
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v32 = *(_QWORD **)(a1 + 32);
      if (v32)
        v32 = (_QWORD *)v32[6];
      v33 = v32;
      v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
      if (v34)
      {
        v35 = v34;
        v36 = *(_QWORD *)v45;
        do
        {
          for (i = 0; i != v35; i = (char *)i + 1)
          {
            if (*(_QWORD *)v45 != v36)
              objc_enumerationMutation(v33);
            v38 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
            if (v38)
              v39 = *(NSObject **)(v38 + 64);
            else
              v39 = 0;
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000F63DC;
            block[3] = &unk_1001B8778;
            block[4] = v38;
            v43 = v12;
            dispatch_async(v39, block);

          }
          v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
        }
        while (v35);
      }

      v5 = v40;
      v6 = v41;
      v18 = v17;
LABEL_57:

      goto LABEL_66;
    }
  }
  else
  {
    v11 = qword_1001E47E8;
  }
  if (v11 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
  {
    if (qword_1001E47E8 != -1)
      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d received start resolve request without an appsvc name", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_5", 444);
  }
  v12 = 0;
LABEL_66:

}

void sub_1000F5E8C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *j;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD block[5];
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];

  v3 = a2;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v39 = a1;
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
    v4 = (_QWORD *)v4[5];
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v51 != v8)
          objc_enumerationMutation(v5);
        v11 = *(_QWORD *)(v39 + 32);
        if (v11)
          v12 = *(void **)(v11 + 40);
        else
          v12 = 0;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i)));
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v14 = v13;
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v47;
          while (2)
          {
            v18 = 0;
            do
            {
              if (*(_QWORD *)v47 != v17)
                objc_enumerationMutation(v14);
              v19 = *(_QWORD **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v18);
              if (v19)
              {
                if ((id)v19[5] == v3)
                  goto LABEL_7;
              }
              else if (!v3)
              {
LABEL_7:
                v10 = v19;

                if (!v19)
                  goto LABEL_8;

                v21 = sub_1000F4990((uint64_t)v10);
                if (v21)
                {
                  if (qword_1001E47E8 != -1)
                    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                  if (_NRLogIsLevelEnabled(qword_1001E47E0, 0))
                  {
                    if (qword_1001E47E8 != -1)
                      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                    v22 = v10[2];
                    v23 = (id)qword_1001E47E0;
                    _NRLogWithArgs(v23, 0, "%s%.30s:%-4d received stop resolve request for %@ (%p) from %@", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_7", 500, v21, v3, v22);

                  }
                  v24 = *(_QWORD *)(v39 + 32);
                  if (v24)
                    v25 = *(void **)(v24 + 40);
                  else
                    v25 = 0;
                  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", v21));
                  objc_msgSend(v26, "removeObject:", v10);
                  if (!objc_msgSend(v26, "count"))
                  {
                    v27 = *(_QWORD *)(v39 + 32);
                    if (v27)
                      v28 = *(void **)(v27 + 40);
                    else
                      v28 = 0;
                    objc_msgSend(v28, "setObject:forKeyedSubscript:", 0, v21);
                    v44 = 0u;
                    v45 = 0u;
                    v42 = 0u;
                    v43 = 0u;
                    v29 = *(_QWORD **)(v39 + 32);
                    v37 = v26;
                    v38 = v10;
                    if (v29)
                      v29 = (_QWORD *)v29[6];
                    v30 = v29;
                    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
                    if (v31)
                    {
                      v32 = v31;
                      v33 = *(_QWORD *)v43;
                      do
                      {
                        for (j = 0; j != v32; j = (char *)j + 1)
                        {
                          if (*(_QWORD *)v43 != v33)
                            objc_enumerationMutation(v30);
                          v35 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)j);
                          if (v35)
                            v36 = *(NSObject **)(v35 + 64);
                          else
                            v36 = 0;
                          block[0] = _NSConcreteStackBlock;
                          block[1] = 3221225472;
                          block[2] = sub_1000F63D0;
                          block[3] = &unk_1001B8778;
                          block[4] = v35;
                          v41 = v21;
                          dispatch_async(v36, block);

                        }
                        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
                      }
                      while (v32);
                    }

                    v26 = v37;
                    v10 = v38;
                  }

                }
                else
                {
                  if (qword_1001E47E8 != -1)
                    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
                  {
                    if (qword_1001E47E8 != -1)
                      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
                    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d received stop resolve request without an appsvc name", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_7", 497);
                  }
                }

                goto LABEL_67;
              }
              v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            v20 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
            v16 = v20;
            if (v20)
              continue;
            break;
          }
        }

LABEL_8:
        ;
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
    }
    while (v7);
  }

  if (qword_1001E47E8 != -1)
    dispatch_once(&qword_1001E47E8, &stru_1001B7808);
  if (_NRLogIsLevelEnabled(qword_1001E47E0, 16))
  {
    if (qword_1001E47E8 != -1)
      dispatch_once(&qword_1001E47E8, &stru_1001B7808);
    _NRLogWithArgs(qword_1001E47E0, 16, "%s%.30s:%-4d no resolve request for client", "", "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_7", 491);
  }
LABEL_67:

}

id sub_1000F63D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didStopResolveRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

id sub_1000F63DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didStartResolveRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

id sub_1000F63E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didStopBrowseRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

id sub_1000F63F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didStartBrowseRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

void sub_1000F6A3C(uint64_t a1, uint64_t a2)
{
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  id *v10;

  if (a1 && !*(_BYTE *)(a1 + 9))
  {
    *(_BYTE *)(a1 + 9) = 1;
    v3 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 56), a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v3, 1);

    if (IsLevelEnabled)
    {
      v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 56), v5);
      _NRLogWithArgs(v6, 1, "%s%.30s:%-4d %@ cancel", "", "-[NRApplicationServiceClient cancel]", 828, a1);

    }
    objc_opt_self(NRApplicationServiceManager);
    if (qword_1001E47D8 != -1)
      dispatch_once(&qword_1001E47D8, &stru_1001B7770);
    v7 = (void *)qword_1001E47D0;
    if (qword_1001E47D0)
    {
      v8 = *(NSObject **)(qword_1001E47D0 + 8);
      v9 = (id)a1;
      v10 = v7;
      dispatch_assert_queue_V2(v8);
      objc_msgSend(v10[6], "removeObject:", v9);

    }
  }
}

void sub_1000F6B60(id a1)
{
  NRApplicationServiceManager *v1;
  void *v2;

  v1 = objc_alloc_init(NRApplicationServiceManager);
  v2 = (void *)qword_1001E47D0;
  qword_1001E47D0 = (uint64_t)v1;

}

id sub_1000F6B88(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didStartBrowseRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

id sub_1000F6B94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didStartResolveRequestForASName:asClient:", *(_QWORD *)(a1 + 40));
}

nw_endpoint_t sub_1000F6BA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  nw_endpoint_t v8;
  id v9;
  int IsLevelEnabled;

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_10;
  if (!v3)
  {
    v9 = sub_1000F4234();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 17);

    if (IsLevelEnabled)
    {
      v6 = sub_1000F4234();
      _NRLogWithArgs(v6, 17, "%s called with null asName", "-[NRApplicationServiceManager copyListenerEndpointForASName:]");
      goto LABEL_7;
    }
LABEL_10:
    v8 = 0;
    goto LABEL_9;
  }
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "objectForKeyedSubscript:", v3));
  v6 = (id)v5;
  if (!v5)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v7 = nw_agent_client_copy_path(*(_QWORD *)(v5 + 40));
  v8 = nw_path_copy_effective_local_endpoint(v7);

LABEL_8:
LABEL_9:

  return v8;
}

id *sub_1000F6C68(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v19;
  int IsLevelEnabled;
  id v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  objc_super v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)NRApplicationServiceClient;
    v10 = (id *)objc_msgSendSuper2(&v28, "init");
    if (!v10)
    {
      v19 = sub_1000F4234();
      IsLevelEnabled = _NRLogIsLevelEnabled(v19, 16);

      if (IsLevelEnabled)
      {
        v21 = sub_1000F4234();
        _NRLogWithArgs(v21, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRApplicationServiceClient initWithDelegate:delegateQueue:nrUUID:]", 782);

      }
      v22 = _os_log_pack_size(12);
      v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      v24 = __error();
      v25 = _os_log_pack_fill(v23, v22, *v24, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v25 = 136446210;
      *(_QWORD *)(v25 + 4) = "-[NRApplicationServiceClient initWithDelegate:delegateQueue:nrUUID:]";
      v26 = sub_1000F4234();
      _NRLogAbortWithPack(v26, v23);
    }
    a1 = v10;
    do
      v11 = __ldxr(&qword_1001E3ED8);
    while (__stxr(v11 + 1, &qword_1001E3ED8));
    v10[5] = (id)v11;
    objc_storeWeak(v10 + 6, v7);
    objc_storeStrong(a1 + 8, a3);
    objc_storeStrong(a1 + 7, a4);
    v12 = objc_alloc_init((Class)NSMutableArray);
    v13 = a1[2];
    a1[2] = v12;

    v14 = objc_alloc_init((Class)NSMutableArray);
    v15 = a1[3];
    a1[3] = v14;

    v16 = objc_alloc_init((Class)NSMutableArray);
    v17 = a1[4];
    a1[4] = v16;

  }
  return a1;
}

void sub_1000F6E5C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  int IsLevelEnabled;
  id v12;

  v3 = a2;
  if (a1 && !*(_BYTE *)(a1 + 9))
  {
    v12 = v3;
    if (!v3)
    {
      v10 = sub_1000F4234();
      IsLevelEnabled = _NRLogIsLevelEnabled(v10, 17);

      v3 = 0;
      if (!IsLevelEnabled)
        goto LABEL_16;
      v5 = sub_1000F4234();
      _NRLogWithArgs(v5, 17, "%s called with null interfaceName", "-[NRApplicationServiceClient addInterfaceForApplicationService:]");
      goto LABEL_15;
    }
    objc_opt_self(NRApplicationServiceManager);
    if (qword_1001E47D8 != -1)
      dispatch_once(&qword_1001E47D8, &stru_1001B7770);
    v4 = qword_1001E47D0;
    v5 = v12;
    if (v4)
    {
      v6 = *(id *)(v4 + 64);
      if (v6)
      {

LABEL_10:
        v7 = (void *)nw_interface_create_with_name(objc_msgSend(v5, "UTF8String"));
        v8 = *(_QWORD *)(v4 + 64);
        if (v8)
          nw_agent_add_to_interface(v8, v7);
        v9 = *(_QWORD *)(v4 + 80);
        if (v9)
          nw_agent_add_to_interface(v9, v7);

        goto LABEL_15;
      }
      if (*(_QWORD *)(v4 + 80))
        goto LABEL_10;
    }
LABEL_15:

    v3 = v12;
  }
LABEL_16:

}

void sub_1000F6F8C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  if (a1 && !*(_BYTE *)(a1 + 9))
  {
    v10 = v3;
    objc_opt_self(NRApplicationServiceManager);
    if (qword_1001E47D8 != -1)
      dispatch_once(&qword_1001E47D8, &stru_1001B7770);
    v4 = qword_1001E47D0;
    v5 = v10;
    if (!v4)
      goto LABEL_14;
    v6 = *(id *)(v4 + 64);
    if (v6)
    {

    }
    else if (!*(_QWORD *)(v4 + 80))
    {
LABEL_14:

      v3 = v10;
      goto LABEL_15;
    }
    v7 = (void *)nw_interface_create_with_name(objc_msgSend(v5, "UTF8String"));
    v8 = *(_QWORD *)(v4 + 64);
    if (v8)
      nw_agent_remove_from_interface(v8, v7);
    v9 = *(_QWORD *)(v4 + 80);
    if (v9)
      nw_agent_remove_from_interface(v9, v7);

    goto LABEL_14;
  }
LABEL_15:

}

uint64_t sub_1000F7070(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  int IsLevelEnabled;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];

  v3 = a2;
  if (a1 && !*(_BYTE *)(a1 + 9))
  {
    objc_opt_self(NRApplicationServiceManager);
    if (qword_1001E47D8 != -1)
      dispatch_once(&qword_1001E47D8, &stru_1001B7770);
    v4 = qword_1001E47D0;
    v5 = v3;
    v6 = v5;
    if (v4)
    {
      if (v5)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 32), "objectForKeyedSubscript:", v5));
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v8 = v7;
        v9 = (char *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v30;
LABEL_10:
          if (*(_QWORD *)v30 == v11)
          {
            v12 = *((_QWORD *)&v29 + 1);
            while (!*(_QWORD *)v12 || !*(_BYTE *)(*(_QWORD *)v12 + 8))
            {
              v12 += 8;
              if (!--v10)
                goto LABEL_22;
            }
          }
          else
          {
            v13 = 0;
            while (1)
            {
              if (*(_QWORD *)v30 != v11)
                objc_enumerationMutation(v8);
              v14 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v13);
              if (v14)
              {
                if (*(_BYTE *)(v14 + 8))
                  break;
              }
              if (v10 == (char *)++v13)
              {
LABEL_22:
                v10 = (char *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
                if (v10)
                  goto LABEL_10;
                goto LABEL_23;
              }
            }
          }
          v4 = 1;
          v16 = v8;
        }
        else
        {
LABEL_23:

          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 40), "objectForKeyedSubscript:", v6));
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v28 = 0u;
          v16 = v15;
          v4 = (uint64_t)objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          if (v4)
          {
            v17 = *(_QWORD *)v26;
LABEL_25:
            if (*(_QWORD *)v26 == v17)
            {
              v18 = *((_QWORD *)&v25 + 1);
              while (!*(_QWORD *)v18 || !*(_BYTE *)(*(_QWORD *)v18 + 8))
              {
                v18 += 8;
                if (!--v4)
                  goto LABEL_37;
              }
            }
            else
            {
              v19 = 0;
              while (1)
              {
                if (*(_QWORD *)v26 != v17)
                  objc_enumerationMutation(v16);
                v20 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v19);
                if (v20)
                {
                  if (*(_BYTE *)(v20 + 8))
                    break;
                }
                if (v4 == ++v19)
                {
LABEL_37:
                  v4 = (uint64_t)objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
                  if (v4)
                    goto LABEL_25;
                  goto LABEL_41;
                }
              }
            }
            v4 = 1;
          }
LABEL_41:

        }
      }
      else
      {
        v22 = sub_1000F4234();
        IsLevelEnabled = _NRLogIsLevelEnabled(v22, 17);

        if (IsLevelEnabled)
        {
          v24 = sub_1000F4234();
          _NRLogWithArgs(v24, 17, "%s called with null asName", "-[NRApplicationServiceManager useOnlyLocalLinksForASName:]");

        }
        v4 = 0;
      }
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1000F81FC(_QWORD *a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = a1[4];
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "linkDidReceiveData:data:", a1[5], a1[6]);

}

void sub_1000F8248(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E47F0;
  qword_1001E47F0 = (uint64_t)v1;

}

id sub_1000F8278()
{
  if (qword_1001E47F8 != -1)
    dispatch_once(&qword_1001E47F8, &stru_1001B7828);
  return (id)qword_1001E47F0;
}

void sub_1000F82B8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  NRLinkFixedInterface *v13;
  id v14;
  id v15;
  id v16;
  __CFString *v17;
  __CFString *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id StringFromNRLinkType;
  __CFString *v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  NRLinkFixedInterface *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  int IsLevelEnabled;
  id v37;
  int v38;
  int v39;
  int v40;
  int v41;
  id v42;
  id v43;
  objc_super v44;

  v43 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nrUUID"));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "linkIsUnavailable:", *(_QWORD *)(a1 + 32));

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 && *(_BYTE *)(v4 + 32))
  {
    if (qword_1001E47F8 != -1)
      dispatch_once(&qword_1001E47F8, &stru_1001B7828);
    if (_NRLogIsLevelEnabled(qword_1001E47F0, 1))
    {
      if (qword_1001E47F8 != -1)
        dispatch_once(&qword_1001E47F8, &stru_1001B7828);
      _NRLogWithArgs(qword_1001E47F0, 1, "%s%.30s:%-4d Forcing interface availability event, as the underlying transport is still available", "", "-[NRLinkManagerFixedInterface linkIsUnavailable:]_block_invoke", 333);
    }
    v5 = *(_QWORD *)(a1 + 40);
    v6 = v43;
    if (!v5)
    {
      v29 = 0;
      goto LABEL_34;
    }
    v7 = *(id *)(v5 + 24);
    dispatch_assert_queue_V2(v7);

    if ((objc_msgSend((id)v5, "shouldCreateLinkForNRUUID:", v6) & 1) == 0)
    {
      StringFromNRLinkType = (id)createStringFromNRLinkType(*(unsigned __int8 *)(v5 + 8));
      objc_msgSend((id)v5, "reportEvent:detailsFormat:", 3017, CFSTR("unsupported link type: %@"), StringFromNRLinkType);
      v29 = 0;
      goto LABEL_33;
    }
    v42 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 56), "hostname"));
    objc_opt_self(NRIKEv2Listener);
    if (qword_1001E44D8 != -1)
      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
    v9 = (id)qword_1001E44D0;
    if (v9)
      v10 = CFSTR("62743");
    else
      v10 = 0;
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v8, v11));

    v13 = [NRLinkFixedInterface alloc];
    v14 = *(id *)(v5 + 24);
    v15 = *(id *)(v5 + 64);
    objc_opt_self(NRIKEv2Listener);
    if (qword_1001E44D8 != -1)
      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
    v16 = (id)qword_1001E44D0;
    if (v16)
      v17 = CFSTR("62743");
    else
      v17 = 0;
    v18 = v17;
    v19 = v14;
    v20 = (id)v5;
    v21 = v6;
    v22 = v15;
    StringFromNRLinkType = v12;
    v24 = v18;
    if (!v13)
    {
      v29 = 0;
      goto LABEL_31;
    }
    if (v19)
    {
      if (v21)
      {
        if ((_NRIsUUIDNonZero(v21) & 1) != 0)
        {
          if (v22)
          {
            v44.receiver = v13;
            v44.super_class = (Class)NRLinkFixedInterface;
            v25 = (char *)objc_msgSendSuper2(&v44, "initLinkWithQueue:linkDelegate:nrUUID:", v19, v20, v21);
            if (v25)
            {
              v26 = v25;
              objc_msgSend(v25, "setType:", 2);
              objc_msgSend(v26, "setSubtype:", 101);
              objc_msgSend(v26, "setLocalInterfaceName:", v22);
              objc_msgSend(v26, "setLocalOuterEndpoint:", 0);
              objc_msgSend(v26, "setRemoteOuterEndpoint:", StringFromNRLinkType);
              objc_storeStrong((id *)(v26 + 239), v17);
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "UUIDString"));
              objc_msgSend(v26, "reportEvent:details:", 3000, v27);

              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "linkDelegate"));
              objc_msgSend(v28, "linkIsAvailable:", v26);

              v13 = v26;
              v29 = v13;
            }
            else
            {
              if (qword_1001E4650 != -1)
                dispatch_once(&qword_1001E4650, &stru_1001B6990);
              v35 = (id)qword_1001E4648;
              IsLevelEnabled = _NRLogIsLevelEnabled(v35, 17);

              if (IsLevelEnabled)
              {
                if (qword_1001E4650 != -1)
                  dispatch_once(&qword_1001E4650, &stru_1001B6990);
                v37 = (id)qword_1001E4648;
                _NRLogWithArgs(v37, 17, "[NRLink initLinkWithQueue:] failed");

              }
              v13 = 0;
              v29 = 0;
            }
            goto LABEL_30;
          }
          if (qword_1001E4650 != -1)
            dispatch_once(&qword_1001E4650, &stru_1001B6990);
          v34 = (id)qword_1001E4648;
          v41 = _NRLogIsLevelEnabled(v34, 17);

          if (!v41)
          {
LABEL_61:
            v29 = 0;
LABEL_30:
            v6 = v42;
LABEL_31:

LABEL_33:
LABEL_34:

            goto LABEL_35;
          }
          if (qword_1001E4650 != -1)
            dispatch_once(&qword_1001E4650, &stru_1001B6990);
          v31 = (id)qword_1001E4648;
          _NRLogWithArgs(v31, 17, "%s called with null fixedInterfaceName");
        }
        else
        {
          if (qword_1001E4650 != -1)
            dispatch_once(&qword_1001E4650, &stru_1001B6990);
          v33 = (id)qword_1001E4648;
          v40 = _NRLogIsLevelEnabled(v33, 17);

          if (!v40)
            goto LABEL_61;
          if (qword_1001E4650 != -1)
            dispatch_once(&qword_1001E4650, &stru_1001B6990);
          v31 = (id)qword_1001E4648;
          _NRLogWithArgs(v31, 17, "called with all-zero nrUUID");
        }
      }
      else
      {
        if (qword_1001E4650 != -1)
          dispatch_once(&qword_1001E4650, &stru_1001B6990);
        v32 = (id)qword_1001E4648;
        v39 = _NRLogIsLevelEnabled(v32, 17);

        if (!v39)
          goto LABEL_61;
        if (qword_1001E4650 != -1)
          dispatch_once(&qword_1001E4650, &stru_1001B6990);
        v31 = (id)qword_1001E4648;
        _NRLogWithArgs(v31, 17, "%s called with null nrUUID");
      }
    }
    else
    {
      if (qword_1001E4650 != -1)
        dispatch_once(&qword_1001E4650, &stru_1001B6990);
      v30 = (id)qword_1001E4648;
      v38 = _NRLogIsLevelEnabled(v30, 17);

      if (!v38)
        goto LABEL_61;
      if (qword_1001E4650 != -1)
        dispatch_once(&qword_1001E4650, &stru_1001B6990);
      v31 = (id)qword_1001E4648;
      _NRLogWithArgs(v31, 17, "%s called with null queue");
    }

    goto LABEL_61;
  }
LABEL_35:

}

void sub_1000F89E0(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 9)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsSuspended:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E47F8 != -1)
      dispatch_once(&qword_1001E47F8, &stru_1001B7828);
    if (_NRLogIsLevelEnabled(qword_1001E47F0, 16))
    {
      if (qword_1001E47F8 != -1)
        dispatch_once(&qword_1001E47F8, &stru_1001B7828);
      _NRLogWithArgs(qword_1001E47F0, 16, "%s%.30s:%-4d %@: link %@ is not in suspended state anymore", "", "-[NRLinkManagerFixedInterface linkIsSuspended:]_block_invoke", 307, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000F8AF0(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 8)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsReady:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E47F8 != -1)
      dispatch_once(&qword_1001E47F8, &stru_1001B7828);
    if (_NRLogIsLevelEnabled(qword_1001E47F0, 16))
    {
      if (qword_1001E47F8 != -1)
        dispatch_once(&qword_1001E47F8, &stru_1001B7828);
      _NRLogWithArgs(qword_1001E47F0, 16, "%s%.30s:%-4d %@: link %@ is not in ready state anymore", "", "-[NRLinkManagerFixedInterface linkIsReady:]_block_invoke", 284, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000F8C00(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsAvailable:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E47F8 != -1)
      dispatch_once(&qword_1001E47F8, &stru_1001B7828);
    if (_NRLogIsLevelEnabled(qword_1001E47F0, 16))
    {
      if (qword_1001E47F8 != -1)
        dispatch_once(&qword_1001E47F8, &stru_1001B7828);
      _NRLogWithArgs(qword_1001E47F0, 16, "%s%.30s:%-4d %@: link %@ is not in initial state anymore", "", "-[NRLinkManagerFixedInterface linkIsAvailable:]_block_invoke", 261, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000F9828(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4800;
  qword_1001E4800 = (uint64_t)v1;

}

id sub_1000F9858()
{
  if (qword_1001E4808 != -1)
    dispatch_once(&qword_1001E4808, &stru_1001B7870);
  return (id)qword_1001E4800;
}

void sub_1000F9898(_QWORD *a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = a1[4];
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "linkDidReceiveData:data:", a1[5], a1[6]);

}

void sub_1000F98E4(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "linkIsUnavailable:", *(_QWORD *)(a1 + 40));

}

void sub_1000F9930(uint64_t a1)
{
  int v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  id v11;
  void *j;
  id StringFromNRLinkType;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  NRLinkQuickRelay *v22;
  id v23;
  void *v24;
  id obj;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];

  if (a1)
  {
    *(_DWORD *)(a1 + 36) = nw_path_get_status(*(nw_path_t *)(a1 + 56));
    v2 = *(_DWORD *)(a1 + 36);
    if (v2 == 2)
    {
      v3 = objc_msgSend(*(id *)(a1 + 40), "copy");
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v4 = v3;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v36;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(_QWORD *)v36 != v7)
              objc_enumerationMutation(v4);
            v9 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
            if ((objc_msgSend(v9, "ikeClassCEstablished") & 1) != 0
              || objc_msgSend(v9, "ikeClassDEstablished"))
            {
              objc_msgSend(v9, "suspend");
            }
            else
            {
              objc_msgSend(v9, "cancelWithReason:", CFSTR("No network route"));
            }
          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
        }
        while (v6);
      }

      v2 = *(_DWORD *)(a1 + 36);
    }
    if (v2 == 1)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      obj = sub_100137F48((uint64_t)NRDLocalDevice);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
      if (v10)
      {
        v11 = v10;
        v26 = *(_QWORD *)v32;
        do
        {
          for (j = 0; j != v11; j = (char *)j + 1)
          {
            if (*(_QWORD *)v32 != v26)
              objc_enumerationMutation(obj);
            v14 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j);
            v27 = 0u;
            v28 = 0u;
            v29 = 0u;
            v30 = 0u;
            v15 = *(id *)(a1 + 40);
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
            if (v16)
            {
              v17 = v16;
              v18 = *(_QWORD *)v28;
LABEL_27:
              v19 = 0;
              while (1)
              {
                if (*(_QWORD *)v28 != v18)
                  objc_enumerationMutation(v15);
                v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v19), "nrUUID"));
                v21 = objc_msgSend(v20, "isEqual:", v14);

                if ((v21 & 1) != 0)
                  break;
                if (v17 == (id)++v19)
                {
                  v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
                  if (v17)
                    goto LABEL_27;
                  goto LABEL_33;
                }
              }
            }
            else
            {
LABEL_33:

              v15 = v14;
              if ((objc_msgSend((id)a1, "shouldCreateLinkForNRUUID:", v15) & 1) != 0)
              {
                v22 = [NRLinkQuickRelay alloc];
                v23 = *(id *)(a1 + 24);
                StringFromNRLinkType = -[NRLinkQuickRelay initLinkWithQueue:linkDelegate:nrUUID:](v22, "initLinkWithQueue:linkDelegate:nrUUID:", v23, a1, v15);

                if (!StringFromNRLinkType)
                {
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
                  objc_msgSend((id)a1, "reportEvent:details:", 3017, v24);

                  StringFromNRLinkType = 0;
                }
              }
              else
              {
                StringFromNRLinkType = (id)createStringFromNRLinkType(*(unsigned __int8 *)(a1 + 8));
                objc_msgSend((id)a1, "reportEvent:detailsFormat:", 3017, CFSTR("unsupported link type: %@"), StringFromNRLinkType);
              }

            }
          }
          v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
        }
        while (v11);
      }

    }
    else
    {
      if (qword_1001E4808 != -1)
        dispatch_once(&qword_1001E4808, &stru_1001B7870);
      if (_NRLogIsLevelEnabled(qword_1001E4800, 1))
      {
        if (qword_1001E4808 != -1)
          dispatch_once(&qword_1001E4808, &stru_1001B7870);
        _NRLogWithArgs(qword_1001E4800, 1, "%s%.30s:%-4d No network to serve QuickRelay link. Deferring creation of link until we have a network", "", "-[NRLinkManagerQuickRelay createLinkIfApplicable]", 172);
      }
    }
  }
}

void sub_1000F9D48(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 8)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsReady:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4808 != -1)
      dispatch_once(&qword_1001E4808, &stru_1001B7870);
    if (_NRLogIsLevelEnabled(qword_1001E4800, 16))
    {
      if (qword_1001E4808 != -1)
        dispatch_once(&qword_1001E4808, &stru_1001B7870);
      _NRLogWithArgs(qword_1001E4800, 16, "%s%.30s:%-4d %@: link %@ is not in ready state anymore", "", "-[NRLinkManagerQuickRelay linkIsReady:]_block_invoke", 245, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000F9E58(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 9)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsSuspended:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4808 != -1)
      dispatch_once(&qword_1001E4808, &stru_1001B7870);
    if (_NRLogIsLevelEnabled(qword_1001E4800, 16))
    {
      if (qword_1001E4808 != -1)
        dispatch_once(&qword_1001E4808, &stru_1001B7870);
      _NRLogWithArgs(qword_1001E4800, 16, "%s%.30s:%-4d %@: link %@ is not in suspended state anymore", "", "-[NRLinkManagerQuickRelay linkIsSuspended:]_block_invoke", 230, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000F9F68(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsAvailable:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4808 != -1)
      dispatch_once(&qword_1001E4808, &stru_1001B7870);
    if (_NRLogIsLevelEnabled(qword_1001E4800, 16))
    {
      if (qword_1001E4808 != -1)
        dispatch_once(&qword_1001E4808, &stru_1001B7870);
      _NRLogWithArgs(qword_1001E4800, 16, "%s%.30s:%-4d %@: link %@ is not in initial state anymore", "", "-[NRLinkManagerQuickRelay linkIsAvailable:]_block_invoke", 216, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_1000FA078(__objc2_prot *a1)
{
  nw_parameters_t v2;
  char *v3;
  char *v4;
  uint64_t evaluator_for_endpoint;
  __objc2_meth_list *opt_class_meths;
  __objc2_meth_list *v7;
  __objc2_meth_list *v8;
  __objc2_meth_list *v9;
  __objc2_meth_list *v10;
  __objc2_meth_list *v11;
  __objc2_meth_list *v12;
  __objc2_meth_list *v13;
  uint64_t v14;
  __objc2_prop_list *inst_props;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_meth_list *v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  id v24;
  id v25;
  id v26;
  int IsLevelEnabled;
  id v28;
  int *v29;
  uint64_t v30;
  id v31;
  _QWORD v33[4];
  id v34;
  id location;

  v2 = nw_parameters_create();
  v3 = (char *)xpc_array_create(0, 0);
  if (!v3)
  {
    v26 = sub_1000F9858();
    IsLevelEnabled = _NRLogIsLevelEnabled(v26, 16);

    if (IsLevelEnabled)
    {
      v28 = sub_1000F9858();
      _NRLogWithArgs(v28, 16, "%s%.30s:%-4d ABORTING: xpc_array_create(%p, %u) failed", "", "nr_xpc_array_create", 56, 0, 0);

    }
    v2 = (nw_parameters_t)_os_log_pack_size(28);
    v4 = (char *)&v33[-1] - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0);
    v29 = __error();
    v30 = _os_log_pack_fill(v4, v2, *v29, &_mh_execute_header, "%{public}s xpc_array_create(%p, %u) failed");
    sub_10005ADB8(v30, (uint64_t)"nr_xpc_array_create");
    v31 = sub_1000F9858();
    _NRLogAbortWithPack(v31, v4);
    __break(1u);
LABEL_20:
    dispatch_once(&qword_1001E4808, &stru_1001B7870);
    goto LABEL_12;
  }
  v4 = v3;
  xpc_array_set_uint64(v3, 0xFFFFFFFFFFFFFFFFLL, 0x1389uLL);
  nw_parameters_set_prohibited_interface_subtypes(v2, v4);
  evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v2);
  opt_class_meths = a1->opt_class_meths;
  a1->opt_class_meths = (__objc2_meth_list *)evaluator_for_endpoint;

  v7 = a1->opt_class_meths;
  if (v7)
  {
    v8 = v7;
    v9 = a1->inst_meths;
    nw_path_evaluator_set_queue(v8, v9);

    objc_initWeak(&location, a1);
    v10 = a1->opt_class_meths;
    v11 = a1->inst_meths;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1000FA4E8;
    v33[3] = &unk_1001B7850;
    objc_copyWeak(&v34, &location);
    nw_path_evaluator_set_update_handler(v10, v11, v33);

    v12 = a1->opt_class_meths;
    nw_path_evaluator_start(v12);

    v13 = a1->opt_class_meths;
    v14 = nw_path_evaluator_copy_path(v13);
    inst_props = a1->inst_props;
    a1->inst_props = (__objc2_prop_list *)v14;

    v16 = objc_alloc((Class)APSConnection);
    v17 = APSEnvironmentProduction;
    v18 = APSConnectionOverrideNamedDelegatePort;
    v19 = a1->inst_meths;
    v20 = objc_msgSend(v16, "initWithEnvironmentName:namedDelegatePort:queue:", v17, v18, v19);
    v21 = *(void **)&a1->cb;
    *(_QWORD *)&a1->cb = v20;

    if (!*(_QWORD *)&a1->cb)
    {
      if (qword_1001E4808 != -1)
        dispatch_once(&qword_1001E4808, &stru_1001B7870);
      v22 = (id)qword_1001E4800;
      v23 = _NRLogIsLevelEnabled(v22, 17);

      if ((v23 & 1) != 0)
      {
        if (qword_1001E4808 != -1)
          dispatch_once(&qword_1001E4808, &stru_1001B7870);
        v24 = (id)qword_1001E4800;
        _NRLogWithArgs(v24, 17, "[[APSConnection alloc] initWithEnvironmentName:namedDelegatePort:queue:]");

      }
    }
    v25 = *(id *)&a1->cb;
    objc_msgSend(v25, "setDelegate:", a1);

    sub_1000FA5F4((uint64_t)a1);
    objc_destroyWeak(&v34);
    objc_destroyWeak(&location);
    goto LABEL_16;
  }
  a1 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4808 != -1)
    goto LABEL_20;
LABEL_12:
  if (_NRLogIsLevelEnabled(qword_1001E4800, 17))
  {
    if (a1[28].opt_inst_meths != (__objc2_meth_list *)-1)
      dispatch_once(&qword_1001E4808, &stru_1001B7870);
    _NRLogWithArgs(qword_1001E4800, 17, "nw_path_create_default_evaluator failed");
  }
LABEL_16:

}

void sub_1000FA4C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1000FA4E8(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 3) != 1004)
  {
    if (qword_1001E4808 != -1)
      dispatch_once(&qword_1001E4808, &stru_1001B7870);
    if (_NRLogIsLevelEnabled(qword_1001E4800, 1))
    {
      if (qword_1001E4808 != -1)
        dispatch_once(&qword_1001E4808, &stru_1001B7870);
      _NRLogWithArgs(qword_1001E4800, 1, "%s%.30s:%-4d received path update for QR link manager: %@", "", "-[NRLinkManagerQuickRelay setup]_block_invoke", 136, v6);
    }
    objc_storeStrong(v5 + 7, a2);
    sub_1000F9930((uint64_t)v5);
  }

}

void sub_1000FA5F4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (a1)
  {
    v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    v3 = objc_msgSend(*(id *)(a1 + 40), "copy");
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "nrUUID"));
          v11 = sub_10012FFF4((uint64_t)NRDLocalDevice, v10);

          if (!v11 || !v11[9])
            objc_msgSend(v9, "cancelWithReason:", CFSTR("Device has been disabled %@"), v11);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

    sub_1000F9930(a1);
  }
}

id sub_1000FBA50()
{
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  return (id)qword_1001E4818;
}

id *sub_1000FBA90(id *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id *v11;
  id v13;
  int IsLevelEnabled;
  id v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  objc_super v22;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)NRDevicePairingCandidateContext;
    v11 = (id *)objc_msgSendSuper2(&v22, "init");
    if (!v11)
    {
      v13 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v13, 16);

      if (IsLevelEnabled)
      {
        v15 = sub_1000FBA50();
        _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDevicePairingCandidateContext initWithCandidateInfo:queue:pairingManager:]", 969);

      }
      v16 = _os_log_pack_size(12);
      v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      v18 = __error();
      v19 = _os_log_pack_fill(v17, v16, *v18, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v19 = 136446210;
      *(_QWORD *)(v19 + 4) = "-[NRDevicePairingCandidateContext initWithCandidateInfo:queue:pairingManager:]";
      v20 = sub_1000FBA50();
      _NRLogAbortWithPack(v20, v17);
    }
    a1 = v11;
    objc_storeWeak(v11 + 2, v10);
    objc_storeStrong(a1 + 3, a3);
    objc_storeStrong(a1 + 4, a2);
  }

  return a1;
}

void sub_1000FBC2C(uint64_t a1, id *a2)
{
  id v3;

  objc_opt_self(a1);
  if (*a2)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Invalidating IKE Session %@", "", "+[NRDevicePairingCandidateContext invalidateIKESession:]", 949, *a2);
    }
    objc_msgSend(*a2, "setStateUpdateBlock:", 0);
    objc_msgSend(*a2, "setChildStateUpdateBlock:", 0);
    objc_msgSend(*a2, "setConfigurationUpdateBlock:", 0);
    objc_msgSend(*a2, "setTrafficSelectorUpdateBlock:", 0);
    objc_msgSend(*a2, "setAdditionalAddressesUpdateBlock:", 0);
    objc_msgSend(*a2, "setShortDPDEventBlock:", 0);
    objc_msgSend(*a2, "setRedirectEventBlock:", 0);
    objc_msgSend(*a2, "setPrivateNotifyStatusEvent:", 0);
    objc_msgSend(*a2, "disconnect");
    objc_msgSend(*a2, "invalidate");
    v3 = *a2;
    *a2 = 0;

  }
}

void sub_1000FBD84(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;
  _QWORD v5[4];
  id v6;
  id location;

  v2 = *(id *)(a1 + 120);
  if (v2)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ setting callbacks on control session", "", "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]", 1854, a1);
    }
    objc_msgSend(v2, "setClientQueue:", *(_QWORD *)(a1 + 24));
    objc_initWeak(&location, (id)a1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000FBF40;
    v5[3] = &unk_1001B79A0;
    objc_copyWeak(&v6, &location);
    objc_msgSend(v2, "setStateUpdateBlock:", v5);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000FC104;
    v3[3] = &unk_1001B79C8;
    objc_copyWeak(&v4, &location);
    objc_msgSend(v2, "setPrivateNotifyStatusEvent:", v3);
    objc_destroyWeak(&v4);
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }

}

void sub_1000FBF14(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1000FBF40(uint64_t a1, uint64_t a2, void *a3)
{
  id *WeakRetained;
  id v6;

  v6 = a3;
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d stateUpdateBlock", "", "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]_block_invoke", 1859);
  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d %@ Control session received state update %zu error %@", "", "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]_block_invoke", 1865, WeakRetained, a2, v6);
    }
    if (a2 == 2)
    {
      sub_1000FD220((uint64_t)WeakRetained);
    }
    else if (a2 == 3 || v6)
    {
      sub_1000FBC2C((uint64_t)NRDevicePairingCandidateContext, WeakRetained + 15);
      if (WeakRetained[18] || WeakRetained[19] || WeakRetained[20])
        sub_1000FD83C(WeakRetained);
    }
  }

}

void sub_1000FC104(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  int v14;
  int v15;
  id v16;
  id v17;
  int IsLevelEnabled;
  id v19;
  id v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[6];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[128];
  id v39;

  v22 = a2;
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d privateNotifyStatusEvent", "", "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]_block_invoke_2", 1881);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v21 = objc_msgSend(objc_alloc((Class)NSSortDescriptor), "initWithKey:ascending:", CFSTR("notifyStatus"), 1);
    v39 = v21;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "sortedArrayUsingDescriptors:", v4));

    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d %@ Control ssession got private notifies %@", "", "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]_block_invoke_2", 1890, WeakRetained, v5);
    }
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v24;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v24 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v9);
          v11 = objc_msgSend(v10, "notifyStatus");
          v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "notifyData"));
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          if ((_NRLogIsLevelEnabled(qword_1001E4818, 0) & 1) != 0)
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            v13 = (id)qword_1001E4818;
            _NRLogWithArgs(v13, 0, "%s%.30s:%-4d %@ Received notify code %u len %llu for %s session", "", "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]", 1656, WeakRetained, v11, objc_msgSend(v12, "length"), "control");

          }
          if ((int)v11 > 50700)
          {
            if ((int)v11 <= 50900)
            {
              if (((_DWORD)v11 - 50801) > 0xB || ((1 << ((_BYTE)v11 - 113)) & 0xC03) == 0)
              {
                v15 = -50701;
LABEL_53:
                if (((_DWORD)v11 + v15) >= 2)
                {
LABEL_46:
                  if (qword_1001E4820 != -1)
                    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                  if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
                  {
                    if (qword_1001E4820 != -1)
                      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                    v16 = (id)qword_1001E4818;
                    _NRLogWithArgs(v16, 0, "%s%.30s:%-4d %@ Received unknown notify code %u", "", "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]", 1806, WeakRetained, v11);

                  }
                  goto LABEL_60;
                }
              }
              goto LABEL_54;
            }
            if ((int)v11 <= 51400)
            {
              if ((_DWORD)v11 != 50901)
              {
                v14 = 51301;
                goto LABEL_45;
              }
            }
            else if ((_DWORD)v11 != 51401 && (_DWORD)v11 != 51501)
            {
              v14 = 51601;
              goto LABEL_45;
            }
LABEL_54:
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
            {
              if (qword_1001E4820 != -1)
                dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
              _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d %@ Control session received unexpected notify code %u", "", "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]", 1749, WeakRetained, v11);
            }
            goto LABEL_60;
          }
          if ((int)v11 <= 50350)
          {
            if (((_DWORD)v11 - 48601) >= 7 && (_DWORD)v11)
            {
              v14 = 48701;
LABEL_45:
              if ((_DWORD)v11 != v14)
                goto LABEL_46;
            }
            goto LABEL_54;
          }
          switch((int)v11)
          {
            case 50401:
            case 50402:
            case 50403:
            case 50411:
            case 50412:
            case 50413:
            case 50503:
            case 50504:
            case 50505:
              goto LABEL_54;
            case 50404:
            case 50405:
            case 50406:
            case 50407:
            case 50408:
            case 50409:
            case 50410:
            case 50414:
            case 50415:
            case 50416:
            case 50417:
            case 50418:
            case 50419:
            case 50420:
            case 50421:
            case 50422:
            case 50423:
            case 50424:
            case 50425:
            case 50426:
            case 50427:
            case 50428:
            case 50429:
            case 50430:
            case 50431:
            case 50432:
            case 50433:
            case 50434:
            case 50435:
            case 50436:
            case 50437:
            case 50438:
            case 50439:
            case 50440:
            case 50441:
            case 50442:
            case 50443:
            case 50444:
            case 50445:
            case 50446:
            case 50447:
            case 50448:
            case 50449:
            case 50450:
            case 50451:
            case 50452:
            case 50453:
            case 50454:
            case 50455:
            case 50456:
            case 50457:
            case 50458:
            case 50459:
            case 50460:
            case 50461:
            case 50462:
            case 50463:
            case 50464:
            case 50465:
            case 50466:
            case 50467:
            case 50468:
            case 50469:
            case 50470:
            case 50471:
            case 50472:
            case 50473:
            case 50474:
            case 50475:
            case 50476:
            case 50477:
            case 50478:
            case 50479:
            case 50480:
            case 50481:
            case 50482:
            case 50483:
            case 50484:
            case 50485:
            case 50486:
            case 50487:
            case 50488:
            case 50489:
            case 50490:
            case 50491:
            case 50492:
            case 50493:
            case 50494:
            case 50495:
            case 50496:
            case 50497:
            case 50498:
            case 50499:
            case 50500:
              goto LABEL_46;
            case 50501:
            case 50502:
              v34 = 0;
              v35 = &v34;
              v36 = 0x2020000000;
              v37 = 0;
              v28 = 0;
              v29 = &v28;
              v30 = 0x3032000000;
              v31 = sub_1000FC98C;
              v32 = sub_1000FC99C;
              v33 = 0;
              v27[0] = _NSConcreteStackBlock;
              v27[1] = 3221225472;
              v27[2] = sub_1000FC9A4;
              v27[3] = &unk_1001B7E78;
              v27[4] = &v34;
              v27[5] = &v28;
              if ((NRTLVParse(v12, v27) & 1) != 0)
              {
                if ((_DWORD)v11 == 50502)
                {
                  sub_1000FCB8C((uint64_t)WeakRetained, v35[3], (void *)v29[5]);
                }
                else
                {
                  v17 = sub_1000FBA50();
                  IsLevelEnabled = _NRLogIsLevelEnabled(v17, 16);

                  if (IsLevelEnabled)
                  {
                    v19 = sub_1000FBA50();
                    _NRLogWithArgs(v19, 16, "%s%.30s:%-4d Unexpectedly received auth method request", "", "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]", 1702);

                  }
                }
              }
              _Block_object_dispose(&v28, 8);

              _Block_object_dispose(&v34, 8);
              break;
            default:
              v15 = -50351;
              goto LABEL_53;
          }
LABEL_60:

          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v20 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
        v7 = v20;
      }
      while (v20);
    }

  }
}

void sub_1000FC7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FC98C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000FC99C(uint64_t a1)
{

}

uint64_t sub_1000FC9A4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v11;
  int v12;
  id v13;
  id v14;
  int IsLevelEnabled;

  v4 = *(unsigned __int16 *)(a2 + 1);
  v5 = __rev16(v4);
  v6 = *a2;
  if (v6 == 2)
  {
    if (v5 > 0x1F)
    {
      v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v5);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      return 1;
    }
    v14 = sub_1000FBA50();
    IsLevelEnabled = _NRLogIsLevelEnabled(v14, 16);

    if (IsLevelEnabled)
    {
      v13 = sub_1000FBA50();
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d Invalid TLV length %u for PIN salt");
      goto LABEL_18;
    }
  }
  else
  {
    if (v6 != 1)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d Unrecognized TLV type %u", "", "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]_block_invoke", 1685, *a2);
      }
      return 1;
    }
    if (v4 == 256)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2[3];
      return 1;
    }
    v11 = sub_1000FBA50();
    v12 = _NRLogIsLevelEnabled(v11, 16);

    if (v12)
    {
      v13 = sub_1000FBA50();
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d Invalid TLV length %u for auth method");
LABEL_18:

      return 0;
    }
  }
  return 0;
}

void sub_1000FCB8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v6;
  unsigned __int8 *WeakRetained;
  __objc2_prot *v8;
  int v9;
  xpc_object_t v10;
  void *v11;
  void *v12;
  int64_t v13;
  id v14;
  int IsLevelEnabled;
  id v16;
  int v17;
  id v18;
  int v19;
  id v20;
  int *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unsigned __int8 uuid[8];
  uint64_t v26;

  v3 = a3;
  v6 = a3;
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 16));
  if (!WeakRetained)
    goto LABEL_38;
  if (!*(_QWORD *)(a1 + 152))
  {
    v14 = sub_1000FBA50();
    IsLevelEnabled = _NRLogIsLevelEnabled(v14, 16);

    if (IsLevelEnabled)
    {
      v16 = sub_1000FBA50();
      _NRLogWithArgs(v16, 16, "%s%.30s:%-4d Auth method response for type %zu received w/ no active request", "", "-[NRDevicePairingCandidateContext handleAuthMethodResponse:salt:]", 1519, a2);

    }
    goto LABEL_38;
  }
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  v8 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ Received auth method response with type %zu, salt %@", "", "-[NRDevicePairingCandidateContext handleAuthMethodResponse:salt:]", 1523, a1, a2, v6);
  }
  if (*(_QWORD *)(a1 + 152) == a2)
  {
    if (a2 != 2)
      goto LABEL_18;
    if (v6)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (!_NRLogIsLevelEnabled(qword_1001E4818, 1))
        goto LABEL_17;
      if (qword_1001E4820 != -1)
        goto LABEL_46;
      while (1)
      {
        _NRLogWithArgs(v8[28].inst_props, 1, "%s%.30s:%-4d Received salt %@", "", "-[NRDevicePairingCandidateContext handleAuthMethodResponse:salt:]", 1534, v6);
LABEL_17:
        objc_storeStrong((id *)(a1 + 168), v3);
LABEL_18:
        v9 = 1;
        if (!*(_BYTE *)(a1 + 11))
          goto LABEL_28;
LABEL_27:
        if (*(_QWORD *)(a1 + 144))
          goto LABEL_28;
        v8 = (__objc2_prot *)&v24;
        *(_BYTE *)(a1 + 11) = 0;
        v10 = xpc_dictionary_create(0, 0, 0);
        if (v10)
        {
          v11 = v10;
          *(_QWORD *)uuid = 0;
          v26 = 0;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
          objc_msgSend(v12, "getUUIDBytes:", uuid);

          xpc_dictionary_set_uuid(v11, nrXPCKeyTargetPairingCandidate, uuid);
          if (v9)
            v13 = 0;
          else
            v13 = -3002;
          sub_1000FD064((uint64_t)WeakRetained, v13, 8uLL, v11);

          if (!v9)
            goto LABEL_37;
          goto LABEL_36;
        }
        v18 = sub_1000FBA50();
        v19 = _NRLogIsLevelEnabled(v18, 16);

        if (v19)
        {
          v20 = sub_1000FBA50();
          _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

        }
        v6 = (id)_os_log_pack_size(38);
        WeakRetained = &uuid[-((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        v21 = __error();
        v22 = _os_log_pack_fill(WeakRetained, v6, *v21, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
        sub_1000DAF48(v22, (uint64_t)"nr_xpc_dictionary_create");
        v23 = sub_1000FBA50();
        _NRLogAbortWithPack(v23, WeakRetained);
LABEL_46:
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      }
    }
    v3 = sub_1000FBA50();
    v17 = _NRLogIsLevelEnabled(v3, 16);

    if (v17)
    {
      v3 = sub_1000FBA50();
      _NRLogWithArgs(v3, 16, "%s%.30s:%-4d PIN auth response missing salt", "", "-[NRDevicePairingCandidateContext handleAuthMethodResponse:salt:]", 1531);

    }
  }
  else
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d Auth method response type %zu != requested type %zu", "", "-[NRDevicePairingCandidateContext handleAuthMethodResponse:salt:]", 1527, a2, *(_QWORD *)(a1 + 152));
    }
  }
  v9 = 0;
  if (*(_BYTE *)(a1 + 11))
    goto LABEL_27;
LABEL_28:
  if ((v9 & 1) != 0)
  {
LABEL_36:
    *(_QWORD *)(a1 + 160) = a2;
  }
  else if (!*(_QWORD *)(a1 + 144))
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 152);
  }
LABEL_37:
  *(_QWORD *)(a1 + 152) = 0;
  sub_1000FD220(a1);
LABEL_38:

}

void sub_1000FD064(uint64_t a1, int64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  void *v13;
  unsigned __int8 uuid[8];
  uint64_t v15;

  v7 = a4;
  if (a1)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ Sending result code %lld for operation %llu", "", "-[NRDevicePairingManagerContext sendResultCode:forUpdateOperation:baseMessage:]", 372, a1, a2, a3);
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v9 = WeakRetained;
    if (WeakRetained)
      v10 = (void *)*((_QWORD *)WeakRetained + 1);
    else
      v10 = 0;
    v11 = v10;

    if (v11)
    {
      v12 = v7;
      *(_QWORD *)uuid = 0;
      v15 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "uuid"));
      objc_msgSend(v13, "getUUIDBytes:", uuid);

      xpc_dictionary_set_uuid(v12, nrXPCKeyPairingManager, uuid);
      xpc_dictionary_set_uint64(v12, nrXPCKeyPairingManagerOperation, a3);
      xpc_dictionary_set_int64(v12, nrXPCKeyResult, a2);
      xpc_connection_send_message(v11, v12);

    }
  }

}

void sub_1000FD220(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id location;
  char v15;
  id v16;

  v2 = *(id *)(a1 + 120);
  v3 = v2;
  if (*(_QWORD *)(a1 + 144) && !*(_QWORD *)(a1 + 152) && objc_msgSend(v2, "state") == (id)2)
  {
    v4 = objc_alloc_init((Class)NSMutableData);
    v15 = *(_QWORD *)(a1 + 144);
    NRTLVAdd(v4, 1, 1, &v15);
    v5 = objc_msgSend(objc_alloc((Class)NEIKEv2PrivateNotify), "initWithNotifyStatus:notifyData:", 50501, v4);
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ Sending auth method request for type %zu", "", "-[NRDevicePairingCandidateContext sendAuthMethodRequestIfNeeded]", 1582, a1, *(_QWORD *)(a1 + 144));
    }
    v6 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = v6;
    objc_initWeak(&location, (id)a1);
    v16 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
    v8 = *(id *)(a1 + 24);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000FD538;
    v12[3] = &unk_1001B7950;
    objc_copyWeak(&v13, &location);
    v12[4] = a1;
    objc_msgSend(v3, "sendPrivateNotifies:maxRetries:retryIntervalInMilliseconds:callbackQueue:callback:", v7, 10, 500, v8, v12);

    objc_destroyWeak(&v13);
    objc_destroyWeak(&location);

  }
  else
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v9 = *(_QWORD *)(a1 + 144);
      v10 = *(_QWORD *)(a1 + 152);
      v11 = (id)qword_1001E4818;
      _NRLogWithArgs(v11, 1, "%s%.30s:%-4d %@ Skipping sending auth method request: pending %zu requested %zu IKE state %zu", "", "-[NRDevicePairingCandidateContext sendAuthMethodRequestIfNeeded]", 1571, a1, v9, v10, objc_msgSend(v3, "state"));

    }
  }

}

void sub_1000FD50C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1000FD538(uint64_t a1, int a2)
{
  id WeakRetained;
  unsigned __int8 *v5;
  xpc_object_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  int *v15;
  uint64_t v16;
  id v17;
  unsigned __int8 uuid[8];
  uint64_t v20;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (a2)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v5 = (unsigned __int8 *)&OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
      if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
      {
        if (qword_1001E4820 == -1)
        {
LABEL_7:
          _NRLogWithArgs(*((_QWORD *)v5 + 259), 1, "%s%.30s:%-4d %@ Received ACK for pairing auth method request", "", "-[NRDevicePairingCandidateContext sendAuthMethodRequestIfNeeded]_block_invoke", 1598, WeakRetained);
          goto LABEL_20;
        }
LABEL_24:
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        goto LABEL_7;
      }
    }
    else
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d %@ Didn't receive ACK for pairing auth method request", "", "-[NRDevicePairingCandidateContext sendAuthMethodRequestIfNeeded]_block_invoke", 1600, WeakRetained);
      }
      *((_QWORD *)WeakRetained + 19) = 0;
      v6 = xpc_dictionary_create(0, 0, 0);
      if (!v6)
      {
        v12 = sub_1000FBA50();
        IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

        if (IsLevelEnabled)
        {
          v14 = sub_1000FBA50();
          _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

        }
        WeakRetained = (id)_os_log_pack_size(38);
        v5 = &uuid[-((__chkstk_darwin(WeakRetained) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        v15 = __error();
        v16 = _os_log_pack_fill(v5, WeakRetained, *v15, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
        sub_1000DAF48(v16, (uint64_t)"nr_xpc_dictionary_create");
        v17 = sub_1000FBA50();
        _NRLogAbortWithPack(v17, v5);
        goto LABEL_24;
      }
      v7 = v6;
      *(_QWORD *)uuid = 0;
      v20 = 0;
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
        v9 = *(void **)(v8 + 32);
      else
        v9 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uuid"));
      objc_msgSend(v10, "getUUIDBytes:", uuid);

      xpc_dictionary_set_uuid(v7, nrXPCKeyTargetPairingCandidate, uuid);
      if (*((_BYTE *)WeakRetained + 11))
      {
        *((_BYTE *)WeakRetained + 11) = 0;
        v11 = objc_loadWeakRetained((id *)WeakRetained + 2);
        sub_1000FD064((uint64_t)v11, -3004, 8uLL, v7);

      }
    }
  }
LABEL_20:

}

void sub_1000FD83C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  int IsLevelEnabled;
  id v33;
  id v34;
  int v35;
  id v36;
  id v37;
  int v38;
  id v39;
  id v40;
  int v41;
  id v42;
  id v43;
  id v44;
  _QWORD v45[2];

  if (!*(_QWORD *)(a1 + 120))
  {
    v2 = objc_msgSend(objc_alloc((Class)NEIKEv2AuthenticationProtocol), "initWithMethod:", 13);
    if (qword_1001E4970 != -1)
      dispatch_once(&qword_1001E4970, &stru_1001B7E28);
    v3 = (id)qword_1001E4968;
    v4 = sub_10011268C(1, v3, v2);
    v5 = sub_100112198();
    objc_msgSend(v5, "setRequestChildlessSA:", 1);
    objc_msgSend(v5, "setExtraSupportedSignatureHashes:", 0);
    if (qword_1001E4870 != -1)
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
    if (byte_1001E4868)
    {
      v6 = *(_QWORD *)(a1 + 56);
      if (v6)
      {
        v7 = *(void **)(v6 + 120);
        if (v7)
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 4));
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

        }
      }
      else
      {
        v7 = 0;
      }
      if (!objc_msgSend(v7, "count"))
      {
        v31 = sub_1000FBA50();
        IsLevelEnabled = _NRLogIsLevelEnabled(v31, 16);

        if (IsLevelEnabled)
        {
          v33 = sub_1000FBA50();
          _NRLogWithArgs(v33, 16, "%s%.30s:%-4d Failed to create pairing control session, no peer endpoints present", "", "-[NRDevicePairingCandidateContext establishControlSessionIfNeeded]", 1043);

        }
        goto LABEL_30;
      }
      v43 = v3;
      v44 = v2;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
      v10 = objc_msgSend(v9, "copy");

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "hostname"));
      objc_opt_self(NRIKEv2Listener);
      if (qword_1001E44D8 != -1)
        dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
      v12 = (id)qword_1001E44D0;
      v13 = CFSTR("62743");
      if (!v12)
        v13 = 0;
      v14 = v13;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v11, v14));

      if (v15)
      {
        v16 = sub_100119B60(*(_QWORD *)(a1 + 56));
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        if (v17)
        {
          objc_msgSend(v5, "setRandomizeLocalPort:", 1);
          objc_msgSend(v5, "setForceUDPEncapsulation:", 1);
          objc_msgSend(v5, "setRemoteEndpoint:", v15);
          objc_msgSend(v5, "setOutgoingInterfaceName:", v17);
          v45[0] = 0;
          v45[1] = 0;
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
          objc_msgSend(v18, "getUUIDBytes:", v45);

          v19 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v45, 16);
          v20 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyID:", v19);
          objc_msgSend(v4, "setLocalIdentifier:", v20);

          v21 = objc_alloc((Class)NEIKEv2Session);
          v22 = *(id *)(a1 + 24);
          v23 = objc_msgSend(v21, "initWithIKEConfig:firstChildConfig:sessionConfig:queue:ipsecInterface:ikeSocketHandler:kernelSASessionName:packetDelegate:", v5, 0, v4, v22, 0, 0, CFSTR("terminusIKE-Pairing-Listener"), 0);
          v24 = *(void **)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v23;

          v25 = 0;
        }
        else
        {
          v37 = sub_1000FBA50();
          v38 = _NRLogIsLevelEnabled(v37, 16);

          if (v38)
          {
            v39 = sub_1000FBA50();
            _NRLogWithArgs(v39, 16, "%s%.30s:%-4d Failed to create pairing control session, no outgoing interface name", "", "-[NRDevicePairingCandidateContext establishControlSessionIfNeeded]", 1057);

          }
          v25 = 1;
        }

      }
      else
      {
        v34 = sub_1000FBA50();
        v35 = _NRLogIsLevelEnabled(v34, 16);

        if (v35)
        {
          v36 = sub_1000FBA50();
          _NRLogWithArgs(v36, 16, "%s%.30s:%-4d Unable to create endpoint from %@", "", "-[NRDevicePairingCandidateContext establishControlSessionIfNeeded]", 1050, v10);

        }
        v25 = 1;
      }

      v3 = v43;
      v2 = v44;
      if (v25)
      {
LABEL_30:

        return;
      }
    }
    else
    {
      v26 = objc_alloc_init((Class)NEIKEv2NULLIdentifier);
      objc_msgSend(v4, "setLocalIdentifier:", v26);

      v27 = objc_alloc((Class)NEIKEv2Session);
      v28 = *(id *)(a1 + 24);
      v29 = objc_msgSend(v27, "initWithIKEConfig:firstChildConfig:sessionConfig:queue:ipsecInterface:ikeSocketHandler:kernelSASessionName:packetDelegate:", v5, 0, v4, v28, 0, 0, CFSTR("terminusIKE-Pairing-Listener"), a1);
      v30 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v29;

    }
    if (*(_QWORD *)(a1 + 120))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d %@ Created pairing control session, connecting", "", "-[NRDevicePairingCandidateContext establishControlSessionIfNeeded]", 1094, a1);
      }
      sub_1000FBD84(a1);
      objc_msgSend(*(id *)(a1 + 120), "connect");
    }
    else
    {
      v40 = sub_1000FBA50();
      v41 = _NRLogIsLevelEnabled(v40, 17);

      if (v41)
      {
        v42 = sub_1000FBA50();
        _NRLogWithArgs(v42, 17, "Failed to create pairing control session");

      }
    }
    goto LABEL_30;
  }
}

void sub_1000FE6A0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;

  if (a1)
  {
    sub_1000FE73C(a1);
    if (*(_QWORD *)(a1 + 64))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
      v3 = WeakRetained;
      if (WeakRetained)
        v4 = (void *)*((_QWORD *)WeakRetained + 9);
      else
        v4 = 0;
      v5 = *(_QWORD *)(a1 + 64);
      v6 = v4;
      objc_msgSend(v6, "cancelPeripheralConnection:", v5);

      v7 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;

    }
    sub_1000FBC2C((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 120));
    *(_BYTE *)(a1 + 9) = 0;
    sub_1000FBC2C((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 128));
    *(_BYTE *)(a1 + 10) = 0;
  }
}

void sub_1000FE73C(uint64_t a1)
{
  void *v1;
  _OWORD *v2;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v2 = (_OWORD *)(a1 + 72);
  v1 = *(void **)(a1 + 72);
  if (v1)
  {
    v4 = *(NSObject **)(a1 + 104);
    if (v4)
    {
      dispatch_source_cancel(v4);
      v5 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;

      v1 = *(void **)(a1 + 72);
    }
    *v2 = 0u;
    v2[1] = 0u;

    v6 = *(void **)(a1 + 112);
    if (v6)
    {
      objc_msgSend(v6, "cancel");
      v7 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;

    }
    sub_1000FBC2C((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 120));
    *(_BYTE *)(a1 + 9) = 0;
    sub_1000FBC2C((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 128));
    *(_BYTE *)(a1 + 10) = 0;
    v8 = *(void **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = 0;

    if (*(_QWORD *)(a1 + 144))
    {
      v9 = *(_QWORD *)(a1 + 152);
      if (v9 || (v9 = *(_QWORD *)(a1 + 160)) != 0)
        *(_QWORD *)(a1 + 144) = v9;
    }
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
}

void sub_1000FE7F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4818;
  qword_1001E4818 = (uint64_t)v1;

}

void sub_1000FE824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t next_slot;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int v7;
  int v8;
  int v9;
  id v10;
  int IsLevelEnabled;
  id v12;
  int v13;
  id v14;
  int v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 88);
    if (v2)
    {
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      next_slot = os_channel_get_next_slot(v2, 0, &v17);
      if (next_slot)
      {
        v4 = next_slot;
        do
        {
          v5 = v4;
          v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", (_QWORD)v18, WORD1(v17));
          objc_msgSend(*(id *)(v1 + 136), "receivePacketData:", v6);
          v4 = os_channel_get_next_slot(*(_QWORD *)(v1 + 88), v4, &v17);

        }
        while (v4);
        v7 = os_channel_advance_slot(*(_QWORD *)(v1 + 88), v5);
        if (v7)
        {
          v9 = v7;
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          v10 = (id)qword_1001E4818;
          IsLevelEnabled = _NRLogIsLevelEnabled(v10, 17);

          if (IsLevelEnabled)
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            v12 = (id)qword_1001E4818;
            _NRLogWithArgs(v12, 17, "os_channel_advance_slot failed: %d", v9);

          }
        }
        v8 = os_channel_sync(*(_QWORD *)(v1 + 80), 1);
        if (v8)
        {
          v13 = v8;
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          v14 = (id)qword_1001E4818;
          v15 = _NRLogIsLevelEnabled(v14, 17);

          if (v15)
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            v16 = (id)qword_1001E4818;
            _NRLogWithArgs(v16, 17, "os_channel_advance_slot failed: %d", v13);

          }
        }
      }
    }
  }
}

void sub_1000FEA30(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  if (a1)
  {
    if (qword_1001E4870 != -1)
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
    if (byte_1001E4868)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v2 = a1[5];
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v21;
        do
        {
          for (i = 0; i != v4; i = (char *)i + 1)
          {
            if (*(_QWORD *)v21 != v5)
              objc_enumerationMutation(v2);
            v7 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i)));
            v8 = v7;
            if (v7 && (v7[18] || v7[19] || v7[20]))
              sub_1000FD83C((uint64_t)v7);

          }
          v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        }
        while (v4);
      }
    }
    else
    {
      v9 = sub_1000FEC7C((uint64_t)a1);
      v2 = (id)objc_claimAutoreleasedReturnValue(v9);
      if (objc_msgSend(v2, "count"))
      {
        v10 = a1[9];
        v11 = a1[2];
        if (qword_1001E48E8 != -1)
          dispatch_once(&qword_1001E48E8, &stru_1001B7D00);
        v12 = (id)qword_1001E48F0;
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_1000FEE18;
        v15[3] = &unk_1001B7898;
        v16 = v10;
        v2 = v2;
        v17 = v2;
        v18 = v11;
        v19 = a1;
        v13 = v11;
        v14 = v10;
        dispatch_async(v12, v15);

      }
    }

  }
}

id sub_1000FEC7C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id *v9;
  id v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (!a1)
    return 0;
  v2 = objc_alloc_init((Class)NSMutableSet);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7), (_QWORD)v13));
        v9 = (id *)v8;
        if (v8 && (*(_QWORD *)(v8 + 144) || *(_QWORD *)(v8 + 152) || *(_QWORD *)(v8 + 160)))
        {
          v10 = *(id *)(v8 + 64);
          v11 = v10;
          if (!v10 || objc_msgSend(v10, "state") != (id)1 && objc_msgSend(v11, "state") != (id)2)
          {

            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[4], "cbUUID"));
            objc_msgSend(v2, "addObject:", v11);
          }

        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_1000FEE18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "retrievePeripheralsWithIdentifiers:", v3));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000FEEC0;
  v7[3] = &unk_1001B8778;
  v5 = *(NSObject **)(a1 + 48);
  v7[4] = *(_QWORD *)(a1 + 56);
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

void sub_1000FEEC0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v2 = sub_1000FEC7C(*(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = *(id *)(a1 + 40);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = objc_msgSend(v3, "containsObject:", v9);

        if (v10)
        {
          v11 = *(_QWORD **)(a1 + 32);
          if (v11)
            v11 = (_QWORD *)v11[6];
          v12 = v11;
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));

          v15 = *(_QWORD *)(a1 + 32);
          if (v15)
            v16 = *(void **)(v15 + 40);
          else
            v16 = 0;
          v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v14));
          v18 = (id *)v17;
          if (v17 && (*(_QWORD *)(v17 + 144) || *(_QWORD *)(v17 + 152) || *(_QWORD *)(v17 + 160)))
          {
            v19 = *(id *)(v17 + 64);
            v20 = v19;
            if (v19 && (objc_msgSend(v19, "state") == (id)1 || objc_msgSend(v20, "state") == (id)2))
            {

            }
            else
            {

              if (qword_1001E4820 != -1)
                dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
              if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
              {
                if (qword_1001E4820 != -1)
                  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Connecting to %@", "", "-[NRDevicePairingManagerContext connectToPeersIfNeeded]_block_invoke_2", 758, v8);
              }
              objc_storeStrong(v18 + 8, v8);
              v21 = *(_QWORD *)(a1 + 32);
              if (v21)
                v22 = *(void **)(v21 + 72);
              else
                v22 = 0;
              objc_msgSend(v22, "connectPeripheral:options:", v8, 0);
            }
          }

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v5);
  }

}

void sub_1000FF18C(uint64_t a1)
{
  id *v2;
  NRDevicePairingDirector *v3;
  void *v4;
  id WeakRetained;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  if (!a1)
    return;
  objc_opt_self(NRDevicePairingDirector);
  if (qword_1001E4810)
  {
    v2 = (id *)(id)qword_1001E4810;
    goto LABEL_5;
  }
  v3 = objc_alloc_init(NRDevicePairingDirector);
  v4 = (void *)qword_1001E4810;
  qword_1001E4810 = (uint64_t)v3;

  v2 = (id *)(id)qword_1001E4810;
  if (v2)
  {
LABEL_5:
    WeakRetained = objc_loadWeakRetained(v2 + 3);

    if (WeakRetained == (id)a1)
      objc_storeWeak(v2 + 3, 0);
  }
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = *(id *)(a1 + 40);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v21;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v10), (_QWORD)v20));
        sub_1000FE6A0((uint64_t)v11);

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
  v12 = *(void **)(a1 + 56);
  if (v12)
  {
    objc_msgSend(v12, "invalidate");
    v13 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

  }
  v14 = *(void **)(a1 + 64);
  if (v14)
  {
    objc_msgSend(v14, "invalidate");
    v15 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

  }
  v16 = *(void **)(a1 + 72);
  if (v16)
  {
    objc_msgSend(v16, "setDelegate:", 0);
    v17 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;

  }
  v18 = *(void **)(a1 + 80);
  if (v18)
  {
    objc_msgSend(v18, "setDelegate:", 0);
    v19 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

  }
}

_QWORD *sub_1000FF520(_QWORD *a1, void *a2)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  objc_super v18;

  v4 = a2;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)NRDevicePairingManagerConnection;
    v5 = objc_msgSendSuper2(&v18, "init");
    if (!v5)
    {
      v9 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

      if (IsLevelEnabled)
      {
        v11 = sub_1000FBA50();
        _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDevicePairingManagerConnection initWithConnection:]", 208);

      }
      v12 = _os_log_pack_size(12);
      v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "-[NRDevicePairingManagerConnection initWithConnection:]";
      v16 = sub_1000FBA50();
      _NRLogAbortWithPack(v16, v13);
    }
    a1 = v5;
    objc_storeStrong((id *)v5 + 1, a2);
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    v7 = (void *)a1[2];
    a1[2] = v6;

  }
  return a1;
}

id *sub_1000FF694(id *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v17;
  int IsLevelEnabled;
  id v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  objc_super v26;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)NRDevicePairingManagerContext;
    v11 = (id *)objc_msgSendSuper2(&v26, "init");
    if (!v11)
    {
      v17 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v17, 16);

      if (IsLevelEnabled)
      {
        v19 = sub_1000FBA50();
        _NRLogWithArgs(v19, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDevicePairingManagerContext initWithInfo:queue:managerConnection:]", 236);

      }
      v20 = _os_log_pack_size(12);
      v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      v22 = __error();
      v23 = _os_log_pack_fill(v21, v20, *v22, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v23 = 136446210;
      *(_QWORD *)(v23 + 4) = "-[NRDevicePairingManagerContext initWithInfo:queue:managerConnection:]";
      v24 = sub_1000FBA50();
      _NRLogAbortWithPack(v24, v21);
    }
    a1 = v11;
    objc_storeWeak(v11 + 1, v10);
    objc_storeStrong(a1 + 2, a3);
    objc_storeStrong(a1 + 3, a2);
    v12 = objc_alloc_init((Class)NSMutableDictionary);
    v13 = a1[5];
    a1[5] = v12;

    v14 = objc_alloc_init((Class)NSMutableDictionary);
    v15 = a1[6];
    a1[6] = v14;

  }
  return a1;
}

void sub_1000FF85C(id *a1, void *a2)
{
  id v4;
  __objc2_prot *v5;
  __objc2_prot *v6;
  char *v7;
  void *i;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id *v18;
  id v19;
  int v20;
  void *v21;
  id v22;
  id v23;
  int v24;
  id v25;
  id v26;
  int IsLevelEnabled;
  id v28;
  id v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  int v35;
  id v36;
  uint64_t v37;
  id v38;
  int v39;
  char v40;

  v4 = a2;
  v5 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  v6 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Discovered device: %@", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 289, v4);
  }
  v7 = (char *)objc_alloc((Class)NSUUID);
  if (!v4)
    goto LABEL_48;
  for (i = (void *)*((_QWORD *)v4 + 2); ; i = 0)
  {
    v9 = i;
    v10 = objc_msgSend(v7, "initWithUUIDString:", v9);

    if (!v10)
      break;
    if (!v4 || (v11 = *((id *)v4 + 13)) == 0)
    {
      v26 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v26, 1);

      if (IsLevelEnabled)
      {
        v28 = sub_1000FBA50();
        _NRLogWithArgs(v28, 1, "%s%.30s:%-4d Ignoring device with no Watch setup data", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 299);

      }
      v12 = 0;
      goto LABEL_23;
    }
    v12 = v11;
    if ((unint64_t)objc_msgSend(v11, "length") <= 4)
    {
      v23 = sub_1000FBA50();
      v24 = _NRLogIsLevelEnabled(v23, 1);

      if (v24)
      {
        v25 = sub_1000FBA50();
        _NRLogWithArgs(v25, 1, "%s%.30s:%-4d Ignoring device with too short Watch setup data (%zu < %zu)", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 303, (size_t)objc_msgSend(v12, "length"), 5uLL);

      }
      goto LABEL_23;
    }
    v40 = 0;
    v39 = 0;
    objc_msgSend(v12, "getBytes:length:", &v39, 5);
    if ((v39 & 0xE0) != 0x20)
    {
      if (*(_QWORD *)&v5[28].cb != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(v6[28].inst_props, 1))
      {
        if (*(_QWORD *)&v5[28].cb != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(v6[28].inst_props, 1, "%s%.30s:%-4d Ignoring device with unrecognized header version %u", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 310, v39 >> 5);
      }
      goto LABEL_23;
    }
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v10));
    v14 = v13;
    if (v13)
    {
      if (*(_BYTE *)(v13 + 8))
        goto LABEL_16;
LABEL_31:
      *(_BYTE *)(v14 + 8) = 1;
      sub_1000FFE88(a1, *(void **)(v14 + 32));
LABEL_16:

LABEL_23:
      goto LABEL_24;
    }
    v5 = (__objc2_prot *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", (char *)&v39 + 1, 4);
    v15 = (char *)objc_msgSend(v12, "length");
    if (v15 == (char *)5)
      v6 = 0;
    else
      v6 = (__objc2_prot *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "subdataWithRange:", 5, v15 - 5));
    v16 = objc_msgSend(objc_alloc((Class)NRDevicePairingCandidate), "initInternalWithUUID:", v10);
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v16, "setIdentifier:", v5);
      objc_msgSend(v17, "setMetadata:", v6);
      objc_msgSend(v17, "setCbUUID:", v10);
      v18 = sub_1000FBA90((id *)[NRDevicePairingCandidateContext alloc], v17, a1[2], a1);
      if (v18)
      {
        v14 = (uint64_t)v18;
        objc_storeStrong(v18 + 7, a2);
        objc_msgSend(a1[5], "setObject:forKeyedSubscript:", v14, v10);

        if (!*(_BYTE *)(v14 + 8))
          goto LABEL_31;
        goto LABEL_16;
      }
      v34 = sub_1000FBA50();
      v35 = _NRLogIsLevelEnabled(v34, 16);

      if (v35)
      {
        v36 = sub_1000FBA50();
        _NRLogWithArgs(v36, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (pairingCandidate) != ((void *)0)", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 334);

      }
      v4 = (id)_os_log_pack_size(12);
      v7 = (char *)&v39 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v37 = *__error();
      v33 = _os_log_pack_fill(v7, v4, v37, &_mh_execute_header, "%{public}s Assertion Failed: (pairingCandidate) != ((void *)0)");
    }
    else
    {
      v29 = sub_1000FBA50();
      v30 = _NRLogIsLevelEnabled(v29, 16);

      if (v30)
      {
        v31 = sub_1000FBA50();
        _NRLogWithArgs(v31, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (candidateInfo) != ((void *)0)", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 326);

      }
      v4 = (id)_os_log_pack_size(12);
      v7 = (char *)&v39 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      v32 = *__error();
      v33 = _os_log_pack_fill(v7, v4, v32, &_mh_execute_header, "%{public}s Assertion Failed: (candidateInfo) != ((void *)0)");
    }
    *(_DWORD *)v33 = 136446210;
    *(_QWORD *)(v33 + 4) = "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]";
    v38 = sub_1000FBA50();
    _NRLogAbortWithPack(v38, v7);
LABEL_48:
    ;
  }
  v19 = sub_1000FBA50();
  v20 = _NRLogIsLevelEnabled(v19, 1);

  if (v20)
  {
    v12 = sub_1000FBA50();
    if (v4)
      v21 = (void *)*((_QWORD *)v4 + 2);
    else
      v21 = 0;
    v22 = v21;
    _NRLogWithArgs(v12, 1, "%s%.30s:%-4d Ignoring device with unrecognized identifier format %@", "", "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]", 293, v22);

    goto LABEL_23;
  }
LABEL_24:

}

void sub_1000FFE88(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  _xpc_connection_s *v7;
  __objc2_prot *v8;
  id *v9;
  __objc2_prot *v10;
  void *v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  int *v15;
  uint64_t v16;
  id v17;
  id v18;
  int v19;
  id v20;
  id v21;
  unsigned __int8 uuid[8];
  uint64_t v23;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 1);
  v5 = WeakRetained;
  if (WeakRetained)
    v6 = (void *)*((_QWORD *)WeakRetained + 1);
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    v8 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Sending discovered message for %@", "", "-[NRDevicePairingManagerContext sendDiscoveredPairingCandidate:]", 527, v3);
    }
    v9 = &v21;
    v10 = (__objc2_prot *)xpc_dictionary_create(0, 0, 0);
    if (v10)
    {
      v8 = v10;
      *(_QWORD *)uuid = 0;
      v23 = 0;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "uuid"));
      objc_msgSend(v11, "getUUIDBytes:", uuid);

      xpc_dictionary_set_uuid(v8, nrXPCKeyPairingManager, uuid);
      xpc_dictionary_set_uint64(v8, nrXPCKeyPairingManagerOperation, 5uLL);
      v21 = 0;
      a1 = (id *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v21));
      v9 = (id *)v21;
      if (!v9)
      {
        xpc_dictionary_set_data(v8, nrXPCKeyDiscoveredPairingCandidate, objc_msgSend(a1, "bytes"), (size_t)objc_msgSend(a1, "length"));
        xpc_connection_send_message(v7, v8);
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      v12 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

      if (IsLevelEnabled)
      {
        v14 = sub_1000FBA50();
        _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

      }
      v3 = (id)_os_log_pack_size(38);
      v7 = (_xpc_connection_s *)&uuid[-((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v15 = __error();
      v16 = _os_log_pack_fill(v7, v3, *v15, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
      sub_1000DAF48(v16, (uint64_t)"nr_xpc_dictionary_create");
      v17 = sub_1000FBA50();
      _NRLogAbortWithPack(v17, v7);
    }
    v18 = sub_1000FBA50();
    v19 = _NRLogIsLevelEnabled(v18, 17);

    if (v19)
    {
      v20 = sub_1000FBA50();
      _NRLogWithArgs(v20, 17, "Failed to archive device pairing candidate %@", v9);

    }
    goto LABEL_13;
  }
LABEL_14:

}

void sub_1001001C4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  _xpc_connection_s *v7;
  __objc2_prot *v8;
  xpc_object_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  int IsLevelEnabled;
  id v15;
  int *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  uint64_t v21;
  unsigned __int8 uuid[8];
  uint64_t v23;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v5 = WeakRetained;
  if (WeakRetained)
    v6 = (void *)*((_QWORD *)WeakRetained + 1);
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    v8 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (!_NRLogIsLevelEnabled(qword_1001E4818, 1))
      goto LABEL_9;
    if (qword_1001E4820 != -1)
      goto LABEL_15;
    while (1)
    {
      _NRLogWithArgs(v8[28].inst_props, 1, "%s%.30s:%-4d Sending lost message for %@", "", "-[NRDevicePairingManagerContext sendLostPairingCandidate:]", 555, v3);
LABEL_9:
      v8 = (__objc2_prot *)&v19;
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9)
        break;
      v13 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v13, 16);

      if (IsLevelEnabled)
      {
        v15 = sub_1000FBA50();
        _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

      }
      v3 = (id)_os_log_pack_size(38);
      v7 = (_xpc_connection_s *)&v20[-((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v16 = __error();
      v17 = _os_log_pack_fill(v7, v3, *v16, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
      sub_1000DAF48(v17, (uint64_t)"nr_xpc_dictionary_create");
      v18 = sub_1000FBA50();
      _NRLogAbortWithPack(v18, v7);
LABEL_15:
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    }
    v10 = v9;
    *(_QWORD *)uuid = 0;
    v23 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "uuid"));
    objc_msgSend(v11, "getUUIDBytes:", uuid);

    xpc_dictionary_set_uuid(v10, nrXPCKeyPairingManager, uuid);
    xpc_dictionary_set_uint64(v10, nrXPCKeyPairingManagerOperation, 5uLL);
    *(_QWORD *)v20 = 0;
    v21 = 0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
    objc_msgSend(v12, "getUUIDBytes:", v20);

    xpc_dictionary_set_uuid(v10, nrXPCKeyLostPairingCandidate, v20);
    xpc_connection_send_message(v7, v10);

  }
}

uint64_t sub_10010047C(uint64_t a1)
{
  id *v2;
  NRDevicePairingDirector *v3;
  void *v4;
  id WeakRetained;
  void *v6;
  BOOL v7;
  unsigned __int8 v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  NSString *v20;
  void *v21;

  objc_opt_self(NRDevicePairingDirector);
  if (qword_1001E4810)
  {
    v2 = (id *)(id)qword_1001E4810;
  }
  else
  {
    v3 = objc_alloc_init(NRDevicePairingDirector);
    v4 = (void *)qword_1001E4810;
    qword_1001E4810 = (uint64_t)v3;

    v2 = (id *)(id)qword_1001E4810;
    if (!v2)
    {
      v6 = 0;
      if (*(_QWORD *)(a1 + 80))
      {
LABEL_10:
        if (*(_QWORD *)(a1 + 72))
        {
LABEL_11:
          v8 = 1;
          goto LABEL_15;
        }
LABEL_14:
        v13 = objc_alloc((Class)CBCentralManager);
        v14 = *(void **)(a1 + 16);
        v20 = CBCentralManagerOptionShowPowerAlertKey;
        v21 = &__kCFBooleanTrue;
        v15 = v14;
        v8 = 1;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
        v17 = objc_msgSend(v13, "initWithDelegate:queue:options:", a1, v15, v16);
        v18 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v17;

        goto LABEL_15;
      }
LABEL_13:
      v9 = objc_alloc((Class)CBScalablePipeManager);
      v10 = *(id *)(a1 + 16);
      v11 = objc_msgSend(v9, "initWithDelegate:queue:", a1, v10);
      v12 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v11;

      if (*(_QWORD *)(a1 + 72))
        goto LABEL_11;
      goto LABEL_14;
    }
  }
  WeakRetained = objc_loadWeakRetained(v2 + 3);
  v6 = WeakRetained;
  if (WeakRetained)
    v7 = WeakRetained == (id)a1;
  else
    v7 = 1;
  if (v7)
  {
    objc_storeWeak(v2 + 3, (id)a1);
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_10;
    goto LABEL_13;
  }
  v8 = 0;
LABEL_15:

  return v8;
}

void sub_10010065C(uint64_t a1, uint64_t a2)
{
  id *WeakRetained;
  xpc_object_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  xpc_object_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  int v14;
  id v15;
  id v16;
  int IsLevelEnabled;
  id v18;
  int v19;
  id v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int *v23;
  uint64_t v24;
  id v25;
  unsigned __int8 uuid[8];
  uint64_t v28;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ Handling client request for auth method %zu", "", "-[NRDevicePairingCandidateContext handleAuthMethodRequestFromClient:]", 1228, a1, a2);
    }
    if (*(_BYTE *)(a1 + 11))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 17, "%@ already has a pending authMethod request", a1);
      }
      v5 = xpc_dictionary_create(0, 0, 0);
      if (v5)
      {
        v6 = v5;
        *(_QWORD *)uuid = 0;
        v28 = 0;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
        objc_msgSend(v7, "getUUIDBytes:", uuid);

        xpc_dictionary_set_uuid(v6, nrXPCKeyTargetPairingCandidate, uuid);
        v8 = (uint64_t)WeakRetained;
        v9 = -2005;
LABEL_20:
        sub_1000FD064(v8, v9, 8uLL, v6);

        goto LABEL_21;
      }
      v16 = sub_1000FBA50();
      IsLevelEnabled = _NRLogIsLevelEnabled(v16, 16);

      if (IsLevelEnabled)
      {
LABEL_31:
        v20 = sub_1000FBA50();
        _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

      }
LABEL_32:
      v21 = _os_log_pack_size(38);
      v22 = &uuid[-((__chkstk_darwin(v21) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v21, *v23, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
      sub_1000DAF48(v24, (uint64_t)"nr_xpc_dictionary_create");
      v25 = sub_1000FBA50();
      _NRLogAbortWithPack(v25, v22);
    }
    if (*(_QWORD *)(a1 + 160) == a2)
    {
      v10 = xpc_dictionary_create(0, 0, 0);
      if (v10)
      {
        v6 = v10;
        *(_QWORD *)uuid = 0;
        v28 = 0;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuid"));
        objc_msgSend(v11, "getUUIDBytes:", uuid);

        xpc_dictionary_set_uuid(v6, nrXPCKeyTargetPairingCandidate, uuid);
        v8 = (uint64_t)WeakRetained;
        v9 = 0;
        goto LABEL_20;
      }
      v18 = sub_1000FBA50();
      v19 = _NRLogIsLevelEnabled(v18, 16);

      if (v19)
        goto LABEL_31;
      goto LABEL_32;
    }
    *(_BYTE *)(a1 + 11) = 1;
    v12 = *(_QWORD *)(a1 + 152);
    if (v12 != a2)
    {
      *(_QWORD *)(a1 + 144) = a2;
      if (!v12)
        sub_1000FD220(a1);
    }
    sub_1000FEA30(WeakRetained);
  }
  else
  {
    v13 = sub_1000FBA50();
    v14 = _NRLogIsLevelEnabled(v13, 1);

    if (v14)
    {
      v15 = sub_1000FBA50();
      _NRLogWithArgs(v15, 1, "%s%.30s:%-4d %@ Not handling client request for auth method %zu as pairing manager is gone", "", "-[NRDevicePairingCandidateContext handleAuthMethodRequestFromClient:]", 1225, a1, a2);

    }
  }
LABEL_21:

}

id *sub_100100A78(id *a1, void *a2, void *a3)
{
  char *v5;
  id v6;
  id v7;
  void *v8;
  id WeakRetained;
  id v10;
  void ***v11;
  char *v12;
  id v13;
  char IsLevelEnabled;
  id v15;
  id v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v28;
  int v29;
  id v30;
  int *v31;
  uint64_t v32;
  id v33;
  id *v34;
  id *v35;
  void **v36;
  uint64_t v37;
  void (*v38)(void **, uint64_t, void *);
  void *v39;
  id v40;
  id v41;
  id v42;
  id from;
  id location;

  v5 = a2;
  v6 = a3;
  if (!a1)
    goto LABEL_35;
  if (v5)
  {
    v7 = a1[4];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cbUUID"));

    objc_initWeak(&location, a1);
    WeakRetained = objc_loadWeakRetained(a1 + 2);
    objc_initWeak(&from, WeakRetained);

    v36 = _NSConcreteStackBlock;
    v37 = 3221225472;
    v38 = sub_100101104;
    v39 = &unk_1001B78C0;
    v34 = &v41;
    objc_copyWeak(&v41, &location);
    v35 = &v42;
    objc_copyWeak(&v42, &from);
    v10 = v8;
    v40 = v10;
    v11 = objc_retainBlock(&v36);
    v12 = sub_100134B14((uint64_t)NRDLocalDevice, v10, 0);
    if (v12)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v13 = (id)qword_1001E4818;
      IsLevelEnabled = _NRLogIsLevelEnabled(v13, 0);

      if ((IsLevelEnabled & 1) != 0)
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        v15 = (id)qword_1001E4818;
        _NRLogWithArgs(v15, 0, "%s%.30s:%-4d NRDLocalDevice is an existing device %@", "", "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]", 1387, v12, v34, v35, v36, v37, v38, v39);

      }
    }
    else
    {
      v16 = v10;
      objc_opt_self(NRDLocalDevice);
      v12 = sub_100134B14((uint64_t)NRDLocalDevice, v16, 1);

      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v17 = (id)qword_1001E4818;
      v18 = _NRLogIsLevelEnabled(v17, 0);

      if (v18)
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        v17 = (id)qword_1001E4818;
        _NRLogWithArgs(v17, 0, "%s%.30s:%-4d NRDLocalDevice created %@", "", "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]", 1390, v12, v34, v35, v36, v37, v38, v39);

      }
      if (!v12)
      {
        v28 = sub_1000FBA50();
        v29 = _NRLogIsLevelEnabled(v28, 16);

        if (v29)
        {
          v30 = sub_1000FBA50();
          _NRLogWithArgs(v30, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]", 1392);

        }
        v6 = (id)_os_log_pack_size(12);
        v5 = (char *)&v34 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0);
        v31 = __error();
        v32 = _os_log_pack_fill(v5, v6, *v31, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)(v32 + 4) = "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]";
        v33 = sub_1000FBA50();
        _NRLogAbortWithPack(v33, v5);
        __break(1u);
LABEL_39:
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
LABEL_30:
        v22 = (id)qword_1001E4818;
        v23 = _NRLogIsLevelEnabled(v22, 0);

        if (v23)
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          v24 = (id)qword_1001E4818;
          v25 = *((id *)v12 + 4);
          _NRLogWithArgs(v24, 0, "%s%.30s:%-4d registering Device with nruuid:%@", "", "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]", 1418, v25);

        }
        v26 = *((id *)v12 + 4);
        sub_100135314((uint64_t)NRDLocalDevice, v26, 0, 0, 0, v5, 0, 0, 0, v17, 0, CFSTR("cmpn-pairing"), v11);

        objc_destroyWeak(v35);
        objc_destroyWeak(v34);
        objc_destroyWeak(&from);
        objc_destroyWeak(&location);

        a1 = (id *)1;
        goto LABEL_35;
      }
    }
    v17 = v6;
    if (!v17)
      v17 = +[NRDeviceOperationalProperties copyPropertiesForDefaultPairedPhone](NRDeviceOperationalProperties, "copyPropertiesForDefaultPairedPhone");
    v19 = *((id *)v12 + 4);
    sub_10013CF48((uint64_t)NRDLocalDevice, v19);

    sub_10010B4E0(v17);
    if (v12[9] && !v12[8])
    {
      v20 = *((id *)v12 + 4);
      sub_1001370D8((uint64_t)NRDLocalDevice, v20, &stru_1001B7900);

    }
    v21 = *((id *)v12 + 4);
    sub_10013D090((uint64_t)NRDLocalDevice, v10, v21);

    if (qword_1001E4820 == -1)
      goto LABEL_30;
    goto LABEL_39;
  }
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 17, "cannot register pairing device without PSK");
  }
  a1 = 0;
LABEL_35:

  return a1;
}

void sub_1001010C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak(*(id **)(v1 - 168));
  objc_destroyWeak(*(id **)(v1 - 176));
  objc_destroyWeak((id *)(v1 - 104));
  objc_destroyWeak((id *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_100101104(void **a1, uint64_t a2, void *a3)
{
  id v5;
  unsigned __int8 *WeakRetained;
  id v7;
  void *v8;
  xpc_object_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  int64_t v16;
  char *v17;
  char *v18;
  id v19;
  id v20;
  int IsLevelEnabled;
  id v22;
  int *v23;
  uint64_t v24;
  id v25;
  id v26;
  unsigned __int8 v27[8];
  uint64_t v28;
  unsigned __int8 uuid[8];
  uint64_t v30;

  v5 = a3;
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d completed peer registration with res %lld %@", "", "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]_block_invoke", 1340, a2, v5);
  }
  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained(a1 + 5);
  v7 = objc_loadWeakRetained(a1 + 6);
  v8 = v7;
  if (WeakRetained && v7)
  {
    v9 = xpc_dictionary_create(0, 0, 0);
    if (v9)
    {
      v10 = v9;
      *(_QWORD *)uuid = 0;
      v30 = 0;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 4), "uuid"));
      objc_msgSend(v11, "getUUIDBytes:", uuid);

      xpc_dictionary_set_uuid(v10, nrXPCKeyTargetPairingCandidate, uuid);
      v12 = (void *)*((_QWORD *)WeakRetained + 5);
      if (v12)
      {
        v26 = 0;
        v13 = v12;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v13, 1, &v26));
        v15 = v26;

        if (v15)
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            _NRLogWithArgs(qword_1001E4818, 17, "Failed to archive pairing target %@", v15);
          }
        }
        else
        {
          xpc_dictionary_set_data(v10, nrXPCKeyPairingTarget, objc_msgSend(v14, "bytes"), (size_t)objc_msgSend(v14, "length"));
        }

      }
      if (a2)
      {
        v16 = -3002;
      }
      else
      {
        v17 = sub_100134B14((uint64_t)NRDLocalDevice, a1[4], 0);
        v18 = v17;
        if (v17)
        {
          *(_QWORD *)v27 = 0;
          v28 = 0;
          v19 = *((id *)v17 + 4);
          objc_msgSend(v19, "getUUIDBytes:", v27);

          xpc_dictionary_set_uuid(v10, nrXPCKeyNRUUID, v27);
        }
        else
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            _NRLogWithArgs(qword_1001E4818, 17, "NRDLocalDevice not found for cbUUID %@", a1[4]);
          }
        }

        v16 = 0;
      }
      sub_1000FD064((uint64_t)v8, v16, 0xCuLL, v10);

      goto LABEL_37;
    }
    v20 = sub_1000FBA50();
    IsLevelEnabled = _NRLogIsLevelEnabled(v20, 16);

    if (IsLevelEnabled)
    {
      v22 = sub_1000FBA50();
      _NRLogWithArgs(v22, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

    }
    v5 = (id)_os_log_pack_size(38);
    WeakRetained = &v27[-((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    v23 = __error();
    v24 = _os_log_pack_fill(WeakRetained, v5, *v23, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
    sub_1000DAF48(v24, (uint64_t)"nr_xpc_dictionary_create");
    v25 = sub_1000FBA50();
    _NRLogAbortWithPack(v25, WeakRetained);
  }
  else if (qword_1001E4820 == -1)
  {
    goto LABEL_19;
  }
  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
LABEL_19:
  if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 17, "Invalid NRDevicePairingCandidateContext");
  }
LABEL_37:

}

void sub_1001015DC(id a1, int64_t a2, NSString *a3)
{
  NSString *v4;

  v4 = a3;
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d companion peer unregistered with res %lld %@", "", "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]_block_invoke", 1412, a2, v4);
  }

}

void sub_1001016AC(id *a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  uint64_t IsLevelEnabled;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  id v10;
  NSObject *v11;
  id v12;
  _QWORD block[4];
  _QWORD *v14;
  id v15;
  _OWORD v16[2];

  v2 = a1 + 6;
  WeakRetained = objc_loadWeakRetained(a1 + 6);

  if (WeakRetained)
  {
    v4 = a1[4];
    v5 = a1[5];
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    IsLevelEnabled = _NRLogIsLevelEnabled(qword_1001E4818, 1);
    if ((_DWORD)IsLevelEnabled)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      IsLevelEnabled = _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Starting PBKDF2", "", "-[NRDevicePairingCandidateContext derivePSKForPairing:authData:withCompletion:]_block_invoke", 1472);
    }
    memset(v16, 0, sizeof(v16));
    v7 = ccsha256_di(IsLevelEnabled);
    v8 = ccpbkdf2_hmac(v7, objc_msgSend(v4, "length"), objc_msgSend(v4, "bytes"), objc_msgSend(v5, "length"), objc_msgSend(v5, "bytes"), 1600000, 32, v16);
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Finished running PBKDF2, res %d", "", "-[NRDevicePairingCandidateContext derivePSKForPairing:authData:withCompletion:]_block_invoke", 1480, v8);
    }
    v9 = objc_loadWeakRetained(v2);
    if (v9)
    {
      v10 = +[NSData _newZeroingDataWithBytes:length:](NSData, "_newZeroingDataWithBytes:length:", v16, 32);
      cc_clear(32, v16);
      v11 = v9[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100101964;
      block[3] = &unk_1001B8778;
      v14 = v9;
      v15 = v10;
      v12 = v10;
      dispatch_async(v11, block);

    }
  }
}

void sub_100101964(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(void **)(v1 + 184);
    *(_QWORD *)(v1 + 184) = 0;

    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      objc_storeStrong((id *)(v4 + 176), *(id *)(a1 + 40));
  }
}

void sub_1001019B0(id a1)
{
  NSObject *v1;
  dispatch_queue_attr_t v2;
  NSObject *v3;
  const char *v4;
  dispatch_queue_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  char *v11;
  int *v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  id v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);

  if (!v3)
  {
    v8 = sub_1000FBA50();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_1000FBA50();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_attr_make_with_qos_class(%u) failed", "", "nr_dispatch_queue_create_with_qos", 130, 25);

    }
    v4 = (const char *)_os_log_pack_size(18);
    v11 = (char *)&v23 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v4, *v12, &_mh_execute_header, "%{public}s dispatch_queue_attr_make_with_qos_class(%u) failed");
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v13 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = 25;
    v14 = sub_1000FBA50();
    _NRLogAbortWithPack(v14, v11);
LABEL_7:
    v15 = sub_1000FBA50();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    if (v16)
    {
      v17 = sub_1000FBA50();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create_with_qos", 134, v4);

    }
    v18 = _os_log_pack_size(22);
    v19 = (char *)&v23 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v21 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v21 + 14) = v4;
    v22 = sub_1000FBA50();
    _NRLogAbortWithPack(v22, v19);
  }
  v4 = "terminusd.Pairing.Crypto";
  v5 = dispatch_queue_create("terminusd.Pairing.Crypto", v3);
  if (!v5)
    goto LABEL_7;
  v6 = (uint64_t)v5;

  v7 = (void *)qword_1001E4830;
  qword_1001E4830 = v6;

}

void sub_100101C1C(uint64_t a1, int64_t a2, void *a3, void *a4)
{
  id v7;
  _xpc_connection_s *v8;
  id v9;
  xpc_object_t reply;
  void *v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  id v19;
  int v20;
  id v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  id v25;
  id v26;

  v7 = a3;
  v8 = a4;
  objc_opt_self(a1);
  v9 = v7;
  if (!v9)
  {
    v12 = sub_1000FBA50();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

    if (IsLevelEnabled)
    {
      v14 = sub_1000FBA50();
      _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: nr_xpc_dictionary_create_reply called with NULL original", "", "nr_xpc_dictionary_create_reply", 88);

    }
    v15 = _os_log_pack_size(12);
    v16 = (char *)&v26 - ((__chkstk_darwin(v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v16, v15, *v17, &_mh_execute_header, "%{public}s nr_xpc_dictionary_create_reply called with NULL original");
    *(_DWORD *)v18 = 136446210;
    *(_QWORD *)(v18 + 4) = "nr_xpc_dictionary_create_reply";
LABEL_10:
    v25 = sub_1000FBA50();
    _NRLogAbortWithPack(v25, v16);
  }
  v26 = v9;
  reply = xpc_dictionary_create_reply(v9);
  if (!reply)
  {
    v19 = sub_1000FBA50();
    v20 = _NRLogIsLevelEnabled(v19, 16);

    if (v20)
    {
      v21 = sub_1000FBA50();
      _NRLogWithArgs(v21, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create_reply failed", "", "nr_xpc_dictionary_create_reply", 92);

    }
    v22 = _os_log_pack_size(12);
    v16 = (char *)&v26 - ((__chkstk_darwin(v22) + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = __error();
    v24 = _os_log_pack_fill(v16, v22, *v23, &_mh_execute_header, "%{public}s xpc_dictionary_create_reply failed", v26);
    *(_DWORD *)v24 = 136446210;
    *(_QWORD *)(v24 + 4) = "nr_xpc_dictionary_create_reply";
    goto LABEL_10;
  }
  v11 = reply;

  xpc_dictionary_set_int64(v11, nrXPCKeyResult, a2);
  xpc_connection_send_message(v8, v11);

}

void sub_100101E8C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  xpc_object_t value;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void **v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  const void *bytes_ptr;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  BOOL v27;
  id *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id *v33;
  id *v34;
  xpc_object_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  int v44;
  id v45;
  id v46;
  id v47;
  char v48;
  id v49;
  int v50;
  id v51;
  int64_t v52;
  id v53;
  void **v54;
  const unsigned __int8 *v55;
  const unsigned __int8 *v56;
  void **v57;
  id v58;
  void *v59;
  id v60;
  void **v61;
  id v62;
  void **v63;
  const unsigned __int8 *uuid;
  const unsigned __int8 *v65;
  id v66;
  void **v67;
  id v68;
  void **v69;
  const unsigned __int8 *v70;
  const unsigned __int8 *v71;
  void *v72;
  int64_t v73;
  void *v74;
  const unsigned __int8 *v75;
  const unsigned __int8 *v76;
  const unsigned __int8 *v77;
  const unsigned __int8 *v78;
  xpc_object_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void **v85;
  id v86;
  void *v87;
  id v88;
  id *v89;
  id *v90;
  uint64_t v91;
  id *v92;
  id v93;
  id v94;
  uint64_t v95;
  void *i;
  _BYTE *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int64_t v103;
  id v104;
  id v105;
  void **v106;
  uint64_t v107;
  id *v108;
  id v109;
  id v110;
  uint64_t v111;
  void *j;
  _BYTE *v113;
  id v114;
  void *v115;
  void *v116;
  BOOL v117;
  id v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  id v124;
  id v125;
  void *v126;
  id v127;
  const void *v128;
  id v129;
  uint64_t v130;
  id v131;
  id v132;
  NRDiscoveryClient *v133;
  id v134;
  id *v135;
  id v136;
  _BYTE *v137;
  _QWORD *v138;
  id *v139;
  id *v140;
  id *v141;
  void *v142;
  _QWORD *v143;
  id *v144;
  id *v145;
  id *v146;
  void *v147;
  _QWORD *v148;
  void ***v149;
  void ***v150;
  void ***v151;
  void *v152;
  id v153;
  char v154;
  id v155;
  unsigned __int8 *v156;
  void *v157;
  int v158;
  unsigned __int8 *v159;
  void *v160;
  int v161;
  id v162;
  id *v163;
  __CFString *v164;
  _BYTE *v165;
  id v166;
  id *v167;
  id v168;
  id WeakRetained;
  id *v170;
  id v171;
  dispatch_group_t v172;
  void *v173;
  uint64_t v174;
  NSObject *v175;
  id v176;
  NSObject *v177;
  NSObject *v178;
  id v179;
  int v180;
  id v181;
  id v182;
  int v183;
  id v184;
  int v185;
  id v186;
  id v187;
  int v188;
  id v189;
  id v190;
  char v191;
  id v192;
  id v193;
  int IsLevelEnabled;
  id v195;
  id v196;
  int v197;
  id v198;
  id v199;
  int v200;
  id v201;
  id v202;
  int v203;
  id v204;
  id v205;
  int v206;
  id v207;
  id v208;
  int v209;
  id v210;
  int v211;
  id v212;
  id v213;
  int v214;
  id v215;
  id v216;
  int v217;
  id v218;
  int v219;
  id v220;
  unsigned __int8 *v221;
  void *v222;
  uint64_t v223;
  unsigned __int8 *v224;
  id v225;
  int v226;
  id v227;
  id v228;
  int v229;
  id v230;
  int v231;
  id v232;
  int v233;
  id v234;
  int v235;
  NSObject *group;
  id v237;
  id *v238;
  id *v239;
  id *v240;
  id *v241;
  xpc_object_t xarray;
  xpc_object_t xarraya;
  xpc_object_t xarrayb;
  xpc_object_t xarrayc;
  xpc_object_t object;
  void *v247;
  xpc_object_t xdict;
  void **v249;
  id obj;
  id obja;
  void **objb;
  id *objc;
  void **applier;
  uint64_t v255;
  void *v256;
  void *v257;
  id v258[2];
  id from;
  uint64_t p_from;
  uint64_t v261;
  uint64_t (*v262)(uint64_t, uint64_t);
  void (*v263)(uint64_t);
  id v264;
  void **v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  id v269;
  id location;
  __int128 block;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  id v275[2];
  void (*v276)(id *);
  void *v277;
  void **v278;
  id v279;
  id v280;
  void **v281;

  xdict = a2;
  v5 = a3;
  if (a1)
  {
    v247 = v5;
    v249 = (void **)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "objectForKeyedSubscript:", v5));
    if (!v249)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d Unable to find connection entry for %@", "", "-[NRDevicePairingDirector handleIncomingRequest:forConnection:]", 2027, v247);
      }
      goto LABEL_237;
    }
    value = xpc_dictionary_get_value(xdict, nrXPCKeyPairingManagerOperation);
    v7 = (void *)objc_claimAutoreleasedReturnValue(value);
    object = v7;
    v8 = v7;
    if (v7)
    {
      if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_uint64)
      {
        v9 = xpc_uint64_get_value(v8);
        switch(v9)
        {
          case 1uLL:
            v10 = xdict;
            v11 = v249;
            v12 = xpc_dictionary_get_value(v10, nrXPCKeyPairingManagerInfo);
            v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            v14 = v13;
            v15 = v10;
            if (v13 && xpc_get_type(v13) == (xpc_type_t)&_xpc_type_data)
            {
              v16 = objc_alloc((Class)NSData);
              bytes_ptr = xpc_data_get_bytes_ptr(v14);
              v275[0] = 0;
              xarray = objc_msgSend(v16, "initWithBytes:length:", bytes_ptr, xpc_data_get_length(v14));
              v18 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NRDevicePairingManagerInfo), xarray, v275);
              v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
              v20 = v10;
              obj = v275[0];
              if (obj)
              {
                v193 = sub_1000FBA50();
                IsLevelEnabled = _NRLogIsLevelEnabled(v193, 17);

                if (IsLevelEnabled)
                {
                  v195 = sub_1000FBA50();
                  _NRLogWithArgs(v195, 17, "Failed to unarchive NRDevicePairingManagerInfo %@", obj);

                }
              }
              else
              {
                v21 = v11[2];
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "uuid"));
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v22));

                if (!v23)
                {
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "pairingCriteria"));
                  v25 = v24;
                  if (v24)
                  {
                    if (objc_msgSend(v24, "pairingTransport") == 1)
                    {
                      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "pairingCriteria"));
                      v27 = objc_msgSend(v26, "deviceType") == (id)1;

                      if (v27)
                      {
                        v28 = sub_1000FF694((id *)[NRDevicePairingManagerContext alloc], v19, *(void **)(a1 + 8), v11);
                        v29 = v11[2];
                        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "uuid"));
                        objc_msgSend(v29, "setObject:forKeyedSubscript:", v28, v30);

                        if (qword_1001E4820 != -1)
                          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                        if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
                        {
                          if (qword_1001E4820 != -1)
                            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                          v31 = (id)qword_1001E4818;
                          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "fullDescription"));
                          _NRLogWithArgs(v31, 0, "%s%.30s:%-4d Registered %@", "", "-[NRDevicePairingDirector handleManagerRegisterRequest:forConnection:]", 2185, v32);

                        }
                        sub_100101C1C((uint64_t)NRDevicePairingDirector, 0, v15, v11[1]);

                        goto LABEL_20;
                      }
                      v205 = sub_1000FBA50();
                      v206 = _NRLogIsLevelEnabled(v205, 17);

                      if (v206)
                      {
                        v207 = sub_1000FBA50();
                        _NRLogWithArgs(v207, 17, "%@ requested unsupported device type %zu", v19, objc_msgSend(v25, "deviceType"));

                      }
                    }
                    else
                    {
                      v202 = sub_1000FBA50();
                      v203 = _NRLogIsLevelEnabled(v202, 17);

                      if (v203)
                      {
                        v204 = sub_1000FBA50();
                        _NRLogWithArgs(v204, 17, "%@ requested unsupported transport %u", v19, objc_msgSend(v25, "pairingTransport"));

                      }
                    }
                  }
                  else
                  {
                    v199 = sub_1000FBA50();
                    v200 = _NRLogIsLevelEnabled(v199, 17);

                    if (v200)
                    {
                      v201 = sub_1000FBA50();
                      _NRLogWithArgs(v201, 17, "%@ sent no criteria", v19);

                    }
                  }
                  v20 = v15;
                  sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v15, v11[1]);
LABEL_20:

LABEL_21:
                  goto LABEL_22;
                }
                v196 = sub_1000FBA50();
                v197 = _NRLogIsLevelEnabled(v196, 17);

                if (v197)
                {
                  v198 = sub_1000FBA50();
                  _NRLogWithArgs(v198, 17, "%@ is already registered", v19);

                }
              }
              v20 = v10;
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v10, v11[1]);
              goto LABEL_21;
            }
            v184 = sub_1000FBA50();
            v185 = _NRLogIsLevelEnabled(v184, 17);

            if (v185)
            {
              v186 = sub_1000FBA50();
              _NRLogWithArgs(v186, 17, "Failed to get pairing manager info from message");

            }
            v20 = v10;
            sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v10, v11[1]);
LABEL_22:

            goto LABEL_236;
          case 2uLL:
            v33 = xdict;
            v34 = v249;
            v240 = v33;
            v35 = xpc_dictionary_get_value(v33, nrXPCKeyPairingManagers);
            v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            xarraya = v36;
            if (v36 && xpc_get_type(v36) == (xpc_type_t)&_xpc_type_array)
            {
              v265 = 0;
              v266 = (uint64_t)&v265;
              v267 = 0x2020000000;
              LOBYTE(v268) = 0;
              from = 0;
              p_from = (uint64_t)&from;
              v261 = 0x3032000000;
              v262 = sub_1000FC98C;
              v263 = sub_1000FC99C;
              v264 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", xpc_array_get_count(xarraya));
              applier = _NSConcreteStackBlock;
              v255 = 3221225472;
              v256 = sub_100106154;
              v257 = &unk_1001B79F0;
              v258[0] = &v265;
              v258[1] = &from;
              xpc_array_apply(xarraya, &applier);
              if (*(_BYTE *)(v266 + 24) || !objc_msgSend(*(id *)(p_from + 40), "count"))
              {
                v190 = sub_1000FBA50();
                v191 = _NRLogIsLevelEnabled(v190, 17);

                if ((v191 & 1) != 0)
                {
                  v192 = sub_1000FBA50();
                  _NRLogWithArgs(v192, 17, "Failed to get pairing manager UUIDs from message");

                }
                v51 = v34[1];
                sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v33, v51);
              }
              else
              {
                v273 = 0u;
                v274 = 0u;
                block = 0u;
                v272 = 0u;
                obja = *(id *)(p_from + 40);
                v37 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &block, v275, 16);
                if (v37)
                {
                  v38 = *(_QWORD *)v272;
                  do
                  {
                    v39 = 0;
                    do
                    {
                      if (*(_QWORD *)v272 != v38)
                        objc_enumerationMutation(obja);
                      v40 = *(_QWORD *)(*((_QWORD *)&block + 1) + 8 * (_QWORD)v39);
                      v41 = v34[2];
                      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "objectForKeyedSubscript:", v40));

                      if (v42)
                      {
                        if (qword_1001E4820 != -1)
                          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                        v43 = (id)qword_1001E4818;
                        v44 = _NRLogIsLevelEnabled(v43, 0);

                        if (v44)
                        {
                          if (qword_1001E4820 != -1)
                            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                          v45 = (id)qword_1001E4818;
                          _NRLogWithArgs(v45, 0, "%s%.30s:%-4d Unregistered %@", "", "-[NRDevicePairingDirector handleManagerUnregisterRequest:forConnection:]", 2232, v42);

                        }
                        sub_1000FF18C((uint64_t)v42);
                        v46 = v34[2];
                        objc_msgSend(v46, "setObject:forKeyedSubscript:", 0, v40);
LABEL_46:

                        goto LABEL_47;
                      }
                      *(_BYTE *)(v266 + 24) = 1;
                      if (qword_1001E4820 != -1)
                        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                      v47 = (id)qword_1001E4818;
                      v48 = _NRLogIsLevelEnabled(v47, 17);

                      if ((v48 & 1) != 0)
                      {
                        if (qword_1001E4820 != -1)
                          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                        v46 = (id)qword_1001E4818;
                        _NRLogWithArgs(v46, 17, "Pairing manager %@ is not registered", v40);
                        goto LABEL_46;
                      }
LABEL_47:

                      v39 = (char *)v39 + 1;
                    }
                    while (v37 != v39);
                    v49 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &block, v275, 16);
                    v37 = v49;
                  }
                  while (v49);
                }

                v50 = *(unsigned __int8 *)(v266 + 24);
                v51 = v34[1];
                if (v50)
                  v52 = -2005;
                else
                  v52 = 0;
                sub_100101C1C((uint64_t)NRDevicePairingDirector, v52, v240, v51);
              }

              _Block_object_dispose(&from, 8);
              _Block_object_dispose(&v265, 8);
            }
            else
            {
              v187 = sub_1000FBA50();
              v188 = _NRLogIsLevelEnabled(v187, 17);

              if (v188)
              {
                v189 = sub_1000FBA50();
                _NRLogWithArgs(v189, 17, "Failed to get pairing manager UUID array from message");

              }
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v33, v34[1]);
            }

            goto LABEL_236;
          case 3uLL:
            v60 = xdict;
            v61 = v249;
            if (qword_1001E4870 != -1)
              dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
            if (byte_1001E4868)
            {
              v62 = v60;
              objb = v61;
              v63 = v61;
              uuid = xpc_dictionary_get_uuid(v62, nrXPCKeyPairingManager);
              if (!uuid || (v65 = uuid, uuid_is_null(uuid)))
              {
                sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v62, v63[1]);
                goto LABEL_197;
              }
              xarrayc = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v65);
              v91 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63[2], "objectForKeyedSubscript:"));
              v92 = (id *)v91;
              if (!v91)
              {
                v213 = sub_1000FBA50();
                v214 = _NRLogIsLevelEnabled(v213, 17);

                if (v214)
                {
                  v215 = sub_1000FBA50();
                  _NRLogWithArgs(v215, 17, "Pairing manager %@ is not registered", xarrayc);

                }
                goto LABEL_285;
              }
              if (!*(_QWORD *)(v91 + 88))
              {
                if (*(_QWORD *)(v91 + 40))
                {
                  v273 = 0u;
                  v274 = 0u;
                  block = 0u;
                  v272 = 0u;
                  v93 = *(id *)(v91 + 40);
                  v94 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &block, v275, 16);
                  if (v94)
                  {
                    v95 = *(_QWORD *)v272;
                    do
                    {
                      for (i = 0; i != v94; i = (char *)i + 1)
                      {
                        if (*(_QWORD *)v272 != v95)
                          objc_enumerationMutation(v93);
                        v97 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92[5], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&block + 1) + 8 * (_QWORD)i)));
                        if (v97)
                          v97[8] = 0;

                      }
                      v94 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &block, v275, 16);
                    }
                    while (v94);
                  }

                }
                else
                {
                  v131 = objc_alloc_init((Class)NSMutableDictionary);
                  v132 = v92[5];
                  v92[5] = v131;

                }
                v133 = [NRDiscoveryClient alloc];
                v134 = *(id *)(a1 + 8);
                v135 = sub_100119DA4((id *)&v133->super.isa, v134, 0);
                v136 = v92[11];
                v92[11] = v135;

                v137 = v92[11];
                if (v137)
                {
                  if (v137[19] || (v137[22] = 1, (v137 = v92[11]) != 0))
                    v137[16] = 1;
                }
                objc_initWeak(&location, v92);
                v138 = v92[11];
                from = _NSConcreteStackBlock;
                p_from = 3221225472;
                v261 = (uint64_t)sub_100105E7C;
                v262 = (uint64_t (*)(uint64_t, uint64_t))&unk_1001B7A18;
                objc_copyWeak((id *)&v263, &location);
                v139 = &from;
                v140 = v139;
                if (v138 && !*((_BYTE *)v138 + 19))
                {
                  v141 = objc_retainBlock(v139);
                  v142 = (void *)v138[9];
                  v138[9] = v141;

                }
                v143 = v92[11];
                applier = _NSConcreteStackBlock;
                v255 = 3221225472;
                v256 = sub_100105ECC;
                v257 = &unk_1001B7A18;
                objc_copyWeak(v258, &location);
                v144 = &applier;
                v145 = v144;
                if (v143 && !*((_BYTE *)v143 + 19))
                {
                  v146 = objc_retainBlock(v144);
                  v147 = (void *)v143[10];
                  v143[10] = v146;

                }
                v148 = v92[11];
                v265 = _NSConcreteStackBlock;
                v266 = 3221225472;
                v267 = (uint64_t)sub_100106104;
                v268 = &unk_1001B7A18;
                objc_copyWeak(&v269, &location);
                v149 = &v265;
                v150 = v149;
                if (v148 && !*((_BYTE *)v148 + 19))
                {
                  v151 = objc_retainBlock(v149);
                  v152 = (void *)v148[11];
                  v148[11] = v151;

                }
                if (qword_1001E4820 != -1)
                  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                v153 = (id)qword_1001E4818;
                v154 = _NRLogIsLevelEnabled(v153, 0);

                if ((v154 & 1) != 0)
                {
                  if (qword_1001E4820 != -1)
                    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                  v155 = (id)qword_1001E4818;
                  v156 = (unsigned __int8 *)v92[11];
                  v157 = v156;
                  if (v156)
                    v158 = v156[15];
                  else
                    v158 = 0;
                  v159 = (unsigned __int8 *)v92[11];
                  v160 = v159;
                  if (v159)
                    v161 = v159[16];
                  else
                    v161 = 0;
                  _NRLogWithArgs(v155, 0, "%s%.30s:%-4d initiating discovery for devices (advertise:%d/browse:%d)", "", "-[NRDevicePairingDirector handleStartDiscoveryRequestVM:forConnection:]", 2317, v158, v161);

                }
                v162 = v92[11];
                sub_10011A4C8((uint64_t)v162, 255);

                v163 = (id *)v92[11];
                v164 = CFSTR("cmpn-pairing-discovery");
                if (v163 && !*((_BYTE *)v163 + 19))
                  objc_storeStrong(v163 + 25, CFSTR("cmpn-pairing-discovery"));

                v165 = v92[11];
                sub_10011DA3C(v165);

                v166 = v63[1];
                sub_100101C1C((uint64_t)NRDevicePairingDirector, 0, v62, v166);

                objc_destroyWeak(&v269);
                objc_destroyWeak(v258);
                objc_destroyWeak((id *)&v263);
                objc_destroyWeak(&location);
                goto LABEL_196;
              }
              v218 = sub_1000FBA50();
              v219 = _NRLogIsLevelEnabled(v218, 17);

              if (!v219)
              {
LABEL_285:
                sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v62, v63[1]);
LABEL_196:

LABEL_197:
                v61 = objb;
LABEL_198:

                goto LABEL_236;
              }
              v220 = sub_1000FBA50();
              v221 = (unsigned __int8 *)v92[11];
              v222 = v221;
              if (v221)
              {
                v223 = v221[16];
                v224 = (unsigned __int8 *)v92[11];
                if (!v224)
                {
LABEL_284:
                  _NRLogWithArgs(v220, 17, "Start Discovery request received for %@ when discovery=%u or advertise=%u already in progress", v92, v223, v224);

                  goto LABEL_285;
                }
              }
              else
              {
                v223 = 0;
                v224 = (unsigned __int8 *)v92[11];
                if (!v224)
                  goto LABEL_284;
              }
              v224 = (unsigned __int8 *)v224[15];
              goto LABEL_284;
            }
            v75 = xpc_dictionary_get_uuid(v60, nrXPCKeyPairingManager);
            if (!v75 || (v76 = v75, uuid_is_null(v75)))
            {
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v60, v61[1]);
              goto LABEL_198;
            }
            v105 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v76);
            v106 = v61;
            v107 = objc_claimAutoreleasedReturnValue(objc_msgSend(v61[2], "objectForKeyedSubscript:", v105));
            v108 = (id *)v107;
            if (v107)
            {
              if (!*(_QWORD *)(v107 + 56))
              {
                if (!*(_QWORD *)(v107 + 64))
                {
                  v273 = 0u;
                  v274 = 0u;
                  block = 0u;
                  v272 = 0u;
                  v109 = *(id *)(v107 + 40);
                  v110 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &block, v275, 16);
                  if (v110)
                  {
                    v111 = *(_QWORD *)v272;
                    do
                    {
                      for (j = 0; j != v110; j = (char *)j + 1)
                      {
                        if (*(_QWORD *)v272 != v111)
                          objc_enumerationMutation(v109);
                        v113 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108[5], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&block + 1) + 8 * (_QWORD)j)));
                        if (v113)
                          v113[8] = 0;

                      }
                      v110 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &block, v275, 16);
                    }
                    while (v110);
                  }

                  v114 = objc_alloc_init((Class)CBDiscovery);
                  objc_storeStrong(v108 + 7, v114);
                  objc_msgSend(v114, "setDispatchQueue:", *(_QWORD *)(a1 + 8));
                  v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108[3], "pairingCriteria"));
                  v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "rssi"));
                  v117 = v116 == 0;

                  if (!v117)
                  {
                    v118 = v108[3];
                    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "pairingCriteria"));
                    v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "rssi"));
                    objc_msgSend(v114, "setBleRSSIThresholdHint:", objc_msgSend(v120, "charValue"));

                  }
                  objc_initWeak(&location, v108);
                  applier = _NSConcreteStackBlock;
                  v255 = 3221225472;
                  v256 = sub_100105010;
                  v257 = &unk_1001B8170;
                  objc_copyWeak(v258, &location);
                  objc_msgSend(v114, "setDeviceFoundHandler:", &applier);
                  v265 = _NSConcreteStackBlock;
                  v266 = 3221225472;
                  v267 = (uint64_t)sub_100105AC0;
                  v268 = &unk_1001B8170;
                  objc_copyWeak(&v269, &location);
                  objc_msgSend(v114, "setDeviceLostHandler:", &v265);
                  objc_msgSend(v114, "addDiscoveryType:", 23);
                  objc_msgSend(v114, "setDiscoveryFlags:", 0x20000282000000);
                  from = _NSConcreteStackBlock;
                  p_from = 3221225472;
                  v261 = (uint64_t)sub_100105CFC;
                  v262 = (uint64_t (*)(uint64_t, uint64_t))&unk_1001B7A40;
                  objc_copyWeak(&v264, &location);
                  v263 = (void (*)(uint64_t))v60;
                  objc_msgSend(v114, "activateWithCompletion:", &from);

                  objc_destroyWeak(&v264);
                  objc_destroyWeak(&v269);
                  objc_destroyWeak(v258);
                  objc_destroyWeak(&location);

                  goto LABEL_149;
                }
                v234 = sub_1000FBA50();
                v235 = _NRLogIsLevelEnabled(v234, 17);

                if (v235)
                {
                  v227 = sub_1000FBA50();
                  _NRLogWithArgs(v227, 17, "Discovery start request received for %@ when client has outstanding pairing request", v108);
                  goto LABEL_298;
                }
LABEL_299:
                sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v60, v106[1]);
LABEL_149:

                v61 = v106;
                goto LABEL_198;
              }
              v230 = sub_1000FBA50();
              v231 = _NRLogIsLevelEnabled(v230, 17);

              if (!v231)
                goto LABEL_299;
              v227 = sub_1000FBA50();
              _NRLogWithArgs(v227, 17, "Discovery start request received for %@ when discovery already started", v108);
            }
            else
            {
              v225 = sub_1000FBA50();
              v226 = _NRLogIsLevelEnabled(v225, 17);

              if (!v226)
                goto LABEL_299;
              v227 = sub_1000FBA50();
              _NRLogWithArgs(v227, 17, "Pairing manager %@ is not registered", v105);
            }
LABEL_298:

            goto LABEL_299;
          case 4uLL:
            v66 = xdict;
            v67 = v249;
            if (qword_1001E4870 != -1)
              dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
            if (byte_1001E4868)
            {
              v68 = v66;
              v69 = v67;
              v70 = xpc_dictionary_get_uuid(v68, nrXPCKeyPairingManager);
              if (!v70 || (v71 = v70, uuid_is_null(v70)))
              {
                v72 = v69[1];
                v73 = -2005;
                v74 = v68;
LABEL_155:
                sub_100101C1C((uint64_t)NRDevicePairingDirector, v73, v74, v72);
                goto LABEL_156;
              }
              v98 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v71);
              v99 = objc_claimAutoreleasedReturnValue(objc_msgSend(v69[2], "objectForKeyedSubscript:", v98));
              v101 = (_QWORD *)v99;
              if (v99)
              {
                v102 = *(_QWORD *)(v99 + 88);
                if (v102 && *(_BYTE *)(v102 + 16))
                {
                  sub_100119F6C(v102, v100);
                  v103 = 0;
                  v104 = (id)v101[11];
                  v101[11] = 0;
LABEL_132:

LABEL_133:
                  sub_100101C1C((uint64_t)NRDevicePairingDirector, v103, v68, v69[1]);

LABEL_156:
                  goto LABEL_157;
                }
                v208 = sub_1000FBA50();
                v209 = _NRLogIsLevelEnabled(v208, 17);

                if (v209)
                {
                  v104 = sub_1000FBA50();
                  _NRLogWithArgs(v104, 17, "Discovery stop request received for %@ when discovery not started", v101);
LABEL_278:
                  v103 = -2005;
                  goto LABEL_132;
                }
              }
              else
              {
                v216 = sub_1000FBA50();
                v217 = _NRLogIsLevelEnabled(v216, 17);

                if (v217)
                {
                  v104 = sub_1000FBA50();
                  _NRLogWithArgs(v104, 17, "%@ is not registered", v98);
                  goto LABEL_278;
                }
              }
              v103 = -2005;
              goto LABEL_133;
            }
            v77 = xpc_dictionary_get_uuid(v66, nrXPCKeyPairingManager);
            if (!v77 || (v78 = v77, uuid_is_null(v77)))
            {
              if (qword_1001E4820 != -1)
                dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
              if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
              {
                if (qword_1001E4820 != -1)
                  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                _NRLogWithArgs(qword_1001E4818, 17, "Message missing manager UUID");
              }
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v66, v67[1]);
LABEL_157:

              goto LABEL_236;
            }
            v68 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v78);
            v121 = objc_claimAutoreleasedReturnValue(objc_msgSend(v67[2], "objectForKeyedSubscript:", v68));
            v69 = (void **)v121;
            if (v121)
            {
              v122 = *(void **)(v121 + 56);
              if (v122)
              {
                objc_msgSend(v122, "invalidate");
                v123 = 0;
                v124 = v69[7];
                v69[7] = 0;
LABEL_153:

LABEL_154:
                v72 = v67[1];
                v73 = v123;
                v74 = v66;
                goto LABEL_155;
              }
              v232 = sub_1000FBA50();
              v233 = _NRLogIsLevelEnabled(v232, 17);

              if (v233)
              {
                v124 = sub_1000FBA50();
                _NRLogWithArgs(v124, 17, "Discovery stop request received for %@ when discovery not started", v69);
                goto LABEL_294;
              }
            }
            else
            {
              v228 = sub_1000FBA50();
              v229 = _NRLogIsLevelEnabled(v228, 17);

              if (v229)
              {
                v124 = sub_1000FBA50();
                _NRLogWithArgs(v124, 17, "%@ is not registered", v68);
LABEL_294:
                v123 = -2005;
                goto LABEL_153;
              }
            }
            v123 = -2005;
            goto LABEL_154;
          case 6uLL:
            sub_10010435C(a1, xdict, v249);
            goto LABEL_236;
          case 9uLL:
            goto LABEL_236;
          case 0xAuLL:
            v53 = xdict;
            v54 = v249;
            v55 = xpc_dictionary_get_uuid(v53, nrXPCKeyPairingManager);
            if (!v55 || (v56 = v55, uuid_is_null(v55)))
            {
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v53, v54[1]);
              goto LABEL_235;
            }
            v239 = (id *)objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v56);
            objc = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54[2], "objectForKeyedSubscript:"));
            if (!objc)
            {
              v210 = sub_1000FBA50();
              v211 = _NRLogIsLevelEnabled(v210, 17);

              if (v211)
              {
                v212 = sub_1000FBA50();
                _NRLogWithArgs(v212, 17, "%@ is not registered", v239);

              }
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v53, v54[1]);
LABEL_234:

LABEL_235:
              goto LABEL_236;
            }
            v79 = xpc_dictionary_get_value(v53, nrXPCKeyPairingTarget);
            v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
            xarrayb = v80;
            v81 = v80;
            if (v80 && xpc_get_type(v80) == (xpc_type_t)&_xpc_type_data)
            {
              v127 = objc_alloc((Class)NSData);
              v128 = xpc_data_get_bytes_ptr(v81);
              applier = 0;
              v241 = (id *)objc_msgSend(v127, "initWithBytes:length:", v128, xpc_data_get_length(v81));
              v129 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NRDevicePairingTarget), v241, &applier);
              v82 = (id)objc_claimAutoreleasedReturnValue(v129);
              v85 = applier;
              if (!v82
                || (v130 = objc_opt_class(NRDevicePairingTarget),
                    (objc_opt_isKindOfClass(v82, v130) & (v85 == 0)) == 0))
              {
                if (qword_1001E4820 != -1)
                  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
                {
                  if (qword_1001E4820 != -1)
                    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                  _NRLogWithArgs(qword_1001E4818, 17, "Failed to unarchive operational properties %@", v85);
                }
                sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v53, v54[1]);
                goto LABEL_233;
              }

            }
            else
            {
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v53, v54[1]);
              v82 = 0;
            }
            v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "candidate"));
            v241 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "uuid"));

            v84 = objc[5];
            v85 = (void **)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "objectForKeyedSubscript:", v241));

            if (v85)
            {
              if (qword_1001E4870 != -1)
                dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
              if (byte_1001E4868 || (sub_10010047C((uint64_t)objc) & 1) != 0)
              {
                objc_storeStrong(v85 + 5, v82);
                v86 = objc_msgSend(v82, "authMethod");
                v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "authData"));
                v275[0] = _NSConcreteStackBlock;
                v275[1] = (id)3221225472;
                v276 = (void (*)(id *))sub_100104F5C;
                v277 = &unk_1001B7898;
                v85 = v85;
                v278 = v85;
                v82 = v82;
                v279 = v82;
                v280 = v53;
                v281 = v54;
                v88 = v87;
                v89 = v275;
                v90 = v89;
                if (v88 && v86)
                {
                  if (v86 == (id)2)
                  {
                    v237 = v88;
                    v238 = v90;
                    if (v85[23])
                    {
                      if (qword_1001E4820 != -1)
                        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                      if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
                      {
                        if (qword_1001E4820 != -1)
                          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                        _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ Already started generating salted PIN, enqueuing completion", "", "-[NRDevicePairingCandidateContext derivePSKForPairing:authData:withCompletion:]", 1495, v85);
                      }
                    }
                    else
                    {
                      if (qword_1001E4820 != -1)
                        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                      if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
                      {
                        if (qword_1001E4820 != -1)
                          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                        _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d %@ Generating salted PIN using PBKDF2", "", "-[NRDevicePairingCandidateContext derivePSKForPairing:authData:withCompletion:]", 1456, v85);
                      }
                      v171 = v85[21];
                      objc_initWeak(&from, v85);
                      v172 = dispatch_group_create();
                      v173 = v85[23];
                      v85[23] = v172;

                      v174 = qword_1001E4828;
                      group = v85[23];
                      if (v174 != -1)
                        dispatch_once(&qword_1001E4828, &stru_1001B7AD0);
                      *(_QWORD *)&block = _NSConcreteStackBlock;
                      *((_QWORD *)&block + 1) = 3221225472;
                      *(_QWORD *)&v272 = sub_1001016AC;
                      *((_QWORD *)&v272 + 1) = &unk_1001B7928;
                      v175 = (id)qword_1001E4830;
                      objc_copyWeak((id *)&v274, &from);
                      *(_QWORD *)&v273 = v237;
                      *((_QWORD *)&v273 + 1) = v171;
                      v176 = v171;
                      dispatch_group_async(group, v175, &block);

                      objc_destroyWeak((id *)&v274);
                      objc_destroyWeak(&from);
                    }
                    v177 = v85[3];
                    v178 = v85[23];
                    dispatch_group_notify(v178, v177, v238);

                    v90 = v238;
                  }
                  else if (v86 == (id)1)
                  {
                    objc_storeStrong(v85 + 22, v87);
                    v276(v90);
                  }
                }
                else
                {
                  v170 = v89;
                  v276(v89);
                  v90 = v170;
                }

              }
              else
              {
                if (qword_1001E4820 != -1)
                  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
                {
                  if (qword_1001E4820 != -1)
                    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                  v167 = (id *)(a1 + 24);
                  v168 = (id)qword_1001E4818;
                  WeakRetained = objc_loadWeakRetained(v167);
                  _NRLogWithArgs(v168, 16, "%s%.30s:%-4d %@ currently owns the BT connections", "", "-[NRDevicePairingDirector handleStartPairingRequest:forConnection:]", 2874, WeakRetained);

                }
                sub_100101C1C((uint64_t)NRDevicePairingDirector, -3001, v53, v54[1]);
              }
            }
            else
            {
              if (qword_1001E4820 != -1)
                dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
              if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
              {
                if (qword_1001E4820 != -1)
                  dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
                v125 = (id)qword_1001E4818;
                v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "candidate"));
                _NRLogWithArgs(v125, 17, "Pairing candidate not found %@", v126);

              }
              sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v53, v54[1]);
              v85 = 0;
            }
LABEL_233:

            goto LABEL_234;
          case 0xBuLL:
            v57 = v249;
            v58 = xdict;
            if (qword_1001E4870 != -1)
              dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
            v59 = v57[1];

            sub_100101C1C((uint64_t)NRDevicePairingDirector, -9999, v58, v59);
            goto LABEL_236;
          case 0xDuLL:
            sub_100104890(xdict, v249);
            goto LABEL_236;
          default:
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
            {
              if (qword_1001E4820 != -1)
                dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
              _NRLogWithArgs(qword_1001E4818, 17, "Received unexpected operation code %llu", v9);
            }
            sub_100101C1C((uint64_t)NRDevicePairingDirector, -2003, xdict, v249[1]);
            goto LABEL_236;
        }
      }
      v182 = sub_1000FBA50();
      v183 = _NRLogIsLevelEnabled(v182, 17);

      if (v183)
      {
        v181 = sub_1000FBA50();
        _NRLogWithArgs(v181, 17, "Received invalid operation code type");
        goto LABEL_243;
      }
    }
    else
    {
      v179 = sub_1000FBA50();
      v180 = _NRLogIsLevelEnabled(v179, 17);

      if (v180)
      {
        v181 = sub_1000FBA50();
        _NRLogWithArgs(v181, 17, "Received request without operation code");
LABEL_243:

      }
    }
    sub_100104150(a1, v247);
LABEL_236:

LABEL_237:
    v5 = v247;
  }

}

void sub_100104070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, id *a17, id *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  id *v42;
  id *v43;
  id *v44;

  objc_destroyWeak(v42);
  objc_destroyWeak(v44);
  objc_destroyWeak(v43);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100104150(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _xpc_connection_s *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  if (a1)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "objectForKeyedSubscript:", v3));
    v5 = v4;
    if (v4)
    {
      v6 = *(_xpc_connection_s **)(v4 + 8);
      if (v6)
      {
        xpc_connection_cancel(v6);
        v7 = *(void **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;

      }
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v8 = *(id *)(v5 + 16);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v15;
        do
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(_QWORD *)v15 != v11)
              objc_enumerationMutation(v8);
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 16), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i)));
            sub_1000FF18C((uint64_t)v13);

          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        }
        while (v10);
      }

      objc_msgSend(*(id *)(v5 + 16), "removeAllObjects");
      objc_msgSend(*(id *)(a1 + 16), "setObject:forKeyedSubscript:", 0, v3);
    }
    else
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d Unable to find connection entry for %@", "", "-[NRDevicePairingDirector invalidateDevicePairingConnection:]", 3084, v3);
      }
    }

  }
}

void sub_10010435C(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  const unsigned __int8 *uuid;
  const unsigned __int8 *v7;
  id v8;
  id *v9;
  const char *v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  id v13;
  void *v14;
  uint64_t uint64;
  id v16;
  id WeakRetained;
  xpc_object_t v18;
  void *v19;
  uint64_t v20;
  int64_t v21;
  id v22;
  int IsLevelEnabled;
  id v24;
  int v25;
  id v26;
  id v27;
  int v28;
  xpc_object_t v29;
  id v30;
  int v31;
  id v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  id v37;
  id v38;
  int v39;
  id v40;

  v40 = a2;
  v5 = a3;
  uuid = xpc_dictionary_get_uuid(v40, nrXPCKeyPairingManager);
  if (uuid)
  {
    v7 = uuid;
    if (!uuid_is_null(uuid))
    {
      v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v7);
      v9 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5[2], "objectForKeyedSubscript:", v8));
      if (!v9)
      {
        v22 = sub_1000FBA50();
        IsLevelEnabled = _NRLogIsLevelEnabled(v22, 17);

        if (!IsLevelEnabled)
          goto LABEL_21;
        v13 = sub_1000FBA50();
        _NRLogWithArgs(v13, 17, "%@ is not registered", v8);
LABEL_20:

LABEL_21:
        goto LABEL_22;
      }
      v10 = (const char *)nrXPCKeyTargetPairingCandidate;
      v11 = xpc_dictionary_get_uuid(v40, nrXPCKeyTargetPairingCandidate);
      if (!v11)
        goto LABEL_21;
      v12 = v11;
      if (uuid_is_null(v11))
        goto LABEL_21;
      v13 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[5], "objectForKeyedSubscript:", v13));
      if (v14)
      {
        uint64 = xpc_dictionary_get_uint64(v40, nrXPCKeyAuthRequestType);
        if (uint64 - 3 > 0xFFFFFFFFFFFFFFFDLL)
        {
          if (qword_1001E4870 != -1)
            dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
          if (byte_1001E4868 || (sub_10010047C((uint64_t)v9) & 1) != 0)
          {
            sub_10010065C((uint64_t)v14, uint64);
LABEL_19:

            goto LABEL_20;
          }
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
          {
            v16 = sub_1000FBA50();
            WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
            _NRLogWithArgs(v16, 16, "%s%.30s:%-4d %@ currently owns the BT connections", "", "-[NRDevicePairingDirector handleStartAuthMethodRequest:forConnection:]", 2631, WeakRetained);

          }
          v18 = xpc_dictionary_create(0, 0, 0);
          if (v18)
          {
            v19 = v18;
            xpc_dictionary_set_uuid(v18, v10, v12);
            v20 = (uint64_t)v9;
            v21 = -3001;
LABEL_29:
            sub_1000FD064(v20, v21, 8uLL, v19);

            goto LABEL_19;
          }
          v30 = sub_1000FBA50();
          v31 = _NRLogIsLevelEnabled(v30, 16);

          if (v31)
          {
LABEL_40:
            v32 = sub_1000FBA50();
            _NRLogWithArgs(v32, 16, "%s%.30s:%-4d ABORTING: xpc_dictionary_create(%p, %p, %u) failed", "", "nr_xpc_dictionary_create", 74, 0, 0, 0);

          }
LABEL_41:
          v33 = _os_log_pack_size(38);
          v34 = (char *)&v40 - ((__chkstk_darwin(v33) + 15) & 0xFFFFFFFFFFFFFFF0);
          v35 = __error();
          v36 = _os_log_pack_fill(v34, v33, *v35, &_mh_execute_header, "%{public}s xpc_dictionary_create(%p, %p, %u) failed");
          sub_1000DAF48(v36, (uint64_t)"nr_xpc_dictionary_create");
          v37 = sub_1000FBA50();
          _NRLogAbortWithPack(v37, v34);
        }
        v27 = sub_1000FBA50();
        v28 = _NRLogIsLevelEnabled(v27, 16);

        if (!v28)
        {
LABEL_37:
          v29 = xpc_dictionary_create(0, 0, 0);
          if (v29)
          {
            v19 = v29;
            xpc_dictionary_set_uuid(v29, v10, v12);
            v20 = (uint64_t)v9;
            v21 = -2005;
            goto LABEL_29;
          }
          v38 = sub_1000FBA50();
          v39 = _NRLogIsLevelEnabled(v38, 16);

          if (v39)
            goto LABEL_40;
          goto LABEL_41;
        }
        v26 = sub_1000FBA50();
        _NRLogWithArgs(v26, 16, "%s%.30s:%-4d %@ Invalid auth method type %llu", "", "-[NRDevicePairingDirector handleStartAuthMethodRequest:forConnection:]", 2620, v9, uint64);
      }
      else
      {
        v24 = sub_1000FBA50();
        v25 = _NRLogIsLevelEnabled(v24, 17);

        if (!v25)
          goto LABEL_37;
        v26 = sub_1000FBA50();
        _NRLogWithArgs(v26, 17, "%@ has no candidate for %@", v9, v13);
      }

      goto LABEL_37;
    }
  }
  if (qword_1001E4820 != -1)
    dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
  if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    _NRLogWithArgs(qword_1001E4818, 17, "Message missing manager UUID", v40);
  }
LABEL_22:

}

void sub_100104890(void *a1, void *a2)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  id v6;
  void **v7;
  const unsigned __int8 *uuid;
  const unsigned __int8 *v9;
  id v10;
  void *v11;
  id v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  NRBluetoothPairer *v22;
  id v23;
  id v24;
  int IsLevelEnabled;
  id v26;
  id v27;
  int v28;
  id v29;
  int *v30;
  uint64_t v31;
  id v32;
  _QWORD v33[2];
  void (*v34)(void **, uint64_t, void *);
  void *v35;
  id v36;
  id v37;
  void **v38;
  _QWORD v39[4];
  char *v40;
  id v41;

  v6 = a1;
  v7 = a2;
  uuid = xpc_dictionary_get_uuid(v6, nrXPCKeyDeviceIdentifier);
  if (!uuid)
  {
    v24 = sub_1000FBA50();
    IsLevelEnabled = _NRLogIsLevelEnabled(v24, 17);

    if (IsLevelEnabled)
    {
      v26 = sub_1000FBA50();
      _NRLogWithArgs(v26, 17, "Missing NRUUID from %@", v6);

    }
    goto LABEL_9;
  }
  v9 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 17, "All-zero NRUUID from %@", v6);
    }
LABEL_9:
    sub_100101C1C((uint64_t)NRDevicePairingDirector, -2005, v6, v7[1]);
    goto LABEL_17;
  }
  v10 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v9);
  if (!v10)
  {
    v27 = sub_1000FBA50();
    v28 = _NRLogIsLevelEnabled(v27, 16);

    v13 = "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]";
    if (v28)
    {
      v29 = sub_1000FBA50();
      _NRLogWithArgs(v29, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]", 2980);

    }
    v6 = (id)_os_log_pack_size(12);
    v7 = (void **)((char *)v33 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0));
    v30 = __error();
    v31 = _os_log_pack_fill(v7, v6, *v30, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    *(_DWORD *)v31 = 136446210;
    *(_QWORD *)(v31 + 4) = "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]";
    v32 = sub_1000FBA50();
    _NRLogAbortWithPack(v32, v7);
    goto LABEL_23;
  }
  v11 = v10;
  v3 = _NSConcreteStackBlock;
  v33[0] = _NSConcreteStackBlock;
  v4 = 3221225472;
  v33[1] = 3221225472;
  v34 = sub_100104CBC;
  v35 = &unk_1001B7A68;
  v36 = v10;
  v37 = v6;
  v38 = v7;
  v12 = v11;
  v2 = v33;
  v13 = (char *)v12;
  objc_opt_self(NRDLocalDevice);
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
LABEL_23:
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v14 = (id)qword_1001E4708;
  v15 = v13;
  v16 = v2;
  v17 = v16;
  if (v14)
  {
    v18 = v14[5];
    if (v18)
    {
      v39[0] = v3;
      v39[1] = v4;
      v39[2] = sub_1000AEEF4;
      v39[3] = &unk_1001B6ED8;
      v19 = v15;
      v40 = v19;
      v41 = v17;
      v20 = v39;
      v21 = v19;
      v22 = -[NRBluetoothPairer initWithNRUUID:]([NRBluetoothPairer alloc], "initWithNRUUID:", v21);

      v23 = *(id *)(v18 + 24);
      -[NRBluetoothPairer unpairWithCompletionQueue:completionBlock:](v22, "unpairWithCompletionQueue:completionBlock:", v23, v20);

    }
    else
    {
      v34((void **)v16, 22, CFSTR("Already unpaired or bluetooth device not found"));
    }
  }

LABEL_17:
}

void sub_100104CBC(void **a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;

  v5 = a3;
  v7 = (void *)_NRCopyLogObjectForNRUUID(a1[4], v6);
  IsLevelEnabled = _NRLogIsLevelEnabled(v7, 1);

  if (IsLevelEnabled)
  {
    v10 = (void *)_NRCopyLogObjectForNRUUID(a1[4], v9);
    _NRLogWithArgs(v10, 1, "%s%.30s:%-4d unpairBluetoothDeviceWithNRUUID returned with result:%lld and error: %@", "", "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]_block_invoke", 2984, a2, v5);

  }
  v12 = sub_1001300EC((uint64_t)NRDLocalDevice, a1[4], 0);
  if (v12)
  {
    v13 = a1[4];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100104E88;
    v20[3] = &unk_1001B7A68;
    v21 = v13;
    v22 = a1[5];
    v23 = a1[6];
    sub_1001370D8((uint64_t)NRDLocalDevice, v21, v20);

  }
  else
  {
    v14 = (void *)_NRCopyLogObjectForNRUUID(a1[4], v11);
    v15 = _NRLogIsLevelEnabled(v14, 16);

    if (v15)
    {
      v17 = (void *)_NRCopyLogObjectForNRUUID(a1[4], v16);
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d localDevice not found for %@", "", "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]_block_invoke", 2998, a1[4]);

    }
    v18 = a1[6];
    if (v18)
      v19 = (void *)v18[1];
    else
      v19 = 0;
    sub_100101C1C((uint64_t)NRDevicePairingDirector, -2008, a1[5], v19);
  }

}

void sub_100104E88(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  id v13;

  v13 = a3;
  v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 32), v5);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 0);

  if (IsLevelEnabled)
  {
    v9 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 32), v8);
    _NRLogWithArgs(v9, 0, "%s%.30s:%-4d unregisterDeviceWithNRUUID: nruuid %@ result %lld error %@", "", "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]_block_invoke_2", 2991, *(_QWORD *)(a1 + 32), a2, v13);

  }
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    v11 = *(void **)(v10 + 8);
  else
    v11 = 0;
  if (a2)
    v12 = -3002;
  else
    v12 = 0;
  sub_100101C1C((uint64_t)NRDevicePairingDirector, v12, *(void **)(a1 + 40), v11);

}

void sub_100104F5C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  v2 = a1[4];
  if (v2
    && (v3 = *(void **)(v2 + 176)) != 0
    && (v4 = (void *)a1[5],
        v5 = v3,
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "operationalProperties")),
        v7 = sub_100100A78((id *)v2, v5, v6),
        v5,
        v6,
        v7))
  {
    v8 = (void *)a1[6];
    v9 = a1[7];
    if (v9)
      v10 = *(void **)(v9 + 8);
    else
      v10 = 0;
    v11 = 0;
  }
  else
  {
    v8 = (void *)a1[6];
    v12 = a1[7];
    if (v12)
      v10 = *(void **)(v12 + 8);
    else
      v10 = 0;
    v11 = -2005;
  }
  sub_100101C1C((uint64_t)NRDevicePairingDirector, v11, v8, v10);
}

void sub_100105010(uint64_t a1, void *a2)
{
  void **WeakRetained;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  void *v22;
  id *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  signed int v28;
  void *v29;
  void *v30;
  signed int v31;
  id v32;
  id v33;
  void *v34;
  char v35;
  void *v36;
  void *v37;
  signed int v38;
  void *v39;
  void *v40;
  signed int v41;
  id v42;
  int IsLevelEnabled;
  id v44;
  int v45;
  id v46;
  int v47;
  char v48;
  uint64_t v49;
  id v50;
  id v51;
  int v52;
  char v53;

  v51 = a2;
  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = v51;
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 2))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 2, "%s%.30s:%-4d Found device: %@", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 393, v5);
    }
    v6 = objc_alloc((Class)NSUUID);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v8 = objc_msgSend(v6, "initWithUUIDString:", v7);

    if (!v8)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v42 = (id)qword_1001E4818;
      IsLevelEnabled = _NRLogIsLevelEnabled(v42, 1);

      if (!IsLevelEnabled)
        goto LABEL_84;
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v10 = (id)qword_1001E4818;
      v32 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      _NRLogWithArgs(v10, 1, "%s%.30s:%-4d Ignoring device with unrecognized identifier format %@", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 397, v32);
      goto LABEL_82;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "watchSetupData"));
    v10 = v9;
    if (!v9)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v44 = (id)qword_1001E4818;
      v45 = _NRLogIsLevelEnabled(v44, 1);

      if (!v45)
        goto LABEL_83;
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v32 = (id)qword_1001E4818;
      _NRLogWithArgs(v32, 1, "%s%.30s:%-4d Ignoring device with no Watch setup data");
      goto LABEL_82;
    }
    if ((unint64_t)objc_msgSend(v9, "length") <= 4)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v46 = (id)qword_1001E4818;
      v47 = _NRLogIsLevelEnabled(v46, 1);

      if (!v47)
        goto LABEL_83;
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v32 = (id)qword_1001E4818;
      objc_msgSend(v10, "length");
      _NRLogWithArgs(v32, 1, "%s%.30s:%-4d Ignoring device with too short Watch setup data (%zu < %zu)");
      goto LABEL_82;
    }
    v53 = 0;
    v52 = 0;
    objc_msgSend(v10, "getBytes:length:", &v52, 5);
    if ((v52 & 0xE0) != 0x20)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Ignoring device with unrecognized header version %u", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 414, v52 >> 5);
      }
      goto LABEL_83;
    }
    v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[6], "objectForKeyedSubscript:", v8));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[5], "objectForKeyedSubscript:"));
    v50 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", (char *)&v52 + 1, 4);
    v12 = (char *)objc_msgSend(v10, "length");
    if (v12 == (char *)5)
    {
      v13 = 0;
      if (v11)
      {
LABEL_14:
        v14 = *(id *)(v11 + 32);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
        v16 = objc_msgSend(v15, "isEqualToData:", v50);

        if ((v16 & 1) == 0)
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            v17 = (id)qword_1001E4818;
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
            _NRLogWithArgs(v17, 0, "%s%.30s:%-4d %@ identifier changed! old: %@ new: %@", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 449, v14, v18, v50);

          }
        }
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "metadata"));
        v20 = objc_msgSend(v19, "isEqualToData:", v13);

        if ((v20 & 1) != 0)
        {
          if ((v16 & 1) != 0)
            goto LABEL_63;
        }
        else
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
          {
            if (qword_1001E4820 != -1)
              dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
            v33 = (id)qword_1001E4818;
            v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "metadata"));
            _NRLogWithArgs(v33, 0, "%s%.30s:%-4d %@ metadata changed! old: %@ new: %@", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 453, v14, v34, v13);

          }
        }
        if (*(_BYTE *)(v11 + 8))
        {
          *(_BYTE *)(v11 + 8) = 0;
          sub_1001001C4((uint64_t)WeakRetained, v14);
        }
        objc_msgSend(v14, "setIdentifier:", v50);
        objc_msgSend(v14, "setMetadata:", v13);
LABEL_63:

        if (!*(_BYTE *)(v11 + 8))
          goto LABEL_64;
        goto LABEL_41;
      }
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subdataWithRange:", 5, v12 - 5));
      if (v11)
        goto LABEL_14;
    }
    v21 = objc_msgSend(objc_alloc((Class)NRDevicePairingCandidate), "initInternal");
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "uuid"));
    objc_msgSend(v21, "setIdentifier:", v50);
    objc_msgSend(v21, "setMetadata:", v13);
    objc_msgSend(v21, "setCbUUID:", v8);
    v23 = sub_1000FBA90((id *)[NRDevicePairingCandidateContext alloc], v21, WeakRetained[2], WeakRetained);
    v11 = (uint64_t)v23;
    if (v23)
      objc_storeStrong(v23 + 6, a2);
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v24 = (id)qword_1001E4818;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "fullDescription"));
      _NRLogWithArgs(v24, 0, "%s%.30s:%-4d Discovered %@", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 441, v25);

    }
    objc_msgSend(WeakRetained[5], "setObject:forKeyedSubscript:", v11, v22);
    objc_msgSend(WeakRetained[6], "setObject:forKeyedSubscript:", v22, v8);

    if (!v11)
    {
      v35 = 1;
LABEL_65:
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[3], "pairingCriteria"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "rssi"));

      if (v37)
      {
        v48 = v35;
        v38 = objc_msgSend(v5, "rssi");
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[3], "pairingCriteria"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "rssi"));
        v41 = objc_msgSend(v40, "charValue");

        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        if (_NRLogIsLevelEnabled(qword_1001E4818, 2))
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          _NRLogWithArgs(qword_1001E4818, 2, "%s%.30s:%-4d Inactive: RSSI %d Target RSSI %d", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 474, v38, v41);
        }
        if (v38 && v38 >= v41)
        {
          if ((v48 & 1) != 0)
            goto LABEL_52;
          goto LABEL_77;
        }
        if ((v48 & 1) == 0)
        {
          v32 = (id)v49;
          if (!*(_BYTE *)(v11 + 8))
            goto LABEL_81;
LABEL_80:
          sub_1000FFE88(WeakRetained, *(void **)(v11 + 32));
          goto LABEL_81;
        }
      }
      else if ((v35 & 1) == 0)
      {
LABEL_77:
        *(_BYTE *)(v11 + 8) = 1;
        v32 = (id)v49;
        goto LABEL_80;
      }
LABEL_52:
      v32 = (id)v49;
LABEL_81:

LABEL_82:
LABEL_83:

LABEL_84:
      goto LABEL_85;
    }
    if (!*(_BYTE *)(v11 + 8))
    {
LABEL_64:
      v35 = 0;
      goto LABEL_65;
    }
LABEL_41:
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[3], "pairingCriteria"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "rssi"));

    if (!v27)
      goto LABEL_107;
    v28 = objc_msgSend(v5, "rssi");
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[3], "pairingCriteria"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "rssi"));
    v31 = objc_msgSend(v30, "charValue");

    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 2))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 2, "%s%.30s:%-4d Active: RSSI %d Target RSSI %d", "", "-[NRDevicePairingManagerContext handleFoundDevice:]", 485, v28, v31);
    }
    if (v28 && v28 < v31)
    {
      *(_BYTE *)(v11 + 8) = 0;
    }
    else
    {
LABEL_107:
      if (*(_BYTE *)(v11 + 8))
        goto LABEL_52;
    }
    sub_1001001C4((uint64_t)WeakRetained, *(void **)(v11 + 32));
    v32 = (id)v49;
    goto LABEL_81;
  }
LABEL_85:

}

void sub_100105AC0(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  int IsLevelEnabled;
  id v13;

  v13 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = v13;
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Lost device: %@", "", "-[NRDevicePairingManagerContext handleLostDevice:]", 501, v4);
    }
    v5 = objc_alloc((Class)NSUUID);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
    v7 = objc_msgSend(v5, "initWithUUIDString:", v6);

    if (v7)
    {
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[6], "objectForKeyedSubscript:", v7));
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[5], "objectForKeyedSubscript:", v8));
      v10 = (void *)v9;
      if (v9 && *(_BYTE *)(v9 + 8))
      {
        *(_BYTE *)(v9 + 8) = 0;
        sub_1001001C4((uint64_t)WeakRetained, *(void **)(v9 + 32));
      }
    }
    else
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v11 = (id)qword_1001E4818;
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 1);

      if (!IsLevelEnabled)
        goto LABEL_13;
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v8 = (id)qword_1001E4818;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
      _NRLogWithArgs(v8, 1, "%s%.30s:%-4d Ignoring device with unrecognized identifier format %@", "", "-[NRDevicePairingManagerContext handleLostDevice:]", 504, v10);
    }

LABEL_13:
  }

}

void sub_100105CFC(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  void **v5;
  void **v6;
  int64_t v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  id v11;

  v11 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void **)objc_loadWeakRetained(WeakRetained + 1);
    if (v5)
    {
      v6 = v5;
      if (v11)
      {
        v8 = sub_1000FBA50();
        IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

        if (IsLevelEnabled)
        {
          v10 = sub_1000FBA50();
          _NRLogWithArgs(v10, 16, "%s%.30s:%-4d Failed to start CBDiscovery for %@: %@", "", "-[NRDevicePairingDirector handleStartDiscoveryRequest:forConnection:]_block_invoke_3", 2416, v4, v11);

        }
        v7 = -3002;
      }
      else
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        if (_NRLogIsLevelEnabled(qword_1001E4818, 0))
        {
          if (qword_1001E4820 != -1)
            dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
          _NRLogWithArgs(qword_1001E4818, 0, "%s%.30s:%-4d Started discovery for %@", "", "-[NRDevicePairingDirector handleStartDiscoveryRequest:forConnection:]_block_invoke_3", 2411, v4);
        }
        v7 = 0;
      }
      sub_100101C1C((uint64_t)NRDevicePairingDirector, v7, *(void **)(a1 + 32), v6[1]);

    }
  }

}

void sub_100105E7C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    sub_1000FF85C(WeakRetained, v5);

}

void sub_100105ECC(uint64_t a1, void *a2)
{
  id *WeakRetained;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  int IsLevelEnabled;
  void *v13;
  id v14;
  id v15;

  v15 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = v15;
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 1))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 1, "%s%.30s:%-4d Lost device: %@", "", "-[NRDevicePairingManagerContext handleLostDeviceEndpoint:]", 348, v4);
    }
    v5 = objc_alloc((Class)NSUUID);
    if (v4)
      v6 = (void *)v4[2];
    else
      v6 = 0;
    v7 = v6;
    v8 = objc_msgSend(v5, "initWithUUIDString:", v7);

    if (v8)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[5], "objectForKeyedSubscript:", v8));
      v10 = (id)v9;
      if (v9 && *(_BYTE *)(v9 + 8))
      {
        *(_BYTE *)(v9 + 8) = 0;
        sub_1001001C4((uint64_t)WeakRetained, *(void **)(v9 + 32));
      }
    }
    else
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v11 = (id)qword_1001E4818;
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 1);

      if (!IsLevelEnabled)
        goto LABEL_15;
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      v10 = (id)qword_1001E4818;
      if (v4)
        v13 = (void *)v4[2];
      else
        v13 = 0;
      v14 = v13;
      _NRLogWithArgs(v10, 1, "%s%.30s:%-4d Ignoring device with unrecognized identifier format %@", "", "-[NRDevicePairingManagerContext handleLostDeviceEndpoint:]", 352, v14);

    }
LABEL_15:

  }
}

void sub_100106104(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    sub_1000FF85C(WeakRetained, v5);

}

BOOL sub_100106154(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  xpc_type_t type;
  id v6;

  v4 = a3;
  type = xpc_get_type(v4);
  if (type == (xpc_type_t)&_xpc_type_uuid)
  {
    v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v4));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v6);

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }

  return type == (xpc_type_t)&_xpc_type_uuid;
}

void sub_100106200(uint64_t a1, void *a2)
{
  xpc_type_t type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  type = xpc_get_type(v9);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (qword_1001E4820 != -1)
      dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
    if (_NRLogIsLevelEnabled(qword_1001E4818, 2))
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      _NRLogWithArgs(qword_1001E4818, 2, "%s%.30s:%-4d Received XPC dict: %@", "", "-[NRDevicePairingDirector addDevicePairingConnection:]_block_invoke", 3065, v9);
    }
    sub_100101E8C(*(_QWORD *)(a1 + 32), v9, *(void **)(a1 + 40));
  }
  else
  {
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d Received XPC error: %@, invalidating connection %@", "", "-[NRDevicePairingDirector addDevicePairingConnection:]_block_invoke", 3069, v9, *(_QWORD *)(a1 + 40));
      }
    }
    else
    {
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 16))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 16, "%s%.30s:%-4d Received unexpected XPC object: %@, invalidating connection %@", "", "-[NRDevicePairingDirector addDevicePairingConnection:]_block_invoke", 3072, v9, *(_QWORD *)(a1 + 40));
      }
      if (qword_1001E4820 != -1)
        dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
      if (_NRLogIsLevelEnabled(qword_1001E4818, 17))
      {
        if (qword_1001E4820 != -1)
          dispatch_once(&qword_1001E4820, &stru_1001B7AB0);
        _NRLogWithArgs(qword_1001E4818, 17, "Received unexpected XPC object", v4, v5, v6, v7, v8);
      }
    }
    sub_100104150(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  }

}

void sub_1001069B0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4838;
  qword_1001E4838 = (uint64_t)v1;

}

id sub_1001069E0()
{
  if (qword_1001E4840 != -1)
    dispatch_once(&qword_1001E4840, &stru_1001B7AF0);
  return (id)qword_1001E4838;
}

void sub_100106A20(id a1)
{
  uint64_t v1;
  void *v2;
  __CFString *v3;
  uint64_t v4;
  void *v5;

  v1 = MGCopyAnswer(CFSTR("SupplementalBuildVersion"), 0);
  v2 = (void *)qword_1001E4848;
  qword_1001E4848 = v1;

  if (qword_1001E4910 != -1)
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
  if (_NRLogIsLevelEnabled(qword_1001E4908, 1))
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    _NRLogWithArgs(qword_1001E4908, 1, "%s%.30s:%-4d deviceBuildVersion is \"%@\"", "", "_NRCopyDeviceBuildVersion_block_invoke", 53, qword_1001E4848);
  }
  v3 = (__CFString *)qword_1001E4848;
  if (!qword_1001E4848)
  {
    qword_1001E4848 = (uint64_t)CFSTR("Unknown");
    v3 = CFSTR("Unknown");
  }
  if ((unint64_t)-[__CFString length](v3, "length") >= 0xFF)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4848, "substringToIndex:", 254));
    v5 = (void *)qword_1001E4848;
    qword_1001E4848 = v4;

  }
}

void sub_100106B4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4908;
  qword_1001E4908 = (uint64_t)v1;

}

void sub_100106B7C(id a1)
{
  uint64_t v1;
  void *v2;
  __CFString *v3;
  uint64_t v4;
  void *v5;

  v1 = MGCopyAnswer(CFSTR("UserAssignedDeviceName"), 0);
  v2 = (void *)qword_1001E4858;
  qword_1001E4858 = v1;

  if (qword_1001E4910 != -1)
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
  if (_NRLogIsLevelEnabled(qword_1001E4908, 1))
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    _NRLogWithArgs(qword_1001E4908, 1, "%s%.30s:%-4d deviceName is \"%@\"", "", "_NRCopyDeviceName_block_invoke", 71, qword_1001E4858);
  }
  v3 = (__CFString *)qword_1001E4858;
  if (!qword_1001E4858)
  {
    qword_1001E4858 = (uint64_t)CFSTR("Unknown");
    v3 = CFSTR("Unknown");
  }
  if ((unint64_t)-[__CFString length](v3, "length") >= 0x10000)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4858, "substringToIndex:", 0xFFFFLL));
    v5 = (void *)qword_1001E4858;
    qword_1001E4858 = v4;

  }
}

void sub_100106CA8(id a1)
{
  int v1;
  size_t v2;
  int v3;
  char __strerrbuf[128];

  v3 = 0;
  v2 = 4;
  if (sysctlbyname("kern.hv_vmm_present", &v3, &v2, 0, 0))
  {
    v1 = *__error();
    if (strerror_r(v1, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to read sysctl kern.hv_vmm_present: [%d] %s", v1, __strerrbuf);
    }
  }
  else
  {
    byte_1001E4868 = v3 != 0;
  }
}

void sub_100106DDC(id a1)
{
  CFBooleanRef v1;

  v1 = (CFBooleanRef)MGCopyAnswer(CFSTR("PasswordConfigured"), 0);
  byte_1001E4878 = v1 == kCFBooleanTrue;
  if (v1)
    CFRelease(v1);
}

id sub_100106E24()
{
  if (qword_1001E4910 != -1)
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
  return (id)qword_1001E4908;
}

uint64_t sub_100106E64(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int *v7;
  uint64_t v8;
  ssize_t v9;
  ssize_t v10;
  id v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;
  id v16;
  id v17;
  int IsLevelEnabled;
  id v19;
  stat v20;
  char __strerrbuf[128];

  v5 = a2;
  v6 = a3;
  if (!objc_msgSend(v5, "length"))
  {
    v17 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v17, 17);

    if (IsLevelEnabled)
    {
      v19 = sub_100106E24();
      _NRLogWithArgs(v19, 17, "%s called with null filePath.length", "NRDSafeWriteDataToFileDescriptor");

    }
    goto LABEL_28;
  }
  memset(&v20, 0, sizeof(v20));
  if (fstat(a1, &v20))
  {
    v7 = __error();
    v8 = *v7;
    if (strerror_r(*v7, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to stat \"%@\": [%d] %s", v5, v8, __strerrbuf);
    }
LABEL_28:
    v12 = 0;
    goto LABEL_29;
  }
  if ((v20.st_mode & 0xF000) != 0x8000)
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Refusing to write to non-regular file \"%@\"", v5);
    }
    goto LABEL_28;
  }
  if (objc_msgSend(v6, "length"))
  {
    v9 = write(a1, objc_msgSend(v6, "bytes"), (size_t)objc_msgSend(v6, "length"));
    if (v9 < 0)
    {
      v14 = __error();
      v15 = *v14;
      if (strerror_r(*v14, __strerrbuf, 0x80uLL))
        __strerrbuf[0] = 0;
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 17, "Failed to write to \"%@\": [%d] %s", v5, v15, __strerrbuf);
      }
      goto LABEL_28;
    }
    v10 = v9;
    if ((id)v9 != objc_msgSend(v6, "length"))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
      {
        v16 = sub_100106E24();
        _NRLogWithArgs(v16, 17, "Wrote %zd instead of %llu to \"%d\"", v10, objc_msgSend(v6, "length"), a1);

      }
      goto LABEL_28;
    }
  }
  if (qword_1001E4910 != -1)
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
  if (_NRLogIsLevelEnabled(qword_1001E4908, 0))
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    v11 = (id)qword_1001E4908;
    _NRLogWithArgs(v11, 0, "%s%.30s:%-4d Wrote %llu bytes to \"%@\"", "", "NRDSafeWriteDataToFileDescriptor", 191, objc_msgSend(v6, "length"), v5);

  }
  v12 = 1;
LABEL_29:

  return v12;
}

uint64_t sub_100107290(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v13;
  uint64_t v14;
  const char *v15;
  id v16;
  int IsLevelEnabled;
  id v18;
  id v19;
  int v20;
  char __strerrbuf[128];

  v5 = a1;
  v6 = a2;
  if (!v5)
  {
    v16 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

    if (IsLevelEnabled)
    {
      v18 = sub_100106E24();
      _NRLogWithArgs(v18, 17, "%s called with null filePath");
LABEL_32:

    }
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  if (!objc_msgSend(v5, "length"))
  {
    v19 = sub_100106E24();
    v20 = _NRLogIsLevelEnabled(v19, 17);

    if (v20)
    {
      v18 = sub_100106E24();
      _NRLogWithArgs(v18, 17, "%s called with null filePath.length");
      goto LABEL_32;
    }
    goto LABEL_16;
  }
  if ((objc_msgSend(v5, "containsString:", CFSTR("..")) & 1) != 0
    || (objc_msgSend(v5, "hasPrefix:", CFSTR("/")) & 1) == 0)
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Refusing to write to \"%@\"", v5);
    }
    goto LABEL_16;
  }
  v7 = (const char *)objc_msgSend(v5, "UTF8String");
  if (a3)
    v8 = 1793;
  else
    v8 = 2817;
  v9 = open_dprotected_np(v7, v8, 4, 0, 384);
  if (v9 < 0)
  {
    v13 = __error();
    v14 = *v13;
    if (strerror_r(*v13, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      v15 = "create";
      if (a3)
        v15 = "trunc";
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to open %s \"%@\": [%d] %s", v15, v5, v14, __strerrbuf);
    }
    goto LABEL_16;
  }
  v10 = v9;
  v11 = sub_100106E64(v9, v5, v6);
  close(v10);
LABEL_17:

  return v11;
}

uint64_t sub_10010754C(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  int IsLevelEnabled;
  id v14;
  id v15;
  int v16;
  id v17;
  int v18;
  id v19;

  v5 = a1;
  v6 = a2;
  if (!v5)
  {
    v12 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

    if (!IsLevelEnabled)
      goto LABEL_23;
    v14 = sub_100106E24();
    _NRLogWithArgs(v14, 17, "%s called with null filePath");
LABEL_22:

    v10 = 0;
    goto LABEL_15;
  }
  if (!objc_msgSend(v5, "length"))
  {
    v15 = sub_100106E24();
    v16 = _NRLogIsLevelEnabled(v15, 17);

    if (!v16)
      goto LABEL_23;
    v14 = sub_100106E24();
    _NRLogWithArgs(v14, 17, "%s called with null filePath.length");
    goto LABEL_22;
  }
  if (!v6)
  {
    v17 = sub_100106E24();
    v18 = _NRLogIsLevelEnabled(v17, 17);

    if (v18)
    {
      v14 = sub_100106E24();
      _NRLogWithArgs(v14, 17, "%s called with null dictionaryToWrite");
      goto LABEL_22;
    }
LABEL_23:
    v10 = 0;
    goto LABEL_15;
  }
  v19 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v6, 200, 0, &v19));
  v8 = v19;
  v9 = v8;
  if (!v7 || v8)
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to serialize %@: %@", v6, v9);
    }
    v10 = 0;
  }
  else
  {
    v10 = sub_100107290(v5, v7, a3);
  }

LABEL_15:
  return v10;
}

unint64_t sub_100107758()
{
  unint64_t v0;
  BOOL v2;

  if (qword_1001E4890 != -1)
    dispatch_once(&qword_1001E4890, &stru_1001B7BF0);
  do
    v0 = __ldxr((unint64_t *)&qword_1001E4888);
  while (__stxr(v0 + 1, (unint64_t *)&qword_1001E4888));
  if (!v0)
  {
    do
    {
      v0 = __ldxr((unint64_t *)&qword_1001E4888);
      if (__stxr(v0 + 1, (unint64_t *)&qword_1001E4888))
        v2 = 1;
      else
        v2 = v0 == 0;
    }
    while (v2);
  }
  if (qword_1001E4910 != -1)
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
  if (_NRLogIsLevelEnabled(qword_1001E4908, 1))
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    _NRLogWithArgs(qword_1001E4908, 1, "%s%.30s:%-4d Returning sequence number: %llu", "", "NRDGetUniqueSequenceNumber", 302, v0);
  }
  return v0;
}

void sub_100107874(id a1)
{
  uint64_t v1;
  uint64_t v2;
  mach_timebase_info info;

  info = 0;
  v1 = mach_timebase_info(&info);
  v2 = mach_boottime_usec(v1);
  qword_1001E4888 = v2 + ((mach_continuous_time() * info.numer / (1000 * info.denom)) >> 1);
}

id sub_1001078CC(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  _QWORD applier[4];
  id v7;

  v1 = a1;
  v2 = (id)NEHelperCacheCopyAppUUIDMapping(objc_msgSend(v1, "UTF8String"), 0);
  v3 = v2;
  if (v2 && xpc_get_type(v2) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1001079B4;
    applier[3] = &unk_1001B7D68;
    v4 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v7 = v4;
    xpc_array_apply(v3, applier);
    if (!objc_msgSend(v4, "count"))
    {

      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t sub_1001079B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v5));
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

  }
  return 1;
}

void sub_100107A3C(id a1)
{
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;
  id v4;
  int IsLevelEnabled;
  id v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_create("com.apple.networkrelay.powerlog", v1);

  if (!v2)
  {
    v4 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 16);

    if (IsLevelEnabled)
    {
      v6 = sub_100106E24();
      _NRLogWithArgs(v6, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create", 118, "com.apple.networkrelay.powerlog");

    }
    v7 = _os_log_pack_size(22);
    v8 = (char *)&v12 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v10 = 136446466;
    *(_QWORD *)(v10 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v10 + 14) = "com.apple.networkrelay.powerlog";
    v11 = sub_100106E24();
    _NRLogAbortWithPack(v11, v8);
  }
  v3 = (void *)qword_1001E4898;
  qword_1001E4898 = (uint64_t)v2;

}

void sub_100107BA4(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;

  v3 = a1;
  v4 = a2;
  if (qword_1001E4910 != -1)
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
  if (_NRLogIsLevelEnabled(qword_1001E4908, 0))
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    _NRLogWithArgs(qword_1001E4908, 0, "%s%.30s:%-4d Submitting power log: %@:%@", "", "NRDPowerLog", 550, v3, v4);
  }
  if (qword_1001E48A0 != -1)
    dispatch_once(&qword_1001E48A0, &stru_1001B7C10);
  v5 = qword_1001E4898;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100107D08;
  block[3] = &unk_1001B8778;
  v9 = v3;
  v10 = v4;
  v6 = v4;
  v7 = v3;
  dispatch_async(v5, block);

}

uint64_t sub_100107D08(uint64_t a1)
{
  uint64_t result;

  result = PLShouldLogRegisteredEvent(90, *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
    return PLLogRegisteredEvent(90, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
  return result;
}

void sub_100107D4C(void *a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char __strerrbuf[128];

  v1 = a1;
  v2 = open((const char *)objc_msgSend(v1, "UTF8String"), 0);
  if (v2 == -1)
  {
    if (*__error() != 2)
    {
      v7 = __error();
      v8 = *v7;
      if (strerror_r(*v7, __strerrbuf, 0x80uLL))
        __strerrbuf[0] = 0;
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 17, "open(%@, O_RDONLY): [%d] %s", v1, v8, __strerrbuf);
      }
    }
  }
  else
  {
    v3 = v2;
    v4 = fcntl(v2, 63);
    if (v4 != 4)
    {
      if (v4 == -1)
      {
        v5 = __error();
        v6 = *v5;
        if (strerror_r(*v5, __strerrbuf, 0x80uLL))
          __strerrbuf[0] = 0;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
        {
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          _NRLogWithArgs(qword_1001E4908, 17, "fcntl(%@, F_GETPROTECTIONCLASS): [%d] %s", v1, v6, __strerrbuf);
        }
      }
      else if (fcntl(v3, 64, 4) == -1)
      {
        v9 = __error();
        v10 = *v9;
        if (strerror_r(*v9, __strerrbuf, 0x80uLL))
          __strerrbuf[0] = 0;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
        {
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          _NRLogWithArgs(qword_1001E4908, 17, "fcntl(%@, F_SETPROTECTIONCLASS, PROTECTION_CLASS_D): [%d] %s", v1, v10, __strerrbuf);
        }
      }
      else
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 0))
        {
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          _NRLogWithArgs(qword_1001E4908, 0, "%s%.30s:%-4d successfully updated %@ to ClassD", "", "NRDUpdateToDataProtectionClassD", 587, v1);
        }
      }
    }
    close(v3);
  }

}

uint64_t sub_100108088(void *a1, int a2)
{
  id v3;
  int v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t IsLevelEnabled;
  int v9;
  char *v10;
  const char *v11;
  id v13;
  id v14;
  id v15;
  int v16;
  id v17;
  int *v18;
  uint64_t v19;
  id v20;
  char __strerrbuf[128];
  __int128 v22;
  __int128 v23;

  v3 = a1;
  if (!v3)
  {
    v13 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v13, 17);

    if (!(_DWORD)IsLevelEnabled)
      goto LABEL_36;
    v14 = sub_100106E24();
    _NRLogWithArgs(v14, 17, "%s called with null intfName", "NRSetInterfaceSubfamily");

    goto LABEL_35;
  }
  v4 = socket(2, 2, 0);
  if (v4 < 0)
  {
    LODWORD(v10) = *__error();
    v11 = (const char *)&OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (qword_1001E4910 == -1)
      goto LABEL_31;
    goto LABEL_42;
  }
  v5 = v4;
  v22 = 0u;
  v23 = 0u;
  v6 = objc_msgSend(v3, "UTF8String");
  if (!v6)
  {
    v15 = sub_100106E24();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    v11 = "_strict_strlcpy";
    if (v16)
    {
      v17 = sub_100106E24();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: strict_strlcpy called with NULL src", "", "_strict_strlcpy", 240);

    }
    v3 = (id)_os_log_pack_size(12);
    v10 = &__strerrbuf[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0)];
    v18 = __error();
    v19 = _os_log_pack_fill(v10, v3, *v18, &_mh_execute_header, "%{public}s strict_strlcpy called with NULL src");
    *(_DWORD *)v19 = 136446210;
    *(_QWORD *)(v19 + 4) = "_strict_strlcpy";
    v20 = sub_100106E24();
    _NRLogAbortWithPack(v20, v10);
LABEL_42:
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
LABEL_31:
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (*((_QWORD *)v11 + 290) != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to create socket for setting interface sub family - %d", (_DWORD)v10);
    }
LABEL_35:
    IsLevelEnabled = 0;
    goto LABEL_36;
  }
  LOBYTE(v22) = *v6;
  if ((_BYTE)v22)
  {
    BYTE1(v22) = v6[1];
    if (BYTE1(v22))
    {
      BYTE2(v22) = v6[2];
      if (BYTE2(v22))
      {
        BYTE3(v22) = v6[3];
        if (BYTE3(v22))
        {
          BYTE4(v22) = v6[4];
          if (BYTE4(v22))
          {
            BYTE5(v22) = v6[5];
            if (BYTE5(v22))
            {
              BYTE6(v22) = v6[6];
              if (BYTE6(v22))
              {
                BYTE7(v22) = v6[7];
                if (BYTE7(v22))
                {
                  BYTE8(v22) = v6[8];
                  if (BYTE8(v22))
                  {
                    BYTE9(v22) = v6[9];
                    if (BYTE9(v22))
                    {
                      BYTE10(v22) = v6[10];
                      if (BYTE10(v22))
                      {
                        BYTE11(v22) = v6[11];
                        if (BYTE11(v22))
                        {
                          BYTE12(v22) = v6[12];
                          if (BYTE12(v22))
                          {
                            BYTE13(v22) = v6[13];
                            if (BYTE13(v22))
                            {
                              BYTE14(v22) = v6[14];
                              if (BYTE14(v22))
                                HIBYTE(v22) = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  DWORD2(v23) = a2;
  v7 = ioctl(v5, 0xC02069BCuLL, &v22);
  IsLevelEnabled = v7 >= 0;
  if (v7 < 0)
  {
    v9 = *__error();
    if (strerror_r(v9, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "ioctl SIOCSIFSUBFAMILY failed: [%d] %s", v9, __strerrbuf);
    }
  }
  close(v5);
LABEL_36:

  return IsLevelEnabled;
}

BOOL sub_100108458(void *a1, const char *a2)
{
  _BOOL8 v2;
  __objc2_prot *v3;
  id v5;
  int v6;
  char *v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  id v13;
  int v14;
  id v15;
  id v16;
  int IsLevelEnabled;
  id v18;
  int *v19;
  uint64_t v20;
  id v21;
  char __strerrbuf[128];
  __int128 v23;
  __int128 v24;

  v5 = a1;
  if (v5)
  {
    v6 = socket(2, 2, 0);
    if ((v6 & 0x80000000) == 0)
    {
      LODWORD(v7) = v6;
      v23 = 0u;
      v24 = 0u;
      v8 = objc_msgSend(v5, "UTF8String");
      if (v8)
      {
        LOBYTE(v23) = *v8;
        if ((_BYTE)v23)
        {
          BYTE1(v23) = v8[1];
          if (BYTE1(v23))
          {
            BYTE2(v23) = v8[2];
            if (BYTE2(v23))
            {
              BYTE3(v23) = v8[3];
              if (BYTE3(v23))
              {
                BYTE4(v23) = v8[4];
                if (BYTE4(v23))
                {
                  BYTE5(v23) = v8[5];
                  if (BYTE5(v23))
                  {
                    BYTE6(v23) = v8[6];
                    if (BYTE6(v23))
                    {
                      BYTE7(v23) = v8[7];
                      if (BYTE7(v23))
                      {
                        BYTE8(v23) = v8[8];
                        if (BYTE8(v23))
                        {
                          BYTE9(v23) = v8[9];
                          if (BYTE9(v23))
                          {
                            BYTE10(v23) = v8[10];
                            if (BYTE10(v23))
                            {
                              BYTE11(v23) = v8[11];
                              if (BYTE11(v23))
                              {
                                BYTE12(v23) = v8[12];
                                if (BYTE12(v23))
                                {
                                  BYTE13(v23) = v8[13];
                                  if (BYTE13(v23))
                                  {
                                    BYTE14(v23) = v8[14];
                                    if (BYTE14(v23))
                                      HIBYTE(v23) = 0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        LODWORD(v24) = (_DWORD)a2;
        v9 = ioctl((int)v7, 0xC02069DCuLL, &v23);
        v2 = v9 >= 0;
        if (v9 < 0)
        {
          v11 = *__error();
          if (strerror_r(v11, __strerrbuf, 0x80uLL))
            __strerrbuf[0] = 0;
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
          {
            if (qword_1001E4910 != -1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            _NRLogWithArgs(qword_1001E4908, 17, "ioctl SIOCSIFPEEREGRESSFUNCTIONALTYPE failed: [%d] %s", v11, __strerrbuf);
          }
          goto LABEL_41;
        }
        v3 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
        if (qword_1001E4910 == -1)
        {
LABEL_22:
          if (_NRLogIsLevelEnabled(qword_1001E4908, 1))
          {
            if (v3[32].prots != (__objc2_prot_list *)-1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            _NRLogWithArgs(qword_1001E4908, 1, "%s%.30s:%-4d Set peer egress interface type for %@ to %u", "", "NRSetInterfacePeerDeviceEgressFunctionalType", 641, v5, a2);
          }
LABEL_41:
          close((int)v7);
          goto LABEL_42;
        }
      }
      else
      {
        v16 = sub_100106E24();
        IsLevelEnabled = _NRLogIsLevelEnabled(v16, 16);

        a2 = "_strict_strlcpy";
        if (IsLevelEnabled)
        {
          v18 = sub_100106E24();
          _NRLogWithArgs(v18, 16, "%s%.30s:%-4d ABORTING: strict_strlcpy called with NULL src", "", "_strict_strlcpy", 240);

        }
        v5 = (id)_os_log_pack_size(12);
        v7 = &__strerrbuf[-((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0)];
        v19 = __error();
        v20 = _os_log_pack_fill(v7, v5, *v19, &_mh_execute_header, "%{public}s strict_strlcpy called with NULL src");
        *(_DWORD *)v20 = 136446210;
        *(_QWORD *)(v20 + 4) = "_strict_strlcpy";
        v21 = sub_100106E24();
        _NRLogAbortWithPack(v21, v7);
      }
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      goto LABEL_22;
    }
    v10 = *__error();
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to create socket for setting interface peer family - %d", v10);
    }
  }
  else
  {
    v13 = sub_100106E24();
    v14 = _NRLogIsLevelEnabled(v13, 17);

    if (v14)
    {
      v15 = sub_100106E24();
      _NRLogWithArgs(v15, 17, "%s called with null intfName", "NRSetInterfacePeerDeviceEgressFunctionalType");

    }
  }
  v2 = 0;
LABEL_42:

  return v2;
}

uint64_t sub_1001088C8(void *a1)
{
  id v1;
  int v2;
  int v3;
  _BYTE *v4;
  int v5;
  uint64_t IsLevelEnabled;
  int v7;
  char *v8;
  const char *v9;
  id v11;
  id v12;
  id v13;
  int v14;
  id v15;
  int *v16;
  uint64_t v17;
  id v18;
  char __strerrbuf[128];
  __int128 v20;
  __int128 v21;

  v1 = a1;
  if (!v1)
  {
    v11 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 17);

    if (!(_DWORD)IsLevelEnabled)
      goto LABEL_36;
    v12 = sub_100106E24();
    _NRLogWithArgs(v12, 17, "%s called with null intfName", "NRSetInterfaceNoACKPrioritization");

    goto LABEL_35;
  }
  v2 = socket(2, 2, 0);
  if (v2 < 0)
  {
    LODWORD(v8) = *__error();
    v9 = (const char *)&OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (qword_1001E4910 == -1)
      goto LABEL_31;
    goto LABEL_42;
  }
  v3 = v2;
  v20 = 0u;
  v21 = 0u;
  v4 = objc_msgSend(v1, "UTF8String");
  if (!v4)
  {
    v13 = sub_100106E24();
    v14 = _NRLogIsLevelEnabled(v13, 16);

    v9 = "_strict_strlcpy";
    if (v14)
    {
      v15 = sub_100106E24();
      _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: strict_strlcpy called with NULL src", "", "_strict_strlcpy", 240);

    }
    v1 = (id)_os_log_pack_size(12);
    v8 = &__strerrbuf[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0)];
    v16 = __error();
    v17 = _os_log_pack_fill(v8, v1, *v16, &_mh_execute_header, "%{public}s strict_strlcpy called with NULL src");
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v17 + 4) = "_strict_strlcpy";
    v18 = sub_100106E24();
    _NRLogAbortWithPack(v18, v8);
LABEL_42:
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
LABEL_31:
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (*((_QWORD *)v9 + 290) != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to create socket for setting interface sub family - %d", (_DWORD)v8);
    }
LABEL_35:
    IsLevelEnabled = 0;
    goto LABEL_36;
  }
  LOBYTE(v20) = *v4;
  if ((_BYTE)v20)
  {
    BYTE1(v20) = v4[1];
    if (BYTE1(v20))
    {
      BYTE2(v20) = v4[2];
      if (BYTE2(v20))
      {
        BYTE3(v20) = v4[3];
        if (BYTE3(v20))
        {
          BYTE4(v20) = v4[4];
          if (BYTE4(v20))
          {
            BYTE5(v20) = v4[5];
            if (BYTE5(v20))
            {
              BYTE6(v20) = v4[6];
              if (BYTE6(v20))
              {
                BYTE7(v20) = v4[7];
                if (BYTE7(v20))
                {
                  BYTE8(v20) = v4[8];
                  if (BYTE8(v20))
                  {
                    BYTE9(v20) = v4[9];
                    if (BYTE9(v20))
                    {
                      BYTE10(v20) = v4[10];
                      if (BYTE10(v20))
                      {
                        BYTE11(v20) = v4[11];
                        if (BYTE11(v20))
                        {
                          BYTE12(v20) = v4[12];
                          if (BYTE12(v20))
                          {
                            BYTE13(v20) = v4[13];
                            if (BYTE13(v20))
                            {
                              BYTE14(v20) = v4[14];
                              if (BYTE14(v20))
                                HIBYTE(v20) = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  LODWORD(v21) = 1;
  v5 = ioctl(v3, 0xC02069D0uLL, &v20);
  IsLevelEnabled = v5 >= 0;
  if (v5 < 0)
  {
    v7 = *__error();
    if (strerror_r(v7, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "ioctl SIOCSIFNOACKPRIO failed: [%d] %s", v7, __strerrbuf);
    }
  }
  close(v3);
LABEL_36:

  return IsLevelEnabled;
}

id sub_100108C98(void *a1)
{
  id v1;
  int v2;
  int v3;
  char *v4;
  char *v5;
  const char *v6;
  int *v7;
  uint64_t v8;
  id v9;
  id v11;
  int IsLevelEnabled;
  id v13;
  id v14;
  int v15;
  id v16;
  int *v17;
  uint64_t v18;
  id v19;
  char v20;
  char v35;
  unsigned __int8 v36[8];
  char __strerrbuf[128];

  v1 = a1;
  if (!v1)
  {
    v11 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 17);

    if (IsLevelEnabled)
    {
      v13 = sub_100106E24();
      _NRLogWithArgs(v13, 17, "%s called with null intfName", "NRCopyNetIfUUID");

    }
    goto LABEL_54;
  }
  v2 = socket(2, 2, 0);
  if (v2 < 0)
  {
    LODWORD(v5) = *__error();
    if (strerror_r((int)v5, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    v6 = (const char *)&OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (qword_1001E4910 == -1)
      goto LABEL_31;
    goto LABEL_61;
  }
  v3 = v2;
  v4 = (char *)objc_msgSend(v1, "UTF8String", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (!v4)
  {
    v14 = sub_100106E24();
    v15 = _NRLogIsLevelEnabled(v14, 16);

    v6 = "_strict_strlcpy";
    if (v15)
    {
      v16 = sub_100106E24();
      _NRLogWithArgs(v16, 16, "%s%.30s:%-4d ABORTING: strict_strlcpy called with NULL src", "", "_strict_strlcpy", 240);

    }
    v1 = (id)_os_log_pack_size(12);
    v5 = &v20 - ((__chkstk_darwin(v1) + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = __error();
    v18 = _os_log_pack_fill(v5, v1, *v17, &_mh_execute_header, "%{public}s strict_strlcpy called with NULL src");
    *(_DWORD *)v18 = 136446210;
    *(_QWORD *)(v18 + 4) = "_strict_strlcpy";
    v19 = sub_100106E24();
    _NRLogAbortWithPack(v19, v5);
LABEL_61:
    dispatch_once(&qword_1001E4910, &stru_1001B7D40);
LABEL_31:
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (*((_QWORD *)v6 + 290) != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to create socket for SIOCGIFNEXUS: [%d] %s", (_DWORD)v5, __strerrbuf);
    }
    goto LABEL_54;
  }
  v20 = *v4;
  if (v20)
  {
    if (v4[1])
    {
      if (v4[2])
      {
        if (v4[3])
        {
          if (v4[4])
          {
            if (v4[5])
            {
              if (v4[6])
              {
                if (v4[7])
                {
                  if (v4[8])
                  {
                    if (v4[9])
                    {
                      if (v4[10])
                      {
                        if (v4[11])
                        {
                          if (v4[12])
                          {
                            if (v4[13])
                            {
                              if (v4[14])
                                v35 = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (ioctl(v3, 0xC06069C3uLL, &v20) < 0)
  {
    v7 = __error();
    v8 = *v7;
    if ((_DWORD)v8 == 6)
    {
      if (strerror_r(6, __strerrbuf, 0x80uLL))
        __strerrbuf[0] = 0;
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d Failed to ioctl SIOCGIFNEXUS for %@: [%d] %s", "", "NRCopyNetIfUUID", 777, v1, 6, __strerrbuf);
      }
    }
    else
    {
      if (strerror_r(*v7, __strerrbuf, 0x80uLL))
        __strerrbuf[0] = 0;
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 17, "Failed to ioctl SIOCGIFNEXUS for %@: [%d] %s", v1, v8, __strerrbuf);
      }
    }
    close(v3);
    goto LABEL_54;
  }
  close(v3);
  if (uuid_is_null(v36))
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d Nexus UUID is NULL for %@", "", "NRCopyNetIfUUID", 785, v1);
    }
LABEL_54:
    v9 = 0;
    goto LABEL_55;
  }
  v9 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v36);
LABEL_55:

  return v9;
}

void sub_100109264(id a1)
{
  mach_timebase_info((mach_timebase_info_t)&dword_1001E48B0);
}

void sub_100109270(void *a1, void *a2, void *a3, int a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  char v28;
  uint64_t *v29;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = 0;
  if (a5 && a4)
  {
    v29 = &a9;
    v17 = a5;
    v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v17, &a9);

  }
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v18 = (id)qword_1001E4AD0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1001093E4;
  v23[3] = &unk_1001B7C80;
  v24 = v13;
  v25 = v14;
  v28 = a4;
  v26 = v15;
  v27 = v16;
  v19 = v16;
  v20 = v15;
  v21 = v14;
  v22 = v13;
  sub_10014ACE0((uint64_t)v18, v23);

}

void sub_1001093E4(uint64_t a1)
{
  dispatch_semaphore_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  dispatch_time_t v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  void *v15;
  const __CFString *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  const __CFString *v21;
  id v22;
  _QWORD v24[4];
  id v25;
  NSObject *v26;

  v2 = dispatch_semaphore_create(0);
  if (objc_opt_class(SDRDiagnosticReporter))
  {
    v3 = objc_alloc_init((Class)SDRDiagnosticReporter);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "processName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:", CFSTR("NetworkRelay"), v4, v5, v6, v8, 0));

    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 1))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 1, "%s%.30s:%-4d Trigger ABC report signature %@", "", "NRTriggerABC_block_invoke", 846, v9);
    }
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1001097A8;
    v24[3] = &unk_1001B7C58;
    v25 = v9;
    v26 = v2;
    v10 = v9;
    objc_msgSend(v3, "snapshotWithSignature:duration:event:payload:reply:", v10, 0, 0, v24, 0.0);

  }
  else
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d SystemDiagnosticReporter not available", "", "NRTriggerABC_block_invoke", 863);
    }
  }
  if (*(_BYTE *)(a1 + 64))
  {
    if (_NRIsAppleInternal())
    {
      v11 = dispatch_time(0, 100000000);
      dispatch_semaphore_wait(v2, v11);
    }
    v12 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

    if (IsLevelEnabled)
    {
      v14 = sub_100106E24();
      v15 = v14;
      v16 = *(const __CFString **)(a1 + 56);
      if (!v16)
        v16 = &stru_1001B95A0;
      _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: %@", "", "NRTriggerABC_block_invoke", 874, v16);

    }
    v17 = _os_log_pack_size(22);
    v18 = (char *)&v24[-1] - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = __error();
    v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%{public}s %@");
    v21 = *(const __CFString **)(a1 + 56);
    if (!v21)
      v21 = &stru_1001B95A0;
    *(_DWORD *)v20 = 136446466;
    *(_QWORD *)(v20 + 4) = "NRTriggerABC_block_invoke";
    *(_WORD *)(v20 + 12) = 2112;
    *(_QWORD *)(v20 + 14) = v21;
    v22 = sub_100106E24();
    _NRLogAbortWithPack(v22, v18);
  }

}

void sub_1001097A8(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSymptomDiagnosticReplySuccess));
  v4 = objc_msgSend(v3, "BOOLValue");

  if (v4)
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 1))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 1, "%s%.30s:%-4d ABC report sent for signature %@", "", "NRTriggerABC_block_invoke_2", 853, *(_QWORD *)(a1 + 32));
    }
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReasonString));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kSymptomDiagnosticReplyReason));
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = (id)qword_1001E4908;
      _NRLogWithArgs(v8, 16, "%s%.30s:%-4d Failed to send ABC report for signature %@ with reason %@ (%d)", "", "NRTriggerABC_block_invoke_2", 858, v7, v5, objc_msgSend(v6, "intValue"));

    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

BOOL sub_1001099A0()
{
  int v0;
  int v1;
  int v3;
  char __strerrbuf[128];

  v3 = 0;
  v0 = sysctlbyname("net.link.generic.system.companion_sndbuf_limit", 0, 0, &v3, 4uLL);
  if (v0 < 0)
  {
    v1 = *__error();
    if (strerror_r(v1, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d sysctl net.link.generic.system.companion_sndbuf_limit -> 0 failed: [%d] %s", "", "NRRecoverCompanionLinkFlows", 904, v1, __strerrbuf);
    }
  }
  return v0 >= 0;
}

id sub_100109ADC(uint64_t a1, char a2)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _BYTE buffer[1024];

  v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("unknown:%d"), a1);
  bzero(buffer, 0x400uLL);
  if ((int)a1 >= 1 && proc_pidpath(a1, buffer, 0x400u) >= 1 && buffer[0])
  {
    v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s:%d"), buffer, a1);

    v4 = v5;
  }
  if ((a2 & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("/")));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));

    return (id)v7;
  }
  return v4;
}

void sub_100109BF4(void *a1)
{
  id v1;
  int v2;
  char *v3;
  _BYTE *v4;
  const char *v5;
  id v6;
  int *v7;
  int v8;
  id v9;
  id v10;
  int v11;
  id v12;
  id v13;
  int IsLevelEnabled;
  id v15;
  int *v16;
  uint64_t v17;
  id v18;
  char __strerrbuf[128];
  __int128 v20;
  __int128 v21;

  v1 = a1;
  if (v1)
  {
    v2 = socket(30, 2, 0);
    if ((v2 & 0x80000000) == 0)
    {
      LODWORD(v3) = v2;
      v20 = 0u;
      v21 = 0u;
      v4 = objc_msgSend(v1, "UTF8String");
      if (v4)
      {
        LOBYTE(v20) = *v4;
        if ((_BYTE)v20)
        {
          BYTE1(v20) = v4[1];
          if (BYTE1(v20))
          {
            BYTE2(v20) = v4[2];
            if (BYTE2(v20))
            {
              BYTE3(v20) = v4[3];
              if (BYTE3(v20))
              {
                BYTE4(v20) = v4[4];
                if (BYTE4(v20))
                {
                  BYTE5(v20) = v4[5];
                  if (BYTE5(v20))
                  {
                    BYTE6(v20) = v4[6];
                    if (BYTE6(v20))
                    {
                      BYTE7(v20) = v4[7];
                      if (BYTE7(v20))
                      {
                        BYTE8(v20) = v4[8];
                        if (BYTE8(v20))
                        {
                          BYTE9(v20) = v4[9];
                          if (BYTE9(v20))
                          {
                            BYTE10(v20) = v4[10];
                            if (BYTE10(v20))
                            {
                              BYTE11(v20) = v4[11];
                              if (BYTE11(v20))
                              {
                                BYTE12(v20) = v4[12];
                                if (BYTE12(v20))
                                {
                                  BYTE13(v20) = v4[13];
                                  if (BYTE13(v20))
                                  {
                                    BYTE14(v20) = v4[14];
                                    if (BYTE14(v20))
                                      HIBYTE(v20) = 0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        LOBYTE(v21) = 4;
        BYTE3(v21) = 0;
        if (ioctl((int)v3, 0xC02069A9uLL, &v20) < 0)
        {
          v7 = __error();
          v8 = *v7;
          if (*v7 != 6)
          {
            if (strerror_r(*v7, __strerrbuf, 0x80uLL))
              __strerrbuf[0] = 0;
            if (qword_1001E4910 != -1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
            {
              if (qword_1001E4910 != -1)
                dispatch_once(&qword_1001E4910, &stru_1001B7D40);
              v9 = (id)qword_1001E4908;
              _NRLogWithArgs(v9, 17, "Failed to set interface availability for interface %s: [%d] %s", (const char *)objc_msgSend(v1, "UTF8String"), v8, __strerrbuf);

            }
            goto LABEL_42;
          }
          if (strerror_r(6, __strerrbuf, 0x80uLL))
            __strerrbuf[0] = 0;
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
          {
            if (qword_1001E4910 != -1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            v6 = (id)qword_1001E4908;
            objc_msgSend(v1, "UTF8String");
            _NRLogWithArgs(v6, 16, "%s%.30s:%-4d Failed to set interface availability for interface %s: [%d] %s", "");
            goto LABEL_41;
          }
LABEL_42:
          close((int)v3);
          goto LABEL_43;
        }
        v5 = (const char *)&OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
        if (qword_1001E4910 == -1)
        {
LABEL_22:
          if (_NRLogIsLevelEnabled(qword_1001E4908, 0))
          {
            if (*((_QWORD *)v5 + 290) != -1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            v6 = (id)qword_1001E4908;
            objc_msgSend(v1, "UTF8String");
            _NRLogWithArgs(v6, 0, "%s%.30s:%-4d Set interface availability on interface %s to %d (0 implies 'available')");
LABEL_41:

            goto LABEL_42;
          }
          goto LABEL_42;
        }
      }
      else
      {
        v13 = sub_100106E24();
        IsLevelEnabled = _NRLogIsLevelEnabled(v13, 16);

        v5 = "_strict_strlcpy";
        if (IsLevelEnabled)
        {
          v15 = sub_100106E24();
          _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: strict_strlcpy called with NULL src", "", "_strict_strlcpy", 240);

        }
        v1 = (id)_os_log_pack_size(12);
        v3 = &__strerrbuf[-((__chkstk_darwin(v1) + 15) & 0xFFFFFFFFFFFFFFF0)];
        v16 = __error();
        v17 = _os_log_pack_fill(v3, v1, *v16, &_mh_execute_header, "%{public}s strict_strlcpy called with NULL src");
        *(_DWORD *)v17 = 136446210;
        *(_QWORD *)(v17 + 4) = "_strict_strlcpy";
        v18 = sub_100106E24();
        _NRLogAbortWithPack(v18, v3);
      }
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      goto LABEL_22;
    }
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "Failed to create socket");
    }
  }
  else
  {
    v10 = sub_100106E24();
    v11 = _NRLogIsLevelEnabled(v10, 17);

    if (v11)
    {
      v12 = sub_100106E24();
      _NRLogWithArgs(v12, 17, "%s called with null intfName", "NRDSetInterfaceAvailabilityForInterfaceName");

    }
  }
LABEL_43:

}

id sub_10010A150(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  __int128 v8;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    if (objc_msgSend(v4, "length") && objc_msgSend(v3, "length"))
    {
      CCHmac(4u, objc_msgSend(v5, "bytes", 0, 0, 0, 0, 0, 0, 0, 0), (size_t)objc_msgSend(v5, "length"), objc_msgSend(v3, "bytes"), (size_t)objc_msgSend(v3, "length"), &v8);
      v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v8, 64);
    }
    else
    {
      v6 = 0;
    }
  }

  return v6;
}

id sub_10010A268(void *a1, unsigned int a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  __int16 v9;
  const char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  id v16;
  id v18;
  int IsLevelEnabled;
  id v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char v26;
  __int128 v27;
  __int16 v28;
  _BYTE v29[18];
  uint64_t v30;
  __int128 v31;
  int v32;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "addressData"));
    v8 = objc_msgSend(v7, "length");
    v30 = 0;
    v31 = 0uLL;
    v32 = 0;
    objc_msgSend(v7, "getBytes:length:", &v30, 28);
    if ((unint64_t)v8 < 0x10 || (unint64_t)v8 < v30)
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (!_NRLogIsLevelEnabled(qword_1001E4908, 16))
        goto LABEL_31;
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      v13 = qword_1001E4908;
      v24 = v7;
      v25 = v6;
      v23 = 1009;
      v21 = "";
      v22 = "NRCreateAddressData";
      v14 = "%s%.30s:%-4d addressData too short %@ for %@";
      goto LABEL_16;
    }
    v9 = __rev16(a2);
    v10 = (const char *)BYTE1(v30);
    if (BYTE1(v30) == 2)
    {
      if (v30 > 0xFu)
      {
        *(_WORD *)v29 = v9;
        *(_DWORD *)&v29[2] = HIDWORD(v30);
        if (!a3)
        {
          v27 = 0uLL;
          v28 = 0;
          v26 = 2;
          v16 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v26, 1);
          LODWORD(v27) = *(_DWORD *)v29;
          WORD2(v27) = *(_WORD *)&v29[4];
          objc_msgSend(v16, "appendBytes:length:", &v27, 6);
          goto LABEL_32;
        }
        v11 = objc_alloc((Class)NSData);
        v12 = 6;
LABEL_42:
        v16 = objc_msgSend(v11, "initWithBytes:length:", v29, v12);
        goto LABEL_32;
      }
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        v13 = qword_1001E4908;
        v24 = v7;
        v25 = v6;
        v23 = 1035;
        v21 = "";
        v22 = "NRCreateAddressData";
        v14 = "%s%.30s:%-4d addressData4 too short %@ for %@";
        goto LABEL_16;
      }
    }
    else
    {
      if (BYTE1(v30) != 30)
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (!_NRLogIsLevelEnabled(qword_1001E4908, 17))
          goto LABEL_31;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        v13 = qword_1001E4908;
        v21 = v10;
        v14 = "addressData has unknown address family %u";
        v15 = 17;
        goto LABEL_30;
      }
      if ((unint64_t)v8 >= 0x1C && v30 > 0x1Bu)
      {
        *(_WORD *)v29 = v9;
        *(_OWORD *)&v29[2] = v31;
        if (!a3)
        {
          v27 = 0uLL;
          v28 = 0;
          v26 = 30;
          v16 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v26, 1);
          v27 = *(_OWORD *)v29;
          v28 = *(_WORD *)&v29[16];
          objc_msgSend(v16, "appendBytes:length:", &v27, 18);
          goto LABEL_32;
        }
        v11 = objc_alloc((Class)NSData);
        v12 = 18;
        goto LABEL_42;
      }
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      if (_NRLogIsLevelEnabled(qword_1001E4908, 16))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        v13 = qword_1001E4908;
        v24 = v7;
        v25 = v6;
        v23 = 1016;
        v21 = "";
        v22 = "NRCreateAddressData";
        v14 = "%s%.30s:%-4d addressData6 too short %@ for %@";
LABEL_16:
        v15 = 16;
LABEL_30:
        _NRLogWithArgs(v13, v15, v14, v21, v22, v23, v24, v25);
      }
    }
LABEL_31:
    v16 = 0;
LABEL_32:

    goto LABEL_33;
  }
  v18 = sub_100106E24();
  IsLevelEnabled = _NRLogIsLevelEnabled(v18, 17);

  if (IsLevelEnabled)
  {
    v20 = sub_100106E24();
    _NRLogWithArgs(v20, 17, "%s called with null addressEndpoint", "NRCreateAddressData");

  }
  v16 = 0;
LABEL_33:

  return v16;
}

id sub_10010A6B4(void *a1, int a2, int a3, int a4)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v16;
  int IsLevelEnabled;
  id v18;
  _BYTE v19[18];
  _BYTE v20[24];
  int v21;

  v7 = a1;
  v8 = v7;
  if (v7)
  {
    v9 = v7;
    v10 = v9;
    if (a2)
    {
      memset(v20, 0, 19);
      if (!objc_msgSend(v9, "length"))
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (!_NRLogIsLevelEnabled(qword_1001E4908, 16))
          goto LABEL_36;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        v11 = qword_1001E4908;
        v12 = 1068;
LABEL_17:
        _NRLogWithArgs(v11, 16, "%s%.30s:%-4d Got data too short for address family %@", "", "NRCreateEndpointFromDataInner", v12, v10);
LABEL_36:
        v14 = 0;
        goto LABEL_42;
      }
      objc_msgSend(v10, "getBytes:length:", v20, 1);
      a3 = v20[0];
      if ((unint64_t)objc_msgSend(v10, "length") <= 1)
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (!_NRLogIsLevelEnabled(qword_1001E4908, 16))
          goto LABEL_36;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        v11 = qword_1001E4908;
        v12 = 1075;
        goto LABEL_17;
      }
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subdataWithRange:", 1, (char *)objc_msgSend(v10, "length") - 1));

      v10 = (void *)v13;
    }
    if (a3 == 2)
    {
      *(_WORD *)&v19[4] = 0;
      *(_DWORD *)v19 = 0;
      if ((unint64_t)objc_msgSend(v10, "length") <= 5)
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (!_NRLogIsLevelEnabled(qword_1001E4908, 16))
          goto LABEL_36;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d Got data too short for IPv4 %@", "", "NRCreateEndpointFromDataInner", 1102, v10);
        goto LABEL_35;
      }
      objc_msgSend(v10, "getBytes:length:", v19, 6);
      *(_OWORD *)v20 = xmmword_10015D150;
      *(_WORD *)&v20[2] = *(_WORD *)v19;
      *(_DWORD *)&v20[4] = *(_DWORD *)&v19[2];
    }
    else
    {
      if (a3 != 30)
        goto LABEL_36;
      memset(v19, 0, sizeof(v19));
      if ((unint64_t)objc_msgSend(v10, "length") <= 0x11)
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (!_NRLogIsLevelEnabled(qword_1001E4908, 16))
          goto LABEL_36;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        _NRLogWithArgs(qword_1001E4908, 16, "%s%.30s:%-4d Got data too short for IPv6 %@", "", "NRCreateEndpointFromDataInner", 1085, v10);
LABEL_35:
        v14 = 0;
LABEL_42:

        goto LABEL_43;
      }
      objc_msgSend(v10, "getBytes:length:", v19, 18);
      *(_QWORD *)v20 = 7708;
      v21 = unk_10015D054;
      *(_WORD *)&v20[2] = *(_WORD *)v19;
      *(_OWORD *)&v20[8] = *(_OWORD *)&v19[2];
      if (v19[2] == 254 && (v20[9] & 0xC0) == 0x80)
        v21 = a4;
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithAddress:](NWAddressEndpoint, "endpointWithAddress:", v20));
    goto LABEL_42;
  }
  v16 = sub_100106E24();
  IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

  if (IsLevelEnabled)
  {
    v18 = sub_100106E24();
    _NRLogWithArgs(v18, 17, "%s called with null addressData", "NRCreateEndpointFromDataInner");

  }
  v14 = 0;
LABEL_43:

  return v14;
}

void sub_10010AAFC(id a1)
{
  qword_1001E48B8 = symptom_framework_init(107, "com.apple.terminusd");
}

id sub_10010AB24(void *a1, void **a2, void **a3, int a4)
{
  id v7;
  void *v8;
  void *v9;
  ifaddrs *v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  sockaddr *ifa_addr;
  int sa_family;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  ifaddrs *v30;
  id v32;
  int IsLevelEnabled;
  id v34;
  ifaddrs *v35;
  char v36[46];

  v7 = a1;
  if (!v7)
  {
    v32 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v32, 17);

    if (IsLevelEnabled)
    {
      v34 = sub_100106E24();
      _NRLogWithArgs(v34, 17, "%s called with null interfaceName", "NRCopyLocalAddressesInner");

    }
    goto LABEL_15;
  }
  v35 = 0;
  if (getifaddrs(&v35) == -1)
  {
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 17, "getifaddrs failed");
    }
LABEL_15:
    v11 = 0;
    goto LABEL_79;
  }
  if (a2)
  {
    v8 = *a2;
    *a2 = 0;

  }
  if (a3)
  {
    v9 = *a3;
    *a3 = 0;

  }
  v10 = v35;
  if (v35)
  {
    v11 = 0;
    while (1)
    {
      if (v10->ifa_addr && v10->ifa_name && !strcmp((const char *)objc_msgSend(v7, "UTF8String"), v10->ifa_name))
      {
        if (!a3 && !a2 && !v11)
          v11 = objc_alloc_init((Class)NSMutableSet);
        ifa_addr = v10->ifa_addr;
        sa_family = ifa_addr->sa_family;
        if (sa_family != 30)
        {
          if (sa_family != 2)
            goto LABEL_30;
          v23 = *(_DWORD *)&ifa_addr->sa_data[2];
          v21 = &ifa_addr->sa_data[2];
          v22 = v23;
          if (a4)
          {
            v12 = bswap32(v22);
            v13 = v12 & 0xFF000000;
            v14 = HIWORD(v12) == 43518 || v13 == 0;
            v15 = v14 || v13 == 2130706432;
            v16 = v12 & 0xF0000000;
            v17 = v15 || v22 == -1;
            if (v17 || v16 == -536870912)
              goto LABEL_30;
          }
          if (!inet_ntop(2, v21, v36, 0x10u))
          {
            if (qword_1001E4910 != -1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
            {
              if (qword_1001E4910 != -1)
                dispatch_once(&qword_1001E4910, &stru_1001B7D40);
              _NRLogWithArgs(qword_1001E4908, 17, "inet_ntop(AF_INET, %s) failed");
            }
            goto LABEL_30;
          }
          v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), v36);
          if (a2)
          {
            v25 = *a2;
            if (!*a2)
            {
              v26 = objc_alloc_init((Class)NSMutableSet);
              v27 = *a2;
              *a2 = v26;

              v25 = *a2;
            }
            goto LABEL_63;
          }
          goto LABEL_64;
        }
        if (!a4)
          goto LABEL_59;
        if (*(_DWORD *)&ifa_addr->sa_data[6])
        {
          if (*(_DWORD *)&ifa_addr->sa_data[6] != 255
            && (*(_DWORD *)&ifa_addr->sa_data[6] != 254
             || (*(_DWORD *)&ifa_addr->sa_data[6] & 0xC000) != 0x8000))
          {
            goto LABEL_59;
          }
        }
        else if (*(_DWORD *)&ifa_addr->sa_data[10]
               || *(_DWORD *)&ifa_addr[1].sa_len
               || (*(_DWORD *)&ifa_addr[1].sa_data[2] | 0x1000000) != 0x1000000)
        {
LABEL_59:
          if (!inet_ntop(30, &ifa_addr->sa_data[6], v36, 0x2Eu))
          {
            if (qword_1001E4910 != -1)
              dispatch_once(&qword_1001E4910, &stru_1001B7D40);
            if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
            {
              if (qword_1001E4910 != -1)
                dispatch_once(&qword_1001E4910, &stru_1001B7D40);
              _NRLogWithArgs(qword_1001E4908, 17, "inet_ntop(AF_INET6, %s) failed");
            }
            goto LABEL_30;
          }
          v24 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s"), v36);
          if (a3)
          {
            v25 = *a3;
            if (!*a3)
            {
              v28 = objc_alloc_init((Class)NSMutableSet);
              v29 = *a3;
              *a3 = v28;

              v25 = *a3;
            }
LABEL_63:
            objc_msgSend(v25, "addObject:", v24);
          }
LABEL_64:
          if (v24)
          {
            objc_msgSend(v11, "addObject:", v24);

          }
        }
      }
LABEL_30:
      v10 = v10->ifa_next;
      if (!v10)
      {
        v30 = v35;
        goto LABEL_78;
      }
    }
  }
  v30 = 0;
  v11 = 0;
LABEL_78:
  freeifaddrs(v30);
LABEL_79:

  return v11;
}

void sub_10010AFAC(id a1)
{
  arc4random_buf(&qword_1001E48C8, 8uLL);
}

void sub_10010AFBC(id a1)
{
  unsigned int v1;

  v1 = MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL) - 1;
  if (v1 <= 0xA && ((0x56Du >> v1) & 1) != 0)
    byte_1001E48D8 = byte_10015D058[v1];
}

void sub_10010B008(id a1)
{
  NSObject *v1;
  dispatch_queue_attr_t v2;
  NSObject *v3;
  const char *v4;
  dispatch_queue_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  char *v11;
  int *v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  id v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);

  if (!v3)
  {
    v8 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_100106E24();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_attr_make_with_qos_class(%u) failed", "", "nr_dispatch_queue_create_with_qos", 130, 25);

    }
    v4 = (const char *)_os_log_pack_size(18);
    v11 = (char *)&v23 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v4, *v12, &_mh_execute_header, "%{public}s dispatch_queue_attr_make_with_qos_class(%u) failed");
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v13 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = 25;
    v14 = sub_100106E24();
    _NRLogAbortWithPack(v14, v11);
LABEL_7:
    v15 = sub_100106E24();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    if (v16)
    {
      v17 = sub_100106E24();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create_with_qos", 134, v4);

    }
    v18 = _os_log_pack_size(22);
    v19 = (char *)&v23 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v21 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v21 + 14) = v4;
    v22 = sub_100106E24();
    _NRLogAbortWithPack(v22, v19);
  }
  v4 = "terminusd.CoreBluetooth";
  v5 = dispatch_queue_create("terminusd.CoreBluetooth", v3);
  if (!v5)
    goto LABEL_7;
  v6 = (uint64_t)v5;

  v7 = (void *)qword_1001E48F0;
  qword_1001E48F0 = v6;

}

void sub_10010B274(id a1)
{
  NSObject *v1;
  dispatch_queue_attr_t v2;
  NSObject *v3;
  const char *v4;
  dispatch_queue_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  char *v11;
  int *v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  id v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);

  if (!v3)
  {
    v8 = sub_100106E24();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_100106E24();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_attr_make_with_qos_class(%u) failed", "", "nr_dispatch_queue_create_with_qos", 130, 25);

    }
    v4 = (const char *)_os_log_pack_size(18);
    v11 = (char *)&v23 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v4, *v12, &_mh_execute_header, "%{public}s dispatch_queue_attr_make_with_qos_class(%u) failed");
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v13 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = 25;
    v14 = sub_100106E24();
    _NRLogAbortWithPack(v14, v11);
LABEL_7:
    v15 = sub_100106E24();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    if (v16)
    {
      v17 = sub_100106E24();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create_with_qos", 134, v4);

    }
    v18 = _os_log_pack_size(22);
    v19 = (char *)&v23 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v21 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v21 + 14) = v4;
    v22 = sub_100106E24();
    _NRLogAbortWithPack(v22, v19);
  }
  v4 = "terminusd.IdentityServices.QR";
  v5 = dispatch_queue_create("terminusd.IdentityServices.QR", v3);
  if (!v5)
    goto LABEL_7;
  v6 = (uint64_t)v5;

  v7 = (void *)qword_1001E4900;
  qword_1001E4900 = v6;

}

void sub_10010B4E0(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  v1 = a1;
  if (v1)
  {
    v16 = v1;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allowedLinkTypes"));
    v3 = objc_msgSend(v2, "containsObject:", &off_1001C4888);

    if ((v3 & 1) != 0)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allowedLinkSubtypes"));
      v5 = objc_msgSend(v4, "count");

      if (!v5)
        objc_msgSend(v16, "setAllowedLinkSubtypes:", &off_1001C4B58);
    }
    else
    {
      objc_msgSend(v16, "setIsReachableOverWiFi:", 0);
    }
    v6 = objc_alloc((Class)NSOrderedSet);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allowedLinkTypes"));
    v8 = objc_msgSend(v6, "initWithArray:", v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "array"));
    objc_msgSend(v16, "setAllowedLinkTypes:", v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allowedLinkSubtypes"));
    v11 = objc_msgSend(v10, "count");

    if (v11)
    {
      v12 = objc_alloc((Class)NSOrderedSet);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allowedLinkSubtypes"));
      v14 = objc_msgSend(v12, "initWithArray:", v13);

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "array"));
      objc_msgSend(v16, "setAllowedLinkSubtypes:", v15);

    }
    if (objc_msgSend(v16, "proxyCapability") != (id)2)
      objc_msgSend(v16, "setAllowsDirectToCloud:", 0);
    if (objc_msgSend(v16, "requiresReachability"))
      objc_msgSend(v16, "setAllowsPermittedClientsOnly:", 0);
    if (qword_1001E4870 != -1)
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
    if (byte_1001E4868)
      objc_msgSend(v16, "setAllowsDeviceDiscovery:", 1);
    if (qword_1001E4910 != -1)
      dispatch_once(&qword_1001E4910, &stru_1001B7D40);
    if (_NRLogIsLevelEnabled(qword_1001E4908, 0))
    {
      if (qword_1001E4910 != -1)
        dispatch_once(&qword_1001E4910, &stru_1001B7D40);
      _NRLogWithArgs(qword_1001E4908, 0, "%s%.30s:%-4d Resolved properties: %@", "", "NRResolveOperationalProperties", 1341, v16);
    }

    v1 = v16;
  }

}

id sub_10010B750(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  int v10;
  int v11;
  int v13;
  int v14;
  id v15;
  uint64_t v16;
  _OWORD v17[4];

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  v9 = 0;
  if (v5 && v6 && v7)
  {
    if (objc_msgSend(v5, "length") && objc_msgSend(v6, "length") && objc_msgSend(v8, "length"))
    {
      v16 = 0;
      v10 = CCKDFParametersCreateHkdf(&v16, objc_msgSend(v6, "bytes"), objc_msgSend(v6, "length"), objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"));
      if (v10)
      {
        v11 = v10;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
        {
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          _NRLogWithArgs(qword_1001E4908, 17, "CCKDFParametersCreateHkdf failed: extract error: %d", v11);
        }
      }
      else
      {
        memset(v17, 0, sizeof(v17));
        v13 = CCDeriveKey(v16, 12, objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"), v17, 64);
        if (!v13)
        {
          v9 = +[NSData _newZeroingDataWithBytes:length:](NSData, "_newZeroingDataWithBytes:length:", v17, 64);
          cc_clear(64, v17);
          if (!v16)
            goto LABEL_15;
          goto LABEL_22;
        }
        v14 = v13;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
        {
          v15 = sub_100106E24();
          _NRLogWithArgs(v15, 17, "CCDeriveKey failed: error: %d", v14);

        }
      }
      v9 = 0;
      if (v16)
LABEL_22:
        CCKDFParametersDestroy();
    }
    else
    {
      v9 = 0;
    }
  }
LABEL_15:

  return v9;
}

BOOL sub_10010B9C8(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    v7 = objc_opt_class(NSData);
    v6 = (objc_opt_isKindOfClass(v3, v7) & 1) != 0
      && (v8 = objc_opt_class(NSData), (objc_opt_isKindOfClass(v5, v8) & 1) != 0)
      && (v9 = objc_msgSend(v3, "length"), v9 == objc_msgSend(v5, "length"))
      && objc_msgSend(v3, "length")
      && cc_cmp_safe(objc_msgSend(v3, "length"), objc_msgSend(v3, "bytes"), objc_msgSend(v5, "bytes")) == 0;
  }

  return v6;
}

uint64_t sub_10010DF88(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  id v4;
  id v5;
  unsigned __int8 v6;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  int IsLevelEnabled;
  id v16;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[16];

    if (!v3)
      goto LABEL_4;
    v4 = v2[16];
    v5 = objc_msgSend(v4, "proxyCapability");

    if (v5 == (id)1)
      goto LABEL_4;
    v8 = v2[16];
    v9 = objc_msgSend(v8, "proxyCapability");

    if (v9 == (id)2)
    {
      v6 = 2;
      goto LABEL_5;
    }
    v10 = v2[16];
    v11 = objc_msgSend(v10, "bluetoothRole");

    if (v11 == (id)1)
    {
LABEL_4:
      v6 = 1;
    }
    else
    {
      v12 = v2[16];
      v13 = objc_msgSend(v12, "bluetoothRole");

      if (v13 == (id)2)
        v6 = 2;
      else
        v6 = 3;
    }
  }
  else
  {
    v14 = sub_10010E0B8();
    IsLevelEnabled = _NRLogIsLevelEnabled(v14, 17);

    if (IsLevelEnabled)
    {
      v16 = sub_10010E0B8();
      _NRLogWithArgs(v16, 17, "%s called with null localDevice", "NRLinkGetIKEv2Role");

    }
    v6 = 0;
  }
LABEL_5:

  return v6;
}

id sub_10010E0B8()
{
  if (qword_1001E4980 != -1)
    dispatch_once(&qword_1001E4980, &stru_1001B7E98);
  return (id)qword_1001E4978;
}

void sub_10010E0F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4978;
  qword_1001E4978 = (uint64_t)v1;

}

id sub_10010E128(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id IsLevelEnabled;
  id v9;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[16];

    if (!v3 || (v4 = v2[16], v5 = objc_msgSend(v4, "proxyCapability"), v4, v5 != (id)2))
    {
      IsLevelEnabled = 0;
      goto LABEL_7;
    }
    v6 = v2[16];
    IsLevelEnabled = objc_msgSend(v6, "hasCompanionDatapath");
  }
  else
  {
    v9 = sub_10010E0B8();
    IsLevelEnabled = (id)_NRLogIsLevelEnabled(v9, 17);

    if (!(_DWORD)IsLevelEnabled)
      goto LABEL_7;
    v6 = sub_10010E0B8();
    _NRLogWithArgs(v6, 17, "%s called with null localDevice", "NRLinkShouldConfigureCompanionProxyAgent");
    IsLevelEnabled = 0;
  }

LABEL_7:
  return IsLevelEnabled;
}

id sub_10010E200(unsigned int a1)
{
  id v1;
  const char *v2;

  switch(a1)
  {
    case 0u:
      v1 = objc_alloc((Class)NSString);
      v2 = "Invalid";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 1u:
      v1 = objc_alloc((Class)NSString);
      v2 = "Initial";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 2u:
      v1 = objc_alloc((Class)NSString);
      v2 = "SentPrelude";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 3u:
      v1 = objc_alloc((Class)NSString);
      v2 = "ReceivedPrelude";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 4u:
      v1 = objc_alloc((Class)NSString);
      v2 = "ExchangedPrelude";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 5u:
      v1 = objc_alloc((Class)NSString);
      v2 = "StartedIKE";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 6u:
      v1 = objc_alloc((Class)NSString);
      v2 = "ConnectedIKE";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 7u:
      v1 = objc_alloc((Class)NSString);
      v2 = "ReceivedFirstIKENotify";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 8u:
      v1 = objc_alloc((Class)NSString);
      v2 = "Ready";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    case 9u:
      v1 = objc_alloc((Class)NSString);
      v2 = "Suspended";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
    default:
      if (a1 != 255)
        return objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown(%lld)"), a1);
      v1 = objc_alloc((Class)NSString);
      v2 = "Cancelled";
      return objc_msgSend(v1, "initWithUTF8String:", v2);
  }
}

void sub_10010EB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_10010F75C(void *a1, void *a2, void *a3, id *a4, id *a5, id *a6, void *a7)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  void *v32;
  void *v33;
  int IsLevelEnabled;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  int v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  int v48;
  id v49;
  id v50;
  _QWORD *v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  unsigned __int8 v63;
  void *v64;
  id v65;
  unsigned __int8 v66;
  id v67;
  int v68;
  id v69;
  id v70;
  char v71;
  id v72;
  int v73;
  void *v74;
  void *v75;
  id v76;
  int v77;
  void *v78;
  void *masque;
  void *v80;
  id v81;
  void *v82;
  unsigned __int8 v83;
  void *v84;
  id v85;
  void *v86;
  unsigned int v87;
  void *v88;
  id v89;
  void *v90;
  unsigned int v91;
  void *v92;
  id v93;
  void *v94;
  unsigned int v95;
  NSObject *default_privacy_proxy;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  void *i;
  void *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  int v107;
  void *v108;
  id v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  void *v117;
  int v118;
  void *v119;
  uint64_t v120;
  void *v121;
  id v122;
  uint64_t v123;
  void *v124;
  int v125;
  void *v126;
  uint64_t v127;
  int v128;
  void *v129;
  uint64_t v130;
  void *v131;
  id v133;
  int v134;
  uint64_t v135;
  void *v136;
  id v137;
  uint64_t v138;
  void *v139;
  int v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  id v146;
  uint64_t v147;
  void *v148;
  int v149;
  void *v150;
  uint64_t v151;
  id v152;
  id v153;
  id *location;
  void *v155;
  id v156;
  id v157;
  void *host_with_numeric_port;
  void *v159;
  id v160;
  id v161;
  id v163;
  id v164;
  _QWORD v165[6];
  int32x4_t v166;
  unsigned __int16 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int32x4_t v172;
  int32x4_t v173;
  unsigned __int16 v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, uint64_t);
  void (*v179)(uint64_t);
  id v180;
  int32x4_t v181;
  uint64_t (*v182)(uint64_t, unsigned __int8 *);
  void *v183;
  __int128 *v184;
  uint64_t *v185;

  v12 = a1;
  v13 = a2;
  v163 = a3;
  v164 = a7;
  v166 = 0uLL;
  v167 = 0;
  if ((unint64_t)objc_msgSend(v13, "length") > 0x11)
  {
    location = a6;
    objc_msgSend(v13, "getBytes:length:", &v166, 18);
    if (sub_1001315C8((uint64_t)v12))
    {
      v15 = v12;
      v16 = v13;
      v157 = v164;
      v172 = 0uLL;
      if (v15)
        v17 = (void *)v15[4];
      else
        v17 = 0;
      v18 = v17;
      v19 = v16;
      v173 = 0uLL;
      v174 = 0;
      v161 = v19;
      if ((unint64_t)objc_msgSend(v19, "length") <= 0x11)
      {
        v33 = (void *)_NRCopyLogObjectForNRUUID(v18, v20);
        IsLevelEnabled = _NRLogIsLevelEnabled(v33, 17);

        if (IsLevelEnabled)
        {
          v36 = (void *)_NRCopyLogObjectForNRUUID(v18, v35);
          _NRLogWithArgs(v36, 17, "Insufficient bytes from proxy payload");

        }
        if (v15)
          v37 = (void *)v15[4];
        else
          v37 = 0;
        v38 = v37;
        v40 = (void *)_NRCopyLogObjectForNRUUID(v38, v39);
        v41 = _NRLogIsLevelEnabled(v40, 17);

        if (!v41)
        {
          v74 = 0;
          v160 = 0;
          v14 = 0;
LABEL_161:

          goto LABEL_162;
        }
        if (v15)
          v42 = (void *)v15[4];
        else
          v42 = 0;
        v156 = v42;
        host_with_numeric_port = (void *)_NRCopyLogObjectForNRUUID(v156, v43);
        _NRLogWithArgs(host_with_numeric_port, 17, "%@ Failed to parse privateNotifyProxyPayload", v157);
        v155 = 0;
        goto LABEL_36;
      }
      objc_msgSend(v161, "getBytes:length:", &v173, 18);
      v175 = 0;
      v176 = &v175;
      v177 = 0x3032000000;
      v178 = sub_100110F30;
      v179 = sub_100110F40;
      v180 = 0;
      *(_QWORD *)&v168 = 0;
      *((_QWORD *)&v168 + 1) = &v168;
      *(_QWORD *)&v169 = 0x3032000000;
      *((_QWORD *)&v169 + 1) = sub_100110F30;
      *(_QWORD *)&v170 = sub_100110F40;
      *((_QWORD *)&v170 + 1) = 0;
      if ((unint64_t)objc_msgSend(v161, "length") >= 0x15)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "subdataWithRange:", 18, objc_msgSend(v161, "length") - 18));
        v181.i64[0] = (uint64_t)_NSConcreteStackBlock;
        v181.i64[1] = 3221225472;
        v182 = sub_100110F48;
        v183 = &unk_1001B7E78;
        v184 = &v168;
        v185 = &v175;
        NRTLVParse(v21, &v181);

      }
      v160 = *(id *)(*((_QWORD *)&v168 + 1) + 40);
      _Block_object_dispose(&v168, 8);

      v172 = v173;
      v22 = v174;
      v23 = (void *)v176[5];
      if (v23)
        v24 = v23;
      v155 = v23;
      _Block_object_dispose(&v175, 8);

      v26 = __rev16(v22);
      if (v22)
      {
        v27 = v23;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v172, v172))) & 1) != 0 || v23)
          goto LABEL_19;
      }
      else
      {
        v27 = v23;
        if (v23)
        {
LABEL_19:
          if (v160)
          {
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v172, v172))) & 1) != 0)
            {
              v156 = (id)createIPv6AddrString(&v172, v25);
              v28 = objc_msgSend(v156, "UTF8String");
            }
            else if (v27)
            {
              v156 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "hostname"));
              v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "port"));
              LOWORD(v26) = (unsigned __int16)objc_msgSend(v75, "intValue");

              v28 = objc_msgSend(v156, "UTF8String");
            }
            else
            {
              v156 = 0;
              v28 = objc_msgSend(0, "UTF8String");
            }
            host_with_numeric_port = (void *)nw_endpoint_create_host_with_numeric_port(v28, (unsigned __int16)v26);
            if (!host_with_numeric_port)
            {
              if (v15)
                v114 = (void *)v15[4];
              else
                v114 = 0;
              v115 = v114;
              v117 = (void *)_NRCopyLogObjectForNRUUID(v115, v116);
              v118 = _NRLogIsLevelEnabled(v117, 17);

              if (!v118)
              {
                v14 = 0;

                goto LABEL_159;
              }
              if (v15)
                v119 = (void *)v15[4];
              else
                v119 = 0;
              v153 = v119;
              masque = (void *)_NRCopyLogObjectForNRUUID(v153, v120);
              _NRLogWithArgs(masque, 17, "%@ Could not create proxy endpoint", v157);
              v14 = 0;
              goto LABEL_157;
            }
            v153 = (id)nw_array_create();
            masque = (void *)nw_proxy_hop_create_masque(host_with_numeric_port);
            nw_proxy_hop_set_supports_raw_ip(masque, 0);
            nw_proxy_hop_set_supports_l4s(masque, 0);
            nw_proxy_hop_set_server_raw_public_key(masque, objc_msgSend(v160, "bytes"), objc_msgSend(v160, "length"));
            nw_proxy_hop_add_extra_header(masque, "Priority", "");
            nw_proxy_hop_add_extra_header(masque, "Require-Interface", "");
            nw_proxy_hop_add_extra_header(masque, "Prohibit-Interface", "");
            if (v15)
              v80 = (void *)v15[16];
            else
              v80 = 0;
            v81 = v80;
            v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "proxyProviderCriteria"));
            v83 = objc_msgSend(v82, "excludeClientApplication");

            if ((v83 & 1) == 0)
              nw_proxy_hop_add_extra_header(masque, "Client-Application", "");
            if (v15)
              v84 = (void *)v15[16];
            else
              v84 = 0;
            v85 = v84;
            v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "proxyProviderCriteria"));
            v87 = objc_msgSend(v86, "allowsListenerClients");

            if (v87)
              nw_proxy_hop_set_supports_udp_listen(masque, 1);
            if (v15)
              v88 = (void *)v15[16];
            else
              v88 = 0;
            v89 = v88;
            v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "proxyProviderCriteria"));
            v91 = objc_msgSend(v90, "allowsDemuxForwarding");

            if (v91)
              nw_proxy_hop_set_enable_demux(masque, 1);
            nw_proxy_hop_add_extra_header(masque, "Multipath", "");
            if (v15)
              v92 = (void *)v15[16];
            else
              v92 = 0;
            v93 = v92;
            v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "proxyProviderCriteria"));
            v95 = objc_msgSend(v94, "hasProxyCriteriaAssigningTokens");

            if (v95)
              nw_proxy_hop_add_token_header_with_agent_type(masque, "Proxy-Usage-Token", "", "", "com.apple.networkrelay", "ProxyUsageTokenAgent");
            nw_proxy_hop_set_masque_version(masque, 2);
            nw_array_append(v153, masque);
            default_privacy_proxy = nw_proxy_config_create_default_privacy_proxy(v153);
            if (default_privacy_proxy)
            {
              v97 = objc_alloc_init((Class)NSMutableSet);
              objc_msgSend(v97, "addObjectsFromArray:", &off_1001C4B70);
              if (v156)
                objc_msgSend(v97, "addObject:", v156);
              v170 = 0u;
              v171 = 0u;
              v168 = 0u;
              v169 = 0u;
              v98 = v97;
              v99 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v168, &v175, 16);
              if (v99)
              {
                v100 = *(_QWORD *)v169;
                do
                {
                  for (i = 0; i != v99; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v169 != v100)
                      objc_enumerationMutation(v98);
                    nw_proxy_config_add_excluded_domain(default_privacy_proxy, (const char *)objc_msgSend(*(id *)(*((_QWORD *)&v168 + 1) + 8 * (_QWORD)i), "UTF8String"));
                  }
                  v99 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v168, &v175, 16);
                }
                while (v99);
              }

              nw_proxy_config_set_is_privacy_proxy(default_privacy_proxy, 0, 0);
              nw_proxy_config_set_is_companion_proxy(default_privacy_proxy, 1);
              v152 = objc_alloc_init((Class)NSUUID);
              v181 = 0uLL;
              objc_msgSend(v152, "getUUIDBytes:", &v181);
              nw_proxy_config_set_identifier(default_privacy_proxy, &v181);
              v14 = nw_proxy_config_publish(default_privacy_proxy);
              if (v15)
                v102 = (void *)v15[4];
              else
                v102 = 0;
              v103 = v102;
              v105 = _NRCopyLogObjectForNRUUID(v103, v104);
              v106 = (void *)v105;
              if ((_DWORD)v14)
              {
                v107 = _NRLogIsLevelEnabled(v105, 0);

                if (v107)
                {
                  if (v15)
                    v108 = (void *)v15[4];
                  else
                    v108 = 0;
                  v109 = v108;
                  v111 = (void *)_NRCopyLogObjectForNRUUID(v109, v110);
                  _NRLogWithArgs(v111, 0, "%s%.30s:%-4d %@ Registered MASQUE proxy agent %@\n", "", "NRLinkConfigureMASQUEProxyAgent", 1396, v157, v152);

                }
                if (location)
                  objc_storeStrong(location, default_privacy_proxy);
                v112 = v152;
                v113 = *a5;
                *a5 = v112;
                goto LABEL_154;
              }
              v128 = _NRLogIsLevelEnabled(v105, 17);

              if (v128)
              {
                if (v15)
                  v129 = (void *)v15[4];
                else
                  v129 = 0;
                v113 = v129;
                v131 = (void *)_NRCopyLogObjectForNRUUID(v113, v130);
                _NRLogWithArgs(v131, 17, "%@ Failed to register proxy agent %@\n", v157, v152);

LABEL_154:
              }
            }
            else
            {
              if (v15)
                v121 = (void *)v15[4];
              else
                v121 = 0;
              v122 = v121;
              v124 = (void *)_NRCopyLogObjectForNRUUID(v122, v123);
              v125 = _NRLogIsLevelEnabled(v124, 17);

              if (!v125)
              {
                v14 = 0;
                goto LABEL_156;
              }
              if (v15)
                v126 = (void *)v15[4];
              else
                v126 = 0;
              v98 = v126;
              v152 = (id)_NRCopyLogObjectForNRUUID(v98, v127);
              _NRLogWithArgs(v152, 17, "%@ Could not create MASQUE proxy config", v157);
              v14 = 0;
            }

LABEL_156:
LABEL_157:

            goto LABEL_158;
          }
          if (v15)
            v145 = (void *)v15[4];
          else
            v145 = 0;
          v146 = v145;
          v148 = (void *)_NRCopyLogObjectForNRUUID(v146, v147);
          v149 = _NRLogIsLevelEnabled(v148, 17);

          if (!v149)
          {
            v160 = 0;
            v14 = 0;
            goto LABEL_160;
          }
          if (v15)
            v150 = (void *)v15[4];
          else
            v150 = 0;
          v156 = v150;
          host_with_numeric_port = (void *)_NRCopyLogObjectForNRUUID(v156, v151);
          _NRLogWithArgs(host_with_numeric_port, 17, "%@ proxyServerPublicKey not found in the privateNotifyProxyPayload", v157);
LABEL_36:
          v160 = 0;
          v14 = 0;
LABEL_158:

LABEL_159:
LABEL_160:
          v74 = v155;
          goto LABEL_161;
        }
      }
      if (v15)
        v136 = (void *)v15[4];
      else
        v136 = 0;
      v137 = v136;
      v139 = (void *)_NRCopyLogObjectForNRUUID(v137, v138);
      v140 = _NRLogIsLevelEnabled(v139, 17);

      if (!v140)
      {
        v74 = 0;
        v14 = 0;
        goto LABEL_161;
      }
      if (v15)
        v141 = (void *)v15[4];
      else
        v141 = 0;
      v156 = v141;
      v159 = (void *)_NRCopyLogObjectForNRUUID(v156, v142);
      v144 = (void *)createIPv6AddrString(&v172, v143);
      _NRLogWithArgs(v159, 17, "%@ Found invalid ipv6 addr %@.%u in privateNotifyProxyPayload", v157, v144, v26);

      v155 = 0;
      v14 = 0;

      goto LABEL_159;
    }
    *(_QWORD *)&v168 = 0;
    *((_QWORD *)&v168 + 1) = &v168;
    *(_QWORD *)&v169 = 0x2020000000;
    BYTE8(v169) = 0;
    v175 = 0;
    v176 = &v175;
    v177 = 0x3032000000;
    v178 = sub_100110F30;
    v179 = sub_100110F40;
    v180 = 0;
    if ((unint64_t)objc_msgSend(v13, "length") >= 0x15)
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "subdataWithRange:", 18, objc_msgSend(v13, "length") - 18));
      v165[0] = _NSConcreteStackBlock;
      v165[1] = 3221225472;
      v165[2] = sub_10011109C;
      v165[3] = &unk_1001B7E78;
      v165[4] = &v168;
      v165[5] = &v175;
      NRTLVParse(v30, v165);

    }
    v181 = v166;
    v31 = bswap32(v167) >> 16;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v181, v181))) & 1) != 0)
    {
      v32 = (void *)createIPv6AddrString(&v181, v29);
      if (!v163)
        goto LABEL_41;
    }
    else
    {
      v44 = (void *)v176[5];
      if (v44)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "hostname"));
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v176[5], "port"));
        LOWORD(v31) = (unsigned __int16)objc_msgSend(v45, "intValue");

        if (!v163)
          goto LABEL_41;
      }
      else
      {
        v32 = 0;
        if (!v163)
          goto LABEL_41;
      }
    }
    if (objc_msgSend(v32, "hasPrefix:", CFSTR("fe80")))
    {
      v46 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@%%%@"), v32, v163);

      v32 = v46;
    }
LABEL_41:
    if (!(_WORD)v31)
    {
      v133 = sub_10010E0B8();
      v134 = _NRLogIsLevelEnabled(v133, 17);

      if (!v134)
      {
        v14 = 0;
        goto LABEL_99;
      }
      v50 = sub_10010E0B8();
      v51 = (_QWORD *)createIPv6AddrString(&v181, v135);
      _NRLogWithArgs(v50, 17, "%@ Received bad proxy config %@.%u", v164, v51, 0);
      v14 = 0;
LABEL_98:

LABEL_99:
      _Block_object_dispose(&v175, 8);

      _Block_object_dispose(&v168, 8);
      goto LABEL_162;
    }
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    v47 = (id)qword_1001E4978;
    v48 = _NRLogIsLevelEnabled(v47, 0);

    if (v48)
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      v49 = (id)qword_1001E4978;
      _NRLogWithArgs(v49, 0, "%s%.30s:%-4d %@ Registering proxy config %@.%u", "", "NRLinkConfigureProxyAgent", 1485, v164, v32, (unsigned __int16)v31);

    }
    v50 = objc_alloc_init((Class)NSMutableSet);
    objc_msgSend(v50, "addObjectsFromArray:", &off_1001C4B70);
    v51 = sub_10013D34C(v12);
    if (v51)
      objc_msgSend(v50, "addObjectsFromArray:", v51);
    if (v32)
      objc_msgSend(v50, "addObject:", v32);
    v52 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v32, kSCPropNetProxiesSOCKSProxy);
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v31));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v53, kSCPropNetProxiesSOCKSPort);

    objc_msgSend(v52, "setObject:forKeyedSubscript:", &off_1001C48D0, kSCPropNetProxiesSOCKSEnable);
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "allObjects"));
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v54, kSCPropNetProxiesExceptionsList);

    objc_msgSend(v52, "setObject:forKeyedSubscript:", CFSTR("shoes"), CFSTR("kCFStreamPropertySOCKSVersion"));
    if (_os_feature_enabled_impl("Network", "shoes_udp_associate")
      && *(_BYTE *)(*((_QWORD *)&v168 + 1) + 24))
    {
      objc_msgSend(v52, "setObject:forKeyedSubscript:", &off_1001C48D0, CFSTR("SHOESUDPAssociate"));
    }
    if (v12 && *((_BYTE *)v12 + 16))
      objc_msgSend(v52, "setObject:forKeyedSubscript:", CFSTR("com.apple.datausage.alt-account"), CFSTR("SHOESFixedBundleID"));
    v55 = objc_msgSend(objc_alloc((Class)NEProxyConfigurationNetworkAgent), "initWithProxyConfiguration:", v52);
    objc_msgSend(v55, "setActive:", 1);
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    objc_msgSend(v55, "setAgentUUID:", v56);

    objc_msgSend(v55, "setVoluntary:", 0);
    objc_msgSend(v55, "setUserActivated:", 0);
    objc_msgSend(v55, "setKernelActivated:", 0);
    v57 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "agentUUID"));
    v58 = *a5;
    *a5 = (id)v57;

    v59 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(NEProxyConfigurationNetworkAgent));
    v60 = *a4;
    *a4 = v59;

    if (!*a4)
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      v70 = (id)qword_1001E4978;
      v71 = _NRLogIsLevelEnabled(v70, 17);

      if ((v71 & 1) != 0)
      {
        if (qword_1001E4980 != -1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        v69 = (id)qword_1001E4978;
        _NRLogWithArgs(v69, 17, "%@ Failed to create proxy agent registration", v164);
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if ((objc_msgSend(*a4, "registerNetworkAgent:", v55) & 1) != 0)
    {
      if (v12)
        v61 = (void *)v12[16];
      else
        v61 = 0;
      v62 = v61;
      v63 = objc_msgSend(v62, "hasPoliciesForProxyCriteria");

      if ((v63 & 1) == 0)
      {
        if (v12)
          v64 = (void *)v12[16];
        else
          v64 = 0;
        v65 = v64;
        if (objc_msgSend(v65, "hasCompanionDatapath"))
        {
          v66 = objc_msgSend(*a4, "addNetworkAgentToInterfaceNamed:", v163);

          if ((v66 & 1) == 0)
          {
            v67 = sub_10010E0B8();
            v68 = _NRLogIsLevelEnabled(v67, 17);

            if (v68)
            {
              v69 = sub_10010E0B8();
              _NRLogWithArgs(v69, 17, "%@ Failed to add proxy agent to %@", v164, v163);
LABEL_81:
              v14 = 0;
LABEL_95:

              goto LABEL_97;
            }
            goto LABEL_82;
          }
        }
        else
        {

        }
      }
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      v76 = (id)qword_1001E4978;
      v77 = _NRLogIsLevelEnabled(v76, 0);

      if (!v77)
      {
        v14 = 1;
        goto LABEL_97;
      }
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      v69 = (id)qword_1001E4978;
      v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "agentUUID"));
      _NRLogWithArgs(v69, 0, "%s%.30s:%-4d %@ Set up proxy agent %@ for configuration: %@", "", "NRLinkConfigureProxyAgent", 1540, v164, v78, v52);

      v14 = 1;
      goto LABEL_95;
    }
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    v72 = (id)qword_1001E4978;
    v73 = _NRLogIsLevelEnabled(v72, 17);

    if (v73)
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      v69 = (id)qword_1001E4978;
      _NRLogWithArgs(v69, 17, "%@ Failed to register proxy agent", v164);
      goto LABEL_81;
    }
LABEL_82:
    v14 = 0;
LABEL_97:

    goto LABEL_98;
  }
  if (qword_1001E4980 != -1)
    dispatch_once(&qword_1001E4980, &stru_1001B7E98);
  if (_NRLogIsLevelEnabled(qword_1001E4978, 17))
  {
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    _NRLogWithArgs(qword_1001E4978, 17, "%@ Insufficient bytes from proxy payload", v164);
    v14 = 0;
  }
  else
  {
    v14 = 0;
  }
LABEL_162:

  return v14;
}

void sub_100110AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

id sub_100110B34(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  int IsLevelEnabled;
  id v37;
  id v38;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    v35 = sub_10010E0B8();
    IsLevelEnabled = _NRLogIsLevelEnabled(v35, 17);

    if (IsLevelEnabled)
    {
      v37 = sub_10010E0B8();
      _NRLogWithArgs(v37, 17, "%s called with null proxyAgentUUID");
LABEL_18:

      v28 = 0;
      goto LABEL_13;
    }
LABEL_19:
    v28 = 0;
    goto LABEL_13;
  }
  if (!v7)
  {
    v38 = sub_10010E0B8();
    v39 = _NRLogIsLevelEnabled(v38, 17);

    if (v39)
    {
      v37 = sub_10010E0B8();
      _NRLogWithArgs(v37, 17, "%s called with null policyIdentifierString");
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v43 = objc_alloc_init((Class)NSMutableArray);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v47 = v9;
  v10 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v47, 1));

  v11 = v6;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 5, v6));
  v44 = v5;
  objc_msgSend(v12, "setNetworkAgentUUID:", v5);
  v46 = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v46, 1));
  v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v13));

  v41 = (void *)v14;
  v42 = (void *)v10;
  v15 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 10, v14, v10);
  objc_opt_self(NRDPolicySessionManager);
  if (qword_1001E4A20 != -1)
    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
  v16 = (id)qword_1001E4A18;
  v17 = v8;
  v18 = sub_100127310((uint64_t)v16, v8, v15);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

  objc_msgSend(v43, "addObject:", v19);
  v20 = objc_alloc((Class)NEPolicy);
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v44));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](NEPolicyCondition, "scopedInterface:", v11));
  v45 = v22;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v45, 1));
  v24 = objc_msgSend(v20, "initWithOrder:result:conditions:", 10, v21, v23);

  objc_opt_self(NRDPolicySessionManager);
  if (qword_1001E4A20 != -1)
    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
  v25 = (id)qword_1001E4A18;
  v26 = sub_100127310((uint64_t)v25, v17, v24);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

  v28 = v43;
  objc_msgSend(v43, "addObject:", v27);
  objc_opt_self(NRDPolicySessionManager);
  v6 = v11;
  if (qword_1001E4A20 != -1)
    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
  v5 = v44;
  v29 = (id)qword_1001E4A18;
  v30 = (id *)v29;
  if (v29)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v29 + 1));
    if ((objc_msgSend(v30[2], "apply") & 1) == 0)
      sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v31, v32, v33, v40);
  }

  v8 = v17;
LABEL_13:

  return v28;
}

uint64_t sub_100110F30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100110F40(uint64_t a1)
{

}

uint64_t sub_100110F48(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v3 = __rev16(*(unsigned __int16 *)(a2 + 1));
  v4 = *a2;
  if (v4 == 3)
  {
    if (*(_WORD *)(a2 + 1))
    {
      v9 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v3);
      v8 = 1;
      v10 = sub_10010A6B4(v9, 1, 0, 0);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
    else
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      if (_NRLogIsLevelEnabled(qword_1001E4978, 17))
      {
        if (qword_1001E4980 != -1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        _NRLogWithArgs(qword_1001E4978, 17, "invalid tlv length for ProxyServerEndpoint");
      }
      return 0;
    }
  }
  else if (v4 == 2 && *(_WORD *)(a2 + 1))
  {
    v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, v3);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    return 1;
  }
  else
  {
    return 1;
  }
  return v8;
}

uint64_t sub_10011109C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  int v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *a2;
  if (v4 == 3)
  {
    if (!*(_WORD *)(a2 + 1))
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      if (_NRLogIsLevelEnabled(qword_1001E4978, 17))
      {
        if (qword_1001E4980 != -1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        _NRLogWithArgs(qword_1001E4978, 17, "invalid tlv length for ProxyServerEndpoint");
      }
      return 0;
    }
    v3 = *(unsigned __int16 *)(a2 + 1);
    v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, __rev16(v3));
    v6 = 1;
    v7 = sub_10010A6B4(v5, 1, 0, 0);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  else if (v4 == 1)
  {
    if (*(_WORD *)(a2 + 1))
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      if (_NRLogIsLevelEnabled(qword_1001E4978, 17))
      {
        if (qword_1001E4980 != -1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        _NRLogWithArgs(qword_1001E4978, 17, "invalid tlv length for SHOESUDPAssociate");
      }
      return 0;
    }
    v6 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    return 1;
  }
  return v6;
}

uint64_t sub_100111240(void *a1)
{
  id v1;
  uint64_t Nexus;

  v1 = a1;
  Nexus = NEVirtualInterfaceCreateNexus(kCFAllocatorDefault, 2, v1, 0, 1, 0, 0, 0, 0);
  if (!Nexus)
  {
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying NEVirtualInterfaceCreateNexus()", "", "NRLinkVirtualInterfaceCreate", 2004);
    }
    Nexus = NEVirtualInterfaceCreateNexus(kCFAllocatorDefault, 2, v1, 0, 1, 0, 0, 0, 0);
    if (!Nexus)
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
      {
        if (qword_1001E4980 != -1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying NEVirtualInterfaceCreateNexus()", "", "NRLinkVirtualInterfaceCreate", 2004);
      }
      Nexus = NEVirtualInterfaceCreateNexus(kCFAllocatorDefault, 2, v1, 0, 1, 0, 0, 0, 0);
      if (!Nexus)
      {
        if (qword_1001E4980 != -1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
        {
          if (qword_1001E4980 != -1)
            dispatch_once(&qword_1001E4980, &stru_1001B7E98);
          _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying NEVirtualInterfaceCreateNexus()", "", "NRLinkVirtualInterfaceCreate", 2004);
        }
        Nexus = NEVirtualInterfaceCreateNexus(kCFAllocatorDefault, 2, v1, 0, 1, 0, 0, 0, 0);
        if (!Nexus)
        {
          if (qword_1001E4980 != -1)
            dispatch_once(&qword_1001E4980, &stru_1001B7E98);
          if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
          {
            if (qword_1001E4980 != -1)
              dispatch_once(&qword_1001E4980, &stru_1001B7E98);
            _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying NEVirtualInterfaceCreateNexus()", "", "NRLinkVirtualInterfaceCreate", 2004);
          }
          Nexus = NEVirtualInterfaceCreateNexus(kCFAllocatorDefault, 2, v1, 0, 1, 0, 0, 0, 0);
          if (!Nexus)
          {
            if (qword_1001E4980 != -1)
              dispatch_once(&qword_1001E4980, &stru_1001B7E98);
            if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
            {
              if (qword_1001E4980 != -1)
                dispatch_once(&qword_1001E4980, &stru_1001B7E98);
              _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying NEVirtualInterfaceCreateNexus()", "", "NRLinkVirtualInterfaceCreate", 2004);
            }
            Nexus = NEVirtualInterfaceCreateNexus(kCFAllocatorDefault, 2, v1, 0, 1, 0, 0, 0, 0);
            if (!Nexus)
            {
              if (qword_1001E4980 != -1)
                dispatch_once(&qword_1001E4980, &stru_1001B7E98);
              if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
              {
                if (qword_1001E4980 != -1)
                  dispatch_once(&qword_1001E4980, &stru_1001B7E98);
                _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying NEVirtualInterfaceCreateNexus()", "", "NRLinkVirtualInterfaceCreate", 2004);
              }
              Nexus = 0;
            }
          }
        }
      }
    }
  }

  return Nexus;
}

void sub_1001116E8(uint64_t a1)
{
  id WeakRetained;
  id v3;
  int IsLevelEnabled;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v10 = WeakRetained;
    v3 = sub_10010E0B8();
    IsLevelEnabled = _NRLogIsLevelEnabled(v3, 16);

    if (IsLevelEnabled)
    {
      v8 = sub_10010E0B8();
      v9 = "";
      _NRLogWithArgs(v8, 16, "%s%.30s:%-4d %@ not deallocated after 10s, likely leak");

    }
    sub_100109270(*(void **)(a1 + 32), CFSTR("Leak"), CFSTR("NEIKEv2Session"), 0, 0, v5, v6, v7, (uint64_t)v9);
    WeakRetained = v10;
  }

}

void sub_1001117A8(uint64_t a1)
{
  id v2;
  void *v3;
  int v4;
  id v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  id v12;

  if (qword_1001E4980 != -1)
    dispatch_once(&qword_1001E4980, &stru_1001B7E98);
  if (_NRLogIsLevelEnabled(qword_1001E4978, 1))
  {
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    _NRLogWithArgs(qword_1001E4978, 1, "%s%.30s:%-4d Attempting to get Nexus UUID for %@", "", "-[NRLink(NRLinkProtected) invalidateLink]_block_invoke", 925, *(_QWORD *)(a1 + 32));
  }
  v2 = sub_100108C98(*(void **)(a1 + 32));
  v3 = v2;
  if (v2)
  {
    v12 = v2;
    if ((objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40)) & 1) != 0)
    {
      v5 = sub_10010E0B8();
      IsLevelEnabled = _NRLogIsLevelEnabled(v5, 16);

      if (IsLevelEnabled)
      {
        v10 = sub_10010E0B8();
        v11 = "";
        _NRLogWithArgs(v10, 16, "%s%.30s:%-4d UUID did not change for %@ after 10s, likely interface leak (%@)");

      }
      sub_100109270(*(void **)(a1 + 48), CFSTR("Leak"), CFSTR("Interface"), 0, 0, v7, v8, v9, (uint64_t)v11);
      goto LABEL_15;
    }
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    v4 = _NRLogIsLevelEnabled(qword_1001E4978, 1);
    v3 = v12;
    if (v4)
    {
      if (qword_1001E4980 != -1)
      {
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        v3 = v12;
      }
      _NRLogWithArgs(qword_1001E4978, 1, "%s%.30s:%-4d UUID changed for %@ (old %@, new %@), no interface leak", "", "-[NRLink(NRLinkProtected) invalidateLink]_block_invoke", 933, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
LABEL_15:
      v3 = v12;
    }
  }

}

void sub_1001119A8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyIDString:", CFSTR("com.apple.networkrelay.companionlink.classD"));
  v2 = (void *)qword_1001E4918;
  qword_1001E4918 = (uint64_t)v1;

}

void sub_1001119DC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyIDString:", CFSTR("com.apple.networkrelay.companionlink.classC"));
  v2 = (void *)qword_1001E4928;
  qword_1001E4928 = (uint64_t)v1;

}

id sub_100111A10()
{
  if (qword_1001E4940 != -1)
    dispatch_once(&qword_1001E4940, &stru_1001B7DC8);
  return (id)qword_1001E4938;
}

void sub_100111A50(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyIDString:", CFSTR("com.apple.networkrelay.companionlink.classA"));
  v2 = (void *)qword_1001E4938;
  qword_1001E4938 = (uint64_t)v1;

}

id sub_100111A84()
{
  if (qword_1001E4950 != -1)
    dispatch_once(&qword_1001E4950, &stru_1001B7DE8);
  return (id)qword_1001E4948;
}

void sub_100111AC4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyIDString:", CFSTR("com.apple.networkrelay.companionlink.pairing.ids"));
  v2 = (void *)qword_1001E4948;
  qword_1001E4948 = (uint64_t)v1;

}

id sub_100111AF8()
{
  if (qword_1001E4960 != -1)
    dispatch_once(&qword_1001E4960, &stru_1001B7E08);
  return (id)qword_1001E4958;
}

void sub_100111B38(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyIDString:", CFSTR("com.apple.networkrelay.companionlink.pairing.oobk"));
  v2 = (void *)qword_1001E4958;
  qword_1001E4958 = (uint64_t)v1;

}

void sub_100111B6C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NEIKEv2KeyIDIdentifier), "initWithKeyIDString:", CFSTR("com.apple.networkrelay.companionlink.pairing.control"));
  v2 = (void *)qword_1001E4968;
  qword_1001E4968 = (uint64_t)v1;

}

uint64_t sub_100111BA0(int8x16_t *a1)
{
  int8x8_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  int8x16_t v6;

  v6 = *a1;
  v1 = veor_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v6.i32[0] = v1.i32[0] ^ v1.i32[1];
  v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v6, 16);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "base64EncodedStringWithOptions:", 0, v6.i64[0]));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "substringToIndex:", 6));

  return v4;
}

id sub_100111C60(void *a1)
{
  id v1;
  id v2;
  void *v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") > 0x11)
  {
    v6 = 0;
    v7 = &v6;
    v8 = 0x3032000000;
    v9 = sub_100110F30;
    v10 = sub_100110F40;
    v11 = 0;
    if ((unint64_t)objc_msgSend(v1, "length") >= 0x15)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subdataWithRange:", 18, objc_msgSend(v1, "length") - 18));
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_100111E04;
      v5[3] = &unk_1001B7E50;
      v5[4] = &v6;
      NRTLVParse(v3, v5);

    }
    v2 = (id)v7[5];
    _Block_object_dispose(&v6, 8);

  }
  else
  {
    if (qword_1001E4980 != -1)
      dispatch_once(&qword_1001E4980, &stru_1001B7E98);
    if (_NRLogIsLevelEnabled(qword_1001E4978, 17))
    {
      if (qword_1001E4980 != -1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      _NRLogWithArgs(qword_1001E4978, 17, "%@ Insufficient bytes from proxy payload", v1);
    }
    v2 = 0;
  }

  return v2;
}

void sub_100111DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100111E04(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)a2 == 4)
  {
    v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 3, bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16);
    v4 = objc_msgSend(objc_alloc((Class)NRDeviceProxyProviderCriteria), "initWithReceivedData:", v3);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  return 1;
}

void sub_100111E90(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  int v12;
  id v13;
  int IsLevelEnabled;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "proposals"));
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v16 != v9)
              objc_enumerationMutation(v6);
            objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i), "setLifetimeSeconds:", 21599);
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v8);
      }
      goto LABEL_14;
    }
    v13 = sub_10010E0B8();
    IsLevelEnabled = _NRLogIsLevelEnabled(v13, 17);

    if (IsLevelEnabled)
    {
      v6 = sub_10010E0B8();
      _NRLogWithArgs(v6, 17, "%s called with null ikeSAConfiguration");
      goto LABEL_14;
    }
  }
  else
  {
    v11 = sub_10010E0B8();
    v12 = _NRLogIsLevelEnabled(v11, 17);

    if (v12)
    {
      v6 = sub_10010E0B8();
      _NRLogWithArgs(v6, 17, "%s called with null localDevice");
LABEL_14:

    }
  }

}

void sub_100112034(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  int IsLevelEnabled;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "proposals"));
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i), "setLifetimeSeconds:", 21221);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }
    goto LABEL_11;
  }
  v11 = sub_10010E0B8();
  IsLevelEnabled = _NRLogIsLevelEnabled(v11, 17);

  if (IsLevelEnabled)
  {
    v6 = sub_10010E0B8();
    _NRLogWithArgs(v6, 17, "%s called with null childSAConfiguration", "NRLinkChildSAConfigurationSetInitiatorLifetime");
LABEL_11:

  }
}

id sub_100112198()
{
  id v0;
  id v1;
  NSObject *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v18;
  id v19;

  v0 = objc_alloc_init((Class)NEIKEv2IKESAConfiguration);
  objc_msgSend(v0, "setAllowRedirect:", 0);
  objc_msgSend(v0, "setDisableSwitchToNATTPorts:", 1);
  objc_msgSend(v0, "setNonceSize:", 32);
  objc_msgSend(v0, "setStrictNonceSizeChecks:", 1);
  v1 = objc_alloc_init((Class)NEIKEv2IKESAProposal);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  _NRIsAppleInternal(v3);
  v4 = objc_msgSend(objc_alloc((Class)NEIKEv2EncryptionProtocol), "initWithEncryptionType:", 5);
  v18 = v4;
  v5 = objc_msgSend(objc_alloc((Class)NEIKEv2EncryptionProtocol), "initWithEncryptionType:", 6);
  v19 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 2));

  objc_msgSend(v1, "setEncryptionProtocols:", v6);
  v7 = objc_msgSend(objc_alloc((Class)NEIKEv2PRFProtocol), "initWithType:", 7);
  v18 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));

  objc_msgSend(v1, "setPrfProtocols:", v8);
  v9 = objc_msgSend(objc_alloc((Class)NEIKEv2KEMProtocol), "initWithMethod:", 32);
  v18 = v9;
  v10 = objc_msgSend(objc_alloc((Class)NEIKEv2KEMProtocol), "initWithMethod:", 31);
  v19 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 2));

  objc_msgSend(v1, "setKemProtocols:", v11);
  objc_msgSend(v1, "setLifetimeSeconds:", 1000000);
  v18 = v1;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));

  objc_msgSend(v0, "setProposals:", v12);
  v13 = objc_alloc((Class)NSSet);
  v14 = objc_msgSend(objc_alloc((Class)NEIKEv2SignatureHashProtocol), "initWithHashType:", 5);
  v15 = objc_msgSend(objc_alloc((Class)NEIKEv2SignatureHashProtocol), "initWithHashType:", 2);
  v16 = objc_msgSend(v13, "initWithObjects:", v14, v15, 0);
  objc_msgSend(v0, "setExtraSupportedSignatureHashes:", v16);

  objc_msgSend(v0, "setPreferInitiatorProposalOrder:", 1);
  return v0;
}

id sub_100112420()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD v19[2];
  id v20;
  id v21;

  v0 = objc_alloc_init((Class)NEIKEv2ChildSAConfiguration);
  objc_msgSend(v0, "setMode:", 1);
  v1 = +[NEIKEv2TrafficSelector copyAllIPv6](NEIKEv2TrafficSelector, "copyAllIPv6");
  v19[0] = v1;
  v2 = +[NEIKEv2TrafficSelector copyAllIPv4](NEIKEv2TrafficSelector, "copyAllIPv4");
  v19[1] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v19, 2));
  objc_msgSend(v0, "setLocalTrafficSelectors:", v3);

  v4 = +[NEIKEv2TrafficSelector copyAllIPv6](NEIKEv2TrafficSelector, "copyAllIPv6");
  v18[0] = v4;
  v5 = +[NEIKEv2TrafficSelector copyAllIPv4](NEIKEv2TrafficSelector, "copyAllIPv4");
  v18[1] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));
  objc_msgSend(v0, "setRemoteTrafficSelectors:", v6);

  v7 = objc_alloc_init((Class)NEIKEv2ChildSAProposal);
  objc_msgSend(v7, "setProtocol:", 3);
  v8 = sub_10014CFBC();
  dispatch_assert_queue_V2(v8);

  _NRIsAppleInternal(v9);
  v10 = objc_msgSend(objc_alloc((Class)NEIKEv2EncryptionProtocol), "initWithEncryptionType:", 9);
  v20 = v10;
  v11 = objc_msgSend(objc_alloc((Class)NEIKEv2EncryptionProtocol), "initWithEncryptionType:", 7);
  v21 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 2));

  objc_msgSend(v7, "setEncryptionProtocols:", v12);
  v13 = objc_msgSend(objc_alloc((Class)NEIKEv2KEMProtocol), "initWithMethod:", 32);
  v20 = v13;
  v14 = objc_msgSend(objc_alloc((Class)NEIKEv2KEMProtocol), "initWithMethod:", 31);
  v21 = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 2));

  objc_msgSend(v7, "setKemProtocols:", v15);
  objc_msgSend(v7, "setLifetimeSeconds:", 1000000);
  v20 = v7;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v20, 1));

  objc_msgSend(v0, "setProposals:", v16);
  objc_msgSend(v0, "setReplayWindowSize:", 256);
  objc_msgSend(v0, "setPreferInitiatorProposalOrder:", 1);
  return v0;
}

id sub_10011268C(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init((Class)NEIKEv2SessionConfiguration);
  objc_msgSend(v7, "setNegotiateMOBIKE:", 0);
  objc_msgSend(v7, "setNatTraversalKeepaliveDisabled:", 1);
  objc_msgSend(v7, "setDeadPeerDetectionEnabled:", 0);
  objc_msgSend(v7, "setIdleTimeoutEnabled:", 0);
  objc_msgSend(v7, "setConfigurationReply:", 0);
  v8 = objc_msgSend(v5, "copy");
  objc_msgSend(v7, "setLocalIdentifier:", v8);

  if (a1)
  {
    v9 = objc_msgSend(v5, "copy");
    objc_msgSend(v7, "setRemoteIdentifier:", v9);

  }
  v10 = objc_msgSend(v6, "copy");
  objc_msgSend(v7, "setAuthenticationProtocol:", v10);

  v11 = objc_msgSend(v6, "copy");
  objc_msgSend(v7, "setRemoteAuthentication:", v11);

  return v7;
}

void *sub_100112798(int a1, void *a2, uint64_t a3)
{
  id *v5;
  id String;
  uint64_t v7;
  id *v8;
  unsigned int v9;
  id v10;
  id v11;
  BOOL v12;
  id v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  id v32;
  id v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  id v39;
  id v40;
  _BYTE *v41;
  void *v42;
  id v43;
  void *v44;
  int v46;
  id v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;
  int v53;
  id v54;
  int IsLevelEnabled;
  void *v56;
  id v57;
  id v58;
  _QWORD *v59;
  char v60;
  __int128 v61;
  _BYTE v62[79];

  v5 = a2;
  switch((_DWORD)a3)
  {
    case 1:
      if (qword_1001E4940 != -1)
        dispatch_once(&qword_1001E4940, &stru_1001B7DC8);
      String = (id)qword_1001E4938;
      if (v5)
      {
        v7 = 11;
        goto LABEL_16;
      }
      goto LABEL_76;
    case 3:
      if (qword_1001E4930 != -1)
        dispatch_once(&qword_1001E4930, &stru_1001B7DA8);
      String = (id)qword_1001E4928;
      if (v5)
      {
        v7 = 10;
        goto LABEL_16;
      }
LABEL_76:
      v12 = v5 == 0;
      v10 = objc_alloc((Class)NEIKEv2AuthenticationProtocol);
      v8 = 0;
      goto LABEL_19;
    case 4:
      if (qword_1001E4920 != -1)
        dispatch_once(&qword_1001E4920, &stru_1001B7D88);
      String = (id)qword_1001E4918;
      if (v5)
      {
        v7 = 9;
LABEL_16:
        v8 = (id *)v5[v7];
        v9 = *((unsigned __int16 *)v5 + 14);
        v10 = objc_alloc((Class)NEIKEv2AuthenticationProtocol);
        if (v9 >= 0x14)
        {
          v11 = objc_msgSend(v10, "initWithDigitalSignature:", 3);
          v12 = 0;
          goto LABEL_20;
        }
        v12 = 0;
LABEL_19:
        v11 = objc_msgSend(v10, "initWithNonStandardDigitalSignature:", 3);
LABEL_20:
        v13 = sub_10011268C(a1, String, v11);
        v14 = v13;
        if (v8)
        {
          v15 = (uint64_t *)v8[1];
          v16 = v15;
          if (v15)
            v17 = v15[2];
          else
            v17 = 0;
          objc_msgSend(v14, "setRemotePublicKeyRef:", v17);

          v18 = (uint64_t *)v8[2];
          v19 = v18;
          if (v18)
            v20 = v18[2];
          else
            v20 = 0;
        }
        else
        {
          objc_msgSend(v13, "setRemotePublicKeyRef:", 0);
          v19 = 0;
          v20 = 0;
        }
        objc_msgSend(v14, "setLocalPrivateKeyRef:", v20);

        if (a1 && _os_feature_enabled_impl("terminus", "EncryptedIdentity"))
        {
          if (!v12)
          {
            if (*((unsigned __int16 *)v5 + 14) >= 0x14u)
            {
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "remoteIdentifier"));
              v22 = v5[4];
              v23 = v21;
              v24 = v22;
              v25 = objc_opt_self(NRDLocalDevice);
              if (v23)
              {
                if (v24)
                {
                  v26 = sub_1001300EC(v25, v24, 0);
                  v27 = v23;
                  if (v26 && (v28 = (_QWORD *)v26[8]) != 0)
                  {
                    v57 = v24;
                    v58 = v23;
                    v59 = v26;
                    memset(v62, 0, sizeof(v62));
                    v61 = 0u;
                    v60 = 1;
                    v29 = (void *)v28[1];
                    v30 = v27;
                    v31 = v28;
                    objc_msgSend(v29, "getUUIDBytes:", &v61);

                    arc4random_buf(v62, 0x4FuLL);
                    v32 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v60, 96);
                    v33 = objc_alloc((Class)NEIKEv2EncryptedKeyIDIdentifier);
                    v56 = v30;
                    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "identifierData"));
                    v35 = (_QWORD *)v59[8];
                    if (v35)
                      v36 = v35[2];
                    else
                      v36 = 0;
                    v37 = v35;
                    v38 = objc_msgSend(v33, "initWithKeyID:aad:key:", v32, v34, v36);

                    v24 = v57;
                    v23 = v58;
                    v26 = v59;
                    v27 = v56;
                  }
                  else
                  {
                    v38 = 0;
                  }

                  goto LABEL_64;
                }
                v50 = 0;
                v51 = v23;
                v54 = sub_100128400();
                IsLevelEnabled = _NRLogIsLevelEnabled(v54, 17);

                if (IsLevelEnabled)
                {
                  v26 = sub_100128400();
                  _NRLogWithArgs(v26, 17, "%s called with null nrUUID");
                  goto LABEL_74;
                }
              }
              else
              {
                v50 = v24;
                v51 = 0;
                v52 = sub_100128400();
                v53 = _NRLogIsLevelEnabled(v52, 17);

                if (v53)
                {
                  v26 = sub_100128400();
                  _NRLogWithArgs(v26, 17, "%s called with null serviceIdentifier");
LABEL_74:
                  v38 = 0;
                  v23 = v51;
                  v24 = v50;
LABEL_64:

LABEL_65:
                  if (v38)
                    objc_msgSend(v14, "setLocalIdentifier:", v38);

                  goto LABEL_37;
                }
              }
              v38 = 0;
              v23 = v51;
              v24 = v50;
              goto LABEL_65;
            }
LABEL_37:
            v39 = v5[16];
            goto LABEL_38;
          }
        }
        else if (!v12)
        {
          goto LABEL_37;
        }
        v39 = 0;
LABEL_38:
        v40 = v39;
        if ((objc_msgSend(v40, "allowsDeadPeerDetection") & 1) == 0)
        {
          objc_opt_self(NRLinkDirector);
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v41 = (id)qword_1001E4708;
          v42 = v41;
          if (!v41 || !v41[8])
          {
            if (qword_1001E4870 != -1)
              dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
            v46 = byte_1001E4868;

            if (!v46)
              goto LABEL_48;
            goto LABEL_45;
          }

        }
LABEL_45:
        v43 = v14;
        v44 = v43;
        if (v43)
        {
          objc_msgSend(v43, "setDeadPeerDetectionEnabled:", 1);
          objc_msgSend(v44, "setDeadPeerDetectionInterval:", 30);
          objc_msgSend(v44, "setDeadPeerDetectionRetryIntervalMilliseconds:", 3000);
          objc_msgSend(v44, "setDeadPeerDetectionMaxRetryCount:", 3);
        }
        else
        {
          v47 = sub_10010E0B8();
          v48 = _NRLogIsLevelEnabled(v47, 17);

          if (v48)
          {
            v49 = sub_10010E0B8();
            _NRLogWithArgs(v49, 17, "%s called with null sessionConfig", "NRLinkIKESessionConfigSetDPD");

          }
        }

LABEL_48:
        goto LABEL_49;
      }
      goto LABEL_76;
  }
  if (qword_1001E4980 != -1)
    dispatch_once(&qword_1001E4980, &stru_1001B7E98);
  if (!_NRLogIsLevelEnabled(qword_1001E4978, 17))
  {
    v14 = 0;
    goto LABEL_50;
  }
  if (qword_1001E4980 != -1)
    dispatch_once(&qword_1001E4980, &stru_1001B7E98);
  v8 = (id *)(id)qword_1001E4978;
  String = (id)NRDataProtectionClassCreateString(a3);
  _NRLogWithArgs(v8, 17, "Cannot copy IKE session config for %@", String);
  v14 = 0;
LABEL_49:

LABEL_50:
  return v14;
}

id sub_100112E3C()
{
  id v0;
  _BYTE *v1;
  int v2;
  id v3;
  id v4;
  char v6;

  v6 = 0;
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v0 = (id)qword_1001E4AD0;
  if (v0)
  {
    v1 = v0;
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v0 + 2));
    if (!v1[10])
    {
      v1[10] = 1;
      if (v1[8] == 4)
      {
        sub_10014A63C((uint64_t)v1);
        if (v1[9])
        {
          v1[8] = 3;
          sub_10014A8AC((uint64_t)v1);
        }
      }
    }
    v2 = v1[8] & 0xFD;

    if (v2 == 1)
      v6 = 0x80;
  }
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v6, 1);
  v4 = objc_msgSend(objc_alloc((Class)NEIKEv2PrivateNotify), "initWithNotifyStatus:notifyData:", 48701, v3);

  return v4;
}

BOOL sub_100112F4C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = v1;
  if (v1)
    v3 = (void *)v1[16];
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    if (v2)
      v5 = (void *)v2[16];
    else
      v5 = 0;
    v6 = v5;
    v7 = objc_msgSend(v6, "proxyCapability") == (id)1;

  }
  else
  {
    v7 = 1;
  }

  return v7;
}

id sub_100112FCC(void *a1, void *a2)
{
  id *v3;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  unsigned int port;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id *v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  unsigned int v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *i;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v56;
  int IsLevelEnabled;
  id v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  char *v65;
  id *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int16 v73;
  _BYTE v74[112];

  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v56 = sub_10010E0B8();
    IsLevelEnabled = _NRLogIsLevelEnabled(v56, 16);

    if (IsLevelEnabled)
    {
      v58 = sub_10010E0B8();
      _NRLogWithArgs(v58, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "NRLinkCopyProxyPrivateNotify", 1905);

    }
    v59 = _os_log_pack_size(12);
    v5 = (char *)&v63 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v60 = __error();
    v61 = _os_log_pack_fill(v5, v59, *v60, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v61 = 136446210;
    *(_QWORD *)(v61 + 4) = "NRLinkCopyProxyPrivateNotify";
    v62 = sub_10010E0B8();
    _NRLogAbortWithPack(v62, v5);
LABEL_49:
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    goto LABEL_4;
  }
  v5 = v4;
  if (!sub_1001315C8((uint64_t)v3))
  {
    port = 62742;
    goto LABEL_10;
  }
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    goto LABEL_49;
LABEL_4:
  v6 = (id)qword_1001E4708;
  v7 = v6;
  if (v6 && *((_QWORD *)v6 + 17))
    port = nw_masque_server_get_port();
  else
    port = 0;

LABEL_10:
  v72 = 0uLL;
  v73 = 0;
  if (!v5)
  {
    v71 = 0uLL;
    sub_10013453C(v3, &v71);
    v72 = v71;
    v73 = __rev16(port);
  }
  v9 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v72, 18);
  if (_os_feature_enabled_impl("Network", "shoes_udp_associate")
    && *((unsigned __int16 *)v3 + 14) >= 0x11u)
  {
    v10 = objc_alloc_init((Class)NSMutableData);
    NRTLVAdd(v10, 1, 0, 0);
    objc_msgSend(v9, "appendData:", v10);

  }
  if (sub_1001315C8((uint64_t)v3))
  {
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v11 = (id)qword_1001E4708;
    v12 = v11;
    if (v11)
      v13 = (void *)*((_QWORD *)v11 + 13);
    else
      v13 = 0;
    v14 = v13;

    if (objc_msgSend(v14, "length"))
    {
      v15 = objc_alloc_init((Class)NSMutableData);
      NRTLVAddData(v15, 2);
      objc_msgSend(v9, "appendData:", v15);
    }
    else
    {
      v16 = v3[4];
      v18 = v3;
      v19 = (void *)_NRCopyLogObjectForNRUUID(v16, v17);
      v20 = _NRLogIsLevelEnabled(v19, 17);

      v3 = v18;
      if (!v20)
      {
LABEL_25:

        goto LABEL_26;
      }
      v15 = v18[4];
      v22 = (void *)_NRCopyLogObjectForNRUUID(v15, v21);
      _NRLogWithArgs(v22, 17, "MASQUE proxyServerPublicKey is NULL");

      v3 = v18;
    }

    goto LABEL_25;
  }
LABEL_26:
  if (v5)
  {
    v23 = objc_alloc_init((Class)NSMutableData);
    v24 = sub_10010A268(v5, port, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    NRTLVAddData(v23, 3);
    objc_msgSend(v9, "appendData:", v23);

  }
  v26 = v3[16];
  v27 = objc_msgSend(v26, "hasPoliciesForProxyCriteria");

  if (v27)
  {
    v64 = v9;
    v65 = v5;
    v63 = objc_alloc_init((Class)NSMutableData);
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v66 = v3;
    v28 = v3[16];
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "proxyProviderCriteria"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "proxyUsageRules"));

    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v67, v74, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v68;
      do
      {
        for (i = 0; i != v32; i = (char *)i + 1)
        {
          if (*(_QWORD *)v68 != v33)
            objc_enumerationMutation(v30);
          v35 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i);
          v36 = objc_alloc_init((Class)NSMutableData);
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "matchResultAccountID"));
          v38 = objc_msgSend(v37, "length");

          if (v38)
          {
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "matchResultAccountID"));
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "dataUsingEncoding:", 4));

            v41 = sub_100003144((id *)[NRToken alloc], 1, 51, v40);
            v42 = sub_100003328((uint64_t)v41);
            NRTLVAddData(v36, 8);

          }
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "matchResultBundleID"));
          v44 = objc_msgSend(v43, "length");

          if (v44)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "matchResultBundleID"));
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "dataUsingEncoding:", 4));

            v47 = sub_100003144((id *)[NRToken alloc], 1, 52, v46);
            v48 = sub_100003328((uint64_t)v47);
            NRTLVAddData(v36, 8);

          }
          if (objc_msgSend(v36, "length"))
            objc_msgSend(v35, "addMatchToken:", v36);

        }
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v67, v74, 16);
      }
      while (v32);
    }

    v3 = v66;
    v49 = v66[16];
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "proxyProviderCriteria"));
    v51 = objc_msgSend(v50, "copySendData");

    v52 = objc_msgSend(v51, "length");
    v9 = v64;
    v53 = v63;
    if (v52)
    {
      NRTLVAddData(v63, 4);
      objc_msgSend(v9, "appendData:", v53);
    }

    v5 = v65;
  }
  v54 = objc_msgSend(objc_alloc((Class)NEIKEv2PrivateNotify), "initWithNotifyStatus:notifyData:", 50701, v9);

  return v54;
}

id sub_10011369C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  __objc2_prot *v6;
  id v12;
  char *v13;
  id v14;
  id v16;
  int v17;
  id v18;
  int *v19;
  uint64_t v20;
  id v21;
  id v22;
  int IsLevelEnabled;
  id v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;

  v12 = a1;
  v13 = a2;
  v14 = objc_msgSend(objc_alloc((Class)NEIPsecNexus), "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:", v12, v13, a3, a4, a5, a6);
  if (v14)
    goto LABEL_36;
  v6 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4980 != -1)
    goto LABEL_42;
  while (1)
  {
    if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
    {
      if (v6[33].inst_props != (__objc2_prop_list *)-1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying [NEIPsecNexus init]", "", "NRLinkIPsecNexusCreate", 2042);
    }
    v14 = objc_msgSend(objc_alloc((Class)NEIPsecNexus), "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:", v12, v13, a3, a4, a5, a6);
    if (!v14)
    {
      if (v6[33].inst_props != (__objc2_prop_list *)-1)
        dispatch_once(&qword_1001E4980, &stru_1001B7E98);
      if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
      {
        if (v6[33].inst_props != (__objc2_prop_list *)-1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying [NEIPsecNexus init]", "", "NRLinkIPsecNexusCreate", 2042);
      }
      v14 = objc_msgSend(objc_alloc((Class)NEIPsecNexus), "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:", v12, v13, a3, a4, a5, a6);
      if (!v14)
      {
        if (v6[33].inst_props != (__objc2_prop_list *)-1)
          dispatch_once(&qword_1001E4980, &stru_1001B7E98);
        if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
        {
          if (v6[33].inst_props != (__objc2_prop_list *)-1)
            dispatch_once(&qword_1001E4980, &stru_1001B7E98);
          _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying [NEIPsecNexus init]", "", "NRLinkIPsecNexusCreate", 2042);
        }
        v14 = objc_msgSend(objc_alloc((Class)NEIPsecNexus), "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:", v12, v13, a3, a4, a5, a6);
        if (!v14)
        {
          if (v6[33].inst_props != (__objc2_prop_list *)-1)
            dispatch_once(&qword_1001E4980, &stru_1001B7E98);
          if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
          {
            if (v6[33].inst_props != (__objc2_prop_list *)-1)
              dispatch_once(&qword_1001E4980, &stru_1001B7E98);
            _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying [NEIPsecNexus init]", "", "NRLinkIPsecNexusCreate", 2042);
          }
          v14 = objc_msgSend(objc_alloc((Class)NEIPsecNexus), "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:", v12, v13, a3, a4, a5, a6);
          if (!v14)
          {
            if (v6[33].inst_props != (__objc2_prop_list *)-1)
              dispatch_once(&qword_1001E4980, &stru_1001B7E98);
            if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
            {
              if (v6[33].inst_props != (__objc2_prop_list *)-1)
                dispatch_once(&qword_1001E4980, &stru_1001B7E98);
              _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying [NEIPsecNexus init]", "", "NRLinkIPsecNexusCreate", 2042);
            }
            v14 = objc_msgSend(objc_alloc((Class)NEIPsecNexus), "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:", v12, v13, a3, a4, a5, a6);
            if (!v14)
            {
              if (v6[33].inst_props != (__objc2_prop_list *)-1)
                dispatch_once(&qword_1001E4980, &stru_1001B7E98);
              if (_NRLogIsLevelEnabled(qword_1001E4978, 0))
              {
                if (v6[33].inst_props != (__objc2_prop_list *)-1)
                  dispatch_once(&qword_1001E4980, &stru_1001B7E98);
                _NRLogWithArgs(qword_1001E4978, 0, "%s%.30s:%-4d Retrying [NEIPsecNexus init]", "", "NRLinkIPsecNexusCreate", 2042);
              }
              v22 = sub_10010E0B8();
              IsLevelEnabled = _NRLogIsLevelEnabled(v22, 16);

              if (IsLevelEnabled)
              {
                v24 = sub_10010E0B8();
                _NRLogWithArgs(v24, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nexus) != ((void *)0)", "", "NRLinkIPsecNexusCreate", 2046);

              }
              v12 = (id)_os_log_pack_size(12);
              v13 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
              v25 = __error();
              v26 = _os_log_pack_fill(v13, v12, *v25, &_mh_execute_header, "%{public}s Assertion Failed: (nexus) != ((void *)0)");
              *(_DWORD *)v26 = 136446210;
              *(_QWORD *)(v26 + 4) = "NRLinkIPsecNexusCreate";
              goto LABEL_41;
            }
          }
        }
      }
    }
LABEL_36:
    if (objc_msgSend(v14, "virtualInterface"))
      break;
    v16 = sub_10010E0B8();
    v17 = _NRLogIsLevelEnabled(v16, 16);

    a6 = "NRLinkIPsecNexusCreate";
    if (v17)
    {
      v18 = sub_10010E0B8();
      _NRLogWithArgs(v18, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nexus.virtualInterface) != ((void *)0)", "", "NRLinkIPsecNexusCreate", 2047);

    }
    v12 = (id)_os_log_pack_size(12);
    v13 = (char *)&v27 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = __error();
    v20 = _os_log_pack_fill(v13, v12, *v19, &_mh_execute_header, "%{public}s Assertion Failed: (nexus.virtualInterface) != ((void *)0)");
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)(v20 + 4) = "NRLinkIPsecNexusCreate";
LABEL_41:
    v21 = sub_10010E0B8();
    _NRLogAbortWithPack(v21, v13);
LABEL_42:
    dispatch_once(&qword_1001E4980, &stru_1001B7E98);
  }

  return v14;
}

id *sub_100113EE0(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  id *v9;
  id *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id *v15;
  id v17;
  int IsLevelEnabled;
  id v19;
  id v20;
  int v21;
  id v22;
  int v23;
  id v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  objc_super v31;

  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!a1)
    goto LABEL_12;
  if (!v6)
  {
    v17 = sub_100114138();
    IsLevelEnabled = _NRLogIsLevelEnabled(v17, 17);

    if (IsLevelEnabled)
    {
      v19 = sub_100114138();
      _NRLogWithArgs(v19, 17, "%s called with null queue");
LABEL_11:

      v15 = 0;
      goto LABEL_6;
    }
LABEL_12:
    v15 = 0;
    goto LABEL_6;
  }
  if (!v7)
  {
    v20 = sub_100114138();
    v21 = _NRLogIsLevelEnabled(v20, 17);

    if (v21)
    {
      v19 = sub_100114138();
      _NRLogWithArgs(v19, 17, "%s called with null nrUUID");
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  v31.receiver = a1;
  v31.super_class = (Class)NRDevicePreferencesManager;
  v9 = (id *)objc_msgSendSuper2(&v31, "init");
  if (!v9)
  {
    v22 = sub_100114138();
    v23 = _NRLogIsLevelEnabled(v22, 16);

    if (v23)
    {
      v24 = sub_100114138();
      _NRLogWithArgs(v24, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDevicePreferencesManager initPrefManagerWithQueue:nrUUID:]", 54);

    }
    v25 = _os_log_pack_size(12);
    v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = __error();
    v28 = _os_log_pack_fill(v26, v25, *v27, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v28 = 136446210;
    *(_QWORD *)(v28 + 4) = "-[NRDevicePreferencesManager initPrefManagerWithQueue:nrUUID:]";
    v29 = sub_100114138();
    _NRLogAbortWithPack(v29, v26);
  }
  v10 = v9;
  objc_storeStrong(v9 + 3, a2);
  objc_storeStrong(v10 + 2, a3);
  v11 = objc_alloc_init((Class)NSMutableDictionary);
  v12 = v10[4];
  v10[4] = v11;

  v13 = objc_alloc_init((Class)NSMutableDictionary);
  v14 = v10[5];
  v10[5] = v13;

  a1 = v10;
  v15 = a1;
LABEL_6:

  return v15;
}

id sub_100114138()
{
  if (qword_1001E4990 != -1)
    dispatch_once(&qword_1001E4990, &stru_1001B7EB8);
  return (id)qword_1001E4988;
}

void sub_100114178(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4988;
  qword_1001E4988 = (uint64_t)v1;

}

void sub_1001141A8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  int IsLevelEnabled;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *j;
  void *v21;
  int v22;
  void *v23;
  id **v24;
  id **v25;
  void *v26;
  id *v27;
  id v28;
  id v29;
  NSObject *v30;
  __objc2_prot *v31;
  char *v32;
  char *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  unsigned int v43;
  id v44;
  _BOOL4 v45;
  id v46;
  int v47;
  id v48;
  int v49;
  id v50;
  id v51;
  id **v52;
  id *v53;
  id v54;
  id obj;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  _BYTE v69[128];
  _BYTE v70[128];

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_assert_queue_V2(v2);
  *(_BYTE *)(a1 + 8) = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v69, 16);
  if (v4)
  {
    v6 = v4;
    v7 = 0;
    v8 = *(_QWORD *)v61;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v61 != v8)
          objc_enumerationMutation(obj);
        v10 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
        if (v10)
        {
          if (objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i), "linkType") == 1)
          {
            if (!v7)
              v7 = objc_alloc_init((Class)NSMutableArray);
            objc_msgSend(v7, "addObject:", v10);
          }
        }
        else
        {
          v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v5);
          IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

          if (IsLevelEnabled)
          {
            v13 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v5);
            _NRLogWithArgs(v13, 16, "%s%.30s:%-4d Invalid preferences found", "", "-[NRDevicePreferencesManager applyLinkPreferences]", 225);

          }
        }
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v69, 16);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }

  v14 = objc_alloc_init((Class)NRBluetoothLinkPreferences);
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v15 = v7;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
  if (v16)
  {
    v18 = v16;
    v19 = *(_QWORD *)v57;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(_QWORD *)v57 != v19)
          objc_enumerationMutation(v15);
        if (*(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)j))
        {
          objc_msgSend(v14, "combinePreferences:");
        }
        else
        {
          v21 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v17);
          v22 = _NRLogIsLevelEnabled(v21, 17);

          if (v22)
          {
            v23 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v17);
            _NRLogWithArgs(v23, 17, "Invalid preferences found");

          }
        }
      }
      v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
    }
    while (v18);
  }

  *(_BYTE *)(a1 + 8) = objc_msgSend(v14, "isNotEmpty");
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v24 = (id **)(id)qword_1001E4708;
  v25 = v24;
  if (v24)
  {
    v26 = *(void **)(a1 + 16);
    v27 = v24[5];
    v28 = v14;
    v29 = v26;
    if (!v27)
    {
LABEL_76:

      goto LABEL_77;
    }
    v53 = v27;
    v30 = v27[3];
    dispatch_assert_queue_V2(v30);

    v31 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (!v29)
    {
      if (qword_1001E45C0 != -1)
        dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
      v46 = (id)qword_1001E45B8;
      v47 = _NRLogIsLevelEnabled(v46, 17);

      if (!v47)
        goto LABEL_76;
      if (qword_1001E45C0 != -1)
        dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
      v33 = (char *)(id)qword_1001E45B8;
      _NRLogWithArgs(v33, 17, "%s called with null nrUUID", "-[NRLinkManagerBluetooth setLinkRequirements:forNRUUID:]");
      goto LABEL_75;
    }
    v32 = sub_10012FFF4((uint64_t)NRDLocalDevice, v29);
    v33 = v32;
    if (v32)
    {
      v34 = *((id *)v32 + 5);
      if (v34)
      {
        if (qword_1001E45C0 != -1)
          dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
        if (_NRLogIsLevelEnabled(qword_1001E45B8, 0))
        {
          if (qword_1001E45C0 != -1)
            dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
          _NRLogWithArgs(qword_1001E45B8, 0, "%s%.30s:%-4d Requested BT link requirements for %@: %@", "", "-[NRLinkManagerBluetooth setLinkRequirements:forNRUUID:]", 687, v29, v28);
        }
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v54 = v53[7];
        v35 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
        if (v35)
        {
          v36 = v35;
          v37 = v34;
          v50 = v29;
          v51 = v28;
          v52 = v25;
          v38 = *(_QWORD *)v65;
LABEL_44:
          v39 = 0;
          while (1)
          {
            if (*(_QWORD *)v65 != v38)
              objc_enumerationMutation(v54);
            v40 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * v39);
            v41 = v40 ? *(void **)(v40 + 327) : 0;
            v42 = v41;
            v43 = objc_msgSend(v42, "isEqual:", v37);

            if (v43)
              break;
            if (v36 == (id)++v39)
            {
              v44 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v64, v70, 16);
              v36 = v44;
              if (!v44)
              {
                v45 = 0;
                goto LABEL_56;
              }
              goto LABEL_44;
            }
          }
          v45 = objc_msgSend((id)v40, "state") == 8;
LABEL_56:
          v28 = v51;
          v25 = v52;
          v29 = v50;
          v34 = v37;
          v31 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
        }
        else
        {
          v45 = 0;
        }

        if ((objc_msgSend(v28, "isNotEmpty") & 1) == 0)
        {

          v28 = 0;
          v45 = 1;
        }
        objc_msgSend(v53[14], "setObject:forKeyedSubscript:", v28, v34);
        if (v45)
        {
          sub_10002D508(v53, v28, v34);
        }
        else
        {
          if (v31[20].class_meths != (__objc2_meth_list *)-1)
            dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
          if (_NRLogIsLevelEnabled(qword_1001E45B8, 0))
          {
            if (v31[20].class_meths != (__objc2_meth_list *)-1)
              dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
            _NRLogWithArgs(qword_1001E45B8, 0, "%s%.30s:%-4d Deferring applying new BT link requirements until we have an active link");
          }
        }
      }
      else
      {
        if (qword_1001E45C0 != -1)
          dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
        if (_NRLogIsLevelEnabled(qword_1001E45B8, 0))
        {
          if (qword_1001E45C0 != -1)
            dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
          _NRLogWithArgs(qword_1001E45B8, 0, "%s%.30s:%-4d Ignoring setting BT link requirements for %@", "", "-[NRLinkManagerBluetooth setLinkRequirements:forNRUUID:]", 683, v33);
        }
      }
    }
    else
    {
      if (qword_1001E45C0 != -1)
        dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
      v48 = (id)qword_1001E45B8;
      v49 = _NRLogIsLevelEnabled(v48, 17);

      if (!v49)
        goto LABEL_75;
      if (qword_1001E45C0 != -1)
        dispatch_once(&qword_1001E45C0, &stru_1001B64E0);
      v34 = (id)qword_1001E45B8;
      _NRLogWithArgs(v34, 17, "%s called with null localDevice");
    }

LABEL_75:
    goto LABEL_76;
  }
LABEL_77:

}

void sub_100114958(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_assert_queue_V2(v2);
  v3 = objc_alloc_init((Class)NSMutableSet);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allValues"));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v8), "allObjects"));
        objc_msgSend(v3, "addObjectsFromArray:", v9);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v6);
  }

  v10 = (id *)(a1 + 48);
  if ((objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 48)) & 1) == 0)
  {
    v11 = objc_alloc((Class)NSString);
    v12 = *(id *)(a1 + 48);
    v13 = (void *)((uint64_t (*)(void))_NRCopyPolicyTrafficClassifiersDescription)();
    v14 = (void *)_NRCopyPolicyTrafficClassifiersDescription(v3);

    v15 = objc_msgSend(v11, "initWithFormat:", CFSTR("%@ to %@"), v13, v14);
    v16 = *(id *)(a1 + 16);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "UUIDString"));
    sub_100121E18(v16, 13001, v17, v15);

    objc_storeStrong(v10, v3);
  }

}

void sub_100114B48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  int IsLevelEnabled;
  _QWORD v8[2];
  _QWORD v9[2];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v8[0] = CFSTR("client");
      v8[1] = CFSTR("type");
      v9[0] = v3;
      v9[1] = &off_1001C48E8;
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
      sub_100107BA4(CFSTR("NetworkRelay BT Link Assertion"), v5);
    }
    else
    {
      v6 = sub_100114138();
      IsLevelEnabled = _NRLogIsLevelEnabled(v6, 17);

      if (!IsLevelEnabled)
        goto LABEL_5;
      v5 = sub_100114138();
      _NRLogWithArgs(v5, 17, "%s called with null clientName", "-[NRDevicePreferencesManager addedClientForLinkPreferences:]");
    }

  }
LABEL_5:

}

void sub_100114C4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  int IsLevelEnabled;
  _QWORD v8[2];
  _QWORD v9[2];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v8[0] = CFSTR("client");
      v8[1] = CFSTR("type");
      v9[0] = v3;
      v9[1] = &off_1001C4900;
      v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
      sub_100107BA4(CFSTR("NetworkRelay BT Link Assertion"), v5);
    }
    else
    {
      v6 = sub_100114138();
      IsLevelEnabled = _NRLogIsLevelEnabled(v6, 17);

      if (!IsLevelEnabled)
        goto LABEL_5;
      v5 = sub_100114138();
      _NRLogWithArgs(v5, 17, "%s called with null clientName", "-[NRDevicePreferencesManager removedClientForLinkPreferences:]");
    }

  }
LABEL_5:

}

void sub_100114D50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v5);
    IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

    if (IsLevelEnabled)
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v9);
      _NRLogWithArgs(v10, 0, "%s%.30s:%-4d Setting link preferences for %@ : %@", "", "-[NRDevicePreferencesManager setLinkPreferences:forIdentifier:]", 131, v6, v11);

    }
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, v6);
    sub_1001141A8(a1);
  }

}

void sub_100114E1C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  if (a1 && objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v3);
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 0);

    if (IsLevelEnabled)
    {
      v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 16), v6);
      _NRLogWithArgs(v7, 0, "%s%.30s:%-4d Removing preferences for %@", "", "-[NRDevicePreferencesManager removeLinkPreferencesForIdentifier:]", 143, v8);

    }
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", 0, v8);
    sub_1001141A8(a1);
  }

}

id sub_100114EE0(void *a1)
{
  _xpc_connection_s *v1;
  void *context;
  uint64_t pid;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  const char *v11;
  char *v12;
  id v13;
  id v15;
  int v16;
  const char *v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int IsLevelEnabled;
  id v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  id v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;

  v1 = a1;
  context = xpc_connection_get_context(v1);
  if (!context)
  {
    pid = xpc_connection_get_pid(v1);
    v4 = sub_100109ADC(pid, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v6 = objc_alloc((Class)NSString);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
    v8 = objc_msgSend(v6, "initWithFormat:", CFSTR("%@%s%@"), v4, "-", v7);

    v9 = v8;
    if (v9)
    {
      v10 = v9;
      v11 = (const char *)objc_msgSend(v9, "UTF8String");
      if (!v11)
      {
        v23 = sub_100114138();
        IsLevelEnabled = _NRLogIsLevelEnabled(v23, 16);

        if (IsLevelEnabled)
        {
          v25 = sub_100114138();
          _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: strict_strdup called with NULL string", "", "strict_strdup", 195);

        }
        v26 = _os_log_pack_size(12);
        v20 = (char *)&v35 - ((__chkstk_darwin(v26) + 15) & 0xFFFFFFFFFFFFFFF0);
        v27 = __error();
        v28 = _os_log_pack_fill(v20, v26, *v27, &_mh_execute_header, "%{public}s strict_strdup called with NULL string");
        *(_DWORD *)v28 = 136446210;
        *(_QWORD *)(v28 + 4) = "strict_strdup";
LABEL_17:
        v34 = sub_100114138();
        _NRLogAbortWithPack(v34, v20);
      }
      v12 = strdup(v11);
      if (v12)
      {
        context = v12;

        xpc_connection_set_context(v1, context);
        xpc_connection_set_finalizer_f(v1, (xpc_finalizer_t)sub_100115288);

        goto LABEL_6;
      }
      v29 = sub_100114138();
      v30 = _NRLogIsLevelEnabled(v29, 16);

      v17 = "strict_strdup";
      if (v30)
      {
        v31 = sub_100114138();
        _NRLogWithArgs(v31, 16, "%s%.30s:%-4d ABORTING: strdup() failed", "", "strict_strdup", 201);

      }
      v32 = _os_log_pack_size(12);
      v20 = (char *)&v35 - ((__chkstk_darwin(v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      v33 = *__error();
      v22 = _os_log_pack_fill(v20, v32, v33, &_mh_execute_header, "%{public}s strdup() failed");
    }
    else
    {
      v15 = sub_100114138();
      v16 = _NRLogIsLevelEnabled(v15, 16);

      v17 = "nrStrDupFromNSString";
      if (v16)
      {
        v18 = sub_100114138();
        _NRLogWithArgs(v18, 16, "%s%.30s:%-4d ABORTING: nrStrDupFromNSString called with NULL", "", "nrStrDupFromNSString", 45);

      }
      v19 = _os_log_pack_size(12);
      v20 = (char *)&v35 - ((__chkstk_darwin(v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      v21 = *__error();
      v22 = _os_log_pack_fill(v20, v19, v21, &_mh_execute_header, "%{public}s nrStrDupFromNSString called with NULL");
    }
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = v17;
    goto LABEL_17;
  }
LABEL_6:
  v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", context);

  return v13;
}

void sub_100115288(void *a1)
{
  if (a1)
    free(a1);
}

id sub_100115594()
{
  if (qword_1001E49B8 != -1)
    dispatch_once(&qword_1001E49B8, &stru_1001B8360);
  return (id)qword_1001E49B0;
}

void sub_1001155D4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E49B0;
  qword_1001E49B0 = (uint64_t)v1;

}

void sub_1001163E8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || !*(_BYTE *)(v2 + 21))
  {
    v3 = sub_1001164D4(v2, *(void **)(a1 + 40));
    if (v3)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v13 = v3;
      v6 = v5 ? *(_QWORD *)(v5 + 24) : 0;
      v7 = (void *)_NRCopyLogObjectForNRUUID(v6, v4);
      IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

      v3 = v13;
      if (IsLevelEnabled)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v12 = (void *)_NRCopyLogObjectForNRUUID(v11, v9);
        _NRLogWithArgs(v12, 0, "%s%.30s:%-4d NAN: data session request started for %@", "", "-[NRDiscoveryClient dataSessionRequestStarted:]_block_invoke", 2422, v13);

        v3 = v13;
      }
    }

  }
}

id sub_1001164D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "allValues", 0));
    v5 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v7 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v6);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "initiatorDataSession"));

          if (v10 == v4)
          {
            v5 = v9;
            goto LABEL_13;
          }
        }
        v5 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_13:

  }
  return v5;
}

void sub_10011660C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || !*(_BYTE *)(v2 + 21))
  {
    v3 = sub_1001164D4(v2, *(void **)(a1 + 40));
    if (v3)
    {
      v13 = v3;
      objc_msgSend(v3, "setLocalInterfaceIndex:", 0);
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
        v6 = *(_QWORD *)(v5 + 24);
      else
        v6 = 0;
      v7 = (void *)_NRCopyLogObjectForNRUUID(v6, v4);
      IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

      if (IsLevelEnabled)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v12 = (void *)_NRCopyLogObjectForNRUUID(v11, v9);
        _NRLogWithArgs(v12, 0, "%s%.30s:%-4d NAN: data session session terminated for %@ with reason %zd", "", "-[NRDiscoveryClient dataSession:terminatedWithReason:]_block_invoke", 2408, v13, *(_QWORD *)(a1 + 48));

      }
      sub_100116710(*(_QWORD *)(a1 + 32), v13);
      v3 = v13;
    }

  }
}

void sub_100116710(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  if (a1 && (objc_msgSend(v6, "hasActiveDataSession") & 1) == 0)
  {
    v3 = objc_alloc((Class)WiFiAwareDataSession);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "initiatorDiscoveryResult"));
    v5 = objc_msgSend(v3, "initWithDiscoveryResult:serviceType:serviceSpecificInfo:", v4, 1, 0);

    objc_msgSend(v5, "setDelegate:", a1);
    objc_msgSend(v5, "start");
    objc_msgSend(v6, "setInitiatorDataSession:", v5);

  }
}

void sub_1001167B8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || !*(_BYTE *)(v2 + 21))
  {
    v3 = (_QWORD *)(a1 + 40);
    v4 = sub_1001164D4(v2, *(void **)(a1 + 40));
    v14 = v4;
    if (v4)
    {
      objc_msgSend(v4, "setLocalInterfaceIndex:", objc_msgSend(*(id *)(a1 + 40), "localInterfaceIndex"));
      sub_1001168D0(*(_QWORD *)(a1 + 32), v14);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
        v6 = *(_QWORD *)(v5 + 24);
      else
        v6 = 0;
      v7 = (void *)_NRCopyLogObjectForNRUUID(v6, 0);
      IsLevelEnabled = _NRLogIsLevelEnabled(v7, 0);

      v9 = 0;
      if (!IsLevelEnabled)
        goto LABEL_12;
      v10 = *(_QWORD **)(a1 + 32);
      if (v10)
        v10 = (_QWORD *)v10[3];
      v11 = v10;
      v13 = (void *)_NRCopyLogObjectForNRUUID(v11, v12);
      _NRLogWithArgs(v13, 0, "%s%.30s:%-4d NAN: ignoring data session started as there is no peer for session %@", "", "-[NRDiscoveryClient dataSession:confirmedForPeerDataAddress:serviceSpecificInfo:]_block_invoke", 2391, *v3);

    }
    v9 = v14;
LABEL_12:

  }
}

void sub_1001168D0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  NRDeviceEndpoint *v23;
  NRDeviceEndpoint *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  NSUUID *v28;
  NSUUID *v29;
  NSUUID *localIDSDeviceID;
  id v31;
  void *v32;
  id v33;
  id v34;
  NSUUID *v35;
  void *v36;
  nw_endpoint_t v37;
  void *v38;
  sockaddr *v39;
  sockaddr v40;
  nw_endpoint_t v41;
  NSObject *v42;
  NSString *v43;
  void *v44;
  sockaddr address;
  uint64_t v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[5];
  _BYTE v53[128];

  v4 = a2;
  if (!a1)
    goto LABEL_41;
  v5 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v3);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

  if (IsLevelEnabled)
  {
    v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v7);
    _NRLogWithArgs(v8, 0, "%s%.30s:%-4d NAN: data session started with peer %@", "", "-[NRDiscoveryClient handleDataSessionStarted:]", 2429, v4);

  }
  if (objc_msgSend(v4, "isInitiator"))
  {
    v9 = *(void **)(a1 + 240);
    v10 = sub_100116D84(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "initiatorDiscoveryResult"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "publisherAddress"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "initiatorDiscoveryResult"));
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_100116F94;
    v52[3] = &unk_1001B8340;
    v52[4] = a1;
    objc_msgSend(v9, "sendMessage:toPeerAddress:withInstanceID:completionHandler:", v10, v12, objc_msgSend(v13, "publishID"), v52);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceName"));
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v15 = *(id *)(a1 + 96);
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v49;
    while (2)
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v49 != v18)
          objc_enumerationMutation(v15);
        v20 = *(_QWORD **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)v19);
        if (v20)
          v21 = (void *)v20[2];
        else
          v21 = 0;
        if ((objc_msgSend(v21, "isEqualToString:", v14) & 1) != 0)
        {
          v23 = v20;

          if (v20)
            goto LABEL_35;
          goto LABEL_20;
        }
        v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      v22 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
      v17 = v22;
      if (v22)
        continue;
      break;
    }
  }

LABEL_20:
  v24 = objc_alloc_init(NRDeviceEndpoint);
  v23 = v24;
  if (v24)
  {
    v24->_type = *(_BYTE *)(a1 + 18);
    objc_storeStrong((id *)&v24->_serviceName, v14);
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteIDSDeviceID"));

  if (v25)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteIDSDeviceID"));
    if (v23)
      objc_storeStrong((id *)&v23->_remoteIDSDeviceID, v26);

    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v27 = (id)qword_1001E4708;
    v28 = (NSUUID *)sub_1000AFE70(v27, 0);
    v29 = v28;
    if (v23)
    {
      v29 = v28;
      localIDSDeviceID = (NSUUID *)v23->_localIDSDeviceID;
      v23->_localIDSDeviceID = (NSString *)&v29->super.isa;
LABEL_33:

    }
  }
  else
  {
    v31 = objc_alloc((Class)NSUUID);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceName"));
    v33 = objc_msgSend(v31, "initWithUUIDString:", v32);
    if (v23)
      objc_storeStrong((id *)&v23->_peerToken, v33);

    v34 = objc_alloc((Class)NSUUID);
    v27 = *(id *)(a1 + 112);
    v35 = (NSUUID *)objc_msgSend(v34, "initWithUUIDString:", v27);
    v29 = v35;
    if (v23)
    {
      v29 = v35;
      localIDSDeviceID = v23->_localToken;
      v23->_localToken = v29;
      goto LABEL_33;
    }
  }

  objc_msgSend(*(id *)(a1 + 96), "addObject:", v23);
LABEL_35:
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "peerEndpoint"));
  v37 = (nw_endpoint_t)objc_msgSend(v36, "copyCEndpoint");

  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "peerEndpoint"));
  v39 = (sockaddr *)objc_msgSend(v38, "address");

  if (v39->sa_family == 30
    && !*(_DWORD *)&v39[1].sa_data[6]
    && v39->sa_data[6] == 254
    && (v39->sa_data[7] & 0xC0) == 0x80)
  {
    v40 = *v39;
    v46 = *(_QWORD *)&v39[1].sa_len;
    address = v40;
    v47 = objc_msgSend(v4, "localInterfaceIndex");
    v41 = nw_endpoint_create_address(&address);

    v37 = v41;
  }
  v42 = nw_interface_create_with_index(objc_msgSend(v4, "localInterfaceIndex"));
  nw_endpoint_set_interface(v37, v42);
  v43 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nw_interface_get_name(v42));
  v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
  sub_100117054(a1, v37, v14, v44);

LABEL_41:
}

id sub_100116D84(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  int IsLevelEnabled;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v23;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = *(id *)(a1 + 112);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrSN"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, v4);

  v5 = *(id *)(a1 + 120);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrAT"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, v6);

  v7 = *(void **)(a1 + 128);
  if (v7)
  {
    v8 = v7;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrD"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, v9);

  }
  v10 = *(void **)(a1 + 136);
  if (v10)
  {
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrN"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, v12);

  }
  v23 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v2, 200, 0, &v23));
  v15 = v23;
  if (v15)
  {
    v16 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v14);
    IsLevelEnabled = _NRLogIsLevelEnabled(v16, 16);

    if (IsLevelEnabled)
    {
      v18 = *(id *)(a1 + 24);
      v20 = (void *)_NRCopyLogObjectForNRUUID(v18, v19);
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d failed to archive publish dictionary %@", "", "-[NRDiscoveryClient copyNANServiceSpecificInfo]", 2039, v15);

    }
    v21 = 0;
  }
  else
  {
    v21 = v13;
  }

  return v21;
}

void sub_100116F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(_QWORD *)(v4 + 24);
  else
    v5 = 0;
  v6 = (void *)_NRCopyLogObjectForNRUUID(v5, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 0);

  if (IsLevelEnabled)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      v10 = *(_QWORD *)(v9 + 24);
    else
      v10 = 0;
    v11 = (id)_NRCopyLogObjectForNRUUID(v10, v8);
    _NRLogWithArgs(v11, 0, "%s%.30s:%-4d NAN: sent message to publisher w/ error %zd", "", "-[NRDiscoveryClient handleDataSessionStarted:]_block_invoke", 2436, a2);

  }
}

void sub_100117054(uint64_t a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  _BYTE *v19;
  void *v20;
  int IsLevelEnabled;
  uint64_t v22;
  void *v23;
  id v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  void *v36;
  char v37;
  NSObject *v38;
  _BYTE *v39;
  _QWORD block[5];
  id v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
    goto LABEL_30;
  if (nw_endpoint_get_type(v7) != nw_endpoint_type_address)
  {
    v20 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v10);
    IsLevelEnabled = _NRLogIsLevelEnabled(v20, 16);

    if (IsLevelEnabled)
    {
      v23 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v22);
      _NRLogWithArgs(v23, 16, "%s%.30s:%-4d invalid discovered endpoint type", "", "-[NRDiscoveryClient discoveredPeerDeviceEndpoint:serviceName:interfaceName:]", 1385);

    }
    goto LABEL_30;
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v11 = *(id *)(a1 + 96);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (!v12)
    goto LABEL_15;
  v13 = v12;
  v14 = *(_QWORD *)v44;
LABEL_5:
  v15 = 0;
  while (1)
  {
    if (*(_QWORD *)v44 != v14)
      objc_enumerationMutation(v11);
    v16 = *(_QWORD **)(*((_QWORD *)&v43 + 1) + 8 * v15);
    v17 = v16 ? (void *)v16[2] : 0;
    if ((objc_msgSend(v17, "isEqualToString:", v8) & 1) != 0)
      break;
    if (v13 == (id)++v15)
    {
      v18 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      v13 = v18;
      if (!v18)
      {
LABEL_15:
        v19 = v11;
        goto LABEL_29;
      }
      goto LABEL_5;
    }
  }
  v19 = v16;

  if (!v16)
    goto LABEL_30;
  if (!v9)
  {
    v33 = a1;
    v34 = v19;
    v35 = v7;
    v36 = 0;
LABEL_28:
    sub_100117388(v33, v34, v35, v36);
    v37 = v19[9];
    v38 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10011767C;
    block[3] = &unk_1001B80F8;
    v42 = v37;
    block[4] = a1;
    v41 = v19;
    v39 = v19;
    dispatch_async(v38, block);
    v19[9] = 1;

    v19 = v39;
    goto LABEL_29;
  }
  v24 = sub_10010AB24(v9, 0, 0, 0);
  v25 = nw_endpoint_copy_address_string(v7);
  if (!v25)
  {
LABEL_27:

    v33 = a1;
    v34 = v19;
    v35 = v7;
    v36 = v9;
    goto LABEL_28;
  }
  v26 = v25;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25));
  free(v26);
  if (!objc_msgSend(v24, "containsObject:", v27))
  {

    goto LABEL_27;
  }
  v29 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v28);
  v30 = _NRLogIsLevelEnabled(v29, 0);

  if (v30)
  {
    v32 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v31);
    _NRLogWithArgs(v32, 0, "%s%.30s:%-4d ignoring local endpoint %@", "", "-[NRDiscoveryClient discoveredPeerDeviceEndpoint:serviceName:interfaceName:]", 1408, v7);

  }
  objc_msgSend(*(id *)(a1 + 96), "removeObject:", v19);

LABEL_29:
LABEL_30:

}

void sub_100117388(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  int IsLevelEnabled;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  NSString *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = nw_endpoint_copy_interface(v8);
  v11 = sub_1001176B8(v10);
  if ((_DWORD)v11)
  {
    v13 = v11;
LABEL_3:
    v14 = v7 + 15;
    if (!v7[15])
    {
      v15 = objc_alloc_init((Class)NSMutableDictionary);
      objc_storeStrong(v7 + 15, v15);

    }
    v33 = v9;
    if (!v7[16])
    {
      v16 = objc_alloc_init((Class)NSMutableDictionary);
      objc_storeStrong(v7 + 16, v16);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithCEndpoint:](NWAddressEndpoint, "endpointWithCEndpoint:", v8));
    v18 = *v14;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v13));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v19));

    if (v20)
    {
      v21 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v20);
      objc_msgSend(v21, "addObject:", v17);

    }
    else
    {
      v34 = v17;
      v21 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v34, 1));
    }
    v27 = *v14;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v13));
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v21, v28);

    v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nw_interface_get_name(v10));
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = v7[16];
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v13));
    objc_msgSend(v31, "setObject:forKeyedSubscript:", v30, v32);

    v9 = v33;
    goto LABEL_15;
  }
  if (v9)
  {
    v22 = nw_interface_create_with_name(objc_msgSend(v9, "UTF8String"));

    v13 = sub_1001176B8(v22);
    v10 = v22;
    if ((_DWORD)v13)
      goto LABEL_3;
  }
  v23 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v12);
  IsLevelEnabled = _NRLogIsLevelEnabled(v23, 16);

  if (IsLevelEnabled)
  {
    v26 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v25);
    _NRLogWithArgs(v26, 16, "%s%.30s:%-4d invalid link type for endpoint type", "", "-[NRDiscoveryClient updateDeviceEndpoint:withNWEndpoint:interfaceName:]", 1314);

  }
LABEL_15:

}

uint64_t sub_10011767C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(result + 48))
  {
    if (!v1)
      return result;
    v2 = *(_QWORD *)(v1 + 88);
    if (!v2)
      return result;
    return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(result + 40));
  }
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 72);
    if (v2)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(result + 40));
  }
  return result;
}

uint64_t sub_1001176B8(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  nw_interface_type_t type;
  int subtype;
  uint64_t v5;
  int v6;
  const char *name;
  const char *v8;
  int v9;
  int v11;
  unsigned int v12;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    type = nw_interface_get_type(v1);
    subtype = nw_interface_get_subtype(v2);
    if (type == nw_interface_type_wired)
    {
      v5 = 4;
    }
    else
    {
      v6 = subtype;
      name = nw_interface_get_name(v2);
      if (!strcmp("nan0", name))
      {
        v5 = 6;
      }
      else
      {
        v8 = nw_interface_get_name(v2);
        v9 = strcmp("ir0", v8);
        if (type == nw_interface_type_wifi || v6 == 1001)
          v11 = 2;
        else
          v11 = 0;
        if (v6 == 1002)
          v12 = 5;
        else
          v12 = v11;
        if (v9)
          v5 = v12;
        else
          v5 = 7;
      }
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_100117784(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int IsLevelEnabled;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || !*(_BYTE *)(v2 + 21))
  {
    v3 = sub_1001164D4(v2, *(void **)(a1 + 40));
    if (v3)
    {
      v13 = v3;
      objc_msgSend(v3, "setLocalInterfaceIndex:", 0);
      v5 = *(_QWORD *)(a1 + 32);
      v6 = v5 ? *(_QWORD *)(v5 + 24) : 0;
      v7 = (void *)_NRCopyLogObjectForNRUUID(v6, v4);
      IsLevelEnabled = _NRLogIsLevelEnabled(v7, 16);

      v3 = v13;
      if (IsLevelEnabled)
      {
        v10 = *(_QWORD *)(a1 + 32);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v12 = (void *)_NRCopyLogObjectForNRUUID(v11, v9);
        _NRLogWithArgs(v12, 16, "%s%.30s:%-4d NAN: data session session request failed for %@ with error %zd", "", "-[NRDiscoveryClient dataSession:failedToStartWithError:]_block_invoke", 2377, v13, *(_QWORD *)(a1 + 48));

        v3 = v13;
      }
    }

  }
}

void sub_100117880(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  NRDNANPeer *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  int v20;
  NSString *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t initiatorDiscoveryResult;
  id v30;
  WiFiAwarePublisherDataSessionHandle *v31;
  void *v32;
  id v33;
  void *v34;
  int v35;
  NSString *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  NRDNANPeer *v45;
  id v46;
  uint64_t v47;
  void *i;
  void *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _QWORD *v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[4];
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  id v87;
  id location;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t);
  void (*v93)(uint64_t);
  id v94;
  _QWORD v95[5];
  id v96;
  id v97;
  NSString *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char v103;
  id v104;
  _BYTE v105[128];

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (!*(_BYTE *)(v3 + 21) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(v3 + 240))
    {
      v4 = *(_QWORD *)(v3 + 24);
      goto LABEL_5;
    }
  }
  else if (!*(_QWORD *)(a1 + 40))
  {
    v4 = 0;
LABEL_5:
    v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

    if (IsLevelEnabled)
    {
      v7 = *(_QWORD **)(a1 + 32);
      if (v7)
        v7 = (_QWORD *)v7[3];
      v8 = v7;
      v10 = (void *)_NRCopyLogObjectForNRUUID(v8, v9);
      _NRLogWithArgs(v10, 0, "%s%.30s:%-4d NAN: subscriber received discovery result %@", "", "-[NRDiscoveryClient subscriber:receivedDiscoveryResult:]_block_invoke", 2289, *(_QWORD *)(a1 + 48));

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "serviceSpecificInfo"));
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "blob"));

    v12 = v78;
    if (!v78)
      goto LABEL_71;
    v13 = *(NRDNANPeer **)(a1 + 32);
    v14 = v78;
    v15 = v14;
    if (!v13)
    {

LABEL_70:
      v12 = v78;
LABEL_71:

      return;
    }
    v104 = 0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v14, 0, 0, &v104));
    v18 = v104;
    if (v18)
    {
      v19 = (void *)_NRCopyLogObjectForNRUUID(v13->_serviceName, v17);
      v20 = _NRLogIsLevelEnabled(v19, 16);

      if (!v20)
      {
        v13 = 0;
        goto LABEL_30;
      }
      v21 = v13->_serviceName;
      v23 = (id)_NRCopyLogObjectForNRUUID(v21, v22);
      _NRLogWithArgs(v23, 16, "%s%.30s:%-4d unarchive error %@", "", "-[NRDiscoveryClient processDiscoveredNANPeer:]", 1897, v18);
    }
    else
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrSN"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v24));

      if (v25)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrN"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v27));

        v100 = 0;
        v101 = &v100;
        v102 = 0x2020000000;
        v103 = 0;
        v95[0] = _NSConcreteStackBlock;
        v95[1] = 3221225472;
        v95[2] = sub_100118240;
        v95[3] = &unk_1001B8250;
        v95[4] = v13;
        v96 = v16;
        v23 = v25;
        v97 = v23;
        v21 = v28;
        v98 = v21;
        v99 = &v100;
        v77 = objc_retainBlock(v95);
        v89 = 0;
        v90 = &v89;
        v91 = 0x3032000000;
        v92 = sub_100118674;
        v93 = sub_100118684;
        v94 = 0;
        initiatorDiscoveryResult = (unint64_t)v13[3]._initiatorDiscoveryResult;
        if (initiatorDiscoveryResult <= 8 && ((1 << initiatorDiscoveryResult) & 0x106) != 0)
        {
          v30 = *(id *)&v13[2]._isInitiator;
          v31 = v13[2]._responderDataSession;
          v32 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiAwarePublisherDataSessionHandle dataUsingEncoding:](v31, "dataUsingEncoding:", 4));
          v33 = sub_10010B750(v30, v21, v32);

          ((void (*)(_QWORD *, id, _QWORD))v77[2])(v77, v33, 0);
        }
        else
        {
          objc_initWeak(&location, v13);
          v83[0] = _NSConcreteStackBlock;
          v83[1] = 3221225472;
          v83[2] = sub_10011868C;
          v83[3] = &unk_1001B8278;
          objc_copyWeak(&v87, &location);
          v84 = v77;
          v85 = &v100;
          v86 = &v89;
          sub_100118994((uint64_t)v13, 28671, v83);

          objc_destroyWeak(&v87);
          objc_destroyWeak(&location);
        }
        if (*((_BYTE *)v101 + 24))
        {
          v13 = objc_alloc_init(NRDNANPeer);
          -[NRDNANPeer setRemoteIDSDeviceID:](v13, "setRemoteIDSDeviceID:", v90[5]);
          -[NRDNANPeer setServiceName:](v13, "setServiceName:", v23);
        }
        else
        {
          v13 = 0;
        }
        _Block_object_dispose(&v89, 8);

        _Block_object_dispose(&v100, 8);
        goto LABEL_28;
      }
      v34 = (void *)_NRCopyLogObjectForNRUUID(v13->_serviceName, v26);
      v35 = _NRLogIsLevelEnabled(v34, 16);

      if (!v35)
      {
        v23 = 0;
        v13 = 0;
LABEL_29:

LABEL_30:
        if (v13)
        {
          v38 = *(_QWORD *)(a1 + 32);
          if (!v38 || !*(_QWORD *)(v38 + 248))
          {
            v39 = objc_alloc_init((Class)NSMutableDictionary);
            v40 = *(_QWORD *)(a1 + 32);
            if (v40)
              objc_storeStrong((id *)(v40 + 248), v39);

            v38 = *(_QWORD *)(a1 + 32);
          }
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "publisherAddress"));
          v42 = (void *)sub_100118120(v38, v41);

          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v43 = *(_QWORD *)(a1 + 32);
          if (v43)
            v44 = *(void **)(v43 + 248);
          else
            v44 = 0;
          v45 = (NRDNANPeer *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "allValues"));
          v46 = -[NRDNANPeer countByEnumeratingWithState:objects:count:](v45, "countByEnumeratingWithState:objects:count:", &v79, v105, 16);
          if (v46)
          {
            v47 = *(_QWORD *)v80;
            while (2)
            {
              for (i = 0; i != v46; i = (char *)i + 1)
              {
                if (*(_QWORD *)v80 != v47)
                  objc_enumerationMutation(v45);
                v49 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)i);
                v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "peerEndpoint"));
                if (objc_msgSend(v50, "isEqual:", v42)
                  && (v51 = objc_msgSend(v49, "peerInstanceID"),
                      v51 == objc_msgSend(*(id *)(a1 + 48), "publishID")))
                {
                  v52 = objc_msgSend(v49, "hasActiveDataSession");

                  if (v52)
                  {
                    v69 = *(_QWORD *)(a1 + 32);
                    if (v69)
                      v70 = *(_QWORD *)(v69 + 24);
                    else
                      v70 = 0;
                    v71 = (void *)_NRCopyLogObjectForNRUUID(v70, v53);
                    v72 = _NRLogIsLevelEnabled(v71, 0);

                    if (v72)
                    {
                      v74 = *(_QWORD *)(a1 + 32);
                      if (v74)
                        v75 = *(_QWORD *)(v74 + 24);
                      else
                        v75 = 0;
                      v76 = (void *)_NRCopyLogObjectForNRUUID(v75, v73);
                      _NRLogWithArgs(v76, 0, "%s%.30s:%-4d NAN: ignoring same discovery result", "", "-[NRDiscoveryClient subscriber:receivedDiscoveryResult:]_block_invoke", 2304);

                    }
                    goto LABEL_69;
                  }
                }
                else
                {

                }
              }
              v46 = -[NRDNANPeer countByEnumeratingWithState:objects:count:](v45, "countByEnumeratingWithState:objects:count:", &v79, v105, 16);
              if (v46)
                continue;
              break;
            }
          }

          v54 = *(_QWORD *)(a1 + 32);
          if (v54)
            v55 = *(void **)(v54 + 248);
          else
            v55 = 0;
          v45 = (NRDNANPeer *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", v42));
          if (!v45)
            v45 = objc_alloc_init(NRDNANPeer);
          v56 = (void *)objc_claimAutoreleasedReturnValue(-[NRDNANPeer serviceName](v13, "serviceName"));
          -[NRDNANPeer setServiceName:](v45, "setServiceName:", v56);

          v57 = (void *)objc_claimAutoreleasedReturnValue(-[NRDNANPeer remoteIDSDeviceID](v13, "remoteIDSDeviceID"));
          -[NRDNANPeer setRemoteIDSDeviceID:](v45, "setRemoteIDSDeviceID:", v57);

          -[NRDNANPeer setPeerEndpoint:](v45, "setPeerEndpoint:", v42);
          -[NRDNANPeer setPeerInstanceID:](v45, "setPeerInstanceID:", objc_msgSend(*(id *)(a1 + 48), "publishID"));
          -[NRDNANPeer setIsInitiator:](v45, "setIsInitiator:", 1);
          -[NRDNANPeer setInitiatorDiscoveryResult:](v45, "setInitiatorDiscoveryResult:", *(_QWORD *)(a1 + 48));
          v59 = *(_QWORD *)(a1 + 32);
          if (v59)
            v60 = *(_QWORD *)(v59 + 24);
          else
            v60 = 0;
          v61 = (void *)_NRCopyLogObjectForNRUUID(v60, v58);
          v62 = _NRLogIsLevelEnabled(v61, 0);

          if (v62)
          {
            v64 = *(_QWORD *)(a1 + 32);
            if (v64)
              v65 = *(_QWORD *)(v64 + 24);
            else
              v65 = 0;
            v66 = (void *)_NRCopyLogObjectForNRUUID(v65, v63);
            _NRLogWithArgs(v66, 0, "%s%.30s:%-4d NAN: subscriber discovered a valid peer %@", "", "-[NRDiscoveryClient subscriber:receivedDiscoveryResult:]_block_invoke", 2320, v45);

          }
          v67 = *(_QWORD *)(a1 + 32);
          if (v67)
            v68 = *(void **)(v67 + 248);
          else
            v68 = 0;
          objc_msgSend(v68, "setObject:forKeyedSubscript:", v45, v42);
          sub_100116710(*(_QWORD *)(a1 + 32), v45);
LABEL_69:

        }
        goto LABEL_70;
      }
      v36 = v13->_serviceName;
      v21 = (NSString *)_NRCopyLogObjectForNRUUID(v36, v37);
      _NRLogWithArgs(v21, 16, "%s%.30s:%-4d no service name %@", "", "-[NRDiscoveryClient processDiscoveredNANPeer:]", 1903, v16);

      v23 = 0;
    }
    v13 = 0;
LABEL_28:

    goto LABEL_29;
  }
}

void sub_1001180DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  id *v48;

  objc_destroyWeak(v48);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a48, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100118120(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  uint64_t v12;
  _QWORD v13[2];
  int v14;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ipv6LinkLocalAddress"));
      v6 = objc_msgSend(v5, "length");

      if (v6 == (id)16)
      {
        v13[0] = 0;
        v14 = 0;
        v13[1] = 0;
        v12 = 7708;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ipv6LinkLocalAddress"));
        __memcpy_chk(v13, objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"), 20);
        a1 = objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithAddress:](NWAddressEndpoint, "endpointWithAddress:", &v12));

        goto LABEL_8;
      }
    }
    else
    {
      v8 = sub_100115594();
      IsLevelEnabled = _NRLogIsLevelEnabled(v8, 17);

      if (IsLevelEnabled)
      {
        v10 = sub_100115594();
        _NRLogWithArgs(v10, 17, "%s called with null macAddress", "-[NRDiscoveryClient copyAddressEndpointFromWFAMacAddress:]");

      }
    }
    a1 = 0;
  }
LABEL_8:

  return a1;
}

void sub_100118240(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  unsigned int v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;

  v36 = a2;
  v5 = a3;
  v6 = *(_QWORD **)(a1 + 32);
  if (!v6)
    goto LABEL_42;
  if (v6[32] != 4)
  {
    v19 = sub_100118A78(*(_QWORD *)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
    v20 = v19;
    if (v6[32] == 4)
      v21 = sub_100118E08((uint64_t)v6, v19);
    else
      v21 = sub_10010A150(v19, v36);
    v6 = v21;

    v22 = *(_QWORD *)(a1 + 32);
    if (v22)
    {
      v15 = 0;
      v23 = *(unsigned __int8 *)(v22 + 18);
      if (*(_BYTE *)(v22 + 18) && v23 != 255)
      {
        v24 = *(void **)(a1 + 48);
        v25 = *(void **)(a1 + 56);
        v26 = v36;
        v27 = sub_100118D44(v22, v23, v24, v25);
        v28 = v27;
        if (*(_QWORD *)(v22 + 256) == 4)
          v29 = sub_100118E08(v22, v27);
        else
          v29 = sub_10010A150(v27, v26);
        v15 = v29;

      }
      goto LABEL_29;
    }
LABEL_42:
    v15 = 0;
LABEL_29:
    v30 = *(void **)(a1 + 40);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrAT"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", v31));

    v33 = *(void **)(a1 + 40);
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrD"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v34));

    if (sub_10010B9C8(v6, v32) && (!v15 || sub_10010B9C8(v15, v35)))
    {
      if (qword_1001E49B8 != -1)
        dispatch_once(&qword_1001E49B8, &stru_1001B8360);
      if (_NRLogIsLevelEnabled(qword_1001E49B0, 1))
      {
        if (qword_1001E49B8 != -1)
          dispatch_once(&qword_1001E49B8, &stru_1001B8360);
        _NRLogWithArgs(qword_1001E49B0, 1, "%s%.30s:%-4d found a device over NAN", "", "-[NRDiscoveryClient processDiscoveredNANPeer:]_block_invoke", 1964);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    }

    goto LABEL_40;
  }
  v7 = *(void **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrAT"));
  v6 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

  if (!objc_msgSend(v6, "length"))
    goto LABEL_41;
  v9 = sub_100118A78(*(_QWORD *)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 56));
  v10 = sub_100118B54(*(_QWORD *)(a1 + 32), v6, v9, v5);

  if (!v10)
    goto LABEL_41;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v11 + 18);
    if (v12)
    {
      if (v12 != 255)
      {
        v13 = *(void **)(a1 + 40);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "nrD"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v14));

        if (objc_msgSend(v15, "length"))
        {
          v16 = *(_QWORD *)(a1 + 32);
          if (v16)
          {
            v17 = sub_100118D44(v16, *(unsigned __int8 *)(v16 + 18), *(void **)(a1 + 48), *(void **)(a1 + 56));
          }
          else
          {

            v17 = 0;
          }
          v18 = sub_100118B54(*(_QWORD *)(a1 + 32), v15, v17, v5);

          if (!v18)
            goto LABEL_41;
          goto LABEL_12;
        }
LABEL_40:

        goto LABEL_41;
      }
    }
  }
LABEL_12:
  if (qword_1001E49B8 != -1)
    dispatch_once(&qword_1001E49B8, &stru_1001B8360);
  if (_NRLogIsLevelEnabled(qword_1001E49B0, 1))
  {
    if (qword_1001E49B8 != -1)
      dispatch_once(&qword_1001E49B8, &stru_1001B8360);
    _NRLogWithArgs(qword_1001E49B0, 1, "%s%.30s:%-4d found a device over NAN", "", "-[NRDiscoveryClient processDiscoveredNANPeer:]_block_invoke", 1940);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
LABEL_41:

}

uint64_t sub_100118674(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100118684(uint64_t a1)
{

}

void sub_10011868C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (WeakRetained && !*((_BYTE *)WeakRetained + 21))
  {
    if (v6 || !objc_msgSend(v5, "count"))
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v8);
      IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

      if (IsLevelEnabled)
      {
        v13 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v12);
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d no fetched identities (%@)", "", "-[NRDiscoveryClient processDiscoveredNANPeer:]_block_invoke_2", 2005, v6);

      }
    }
    else
    {
      v14 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v8);
      v15 = _NRLogIsLevelEnabled(v14, 1);

      if (v15)
      {
        v17 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v16);
        _NRLogWithArgs(v17, 1, "%s%.30s:%-4d fetched %u identities", "", "-[NRDiscoveryClient processDiscoveredNANPeer:]_block_invoke_2", 1986, objc_msgSend(v5, "count"));

      }
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v18 = v5;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v37;
        while (2)
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(_QWORD *)v37 != v20)
              objc_enumerationMutation(v18);
            v22 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v22, "type") == 1)
            {
              v19 = v22;
              goto LABEL_20;
            }
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
          if (v19)
            continue;
          break;
        }
      }
LABEL_20:

      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v23 = v18;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      if (v24)
      {
        v25 = v24;
        v26 = *(_QWORD *)v33;
LABEL_23:
        v27 = 0;
        while (1)
        {
          if (*(_QWORD *)v33 != v26)
            objc_enumerationMutation(v23);
          v28 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v27);
          if (objc_msgSend(v28, "type") != 1)
          {
            (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
              break;
          }
          if (v25 == (id)++v27)
          {
            v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
            if (!v25)
              goto LABEL_30;
            goto LABEL_23;
          }
        }
        v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "idsDeviceID"));
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v31 = *(void **)(v30 + 40);
        *(_QWORD *)(v30 + 40) = v29;

      }
LABEL_30:

    }
  }

}

void sub_100118994(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v5 = a3;
  v6 = *(void **)(a1 + 184);
  if (!v6)
  {
    v7 = objc_alloc_init((Class)RPClient);
    v8 = *(void **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v7;

    v9 = *(void **)(a1 + 184);
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v9, "setDispatchQueue:", v10);

    v6 = *(void **)(a1 + 184);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100118A6C;
  v12[3] = &unk_1001B7F50;
  v11 = v5;
  v13 = v11;
  objc_msgSend(v6, "getIdentitiesWithFlags:completion:", a2, v12);

}

uint64_t sub_100118A6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *sub_100118A78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v5 = a3;
  if (a1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dataUsingEncoding:", 4));
    if (*(_QWORD *)(a1 + 200))
    {
      v7 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 200), "dataUsingEncoding:", 4));
      objc_msgSend(v7, "appendData:", v8);

      v6 = v7;
    }
    if (objc_msgSend(v5, "length"))
    {
      v9 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v6);
      objc_msgSend(v9, "appendData:", v5);

      v6 = v9;
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_100118B54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v21;
  int IsLevelEnabled;
  id v23;
  id v24;
  int v25;
  id v26;
  int v27;
  id v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!a1)
    goto LABEL_19;
  if (!v7)
  {
    v21 = sub_100115594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v21, 17);

    if (!IsLevelEnabled)
      goto LABEL_19;
    v23 = sub_100115594();
    _NRLogWithArgs(v23, 17, "%s called with null signature");
LABEL_18:

    goto LABEL_19;
  }
  if (!v8)
  {
    v24 = sub_100115594();
    v25 = _NRLogIsLevelEnabled(v24, 17);

    if (!v25)
      goto LABEL_19;
    v23 = sub_100115594();
    _NRLogWithArgs(v23, 17, "%s called with null data");
    goto LABEL_18;
  }
  if (!v9)
  {
    v26 = sub_100115594();
    v27 = _NRLogIsLevelEnabled(v26, 17);

    if (v27)
    {
      v23 = sub_100115594();
      _NRLogWithArgs(v23, 17, "%s called with null identity");
      goto LABEL_18;
    }
LABEL_19:
    v11 = 0;
    goto LABEL_11;
  }
  v28 = 0;
  v11 = objc_msgSend(v9, "verifySignature:data:error:", v7, v8, &v28);
  v12 = v28;
  v13 = v12;
  if (v12 && objc_msgSend(v12, "code") != (id)-6754)
  {
    v15 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v14);
    v16 = _NRLogIsLevelEnabled(v15, 1);

    if (v16)
    {
      v17 = *(id *)(a1 + 24);
      v19 = (void *)_NRCopyLogObjectForNRUUID(v17, v18);
      _NRLogWithArgs(v19, 1, "%s%.30s:%-4d verification failed with error %@", "", "-[NRDiscoveryClient verifyRPSignature:forData:withIdentity:]", 611, v13);

    }
    v11 = 0;
  }

LABEL_11:
  return v11;
}

id sub_100118D44(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  char v12;

  v12 = a2;
  v7 = a4;
  v8 = 0;
  if (a1)
  {
    if (a2)
    {
      v9 = a3;
      v8 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithBytes:length:", &v12, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataUsingEncoding:", 4));

      objc_msgSend(v8, "appendData:", v10);
      if (objc_msgSend(v7, "length"))
        objc_msgSend(v8, "appendData:", v7);
    }
  }

  return v8;
}

id sub_100118E08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  int v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  int IsLevelEnabled;
  id v18;
  id v19;
  int v20;
  id v22;

  v3 = a2;
  if (!v3)
  {
    v16 = sub_100115594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

    if (IsLevelEnabled)
    {
      v18 = sub_100115594();
      _NRLogWithArgs(v18, 17, "%s called with null data");
LABEL_15:

    }
LABEL_16:
    v15 = 0;
    goto LABEL_17;
  }
  v4 = *(void **)(a1 + 192);
  if (!v4)
  {
    v19 = sub_100115594();
    v20 = _NRLogIsLevelEnabled(v19, 17);

    if (v20)
    {
      v18 = sub_100115594();
      _NRLogWithArgs(v18, 17, "%s called with null self.rpSelfIdentity");
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (objc_msgSend(v4, "type") != 1 || !objc_msgSend(v3, "length"))
    goto LABEL_16;
  v5 = *(void **)(a1 + 192);
  v22 = 0;
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "signData:error:", v3, &v22));
  v8 = v22;

  if (v8)
  {
    v10 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v9);
    v11 = _NRLogIsLevelEnabled(v10, 17);

    if (v11)
    {
      v12 = *(id *)(a1 + 24);
      v14 = (void *)_NRCopyLogObjectForNRUUID(v12, v13);
      _NRLogWithArgs(v14, 17, "signing failed with error %@", v8);

    }
    v15 = 0;
  }
  else
  {
    v15 = v7;
  }

LABEL_17:
  return v15;
}

void sub_100118F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int IsLevelEnabled;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 21))
      return;
    v3 = *(_QWORD *)(v2 + 240);
  }
  else
  {
    v3 = 0;
  }
  if (*(_QWORD *)(a1 + 40) == v3)
  {
    v4 = sub_100118120(v2, *(void **)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      v6 = *(void **)(v5 + 248);
    else
      v6 = 0;
    v20 = (id)v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "initiatorDiscoveryResult"));
    if (objc_msgSend(v8, "publishID") == *(unsigned __int8 *)(a1 + 56))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "responderDataSession"));

      if (v9)
        goto LABEL_20;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = v10 ? *(void **)(v10 + 248) : 0;
      objc_msgSend(v11, "setObject:forKeyedSubscript:", 0, v20);
      if (!v7)
        goto LABEL_20;
      sub_10011911C(*(_QWORD *)(a1 + 32), v7);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = v13 ? *(_QWORD *)(v13 + 24) : 0;
      v15 = (void *)_NRCopyLogObjectForNRUUID(v14, v12);
      IsLevelEnabled = _NRLogIsLevelEnabled(v15, 0);

      if (!IsLevelEnabled)
        goto LABEL_20;
      v18 = *(_QWORD *)(a1 + 32);
      if (v18)
        v19 = *(_QWORD *)(v18 + 24);
      else
        v19 = 0;
      v8 = (void *)_NRCopyLogObjectForNRUUID(v19, v17);
      _NRLogWithArgs(v8, 0, "%s%.30s:%-4d NAN: subscriber lost discovered peer %@", "", "-[NRDiscoveryClient subscriber:lostDiscoveryResultForPublishID:address:]_block_invoke", 2275, v7);
    }

LABEL_20:
  }
}

void sub_10011911C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  if (a1)
  {
    if (objc_msgSend(v8, "hasActiveDataSession"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "initiatorDataSession"));

      if (v3)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "initiatorDataSession"));
        objc_msgSend(v4, "stop");

        objc_msgSend(v8, "setInitiatorDataSession:", 0);
      }
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "responderDataSession"));

      if (v5)
      {
        v6 = *(void **)(a1 + 232);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "responderDataSession"));
        objc_msgSend(v6, "terminateDataSession:completionHandler:", v7, &stru_1001B8228);

        objc_msgSend(v8, "setResponderDataSession:", 0);
      }
    }
    objc_msgSend(v8, "setLocalInterfaceIndex:", 0);
  }

}

void sub_1001191F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = a1[4];
  if (v3)
  {
    if (*(_BYTE *)(v3 + 21) || a1[5] != *(_QWORD *)(v3 + 240))
      return;
    v4 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    if (a1[5])
      return;
    v4 = 0;
  }
  v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

  if (IsLevelEnabled)
  {
    v8 = a1[4];
    if (v8)
      v9 = *(_QWORD *)(v8 + 24);
    else
      v9 = 0;
    v10 = (id)_NRCopyLogObjectForNRUUID(v9, v7);
    _NRLogWithArgs(v10, 0, "%s%.30s:%-4d NAN: subscriber terminated %zd", "", "-[NRDiscoveryClient subscriber:terminatedWithReason:]_block_invoke", 2252, a1[6]);

  }
}

void sub_1001192D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = a1[4];
  if (v3)
  {
    if (*(_BYTE *)(v3 + 21) || a1[5] != *(_QWORD *)(v3 + 240))
      return;
    v4 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    if (a1[5])
      return;
    v4 = 0;
  }
  v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

  if (IsLevelEnabled)
  {
    v8 = a1[4];
    if (v8)
      v9 = *(_QWORD *)(v8 + 24);
    else
      v9 = 0;
    v10 = (id)_NRCopyLogObjectForNRUUID(v9, v7);
    _NRLogWithArgs(v10, 0, "%s%.30s:%-4d NAN: subscriber failed to start %zd", "", "-[NRDiscoveryClient subscriber:failedToStartWithError:]_block_invoke", 2239, a1[6]);

  }
}

void sub_1001193B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int IsLevelEnabled;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 21) || *(_QWORD *)(a1 + 40) != *(_QWORD *)(v3 + 240))
      return;
    v4 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    if (*(_QWORD *)(a1 + 40))
      return;
    v4 = 0;
  }
  v5 = (void *)_NRCopyLogObjectForNRUUID(v4, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v5, 0);

  if (IsLevelEnabled)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(_QWORD *)(v8 + 24);
    else
      v9 = 0;
    v10 = (id)_NRCopyLogObjectForNRUUID(v9, v7);
    _NRLogWithArgs(v10, 0, "%s%.30s:%-4d NAN: subscriber started", "", "-[NRDiscoveryClient subscriberStarted:]_block_invoke", 2226);

  }
}

void sub_100119490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NRDNANPeer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int IsLevelEnabled;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (v2 != *(_QWORD *)(v3 + 232))
      return;
  }
  else if (v2)
  {
    return;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "initiatorDataAddress"));
  v20 = (id)sub_100118120(v3, v4);

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = *(void **)(v5 + 248);
  else
    v6 = 0;
  v7 = (NRDNANPeer *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v20));
  if (-[NRDNANPeer hasActiveDataSession](v7, "hasActiveDataSession"))
  {
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = *(_QWORD *)(v9 + 24);
    else
      v10 = 0;
    v11 = (void *)_NRCopyLogObjectForNRUUID(v10, v8);
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 0);

    if (IsLevelEnabled)
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (v14)
        v15 = *(_QWORD *)(v14 + 24);
      else
        v15 = 0;
      v16 = (void *)_NRCopyLogObjectForNRUUID(v15, v13);
      _NRLogWithArgs(v16, 0, "%s%.30s:%-4d NAN: publisher already has an active data session with %@", "", "-[NRDiscoveryClient publisher:dataConfirmedForHandle:localInterfaceIndex:serviceSpecificInfo:]_block_invoke", 2176, v7);

    }
  }
  else
  {
    if (!v7)
      v7 = objc_alloc_init(NRDNANPeer);
    -[NRDNANPeer setLocalInterfaceIndex:](v7, "setLocalInterfaceIndex:", *(unsigned int *)(a1 + 56));
    -[NRDNANPeer setResponderDataSession:](v7, "setResponderDataSession:", *(_QWORD *)(a1 + 48));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "hostname"));
    -[NRDNANPeer setServiceName:](v7, "setServiceName:", v17);

    -[NRDNANPeer setPeerEndpoint:](v7, "setPeerEndpoint:", v20);
    -[NRDNANPeer setPeerInstanceID:](v7, "setPeerInstanceID:", objc_msgSend(*(id *)(a1 + 48), "datapathID"));
    v18 = *(_QWORD *)(a1 + 40);
    if (v18)
      v19 = *(void **)(v18 + 248);
    else
      v19 = 0;
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v7, v20);
    sub_1001168D0(*(_QWORD *)(a1 + 40), v7);
  }

}

void sub_100119660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int IsLevelEnabled;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    if (v2 != *(_QWORD *)(v3 + 232))
      return;
LABEL_5:
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "initiatorDataAddress"));
    v20 = (id)sub_100118120(v3, v4);

    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      v6 = *(void **)(v5 + 248);
    else
      v6 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v20));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "responderDataSession"));
    if (v8 == *(void **)(a1 + 48))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "initiatorDataSession"));

      if (v9)
        goto LABEL_10;
      v10 = *(_QWORD *)(a1 + 40);
      v11 = v10 ? *(void **)(v10 + 248) : 0;
      objc_msgSend(v11, "setObject:forKeyedSubscript:", 0, v20);
      if (!v7)
        goto LABEL_10;
      sub_10011911C(*(_QWORD *)(a1 + 40), v7);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = v13 ? *(_QWORD *)(v13 + 24) : 0;
      v15 = (void *)_NRCopyLogObjectForNRUUID(v14, v12);
      IsLevelEnabled = _NRLogIsLevelEnabled(v15, 0);

      if (!IsLevelEnabled)
        goto LABEL_10;
      v18 = *(_QWORD *)(a1 + 40);
      if (v18)
        v19 = *(_QWORD *)(v18 + 24);
      else
        v19 = 0;
      v8 = (void *)_NRCopyLogObjectForNRUUID(v19, v17);
      _NRLogWithArgs(v8, 0, "%s%.30s:%-4d NAN: publisher data session terminated for %@ with reason %zd", "", "-[NRDiscoveryClient publisher:dataTerminatedForHandle:reason:]_block_invoke", 2160, v7, *(_QWORD *)(a1 + 56));
    }

LABEL_10:
    return;
  }
  if (!v2)
    goto LABEL_5;
}

void sub_100119808(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    if (v4 != *(_QWORD *)(v3 + 232))
      return;
    v5 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    if (v4)
      return;
    v5 = 0;
  }
  v6 = (void *)_NRCopyLogObjectForNRUUID(v5, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 0);

  if (IsLevelEnabled)
  {
    v9 = a1[5];
    if (v9)
      v10 = *(_QWORD *)(v9 + 24);
    else
      v10 = 0;
    v11 = (id)_NRCopyLogObjectForNRUUID(v10, v8);
    _NRLogWithArgs(v11, 0, "%s%.30s:%-4d NAN: publisher terminated with reason %zd", "", "-[NRDiscoveryClient publisher:terminatedWithReason:]_block_invoke", 2118, a1[6]);

  }
}

void sub_1001198D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    if (v4 != *(_QWORD *)(v3 + 232))
      return;
    v5 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    if (v4)
      return;
    v5 = 0;
  }
  v6 = (void *)_NRCopyLogObjectForNRUUID(v5, a2);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 0);

  if (IsLevelEnabled)
  {
    v9 = a1[5];
    if (v9)
      v10 = *(_QWORD *)(v9 + 24);
    else
      v10 = 0;
    v11 = (id)_NRCopyLogObjectForNRUUID(v10, v8);
    _NRLogWithArgs(v11, 0, "%s%.30s:%-4d NAN: publisher failed with error %zd", "", "-[NRDiscoveryClient publisher:failedToStartWithError:]_block_invoke", 2108, a1[6]);

  }
}

id sub_1001199A8(uint64_t a1, unsigned int a2, char a3, int a4)
{
  void *v4;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  if (!a1)
    return 0;
  v4 = *(void **)(a1 + 120);
  if (!v4)
    return 0;
  v6 = (a3 - 101);
  v7 = 0x40300020100uLL >> (8 * a2);
  if (a2 >= 6)
    LOBYTE(v7) = 0;
  if (v6 >= 4)
    LOBYTE(v8) = v7;
  else
    v8 = 0x7060502u >> (8 * v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v9));

  if (!v10)
    return 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v12)
  {
    if (a4)
    {
      v13 = v12;
      v14 = *(_QWORD *)v21;
      v15 = (id)a4;
LABEL_12:
      v16 = 0;
      while (1)
      {
        if (*(_QWORD *)v21 != v14)
          objc_enumerationMutation(v11);
        v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v16);
        if (objc_msgSend(v17, "addressFamily", (_QWORD)v20) == v15)
          break;
        if (v13 == (id)++v16)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
          v18 = 0;
          if (v13)
            goto LABEL_12;
          goto LABEL_23;
        }
      }
    }
    else
    {
      v17 = (void *)**((_QWORD **)&v20 + 1);
      objc_msgSend(**((id **)&v20 + 1), "addressFamily", (_QWORD)v20);
    }
    v18 = v17;
  }
  else
  {
    v18 = 0;
  }
LABEL_23:

  return v18;
}

id sub_100119B60(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;

  if (a1)
  {
    v1 = *(id *)(a1 + 128);
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 4));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", v2));

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_100119BD4(id a1)
{
  NRDiscoveryManager *v1;
  _QWORD *v2;
  void *v3;
  id v4;

  v1 = [NRDiscoveryManager alloc];
  v4 = sub_10014CFBC();
  v2 = sub_100119C2C(v1, v4);
  v3 = (void *)qword_1001E49A0;
  qword_1001E49A0 = (uint64_t)v2;

}

_QWORD *sub_100119C2C(_QWORD *a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  objc_super v18;

  v4 = a2;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)NRDiscoveryManager;
    v5 = objc_msgSendSuper2(&v18, "init");
    if (!v5)
    {
      v9 = sub_100115594();
      IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

      if (IsLevelEnabled)
      {
        v11 = sub_100115594();
        _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDiscoveryManager initWithQueue:]", 269);

      }
      v12 = _os_log_pack_size(12);
      v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "-[NRDiscoveryManager initWithQueue:]";
      v16 = sub_100115594();
      _NRLogAbortWithPack(v16, v13);
    }
    a1 = v5;
    objc_storeStrong((id *)v5 + 2, a2);
    v6 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v7 = (void *)a1[3];
    a1[3] = v6;

  }
  return a1;
}

id *sub_100119DA4(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  unint64_t v9;
  id v10;
  id v11;
  id v12;
  id v14;
  int IsLevelEnabled;
  id v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  objc_super v23;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)NRDiscoveryClient;
    v8 = (id *)objc_msgSendSuper2(&v23, "init");
    if (!v8)
    {
      v14 = sub_100115594();
      IsLevelEnabled = _NRLogIsLevelEnabled(v14, 16);

      if (IsLevelEnabled)
      {
        v16 = sub_100115594();
        _NRLogWithArgs(v16, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDiscoveryClient initWithQueue:nrUUID:]", 345);

      }
      v17 = _os_log_pack_size(12);
      v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      v19 = __error();
      v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v20 = 136446210;
      *(_QWORD *)(v20 + 4) = "-[NRDiscoveryClient initWithQueue:nrUUID:]";
      v21 = sub_100115594();
      _NRLogAbortWithPack(v21, v18);
    }
    a1 = v8;
    do
      v9 = __ldxr(&qword_1001E4140);
    while (__stxr(v9 + 1, &qword_1001E4140));
    v8[4] = (id)v9;
    objc_storeStrong(v8 + 5, a2);
    objc_storeStrong(a1 + 3, a3);
    v10 = objc_alloc_init((Class)NSMutableArray);
    v11 = a1[12];
    a1[12] = v10;

    v12 = a1[26];
    a1[26] = CFSTR("_nrd._tcp");

  }
  return a1;
}

void sub_100119F6C(uint64_t a1, uint64_t a2)
{
  void *v3;
  int IsLevelEnabled;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *j;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *k;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *m;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  _BYTE v59[128];
  _BYTE v60[128];

  if (a1)
  {
    v3 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), a2);
    IsLevelEnabled = _NRLogIsLevelEnabled(v3, 0);

    if (IsLevelEnabled)
    {
      v6 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v5);
      _NRLogWithArgs(v6, 0, "%s%.30s:%-4d Cancelling %@", "", "-[NRDiscoveryClient cancel]", 363, a1);

    }
    *(_BYTE *)(a1 + 21) = 1;
    v7 = *(void **)(a1 + 56);
    if (v7)
    {
      objc_msgSend(v7, "invalidate");
      v8 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;

    }
    if (objc_msgSend(*(id *)(a1 + 64), "count"))
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v9 = *(id *)(a1 + 64);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v54;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(_QWORD *)v54 != v12)
              objc_enumerationMutation(v9);
            objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i), "invalidate");
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
        }
        while (v11);
      }

      v14 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;

    }
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 168), "allValues"));
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v50;
      do
      {
        for (j = 0; j != v17; j = (char *)j + 1)
        {
          if (*(_QWORD *)v50 != v18)
            objc_enumerationMutation(v15);
          nw_browser_cancel(*(nw_browser_t *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)j));
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
      }
      while (v17);
    }

    v20 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;

    sub_10011A35C(a1);
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v21 = *(id *)(a1 + 176);
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v46;
      do
      {
        for (k = 0; k != v23; k = (char *)k + 1)
        {
          if (*(_QWORD *)v46 != v24)
            objc_enumerationMutation(v21);
          nw_resolver_cancel(*(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)k));
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
      }
      while (v23);
    }

    v26 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;

    v27 = *(void **)(a1 + 216);
    if (v27)
    {
      objc_msgSend(v27, "invalidate");
      v28 = *(void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = 0;

    }
    v29 = *(void **)(a1 + 224);
    if (v29)
    {
      objc_msgSend(v29, "invalidate");
      v30 = *(void **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = 0;

    }
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "allValues"));
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v42;
      do
      {
        for (m = 0; m != v33; m = (char *)m + 1)
        {
          if (*(_QWORD *)v42 != v34)
            objc_enumerationMutation(v31);
          sub_10011911C(a1, *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)m));
        }
        v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v41, v57, 16);
      }
      while (v33);
    }

    v36 = *(void **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = 0;

    v37 = *(void **)(a1 + 232);
    if (v37)
    {
      objc_msgSend(v37, "stop");
      v38 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = 0;

    }
    v39 = *(void **)(a1 + 240);
    if (v39)
    {
      objc_msgSend(v39, "stop");
      v40 = *(void **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = 0;

    }
  }
}

void sub_10011A35C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  id *v8;
  id *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 160), "allValues", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        nw_listener_cancel(*(nw_listener_t *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  v7 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;

  objc_opt_self(NRDiscoveryManager);
  if (qword_1001E49A8 != -1)
    dispatch_once(&qword_1001E49A8, &stru_1001B7ED8);
  v8 = (id *)(id)qword_1001E49A0;
  v9 = v8;
  if (v8)
    objc_msgSend(v8[4], "removeObject:", *(_QWORD *)(a1 + 112));

  v10 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;

}

void sub_10011A4C8(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v4 = *(void **)(a1 + 104);
    if (!v4)
    {
      v5 = objc_alloc_init((Class)NSMutableSet);
      v6 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v5;

      v4 = *(void **)(a1 + 104);
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
    objc_msgSend(v4, "addObject:", v7);

    if (*(_BYTE *)(a1 + 19))
    {
      if (*(_BYTE *)(a1 + 20))
      {
        sub_10011A574(a1, a2);
        sub_10011ACD0(a1, a2);
      }
    }
  }
}

void sub_10011A574(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  int v15;
  void *v16;
  int IsLevelEnabled;
  uint64_t v18;
  id *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *dictionary;
  _BOOL8 v28;
  NSObject *secure_tcp;
  NSObject *v30;
  NSObject *v31;
  id v32;
  int v33;
  id v34;
  void *v35;
  int v36;
  int v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  int v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  int v54;
  id v55;
  NSObject *parameters;
  void *v57;
  void *v58;
  id v59;
  id v60;
  NSObject *advertise_descriptor;
  id v62;
  NSObject *v63;
  _QWORD v64[4];
  NSObject *v65;
  id v66;
  id v67;
  char v68;
  uint8_t value[8];

  if (!*(_BYTE *)(a1 + 15))
    return;
  v62 = *(id *)(a1 + 104);
  if (!objc_msgSend(v62, "count"))
  {
LABEL_16:

    return;
  }
  v4 = *(id *)(a1 + 104);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
  v6 = objc_msgSend(v4, "containsObject:", v5);

  if (!v6)
    return;
  v7 = *(id *)(a1 + 120);
  if (!v7 || (v9 = *(_QWORD *)(a1 + 112), v7, !v9))
  {
    v16 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v8);
    IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

    if (!IsLevelEnabled)
      return;
    v62 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v18);
    _NRLogWithArgs(v62, 17, "invalid advertising configuration");
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 7)
  {
    v10 = *(id *)(a1 + 104);
    if ((objc_msgSend(v10, "containsObject:", &off_1001C4930) & 1) != 0
      && (objc_msgSend(*(id *)(a1 + 104), "containsObject:", &off_1001C4948) & 1) != 0)
    {
      v11 = sub_1000A315C((uint64_t)NRLinkDirector);
      v12 = v11;
      if (v11)
        v13 = (void *)*((_QWORD *)v11 + 6);
      else
        v13 = 0;
      v14 = v13;
      v15 = sub_100146C4C((uint64_t)v14);

      if (v15)
        a2 = 2;
      else
        a2 = 7;
    }
    else
    {

      a2 = 7;
    }
  }
  v19 = (id *)(a1 + 160);
  v20 = *(id *)(a1 + 160);
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v21));

  if (!v22 && (a2 & 0xFFFFFFFD) != 1)
  {
    if ((_DWORD)a2 == 6)
    {
      sub_10011CF90(a1);
    }
    else
    {
      v23 = *(id *)(a1 + 112);
      v24 = *(id *)(a1 + 208);
      v25 = *(id *)(a1 + 120);
      v26 = *(id *)(a1 + 128);
      v60 = *(id *)(a1 + 264);
      v58 = v23;
      v59 = *(id *)(a1 + 136);
      advertise_descriptor = nw_advertise_descriptor_create_bonjour_service((const char *)objc_msgSend(v23, "UTF8String"), (const char *)objc_msgSend(v24, "UTF8String"), 0);
      nw_advertise_descriptor_set_no_auto_rename(advertise_descriptor, 1);
      dictionary = nw_txt_record_create_dictionary();
      nw_txt_record_set_key(dictionary, "nrAT", (const uint8_t *)objc_msgSend(v25, "bytes"), (size_t)objc_msgSend(v25, "length"));
      v57 = v26;
      if (v26)
        nw_txt_record_set_key(dictionary, "nrD", (const uint8_t *)objc_msgSend(v26, "bytes"), (size_t)objc_msgSend(v26, "length"));
      v63 = dictionary;
      if (v60)
        nw_txt_record_set_key(dictionary, "nrAD", (const uint8_t *)objc_msgSend(v60, "bytes"), (size_t)objc_msgSend(v60, "length"));
      v28 = (_BOOL8)v59;
      if (v59)
        v28 = nw_txt_record_set_key(dictionary, "nrN", (const uint8_t *)objc_msgSend(v59, "bytes"), (size_t)objc_msgSend(v59, "length"));
      if (_NRIsAppleInternal(v28))
      {
        if (qword_1001E4870 != -1)
          dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
        if (byte_1001E4868)
        {
          *(_QWORD *)value = sub_10011D194();
          nw_txt_record_set_key(dictionary, "nrF", value, 8uLL);
        }
      }
      nw_advertise_descriptor_set_txt_record_object(advertise_descriptor, dictionary);
      secure_tcp = nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
      v30 = secure_tcp;
      parameters = secure_tcp;
      switch((int)a2)
      {
        case 2:
          nw_parameters_set_required_interface_subtype(secure_tcp, 1001);
          goto LABEL_41;
        case 4:
          nw_parameters_set_required_interface_type(secure_tcp, nw_interface_type_wired);
          goto LABEL_41;
        case 5:
          v31 = nw_interface_create_with_name("awdl0");
          if (v31)
            goto LABEL_40;
          v32 = sub_100115594();
          v33 = _NRLogIsLevelEnabled(v32, 16);

          if (!v33)
            goto LABEL_46;
          v34 = sub_100115594();
          v35 = v34;
          v36 = 5;
          v37 = 1242;
          goto LABEL_50;
        case 7:
          v31 = nw_interface_create_with_name("ir0");
          if (v31)
          {
LABEL_40:
            v38 = v31;
            v30 = parameters;
            nw_parameters_require_interface(parameters, v31);

LABEL_41:
            v55 = v25;
            objc_initWeak((id *)value, (id)a1);
            v39 = nw_listener_create(v30);
            nw_listener_set_advertise_descriptor(v39, advertise_descriptor);
            v40 = *(id *)(a1 + 40);
            nw_listener_set_queue(v39, v40);

            nw_listener_set_new_connection_handler(v39, &stru_1001B8080);
            v64[0] = _NSConcreteStackBlock;
            v64[1] = 3221225472;
            v64[2] = sub_10011D228;
            v64[3] = &unk_1001B80A8;
            objc_copyWeak(&v67, (id *)value);
            v68 = a2;
            v41 = v39;
            v65 = v41;
            v42 = v58;
            v66 = v42;
            nw_listener_set_event_handler(v41, v64);
            nw_listener_start(v41);
            if (!*v19)
            {
              v43 = objc_alloc_init((Class)NSMutableDictionary);
              objc_storeStrong((id *)(a1 + 160), v43);

            }
            v44 = *(id *)(a1 + 24);
            v46 = (void *)_NRCopyLogObjectForNRUUID(v44, v45);
            v47 = _NRLogIsLevelEnabled(v46, 0);

            if (v47)
            {
              v48 = *(id *)(a1 + 24);
              v50 = (void *)_NRCopyLogObjectForNRUUID(v48, v49);
              _NRLogWithArgs(v50, 0, "%s%.30s:%-4d advertiser created w/ service name %@ for link type %u", "", "-[NRDiscoveryClient startAdvertisingOverLinkType:]", 1297, v42, a2);

            }
            v51 = *v19;
            v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
            objc_msgSend(v51, "setObject:forKeyedSubscript:", v41, v52);

            objc_destroyWeak(&v67);
            objc_destroyWeak((id *)value);
            v25 = v55;
          }
          else
          {
            v53 = sub_100115594();
            v54 = _NRLogIsLevelEnabled(v53, 16);

            if (v54)
            {
              v34 = sub_100115594();
              v35 = v34;
              v36 = 7;
              v37 = 1257;
LABEL_50:
              _NRLogWithArgs(v34, 16, "%s%.30s:%-4d no interface for type %d", "", "-[NRDiscoveryClient startAdvertisingOverLinkType:]", v37, v36);

            }
          }
LABEL_46:

          break;
        default:
          goto LABEL_41;
      }
    }
  }
}

void sub_10011AC90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10011ACD0(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int IsLevelEnabled;
  uint64_t v13;
  NSObject *secure_tcp;
  NSObject *v15;
  NSObject *v16;
  NSObject *bonjour_service;
  nw_browser_t v18;
  NSObject *v19;
  void *v20;
  id v21;
  char *v22;
  NSObject *v23;
  char *v24;
  NSObject *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  _QWORD handler[4];
  NSObject *v33;
  char *v34;
  id v35;
  char v36;
  _QWORD state_changed_handler[4];
  NSObject *v38;
  id v39;
  char v40;
  id location[2];

  if (a2 <= 7 && ((1 << a2) & 0x8A) != 0 || !*(_BYTE *)(a1 + 16))
    return;
  v31 = *(id *)(a1 + 104);
  if (!objc_msgSend(v31, "count"))
  {
LABEL_13:

    return;
  }
  v4 = *(id *)(a1 + 104);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
  v6 = objc_msgSend(v4, "containsObject:", v5);

  if (!v6)
    return;
  v7 = *(id *)(a1 + 168);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

  if (v9)
    return;
  if (!*(_QWORD *)(a1 + 144))
  {
    v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v10);
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

    if (!IsLevelEnabled)
      return;
    v31 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v13);
    _NRLogWithArgs(v31, 16, "%s%.30s:%-4d unsupported", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]", 775);
    goto LABEL_13;
  }
  if ((_DWORD)a2 == 6)
  {
    sub_10011B140(a1);
  }
  else
  {
    secure_tcp = nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
    v15 = secure_tcp;
    switch((_DWORD)a2)
    {
      case 2:
        nw_parameters_set_required_interface_subtype(secure_tcp, 1001);
        break;
      case 4:
        nw_parameters_set_required_interface_type(secure_tcp, nw_interface_type_wired);
        break;
      case 5:
        v16 = nw_interface_create_with_name("awdl0");
        nw_parameters_require_interface(v15, v16);

        break;
    }
    objc_initWeak(location, (id)a1);
    bonjour_service = nw_browse_descriptor_create_bonjour_service((const char *)objc_msgSend(*(id *)(a1 + 208), "UTF8String"), 0);
    nw_browse_descriptor_set_include_txt_record(bonjour_service, 1);
    v18 = nw_browser_create(bonjour_service, v15);
    state_changed_handler[0] = _NSConcreteStackBlock;
    state_changed_handler[1] = 3221225472;
    state_changed_handler[2] = sub_10011B25C;
    state_changed_handler[3] = &unk_1001B7FA0;
    objc_copyWeak(&v39, location);
    v40 = a2;
    v19 = v18;
    v38 = v19;
    nw_browser_set_state_changed_handler(v19, state_changed_handler);
    v20 = *(void **)(a1 + 24);
    if (v20)
    {
      v21 = v20;
      v22 = sub_1001300EC((uint64_t)NRDLocalDevice, v21, 0);

    }
    else
    {
      v22 = 0;
    }
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10011B3E0;
    handler[3] = &unk_1001B7FF0;
    objc_copyWeak(&v35, location);
    v36 = a2;
    v23 = v19;
    v33 = v23;
    v24 = v22;
    v34 = v24;
    nw_browser_set_browse_results_changed_handler(v23, handler);
    v25 = *(id *)(a1 + 40);
    nw_browser_set_queue(v23, v25);

    nw_browser_start(v23);
    v26 = *(void **)(a1 + 168);
    if (!v26)
    {
      v27 = objc_alloc_init((Class)NSMutableDictionary);
      v28 = *(void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v27;

      v26 = *(void **)(a1 + 168);
    }
    v29 = v26;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v23, v30);

    objc_destroyWeak(&v35);
    objc_destroyWeak(&v39);

    objc_destroyWeak(location);
  }
}

void sub_10011B0FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10011B140(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  int IsLevelEnabled;
  uint64_t v6;
  void *v7;
  id v8;

  if (_os_feature_enabled_impl("terminus", "NANLink") && !*(_QWORD *)(a1 + 240))
  {
    v8 = objc_msgSend(objc_alloc((Class)WiFiAwareSubscribeConfiguration), "initWithServiceName:", *(_QWORD *)(a1 + 208));
    objc_msgSend(v8, "setAuthenticationType:", 0);
    v2 = objc_msgSend(objc_alloc((Class)WiFiAwareSubscriber), "initWithConfiguration:", v8);
    objc_msgSend(v2, "setDelegate:", a1);
    objc_msgSend(v2, "start");
    objc_storeStrong((id *)(a1 + 240), v2);
    v4 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v3);
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 0);

    if (IsLevelEnabled)
    {
      v7 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v6);
      _NRLogWithArgs(v7, 0, "%s%.30s:%-4d NAN: subscriber start", "", "-[NRDiscoveryClient startNANSubscriber]", 2214);

    }
  }
}

void sub_10011B25C(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int IsLevelEnabled;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((_BYTE *)WeakRetained + 21))
    {
      v7 = *(unsigned __int8 *)(a1 + 48);
      v8 = *((id *)WeakRetained + 21);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v7));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));
      v11 = *(void **)(a1 + 32);

      if (v10 == v11)
      {
        v13 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v12);
        IsLevelEnabled = _NRLogIsLevelEnabled(v13, 0);

        if (IsLevelEnabled)
        {
          v16 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v15);
          _NRLogWithArgs(v16, 0, "%s%.30s:%-4d browser entered state: %u (%@)", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke", 811, a2, v21);

        }
        if ((_DWORD)a2 == 1)
        {
          v17 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v15);
          v18 = _NRLogIsLevelEnabled(v17, 0);

          if (v18)
          {
            v20 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v19);
            _NRLogWithArgs(v20, 0, "%s%.30s:%-4d browsing started", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke", 813);

          }
        }
      }
    }
  }

}

void sub_10011B3E0(uint64_t a1, void *a2, void *a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  id *WeakRetained;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  nw_browse_result_change_t changes;
  uint64_t v17;
  void *v18;
  int IsLevelEnabled;
  uint64_t v20;
  void *v21;
  nw_endpoint_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  const char *bonjour_service_name;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  id v35;
  id *v36;
  NSObject *v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  void *v41;
  id *v42;
  id *v43;
  unsigned __int8 v44;
  uint64_t v45;
  void *v46;
  int v47;
  id v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  id v64;
  void *v65;
  NSObject *v66;
  void *v67;
  id v68;
  NSObject *v69;
  id v70;
  nw_txt_record_t v71;
  NSObject *endpoint;
  void *v73;
  id v74;
  nw_endpoint_t v75;
  _QWORD v76[4];
  NSObject *v77;
  NSObject *v78;
  id v79;
  id v80;
  _QWORD block[4];
  id v82;
  id *v83;
  _QWORD v84[4];
  id *v85;
  id v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[128];

  v7 = a2;
  v8 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v10 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    if (!*((_BYTE *)WeakRetained + 21))
    {
      v11 = *(unsigned __int8 *)(a1 + 56);
      v12 = WeakRetained[21];
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v11));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v13));
      v15 = *(void **)(a1 + 32);

      if (v14 == v15)
      {
        changes = nw_browse_result_get_changes(v7, v8);
        v18 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v17);
        IsLevelEnabled = _NRLogIsLevelEnabled(v18, 0);

        if (IsLevelEnabled)
        {
          v21 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v20);
          _NRLogWithArgs(v21, 0, "%s%.30s:%-4d browser results changed: complete=%d change=%#llx", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_2", 832, a4, changes);

        }
        if ((changes & 2) != 0)
        {
          v22 = nw_browse_result_copy_endpoint(v8);
          v24 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v23);
          v25 = _NRLogIsLevelEnabled(v24, 1);

          v75 = v22;
          if (v25)
          {
            v27 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v26);
            _NRLogWithArgs(v27, 1, "%s%.30s:%-4d added endpoint %@", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_2", 838, v22);

          }
        }
        else
        {
          v75 = 0;
        }
        if ((changes & 4) != 0 && (endpoint = nw_browse_result_copy_endpoint(v7)) != 0)
        {
          if (*(_QWORD *)(v10 + 80))
          {
            bonjour_service_name = nw_endpoint_get_bonjour_service_name(endpoint);
            if (bonjour_service_name)
            {
              v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", bonjour_service_name));
              v89 = 0u;
              v90 = 0u;
              v87 = 0u;
              v88 = 0u;
              v29 = *(id *)(v10 + 96);
              v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v87, v91, 16);
              if (v30)
              {
                v31 = *(_QWORD *)v88;
                while (2)
                {
                  v32 = 0;
                  do
                  {
                    if (*(_QWORD *)v88 != v31)
                      objc_enumerationMutation(v29);
                    v33 = *(_QWORD **)(*((_QWORD *)&v87 + 1) + 8 * (_QWORD)v32);
                    if (v33)
                      v34 = (void *)v33[2];
                    else
                      v34 = 0;
                    if ((objc_msgSend(v34, "isEqualToString:", v73) & 1) != 0)
                    {
                      v62 = v33 == 0;
                      v36 = v33;

                      if (v62)
                      {
                        v36 = 0;
                        goto LABEL_59;
                      }
                      v63 = *(unsigned __int8 *)(a1 + 56);
                      v64 = v36[15];
                      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v63));
                      objc_msgSend(v64, "setObject:forKeyedSubscript:", 0, v65);

                      if (objc_msgSend(v36[15], "count"))
                      {
                        if (!*(_QWORD *)(v10 + 88))
                          goto LABEL_59;
                        v66 = *(NSObject **)(v10 + 40);
                        block[0] = _NSConcreteStackBlock;
                        block[1] = 3221225472;
                        block[2] = sub_10011BB74;
                        block[3] = &unk_1001B8778;
                        v82 = (id)v10;
                        v36 = v36;
                        v83 = v36;
                        dispatch_async(v66, block);

                        v29 = v82;
                      }
                      else
                      {
                        objc_msgSend(*(id *)(v10 + 96), "removeObject:", v36);
                        v67 = *(void **)(v10 + 80);
                        if (!v67)
                          goto LABEL_59;
                        v68 = v67;
                        v69 = *(NSObject **)(v10 + 40);
                        v84[0] = _NSConcreteStackBlock;
                        v84[1] = 3221225472;
                        v84[2] = sub_10011BB64;
                        v84[3] = &unk_1001B85F8;
                        v86 = v68;
                        v36 = v36;
                        v85 = v36;
                        v29 = v68;
                        dispatch_async(v69, v84);

                      }
                      goto LABEL_58;
                    }
                    v32 = (char *)v32 + 1;
                  }
                  while (v30 != v32);
                  v35 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v87, v91, 16);
                  v30 = v35;
                  if (v35)
                    continue;
                  break;
                }
              }
              v36 = 0;
LABEL_58:

LABEL_59:
            }
          }
        }
        else
        {
          endpoint = 0;
        }
        if (!v75)
          goto LABEL_53;
        v37 = nw_browse_result_copy_endpoint(v8);
        v39 = nw_endpoint_get_bonjour_service_name(v37);
        if (v39)
        {
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v39));
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "lowercaseString"));

          objc_opt_self(NRDiscoveryManager);
          if (qword_1001E49A8 != -1)
            dispatch_once(&qword_1001E49A8, &stru_1001B7ED8);
          v42 = (id *)(id)qword_1001E49A0;
          if (!v42
            || (v43 = v42,
                v44 = objc_msgSend(v42[4], "containsObject:", v41),
                v43,
                (v44 & 1) == 0))
          {
            v71 = nw_browse_result_copy_txt_record_object(v8);
            v74 = sub_10011BB90(v71, "nrN");
            v46 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v45);
            v47 = _NRLogIsLevelEnabled(v46, 0);

            if (v47)
            {
              v48 = *(id *)(v10 + 24);
              v50 = (void *)_NRCopyLogObjectForNRUUID(v48, v49);
              _NRLogWithArgs(v50, 0, "%s%.30s:%-4d discovered endpoint %@ serviceName %@", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_2", 892, v37, v41);

            }
            v51 = *(_QWORD *)(v10 + 256);
            if (v51 <= 8 && ((1 << v51) & 0x106) != 0)
            {
              v52 = *(id *)(v10 + 152);
              if (v74)
              {
                v53 = *(void **)(v10 + 152);
                v54 = *(id *)(v10 + 200);
                v55 = v53;
                v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "dataUsingEncoding:", 4));
                v70 = sub_10010B750(v55, v74, v56);

                v52 = v70;
              }
              v57 = *(_QWORD **)(a1 + 40);
              if (v57)
                v57 = (_QWORD *)v57[6];
              v58 = v57;
              sub_10011BD04(v10, v8, v37, v41, v52, v58, 0);

            }
            else
            {
              v76[0] = _NSConcreteStackBlock;
              v76[1] = 3221225472;
              v76[2] = sub_10011C57C;
              v76[3] = &unk_1001B7FC8;
              objc_copyWeak(&v80, (id *)(a1 + 48));
              v77 = v8;
              v78 = v37;
              v79 = v41;
              sub_100118994(v10, 28671, v76);

              objc_destroyWeak(&v80);
            }

          }
        }
        else
        {
          v59 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v38);
          v60 = _NRLogIsLevelEnabled(v59, 16);

          if (!v60)
          {
LABEL_52:

LABEL_53:
            goto LABEL_54;
          }
          v41 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v10 + 24), v61);
          _NRLogWithArgs(v41, 16, "%s%.30s:%-4d no service name", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_2", 881);
        }

        goto LABEL_52;
      }
    }
  }
LABEL_54:

}

void sub_10011BB48(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10011BB64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10011BB74(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 88);
  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(v1, *(_QWORD *)(a1 + 40));
}

id sub_10011BB90(void *a1, const char *a2)
{
  NSObject *v3;
  NSObject *v4;
  id v5;
  id v7;
  int IsLevelEnabled;
  id v9;
  id v10;
  int v11;
  _QWORD access_value[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = v3;
  if (!a2)
  {
    v7 = sub_100115594();
    IsLevelEnabled = _NRLogIsLevelEnabled(v7, 17);

    if (IsLevelEnabled)
    {
      v9 = sub_100115594();
      _NRLogWithArgs(v9, 17, "%s called with null key");
LABEL_9:

    }
LABEL_10:
    v5 = 0;
    goto LABEL_4;
  }
  if (!v3)
  {
    v10 = sub_100115594();
    v11 = _NRLogIsLevelEnabled(v10, 17);

    if (v11)
    {
      v9 = sub_100115594();
      _NRLogWithArgs(v9, 17, "%s called with null record");
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = sub_100118674;
  v17 = sub_100118684;
  v18 = 0;
  access_value[0] = _NSConcreteStackBlock;
  access_value[1] = 3221225472;
  access_value[2] = sub_10011CF2C;
  access_value[3] = &unk_1001B8018;
  access_value[4] = &v13;
  nw_txt_record_access_key(v3, a2, access_value);
  v5 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

LABEL_4:
  return v5;
}

void sub_10011BCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011BD04(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  nw_txt_record_t v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  int IsLevelEnabled;
  id v30;
  uint64_t v31;
  void *v32;
  _BOOL4 v33;
  unsigned int v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  uint64_t v46;
  NRDeviceEndpoint *v47;
  _BOOL4 v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  int v53;
  id v54;
  uint64_t v55;
  void *v56;
  int v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  NRDeviceEndpoint *v68;
  NRDeviceEndpoint *v69;
  _QWORD *v70;
  NSUUID *v71;
  NSUUID *v72;
  NSUUID *localIDSDeviceID;
  id v74;
  id v75;
  NSUUID *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSData *v80;
  NSData *advertisementData;
  void *v82;
  int v83;
  uint64_t v84;
  void *v85;
  int v86;
  int v87;
  void *v88;
  NSObject *v89;
  NSObject *v90;
  id v91;
  id obj;
  id v93;
  void *v94;
  void *v95;
  id v96;
  _QWORD enumerator[5];
  NRDeviceEndpoint *v98;
  id v99;
  id v100;
  unint64_t v101;

  v13 = a2;
  v14 = a3;
  obj = a4;
  v15 = a4;
  v16 = a5;
  v91 = a6;
  v96 = a6;
  v17 = a7;
  v18 = nw_browse_result_copy_txt_record_object(v13);
  v19 = sub_10011BB90(v18, "nrN");
  v101 = 0;
  if (_NRIsAppleInternal(v19))
  {
    if (qword_1001E4870 != -1)
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
    if (byte_1001E4868)
    {
      v21 = sub_10011BB90(v18, "nrF");
      if (objc_msgSend(v21, "length") == (id)8)
        __memcpy_chk(&v101, objc_msgSend(v21, "bytes"), objc_msgSend(v21, "length"), 8);

    }
  }
  v94 = v17;
  v95 = v19;
  if (*(_QWORD *)(a1 + 256) == 4)
  {
    v93 = v16;
    v22 = v15;
    v23 = v14;
    v24 = sub_10011BB90(v18, "nrAT");
    if (objc_msgSend(v24, "length"))
    {
      v25 = sub_100118A78(a1, v22, v19);
      v27 = sub_100118B54(a1, v24, v25, v17);
      if (!v27)
        goto LABEL_26;
      v28 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v26);
      IsLevelEnabled = _NRLogIsLevelEnabled(v28, 0);

      if (IsLevelEnabled)
      {
        v30 = *(id *)(a1 + 24);
        v32 = (void *)_NRCopyLogObjectForNRUUID(v30, v31);
        _NRLogWithArgs(v32, 0, "%s%.30s:%-4d discovered a valid peer %@", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]", 1002, v23);

      }
      v33 = 1;
      v34 = 1;
      if (!*(_BYTE *)(a1 + 18) || *(unsigned __int8 *)(a1 + 18) == 255)
        goto LABEL_28;
      v25 = sub_10011BB90(v18, "nrD");
      if (objc_msgSend(v25, "length"))
      {
        v89 = v13;
        v35 = sub_100118D44(a1, *(unsigned __int8 *)(a1 + 18), v22, v95);
        v34 = sub_100118B54(a1, v25, v35, v94);
        if (v34)
        {
          v37 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v36);
          v87 = _NRLogIsLevelEnabled(v37, 0);

          if (v87)
          {
            v39 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v38);
            _NRLogWithArgs(v39, 0, "%s%.30s:%-4d discovered a valid device type", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]", 1021);

          }
        }

        v13 = v89;
      }
      else
      {
LABEL_26:
        v34 = 0;
      }

      v33 = v27;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
LABEL_28:

    v48 = v34 != 0;
    goto LABEL_44;
  }
  if (!v16)
  {
    v44 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v20);
    v45 = _NRLogIsLevelEnabled(v44, 2);

    if (v45)
    {
      v47 = (NRDeviceEndpoint *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v46);
      _NRLogWithArgs(v47, 2, "%s%.30s:%-4d discovered device doesn't have IRK", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]", 1031);
LABEL_75:

      goto LABEL_76;
    }
    goto LABEL_76;
  }
  v90 = v13;
  v93 = v16;
  v40 = v16;
  v22 = v15;
  v41 = sub_100118A78(a1, v15, v19);
  v42 = v41;
  v23 = v14;
  if (*(_QWORD *)(a1 + 256) == 4)
    v43 = sub_100118E08(a1, v41);
  else
    v43 = sub_10010A150(v41, v40);
  v49 = v43;

  v50 = sub_10011BB90(v18, "nrAT");
  v33 = sub_10010B9C8(v49, v50);
  if (v33)
  {
    v52 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v51);
    v53 = _NRLogIsLevelEnabled(v52, 0);

    if (v53)
    {
      v54 = *(id *)(a1 + 24);
      v56 = (void *)_NRCopyLogObjectForNRUUID(v54, v55);
      _NRLogWithArgs(v56, 0, "%s%.30s:%-4d discovered a valid peer %@", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]", 1038, v23);

    }
    v57 = *(unsigned __int8 *)(a1 + 18);
    v48 = 1;
    if (*(_BYTE *)(a1 + 18) && v57 != 255)
    {
      v58 = v40;
      v59 = sub_100118D44(a1, v57, v22, v95);
      v60 = v59;
      if (*(_QWORD *)(a1 + 256) == 4)
        v61 = sub_100118E08(a1, v59);
      else
        v61 = sub_10010A150(v59, v58);
      v62 = v61;

      v63 = sub_10011BB90(v18, "nrD");
      v48 = sub_10010B9C8(v62, v63);
      if (v48)
      {
        v88 = v62;
        v65 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v64);
        v86 = _NRLogIsLevelEnabled(v65, 0);

        v62 = v88;
        if (v86)
        {
          v67 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v66);
          _NRLogWithArgs(v67, 0, "%s%.30s:%-4d discovered a valid device type", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]", 1056);

          v62 = v88;
        }
      }

    }
  }
  else
  {
    v48 = 0;
  }

  v13 = v90;
LABEL_44:
  v14 = v23;
  v15 = v22;
  v16 = v93;
  if (v48 && v33)
  {
    v68 = objc_alloc_init(NRDeviceEndpoint);
    v69 = v68;
    if (v68)
    {
      objc_storeStrong((id *)&v68->_serviceName, obj);
      v69->_type = *(_BYTE *)(a1 + 18);
      if (v96)
      {
        objc_storeStrong((id *)&v69->_remoteIDSDeviceID, v91);
        goto LABEL_49;
      }
    }
    else if (v96)
    {
LABEL_49:
      objc_opt_self(NRLinkDirector);
      if (qword_1001E4710 != -1)
        dispatch_once(&qword_1001E4710, &stru_1001B6E60);
      v70 = (id)qword_1001E4708;
      v71 = (NSUUID *)sub_1000AFE70(v70, 0);
      v72 = v71;
      if (v69)
      {
        v72 = v71;
        localIDSDeviceID = (NSUUID *)v69->_localIDSDeviceID;
        v69->_localIDSDeviceID = (NSString *)&v72->super.isa;
LABEL_58:

        goto LABEL_59;
      }
      goto LABEL_59;
    }
    v74 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v15);
    if (v69)
      objc_storeStrong((id *)&v69->_peerToken, v74);

    v75 = objc_alloc((Class)NSUUID);
    v70 = *(id *)(a1 + 112);
    v76 = (NSUUID *)objc_msgSend(v75, "initWithUUIDString:", v70);
    v72 = v76;
    if (v69)
    {
      v72 = v76;
      localIDSDeviceID = v69->_localToken;
      v69->_localToken = v72;
      goto LABEL_58;
    }
LABEL_59:

    if (qword_1001E4870 != -1)
      dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
    if (byte_1001E4868 && _NRIsAppleInternal(v77))
    {
      if (qword_1001E4880 != -1)
        dispatch_once(&qword_1001E4880, &stru_1001B7BD0);
      v78 = 3;
      if (!byte_1001E4878)
        v78 = 1;
      if (!v69)
      {
LABEL_68:

        if (!objc_msgSend(0, "length"))
          goto LABEL_74;
        goto LABEL_72;
      }
    }
    else
    {
      v78 = 0;
      if (!v69)
        goto LABEL_68;
    }
    v69->_receivedFlags = v101;
    v69->_localFlags = v78;
    v80 = (NSData *)sub_10011BB90(v18, "nrAD");
    advertisementData = v69->_advertisementData;
    v69->_advertisementData = v80;

    if (!-[NSData length](v69->_advertisementData, "length"))
    {
LABEL_74:
      enumerator[0] = _NSConcreteStackBlock;
      enumerator[1] = 3221225472;
      enumerator[2] = sub_10011C898;
      enumerator[3] = &unk_1001B8040;
      enumerator[4] = a1;
      v98 = v69;
      v99 = v14;
      v100 = v15;
      v47 = v69;
      nw_browse_result_enumerate_interfaces(v13, enumerator);

      goto LABEL_75;
    }
LABEL_72:
    v82 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v79);
    v83 = _NRLogIsLevelEnabled(v82, 0);

    if (v83)
    {
      v85 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v84);
      _NRLogWithArgs(v85, 0, "%s%.30s:%-4d discovered valid advertisement data", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]", 1083);

    }
    goto LABEL_74;
  }
LABEL_76:

}

void sub_10011C57C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (WeakRetained && !*((_BYTE *)WeakRetained + 21))
  {
    if (v6 || !objc_msgSend(v5, "count"))
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v8);
      IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

      if (IsLevelEnabled)
      {
        v13 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v12);
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d no fetched identities (%@)", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_5", 943, v6);

      }
    }
    else
    {
      v14 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v8);
      v15 = _NRLogIsLevelEnabled(v14, 1);

      if (v15)
      {
        v17 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v16);
        _NRLogWithArgs(v17, 1, "%s%.30s:%-4d fetched %u identities", "", "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_5", 921, objc_msgSend(v5, "count"));

      }
      v36 = (uint64_t)v9;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v18 = v5;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
      v35 = v5;
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v42;
        while (2)
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v42 != v21)
              objc_enumerationMutation(v18);
            v23 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v23, "type") == 1)
            {
              v34 = v23;
              goto LABEL_20;
            }
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
          if (v20)
            continue;
          break;
        }
      }
      v34 = 0;
LABEL_20:

      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v24 = v18;
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v38;
        do
        {
          for (j = 0; j != v26; j = (char *)j + 1)
          {
            if (*(_QWORD *)v38 != v27)
              objc_enumerationMutation(v24);
            v29 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v29, "type") != 1)
            {
              v30 = *(void **)(a1 + 32);
              v31 = *(void **)(a1 + 40);
              v32 = *(void **)(a1 + 48);
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "idsDeviceID"));
              sub_10011BD04(v36, v30, v31, v32, 0, v33, v29);

            }
          }
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
        }
        while (v26);
      }

      v6 = 0;
      v5 = v35;
      v9 = (_QWORD *)v36;
    }
  }

}

uint64_t sub_10011C898(uint64_t a1, void *a2)
{
  NSObject *v3;
  int subtype;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  int IsLevelEnabled;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v3 = a2;
  subtype = nw_interface_get_subtype(v3);
  v6 = *(_QWORD *)(a1 + 32);
  if (subtype != 5001)
  {
    if (v6)
      v14 = *(_QWORD *)(v6 + 24);
    else
      v14 = 0;
    v15 = (void *)_NRCopyLogObjectForNRUUID(v14, v5);
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 2);

    if (IsLevelEnabled)
    {
      v18 = *(_QWORD *)(a1 + 32);
      if (v18)
        v19 = *(_QWORD *)(v18 + 24);
      else
        v19 = 0;
      v20 = (void *)_NRCopyLogObjectForNRUUID(v19, v17);
      _NRLogWithArgs(v20, 2, "%s%.30s:%-4d resolving over interface %@", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]_block_invoke", 1091, v3);

    }
    v13 = nw_parameters_create();
    nw_parameters_require_interface(v13, v3);
    v21 = *(_QWORD *)(a1 + 32);
    if (v21)
      v22 = *(void **)(v21 + 96);
    else
      v22 = 0;
    objc_msgSend(v22, "addObject:", *(_QWORD *)(a1 + 40));
    sub_10011CA18(*(_QWORD *)(a1 + 32), *(void **)(a1 + 48), v13, *(void **)(a1 + 56));
    goto LABEL_17;
  }
  if (v6)
    v7 = *(_QWORD *)(v6 + 24);
  else
    v7 = 0;
  v8 = (void *)_NRCopyLogObjectForNRUUID(v7, v5);
  v9 = _NRLogIsLevelEnabled(v8, 0);

  if (v9)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      v12 = *(_QWORD *)(v11 + 24);
    else
      v12 = 0;
    v13 = _NRCopyLogObjectForNRUUID(v12, v10);
    _NRLogWithArgs(v13, 0, "%s%.30s:%-4d skipping companion interface %@", "", "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfIdentity:]_block_invoke", 1088, v3);
LABEL_17:

  }
  return 1;
}

void sub_10011CA18(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id location;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    objc_initWeak(&location, (id)a1);
    v10 = (void *)nw_resolver_create_with_endpoint(v7, v8);
    v11 = *(id *)(a1 + 40);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10011CC18;
    v23[3] = &unk_1001B8148;
    objc_copyWeak(&v27, &location);
    v12 = v10;
    v24 = v12;
    v25 = v8;
    v26 = v9;
    nw_resolver_set_update_handler(v12, v11, v23);

    v13 = *(void **)(a1 + 176);
    if (!v13)
    {
      v14 = objc_alloc_init((Class)NSMutableArray);
      v15 = *(void **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v14;

      v13 = *(void **)(a1 + 176);
    }
    objc_msgSend(v13, "addObject:", v12);
    v16 = *(id *)(a1 + 24);
    v18 = (void *)_NRCopyLogObjectForNRUUID(v16, v17);
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 0);

    if (IsLevelEnabled)
    {
      v20 = *(id *)(a1 + 24);
      v22 = (void *)_NRCopyLogObjectForNRUUID(v20, v21);
      _NRLogWithArgs(v22, 0, "%s%.30s:%-4d resolving endpoint %@", "", "-[NRDiscoveryClient resolveEndpoint:parameters:serviceName:]", 1469, v7);

    }
    objc_destroyWeak(&v27);

    objc_destroyWeak(&location);
  }

}

void sub_10011CBF0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_10011CC18(uint64_t a1, int a2, void *a3)
{
  id *WeakRetained;
  uint64_t v6;
  id *v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id *v15;
  id v16;
  id v17;

  v13 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((_BYTE *)WeakRetained + 21)
      && (objc_msgSend(WeakRetained[22], "containsObject:", *(_QWORD *)(a1 + 32)) & 1) != 0)
    {
      if (nw_array_get_count(v13))
      {
        objc_msgSend(v7[22], "removeObject:", *(_QWORD *)(a1 + 32));
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10011CD84;
        v14[3] = &unk_1001B8120;
        v15 = v7;
        v16 = *(id *)(a1 + 40);
        v17 = *(id *)(a1 + 48);
        nw_array_apply(v13, v14);

      }
      if (a2 == 2)
        nw_resolver_cancel(*(_QWORD *)(a1 + 32));
      goto LABEL_13;
    }
    WeakRetained = (id *)v7[3];
  }
  v8 = (void *)_NRCopyLogObjectForNRUUID(WeakRetained, v6);
  IsLevelEnabled = _NRLogIsLevelEnabled(v8, 2);

  if (IsLevelEnabled)
  {
    if (v7)
      v11 = v7[3];
    else
      v11 = 0;
    v12 = (void *)_NRCopyLogObjectForNRUUID(v11, v10);
    _NRLogWithArgs(v12, 2, "%s%.30s:%-4d ignoring", "", "-[NRDiscoveryClient resolveEndpoint:parameters:serviceName:]_block_invoke", 1439);

  }
LABEL_13:

}

uint64_t sub_10011CD84(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_endpoint_type_t type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int IsLevelEnabled;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  NSString *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v4 = a3;
  type = nw_endpoint_get_type(v4);
  v7 = *(_QWORD *)(a1 + 32);
  if (type == nw_endpoint_type_address)
  {
    if (v7)
      v8 = *(_QWORD *)(v7 + 24);
    else
      v8 = 0;
    v9 = (void *)_NRCopyLogObjectForNRUUID(v8, v6);
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 0);

    if (IsLevelEnabled)
    {
      v12 = *(_QWORD *)(a1 + 32);
      if (v12)
        v13 = *(_QWORD *)(v12 + 24);
      else
        v13 = 0;
      v14 = (void *)_NRCopyLogObjectForNRUUID(v13, v11);
      _NRLogWithArgs(v14, 0, "%s%.30s:%-4d resolved to address endpoint %@", "", "-[NRDiscoveryClient resolveEndpoint:parameters:serviceName:]_block_invoke_2", 1450, v4);

    }
    v15 = nw_parameters_copy_required_interface(*(nw_parameters_t *)(a1 + 40));
    v16 = v15;
    if (v15)
    {
      v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nw_interface_get_name(v15));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    }
    else
    {
      v18 = 0;
    }
    sub_100117054(*(_QWORD *)(a1 + 32), v4, *(void **)(a1 + 48), v18);

  }
  else
  {
    if (v7)
      v19 = *(_QWORD *)(v7 + 24);
    else
      v19 = 0;
    v20 = (void *)_NRCopyLogObjectForNRUUID(v19, v6);
    v21 = _NRLogIsLevelEnabled(v20, 0);

    if (v21)
    {
      v23 = *(_QWORD *)(a1 + 32);
      if (v23)
        v24 = *(_QWORD *)(v23 + 24);
      else
        v24 = 0;
      v25 = (void *)_NRCopyLogObjectForNRUUID(v24, v22);
      _NRLogWithArgs(v25, 0, "%s%.30s:%-4d resolved to endpoint %@", "", "-[NRDiscoveryClient resolveEndpoint:parameters:serviceName:]_block_invoke_2", 1447, v4);

    }
    sub_10011CA18(*(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }

  return 1;
}

uint64_t sub_10011CF2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  id v6;
  uint64_t v7;
  void *v8;

  if (a3 == 4)
  {
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a4, a5);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  return 1;
}

void sub_10011CF90(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  int IsLevelEnabled;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  id v15;

  if (_os_feature_enabled_impl("terminus", "NANLink") && !*(_QWORD *)(a1 + 232))
  {
    v15 = sub_100116D84(a1);
    if (v15)
    {
      v3 = objc_msgSend(objc_alloc((Class)WiFiAwarePublishDatapathConfiguration), "initWithServiceType:securityConfiguration:", 1, 0);
      v4 = objc_alloc_init((Class)WiFiAwarePublishServiceSpecificInfo);
      objc_msgSend(v4, "setBlob:", v15);
      objc_msgSend(v4, "setInstanceName:", *(_QWORD *)(a1 + 112));
      v5 = objc_msgSend(objc_alloc((Class)WiFiAwarePublishConfiguration), "initWithServiceName:", *(_QWORD *)(a1 + 208));
      objc_msgSend(v5, "setAuthenticationType:", 0);
      objc_msgSend(v5, "setDatapathConfiguration:", v3);
      objc_msgSend(v5, "setServiceSpecificInfo:", v4);
      v6 = objc_msgSend(objc_alloc((Class)WiFiAwarePublisher), "initWithConfiguration:", v5);
      objc_msgSend(v6, "setDelegate:", a1);
      objc_msgSend(v6, "start");
      objc_storeStrong((id *)(a1 + 232), v6);
      v8 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v7);
      IsLevelEnabled = _NRLogIsLevelEnabled(v8, 0);

      if (IsLevelEnabled)
      {
        v11 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v10);
        _NRLogWithArgs(v11, 0, "%s%.30s:%-4d NAN: publisher start", "", "-[NRDiscoveryClient startNANAdvertiser]", 2094);

      }
    }
    else
    {
      v12 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v2);
      v13 = _NRLogIsLevelEnabled(v12, 16);

      if (!v13)
      {
LABEL_11:

        return;
      }
      v3 = (id)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v14);
      _NRLogWithArgs(v3, 16, "%s%.30s:%-4d failed to create publish dictionary", "", "-[NRDiscoveryClient startNANAdvertiser]", 2074);
    }

    goto LABEL_11;
  }
}

uint64_t sub_10011D194()
{
  if (qword_1001E4870 != -1)
    dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
  if (!byte_1001E4868 || !_NRIsAppleInternal())
    return 0;
  if (qword_1001E4880 != -1)
    dispatch_once(&qword_1001E4880, &stru_1001B7BD0);
  if (byte_1001E4878)
    return 3;
  else
    return 1;
}

void sub_10011D228(uint64_t a1, uint64_t a2, void *a3)
{
  id *WeakRetained;
  id *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int IsLevelEnabled;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  int v19;
  id v20;
  uint64_t v21;
  void *v22;
  NSObject *error;

  error = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((_BYTE *)WeakRetained + 21))
    {
      v7 = *(unsigned __int8 *)(a1 + 56);
      v8 = WeakRetained[20];
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v7));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));
      v11 = *(void **)(a1 + 32);

      if (v10 == v11)
      {
        v13 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v12);
        IsLevelEnabled = _NRLogIsLevelEnabled(v13, 0);

        if (IsLevelEnabled)
        {
          v16 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v15);
          _NRLogWithArgs(v16, 0, "%s%.30s:%-4d listener entered state: %u (%@)", "", "-[NRDiscoveryClient startAdvertisingOverLinkType:]_block_invoke_2", 1280, a2, error);

        }
        if (error)
        {
          if (nw_error_get_error_domain(error) == nw_error_domain_dns && nw_error_get_error_code(error) == -65548)
          {
            sub_10011A35C((uint64_t)v6);
            sub_10011D41C((uint64_t)v6, v17);
          }
          else
          {
            sub_10011D96C((uint64_t)v6, *(unsigned __int8 *)(a1 + 56));
            sub_10011A574(v6, *(unsigned __int8 *)(a1 + 56));
          }
        }
        else if ((_DWORD)a2 == 2)
        {
          v18 = (void *)_NRCopyLogObjectForNRUUID(v6[3], v15);
          v19 = _NRLogIsLevelEnabled(v18, 0);

          if (v19)
          {
            v20 = v6[3];
            v22 = (void *)_NRCopyLogObjectForNRUUID(v20, v21);
            _NRLogWithArgs(v22, 0, "%s%.30s:%-4d advertiser started w/ service name %@", "", "-[NRDiscoveryClient startAdvertisingOverLinkType:]_block_invoke_2", 1290, *(_QWORD *)(a1 + 40));

          }
        }
      }
    }
  }

}

void sub_10011D41C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  int IsLevelEnabled;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *LogString;
  void *v45;
  int v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  void *i;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];

  if (*(_BYTE *)(a1 + 15) && !*(_QWORD *)(a1 + 112))
  {
    if (!*(_QWORD *)(a1 + 144))
    {
      v18 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), a2);
      IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

      if (!IsLevelEnabled)
        goto LABEL_33;
      v21 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v20);
      _NRLogWithArgs(v21, 16, "%s%.30s:%-4d unsupported: no PSK");
      goto LABEL_32;
    }
    if (!*(_QWORD *)(a1 + 136))
    {
      v22 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), a2);
      v23 = _NRLogIsLevelEnabled(v22, 16);

      if (!v23)
        goto LABEL_33;
      v21 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v24);
      _NRLogWithArgs(v21, 16, "%s%.30s:%-4d unsupported: no nonce");
      goto LABEL_32;
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lowercaseString"));
    v6 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v5;

    objc_opt_self(NRDiscoveryManager);
    if (qword_1001E49A8 != -1)
      dispatch_once(&qword_1001E49A8, &stru_1001B7ED8);
    v7 = (id)qword_1001E49A0;
    v8 = *(id *)(a1 + 112);
    if (v7)
    {
      v9 = (void *)v7[4];
      if (!v9)
      {
        v10 = objc_alloc_init((Class)NSMutableArray);
        v11 = (void *)v7[4];
        v7[4] = v10;

        v9 = (void *)v7[4];
      }
      objc_msgSend(v9, "addObject:", v8);
    }

    v12 = *(id *)(a1 + 112);
    v13 = *(id *)(a1 + 144);
    v14 = *(id *)(a1 + 136);
    v15 = sub_100118A78(a1, v12, v14);
    v16 = v15;
    if (*(_QWORD *)(a1 + 256) == 4)
      v17 = sub_100118E08(a1, v15);
    else
      v17 = sub_10010A150(v15, v13);
    v21 = v17;

    if (v21)
    {
      if (qword_1001E48E0 != -1)
        dispatch_once(&qword_1001E48E0, &stru_1001B7CE0);
      v26 = byte_1001E48D8;
      v27 = *(id *)(a1 + 112);
      v28 = *(id *)(a1 + 144);
      v29 = *(id *)(a1 + 136);
      v30 = sub_100118D44(a1, v26, v27, v29);
      v31 = v30;
      if (*(_QWORD *)(a1 + 256) == 4)
        v32 = sub_100118E08(a1, v30);
      else
        v32 = sub_10010A150(v30, v28);
      v36 = v32;

      objc_storeStrong((id *)(a1 + 120), v21);
      objc_storeStrong((id *)(a1 + 128), v36);
      v38 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v37);
      v39 = _NRLogIsLevelEnabled(v38, 1);

      if (v39)
      {
        v41 = *(id *)(a1 + 24);
        v43 = (void *)_NRCopyLogObjectForNRUUID(v41, v42);
        LogString = (void *)_NRKeyCreateLogString(*(_QWORD *)(a1 + 120));

        _NRLogWithArgs(v43, 1, "%s%.30s:%-4d created advertisement auth tag: %@", "", "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]", 1141, LogString);
      }
      if (*(_QWORD *)(a1 + 128))
      {
        v45 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v40);
        v46 = _NRLogIsLevelEnabled(v45, 1);

        if (v46)
        {
          v47 = *(id *)(a1 + 24);
          v49 = (void *)_NRCopyLogObjectForNRUUID(v47, v48);
          v50 = (void *)_NRKeyCreateLogString(*(_QWORD *)(a1 + 128));

          _NRLogWithArgs(v49, 1, "%s%.30s:%-4d created advertisement device type hash: %@", "", "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]", 1143, v50);
        }
      }
    }
    else
    {
      v33 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v25);
      v34 = _NRLogIsLevelEnabled(v33, 16);

      if (!v34)
      {
        v21 = 0;
        goto LABEL_32;
      }
      v36 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(a1 + 24), v35);
      _NRLogWithArgs(v36, 16, "%s%.30s:%-4d no auth tag", "", "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]", 1131);
    }

LABEL_32:
  }
LABEL_33:
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v51 = *(id *)(a1 + 104);
  v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v56, v60, 16);
  if (v52)
  {
    v53 = v52;
    v54 = *(_QWORD *)v57;
    do
    {
      for (i = 0; i != v53; i = (char *)i + 1)
      {
        if (*(_QWORD *)v57 != v54)
          objc_enumerationMutation(v51);
        sub_10011A574(a1, objc_msgSend(*(id *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i), "unsignedShortValue"));
      }
      v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v56, v60, 16);
    }
    while (v53);
  }

}

void sub_10011D96C(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  void *v8;
  NSObject *listener;

  v4 = *(id *)(a1 + 160);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
  listener = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  v6 = listener;
  if (listener)
  {
    nw_listener_cancel(listener);
    v7 = *(id *)(a1 + 160);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", 0, v8);

    v6 = listener;
  }

}

void sub_10011DA3C(_BYTE *val)
{
  _QWORD *v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id location;

  if (val)
  {
    val[19] = 1;
    objc_initWeak(&location, val);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10011DB64;
    v5[3] = &unk_1001B7F28;
    objc_copyWeak(&v6, &location);
    v2 = objc_retainBlock(v5);
    v3 = v2;
    if (val[17])
    {
      ((void (*)(_QWORD *))v2[2])(v2);
    }
    else
    {
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v4 = (id)qword_1001E4AD0;
      sub_10014ACE0((uint64_t)v4, v3);

    }
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
}

void sub_10011DB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011DB64(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  id v3;
  char *v4;
  char *v5;
  char v6;
  BOOL v7;
  id v8;
  uint64_t v9;
  id v10;
  id *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[4];
  id *v17;
  id v18;
  _QWORD v19[4];
  id *v20;
  char *v21;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (!WeakRetained || *((_BYTE *)WeakRetained + 21))
    goto LABEL_26;
  v3 = WeakRetained[3];
  if (v3)
  {
    v4 = sub_10012FFF4((uint64_t)NRDLocalDevice, v3);
    v5 = v4;
    if (v4)
    {
      if (v4[15])
      {
        v6 = 1;
        if (!v4[12])
          goto LABEL_19;
      }
      else
      {
        if (v4[14])
          v7 = 1;
        else
          v7 = *((unsigned __int16 *)v4 + 14) > 0x12u;
        v6 = v7;
        if (!v4[12])
        {
LABEL_19:
          v8 = v2[3];
          objc_opt_self(NRDLocalDevice);
          v9 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A60, "objectForKeyedSubscript:", v8));

          v10 = v2[25];
          v2[25] = (id)v9;

          if (!v2[25])
            v2[25] = CFSTR("nr-pairing");
          goto LABEL_21;
        }
      }
      if (!v4[13])
        v6 = 0;
      if ((v6 & 1) != 0)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_21:
  if (!v2[25])
    v2[25] = CFSTR("nr-default");
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10011DD88;
  v19[3] = &unk_1001B8778;
  v11 = v2;
  v20 = v11;
  v21 = v5;
  v12 = v5;
  v13 = objc_retainBlock(v19);
  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v14 = (id)qword_1001E4708;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10011E2EC;
  v16[3] = &unk_1001B7F00;
  v17 = v11;
  v18 = v13;
  v15 = v13;

LABEL_26:
}

void sub_10011DD88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  _QWORD *v9;
  void *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint32_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  int IsLevelEnabled;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  id location;
  __int16 v39;
  void **v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  __int128 *v46;
  id v47;
  __int16 v48;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 21))
      return;
    *(_BYTE *)(v3 + 20) = 1;
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 15) || (sub_10011D41C(*(_QWORD *)(a1 + 32), a2), (v4 = *(_QWORD *)(a1 + 32)) != 0))
      {
        if (*(_BYTE *)(v4 + 16))
        {
          v35 = 0u;
          v36 = 0u;
          memset(v37, 0, sizeof(v37));
          v5 = *(id *)(v4 + 104);
          v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, &v40, 16);
          if (v6)
          {
            v7 = *(_QWORD *)v36;
            do
            {
              for (i = 0; i != v6; i = (char *)i + 1)
              {
                if (*(_QWORD *)v36 != v7)
                  objc_enumerationMutation(v5);
                sub_10011ACD0(v4, objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i), "unsignedShortValue"));
              }
              v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, &v40, 16);
            }
            while (v6);
          }

        }
      }
    }
  }
  v9 = *(_QWORD **)(a1 + 40);
  if (v9)
    v9 = (_QWORD *)v9[16];
  v34 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "allowedLinkTypes"));
  if (objc_msgSend(v10, "containsObject:", &off_1001C4918)
    && (v11 = *(_BYTE **)(a1 + 40)) != 0
    && v11[9]
    && v11[20])
  {
    v12 = v11[10];

    if (!v12)
    {
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
      {
        if ((_NRIsAppleInternal(v13) & 1) != 0)
        {
          if (!*(_QWORD *)(v14 + 216))
          {
            v16 = objc_alloc_init((Class)CBAdvertiser);
            v17 = *(void **)(v14 + 216);
            *(_QWORD *)(v14 + 216) = v16;

            objc_msgSend(*(id *)(v14 + 216), "setNearbyActionType:", 5);
            objc_msgSend(*(id *)(v14 + 216), "setDispatchQueue:", *(_QWORD *)(v14 + 40));
            do
              v18 = arc4random_uniform(0xFFFFu);
            while (!(_WORD)v18);
            v39 = bswap32(v18) >> 16;
            v19 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v39, 2);
            v20 = objc_alloc_init((Class)NSMutableData);
            objc_msgSend(v20, "appendData:", v19);
            v21 = objc_alloc_init((Class)NSMutableData);
            objc_msgSend(v21, "appendData:", v19);
            v22 = *(void **)(v14 + 200);
            if (v22)
            {
              v23 = v22;
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "dataUsingEncoding:", 4));
              objc_msgSend(v21, "appendData:", v24);

            }
            *(_QWORD *)&v35 = 0;
            *((_QWORD *)&v35 + 1) = &v35;
            *(_QWORD *)&v36 = 0x3032000000;
            *((_QWORD *)&v36 + 1) = sub_100118674;
            *(_QWORD *)&v37[0] = sub_100118684;
            *((_QWORD *)&v37[0] + 1) = 0;
            objc_initWeak(&location, (id)v14);
            v40 = _NSConcreteStackBlock;
            v41 = 3221225472;
            v42 = sub_10011F46C;
            v43 = &unk_1001B81E8;
            objc_copyWeak(&v47, &location);
            v46 = &v35;
            v25 = v21;
            v44 = v25;
            v26 = v20;
            v45 = v26;
            v48 = v39;
            sub_100118994(v14, 1, &v40);

            objc_destroyWeak(&v47);
            objc_destroyWeak(&location);
            _Block_object_dispose(&v35, 8);

          }
          if (!*(_QWORD *)(v14 + 224))
          {
            v27 = objc_alloc_init((Class)CBDiscovery);
            v28 = *(void **)(v14 + 224);
            *(_QWORD *)(v14 + 224) = v27;

            objc_msgSend(*(id *)(v14 + 224), "setDispatchQueue:", *(_QWORD *)(v14 + 40));
            objc_msgSend(*(id *)(v14 + 224), "setDiscoveryFlags:", 0x20000002000000);
            objc_initWeak(&location, (id)v14);
            v40 = _NSConcreteStackBlock;
            v41 = 3221225472;
            v42 = sub_10011E8F4;
            v43 = &unk_1001B8170;
            objc_copyWeak(&v44, &location);
            objc_msgSend(*(id *)(v14 + 224), "setDeviceFoundHandler:", &v40);
            v29 = *(void **)(v14 + 224);
            *(_QWORD *)&v35 = _NSConcreteStackBlock;
            *((_QWORD *)&v35 + 1) = 3221225472;
            *(_QWORD *)&v36 = sub_10011ECF8;
            *((_QWORD *)&v36 + 1) = &unk_1001B8198;
            objc_copyWeak((id *)v37, &location);
            objc_msgSend(v29, "activateWithCompletion:", &v35);
            objc_destroyWeak((id *)v37);
            objc_destroyWeak(&v44);
            objc_destroyWeak(&location);
          }
        }
        else
        {
          v30 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v14 + 24), v15);
          IsLevelEnabled = _NRLogIsLevelEnabled(v30, 16);

          if (IsLevelEnabled)
          {
            v33 = (void *)_NRCopyLogObjectForNRUUID(*(_QWORD *)(v14 + 24), v32);
            _NRLogWithArgs(v33, 16, "%s%.30s:%-4d unsupported", "", "-[NRDiscoveryClient discoverOverBluetooth]", 1731);

          }
        }
      }
    }
  }
  else
  {

  }
}

void sub_10011E290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011E2EC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 21))
      sub_10011E318(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  }
  else
  {
    sub_10011E318(0, *(void **)(a1 + 40));
  }
}

void sub_10011E318(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  id *v15;
  id *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  BOOL v21;
  id *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  void (**v38)(_QWORD);
  id v39;
  id location;
  uint64_t __buf;
  int v42;

  v3 = a2;
  if (a1)
  {
    v4 = *(void **)(a1 + 24);
    if (v4)
      v5 = sub_1001300EC((uint64_t)NRDLocalDevice, v4, 0);
    else
      v5 = 0;
    v42 = 0;
    __buf = 0;
    arc4random_buf(&__buf, 0xCuLL);
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &__buf, 12);
    v7 = *(void **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v6;

    v8 = *(id *)(a1 + 200);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataUsingEncoding:", 4));

    if (*(_BYTE *)(a1 + 22))
    {
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("terminusdStaticSecret"), "dataUsingEncoding:", 4));
      v11 = *(id **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v10;
      v12 = 8;
LABEL_34:

      *(_QWORD *)(a1 + 256) = v12;
      v31 = *(void **)(a1 + 152);
      v32 = *(id *)(a1 + 136);
      v33 = v31;
      v34 = sub_10010B750(v33, v32, v9);
      v35 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v34;

      v3[2](v3);
LABEL_35:

      goto LABEL_36;
    }
    if (v5)
    {
      if (v5[15])
      {
        v13 = 1;
      }
      else
      {
        if (v5[14])
          v14 = 1;
        else
          v14 = *((unsigned __int16 *)v5 + 14) > 0x12u;
        v13 = v14;
      }
      if (v5[12])
      {
        if (!v5[13])
          v13 = 0;
        if (v13 == 1)
        {
          v15 = (id *)*((id *)v5 + 9);
          v16 = v15;
          if (v15)
          {
            v17 = v15[3];
            v18 = v17;
            v19 = v17 ? (void *)*((_QWORD *)v17 + 2) : 0;
          }
          else
          {
            v18 = 0;
            v19 = 0;
          }
          v20 = v19;
          v21 = v20 == 0;

          if (!v21)
          {
            v22 = (id *)*((id *)v5 + 9);
            v11 = v22;
            if (v22)
            {
              v23 = v22[3];
              v24 = v23;
              if (v23)
                v25 = (void *)*((_QWORD *)v23 + 2);
              else
                v25 = 0;
            }
            else
            {
              v24 = 0;
              v25 = 0;
            }
            objc_storeStrong((id *)(a1 + 152), v25);

            v12 = 2;
            goto LABEL_34;
          }
        }
      }
      v26 = (_QWORD *)*((_QWORD *)v5 + 19);
      if (v26)
        v26 = (_QWORD *)v26[2];
      v27 = v26;
      v28 = v27 == 0;

      if (!v28)
      {
        v29 = (_QWORD *)*((_QWORD *)v5 + 19);
        if (v29)
          v29 = (_QWORD *)v29[2];
        v30 = v29;
        v11 = *(id **)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v30;
        v12 = 1;
        goto LABEL_34;
      }
    }
    *(_QWORD *)(a1 + 256) = 4;
    objc_initWeak(&location, (id)a1);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10011E67C;
    v36[3] = &unk_1001B7F78;
    objc_copyWeak(&v39, &location);
    v38 = v3;
    v37 = v9;
    sub_100118994(a1, 1, v36);

    objc_destroyWeak(&v39);
    objc_destroyWeak(&location);
    goto LABEL_35;
  }
LABEL_36:

}

void sub_10011E658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011E67C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE *WeakRetained;
  uint64_t v8;
  id v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *i;
  void *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  if (WeakRetained && !WeakRetained[21])
  {
    if (v6 || !objc_msgSend(v5, "count"))
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v8);
      IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

      if (!IsLevelEnabled)
      {
LABEL_7:
        v14 = (void *)*((_QWORD *)v9 + 19);
        v15 = *(void **)(a1 + 32);
        v16 = *((id *)v9 + 17);
        v17 = v14;
        v18 = sub_10010B750(v17, v16, v15);
        v19 = (void *)*((_QWORD *)v9 + 18);
        *((_QWORD *)v9 + 18) = v18;

        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        goto LABEL_8;
      }
      v13 = (id)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v12);
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d no identities fetched (%@)", "", "-[NRDiscoveryClient fillInPSKDataForAuthTagWithCompletion:]_block_invoke", 671, v6);
    }
    else
    {
      v20 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v8);
      v21 = _NRLogIsLevelEnabled(v20, 16);

      if (v21)
      {
        v23 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v22);
        _NRLogWithArgs(v23, 16, "%s%.30s:%-4d fetched %u identities", "", "-[NRDiscoveryClient fillInPSKDataForAuthTagWithCompletion:]_block_invoke", 665, objc_msgSend(v5, "count"));

      }
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v13 = v5;
      v24 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (v24)
      {
        v25 = v24;
        v26 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v25; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v26)
              objc_enumerationMutation(v13);
            v28 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
            v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "deviceIRKData"));
            v30 = (void *)*((_QWORD *)v9 + 19);
            *((_QWORD *)v9 + 19) = v29;

            objc_storeStrong((id *)v9 + 24, v28);
          }
          v25 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
        }
        while (v25);
      }
    }

    goto LABEL_7;
  }
LABEL_8:

}

void sub_10011E8F4(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  void *v13;
  void *LogString;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  int v32;
  uint64_t v33;
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  id v38;
  id v39;
  id location;
  unsigned __int16 v41;

  v34 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained && !*((_BYTE *)WeakRetained + 21))
  {
    if (qword_1001E49B8 != -1)
      dispatch_once(&qword_1001E49B8, &stru_1001B8360);
    if (_NRLogIsLevelEnabled(qword_1001E49B0, 1))
    {
      if (qword_1001E49B8 != -1)
        dispatch_once(&qword_1001E49B8, &stru_1001B8360);
      _NRLogWithArgs(qword_1001E49B0, 1, "%s%.30s:%-4d found device %@", "", "-[NRDiscoveryClient discoverOverBluetooth]_block_invoke", 1752, v34);
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "watchSetupData"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "identifier"));
    v7 = v5;
    v8 = v6;
    v10 = (void *)_NRCopyLogObjectForNRUUID(v4[3], v9);
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 1);

    if (IsLevelEnabled)
    {
      v13 = (void *)_NRCopyLogObjectForNRUUID(v4[3], v12);
      LogString = (void *)_NRKeyCreateLogString(v7);
      _NRLogWithArgs(v13, 1, "%s%.30s:%-4d received data %@ len %u", "", "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]", 1807, LogString, objc_msgSend(v7, "length"));

    }
    v41 = 0;
    if ((unint64_t)objc_msgSend(v7, "length") < 3)
      goto LABEL_22;
    v15 = v7;
    v17 = v15;
    if (v15)
    {
      objc_msgSend(v15, "getBytes:length:", &v41, 2);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "subdataWithRange:", 2, (char *)objc_msgSend(v17, "length") - 2));
      v20 = (void *)_NRCopyLogObjectForNRUUID(v4[3], v19);
      v21 = _NRLogIsLevelEnabled(v20, 1);

      if (v21)
      {
        v23 = (void *)_NRCopyLogObjectForNRUUID(v4[3], v22);
        _NRLogWithArgs(v23, 1, "%s%.30s:%-4d received networkrelay nonce %u", "", "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]", 1823, v41);

      }
      v24 = objc_alloc_init((Class)NSMutableData);
      v25 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v41, 2);
      objc_msgSend(v24, "appendData:", v25);
      v26 = (void *)v4[25];
      if (v26)
      {
        v27 = v26;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "dataUsingEncoding:", 4));
        objc_msgSend(v24, "appendData:", v28);

      }
      objc_initWeak(&location, v4);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10011EDB4;
      v35[3] = &unk_1001B7FC8;
      objc_copyWeak(&v39, &location);
      v29 = v24;
      v36 = v29;
      v30 = v18;
      v37 = v30;
      v38 = v8;
      sub_100118994((uint64_t)v4, 28671, v35);

      objc_destroyWeak(&v39);
      objc_destroyWeak(&location);

    }
    else
    {
      v31 = (void *)_NRCopyLogObjectForNRUUID(v4[3], v16);
      v32 = _NRLogIsLevelEnabled(v31, 1);

      if (!v32)
      {
LABEL_21:

LABEL_22:
        goto LABEL_23;
      }
      v30 = (id)_NRCopyLogObjectForNRUUID(v4[3], v33);
      _NRLogWithArgs(v30, 1, "%s%.30s:%-4d no data", "", "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]", 1816);
    }

    goto LABEL_21;
  }
LABEL_23:

}

void sub_10011ECDC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10011ECF8(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  int IsLevelEnabled;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
    WeakRetained = (_QWORD *)WeakRetained[3];
  v6 = (void *)_NRCopyLogObjectForNRUUID(WeakRetained, v4);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 1);

  if (IsLevelEnabled)
  {
    if (v5)
      v9 = v5[3];
    else
      v9 = 0;
    v10 = (void *)_NRCopyLogObjectForNRUUID(v9, v8);
    _NRLogWithArgs(v10, 1, "%s%.30s:%-4d started discovery with err %@", "", "-[NRDiscoveryClient discoverOverBluetooth]_block_invoke_2", 1757, v11);

  }
}

void sub_10011EDB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE *WeakRetained;
  uint64_t v8;
  id v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *j;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  int v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  id v47;
  NRDeviceEndpoint *v48;
  NRDeviceEndpoint *v49;
  _QWORD *v50;
  NSString *v51;
  NSString *localIDSDeviceID;
  id v53;
  id v54;
  NSObject *v55;
  id v56;
  NRDeviceEndpoint *v57;
  id v58;
  id v59;
  int v60;
  id v61;
  int v62;
  id v63;
  BOOL issuedFirstCallback;
  id v65;
  char v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id obj;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD block[4];
  NRDeviceEndpoint *v81;
  id v82;
  id v83;
  BOOL v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  _BYTE v90[128];
  _BYTE v91[128];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!WeakRetained || WeakRetained[21])
    goto LABEL_3;
  if (v6 || !objc_msgSend(v5, "count"))
  {
    v10 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v8);
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

    if (IsLevelEnabled)
    {
      v13 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v12);
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d no identities fetched (%@)", "", "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]_block_invoke", 1861, v6);

    }
    goto LABEL_3;
  }
  v14 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v8);
  v15 = _NRLogIsLevelEnabled(v14, 1);

  if (v15)
  {
    v17 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v16);
    _NRLogWithArgs(v17, 1, "%s%.30s:%-4d fetched %u identities", "", "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]_block_invoke", 1841, objc_msgSend(v5, "count"));

  }
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v18 = v5;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v77;
    while (2)
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(_QWORD *)v77 != v20)
          objc_enumerationMutation(v18);
        v22 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v22, "type") == 1)
        {
          v19 = v22;
          goto LABEL_20;
        }
      }
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
      if (v19)
        continue;
      break;
    }
  }
LABEL_20:

  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = v18;
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v89, 16);
  if (!v23)
    goto LABEL_60;
  v24 = v23;
  v25 = *(_QWORD *)v73;
  while (2)
  {
    for (j = 0; j != v24; j = (char *)j + 1)
    {
      if (*(_QWORD *)v73 != v25)
        objc_enumerationMutation(obj);
      v27 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)j);
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "authTagForData:type:error:", *(_QWORD *)(a1 + 32), 3, 0));
      if (sub_10010B9C8(v28, *(void **)(a1 + 40)))
      {
        v30 = (void *)_NRCopyLogObjectForNRUUID(*((_QWORD *)v9 + 3), v29);
        v31 = _NRLogIsLevelEnabled(v30, 1);

        if (v31)
        {
          v32 = *((id *)v9 + 3);
          v34 = (void *)_NRCopyLogObjectForNRUUID(v32, v33);
          _NRLogWithArgs(v34, 1, "%s%.30s:%-4d found a matching identity %@", "", "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]_block_invoke", 1852, v27);

        }
        v35 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *(_QWORD *)(a1 + 48));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "idsDeviceID"));
        v37 = v35;
        v63 = v36;
        v38 = v36;
        v39 = v27;
        v70 = v19;
        if (v38)
        {
          v65 = v35;
          v67 = v39;
          v68 = v37;
          v69 = v19;
          if (v37)
          {
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v40 = *((id *)v9 + 12);
            v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v85, v91, 16);
            if (v41)
            {
              v42 = v41;
              v43 = *(_QWORD *)v86;
              while (2)
              {
                v44 = 0;
                do
                {
                  if (*(_QWORD *)v86 != v43)
                    objc_enumerationMutation(v40);
                  v45 = *(_QWORD **)(*((_QWORD *)&v85 + 1) + 8 * (_QWORD)v44);
                  if (v45)
                    v46 = (void *)v45[8];
                  else
                    v46 = 0;
                  if ((objc_msgSend(v46, "isEqualToString:", v38) & 1) != 0)
                  {
                    v48 = v45;

                    if (!v45)
                      goto LABEL_48;
                    v19 = v69;
                    goto LABEL_54;
                  }
                  v44 = (char *)v44 + 1;
                }
                while (v42 != v44);
                v47 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v85, v91, 16);
                v42 = v47;
                if (v47)
                  continue;
                break;
              }
            }

LABEL_48:
            v49 = objc_alloc_init(NRDeviceEndpoint);
            v48 = v49;
            if (v49)
            {
              v49->_type = *((_BYTE *)v9 + 18);
              objc_storeStrong((id *)&v49->_remoteIDSDeviceID, v63);
            }
            objc_opt_self(NRLinkDirector);
            if (qword_1001E4710 != -1)
              dispatch_once(&qword_1001E4710, &stru_1001B6E60);
            v50 = (id)qword_1001E4708;
            v51 = (NSString *)sub_1000AFE70(v50, 0);
            v19 = v69;
            if (v48)
            {
              localIDSDeviceID = v48->_localIDSDeviceID;
              v48->_localIDSDeviceID = v51;

LABEL_54:
              objc_storeStrong((id *)&v48->_cbUUID, v65);
              v66 = 0;
              issuedFirstCallback = v48->_issuedFirstCallback;
            }
            else
            {

              issuedFirstCallback = 0;
              v66 = 1;
            }
            v53 = *((id *)v9 + 11);
            v54 = *((id *)v9 + 9);
            v55 = *((_QWORD *)v9 + 5);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10011F440;
            block[3] = &unk_1001B80D0;
            v84 = issuedFirstCallback;
            v56 = v53;
            v82 = v56;
            v57 = v48;
            v81 = v57;
            v58 = v54;
            v83 = v58;
            dispatch_async(v55, block);
            if ((v66 & 1) == 0)
              v57->_issuedFirstCallback = 1;

            v39 = v67;
            v37 = v68;
          }
          else
          {
            v61 = sub_100115594();
            v62 = _NRLogIsLevelEnabled(v61, 17);

            v37 = 0;
            if (!v62)
              goto LABEL_59;
            v57 = (NRDeviceEndpoint *)sub_100115594();
            _NRLogWithArgs(v57, 17, "%s called with null cbUUID");
          }
        }
        else
        {
          v59 = sub_100115594();
          v60 = _NRLogIsLevelEnabled(v59, 17);

          if (!v60)
            goto LABEL_59;
          v57 = (NRDeviceEndpoint *)sub_100115594();
          _NRLogWithArgs(v57, 17, "%s called with null idsDeviceID");
        }

LABEL_59:
        goto LABEL_60;
      }

    }
    v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v72, v89, 16);
    if (v24)
      continue;
    break;
  }
LABEL_60:

LABEL_3:
}

uint64_t sub_10011F440(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 56))
  {
    v1 = *(_QWORD *)(result + 40);
    if (!v1)
      return result;
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(v1, *(_QWORD *)(result + 32));
  }
  v1 = *(_QWORD *)(result + 48);
  if (v1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(v1, *(_QWORD *)(result + 32));
  return result;
}

void sub_10011F46C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  int IsLevelEnabled;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  _QWORD *v29;
  id v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (WeakRetained && !*((_BYTE *)WeakRetained + 21))
  {
    if (v6 || !objc_msgSend(v5, "count"))
    {
      v10 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v8);
      IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

      if (IsLevelEnabled)
      {
        v13 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v12);
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d no identities fetched (%@)", "", "-[NRDiscoveryClient startBLEAdvertisements]_block_invoke", 1800, v6);

      }
    }
    else
    {
      v14 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v8);
      v15 = _NRLogIsLevelEnabled(v14, 1);

      if (v15)
      {
        v17 = (void *)_NRCopyLogObjectForNRUUID(v9[3], v16);
        _NRLogWithArgs(v17, 1, "%s%.30s:%-4d fetched %u identities", "", "-[NRDiscoveryClient startBLEAdvertisements]_block_invoke", 1786, objc_msgSend(v5, "count"));

      }
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v18 = v5;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v33 != v21)
              objc_enumerationMutation(v18);
            v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i), "authTagForData:type:error:", *(_QWORD *)(a1 + 32), 3, 0));
            v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v25 = *(void **)(v24 + 40);
            *(_QWORD *)(v24 + 40) = v23;

            objc_msgSend(*(id *)(a1 + 40), "appendData:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v20);
      }

      v26 = (void *)v9[27];
      if (v26)
      {
        objc_msgSend(v26, "setWatchSetupData:", *(_QWORD *)(a1 + 40));
        v27 = (void *)v9[27];
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10011F730;
        v28[3] = &unk_1001B81C0;
        v29 = v9;
        v30 = *(id *)(a1 + 40);
        v31 = *(_WORD *)(a1 + 64);
        objc_msgSend(v27, "activateWithCompletion:", v28);

      }
    }
  }

}

void sub_10011F730(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int IsLevelEnabled;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *LogString;
  id v13;
  id v14;

  v14 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(_QWORD *)(v4 + 24);
  else
    v5 = 0;
  v6 = (void *)_NRCopyLogObjectForNRUUID(v5, v3);
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 1);

  if (IsLevelEnabled)
  {
    v8 = *(_QWORD **)(a1 + 32);
    if (v8)
      v8 = (_QWORD *)v8[3];
    v9 = v8;
    v11 = (void *)_NRCopyLogObjectForNRUUID(v9, v10);
    LogString = (void *)_NRKeyCreateLogString(*(_QWORD *)(a1 + 40));
    v13 = objc_msgSend(*(id *)(a1 + 40), "length");

    _NRLogWithArgs(v11, 1, "%s%.30s:%-4d advertising with data: %@ (len %u, nonce %u err %@)", "", "-[NRDiscoveryClient startBLEAdvertisements]_block_invoke_2", 1796, LogString, v13, *(unsigned __int16 *)(a1 + 48), v14);
  }

}

id sub_10011F984()
{
  if (qword_1001E49C8 != -1)
    dispatch_once(&qword_1001E49C8, &stru_1001B83A8);
  return (id)qword_1001E49C0;
}

void sub_10011F9C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E49C0;
  qword_1001E49C0 = (uint64_t)v1;

}

void sub_10011FD10(uint64_t a1, double a2, double a3, double a4)
{
  unint64_t v5;
  unint64_t v6;
  double v7;
  BOOL v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = 0.0;
    if (v5)
      v8 = v6 > v5;
    else
      v8 = 0;
    v9 = 0.0;
    if (v8)
    {
      if (qword_1001E48A8 != -1)
        dispatch_once(&qword_1001E48A8, &stru_1001B7C30);
      LODWORD(a3) = dword_1001E48B0;
      LODWORD(a4) = *(_DWORD *)algn_1001E48B4;
      a4 = (double)*(unint64_t *)&a4;
      a3 = (double)*(unint64_t *)&a3 * 0.000001;
      v9 = a3 * (double)(v6 - v5) / a4;
    }
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    if (v10)
      v12 = v11 > v10;
    else
      v12 = 0;
    if (v12)
    {
      if (qword_1001E48A8 != -1)
        dispatch_once(&qword_1001E48A8, &stru_1001B7C30);
      LODWORD(a3) = dword_1001E48B0;
      LODWORD(a4) = *(_DWORD *)algn_1001E48B4;
      v7 = (double)*(unint64_t *)&a3 * 0.000001 * (double)(v11 - v10) / (double)*(unint64_t *)&a4;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(*(double *)(a1 + 16) * 1000.0) * 0.001));
    objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v13, CFSTR("uptimeInSec"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v7) * 0.001));
    objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v14, CFSTR("ikeClassDSetupTimeInSec"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v9) * 0.001));
    objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v15, CFSTR("ikeClassCSetupTimeInSec"));

    if (*(_QWORD *)(a1 + 72))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v16, CFSTR("ikeClassDAttempts"));

    }
    if (*(_QWORD *)(a1 + 64))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v17, CFSTR("ikeClassCAttempts"));

    }
    if (*(_QWORD *)(a1 + 24))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v18, CFSTR("totalIKEControlPackets"));

    }
    if (*(_QWORD *)(a1 + 80))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v19, CFSTR("totalBytesSent"));

    }
    if (*(_QWORD *)(a1 + 88))
    {
      v20 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"));
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v20, CFSTR("totalBytesReceived"));

    }
  }
}

void sub_100120038(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  _QWORD v11[4];
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  if (a1)
  {
    v4 = *(id *)(a1 + 8);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    v7 = v5;
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v5);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i), "BOOLValue") & 1) != 0)
          {

            if (qword_1001E49C8 != -1)
              dispatch_once(&qword_1001E49C8, &stru_1001B83A8);
            if (_NRLogIsLevelEnabled(qword_1001E49C0, 0))
            {
              if (qword_1001E49C8 != -1)
                dispatch_once(&qword_1001E49C8, &stru_1001B83A8);
              _NRLogWithArgs(qword_1001E49C0, 0, "%s%.30s:%-4d AnalyticsReport - %@ : %@", "", "-[NRAnalytics reportEvent:]", 75, v3, v4);
            }
            v11[0] = _NSConcreteStackBlock;
            v11[1] = 3221225472;
            v11[2] = sub_100120240;
            v11[3] = &unk_1001B8388;
            v12 = v4;
            AnalyticsSendEventLazy(v3, v11);
            v7 = v12;
            goto LABEL_18;
          }
        }
        v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v8)
          continue;
        break;
      }
      v7 = v5;
    }
LABEL_18:

  }
}

id sub_100120240(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

_QWORD *sub_100121C94(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  void *v7;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  objc_super v18;

  v3 = a2;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)NRAnalyticsLinkUpgradeReport;
    v4 = objc_msgSendSuper2(&v18, "init");
    if (!v4)
    {
      v9 = sub_10011F984();
      IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

      if (IsLevelEnabled)
      {
        v11 = sub_10011F984();
        _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRAnalyticsLinkUpgradeReport initWithDictionary:]", 378);

      }
      v12 = _os_log_pack_size(12);
      v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "-[NRAnalyticsLinkUpgradeReport initWithDictionary:]";
      v16 = sub_10011F984();
      _NRLogAbortWithPack(v16, v13);
    }
    v5 = v4;
    v6 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v3);
    objc_msgSend(v6, "addEntriesFromDictionary:", v5[1]);
    v7 = (void *)v5[1];
    v5[1] = v6;

    a1 = v5;
  }

  return a1;
}

void sub_100121E18(void *a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  __CFString *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint8_t buf[4];
  void *v22;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (qword_1001E49E8 != -1)
    dispatch_once(&qword_1001E49E8, &stru_1001B83C8);
  if (objc_msgSend(v8, "length"))
    v10 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithFormat:", CFSTR("%@ "), v8);
  else
    v10 = objc_alloc_init((Class)NSMutableString);
  v11 = v10;
  if (a2 <= 3999)
  {
    if (a2 <= 2000)
    {
      switch(a2)
      {
        case 1000:
          v12 = CFSTR("LD_Create");
          break;
        case 1001:
          v12 = CFSTR("LD_Start");
          break;
        case 1002:
          v12 = CFSTR("LD_Ready");
          break;
        case 1003:
          v12 = CFSTR("LD_Cancel");
          break;
        case 1004:
          v12 = CFSTR("LD_ReceivedLinkAvailable");
          break;
        case 1005:
          v12 = CFSTR("LD_ReceivedLinkReady");
          break;
        case 1006:
          v12 = CFSTR("LD_ReceivedLinkSuspended");
          break;
        case 1007:
          v12 = CFSTR("LD_ReceivedLinkUnavailable");
          break;
        case 1008:
          v12 = CFSTR("LD_PreferWiFiRequest");
          break;
        case 1009:
          v12 = CFSTR("LD_RejectPreferWiFiRequest");
          break;
        case 1010:
          v12 = CFSTR("LD_UpdateWiFiAddress");
          break;
        case 1011:
          v12 = CFSTR("LD_ToggleWiFi");
          break;
        case 1012:
          v12 = CFSTR("LD_PrimaryLinkChanged");
          break;
        case 1013:
          v12 = CFSTR("LD_CancelAllLinks");
          break;
        case 1014:
          v12 = CFSTR("LD_UnknownNRUUID");
          break;
        case 1015:
          v12 = CFSTR("LD_SaveOrphanedDeviceMonitorConnection");
          break;
        case 1016:
          v12 = CFSTR("LD_AdoptOrphanedDeviceMonitorConnection");
          break;
        case 1017:
          v12 = CFSTR("LD_RemoveOrphanedDeviceMonitorConnection");
          break;
        case 1018:
          v12 = CFSTR("LD_ReceivedIRATLinkRecommendation");
          break;
        case 1019:
          v12 = CFSTR("LD_RecommendedLinkReceived");
          break;
        case 1020:
          v12 = CFSTR("LD_PreferWiFiRequestAckSent");
          break;
        case 1021:
          v12 = CFSTR("LD_PreferWiFiRequestAckReceived");
          break;
        case 1022:
          v12 = CFSTR("LD_SaveOrphanedDevicePreferencesConnection");
          break;
        case 1023:
          v12 = CFSTR("LD_AdoptOrphanedDevicePreferencesConnection");
          break;
        case 1024:
          v12 = CFSTR("LD_RemoveOrphanedDevicePreferencesConnection");
          break;
        case 1025:
          v12 = CFSTR("LD_DisableRangeExtension");
          break;
        case 1026:
          v12 = CFSTR("LD_DisablePreferWiFi");
          break;
        case 1027:
          v12 = CFSTR("LD_FixedInterfaceModeEnable");
          break;
        case 1028:
          v12 = CFSTR("LD_FixedInterfaceModeDisable");
          break;
        case 1029:
          v12 = CFSTR("LD_ForcedWoWEnable");
          break;
        case 1030:
          v12 = CFSTR("LD_ForcedWoWDisable");
          break;
        case 1031:
          v12 = CFSTR("LD_AvoidCompanionNotifyPosted");
          break;
        case 1032:
          v12 = CFSTR("LD_AOVPNDetected");
          break;
        case 1033:
          v12 = CFSTR("LD_DeviceSetupInProgress");
          break;
        case 1034:
          v12 = CFSTR("LD_IgnorePreferWiFiRequest");
          break;
        case 1035:
          v12 = CFSTR("LD_SendBufferLimitSet");
          break;
        case 1036:
          v12 = CFSTR("LD_SendBufferLimitReset");
          break;
        case 1037:
          v12 = CFSTR("LD_AOVPNConfigAdded");
          break;
        case 1038:
          v12 = CFSTR("LD_AOVPNConfigRemoved");
          break;
        case 1039:
          v12 = CFSTR("LD_EnableBluetoothPacketParser");
          break;
        case 1040:
          v12 = CFSTR("LD_UpdateAWDLAddress");
          break;
        case 1041:
          v12 = CFSTR("LD_AddEphemeralDevice");
          break;
        case 1042:
          v12 = CFSTR("LD_RemoveEphemeralDevice");
          break;
        case 1043:
          v12 = CFSTR("LD_ForceStartQuickRelay");
          break;
        case 1044:
        case 1045:
        case 1046:
        case 1052:
        case 1053:
        case 1054:
        case 1055:
        case 1056:
        case 1057:
        case 1058:
        case 1059:
        case 1060:
        case 1061:
        case 1062:
        case 1063:
        case 1064:
        case 1065:
        case 1066:
        case 1067:
        case 1068:
        case 1069:
        case 1070:
        case 1071:
        case 1072:
        case 1073:
        case 1074:
        case 1075:
        case 1076:
        case 1077:
        case 1078:
        case 1079:
        case 1080:
        case 1081:
        case 1082:
        case 1083:
        case 1084:
        case 1085:
        case 1086:
        case 1087:
        case 1088:
        case 1089:
        case 1090:
        case 1091:
        case 1092:
        case 1093:
        case 1094:
        case 1095:
        case 1096:
        case 1097:
        case 1098:
        case 1099:
        case 1100:
        case 1101:
        case 1102:
        case 1103:
        case 1104:
        case 1105:
        case 1106:
        case 1107:
        case 1108:
        case 1109:
        case 1110:
        case 1111:
        case 1112:
        case 1113:
        case 1114:
        case 1115:
        case 1116:
        case 1117:
        case 1118:
        case 1119:
        case 1120:
        case 1121:
        case 1122:
        case 1123:
        case 1124:
        case 1125:
        case 1126:
        case 1127:
        case 1128:
        case 1129:
        case 1130:
        case 1131:
        case 1132:
        case 1133:
        case 1134:
        case 1135:
        case 1136:
        case 1137:
        case 1138:
        case 1139:
        case 1140:
        case 1141:
        case 1142:
        case 1143:
        case 1144:
        case 1145:
        case 1146:
        case 1147:
        case 1148:
        case 1149:
        case 1150:
        case 1151:
        case 1152:
        case 1153:
        case 1154:
        case 1155:
        case 1156:
        case 1157:
        case 1158:
        case 1159:
        case 1160:
        case 1161:
        case 1162:
        case 1163:
        case 1164:
        case 1165:
        case 1166:
        case 1167:
        case 1168:
        case 1169:
        case 1170:
        case 1171:
        case 1172:
        case 1173:
        case 1174:
        case 1175:
        case 1176:
        case 1177:
        case 1178:
        case 1179:
        case 1180:
        case 1181:
        case 1182:
        case 1183:
        case 1184:
        case 1185:
        case 1186:
        case 1187:
        case 1188:
        case 1189:
        case 1190:
        case 1191:
        case 1192:
        case 1193:
        case 1194:
        case 1195:
        case 1196:
        case 1197:
        case 1198:
        case 1199:
        case 1200:
        case 1201:
        case 1202:
        case 1203:
        case 1204:
        case 1205:
        case 1206:
        case 1207:
        case 1208:
        case 1209:
        case 1210:
        case 1211:
        case 1212:
        case 1213:
        case 1214:
        case 1215:
        case 1216:
        case 1217:
        case 1218:
        case 1219:
        case 1220:
        case 1221:
        case 1222:
        case 1223:
        case 1224:
        case 1225:
        case 1226:
        case 1227:
        case 1228:
        case 1229:
        case 1230:
        case 1231:
        case 1232:
        case 1233:
        case 1234:
        case 1235:
        case 1236:
        case 1237:
        case 1238:
        case 1239:
        case 1240:
        case 1241:
        case 1242:
        case 1243:
        case 1244:
        case 1245:
        case 1246:
        case 1247:
        case 1248:
        case 1249:
        case 1250:
        case 1251:
        case 1252:
        case 1253:
        case 1254:
        case 1255:
        case 1256:
        case 1257:
        case 1258:
        case 1259:
        case 1260:
        case 1261:
        case 1262:
        case 1263:
        case 1264:
        case 1265:
        case 1266:
        case 1267:
        case 1268:
        case 1269:
        case 1270:
        case 1271:
        case 1272:
        case 1273:
        case 1274:
        case 1275:
        case 1276:
        case 1277:
        case 1278:
        case 1279:
        case 1280:
        case 1281:
        case 1282:
        case 1283:
        case 1284:
        case 1285:
        case 1286:
        case 1287:
        case 1288:
        case 1289:
        case 1290:
        case 1291:
        case 1292:
        case 1293:
        case 1294:
        case 1295:
        case 1296:
        case 1297:
        case 1298:
        case 1299:
        case 1300:
        case 1301:
        case 1302:
        case 1303:
        case 1304:
        case 1305:
        case 1306:
        case 1307:
        case 1308:
        case 1309:
        case 1310:
        case 1311:
        case 1312:
        case 1313:
        case 1314:
        case 1315:
        case 1316:
        case 1317:
        case 1318:
        case 1319:
        case 1320:
        case 1321:
        case 1322:
        case 1323:
        case 1324:
        case 1325:
        case 1326:
        case 1327:
        case 1328:
        case 1329:
        case 1330:
        case 1331:
        case 1332:
        case 1333:
        case 1334:
        case 1335:
        case 1336:
        case 1337:
        case 1338:
        case 1339:
        case 1340:
        case 1341:
        case 1342:
        case 1343:
        case 1344:
        case 1345:
        case 1346:
        case 1347:
        case 1348:
        case 1349:
        case 1350:
        case 1351:
        case 1352:
        case 1353:
        case 1354:
        case 1355:
        case 1356:
        case 1357:
        case 1358:
        case 1359:
        case 1360:
        case 1361:
        case 1362:
        case 1363:
        case 1364:
        case 1365:
        case 1366:
        case 1367:
        case 1368:
        case 1369:
        case 1370:
        case 1371:
        case 1372:
        case 1373:
        case 1374:
        case 1375:
        case 1376:
        case 1377:
        case 1378:
        case 1379:
        case 1380:
        case 1381:
        case 1382:
        case 1383:
        case 1384:
        case 1385:
        case 1386:
        case 1387:
        case 1388:
        case 1389:
        case 1390:
        case 1391:
        case 1392:
        case 1393:
        case 1394:
        case 1395:
        case 1396:
        case 1397:
        case 1398:
        case 1399:
        case 1400:
        case 1401:
        case 1402:
        case 1403:
        case 1404:
        case 1405:
        case 1406:
        case 1407:
        case 1408:
        case 1409:
        case 1410:
        case 1411:
        case 1412:
        case 1413:
        case 1414:
        case 1415:
        case 1416:
        case 1417:
        case 1418:
        case 1419:
        case 1420:
        case 1421:
        case 1422:
        case 1423:
        case 1424:
        case 1425:
        case 1426:
        case 1427:
        case 1428:
        case 1429:
        case 1430:
        case 1431:
        case 1432:
        case 1433:
        case 1434:
        case 1435:
        case 1436:
        case 1437:
        case 1438:
        case 1439:
        case 1440:
        case 1441:
        case 1442:
        case 1443:
        case 1444:
        case 1445:
        case 1446:
        case 1447:
        case 1448:
        case 1449:
        case 1450:
        case 1451:
        case 1452:
        case 1453:
        case 1454:
        case 1455:
        case 1456:
        case 1457:
        case 1458:
        case 1459:
        case 1460:
        case 1461:
        case 1462:
        case 1463:
        case 1464:
        case 1465:
        case 1466:
        case 1467:
        case 1468:
        case 1469:
        case 1470:
        case 1471:
        case 1472:
        case 1473:
        case 1474:
        case 1475:
        case 1476:
        case 1477:
        case 1478:
        case 1479:
        case 1480:
        case 1481:
        case 1482:
        case 1483:
        case 1484:
        case 1485:
        case 1486:
        case 1487:
        case 1488:
        case 1489:
        case 1490:
        case 1491:
        case 1492:
        case 1493:
        case 1494:
        case 1495:
        case 1496:
        case 1497:
        case 1498:
        case 1499:
          goto LABEL_319;
        case 1047:
          v12 = CFSTR("LD_ManagerCreateFailed");
          break;
        case 1048:
          v12 = CFSTR("LD_PluggedInStateChanged");
          break;
        case 1049:
          v12 = CFSTR("LD_ThermalPressureChanged");
          break;
        case 1050:
          v12 = CFSTR("LD_LinkUpgradeRequest");
          break;
        case 1051:
          v12 = CFSTR("LD_UpdateCountryCode");
          break;
        case 1500:
          v12 = CFSTR("DC_Create");
          break;
        case 1501:
          v12 = CFSTR("DC_Start");
          break;
        case 1502:
          v12 = CFSTR("DC_Cancel");
          break;
        default:
          if (a2)
            goto LABEL_319;
          v12 = CFSTR("Invalid");
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 3000:
          v12 = CFSTR("L_Create");
          break;
        case 3001:
          v12 = CFSTR("L_Start");
          break;
        case 3002:
          v12 = CFSTR("L_Suspend");
          break;
        case 3003:
          v12 = CFSTR("L_Resume");
          break;
        case 3004:
          v12 = CFSTR("L_Ready");
          break;
        case 3005:
          v12 = CFSTR("L_Cancel");
          break;
        case 3006:
          v12 = CFSTR("L_SendData");
          break;
        case 3007:
          v12 = CFSTR("L_ReceiveData");
          break;
        case 3008:
          v12 = CFSTR("L_ChangeState");
          break;
        case 3009:
          v12 = CFSTR("L_IKEChangeState");
          break;
        case 3010:
          v12 = CFSTR("L_ReceivedPrelude");
          break;
        case 3011:
          v12 = CFSTR("L_InitiateIKEPairingFromIDS");
          break;
        case 3012:
          v12 = CFSTR("L_RespondIKEPairingFromIDS");
          break;
        case 3013:
          v12 = CFSTR("L_InitiateIKEPairingWithOOBK");
          break;
        case 3014:
          v12 = CFSTR("L_RespondIKEPairingWithOOBK");
          break;
        case 3015:
          v12 = CFSTR("L_InitiateIKE");
          break;
        case 3016:
          v12 = CFSTR("L_RespondIKE");
          break;
        case 3017:
          v12 = CFSTR("L_CreationFailed");
          break;
        case 3018:
          v12 = CFSTR("L_IKEDisconnectionError");
          break;
        case 3019:
          v12 = CFSTR("L_RejectingIKENoKeys");
          break;
        case 3020:
          v12 = CFSTR("L_RejectingIKEKeysLocked");
          break;
        case 3021:
          v12 = CFSTR("L_RejectingIKEBadAuth");
          break;
        case 3022:
          v12 = CFSTR("L_RejectingIKENoIdentity");
          break;
        case 3023:
          v12 = CFSTR("L_RejectingIKEBadIdentity");
          break;
        case 3024:
          v12 = CFSTR("L_RejectingIKENoChildConfig");
          break;
        case 3025:
          v12 = CFSTR("L_RetryInterfaceCreation");
          break;
        case 3026:
          v12 = CFSTR("L_RetryIKESessionCreation");
          break;
        case 3027:
        case 3028:
        case 3029:
        case 3030:
        case 3031:
        case 3032:
        case 3033:
        case 3034:
        case 3035:
        case 3036:
        case 3037:
        case 3038:
        case 3039:
        case 3040:
        case 3041:
        case 3042:
        case 3043:
        case 3044:
        case 3045:
        case 3046:
        case 3047:
        case 3048:
        case 3049:
        case 3050:
        case 3051:
        case 3052:
        case 3053:
        case 3054:
        case 3055:
        case 3056:
        case 3057:
        case 3058:
        case 3059:
        case 3060:
        case 3061:
        case 3062:
        case 3063:
        case 3064:
        case 3065:
        case 3066:
        case 3067:
        case 3068:
        case 3069:
        case 3070:
        case 3071:
        case 3072:
        case 3073:
        case 3074:
        case 3075:
        case 3076:
        case 3077:
        case 3078:
        case 3079:
        case 3080:
        case 3081:
        case 3082:
        case 3083:
        case 3084:
        case 3085:
        case 3086:
        case 3087:
        case 3088:
        case 3089:
        case 3090:
        case 3091:
        case 3092:
        case 3093:
        case 3094:
        case 3095:
        case 3096:
        case 3097:
        case 3098:
        case 3099:
        case 3102:
        case 3103:
        case 3104:
        case 3105:
        case 3106:
        case 3107:
        case 3108:
        case 3109:
        case 3110:
        case 3111:
        case 3112:
        case 3113:
        case 3114:
        case 3115:
        case 3116:
        case 3117:
        case 3118:
        case 3119:
        case 3120:
        case 3121:
        case 3122:
        case 3123:
        case 3124:
        case 3125:
        case 3126:
        case 3127:
        case 3128:
        case 3129:
        case 3130:
        case 3131:
        case 3132:
        case 3133:
        case 3134:
        case 3135:
        case 3136:
        case 3137:
        case 3138:
        case 3139:
        case 3140:
        case 3141:
        case 3142:
        case 3143:
        case 3144:
        case 3145:
        case 3146:
        case 3147:
        case 3148:
        case 3149:
        case 3150:
        case 3151:
        case 3152:
        case 3153:
        case 3154:
        case 3155:
        case 3156:
        case 3157:
        case 3158:
        case 3159:
        case 3160:
        case 3161:
        case 3162:
        case 3163:
        case 3164:
        case 3165:
        case 3166:
        case 3167:
        case 3168:
        case 3169:
        case 3170:
        case 3171:
        case 3172:
        case 3173:
        case 3174:
        case 3175:
        case 3176:
        case 3177:
        case 3178:
        case 3179:
        case 3180:
        case 3181:
        case 3182:
        case 3183:
        case 3184:
        case 3185:
        case 3186:
        case 3187:
        case 3188:
        case 3189:
        case 3190:
        case 3191:
        case 3192:
        case 3193:
        case 3194:
        case 3195:
        case 3196:
        case 3197:
        case 3198:
        case 3199:
        case 3202:
        case 3203:
        case 3204:
        case 3205:
        case 3206:
        case 3207:
        case 3208:
        case 3209:
        case 3211:
        case 3212:
        case 3213:
        case 3214:
        case 3215:
        case 3216:
        case 3217:
        case 3218:
        case 3219:
        case 3220:
        case 3221:
        case 3222:
        case 3223:
        case 3224:
        case 3225:
        case 3226:
        case 3227:
        case 3228:
        case 3229:
        case 3230:
        case 3231:
        case 3232:
        case 3233:
        case 3234:
        case 3235:
        case 3236:
        case 3237:
        case 3238:
        case 3239:
        case 3240:
        case 3241:
        case 3242:
        case 3243:
        case 3244:
        case 3245:
        case 3246:
        case 3247:
        case 3248:
        case 3249:
        case 3250:
        case 3251:
        case 3252:
        case 3253:
        case 3254:
        case 3255:
        case 3256:
        case 3257:
        case 3258:
        case 3259:
        case 3260:
        case 3261:
        case 3262:
        case 3263:
        case 3264:
        case 3265:
        case 3266:
        case 3267:
        case 3268:
        case 3269:
        case 3270:
        case 3271:
        case 3272:
        case 3273:
        case 3274:
        case 3275:
        case 3276:
        case 3277:
        case 3278:
        case 3279:
        case 3280:
        case 3281:
        case 3282:
        case 3283:
        case 3284:
        case 3285:
        case 3286:
        case 3287:
        case 3288:
        case 3289:
        case 3290:
        case 3291:
        case 3292:
        case 3293:
        case 3294:
        case 3295:
        case 3296:
        case 3297:
        case 3298:
        case 3299:
          goto LABEL_319;
        case 3100:
          v12 = CFSTR("L_BluetoothPipeDisconnected");
          break;
        case 3101:
          v12 = CFSTR("L_BluetoothCreationFailedWithPipe");
          break;
        case 3200:
          v12 = CFSTR("L_WiFiCreationFailed");
          break;
        case 3201:
          v12 = CFSTR("L_AWDLCreationFailed");
          break;
        case 3210:
          v12 = CFSTR("L_WiredCreationFailed");
          break;
        case 3300:
          v12 = CFSTR("L_PowerAssertionEnable");
          break;
        case 3301:
          v12 = CFSTR("L_PowerAssertionEnableFailure");
          break;
        case 3302:
          v12 = CFSTR("L_PowerAssertionDisable");
          break;
        case 3303:
          v12 = CFSTR("L_PowerAssertionDisableFailure");
          break;
        default:
          switch(a2)
          {
            case 2001:
              v12 = CFSTR("LM_Start");
              break;
            case 2002:
              v12 = CFSTR("LM_Ready");
              break;
            case 2003:
              v12 = CFSTR("LM_Cancel");
              break;
            case 2004:
              v12 = CFSTR("LM_LinkAvailable");
              break;
            case 2005:
              v12 = CFSTR("LM_LinkReady");
              break;
            case 2006:
              v12 = CFSTR("LM_LinkSuspended");
              break;
            case 2007:
              v12 = CFSTR("LM_LinkUnavailable");
              break;
            case 2008:
              v12 = CFSTR("LM_LinkReceivedData");
              break;
            case 2009:
              v12 = CFSTR("LM_CancelAllLinks");
              break;
            case 2010:
              v12 = CFSTR("LM_AlwaysOnWiFiQueryStart");
              break;
            case 2011:
              v12 = CFSTR("LM_AlwaysOnWiFiQueryInProgress");
              break;
            case 2012:
              v12 = CFSTR("LM_AlwaysOnWiFiQueryComplete");
              break;
            case 2013:
              v12 = CFSTR("LM_LinkQualityUpdate");
              break;
            case 2014:
              v12 = CFSTR("LM_AWDLSetupStart");
              break;
            case 2015:
              v12 = CFSTR("LM_AWDLSetupFailed");
              break;
            case 2016:
              v12 = CFSTR("LM_AWDLSetupComplete");
              break;
            default:
              switch(a2)
              {
                case 3400:
                  v12 = CFSTR("L_UpgradeSendLocalKeys");
                  break;
                case 3401:
                  v12 = CFSTR("L_UpgradeReceiveRemoteKeys");
                  break;
                case 3402:
                  v12 = CFSTR("L_UpgradeSendLocalKeysEncryptedWithIDS");
                  break;
                case 3403:
                  v12 = CFSTR("L_UpgradeReceiveRemoteKeysEncryptedWithIDS");
                  break;
                case 3500:
                  v12 = CFSTR("BT_PeripheralManagerStateChange");
                  break;
                case 3501:
                  v12 = CFSTR("BT_PeripheralManagerAdvertisingStart");
                  break;
                case 3502:
                  v12 = CFSTR("BT_PeripheralManagerAdvertisingStarted");
                  break;
                case 3503:
                  v12 = CFSTR("BT_PeripheralManagerAdvertisingStartFailed");
                  break;
                case 3504:
                  v12 = CFSTR("BT_PeripheralManagerAdvertisingStop");
                  break;
                case 3505:
                  v12 = CFSTR("BT_PeripheralManagerAdvertisingStopped");
                  break;
                case 3506:
                  v12 = CFSTR("BT_PeripheralManagerAdvertisingStopFailed");
                  break;
                default:
                  goto LABEL_319;
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    if (a2 <= 10000)
    {
      if (a2 > 4899)
      {
        if (a2 > 5400)
        {
          switch(a2)
          {
            case 5500:
              v12 = CFSTR("QueryKeys");
              break;
            case 5501:
              v12 = CFSTR("QueriedKeys");
              break;
            case 5502:
              v12 = CFSTR("QueryKeysFailed");
              break;
            case 5503:
              v12 = CFSTR("EncryptLocalSuccess");
              break;
            case 5504:
              v12 = CFSTR("EncryptLocalFailed");
              break;
            case 5505:
              v12 = CFSTR("DecryptRemoteSuccess");
              break;
            case 5506:
              v12 = CFSTR("DecryptRemoteFailed");
              break;
            default:
              switch(a2)
              {
                case 9000:
                  v12 = CFSTR("DaemonStart");
                  break;
                case 9001:
                  v12 = CFSTR("CompanionLinkChangeEnabledState");
                  break;
                case 9002:
                  v12 = CFSTR("TestServerSetup");
                  break;
                case 9003:
                  v12 = CFSTR("SimulatedCrash");
                  break;
                default:
                  if (a2 != 5401)
                    goto LABEL_319;
                  v12 = CFSTR("NotifyClientsFirstUnlockClassC");
                  break;
              }
              break;
          }
        }
        else
        {
          switch(a2)
          {
            case 4900:
              v12 = CFSTR("BT_MiscNoBTCallbacksReceived");
              break;
            case 4901:
            case 4902:
            case 4903:
            case 4904:
            case 4905:
            case 4906:
            case 4907:
            case 4908:
            case 4909:
            case 4910:
            case 4911:
            case 4912:
            case 4913:
            case 4914:
            case 4915:
            case 4916:
            case 4917:
            case 4918:
            case 4919:
            case 4920:
            case 4921:
            case 4922:
            case 4923:
            case 4924:
            case 4925:
            case 4926:
            case 4927:
            case 4928:
            case 4929:
            case 4930:
            case 4931:
            case 4932:
            case 4933:
            case 4934:
            case 4935:
            case 4936:
            case 4937:
            case 4938:
            case 4939:
            case 4940:
            case 4941:
            case 4942:
            case 4943:
            case 4944:
            case 4945:
            case 4946:
            case 4947:
            case 4948:
            case 4949:
            case 4950:
            case 4951:
            case 4952:
            case 4953:
            case 4954:
            case 4955:
            case 4956:
            case 4957:
            case 4958:
            case 4959:
            case 4960:
            case 4961:
            case 4962:
            case 4963:
            case 4964:
            case 4965:
            case 4966:
            case 4967:
            case 4968:
            case 4969:
            case 4970:
            case 4971:
            case 4972:
            case 4973:
            case 4974:
            case 4975:
            case 4976:
            case 4977:
            case 4978:
            case 4979:
            case 4980:
            case 4981:
            case 4982:
            case 4983:
            case 4984:
            case 4985:
            case 4986:
            case 4987:
            case 4988:
            case 4989:
            case 4990:
            case 4991:
            case 4992:
            case 4993:
            case 4994:
            case 4995:
            case 4996:
            case 4997:
            case 4998:
            case 4999:
              goto LABEL_319;
            case 5000:
              v12 = CFSTR("Device_Create");
              break;
            case 5001:
              v12 = CFSTR("Device_Register");
              break;
            case 5002:
              v12 = CFSTR("Device_Unregister");
              break;
            case 5003:
              v12 = CFSTR("Device_Enable");
              break;
            case 5004:
              v12 = CFSTR("Device_Disable");
              break;
            case 5005:
              v12 = CFSTR("Device_GenerateLocalKeys");
              break;
            case 5006:
              v12 = CFSTR("Device_SaveRemoteKeys");
              break;
            case 5007:
              v12 = CFSTR("Device_Registered");
              break;
            case 5008:
              v12 = CFSTR("Device_RegisterFailed");
              break;
            case 5009:
              v12 = CFSTR("Device_UnknownNRUUID");
              break;
            case 5010:
              v12 = CFSTR("Device_InvalidOperationOnUnregisteredDevice");
              break;
            case 5011:
              v12 = CFSTR("Device_UpdateOperationalProperties");
              break;
            case 5012:
              v12 = CFSTR("Device_MergeOperationalProperties");
              break;
            default:
              if (a2 != 5400)
                goto LABEL_319;
              v12 = CFSTR("LockStateUpdate");
              break;
          }
        }
      }
      else
      {
        switch(a2)
        {
          case 4000:
            v12 = CFSTR("BT_PeripheralConnect");
            break;
          case 4001:
            v12 = CFSTR("BT_PeripheralConnected");
            break;
          case 4002:
            v12 = CFSTR("BT_PeripheralConnectFailed");
            break;
          case 4003:
            v12 = CFSTR("BT_PeripheralDisconnect");
            break;
          case 4004:
            v12 = CFSTR("BT_PeripheralDisconnected");
            break;
          case 4005:
            v12 = CFSTR("BT_PeripheralConnectSkipMissingPeripheral");
            break;
          case 4006:
            v12 = CFSTR("BT_PeripheralConnectSkipMissingUUID");
            break;
          case 4007:
            v12 = CFSTR("BT_PeripheralAddReference");
            break;
          case 4008:
            v12 = CFSTR("BT_PeripheralRemoveReference");
            break;
          case 4009:
            v12 = CFSTR("BT_PeripheralRetrieveAll");
            break;
          case 4010:
            v12 = CFSTR("BT_PeripheralRetrievedAll");
            break;
          case 4011:
            v12 = CFSTR("BT_PeripheralNotRetrieving");
            break;
          case 4012:
            v12 = CFSTR("BT_PeripheralScanStart");
            break;
          case 4013:
            v12 = CFSTR("BT_PeripheralDiscovered");
            break;
          case 4014:
            v12 = CFSTR("BT_PeripheralScanStop");
            break;
          case 4015:
            v12 = CFSTR("BT_PeripheralHasUnpairedBluetooth");
            break;
          case 4100:
            v12 = CFSTR("BT_CentralManagerStateChange");
            break;
          case 4200:
            v12 = CFSTR("BT_PipeManagerStateChange");
            break;
          case 4201:
            v12 = CFSTR("BT_PipeRegister");
            break;
          case 4202:
            v12 = CFSTR("BT_PipeRegistered");
            break;
          case 4203:
            v12 = CFSTR("BT_PipeRegisteredUnknown");
            break;
          case 4204:
            v12 = CFSTR("BT_PipeRegisterFailed");
            break;
          case 4205:
            v12 = CFSTR("BT_PipeRegisterFailedUnknown");
            break;
          case 4206:
            v12 = CFSTR("BT_PipeUnregister");
            break;
          case 4207:
            v12 = CFSTR("BT_PipeUnregistered");
            break;
          case 4208:
            v12 = CFSTR("BT_PipeUnregisteredUnknown");
            break;
          case 4209:
            v12 = CFSTR("BT_PipeConnect");
            break;
          case 4210:
            v12 = CFSTR("BT_PipeConnected");
            break;
          case 4211:
            v12 = CFSTR("BT_PipeDisconnected");
            break;
          case 4212:
            v12 = CFSTR("BT_PipeDisconnectedFail");
            break;
          case 4213:
            v12 = CFSTR("BT_PipeCycleRegistrationCheck");
            break;
          case 4214:
            v12 = CFSTR("BT_PipeCycleRegistrationStart");
            break;
          case 4215:
            v12 = CFSTR("BT_PipeCycleRegistrationReenable");
            break;
          case 4216:
            v12 = CFSTR("BT_PipeCycleRegistrationSkip");
            break;
          case 4217:
            v12 = CFSTR("BT_PipeReceivedUrgentPrelude");
            break;
          case 4301:
            v12 = CFSTR("BT_DatagramPipeRegister");
            break;
          case 4302:
            v12 = CFSTR("BT_DatagramPipeRegistered");
            break;
          case 4303:
            v12 = CFSTR("BT_DatagramPipeRegisterFailed");
            break;
          case 4304:
            v12 = CFSTR("BT_DatagramPipeUnregister");
            break;
          case 4305:
            v12 = CFSTR("BT_DatagramPipeUnregistered");
            break;
          case 4306:
            v12 = CFSTR("BT_DatagramPipeConnected");
            break;
          case 4307:
            v12 = CFSTR("BT_DatagramPipeDisconnected");
            break;
          case 4401:
            v12 = CFSTR("BT_UrgentPipeRegister");
            break;
          case 4402:
            v12 = CFSTR("BT_UrgentPipeRegistered");
            break;
          case 4403:
            v12 = CFSTR("BT_UrgentPipeRegisterFailed");
            break;
          case 4404:
            v12 = CFSTR("BT_UrgentPipeUnregister");
            break;
          case 4405:
            v12 = CFSTR("BT_UrgentPipeUnregistered");
            break;
          case 4406:
            v12 = CFSTR("BT_UrgentPipeConnected");
            break;
          case 4407:
            v12 = CFSTR("BT_UrgentPipeDisconnected");
            break;
          default:
            goto LABEL_319;
        }
      }
      goto LABEL_320;
    }
    if (a2 <= 14000)
    {
      if (a2 > 11000)
      {
        if (a2 > 12000)
        {
          if (a2 <= 12002)
          {
            if (a2 == 12001)
              v12 = CFSTR("CompanionProxyCreated");
            else
              v12 = CFSTR("CompanionProxyRegistered");
            goto LABEL_320;
          }
          if (a2 == 12003)
          {
            v12 = CFSTR("CompanionProxyUnregistered");
            goto LABEL_320;
          }
          if (a2 == 13001)
          {
            v12 = CFSTR("PolicyTrafficClassUpdate");
            goto LABEL_320;
          }
          goto LABEL_319;
        }
        switch(a2)
        {
          case 11001:
            v12 = CFSTR("BeginActivity");
            break;
          case 11002:
            v12 = CFSTR("EndActivity");
            break;
          case 11003:
            v12 = CFSTR("LocalEndpointUpdated");
            break;
          case 11004:
            v12 = CFSTR("ReceivedLiveLinkAdvisory");
            break;
          case 11005:
            v12 = CFSTR("LocalAWDLEndpointUpdated");
            break;
          default:
            goto LABEL_319;
        }
      }
      else
      {
        switch(a2)
        {
          case 10001:
            v12 = CFSTR("IDSServiceCreated");
            break;
          case 10002:
            v12 = CFSTR("IDSSessionCreated");
            break;
          case 10003:
            v12 = CFSTR("IDSSessionSentInvitation");
            break;
          case 10004:
            v12 = CFSTR("IDSSessionReceivedInvitation");
            break;
          case 10005:
            v12 = CFSTR("IDSSessionInvitationCollided");
            break;
          case 10006:
            v12 = CFSTR("IDSSessionAcceptInvitation");
            break;
          case 10007:
            v12 = CFSTR("IDSSessionCancelInvitation");
            break;
          case 10008:
            v12 = CFSTR("IDSSessionStarted");
            break;
          case 10009:
            v12 = CFSTR("IDSSessionEnded");
            break;
          case 10010:
            v12 = CFSTR("IKERestart");
            break;
          case 10011:
            v12 = CFSTR("IKESessionClassDConnecting");
            break;
          case 10012:
            v12 = CFSTR("IKESessionClassDConnected");
            break;
          case 10013:
            v12 = CFSTR("IKECancelled");
            break;
          case 10014:
            v12 = CFSTR("IDSSessionInvalidate");
            break;
          case 10015:
            v12 = CFSTR("CloudLinkEnable");
            break;
          case 10016:
            v12 = CFSTR("CloudLinkDisable");
            break;
          case 10017:
            v12 = CFSTR("LinkIdleTimeout");
            break;
          case 10018:
            v12 = CFSTR("RestartOnResume");
            break;
          case 10019:
            v12 = CFSTR("ReplaceExistingSession");
            break;
          case 10020:
            v12 = CFSTR("ConnectionStateChange");
            break;
          case 10021:
            v12 = CFSTR("ConnectionReadError");
            break;
          case 10022:
            v12 = CFSTR("ConnectionWriteError");
            break;
          case 10023:
            v12 = CFSTR("DeferIKEClassD");
            break;
          case 10024:
            v12 = CFSTR("DeferIKEClassC");
            break;
          case 10025:
            v12 = CFSTR("DeferIDSSessionInvitation");
            break;
          case 10026:
            v12 = CFSTR("IDSSessionDeclineInvitation");
            break;
          default:
            goto LABEL_319;
        }
      }
    }
    else
    {
      if (a2 <= 18001)
      {
        if (a2 <= 16000)
        {
          switch(a2)
          {
            case 14001:
              v12 = CFSTR("DirectToCloudCreated");
              break;
            case 14002:
              v12 = CFSTR("DirectToCloudRegistered");
              break;
            case 14003:
              v12 = CFSTR("DirectToCloudUnregistered");
              break;
            case 14004:
              v12 = CFSTR("DirectToCloudRequestAvailable");
              break;
            case 14005:
              v12 = CFSTR("DirectToCloudRequestUnavailable");
              break;
            case 14006:
              v12 = CFSTR("DirectToCloudLinkRecommendationQueryStart");
              break;
            case 14007:
              v12 = CFSTR("DirectToCloudLinkRecommendationResponseReceived");
              break;
            default:
              switch(a2)
              {
                case 15001:
                  v12 = CFSTR("PreferWiFiAgentCreated");
                  break;
                case 15002:
                  v12 = CFSTR("PreferWiFiAgentRegistered");
                  break;
                case 15003:
                  v12 = CFSTR("PreferWiFiAgentUnregistered");
                  break;
                case 15004:
                  v12 = CFSTR("PreferWiFiAgentActivated");
                  break;
                default:
                  goto LABEL_319;
              }
              break;
          }
          goto LABEL_320;
        }
        if (a2 > 17000)
        {
          switch(a2)
          {
            case 17001:
              v12 = CFSTR("QuickRelayAgentCreated");
              break;
            case 17002:
              v12 = CFSTR("QuickRelayAgentRegistered");
              break;
            case 17003:
              v12 = CFSTR("QuickRelayAgentUnregistered");
              break;
            case 17004:
              v12 = CFSTR("QuickRelayAgentSuspended");
              break;
            case 17005:
              v12 = CFSTR("QuickRelayAgentActivated");
              break;
            default:
              if (a2 != 18001)
                goto LABEL_319;
              v12 = CFSTR("BTLinkPreferencesAgentCreated");
              break;
          }
          goto LABEL_320;
        }
        switch(a2)
        {
          case 16001:
            v12 = CFSTR("PhoneCallRelayAgentCreated");
            goto LABEL_320;
          case 16002:
            v12 = CFSTR("PhoneCallRelayAgentRegistered");
            goto LABEL_320;
          case 16003:
            v12 = CFSTR("PhoneCallRelayAgentUnregistered");
            goto LABEL_320;
        }
LABEL_319:
        v12 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown(%lld)"), a2);
        goto LABEL_320;
      }
      if (a2 <= 20002)
      {
        if (a2 <= 19000)
        {
          if (a2 == 18002)
          {
            v12 = CFSTR("BTLinkPreferencesAgentRegistered");
            goto LABEL_320;
          }
          if (a2 == 18003)
          {
            v12 = CFSTR("BTLinkPreferencesAgentUnregistered");
            goto LABEL_320;
          }
          goto LABEL_319;
        }
        switch(a2)
        {
          case 19001:
            v12 = CFSTR("CmpLnkViabilityAgentCreated");
            break;
          case 19002:
            v12 = CFSTR("CmpLnkViabilityAgentRegistered");
            break;
          case 19003:
            v12 = CFSTR("CmpLnkViabilityAgentUnregistered");
            break;
          case 19004:
            v12 = CFSTR("CmpLnkViabilityAgentSuspended");
            break;
          case 19005:
            v12 = CFSTR("CmpLnkViabilityAgentActivated");
            break;
          default:
            if (a2 == 20001)
            {
              v12 = CFSTR("CompanionProxyConfigCreated");
            }
            else
            {
              if (a2 != 20002)
                goto LABEL_319;
              v12 = CFSTR("CompanionProxyConfigRegistered");
            }
            break;
        }
      }
      else if (a2 > 30100)
      {
        switch(a2)
        {
          case 40001:
            v12 = CFSTR("NWActivityFragmentReporterCreate");
            break;
          case 40002:
            v12 = CFSTR("NWActivityFragmentReporterStart");
            break;
          case 40003:
            v12 = CFSTR("NWActivityFragmentReporterCancel");
            break;
          case 40004:
            v12 = CFSTR("NWActivityFragmentReporterReceivedFragmentRequest");
            break;
          default:
            if (a2 != 30101)
              goto LABEL_319;
            v12 = CFSTR("LaunchOnDemandLaunchEventReceived");
            break;
        }
      }
      else
      {
        switch(a2)
        {
          case 30001:
            v12 = CFSTR("AutoLinkUpgradeMonitorCreate");
            break;
          case 30002:
            v12 = CFSTR("AutoLinkUpgradeMonitorStart");
            break;
          case 30003:
            v12 = CFSTR("AutoLinkUpgradeMonitorCancel");
            break;
          case 30004:
            v12 = CFSTR("AutoLinkUpgradeMonitorReceivedUpdate");
            break;
          default:
            if (a2 != 20003)
              goto LABEL_319;
            v12 = CFSTR("CompanionProxyConfigUnregistered");
            break;
        }
      }
    }
  }
LABEL_320:
  objc_msgSend(v11, "appendString:", v12);

  v13 = objc_msgSend(v9, "length");
  if (v13)
    v13 = objc_msgSend(v11, "appendFormat:", CFSTR(" %@"), v9);
  if (_NRIsAppleInternal(v13))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1001E49E0);
    v14 = (void *)qword_1001E49D8;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, v15);

    if ((unint64_t)objc_msgSend((id)qword_1001E49D8, "count") >= 0x80)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E49D8, "allKeys"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "sortedArrayUsingSelector:", "compare:"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndexedSubscript:", 0));

      objc_msgSend((id)qword_1001E49D8, "setObject:forKeyedSubscript:", 0, v18);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001E49E0);
  }
  v19 = (id)qword_1001E49D0;
  if (v7)
  {
    v20 = _NRCopyEventLogObjectForNRUUID(v7);

    v19 = v20;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
  }

}

void sub_1001248A0(id a1)
{
  id v1;
  void *v2;
  os_log_t v3;
  void *v4;
  id v5;
  int IsLevelEnabled;
  id v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  id v12;
  int v13;
  id v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v1 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)qword_1001E49D8;
  qword_1001E49D8 = (uint64_t)v1;

  if (!qword_1001E49D8)
  {
    v5 = sub_100124AC4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 16);

    if (IsLevelEnabled)
    {
      v7 = sub_100124AC4();
      _NRLogWithArgs(v7, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrEventReporterDates) != ((void *)0)", "", "NREventReporterInit_block_invoke", 418);

    }
    v8 = _os_log_pack_size(12);
    v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%{public}s Assertion Failed: (nrEventReporterDates) != ((void *)0)");
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)(v11 + 4) = "NREventReporterInit_block_invoke";
LABEL_10:
    v18 = sub_100124AC4();
    _NRLogAbortWithPack(v18, v9);
  }
  v3 = os_log_create("com.apple.networkrelay", "events");
  v4 = (void *)qword_1001E49D0;
  qword_1001E49D0 = (uint64_t)v3;

  if (!qword_1001E49D0)
  {
    v12 = sub_100124AC4();
    v13 = _NRLogIsLevelEnabled(v12, 16);

    if (v13)
    {
      v14 = sub_100124AC4();
      _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (defaultEventLogObject) != ((void *)0)", "", "NREventReporterInit_block_invoke", 420);

    }
    v15 = _os_log_pack_size(12);
    v9 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(v9, v15, *v16, &_mh_execute_header, "%{public}s Assertion Failed: (defaultEventLogObject) != ((void *)0)");
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v17 + 4) = "NREventReporterInit_block_invoke";
    goto LABEL_10;
  }
  _NRLogRegisterSimCrashHook(sub_100124B04);
}

id sub_100124AC4()
{
  if (qword_1001E49F8 != -1)
    dispatch_once(&qword_1001E49F8, &stru_1001B83E8);
  return (id)qword_1001E49F0;
}

void sub_100124B04(void *a1)
{
  sub_100121E18(0, 9003, 0, a1);
}

void sub_100124B18(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E49F0;
  qword_1001E49F0 = (uint64_t)v1;

}

__CFString *sub_100124B48(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  uint64_t i;
  void *v17;
  void *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    v4 = objc_opt_class(NSArray);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    {
      v5 = CFSTR(")");
      v6 = CFSTR("(");
    }
    else
    {
      v8 = objc_opt_class(NSSet);
      if ((objc_opt_isKindOfClass(v3, v8) & 1) == 0)
      {
        v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
LABEL_21:

        goto LABEL_22;
      }
      v5 = CFSTR("})");
      v6 = CFSTR("({");
    }
    v7 = (__CFString *)objc_msgSend(objc_alloc((Class)NSMutableString), "initWithString:", v6);
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v9 = v3;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v21;
      v13 = 1;
      do
      {
        if (*(_QWORD *)v21 != v12)
          objc_enumerationMutation(v9);
        v14 = (void *)**((_QWORD **)&v20 + 1);
        if ((v13 & 1) == 0)
          -[__CFString appendString:](v7, "appendString:", CFSTR(", "), (_QWORD)v20);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "description", (_QWORD)v20));
        -[__CFString appendString:](v7, "appendString:", v15);

        if ((unint64_t)v11 >= 2)
        {
          for (i = 1; (id)i != v11; ++i)
          {
            if (*(_QWORD *)v21 != v12)
              objc_enumerationMutation(v9);
            v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
            -[__CFString appendString:](v7, "appendString:", CFSTR(", "));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "description"));
            -[__CFString appendString:](v7, "appendString:", v18);

          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        v13 = 0;
      }
      while (v11);
    }

    -[__CFString appendString:](v7, "appendString:", v5);
    goto LABEL_21;
  }
  v7 = CFSTR("(null)");
LABEL_22:

  return v7;
}

void sub_100124E54(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ DTLS write error %@", "", "-[NRDDTLSStack processOutboundUnencryptedData:]_block_invoke", 112, *(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ DTLS write success", "", "-[NRDDTLSStack processOutboundUnencryptedData:]_block_invoke", 115, *(_QWORD *)(a1 + 32));
    }
  }

}

void sub_100124FB0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4A00;
  qword_1001E4A00 = (uint64_t)v1;

}

void sub_100124FE0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ UDP write error %@", "", "-[NRDDTLSStack processInboundEncryptedData:]_block_invoke", 126, *(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ UDP write success", "", "-[NRDDTLSStack processInboundEncryptedData:]_block_invoke", 129, *(_QWORD *)(a1 + 32));
    }
  }

}

void sub_10012513C(uint64_t a1, void *a2, int a3)
{
  id v5;
  dispatch_time_t v6;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  int v10;

  v5 = a2;
  if (a1 && !*(_BYTE *)(a1 + 11))
  {
    v6 = dispatch_time(0x8000000000000000, 1000000000);
    v7 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001251F8;
    block[3] = &unk_1001B8438;
    block[4] = a1;
    v10 = a3;
    v9 = v5;
    dispatch_after(v6, v7, block);

  }
}

uint64_t sub_1001251F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (!v2 || !*(_BYTE *)(v2 + 11))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      v4 = *(_QWORD *)(v1 + 32);
      v3 = *(void **)(v1 + 40);
      v5 = *(unsigned int *)(v1 + 48);
      v6 = (id)qword_1001E4A00;
      _NRLogWithArgs(v6, 1, "%s%.30s:%-4d %@ retransmit #%u of %llu outbound encrypted bytes", "", "-[NRDDTLSStack retransmitOutboundEncryptedData:retransmitCount:]_block_invoke", 146, v4, v5, objc_msgSend(v3, "length"));

    }
    v7 = *(_QWORD *)(v1 + 32);
    if (v7)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v7 + 64));
      v9 = *(_QWORD *)(v1 + 32);
    }
    else
    {
      v9 = 0;
      WeakRetained = 0;
    }
    objc_msgSend(WeakRetained, "handleDTLSStack:outboundEncryptedData:", v9, *(_QWORD *)(v1 + 40));

    return sub_10012513C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (*(_DWORD *)(v1 + 48) + 1));
  }
  return result;
}

void sub_100125348(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  _QWORD completion[5];

  if (a1 && !*(_BYTE *)(a1 + 9))
  {
    *(_BYTE *)(a1 + 9) = 1;
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      v2 = *(_QWORD *)(a1 + 40);
      v3 = (id)qword_1001E4A00;
      _NRLogWithArgs(v3, 1, "%s%.30s:%-4d %@ reading on UDP %@", "", "-[NRDDTLSStack readOnUDPConnection]", 158, a1, v2);

    }
    v4 = *(NSObject **)(a1 + 40);
    completion[0] = _NSConcreteStackBlock;
    completion[1] = 3221225472;
    completion[2] = sub_100125470;
    completion[3] = &unk_1001B8460;
    completion[4] = a1;
    nw_connection_receive(v4, 1u, 0xFFFFFFFF, completion);
  }
}

void sub_100125470(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id WeakRetained;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = a2;
  v8 = a3;
  v9 = a5;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    *(_BYTE *)(v10 + 9) = 0;
  if (v19 && !v9)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      v11 = (id)qword_1001E4A00;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = objc_msgSend(v19, "length");
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
        v14 = *(_QWORD *)(v14 + 40);
      _NRLogWithArgs(v11, 1, "%s%.30s:%-4d %@ passing %llu outbound encrypted bytes to client from UDP %@", "", "-[NRDDTLSStack readOnUDPConnection]_block_invoke", 168, v12, v13, v14);

    }
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v15 + 64));
      v17 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v17 = 0;
      WeakRetained = 0;
    }
    objc_msgSend(WeakRetained, "handleDTLSStack:outboundEncryptedData:", v17, v19);

    v18 = *(_QWORD *)(a1 + 32);
    if (v18)
    {
      if (*(_BYTE *)(v18 + 12))
      {
LABEL_19:
        sub_100125348(v18);
        goto LABEL_26;
      }
      *(_BYTE *)(v18 + 12) = 1;
      v18 = *(_QWORD *)(a1 + 32);
    }
    sub_10012513C(v18, v19, 1);
    v18 = *(_QWORD *)(a1 + 32);
    goto LABEL_19;
  }
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ UDP read sadness %@", "", "-[NRDDTLSStack readOnUDPConnection]_block_invoke", 164, *(_QWORD *)(a1 + 32), v9);
  }
LABEL_26:

}

void sub_10012569C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  _QWORD completion[5];

  if (a1 && !*(_BYTE *)(a1 + 10))
  {
    *(_BYTE *)(a1 + 10) = 1;
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      v2 = *(_QWORD *)(a1 + 32);
      v3 = (id)qword_1001E4A00;
      _NRLogWithArgs(v3, 1, "%s%.30s:%-4d %@ reading on DTLS %@", "", "-[NRDDTLSStack readOnDTLSConnection]", 184, a1, v2);

    }
    v4 = *(NSObject **)(a1 + 32);
    completion[0] = _NSConcreteStackBlock;
    completion[1] = 3221225472;
    completion[2] = sub_1001257C4;
    completion[3] = &unk_1001B8460;
    completion[4] = a1;
    nw_connection_receive(v4, 1u, 0xFFFFFFFF, completion);
  }
}

void sub_1001257C4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id WeakRetained;
  uint64_t v17;
  id v18;

  v18 = a2;
  v8 = a3;
  v9 = a5;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    *(_BYTE *)(v10 + 10) = 0;
  if (!v18 || v9)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ DTLS read sadness %@", "", "-[NRDDTLSStack readOnDTLSConnection]_block_invoke", 190, *(_QWORD *)(a1 + 32), v9);
    }
  }
  else
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      v11 = (id)qword_1001E4A00;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = objc_msgSend(v18, "length");
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
        v14 = *(_QWORD *)(v14 + 32);
      _NRLogWithArgs(v11, 1, "%s%.30s:%-4d %@ passing %llu inbound decrypted bytes to client from DTLS %@", "", "-[NRDDTLSStack readOnDTLSConnection]_block_invoke", 194, v12, v13, v14);

    }
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v15 + 64));
      v17 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v17 = 0;
      WeakRetained = 0;
    }
    objc_msgSend(WeakRetained, "handleDTLSStack:inboundDecryptedData:", v17, v18);

    sub_10012569C(*(_QWORD *)(a1 + 32));
  }

}

void sub_1001259C8(uint64_t a1)
{
  id WeakRetained;

  if (a1)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ is ready", "", "-[NRDDTLSStack handleIsReady]", 202, a1);
    }
    sub_10012569C(a1);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "handleIsReady:", a1);

  }
}

void sub_100125AAC(uint64_t a1, void *a2)
{
  NSObject *options;

  options = a2;
  sec_protocol_options_set_tls_server_name(options, "::1");
  sec_protocol_options_set_peer_authentication_required(options, 0);
  sec_protocol_options_append_tls_ciphersuite(options, tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA|0x80);
  sec_protocol_options_append_tls_ciphersuite(options, (tls_ciphersuite_t)0xAEu);
  sec_protocol_options_append_tls_ciphersuite(options, (tls_ciphersuite_t)0x8Du);
  sec_protocol_options_append_tls_ciphersuite(options, (tls_ciphersuite_t)0x8Cu);
  sec_protocol_options_add_pre_shared_key(options, *(dispatch_data_t *)(a1 + 32), *(dispatch_data_t *)(a1 + 32));

}

void sub_100125B34(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD handler[5];
  NSObject *v9;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = *(NSObject **)(v5 + 48);
  else
    v6 = 0;
  nw_connection_set_queue(v3, v6);
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ DTLS Server got new connection %@", "", "-[NRDDTLSStack startDTLS]_block_invoke_2", 244, *(_QWORD *)(a1 + 32), v4);
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100125FE4;
  handler[3] = &unk_1001B84B0;
  handler[4] = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v7 = v4;
  nw_connection_set_state_changed_handler(v7, handler);
  nw_connection_start(v7);

}

void sub_100125C74(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD verify_block[5];

  v3 = a2;
  sec_protocol_options_set_peer_authentication_required(v3, 0);
  verify_block[0] = _NSConcreteStackBlock;
  verify_block[1] = 3221225472;
  verify_block[2] = sub_100125EE0;
  verify_block[3] = &unk_1001B8500;
  v4 = *(_QWORD *)(a1 + 32);
  verify_block[4] = v4;
  if (v4)
    v5 = *(NSObject **)(v4 + 48);
  else
    v5 = 0;
  sec_protocol_options_set_verify_block(v3, verify_block, v5);
  sec_protocol_options_append_tls_ciphersuite(v3, tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA|0x80);
  sec_protocol_options_append_tls_ciphersuite(v3, (tls_ciphersuite_t)0xAEu);
  sec_protocol_options_append_tls_ciphersuite(v3, (tls_ciphersuite_t)0x8Du);
  sec_protocol_options_append_tls_ciphersuite(v3, (tls_ciphersuite_t)0x8Cu);
  sec_protocol_options_add_pre_shared_key(v3, *(dispatch_data_t *)(a1 + 40), *(dispatch_data_t *)(a1 + 40));

}

void sub_100125D3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (id)qword_1001E4A00;
    v7 = nw_connection_state_to_string(a2);
    _NRLogWithArgs(v6, 1, "%s%.30s:%-4d %@ client DTLS connection got state %s error %@", "", "-[NRDDTLSStack startDTLS]_block_invoke_6", 309, v5, v7, v8);

  }
  if ((_DWORD)a2 == 3)
  {
    sub_1001259C8(*(_QWORD *)(a1 + 32));
  }
  else if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ client DTLS Sadness", "", "-[NRDDTLSStack startDTLS]_block_invoke_6", 313, *(_QWORD *)(a1 + 32));
    }
  }

}

void sub_100125EE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void (**v8)(id, uint64_t);
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = a4;
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ client verify block called", "", "-[NRDDTLSStack startDTLS]_block_invoke_5", 278, *(_QWORD *)(a1 + 32));
  }
  v8[2](v8, 1);

}

void sub_100125FE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  id v18;

  v18 = a3;
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = (id)qword_1001E4A00;
    v8 = nw_connection_state_to_string(a2);
    _NRLogWithArgs(v7, 1, "%s%.30s:%-4d %@ server connection %@ got state %s error %@", "", "-[NRDDTLSStack startDTLS]_block_invoke_3", 249, v5, v6, v8, v18);

  }
  if ((_DWORD)a2 == 3)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (!v9)
      goto LABEL_31;
    if (!*(_QWORD *)(v9 + 32))
      goto LABEL_22;
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 17))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      v10 = *(_QWORD *)(a1 + 32);
      if (v10)
        v11 = *(_QWORD *)(v10 + 32);
      else
        v11 = 0;
      v12 = *(_QWORD *)(a1 + 40);
      v13 = (id)qword_1001E4A00;
      _NRLogWithArgs(v13, 17, "Got new connection %@ on DTLS listener when we already had %@", v11, v12);

    }
    v14 = *(_QWORD *)(a1 + 32);
    v15 = v14 ? *(NSObject **)(v14 + 32) : 0;
    nw_connection_cancel(v15);
    v16 = *(_QWORD *)(a1 + 32);
    if (v16
      && (v17 = *(void **)(v16 + 32), *(_QWORD *)(v16 + 32) = 0, v17, (v9 = *(_QWORD *)(a1 + 32)) != 0))
    {
LABEL_22:
      objc_storeStrong((id *)(v9 + 32), *(id *)(a1 + 40));
      sub_1001259C8(*(_QWORD *)(a1 + 32));
    }
    else
    {
LABEL_31:
      sub_1001259C8(0);
    }
  }
  else if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ DTLS server Sadness", "", "-[NRDDTLSStack startDTLS]_block_invoke_3", 260, *(_QWORD *)(a1 + 32));
    }
  }

}

id *sub_100126284(id *a1, void *a2, char a3, void *a4)
{
  id v8;
  char *v9;
  id *v10;
  unint64_t v11;
  nw_endpoint_t host;
  NSObject *secure_udp;
  NSObject *v14;
  nw_connection_t v15;
  id v16;
  NSObject *v17;
  unsigned __int16 *v18;
  NSObject *v19;
  NSObject *v20;
  id *v21;
  id v23;
  int IsLevelEnabled;
  id v25;
  int *v26;
  uint64_t v27;
  id v28;
  id v29;
  int v30;
  id v31;
  _QWORD handler[4];
  unsigned __int16 *v33;
  char port[4];
  __int16 v35;
  char __str[4];
  __int16 v37;
  objc_super v38;

  v8 = a2;
  v9 = a4;
  if (!a1)
    goto LABEL_18;
  v38.receiver = a1;
  v38.super_class = (Class)NRDDTLSStack;
  v10 = (id *)objc_msgSendSuper2(&v38, "init");
  if (!v10)
  {
    v23 = sub_1001266A0();
    IsLevelEnabled = _NRLogIsLevelEnabled(v23, 16);

    if (IsLevelEnabled)
    {
      v25 = sub_1001266A0();
      _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]", 325);

    }
    v8 = (id)_os_log_pack_size(12);
    v9 = (char *)handler - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = __error();
    v27 = _os_log_pack_fill(v9, v8, *v26, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v27 + 4) = "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]";
    v28 = sub_1001266A0();
    _NRLogAbortWithPack(v28, v9);
LABEL_16:
    v29 = sub_1001266A0();
    v30 = _NRLogIsLevelEnabled(v29, 17);

    if (v30)
    {
      v31 = sub_1001266A0();
      _NRLogWithArgs(v31, 17, "%s called with null queue", "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]");

      v21 = 0;
      goto LABEL_12;
    }
LABEL_18:
    v21 = 0;
    goto LABEL_12;
  }
  a1 = v10;
  if (!v8)
    goto LABEL_16;
  do
    v11 = __ldxr(&qword_1001E4268);
  while (__stxr(v11 + 1, &qword_1001E4268));
  v10[7] = (id)v11;
  objc_storeStrong(v10 + 6, a2);
  *((_BYTE *)a1 + 8) = a3;
  objc_storeWeak(a1 + 8, v9);
  *((_WORD *)a1 + 7) = sub_1001266E0();
  *((_WORD *)a1 + 8) = sub_1001266E0();
  v37 = 0;
  *(_DWORD *)__str = 0;
  snprintf(__str, 6uLL, "%u", *((unsigned __int16 *)a1 + 7));
  v35 = 0;
  *(_DWORD *)port = 0;
  snprintf(port, 6uLL, "%u", *((unsigned __int16 *)a1 + 8));
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ using ports local %s remote %s", "", "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]", 341, a1, __str, port);
  }
  host = nw_endpoint_create_host("::", port);
  secure_udp = nw_parameters_create_secure_udp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
  nw_parameters_set_local_address(secure_udp, host);
  v14 = nw_endpoint_create_host("localhost", __str);
  v15 = nw_connection_create(v14, secure_udp);
  v16 = a1[5];
  a1[5] = v15;

  v17 = a1[5];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100126914;
  handler[3] = &unk_1001B8550;
  v18 = a1;
  v33 = v18;
  nw_connection_set_state_changed_handler(v17, handler);
  v19 = a1[6];
  v20 = a1[5];
  nw_connection_set_queue(v20, v19);

  nw_connection_start((nw_connection_t)a1[5]);
  a1 = v18;

  v21 = a1;
LABEL_12:

  return v21;
}

id sub_1001266A0()
{
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  return (id)qword_1001E4A00;
}

uint64_t sub_1001266E0()
{
  __int16 v0;
  unsigned int v1;
  uint32_t v2;
  int v3;
  int v4;
  int v5;
  _BYTE v7[20];
  uint64_t v8;
  char __strerrbuf[128];

  while (1)
  {
    while (1)
    {
      v0 = word_1001E4A10;
      v1 = (unsigned __int16)word_1001E4A10++ + 1;
      if ((unsigned __int16)(v0 + 2) <= 0xC001u)
      {
        v2 = arc4random_uniform(0x3FFFu);
        v1 = v2 - 0x4000;
        word_1001E4A10 = v2 - 0x4000;
      }
      *(_WORD *)&v7[10] = 0;
      *(_QWORD *)&v7[12] = 0;
      v8 = 0;
      *(_WORD *)v7 = 7708;
      *(_QWORD *)&v7[2] = bswap32(v1) >> 16;
      v3 = socket(30, 2, 0);
      if ((v3 & 0x80000000) == 0)
        break;
      v5 = *__error();
      if (strerror_r(v5, __strerrbuf, 0x80uLL))
        __strerrbuf[0] = 0;
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      if (_NRLogIsLevelEnabled(qword_1001E4A00, 17))
      {
        if (qword_1001E4A08 != -1)
          dispatch_once(&qword_1001E4A08, &stru_1001B8570);
        _NRLogWithArgs(qword_1001E4A00, 17, "socket open failed: [%d] %s", v5, __strerrbuf);
      }
    }
    v4 = v3;
    if (!bind(v3, (const sockaddr *)v7, 0x1Cu))
      break;
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d socket bind failed for %u (sockFD %d)", "", "NRDIsUDPPortAvailable", 57, (unsigned __int16)v1, v4);
    }
    close(v4);
  }
  close(v4);
  return (unsigned __int16)word_1001E4A10;
}

void sub_100126914(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  dispatch_data_t v10;
  nw_endpoint_t host;
  NSObject *v12;
  nw_listener_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  nw_connection_t v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  id v29;
  id v30;
  void **configure_dtls;
  uint64_t v32;
  void (*v33)(uint64_t, void *);
  void *v34;
  NSObject *v35;
  NSObject *v36;
  void **handler;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char port[4];
  __int16 v43;
  char __str[4];
  __int16 v45;
  _OWORD buffer[2];

  v30 = a3;
  if (qword_1001E4A08 != -1)
    dispatch_once(&qword_1001E4A08, &stru_1001B8570);
  if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (id)qword_1001E4A00;
    v7 = nw_connection_state_to_string(a2);
    _NRLogWithArgs(v6, 1, "%s%.30s:%-4d %@ UDP connection got state %s error %@", "", "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]_block_invoke", 354, v5, v7, v30);

  }
  if ((_DWORD)a2 == 3)
  {
    sub_100125348(*(_QWORD *)(a1 + 32));
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
      {
        if (qword_1001E4A08 != -1)
          dispatch_once(&qword_1001E4A08, &stru_1001B8570);
        _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ starting DTLS", "", "-[NRDDTLSStack startDTLS]", 209, v8);
      }
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      buffer[0] = v9;
      buffer[1] = v9;
      v10 = dispatch_data_create(buffer, 0x20uLL, 0, 0);
      v45 = 0;
      *(_DWORD *)__str = 0;
      snprintf(__str, 6uLL, "%u", *(unsigned __int16 *)(v8 + 14));
      v43 = 0;
      *(_DWORD *)port = 0;
      snprintf(port, 6uLL, "%u", *(unsigned __int16 *)(v8 + 16));
      host = nw_endpoint_create_host("::", __str);
      if (*(_BYTE *)(v8 + 8))
      {
        configure_dtls = _NSConcreteStackBlock;
        v32 = 3221225472;
        v33 = sub_100125AAC;
        v34 = &unk_1001B8488;
        v35 = v10;
        v12 = nw_parameters_create_secure_udp(&configure_dtls, _nw_parameters_configure_protocol_default_configuration);
        nw_parameters_set_local_address(v12, host);
        v13 = nw_listener_create(v12);
        v14 = *(void **)(v8 + 24);
        *(_QWORD *)(v8 + 24) = v13;

        v15 = *(NSObject **)(v8 + 48);
        v16 = *(id *)(v8 + 24);
        nw_listener_set_queue(v16, v15);

        v17 = *(NSObject **)(v8 + 24);
        handler = _NSConcreteStackBlock;
        v38 = 3221225472;
        v39 = sub_100125B34;
        v40 = &unk_1001B84D8;
        v41 = v8;
        nw_listener_set_new_connection_handler(v17, &handler);
        nw_listener_start(*(nw_listener_t *)(v8 + 24));
        if (qword_1001E4A08 != -1)
          dispatch_once(&qword_1001E4A08, &stru_1001B8570);
        if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
        {
          if (qword_1001E4A08 != -1)
            dispatch_once(&qword_1001E4A08, &stru_1001B8570);
          v18 = *(_QWORD *)(v8 + 24);
          v19 = (id)qword_1001E4A00;
          _NRLogWithArgs(v19, 1, "%s%.30s:%-4d %@ started DTLS listener %@", "", "-[NRDDTLSStack startDTLS]", 266, v8, v18);

        }
        v20 = v35;
      }
      else
      {
        configure_dtls = _NSConcreteStackBlock;
        v32 = 3221225472;
        v33 = sub_100125C74;
        v34 = &unk_1001B8528;
        v35 = v8;
        v36 = v10;
        v21 = nw_parameters_create_secure_udp(&configure_dtls, _nw_parameters_configure_protocol_default_configuration);
        nw_parameters_set_local_address(v21, host);
        v22 = nw_endpoint_create_host("localhost", port);
        v23 = nw_connection_create(v22, v21);
        v24 = *(void **)(v8 + 32);
        *(_QWORD *)(v8 + 32) = v23;

        v25 = *(NSObject **)(v8 + 32);
        handler = _NSConcreteStackBlock;
        v38 = 3221225472;
        v39 = sub_100125D3C;
        v40 = &unk_1001B8550;
        v41 = v8;
        nw_connection_set_state_changed_handler(v25, &handler);
        v26 = *(NSObject **)(v8 + 48);
        v27 = *(id *)(v8 + 32);
        nw_connection_set_queue(v27, v26);

        nw_connection_start(*(nw_connection_t *)(v8 + 32));
        if (qword_1001E4A08 != -1)
          dispatch_once(&qword_1001E4A08, &stru_1001B8570);
        if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
        {
          if (qword_1001E4A08 != -1)
            dispatch_once(&qword_1001E4A08, &stru_1001B8570);
          v28 = *(_QWORD *)(v8 + 32);
          v29 = (id)qword_1001E4A00;
          _NRLogWithArgs(v29, 1, "%s%.30s:%-4d %@ started DTLS connection %@", "", "-[NRDDTLSStack startDTLS]", 319, v8, v28);

        }
        v20 = v36;
      }

    }
  }
  else if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001E4A08 != -1)
      dispatch_once(&qword_1001E4A08, &stru_1001B8570);
    if (_NRLogIsLevelEnabled(qword_1001E4A00, 1))
    {
      if (qword_1001E4A08 != -1)
        dispatch_once(&qword_1001E4A08, &stru_1001B8570);
      _NRLogWithArgs(qword_1001E4A00, 1, "%s%.30s:%-4d %@ UDP Sadness", "", "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]_block_invoke", 359, *(_QWORD *)(a1 + 32));
    }
  }

}

id sub_100126F30(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1001E4A20 != -1)
    dispatch_once(&qword_1001E4A20, &stru_1001B8590);
  return (id)qword_1001E4A18;
}

void sub_100126F74(id a1)
{
  id v1;
  void *v2;

  v1 = sub_100126FA0([NRDPolicySessionManager alloc]);
  v2 = (void *)qword_1001E4A18;
  qword_1001E4A18 = (uint64_t)v1;

}

id sub_100126FA0(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v10;
  int IsLevelEnabled;
  id v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int v18;
  id v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  objc_super v30;

  if (!a1)
    return 0;
  v30.receiver = a1;
  v30.super_class = (Class)NRDPolicySessionManager;
  v1 = objc_msgSendSuper2(&v30, "init");
  if (!v1)
  {
    v10 = sub_1001272A0();
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

    if (IsLevelEnabled)
    {
      v12 = sub_1001272A0();
      _NRLogWithArgs(v12, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDPolicySessionManager initManager]", 37);

    }
    v13 = _os_log_pack_size(12);
    v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15 = *__error();
    v16 = _os_log_pack_fill(v14, v13, v15, &_mh_execute_header, "%{public}s [super init] failed");
    goto LABEL_16;
  }
  v2 = v1;
  v3 = sub_10014CFBC();
  v4 = (void *)*((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = v3;

  v5 = objc_alloc_init((Class)NEPolicySession);
  v6 = (void *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = v5;

  objc_msgSend(*((id *)v2 + 2), "setPriority:", 101);
  if (objc_msgSend(*((id *)v2 + 2), "priority") != (id)101)
  {
    v17 = sub_1001272A0();
    v18 = _NRLogIsLevelEnabled(v17, 16);

    if (v18)
    {
      v19 = sub_1001272A0();
      _NRLogWithArgs(v19, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: self.policySession.priority == NEPolicySessionPriorityControl1", "", "-[NRDPolicySessionManager initManager]", 41);

    }
    v20 = _os_log_pack_size(12);
    v14 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = __error();
    v22 = _os_log_pack_fill(v14, v20, *v21, &_mh_execute_header, "%{public}s Assertion Failed: self.policySession.priority == NEPolicySessionPriorityControl1");
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "-[NRDPolicySessionManager initManager]";
    goto LABEL_17;
  }
  if ((objc_msgSend(*((id *)v2 + 2), "lockSessionToCurrentProcess") & 1) == 0)
  {
    v23 = sub_1001272A0();
    v24 = _NRLogIsLevelEnabled(v23, 16);

    if (v24)
    {
      v25 = sub_1001272A0();
      _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: [self.policySession lockSessionToCurrentProcess]", "", "-[NRDPolicySessionManager initManager]", 42);

    }
    v26 = _os_log_pack_size(12);
    v14 = (char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = *__error();
    v16 = _os_log_pack_fill(v14, v26, v27, &_mh_execute_header, "%{public}s Assertion Failed: [self.policySession lockSessionToCurrentProcess]");
LABEL_16:
    *(_DWORD *)v16 = 136446210;
    *(_QWORD *)(v16 + 4) = "-[NRDPolicySessionManager initManager]";
LABEL_17:
    v28 = sub_1001272A0();
    _NRLogAbortWithPack(v28, v14);
    return 0;
  }
  v7 = objc_alloc_init((Class)NSMutableDictionary);
  v8 = (void *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = v7;

  return v2;
}

id sub_1001272A0()
{
  if (qword_1001E4A30 != -1)
    dispatch_once(&qword_1001E4A30, &stru_1001B85B0);
  return (id)qword_1001E4A28;
}

void sub_1001272E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4A28;
  qword_1001E4A28 = (uint64_t)v1;

}

id sub_100127310(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "objectForKeyedSubscript:", v5));
    if (v7)
      v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v7);
    else
      v8 = objc_alloc_init((Class)NSMutableArray);
    v9 = v8;
    v13 = objc_msgSend(*(id *)(a1 + 16), "addPolicy:", v6);
    if (!v13)
      sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("AddPolicy"), CFSTR("InvalidPolicyNumber"), 1, CFSTR("Failed to install policy: %@"), v10, v11, v12, (uint64_t)v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13));
    objc_msgSend(v9, "addObject:", v14);
    objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v9, v5);

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_10012742C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;

  v22 = a2;
  v5 = a3;
  if (!a1)
    goto LABEL_10;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "objectForKeyedSubscript:", v22));
  v7 = v6;
  if (!v6 || !objc_msgSend(v6, "containsObject:", v5))
  {
LABEL_9:

LABEL_10:
    return;
  }
  v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v7);
  v9 = *(id *)(a1 + 16);
  v10 = objc_msgSend(v9, "removePolicyWithID:", objc_msgSend(v5, "unsignedIntegerValue"));

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v8, "removeObject:", v5);
    if (objc_msgSend(v8, "count"))
      v11 = v8;
    else
      v11 = 0;
    objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", v11, v22, v22);

    goto LABEL_9;
  }
  v12 = sub_1001272A0();
  IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

  if (IsLevelEnabled)
  {
    v14 = sub_1001272A0();
    _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: Failed to remove policy identifier: %@", "", "-[NRDPolicySessionManager removePolicyIDForIdentifier:policyID:]", 101, v5);

  }
  v15 = _os_log_pack_size(22);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __error();
  v18 = _os_log_pack_fill(v16, v15, *v17, &_mh_execute_header, "%{public}s Failed to remove policy identifier: %@");
  *(_DWORD *)v18 = 136446466;
  *(_QWORD *)(v18 + 4) = "-[NRDPolicySessionManager removePolicyIDForIdentifier:policyID:]";
  *(_WORD *)(v18 + 12) = 2112;
  *(_QWORD *)(v18 + 14) = v5;
  v19 = sub_1001272A0();
  v20 = _NRLogAbortWithPack(v19, v16);
  sub_100127618(v20, v21);
}

void sub_100127618(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "objectForKeyedSubscript:", v3));
    if (v4)
    {
      v16 = v4;
      v17 = v3;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v5 = v4;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v19;
        do
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v19 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v9);
            v11 = *(id *)(a1 + 16);
            v12 = objc_msgSend(v11, "removePolicyWithID:", objc_msgSend(v10, "unsignedIntegerValue"));

            if ((v12 & 1) == 0)
              sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("RemovePolicy Failed"), 0, 1, CFSTR("Failed to remove policy identifier: %@"), v13, v14, v15, (uint64_t)v10);
            v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v7);
      }

      v3 = v17;
      objc_msgSend(*(id *)(a1 + 24), "setObject:forKeyedSubscript:", 0, v17);
      v4 = v16;
    }

  }
}

void sub_1001277C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    if ((objc_msgSend(*(id *)(a1 + 16), "apply") & 1) == 0)
      sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v10, v11, v12, a9);
  }
}

id sub_100128400()
{
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  return (id)qword_1001E4A90;
}

void sub_100128440(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4A90;
  qword_1001E4A90 = (uint64_t)v1;

}

char *sub_10012A18C(char *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char *v8;
  id v10;
  int IsLevelEnabled;
  id v12;
  id v13;
  int v14;
  id v15;
  int *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  objc_super v20;

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_11;
  if (!v3)
  {
    v10 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 17);

    if (IsLevelEnabled)
    {
      v12 = sub_100128400();
      _NRLogWithArgs(v12, 17, "%s called with null nrUUID", "-[NRDLocalDevice initWithoutObservingChangesWithNRUUID:]");

      v8 = 0;
      goto LABEL_5;
    }
LABEL_11:
    v8 = 0;
    goto LABEL_5;
  }
  v20.receiver = a1;
  v20.super_class = (Class)NRDLocalDevice;
  v5 = objc_msgSendSuper2(&v20, "init");
  if (!v5)
  {
    v13 = sub_100128400();
    v14 = _NRLogIsLevelEnabled(v13, 16);

    if (v14)
    {
      v15 = sub_100128400();
      _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLocalDevice initWithoutObservingChangesWithNRUUID:]", 1589);

    }
    v4 = (void *)_os_log_pack_size(12);
    a1 = (char *)&v19 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(a1, v4, *v16, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v17 + 4) = "-[NRDLocalDevice initWithoutObservingChangesWithNRUUID:]";
    v18 = sub_100128400();
    _NRLogAbortWithPack(v18, a1);
    goto LABEL_11;
  }
  v6 = v5;
  objc_msgSend(v5, "setNrUUID:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v6, "setDateCreated:", v7);

  a1 = v6;
  v8 = a1;
LABEL_5:

  return v8;
}

_QWORD *sub_10012A370(_QWORD *a1, void *a2)
{
  __objc2_class *v2;
  id *v4;
  id *v5;
  _QWORD *v6;
  NRDLDKeychainItemSecKey *v7;
  id v8;
  char *v9;
  void *v10;
  NRDLDKeychainItemSecKey *v11;
  id v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  NRDLDKeychainItemData *v22;
  id v23;
  char *v24;
  void *v25;
  _QWORD *v26;
  id v28;
  int IsLevelEnabled;
  id v30;
  int v31;
  id v32;
  int *v33;
  uint64_t v34;
  id v35;
  id v36;
  int v37;
  id v38;
  int v39;
  id v40;
  id v41;
  int v42;
  id v43;
  int v44;
  uint64_t v45;
  objc_super v46;

  v4 = a2;
  v5 = v4;
  if (!a1)
    goto LABEL_37;
  if (!v4)
  {
    v28 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v28, 17);

    if (!IsLevelEnabled)
      goto LABEL_37;
    v16 = sub_100128400();
    _NRLogWithArgs(v16, 17, "%s called with null legacyKeys", "-[NRDLDDataClassKeychainItems initWithLegacyKeys:]");
    goto LABEL_36;
  }
  v46.receiver = a1;
  v46.super_class = (Class)NRDLDDataClassKeychainItems;
  v6 = objc_msgSendSuper2(&v46, "init");
  if (v6)
  {
    a1 = v6;
    v2 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
    if (v5[1])
    {
      v7 = [NRDLDKeychainItemSecKey alloc];
      v8 = v5[1];
      v9 = sub_10012ADA4((char *)v7, v8);
      v10 = (void *)a1[1];
      a1[1] = v9;

      if (!a1[1])
        goto LABEL_37;
    }
    if (!v5[3])
      goto LABEL_12;
    v11 = [NRDLDKeychainItemSecKey alloc];
    v12 = v5[3];
    v13 = sub_10012B064((char *)v11, v12);
    v14 = (void *)a1[2];
    a1[2] = v13;

    v15 = (_QWORD *)a1[2];
    if (!v15)
      goto LABEL_37;
    if (v5[2])
    {
      v16 = sub_10012B324(v15);
      if (v16)
      {
        if ((objc_msgSend(v5[2], "isEqualToData:", v16) & 1) != 0)
        {
LABEL_11:

          goto LABEL_12;
        }
        v38 = sub_100128400();
        v39 = _NRLogIsLevelEnabled(v38, 17);

        if (v39)
        {
          v40 = sub_100128400();
          _NRLogWithArgs(v40, 17, "Migrated public key != legacy public key!");
LABEL_35:

        }
      }
LABEL_36:

      goto LABEL_37;
    }
  }
  else
  {
    v30 = sub_100128400();
    v31 = _NRLogIsLevelEnabled(v30, 16);

    if (v31)
    {
      v32 = sub_100128400();
      _NRLogWithArgs(v32, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDDataClassKeychainItems initWithLegacyKeys:]", 484);

    }
    v5 = (id *)_os_log_pack_size(12);
    a1 = (uint64_t *)((char *)&v45 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    v33 = __error();
    v34 = _os_log_pack_fill(a1, v5, *v33, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v34 = 136446210;
    *(_QWORD *)(v34 + 4) = "-[NRDLDDataClassKeychainItems initWithLegacyKeys:]";
    v35 = sub_100128400();
    _NRLogAbortWithPack(v35, a1);
  }
  v36 = sub_100128400();
  v37 = _NRLogIsLevelEnabled(v36, 17);

  if (v37)
  {
    v16 = sub_100128400();
    _NRLogWithArgs(v16, 17, "Legacy public key is missing when migrating private key!");
    goto LABEL_11;
  }
LABEL_12:
  if (v5[6])
  {
    v17 = (char *)objc_alloc(&v2[28]);
    v18 = v5[6];
    v19 = sub_10012B3CC(v17, v18);
    v20 = (void *)a1[4];
    a1[4] = v19;

    v21 = (_QWORD *)a1[4];
    if (v21)
    {
      if (!v5[5])
      {
        v41 = sub_100128400();
        v42 = _NRLogIsLevelEnabled(v41, 17);

        if (!v42)
          goto LABEL_18;
        v16 = sub_100128400();
        _NRLogWithArgs(v16, 17, "Legacy DH public key is missing when migrating DH private key!");
        goto LABEL_17;
      }
      v16 = sub_10012B324(v21);
      if (!v16)
        goto LABEL_36;
      if ((objc_msgSend(v5[5], "isEqualToData:", v16) & 1) != 0)
      {
LABEL_17:

        goto LABEL_18;
      }
      v43 = sub_100128400();
      v44 = _NRLogIsLevelEnabled(v43, 17);

      if (!v44)
        goto LABEL_36;
      v40 = sub_100128400();
      _NRLogWithArgs(v40, 17, "Migrated DH public key != legacy DH public key!");
      goto LABEL_35;
    }
LABEL_37:
    v26 = 0;
    goto LABEL_21;
  }
LABEL_18:
  if (v5[4])
  {
    v22 = [NRDLDKeychainItemData alloc];
    v23 = v5[4];
    v24 = sub_10012A76C((char *)v22, v23);
    v25 = (void *)a1[3];
    a1[3] = v24;

    if (!a1[3])
      goto LABEL_37;
  }
  a1 = a1;
  v26 = a1;
LABEL_21:

  return v26;
}

char *sub_10012A76C(char *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  _BYTE *v7;
  char *v8;
  id v10;
  int IsLevelEnabled;
  id v12;
  id v13;
  int v14;
  id v15;
  int *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  objc_super v20;

  v4 = a2;
  v5 = v4;
  if (!a1)
    goto LABEL_11;
  if (!v4)
  {
    v10 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 17);

    if (IsLevelEnabled)
    {
      v12 = sub_100128400();
      _NRLogWithArgs(v12, 17, "%s called with null secretData", "-[NRDLDKeychainItemData initWithData:]");

      v8 = 0;
      goto LABEL_5;
    }
LABEL_11:
    v8 = 0;
    goto LABEL_5;
  }
  v20.receiver = a1;
  v20.super_class = (Class)NRDLDKeychainItemData;
  v6 = objc_msgSendSuper2(&v20, "init");
  if (!v6)
  {
    v13 = sub_100128400();
    v14 = _NRLogIsLevelEnabled(v13, 16);

    if (v14)
    {
      v15 = sub_100128400();
      _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemData initWithData:]", 148);

    }
    v5 = (void *)_os_log_pack_size(12);
    a1 = (char *)&v19 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(a1, v5, *v16, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v17 + 4) = "-[NRDLDKeychainItemData initWithData:]";
    v18 = sub_100128400();
    _NRLogAbortWithPack(v18, a1);
    goto LABEL_11;
  }
  v7 = v6;
  objc_storeStrong((id *)v6 + 2, a2);
  v7[8] = 1;
  a1 = v7;
  v8 = a1;
LABEL_5:

  return v8;
}

void sub_10012A944(_BYTE *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD block[5];
  _BYTE v13[128];

  if (a1)
  {
    if (a1[22])
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 2))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        _NRLogWithArgs(qword_1001E4A90, 2, "%s%.30s:%-4d startObservingChanges called with an observer already registered: %@", "", "-[NRDLocalDevice startObservingChanges]", 1659, a1);
      }
    }
    else
    {
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v2 = objc_opt_class(a1);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012AB58;
      block[3] = &unk_1001B85D0;
      block[4] = objc_opt_self(v2);
      if (qword_1001E4A78 != -1)
        dispatch_once(&qword_1001E4A78, block);
      v3 = (id)qword_1001E4A70;
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v9;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(_QWORD *)v9 != v6)
              objc_enumerationMutation(v3);
            objc_msgSend(a1, "addObserver:forKeyPath:options:context:", a1, *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i), 3, 0);
          }
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
        }
        while (v5);
      }

      a1[22] = 1;
    }
  }
}

void sub_10012AB58(uint64_t a1)
{
  id v2;
  objc_property_t *v3;
  id v4;
  id v5;
  unint64_t i;
  id v7;
  id v8;
  void *v9;
  unsigned int outCount;

  v2 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("classDKeychainItems"), CFSTR("classCKeychainItems"), CFSTR("classAKeychainItemsLegacyOnly"), CFSTR("outOfBandKeychainItem"), CFSTR("outOfBandKey"), CFSTR("hasOutOfBandKey"), CFSTR("isChanged"), CFSTR("isObservingChanges"), CFSTR("observedProperties"), CFSTR("isEphemeral"), CFSTR("isEnabledAndHasCompletedPairing"), CFSTR("hasCompletedPairing"), CFSTR("supportsSecureCoding"), CFSTR("requiresAuthenticationWithIdentity"), CFSTR("isCompanionLink"), CFSTR("isCompanionLinkCheckedOnce"), 0);
  outCount = 0;
  v3 = class_copyPropertyList(*(Class *)(a1 + 32), &outCount);
  v4 = objc_alloc((Class)NSMutableArray);
  v5 = objc_msgSend(v4, "initWithCapacity:", outCount);
  if (outCount)
  {
    for (i = 0; i < outCount; ++i)
    {
      v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithCString:encoding:", property_getName(v3[i]), 4);
      if ((objc_msgSend(v2, "containsObject:", v7) & 1) == 0)
        objc_msgSend(v5, "addObject:", v7);

    }
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  free(v3);
LABEL_8:
  v8 = objc_msgSend(objc_alloc((Class)NSArray), "initWithArray:", v5);
  v9 = (void *)qword_1001E4A70;
  qword_1001E4A70 = (uint64_t)v8;

  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 2))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 2, "%s%.30s:%-4d NRDLocalDevice observed proprties: %@", "", "+[NRDLocalDevice observedProperties]_block_invoke", 892, qword_1001E4A70);
  }

}

char *sub_10012ADA4(char *a1, void *a2)
{
  const __CFData *v3;
  const __CFData *v4;
  char *v5;
  const __CFDictionary *v6;
  SecKeyRef v7;
  const char *v8;
  SecKeyRef v9;
  char *v10;
  id v12;
  int IsLevelEnabled;
  id v14;
  id v15;
  int v16;
  id v17;
  int *v18;
  uint64_t v19;
  id v20;
  id v21;
  int v22;
  id v23;
  CFErrorRef error;
  objc_super v25;
  _QWORD v26[2];
  _QWORD v27[2];

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_20;
  if (!v3)
  {
    v12 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

    if (IsLevelEnabled)
    {
      v14 = sub_100128400();
      _NRLogWithArgs(v14, 17, "%s called with null publicKeyData", "-[NRDLDKeychainItemSecKey initWithPublicSigningKeyData:]");

      v10 = 0;
      goto LABEL_9;
    }
LABEL_20:
    v10 = 0;
    goto LABEL_9;
  }
  v25.receiver = a1;
  v25.super_class = (Class)NRDLDKeychainItemSecKey;
  v5 = (char *)objc_msgSendSuper2(&v25, "init");
  if (!v5)
  {
    v15 = sub_100128400();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    v6 = (const __CFDictionary *)"-[NRDLDKeychainItemSecKey initWithPublicSigningKeyData:]";
    if (v16)
    {
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemSecKey initWithPublicSigningKeyData:]", 295);

    }
    v4 = (const __CFData *)_os_log_pack_size(12);
    a1 = (char *)&error - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(a1, v4, *v18, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v19 = 136446210;
    *(_QWORD *)(v19 + 4) = "-[NRDLDKeychainItemSecKey initWithPublicSigningKeyData:]";
    v20 = sub_100128400();
    _NRLogAbortWithPack(v20, a1);
    goto LABEL_15;
  }
  a1 = v5;
  v26[0] = kSecAttrKeyType;
  v26[1] = kSecAttrKeyClass;
  v27[0] = kSecAttrKeyTypeEd25519;
  v27[1] = kSecAttrKeyClassPublic;
  v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2));
  error = 0;
  v7 = SecKeyCreateWithData(v4, v6, &error);
  if (!v7)
  {
LABEL_15:
    v21 = sub_100128400();
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (v22)
    {
      v23 = sub_100128400();
      _NRLogWithArgs(v23, 17, "Failed to ingest public signing key: %@", error);

    }
    if (error)
      CFRelease(error);
    v10 = 0;
    goto LABEL_8;
  }
  v9 = v7;
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
  objc_setProperty_nonatomic(a1, v8, v9, 16);
  CFRelease(v9);
  a1[8] = 1;
  v10 = a1;
LABEL_8:

LABEL_9:
  return v10;
}

char *sub_10012B064(char *a1, void *a2)
{
  const __CFData *v3;
  const __CFData *v4;
  char *v5;
  const __CFDictionary *v6;
  SecKeyRef v7;
  const char *v8;
  SecKeyRef v9;
  char *v10;
  id v12;
  int IsLevelEnabled;
  id v14;
  id v15;
  int v16;
  id v17;
  int *v18;
  uint64_t v19;
  id v20;
  id v21;
  int v22;
  id v23;
  CFErrorRef error;
  objc_super v25;
  _QWORD v26[2];
  _QWORD v27[2];

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_20;
  if (!v3)
  {
    v12 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

    if (IsLevelEnabled)
    {
      v14 = sub_100128400();
      _NRLogWithArgs(v14, 17, "%s called with null privateKeyData", "-[NRDLDKeychainItemSecKey initWithPrivateSigningKeyData:]");

      v10 = 0;
      goto LABEL_9;
    }
LABEL_20:
    v10 = 0;
    goto LABEL_9;
  }
  v25.receiver = a1;
  v25.super_class = (Class)NRDLDKeychainItemSecKey;
  v5 = (char *)objc_msgSendSuper2(&v25, "init");
  if (!v5)
  {
    v15 = sub_100128400();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    v6 = (const __CFDictionary *)"-[NRDLDKeychainItemSecKey initWithPrivateSigningKeyData:]";
    if (v16)
    {
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemSecKey initWithPrivateSigningKeyData:]", 235);

    }
    v4 = (const __CFData *)_os_log_pack_size(12);
    a1 = (char *)&error - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(a1, v4, *v18, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v19 = 136446210;
    *(_QWORD *)(v19 + 4) = "-[NRDLDKeychainItemSecKey initWithPrivateSigningKeyData:]";
    v20 = sub_100128400();
    _NRLogAbortWithPack(v20, a1);
    goto LABEL_15;
  }
  a1 = v5;
  v26[0] = kSecAttrKeyType;
  v26[1] = kSecAttrKeyClass;
  v27[0] = kSecAttrKeyTypeEd25519;
  v27[1] = kSecAttrKeyClassPrivate;
  v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2));
  error = 0;
  v7 = SecKeyCreateWithData(v4, v6, &error);
  if (!v7)
  {
LABEL_15:
    v21 = sub_100128400();
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (v22)
    {
      v23 = sub_100128400();
      _NRLogWithArgs(v23, 17, "Failed to ingest private signing key: %@", error);

    }
    if (error)
      CFRelease(error);
    v10 = 0;
    goto LABEL_8;
  }
  v9 = v7;
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
  objc_setProperty_nonatomic(a1, v8, v9, 16);
  CFRelease(v9);
  a1[8] = 1;
  v10 = a1;
LABEL_8:

LABEL_9:
  return v10;
}

_QWORD *sub_10012B324(_QWORD *result)
{
  int v1;
  id v3;
  int IsLevelEnabled;
  id v5;
  CFTypeRef cf;

  if (result)
  {
    cf = 0;
    v1 = SecKeyCopyPublicBytes(result[2], &cf);
    result = cf;
    if (!cf || v1 != 0)
    {
      v3 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v3, 17);

      if (IsLevelEnabled)
      {
        v5 = sub_100128400();
        _NRLogWithArgs(v5, 17, "Failed to copy public key octets: %d", v1);

      }
      result = cf;
      if (cf)
      {
        CFRelease(cf);
        return 0;
      }
    }
  }
  return result;
}

char *sub_10012B3CC(char *a1, void *a2)
{
  const __CFData *v3;
  const __CFData *v4;
  char *v5;
  const __CFDictionary *v6;
  SecKeyRef v7;
  const char *v8;
  SecKeyRef v9;
  char *v10;
  id v12;
  int IsLevelEnabled;
  id v14;
  id v15;
  int v16;
  id v17;
  int *v18;
  uint64_t v19;
  id v20;
  id v21;
  int v22;
  id v23;
  CFErrorRef error;
  objc_super v25;
  _QWORD v26[2];
  _QWORD v27[2];

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_20;
  if (!v3)
  {
    v12 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

    if (IsLevelEnabled)
    {
      v14 = sub_100128400();
      _NRLogWithArgs(v14, 17, "%s called with null privateKeyData", "-[NRDLDKeychainItemSecKey initWithPrivateDHKeyData:]");

      v10 = 0;
      goto LABEL_9;
    }
LABEL_20:
    v10 = 0;
    goto LABEL_9;
  }
  v25.receiver = a1;
  v25.super_class = (Class)NRDLDKeychainItemSecKey;
  v5 = (char *)objc_msgSendSuper2(&v25, "init");
  if (!v5)
  {
    v15 = sub_100128400();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    v6 = (const __CFDictionary *)"-[NRDLDKeychainItemSecKey initWithPrivateDHKeyData:]";
    if (v16)
    {
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemSecKey initWithPrivateDHKeyData:]", 265);

    }
    v4 = (const __CFData *)_os_log_pack_size(12);
    a1 = (char *)&error - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = __error();
    v19 = _os_log_pack_fill(a1, v4, *v18, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v19 = 136446210;
    *(_QWORD *)(v19 + 4) = "-[NRDLDKeychainItemSecKey initWithPrivateDHKeyData:]";
    v20 = sub_100128400();
    _NRLogAbortWithPack(v20, a1);
    goto LABEL_15;
  }
  a1 = v5;
  v26[0] = kSecAttrKeyType;
  v26[1] = kSecAttrKeyClass;
  v27[0] = kSecAttrKeyTypeX25519;
  v27[1] = kSecAttrKeyClassPrivate;
  v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2));
  error = 0;
  v7 = SecKeyCreateWithData(v4, v6, &error);
  if (!v7)
  {
LABEL_15:
    v21 = sub_100128400();
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (v22)
    {
      v23 = sub_100128400();
      _NRLogWithArgs(v23, 17, "Failed to ingest private DH key: %@", error);

    }
    if (error)
      CFRelease(error);
    v10 = 0;
    goto LABEL_8;
  }
  v9 = v7;
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
  objc_setProperty_nonatomic(a1, v8, v9, 16);
  CFRelease(v9);
  a1[8] = 1;
  v10 = a1;
LABEL_8:

LABEL_9:
  return v10;
}

void sub_10012B68C(_BYTE *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD block[5];
  _BYTE v13[128];

  if (a1)
  {
    if (a1[22])
    {
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v2 = objc_opt_class(a1);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012AB58;
      block[3] = &unk_1001B85D0;
      block[4] = objc_opt_self(v2);
      if (qword_1001E4A78 != -1)
        dispatch_once(&qword_1001E4A78, block);
      v3 = (id)qword_1001E4A70;
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v9;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(_QWORD *)v9 != v6)
              objc_enumerationMutation(v3);
            objc_msgSend(a1, "removeObserver:forKeyPath:", a1, *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i));
          }
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v13, 16);
        }
        while (v5);
      }

      a1[22] = 0;
    }
    else
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 2))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        _NRLogWithArgs(qword_1001E4A90, 2, "%s%.30s:%-4d stopObservingChanges called with no observer registered: %@", "", "-[NRDLocalDevice stopObservingChanges]", 1676, a1);
      }
    }
  }
}

id sub_10012B894(id result)
{
  id v1;
  int IsLevelEnabled;
  id v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  objc_super v10;

  if (result)
  {
    v10.receiver = result;
    v10.super_class = (Class)NRDLocalDevice;
    result = objc_msgSendSuper2(&v10, "init");
    if (!result)
    {
      v1 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v1, 16);

      if (IsLevelEnabled)
      {
        v3 = sub_100128400();
        _NRLogWithArgs(v3, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLocalDevice initWithoutObservingChanges]", 1575);

      }
      v4 = _os_log_pack_size(12);
      v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
      v6 = __error();
      v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v7 + 4) = "-[NRDLocalDevice initWithoutObservingChanges]";
      v8 = sub_100128400();
      _NRLogAbortWithPack(v8, v5);
    }
  }
  return result;
}

id *sub_10012B9D0(id *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  char *v8;
  id *v9;
  id v10;
  id v11;
  void *v12;
  id *v13;
  id v15;
  int IsLevelEnabled;
  id v17;
  id v18;
  int v19;
  id v20;
  int *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  objc_super v25;

  v7 = a2;
  v8 = a3;
  if (!a1)
    goto LABEL_16;
  if (!v7)
  {
    v15 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

    if (IsLevelEnabled)
    {
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 17, "%s called with null itemName", "-[NRDLDKeychainItemData initFromKeychainWithName:nrUUID:dataProtectionClass:]");

      v13 = 0;
      goto LABEL_9;
    }
LABEL_16:
    v13 = 0;
    goto LABEL_9;
  }
  v25.receiver = a1;
  v25.super_class = (Class)NRDLDKeychainItemData;
  v9 = (id *)objc_msgSendSuper2(&v25, "init");
  if (!v9)
  {
    v18 = sub_100128400();
    v19 = _NRLogIsLevelEnabled(v18, 16);

    v8 = "-[NRDLDKeychainItemData initFromKeychainWithName:nrUUID:dataProtectionClass:]";
    if (v19)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemData initFromKeychainWithName:nrUUID:dataProtectionClass:]", 159);

    }
    v7 = (id)_os_log_pack_size(12);
    a1 = (id *)((char *)&v24 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    v21 = __error();
    v22 = _os_log_pack_fill(a1, v7, *v21, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "-[NRDLDKeychainItemData initFromKeychainWithName:nrUUID:dataProtectionClass:]";
    v23 = sub_100128400();
    _NRLogAbortWithPack(v23, a1);
    goto LABEL_15;
  }
  a1 = v9;
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
LABEL_15:
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v10 = (id)qword_1001E4AD0;
  v11 = sub_10014C1B4((uint64_t)v10, v7, v8, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  if (v12)
  {
    objc_storeStrong(a1 + 2, v12);
    v13 = a1;
  }
  else
  {
    v13 = 0;
  }

LABEL_9:
  return v13;
}

uint64_t sub_10012BC34(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  _BOOL4 v10;
  id v11;
  int IsLevelEnabled;
  id v13;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    if (v7)
    {
      if (!*(_BYTE *)(a1 + 8))
      {
LABEL_8:
        a1 = 1;
        goto LABEL_12;
      }
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v9 = (id)qword_1001E4AD0;
      v10 = sub_10014B850((uint64_t)v9, *(void **)(a1 + 16), v7, v8, a4, 0);

      if (v10)
      {
        *(_BYTE *)(a1 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      v11 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 17);

      if (IsLevelEnabled)
      {
        v13 = sub_100128400();
        _NRLogWithArgs(v13, 17, "%s called with null itemName", "-[NRDLDKeychainItemData saveToKeychainWithName:nrUUID:dataProtectionClass:]");

      }
    }
    a1 = 0;
  }
LABEL_12:

  return a1;
}

_BYTE *sub_10012BD60(void *a1, void *a2)
{
  _BYTE *v3;
  const char *v4;
  _BYTE *v5;
  _BYTE *v6;
  id v8;
  int IsLevelEnabled;
  id v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  objc_super v17;

  if (!a1)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_4;
  }
  v17.receiver = a1;
  v17.super_class = (Class)NRDLDKeychainItemSecKey;
  v3 = objc_msgSendSuper2(&v17, "init");
  if (!v3)
  {
    v8 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_100128400();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemSecKey initWithKeyRef:]", 226);

    }
    v11 = _os_log_pack_size(12);
    v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v14 = 136446210;
    *(_QWORD *)(v14 + 4) = "-[NRDLDKeychainItemSecKey initWithKeyRef:]";
    v15 = sub_100128400();
    _NRLogAbortWithPack(v15, v12);
    goto LABEL_8;
  }
  v5 = v3;
  objc_setProperty_nonatomic(v3, v4, a2, 16);
  v5[8] = 1;
  v6 = v5;
LABEL_4:

  return v6;
}

void *sub_10012BECC(char *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  char *v9;
  dispatch_queue_t *v10;
  id v11;
  id v12;
  const CFStringRef *v13;
  CFStringRef v14;
  void *String;
  id v16;
  id v17;
  id v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  const __CFDictionary *v23;
  uint64_t v24;
  CFTypeID v25;
  const char *v26;
  id v28;
  int IsLevelEnabled;
  id v30;
  id v31;
  int v32;
  id v33;
  int *v34;
  uint64_t v35;
  id v36;
  id v37;
  int v38;
  id v39;
  CFTypeID v40;
  __CFString *v41;
  _QWORD v42[2];
  objc_super v43;
  CFTypeRef result;
  _QWORD v45[4];
  _QWORD v46[4];

  v7 = a2;
  v8 = a3;
  if (!a1)
    goto LABEL_73;
  if (!v7)
  {
    v28 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v28, 17);

    if (IsLevelEnabled)
    {
      v30 = sub_100128400();
      _NRLogWithArgs(v30, 17, "%s called with null itemName", "-[NRDLDKeychainItemSecKey initFromKeychainWithName:nrUUID:dataProtectionClass:]");

      v21 = 0;
      goto LABEL_66;
    }
LABEL_73:
    v21 = 0;
    goto LABEL_66;
  }
  v43.receiver = a1;
  v43.super_class = (Class)NRDLDKeychainItemSecKey;
  v9 = (char *)objc_msgSendSuper2(&v43, "init");
  if (v9)
  {
    a1 = v9;
    objc_opt_self(NRDKeyManager);
    if (qword_1001E4AD8 == -1)
      goto LABEL_5;
  }
  else
  {
    v31 = sub_100128400();
    v32 = _NRLogIsLevelEnabled(v31, 16);

    if (v32)
    {
      v33 = sub_100128400();
      _NRLogWithArgs(v33, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDKeychainItemSecKey initFromKeychainWithName:nrUUID:dataProtectionClass:]", 327);

    }
    v7 = (id)_os_log_pack_size(12);
    a1 = (char *)v42 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v34 = __error();
    v35 = _os_log_pack_fill(a1, v7, *v34, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v35 = 136446210;
    *(_QWORD *)(v35 + 4) = "-[NRDLDKeychainItemSecKey initFromKeychainWithName:nrUUID:dataProtectionClass:]";
    v36 = sub_100128400();
    _NRLogAbortWithPack(v36, a1);
  }
  dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
LABEL_5:
  v10 = (dispatch_queue_t *)(id)qword_1001E4AD0;
  v11 = v7;
  v12 = v8;
  if (v10)
  {
    dispatch_assert_queue_V2(v10[2]);
    if ((_DWORD)a4 == 3)
    {
      v13 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    else
    {
      if ((_DWORD)a4 != 4)
      {
        String = (void *)NRDataProtectionClassCreateString(a4);
        goto LABEL_14;
      }
      v13 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    v14 = *v13;
    String = (void *)NRDataProtectionClassCreateString(a4);
    if (v14)
    {
      v16 = objc_alloc((Class)NSString);
      if (v12)
        v17 = objc_msgSend(v16, "initWithFormat:", CFSTR("%@/%@/%@/%@"), CFSTR("com.apple.terminusd"), v12, String, v11);
      else
        v17 = objc_msgSend(v16, "initWithFormat:", CFSTR("%@/%@"), CFSTR("com.apple.terminusd"), v11);
      v20 = v17;
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Reading %@ keychain key %@", "", "-[NRDKeyManager readKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 450, String, v20);
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "dataUsingEncoding:", 4, v11, v8));
      v45[0] = kSecClass;
      v45[1] = kSecAttrApplicationTag;
      v46[0] = kSecClassKey;
      v46[1] = v22;
      v45[2] = kSecAttrAccessGroup;
      v45[3] = kSecReturnRef;
      v46[2] = CFSTR("com.apple.terminusd");
      v46[3] = &__kCFBooleanTrue;
      v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 4));
      result = 0;
      v24 = SecItemCopyMatching(v23, &result);
      if ((_DWORD)v24 || !result)
      {
        if (result)
        {
          CFRelease(result);
          result = 0;
        }
        if ((_DWORD)v24 == -25308)
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to read %@ keychain key %@: keychain locked", "", "-[NRDKeyManager readKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 469, String, v20);
          }
        }
        else if ((_DWORD)v24 == -25300)
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to read %@ keychain key %@: not found", "", "-[NRDKeyManager readKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 467, String, v20);
          }
        }
        else
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to read %@ keychain key %@: %d", String, v20, v24);
          }
        }
      }
      else
      {
        v25 = CFGetTypeID(result);
        if (v25 == SecKeyGetTypeID())
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Successfully read %@ keychain key %@", "", "-[NRDKeyManager readKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 485, String, v20);
          }
          v21 = (void *)result;
          goto LABEL_61;
        }
        if (result)
        {
          CFRelease(result);
          result = 0;
        }
        v37 = sub_10014A0E4();
        v38 = _NRLogIsLevelEnabled(v37, 17);

        if (v38)
        {
          v39 = sub_10014A0E4();
          v40 = CFGetTypeID(result);
          v41 = (__CFString *)CFCopyTypeIDDescription(v40);
          _NRLogWithArgs(v39, 17, "Read %@ keychain key %@ with bad class %@", String, v20, v41);

        }
      }
      v21 = 0;
LABEL_61:

      v11 = (id)v42[0];
      v8 = (id)v42[1];
      goto LABEL_62;
    }
LABEL_14:
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v18 = (id)qword_1001E4AE0;
    v19 = _NRLogIsLevelEnabled(v18, 17);

    if (!v19)
    {
      v21 = 0;
LABEL_63:

      goto LABEL_64;
    }
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v20 = (id)qword_1001E4AE0;
    _NRLogWithArgs(v20, 17, "Cannot read key %@ from keychain for %@", v11, String);
    v21 = 0;
LABEL_62:

    goto LABEL_63;
  }
  v21 = 0;
LABEL_64:

  if (v21)
  {
    objc_setProperty_nonatomic(a1, v26, v21, 16);
    a1 = a1;
    v21 = a1;
  }
LABEL_66:

  return v21;
}

uint64_t sub_10012C6EC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  dispatch_queue_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  const CFStringRef *v14;
  CFStringRef v15;
  void *String;
  id v17;
  id v18;
  id v19;
  int v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFDictionary *v28;
  id v29;
  int IsLevelEnabled;
  id v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFDictionary *v38;
  void *v39;
  void *v40;
  BOOL v41;
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[3];
  CFStringRef v45;
  uint64_t v46;
  const __CFString *v47;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    if (!v7)
    {
      v29 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v29, 17);

      if (IsLevelEnabled)
      {
        v31 = sub_100128400();
        _NRLogWithArgs(v31, 17, "%s called with null itemName", "-[NRDLDKeychainItemSecKey saveToKeychainWithName:nrUUID:dataProtectionClass:]");

      }
      goto LABEL_78;
    }
    if (!*(_BYTE *)(a1 + 8))
    {
LABEL_75:
      a1 = 1;
      goto LABEL_79;
    }
    objc_opt_self(NRDKeyManager);
    if (qword_1001E4AD8 != -1)
      dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
    v9 = (dispatch_queue_t *)(id)qword_1001E4AD0;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = v7;
    v12 = v8;
    v13 = v12;
    if (!v9)
    {

      goto LABEL_78;
    }
    dispatch_assert_queue_V2(v9[2]);
    if ((_DWORD)a4 == 3)
    {
      v37 = v10;
      v14 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    else
    {
      if ((_DWORD)a4 != 4)
      {
        String = (void *)NRDataProtectionClassCreateString(a4);
        goto LABEL_15;
      }
      v37 = v10;
      v14 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    v15 = *v14;
    String = (void *)NRDataProtectionClassCreateString(a4);
    if (v15)
    {
      v17 = objc_alloc((Class)NSString);
      if (v13)
        v18 = objc_msgSend(v17, "initWithFormat:", CFSTR("%@/%@/%@/%@"), CFSTR("com.apple.terminusd"), v13, String, v11);
      else
        v18 = objc_msgSend(v17, "initWithFormat:", CFSTR("%@/%@"), CFSTR("com.apple.terminusd"), v11, v33, v34);
      v22 = v18;
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Adding %@ keychain key %@", "", "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]", 378, String, v22);
      }
      v40 = v22;
      v44[0] = kSecClass;
      v44[1] = kSecAttrApplicationTag;
      v45 = kSecClassKey;
      v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "dataUsingEncoding:", 4));
      v39 = (void *)v46;
      v44[2] = kSecAttrAccessGroup;
      v47 = CFSTR("com.apple.terminusd");
      v38 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v45, v44, 3));
      v23 = SecItemDelete(v38);
      if ((_DWORD)v23 == -25308)
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v28 = v38;
        if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to delete existing %@ keychain key %@: keychain locked", "", "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]", 396, String, v22);
        }
      }
      else
      {
        v24 = v23;
        if ((_DWORD)v23 == -25300)
        {
LABEL_38:
          v42[0] = kSecClass;
          v42[1] = kSecAttrApplicationTag;
          v43[0] = kSecClassKey;
          v43[1] = v39;
          v42[2] = kSecAttrAccessGroup;
          v42[3] = kSecAttrAccessible;
          v43[2] = CFSTR("com.apple.terminusd");
          v43[3] = v15;
          v42[4] = kSecValueRef;
          v43[4] = v37;
          v25 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 5));
          v26 = SecItemAdd(v25, 0);
          v27 = v26;
          if ((_DWORD)v26)
          {
            if ((_DWORD)v26 == -25308)
            {
              if (qword_1001E4AE8 != -1)
                dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
              if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
              {
                if (qword_1001E4AE8 != -1)
                  dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
                _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to add %@ keychain key %@: keychain locked", "", "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]", 421, String, v40);
              }
            }
            else
            {
              if (qword_1001E4AE8 != -1)
                dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
              if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
              {
                if (qword_1001E4AE8 != -1)
                  dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
                _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to add %@ keychain key %@: %d", String, v40, v27, v35, v36);
              }
            }
          }
          else
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
            {
              if (qword_1001E4AE8 != -1)
                dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
              _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Successfully added %@ keychain key %@", "", "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]", 417, String, v40);
            }
          }
          v41 = (_DWORD)v27 == 0;

          v28 = v38;
          goto LABEL_72;
        }
        if (!(_DWORD)v23)
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Successfully deleted existing %@ keychain key %@", "", "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]", 393, String, v40);
          }
          goto LABEL_38;
        }
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v28 = v38;
        if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to delete existing %@ keychain key %@: %d", String, v40, v24, v35, v36);
        }
      }
      v41 = 0;
LABEL_72:

      goto LABEL_73;
    }
LABEL_15:
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v19 = (id)qword_1001E4AE0;
    v20 = _NRLogIsLevelEnabled(v19, 17);

    if (v20)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v21 = (id)qword_1001E4AE0;
      _NRLogWithArgs(v21, 17, "Cannot save key %@ to keychain for %@", v11, String);

    }
    v41 = 0;
LABEL_73:

    if (v41)
    {
      *(_BYTE *)(a1 + 8) = 0;
      goto LABEL_75;
    }
LABEL_78:
    a1 = 0;
  }
LABEL_79:

  return a1;
}

char *sub_10012CF48(uint64_t a1, void *a2)
{
  const __CFData *v3;
  const __CFData *v4;
  const __CFDictionary *v5;
  SecKeyRef v6;
  __SecKey *v7;
  CFDataRef v8;
  char *v9;
  id v11;
  int IsLevelEnabled;
  id v13;
  id v14;
  int v15;
  id v16;
  int v17;
  id v18;
  id v19;
  int v20;
  id v21;
  CFErrorRef error;
  _QWORD v23[2];
  _QWORD v24[2];

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_19;
  if (!v3)
  {
    v11 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 17);

    if (IsLevelEnabled)
    {
      v13 = sub_100128400();
      _NRLogWithArgs(v13, 17, "%s called with null publicKeyData");
LABEL_18:

      v9 = 0;
      goto LABEL_13;
    }
LABEL_19:
    v9 = 0;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v14 = sub_100128400();
    v15 = _NRLogIsLevelEnabled(v14, 17);

    if (v15)
    {
      v13 = sub_100128400();
      _NRLogWithArgs(v13, 17, "%s called with null self.secKeyRef");
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v23[0] = kSecAttrKeyType;
  v23[1] = kSecAttrKeyClass;
  v24[0] = kSecAttrKeyTypeX25519;
  v24[1] = kSecAttrKeyClassPublic;
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 2));
  error = 0;
  v6 = SecKeyCreateWithData(v4, v5, &error);
  if (v6)
  {
    v7 = v6;
    if (error)
    {
      CFRelease(error);
      error = 0;
    }
    v8 = SecKeyCopyKeyExchangeResult(*(SecKeyRef *)(a1 + 16), kSecKeyAlgorithmECDHKeyExchangeStandard, v7, (CFDictionaryRef)&__NSDictionary0__struct, &error);
    CFRelease(v7);
    if (v8)
    {
      if (error)
      {
        CFRelease(error);
        error = 0;
      }
      v9 = sub_10012A76C((char *)[NRDLDKeychainItemData alloc], v8);
    }
    else
    {
      v19 = sub_100128400();
      v20 = _NRLogIsLevelEnabled(v19, 17);

      if (v20)
      {
        v21 = sub_100128400();
        _NRLogWithArgs(v21, 17, "Failed to compute shared secret: %@", error);

      }
      if (error)
      {
        CFRelease(error);
        v9 = 0;
        error = 0;
      }
      else
      {
        v9 = 0;
      }
    }

  }
  else
  {
    v16 = sub_100128400();
    v17 = _NRLogIsLevelEnabled(v16, 17);

    if (v17)
    {
      v18 = sub_100128400();
      _NRLogWithArgs(v18, 17, "Failed to ingest public DH key: %@", error);

    }
    if (error)
      CFRelease(error);
    v9 = 0;
  }

LABEL_13:
  return v9;
}

_QWORD *sub_10012D208(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id *v17;
  void *v18;
  int64x2_t v19;
  int64x2_t v20;
  _QWORD *v21;
  id v22;
  int IsLevelEnabled;
  id v24;
  id v26;
  int v27;
  id v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  objc_super v35;

  v5 = a2;
  v6 = v5;
  if (!a1)
    goto LABEL_8;
  if (!v5)
  {
    v22 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v22, 17);

    if (IsLevelEnabled)
    {
      v24 = sub_100128400();
      _NRLogWithArgs(v24, 17, "%s called with null nrUUID", "-[NRDLDDataClassKeychainItems initFromKeychainWithNRUUID:dataProtectionClass:]");

    }
    goto LABEL_8;
  }
  v35.receiver = a1;
  v35.super_class = (Class)NRDLDDataClassKeychainItems;
  v7 = objc_msgSendSuper2(&v35, "init");
  if (!v7)
  {
    v26 = sub_100128400();
    v27 = _NRLogIsLevelEnabled(v26, 16);

    if (v27)
    {
      v28 = sub_100128400();
      _NRLogWithArgs(v28, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDDataClassKeychainItems initFromKeychainWithNRUUID:dataProtectionClass:]", 454);

    }
    v29 = _os_log_pack_size(12);
    v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = __error();
    v32 = _os_log_pack_fill(v30, v29, *v31, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v32 = 136446210;
    *(_QWORD *)(v32 + 4) = "-[NRDLDDataClassKeychainItems initFromKeychainWithNRUUID:dataProtectionClass:]";
    v33 = sub_100128400();
    _NRLogAbortWithPack(v33, v30);
  }
  a1 = v7;
  v8 = sub_10012BECC((char *)[NRDLDKeychainItemSecKey alloc], CFSTR("RemotePublicKey"), v6, a3);
  v9 = (void *)a1[1];
  a1[1] = v8;

  v10 = a1[1];
  v11 = sub_10012BECC((char *)[NRDLDKeychainItemSecKey alloc], CFSTR("LocalPrivateKey"), v6, a3);
  v12 = (void *)a1[2];
  a1[2] = v11;

  v13 = a1[2];
  v14 = sub_10012BECC((char *)[NRDLDKeychainItemSecKey alloc], CFSTR("DHPrivateKey"), v6, a3);
  v15 = (void *)a1[4];
  a1[4] = v14;

  v16 = a1[4];
  v17 = sub_10012B9D0((id *)[NRDLDKeychainItemData alloc], CFSTR("SharedSecret"), v6, a3);
  v18 = (void *)a1[3];
  a1[3] = v17;

  v19.i64[0] = a1[3];
  v19.i64[1] = v16;
  v20.i64[0] = v10;
  v20.i64[1] = v13;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v20), (int32x4_t)vceqzq_s64(v19))))) & 1) == 0)
  {
LABEL_8:
    v21 = 0;
    goto LABEL_9;
  }
  a1 = a1;
  v21 = a1;
LABEL_9:

  return v21;
}

_QWORD *sub_10012D4AC(void *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  CFTypeRef *v5;
  SecAccessControlRef v6;
  SecAccessControlRef v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  id v14;
  void *String;
  _QWORD *v16;
  SecKeyRef v17;
  SecKeyRef v18;
  _BYTE *v19;
  void *v20;
  SecKeyRef v21;
  SecKeyRef v22;
  _BYTE *v23;
  void *v24;
  id v26;
  int v27;
  id v28;
  char *v29;
  int *v30;
  uint64_t v31;
  id v32;
  id v33;
  int v34;
  id v35;
  id v36;
  int IsLevelEnabled;
  id v38;
  CFErrorRef v39;
  id v40;
  int v41;
  id v42;
  uint64_t v43;
  CFErrorRef error;
  objc_super v45;
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];

  if (!a1)
    return 0;
  v45.receiver = a1;
  v45.super_class = (Class)NRDLDDataClassKeychainItems;
  v3 = objc_msgSendSuper2(&v45, "init");
  if (v3)
  {
    v4 = v3;
    error = 0;
    if ((_DWORD)a2 == 4)
    {
      v5 = (CFTypeRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    else
    {
      if ((_DWORD)a2 != 3)
        goto LABEL_14;
      v5 = (CFTypeRef *)&kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    if (*v5)
    {
      v6 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, *v5, 0x40000000uLL, &error);
      if (v6)
      {
        v7 = v6;
        if (error)
        {
          CFRelease(error);
          error = 0;
        }
        v52[0] = kSecAttrKeyType;
        v52[1] = kSecPrivateKeyAttrs;
        v53[0] = kSecAttrKeyTypeEd25519;
        v50[0] = kSecAttrIsPermanent;
        v50[1] = kSecAttrAccessControl;
        v51[0] = &__kCFBooleanFalse;
        v51[1] = v7;
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 2));
        v53[1] = v8;
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 2));

        v48[1] = kSecPrivateKeyAttrs;
        v49[0] = kSecAttrKeyTypeX25519;
        v47[1] = v7;
        v48[0] = kSecAttrKeyType;
        v46[0] = kSecAttrIsPermanent;
        v46[1] = kSecAttrAccessControl;
        v47[0] = &__kCFBooleanFalse;
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v47, v46, 2));
        v49[1] = v10;
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v48, 2));

        CFRelease(v7);
        if (v4[2])
        {
          if (v4[4])
          {
LABEL_25:
            v16 = v4;
LABEL_26:

            goto LABEL_27;
          }
        }
        else
        {
          v17 = SecKeyCreateRandomKey((CFDictionaryRef)v9, &error);
          if (!v17)
          {
            v36 = sub_100128400();
            IsLevelEnabled = _NRLogIsLevelEnabled(v36, 17);

            if (IsLevelEnabled)
            {
              v38 = sub_100128400();
              _NRLogWithArgs(v38, 17, "Failed to generate private key: %@", error);

            }
            v39 = error;
            if (error)
              goto LABEL_43;
            goto LABEL_39;
          }
          v18 = v17;
          if (error)
          {
            CFRelease(error);
            error = 0;
          }
          v19 = sub_10012BD60([NRDLDKeychainItemSecKey alloc], v18);
          v20 = (void *)v4[2];
          v4[2] = v19;

          CFRelease(v18);
          if (v4[4])
            goto LABEL_25;
        }
        v21 = SecKeyCreateRandomKey((CFDictionaryRef)v11, &error);
        if (v21)
        {
          v22 = v21;
          if (error)
          {
            CFRelease(error);
            error = 0;
          }
          v23 = sub_10012BD60([NRDLDKeychainItemSecKey alloc], v22);
          v24 = (void *)v4[4];
          v4[4] = v23;

          CFRelease(v22);
          goto LABEL_25;
        }
        v40 = sub_100128400();
        v41 = _NRLogIsLevelEnabled(v40, 17);

        if (v41)
        {
          v42 = sub_100128400();
          _NRLogWithArgs(v42, 17, "Failed to generate private key: %@", error);

        }
        v39 = error;
        if (error)
        {
LABEL_43:
          CFRelease(v39);
          v16 = 0;
          error = 0;
          goto LABEL_26;
        }
LABEL_39:
        v16 = 0;
        goto LABEL_26;
      }
      goto LABEL_32;
    }
LABEL_14:
    v12 = sub_100128400();
    v13 = _NRLogIsLevelEnabled(v12, 17);

    if (v13)
    {
      v14 = sub_100128400();
      String = (void *)NRDataProtectionClassCreateString(a2);
      _NRLogWithArgs(v14, 17, "Cannot generate keys for %@", String);

    }
    goto LABEL_16;
  }
  v26 = sub_100128400();
  v27 = _NRLogIsLevelEnabled(v26, 16);

  if (v27)
  {
    v28 = sub_100128400();
    _NRLogWithArgs(v28, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDLDDataClassKeychainItems initWithNewKeysForDataProtectionClass:]", 549);

  }
  v4 = (_QWORD *)_os_log_pack_size(12);
  v29 = (char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __error();
  v31 = _os_log_pack_fill(v29, v4, *v30, &_mh_execute_header, "%{public}s [super init] failed");
  *(_DWORD *)v31 = 136446210;
  *(_QWORD *)(v31 + 4) = "-[NRDLDDataClassKeychainItems initWithNewKeysForDataProtectionClass:]";
  v32 = sub_100128400();
  _NRLogAbortWithPack(v32, v29);
LABEL_32:
  v33 = sub_100128400();
  v34 = _NRLogIsLevelEnabled(v33, 17);

  if (v34)
  {
    v35 = sub_100128400();
    _NRLogWithArgs(v35, 17, "Failed to generate key access control: %@", error);

  }
  if (error)
    CFRelease(error);
LABEL_16:
  v16 = 0;
LABEL_27:

  return v16;
}

uint64_t sub_10012D9A0(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  int IsLevelEnabled;
  id v16;

  v5 = a2;
  v6 = v5;
  if (!a1)
  {
LABEL_16:
    v12 = 0;
    goto LABEL_11;
  }
  if (!v5)
  {
    v14 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v14, 17);

    if (IsLevelEnabled)
    {
      v16 = sub_100128400();
      _NRLogWithArgs(v16, 17, "%s called with null nrUUID", "-[NRDLDDataClassKeychainItems saveToKeychainWithNRUUID:dataProtectionClass:]");

    }
    goto LABEL_16;
  }
  v7 = a1[1];
  if (!v7)
  {
    v8 = 0;
    v9 = a1[2];
    if (!v9)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = sub_10012C6EC(v7, CFSTR("RemotePublicKey"), v6, a3) ^ 1;
  v9 = a1[2];
  if (v9)
LABEL_5:
    v8 |= sub_10012C6EC(v9, CFSTR("LocalPrivateKey"), v6, a3) ^ 1;
LABEL_6:
  v10 = a1[4];
  if (v10)
    v8 |= sub_10012C6EC(v10, CFSTR("DHPrivateKey"), v6, a3) ^ 1;
  v11 = a1[3];
  if (v11)
    v8 |= sub_10012BC34(v11, CFSTR("SharedSecret"), v6, a3) ^ 1;
  v12 = v8 ^ 1u;
LABEL_11:

  return v12;
}

void sub_10012DAD4(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  _BYTE *v19;
  id v20;
  id v21;
  id v22;
  int IsLevelEnabled;
  id v24;

  v5 = a2;
  if (a1)
  {
    v24 = v5;
    if (!v5)
    {
      v22 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v22, 17);

      v5 = 0;
      if (!IsLevelEnabled)
        goto LABEL_20;
      v19 = sub_100128400();
      _NRLogWithArgs(v19, 17, "%s called with null nrUUID", "-[NRDLDDataClassKeychainItems deleteFromKeychainWithNRUUID:dataProtectionClass:]");
      goto LABEL_19;
    }
    v6 = (void *)a1[1];
    if (v6)
    {
      v7 = v6;
      v8 = v24;
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v9 = (id)qword_1001E4AD0;
      sub_10014B2DC((uint64_t)v9, CFSTR("RemotePublicKey"), v8, a3);

      v5 = v24;
    }
    v10 = (void *)a1[2];
    if (v10)
    {
      v11 = v10;
      v12 = v24;
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v13 = (id)qword_1001E4AD0;
      sub_10014B2DC((uint64_t)v13, CFSTR("LocalPrivateKey"), v12, a3);

      v5 = v24;
    }
    v14 = (void *)a1[4];
    if (v14)
    {
      v15 = v14;
      v16 = v24;
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v17 = (id)qword_1001E4AD0;
      sub_10014B2DC((uint64_t)v17, CFSTR("DHPrivateKey"), v16, a3);

      v5 = v24;
    }
    v18 = (void *)a1[3];
    if (v18)
    {
      v19 = v18;
      v20 = v24;
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v21 = (id)qword_1001E4AD0;
      sub_10014C7B4((uint64_t)v21, CFSTR("SharedSecret"), v20, a3, 0);

      v19[8] = 1;
LABEL_19:

      v5 = v24;
    }
  }
LABEL_20:

}

_QWORD *sub_10012DD74(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v11;
  int IsLevelEnabled;
  id v13;
  int *v14;
  uint64_t v15;
  id v16;
  id v17;
  int v18;
  id v19;
  uint64_t v20;
  objc_super v21;
  _QWORD v22[2];

  v3 = a2;
  if (!a1)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_5;
  }
  v21.receiver = a1;
  v21.super_class = (Class)NRDDeviceIdentity;
  v4 = objc_msgSendSuper2(&v21, "init");
  if (!v4)
  {
    v11 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

    if (IsLevelEnabled)
    {
      v13 = sub_100128400();
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDDeviceIdentity initWithDeviceIdentityPayload:]", 709);

    }
    v3 = (id)_os_log_pack_size(12);
    a1 = (uint64_t *)((char *)&v20 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    v14 = __error();
    v15 = _os_log_pack_fill(a1, v3, *v14, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v15 + 4) = "-[NRDDeviceIdentity initWithDeviceIdentityPayload:]";
    v16 = sub_100128400();
    _NRLogAbortWithPack(v16, a1);
    goto LABEL_9;
  }
  a1 = v4;
  if (objc_msgSend(v3, "length") != (id)48)
  {
LABEL_9:
    v17 = sub_100128400();
    v18 = _NRLogIsLevelEnabled(v17, 17);

    if (v18)
    {
      v19 = sub_100128400();
      _NRLogWithArgs(v19, 17, "%s called with null payload.length == sizeof(uuid_t) + sizeof(ccec25519pubkey)", "-[NRDDeviceIdentity initWithDeviceIdentityPayload:]");

    }
    goto LABEL_11;
  }
  v22[0] = 0;
  v22[1] = 0;
  objc_msgSend(v3, "getBytes:range:", v22, 0, 16);
  v5 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v22);
  v6 = (void *)a1[1];
  a1[1] = v5;

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subdataWithRange:", 16, 32));
  v8 = (void *)a1[2];
  a1[2] = v7;

  a1 = a1;
  v9 = a1;
LABEL_5:

  return v9;
}

void sub_10012DFA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *j;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  char *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *k;
  void *v42;
  uint64_t v43;
  id v44;
  int v45;
  id v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  id v50;
  int IsLevelEnabled;
  id v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[128];
  _BYTE v72[128];
  _QWORD v73[16];

  v2 = objc_opt_self(a1);
  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  if (qword_1001E4A38)
    return;
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v4 = (id)qword_1001E4AD0;
  v5 = objc_opt_class(NRDLocalDevice);
  v6 = sub_10014CD70((uint64_t)v4, v5, CFSTR("LocalDeviceConfigClassD"), 4);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)qword_1001E4A38;
  qword_1001E4A38 = v7;

  if (!qword_1001E4A38)
  {
    v9 = objc_alloc_init((Class)NSMutableDictionary);
    v10 = (void *)qword_1001E4A38;
    qword_1001E4A38 = (uint64_t)v9;

  }
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    v11 = (void *)qword_1001E4A38;
    v12 = (id)qword_1001E4A90;
    _NRLogWithArgs(v12, 0, "%s%.30s:%-4d Loaded %llu ClassD local device configs from keychain", "", "+[NRDLocalDevice initializeLocalDeviceDatabaseIfNecessary]", 911, objc_msgSend(v11, "count"));

  }
  if (qword_1001E4A38)
  {
    v13 = objc_alloc_init((Class)NSMutableDictionary);
    v14 = (void *)qword_1001E4A40;
    qword_1001E4A40 = (uint64_t)v13;

    if (qword_1001E4A40)
    {
      v58 = v2;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v15 = (id)qword_1001E4A38;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v63, v72, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v64;
        do
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v64 != v18)
              objc_enumerationMutation(v15);
            v20 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)i);
            v21 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v20));
            v22 = (void *)v21;
            if (v21)
              v23 = *(void **)(v21 + 56);
            else
              v23 = 0;
            v24 = v23;

            if (v24)
              objc_msgSend((id)qword_1001E4A40, "setObject:forKeyedSubscript:", v20, v24);

          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v63, v72, 16);
        }
        while (v17);
      }

      v1 = v58;
      objc_opt_self(v58);
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v25 = (id)qword_1001E4A38;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v67, v73, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v68;
        do
        {
          for (j = 0; j != v27; j = (char *)j + 1)
          {
            if (*(_QWORD *)v68 != v28)
              objc_enumerationMutation(v25);
            v30 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)j);
            v31 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v30));
            v32 = (_QWORD *)v31;
            if (v31 && (*(_BYTE *)(v31 + 8) || *(_BYTE *)(v31 + 9)) && !*(_QWORD *)(v31 + 72))
            {
              v33 = sub_10012D208([NRDLDDataClassKeychainItems alloc], v30, 4);
              v34 = (void *)v32[9];
              v32[9] = v33;

            }
          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v67, v73, 16);
        }
        while (v27);
      }

      v35 = (char *)objc_opt_self(v1);
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 == -1)
        goto LABEL_39;
      goto LABEL_55;
    }
    v50 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v50, 16);

    if (IsLevelEnabled)
    {
      v52 = sub_100128400();
      _NRLogWithArgs(v52, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrdLocalDevicesByIdentity) != ((void *)0)", "", "+[NRDLocalDevice initializeLocalDeviceDatabaseIfNecessary]", 915);

    }
    v53 = _os_log_pack_size(12);
    v35 = (char *)&v57 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v54 = __error();
    v55 = _os_log_pack_fill(v35, v53, *v54, &_mh_execute_header, "%{public}s Assertion Failed: (nrdLocalDevicesByIdentity) != ((void *)0)");
    *(_DWORD *)v55 = 136446210;
    *(_QWORD *)(v55 + 4) = "+[NRDLocalDevice initializeLocalDeviceDatabaseIfNecessary]";
  }
  else
  {
    v44 = sub_100128400();
    v45 = _NRLogIsLevelEnabled(v44, 16);

    if (v45)
    {
      v46 = sub_100128400();
      _NRLogWithArgs(v46, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrdLocalDevices) != ((void *)0)", "", "+[NRDLocalDevice initializeLocalDeviceDatabaseIfNecessary]", 912);

    }
    v47 = _os_log_pack_size(12);
    v35 = (char *)&v57 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v48 = __error();
    v49 = _os_log_pack_fill(v35, v47, *v48, &_mh_execute_header, "%{public}s Assertion Failed: (nrdLocalDevices) != ((void *)0)");
    *(_DWORD *)v49 = 136446210;
    *(_QWORD *)(v49 + 4) = "+[NRDLocalDevice initializeLocalDeviceDatabaseIfNecessary]";
  }
  v56 = sub_100128400();
  _NRLogAbortWithPack(v56, v35);
LABEL_55:
  dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
LABEL_39:
  v36 = (id)qword_1001E4AD0;
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_10012E670;
  v73[3] = &unk_1001B85D0;
  v73[4] = v35;
  sub_10014AF10((uint64_t)v36, v73);

  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v37 = (id)qword_1001E4A38;
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v60;
    do
    {
      for (k = 0; k != v39; k = (char *)k + 1)
      {
        if (*(_QWORD *)v60 != v40)
          objc_enumerationMutation(v37);
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)k)));
        sub_10012ED2C((uint64_t)NRDLocalDevice, v42);

      }
      v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
    }
    while (v39);
  }

  v43 = objc_opt_self(v1);
  sub_10012EDB0(v43, 0);
}

void sub_10012E670(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  NRDLDDataClassKeychainItems *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  char v22;
  uint64_t v23;
  dispatch_queue_t *v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *j;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  id *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];
  void (*v49)(uint64_t);
  void *v50;
  uint64_t v51;
  _BYTE v52[128];
  _BYTE v53[128];

  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v2 = (id)qword_1001E4AD0;
  v3 = objc_opt_class(NRDLDKeys);
  v4 = sub_10014CD70((uint64_t)v2, v3, CFSTR("LocalDeviceKeysClassC"), 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (v5)
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v6 = (id)qword_1001E4A90;
      _NRLogWithArgs(v6, 0, "%s%.30s:%-4d Loaded %llu legacy ClassC keys from keychain", "", "+[NRDLocalDevice loadClassCKeys]_block_invoke", 983, objc_msgSend(v5, "count"));

    }
    v38 = a1;
    v39 = v5;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v12));
          v14 = (_QWORD *)v13;
          if (v13 && (*(_BYTE *)(v13 + 8) || *(_BYTE *)(v13 + 9)))
          {
            v15 = [NRDLDDataClassKeychainItems alloc];
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v12));
            v17 = sub_10012A370(v15, v16);
            v18 = (void *)v14[10];
            v14[10] = v17;

            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
            {
              if (qword_1001E4A98 != -1)
                dispatch_once(&qword_1001E4A98, &stru_1001B8730);
              _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Migrated legacy ClassC keys for %@", "", "+[NRDLocalDevice loadClassCKeys]_block_invoke", 993, v14);
            }
          }
          else
          {
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
            {
              if (qword_1001E4A98 != -1)
                dispatch_once(&qword_1001E4A98, &stru_1001B8730);
              v19 = (id)qword_1001E4A90;
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "UUIDString"));
              _NRLogWithArgs(v19, 0, "%s%.30s:%-4d Skipping migrating legacy ClassC keys for %@", "", "+[NRDLocalDevice loadClassCKeys]_block_invoke", 988, v20);

            }
          }

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
      }
      while (v9);
    }

    a1 = v38;
    v5 = v39;
    if (sub_10012FB78(*(_QWORD *)(v38 + 32)))
    {
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v21 = (id)qword_1001E4AD0;
      v22 = sub_10014C7B4((uint64_t)v21, CFSTR("LocalDeviceKeysClassC"), 0, 3, 0);

      if ((v22 & 1) == 0)
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          _NRLogWithArgs(qword_1001E4A90, 16, "%s%.30s:%-4d Failed to delete legacy ClassC keys from the keychain", "", "+[NRDLocalDevice loadClassCKeys]_block_invoke", 1002);
        }
      }
    }
  }
  v23 = objc_opt_self(*(_QWORD *)(a1 + 32));
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v24 = (dispatch_queue_t *)(id)qword_1001E4AD0;
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v49 = sub_10013030C;
  v50 = &unk_1001B85D0;
  v51 = v23;
  v25 = v48;
  if (v24)
  {
    dispatch_assert_queue_V2(v24[2]);
    if (MKBGetDeviceLockState(0))
      sub_10014B110((uint64_t)v24, v25);
    else
      v49((uint64_t)v25);
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v26 = (id)qword_1001E4A38;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v41;
    do
    {
      for (j = 0; j != v28; j = (char *)j + 1)
      {
        if (*(_QWORD *)v41 != v29)
          objc_enumerationMutation(v26);
        v31 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)j);
        v32 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v31));
        v33 = (_QWORD *)v32;
        if (v32 && (*(_BYTE *)(v32 + 8) || *(_BYTE *)(v32 + 9)))
        {
          if (*(_QWORD *)(v32 + 80))
          {
            if (*(_QWORD *)(v32 + 152))
              goto LABEL_52;
          }
          else
          {
            v34 = sub_10012D208([NRDLDDataClassKeychainItems alloc], v31, 3);
            v35 = (void *)v33[10];
            v33[10] = v34;

            if (v33[19])
              goto LABEL_52;
          }
          v36 = sub_10012B9D0((id *)[NRDLDKeychainItemData alloc], CFSTR("OOBK"), v31, 3);
          v37 = (void *)v33[19];
          v33[19] = v36;

        }
LABEL_52:

      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
    }
    while (v28);
  }

}

void sub_10012ED2C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v6 = a2;
  objc_opt_self(a1);
  if (_os_feature_enabled_impl("terminus", "MASQUEProxyServer"))
  {
    v3 = v6;
    if (v6)
      v3 = (void *)v6[16];
    v4 = objc_msgSend(v3, "usesTLS");
  }
  else
  {
    v4 = 0;
  }
  v5 = v6;
  if (v6)
    v5 = (void *)v6[4];
  sub_10012FDC0((uint64_t)NRDLocalDevice, v4, v5);

}

uint64_t sub_10012EDB0(uint64_t a1, int a2)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  id v18;
  _BYTE *v19;
  int v20;
  int v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  int v26;
  void *k;
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  unsigned __int8 *v43;
  int v44;
  id v45;
  __objc2_class *v46;
  const char *v47;
  void *v48;
  id v49;
  dispatch_queue_t *v50;
  id v51;
  __CFString *v52;
  __CFString *v53;
  void *v54;
  id v55;
  void *v56;
  _BOOL4 v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  void *m;
  _BYTE *v65;
  id v66;
  int v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  void *n;
  uint64_t v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  id v83;
  id v85;
  int IsLevelEnabled;
  id v87;
  unsigned int v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[128];
  _BYTE v116[128];
  _BYTE v117[128];
  _BYTE v118[128];
  _BYTE v119[128];
  id v120[16];

  v90 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v3 = (id)qword_1001E4A38;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v107, v119, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v108;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v108 != v7)
          objc_enumerationMutation(v3);
        v10 = *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * (_QWORD)i);
        v11 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v10));
        if (v11)
        {
          v12 = v11[24];

          if (v12)
          {
            if (!v6)
              v6 = objc_alloc_init((Class)NSMutableDictionary);
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v10));
            objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, v10);

          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v107, v119, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }

  if (objc_msgSend(v6, "count"))
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v13 = v6;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v103, v118, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v104;
      do
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(_QWORD *)v104 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)j));
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v103, v118, 16);
      }
      while (v15);
    }

  }
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v18 = (id)qword_1001E4AD0;
  if (!v18)
    goto LABEL_32;
  v19 = v18;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v18 + 2));
  if (!v19[10])
  {
    v19[10] = 1;
    if (v19[8] == 4)
    {
      sub_10014A63C((uint64_t)v19);
      if (v19[9])
      {
        v19[8] = 3;
        sub_10014A8AC((uint64_t)v19);
      }
    }
  }
  v20 = v19[8] & 0xFD;

  if (v20 == 1 && (sub_10012FB78(v90) & 1) == 0)
    v21 = 0;
  else
LABEL_32:
    v21 = 1;
  objc_opt_self(v90);
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v22 = (id)qword_1001E4A38;
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v111, v120, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v112;
    v26 = 1;
    do
    {
      for (k = 0; k != v24; k = (char *)k + 1)
      {
        if (*(_QWORD *)v112 != v25)
          objc_enumerationMutation(v22);
        v28 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)k);
        v29 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v28));
        v30 = (void *)v29;
        if (v29 && !*(_BYTE *)(v29 + 24) && (*(_BYTE *)(v29 + 8) || *(_BYTE *)(v29 + 9)))
        {
          v31 = *(_QWORD **)(v29 + 72);
          if (v31)
            v26 &= sub_10012D9A0(v31, v28, 4);
        }

      }
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v111, v120, 16);
    }
    while (v24);

    if ((v26 & 1) == 0)
      v21 = 0;
  }
  else
  {

  }
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 2))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 2, "%s%.30s:%-4d Checking if ClassD configs need to be saved", "", "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]", 1263);
  }
  v89 = v21;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v32 = (id)qword_1001E4A38;
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v99, v117, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v100;
    do
    {
      v36 = 0;
      do
      {
        if (*(_QWORD *)v100 != v35)
          objc_enumerationMutation(v32);
        v37 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)v36);
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 2))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          v38 = (id)qword_1001E4A90;
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "UUIDString"));
          v40 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v37));
          v41 = (void *)v40;
          if (v40)
          {
            v42 = "NO";
            if (*(_BYTE *)(v40 + 21))
              v42 = "YES";
          }
          else
          {
            v42 = "NO";
          }
          _NRLogWithArgs(v38, 2, "%s%.30s:%-4d Local device %@ ClassD config isChanged %s", "", "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]", 1267, v39, v42);

        }
        v43 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v37));
        if (v43)
        {
          v44 = v43[21];

          if (v44)
          {

            goto LABEL_83;
          }
        }
        v36 = (char *)v36 + 1;
      }
      while (v34 != v36);
      v45 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v99, v117, 16);
      v34 = v45;
    }
    while (v45);
  }

  if (!a2)
  {
    v46 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Skipping saving ClassD configs", "", "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]", 1291);
    }
    goto LABEL_126;
  }
LABEL_83:
  v46 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (a2)
      v47 = "Force s";
    else
      v47 = "S";
    v48 = (void *)qword_1001E4A38;
    v49 = (id)qword_1001E4A90;
    _NRLogWithArgs(v49, 0, "%s%.30s:%-4d %saving %llu local device ClassD configs", "", "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]", 1276, v47, objc_msgSend(v48, "count"));

  }
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v50 = (dispatch_queue_t *)(id)qword_1001E4AD0;
  v51 = (id)qword_1001E4A38;
  v52 = CFSTR("LocalDeviceConfigClassD");
  if (!v50)
    goto LABEL_122;
  dispatch_assert_queue_V2(v50[2]);
  if (!v51)
  {
    v85 = sub_10014A0E4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v85, 17);

    if (IsLevelEnabled)
    {
      v87 = sub_10014A0E4();
      _NRLogWithArgs(v87, 17, "%s called with null dictToSave", "-[NRDKeyManager saveNRUUIDDictionary:toKeychainWithName:dataProtectionClass:]");

    }
    goto LABEL_122;
  }
  v51 = v51;
  v53 = CFSTR("LocalDeviceConfigClassD");
  dispatch_assert_queue_V2(v50[2]);
  v120[0] = 0;
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v51, 1, v120));
  v55 = v120[0];
  v56 = v55;
  if (!v54 || v55)
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to archive keychain data %@: %@", "", "-[NRDKeyManager _saveNRUUIDDictionary:toKeychainWithName:dataProtectionClass:retryBlock:]", 760, CFSTR("LocalDeviceConfigClassD"), v56);
    }

LABEL_122:
    goto LABEL_123;
  }
  LOBYTE(v111) = 0;
  v57 = sub_10014B850((uint64_t)v50, v54, CFSTR("LocalDeviceConfigClassD"), 0, 4, &v111);

  if (v57)
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v58 = (void *)qword_1001E4A38;
      v59 = (id)qword_1001E4A90;
      _NRLogWithArgs(v59, 0, "%s%.30s:%-4d Saved %llu local device ClassD configs", "", "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]", 1282, objc_msgSend(v58, "count"));

    }
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v60 = (id)qword_1001E4A38;
    v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v95, v116, 16);
    if (v61)
    {
      v62 = v61;
      v63 = *(_QWORD *)v96;
      do
      {
        for (m = 0; m != v62; m = (char *)m + 1)
        {
          if (*(_QWORD *)v96 != v63)
            objc_enumerationMutation(v60);
          v65 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)m)));
          if (v65)
            v65[21] = 0;

        }
        v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v95, v116, 16);
      }
      while (v62);
    }

    goto LABEL_126;
  }
LABEL_123:
  v66 = sub_100128400();
  v67 = _NRLogIsLevelEnabled(v66, 17);

  if (v67)
  {
    v68 = sub_100128400();
    _NRLogWithArgs(v68, 17, "Failed to save %llu local device ClassD configs", objc_msgSend((id)qword_1001E4A38, "count"));

  }
  v89 = 0;
LABEL_126:
  if (objc_msgSend(v6, "count"))
  {
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v69 = v6;
    v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v91, v115, 16);
    if (v70)
    {
      v71 = v70;
      v72 = *(_QWORD *)v92;
      do
      {
        for (n = 0; n != v71; n = (char *)n + 1)
        {
          if (*(_QWORD *)v92 != v72)
            objc_enumerationMutation(v69);
          v74 = *(_QWORD *)(*((_QWORD *)&v91 + 1) + 8 * (_QWORD)n);
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "objectForKeyedSubscript:", v74));
          objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", v75, v74);

        }
        v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v91, v115, 16);
      }
      while (v71);
    }

  }
  objc_opt_self(v90);
  if (qword_1001E4A48)
  {
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v76 = (id)qword_1001E4A38;
    v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v111, v120, 16);
    if (v77)
    {
      v78 = v77;
      v79 = *(_QWORD *)v112;
LABEL_138:
      v80 = 0;
      while (1)
      {
        if (*(_QWORD *)v112 != v79)
          objc_enumerationMutation(v76);
        v81 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * v80)));
        if (v81)
        {
          v82 = v81[7];

          if (v82)
            break;
        }
        if (v78 == (id)++v80)
        {
          v78 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v111, v120, 16);
          if (v78)
            goto LABEL_138;
          goto LABEL_145;
        }
      }
    }
    else
    {
LABEL_145:

      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d No remaining devices with a local identity UUID, deleting encrypted identity key", "", "+[NRDLocalDevice deleteLocalDeviceIdentityKeyIfNecessary]", 1166);
      }
      if (qword_1001E4A48)
      {
        objc_opt_self(&v46[52]);
        if (qword_1001E4AD8 != -1)
          dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
        v83 = (id)qword_1001E4AD0;
        sub_10014B2DC((uint64_t)v83, CFSTR("IdentityKey"), 0, 4);

        v76 = (id)qword_1001E4A48;
      }
      else
      {
        v76 = 0;
      }
      qword_1001E4A48 = 0;
    }

  }
  return v89;
}

uint64_t sub_10012FB78(uint64_t a1)
{
  id v1;
  _BYTE *v2;
  int v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  void *i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  objc_opt_self(a1);
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v1 = (id)qword_1001E4AD0;
  if (!v1)
    goto LABEL_27;
  v2 = v1;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v1 + 2));
  if (!v2[10])
  {
    v2[10] = 1;
    if (v2[8] == 4)
    {
      sub_10014A63C((uint64_t)v2);
      if (v2[9])
      {
        v2[8] = 3;
        sub_10014A8AC((uint64_t)v2);
      }
    }
  }
  v3 = v2[8] & 0xFD;

  if (v3 == 1)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = (id)qword_1001E4A38;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v17;
      v8 = 1;
      while (1)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v4);
          v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          v11 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v10, (_QWORD)v16));
          v12 = (_QWORD *)v11;
          if (v11 && !*(_BYTE *)(v11 + 24) && (*(_BYTE *)(v11 + 8) || *(_BYTE *)(v11 + 9)))
          {
            v13 = *(_QWORD **)(v11 + 80);
            if (v13)
            {
              if (!sub_10012D9A0(v13, v10, 3))
              {
                v8 = 0;
                v14 = v12[19];
                if (!v14)
                  goto LABEL_13;
LABEL_26:
                v8 &= sub_10012BC34(v14, CFSTR("OOBK"), v10, 3);
                goto LABEL_13;
              }
              objc_msgSend(v12, "setHasSavedClassCKeysInKeychain:", 1);
            }
            v14 = v12[19];
            if (v14)
              goto LABEL_26;
          }
LABEL_13:

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (!v6)
          goto LABEL_29;
      }
    }
    LOBYTE(v8) = 1;
LABEL_29:

  }
  else
  {
LABEL_27:
    LOBYTE(v8) = 0;
  }
  return v8 & 1;
}

void sub_10012FDC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  int v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  int *v15;
  uint64_t v16;
  id v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  id v22;

  v22 = a3;
  v5 = objc_opt_self(a1);
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  if (v22)
  {
    v7 = sub_10012FFF4(v5);
    if (v7)
    {
      v9 = (_QWORD *)v7;
      if (*(_QWORD *)(v7 + 136) == a2)
        goto LABEL_4;
    }
    else
    {
      v12 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

      if (IsLevelEnabled)
      {
        v14 = sub_100128400();
        _NRLogWithArgs(v14, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLocalDeviceFlagsInner:nrUUID:saveToDisk:]", 3540);

      }
      a2 = _os_log_pack_size(12);
      v9 = (id *)((char *)&v22 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = __error();
      v16 = _os_log_pack_fill(v9, a2, *v15, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v16 = 136446210;
      *(_QWORD *)(v16 + 4) = "+[NRDLocalDevice updateLocalDeviceFlagsInner:nrUUID:saveToDisk:]";
      v17 = sub_100128400();
      _NRLogAbortWithPack(v17, v9);
    }
    v18 = (void *)_NRCopyLogObjectForNRUUID(v22, v8);
    v19 = _NRLogIsLevelEnabled(v18, 0);

    if (v19)
    {
      v21 = (void *)_NRCopyLogObjectForNRUUID(v22, v20);
      _NRLogWithArgs(v21, 0, "%s%.30s:%-4d %@ Updating local flags from %#llx to %#llx", "", "+[NRDLocalDevice updateLocalDeviceFlagsInner:nrUUID:saveToDisk:]", 3544, v9, v9[17], a2);

    }
    objc_msgSend(v9, "setLocalFlags:", a2, v22);
    goto LABEL_4;
  }
  v10 = sub_100128400();
  v11 = _NRLogIsLevelEnabled(v10, 17);

  if (!v11)
    goto LABEL_5;
  v9 = sub_100128400();
  _NRLogWithArgs(v9, 17, "%s called with null nrUUID", "+[NRDLocalDevice updateLocalDeviceFlagsInner:nrUUID:saveToDisk:]");
LABEL_4:

LABEL_5:
}

char *sub_10012FFF4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  id v9;
  int IsLevelEnabled;
  id v11;
  id v12;
  int v13;

  v3 = a2;
  v4 = objc_opt_self(a1);
  if (!v3)
  {
    v9 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 17);

    if (IsLevelEnabled)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 17, "%s called with null nrUUID");
LABEL_9:

    }
LABEL_10:
    v7 = 0;
    goto LABEL_4;
  }
  v5 = v4;
  if ((_NRIsUUIDNonZero(v3) & 1) == 0)
  {
    v12 = sub_100128400();
    v13 = _NRLogIsLevelEnabled(v12, 17);

    if (v13)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 17, "called with all-zero nrUUID");
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  v7 = sub_1001300EC(v5, v3, 1);
LABEL_4:

  return v7;
}

char *sub_1001300EC(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  id v10;
  void *v11;
  NRDLocalDevice *v12;
  uint64_t v13;
  id v15;
  int IsLevelEnabled;
  id v17;
  id v18;
  int v19;

  v5 = a2;
  v6 = objc_opt_self(a1);
  if (!v5)
  {
    v15 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

    if (IsLevelEnabled)
    {
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 17, "%s called with null nrUUID");
LABEL_20:

    }
LABEL_21:
    v9 = 0;
    goto LABEL_15;
  }
  v7 = v6;
  if ((_NRIsUUIDNonZero(v5) & 1) == 0)
  {
    v18 = sub_100128400();
    v19 = _NRLogIsLevelEnabled(v18, 17);

    if (v19)
    {
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 17, "called with all-zero nrUUID");
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  v8 = sub_10014CFBC();
  dispatch_assert_queue_V2(v8);

  sub_10012DFA0(v7);
  v9 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v5));
  if (!v9 && a3)
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v10 = (id)qword_1001E4A90;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
      _NRLogWithArgs(v10, 0, "%s%.30s:%-4d Creating new local device for query %@", "", "+[NRDLocalDevice copyLocalDeviceForNRUUID:shouldCreate:]", 2119, v11);

    }
    v12 = [NRDLocalDevice alloc];
    if (v12)
    {
      v9 = sub_10012A18C((char *)v12, v5);
      sub_10012A944(v9);
      if (v9)
        v9[21] = 1;
    }
    else
    {
      v9 = 0;
    }
    objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", v9, v5);
    v13 = objc_opt_self(v7);
    sub_10012EDB0(v13, 0);
  }
LABEL_15:

  return v9;
}

void sub_10013030C(uint64_t a1)
{
  id v2;
  char v3;
  dispatch_queue_t *v4;
  _QWORD *v5;
  _QWORD v6[2];
  void (*v7)(uint64_t);
  void *v8;
  uint64_t v9;
  char v10;

  v10 = 0;
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v2 = (id)qword_1001E4AD0;
  v3 = sub_10014C7B4((uint64_t)v2, CFSTR("LocalDeviceKeysClassA"), 0, 1, &v10);

  if ((v3 & 1) == 0)
  {
    if (v10)
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 1))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        _NRLogWithArgs(qword_1001E4A90, 1, "%s%.30s:%-4d ClassA keychain is locked, will retry deleting legacy keys after unlocking", "", "+[NRDLocalDevice deleteClassAKeysRetryIfNeeded]_block_invoke", 1074);
      }
      objc_opt_self(NRDKeyManager);
      if (qword_1001E4AD8 != -1)
        dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
      v4 = (dispatch_queue_t *)(id)qword_1001E4AD0;
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v7 = sub_100130580;
      v8 = &unk_1001B85D0;
      v9 = *(_QWORD *)(a1 + 32);
      v5 = v6;
      if (v4)
      {
        dispatch_assert_queue_V2(v4[2]);
        if (MKBGetDeviceLockState(0))
          sub_10014B110((uint64_t)v4, v5);
        else
          v7((uint64_t)v5);
      }

    }
    else
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        _NRLogWithArgs(qword_1001E4A90, 16, "%s%.30s:%-4d Failed to delete legacy ClassA keys from the keychain", "", "+[NRDLocalDevice deleteClassAKeysRetryIfNeeded]_block_invoke", 1079);
      }
    }
  }
}

void sub_100130580(uint64_t a1)
{
  uint64_t v1;
  dispatch_queue_t *v2;
  _QWORD *v3;
  _QWORD v4[2];
  uint64_t (*v5)();
  void *v6;
  uint64_t v7;

  v1 = objc_opt_self(*(_QWORD *)(a1 + 32));
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v2 = (dispatch_queue_t *)(id)qword_1001E4AD0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v5 = sub_10013030C;
  v6 = &unk_1001B85D0;
  v7 = v1;
  v3 = v4;
  if (v2)
  {
    dispatch_assert_queue_V2(v2[2]);
    if (MKBGetDeviceLockState(0))
      sub_10014B110((uint64_t)v2, v3);
    else
      ((void (*)(_QWORD *))v5)(v3);
  }

}

uint64_t sub_100130668(uint64_t a1, char a2)
{
  uint64_t v3;
  void *v5;
  void *v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  void *LogString;
  SecAccessControlRef v11;
  SecAccessControlRef v12;
  void *v13;
  const __CFDictionary *v14;
  SecKeyRef v15;
  SecKeyRef v16;
  id v17;
  void *v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  int v28;
  id v29;
  id v30;
  int IsLevelEnabled;
  id v32;
  uint64_t v33;
  CFErrorRef error;
  void *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];

  objc_opt_self(a1);
  if (qword_1001E4A48)
    return 1;
  v5 = sub_10012BECC((char *)[NRDLDKeychainItemSecKey alloc], CFSTR("IdentityKey"), 0, 4);
  v6 = (void *)qword_1001E4A48;
  qword_1001E4A48 = (uint64_t)v5;

  if (qword_1001E4A48)
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v7 = (_QWORD *)qword_1001E4A48;
      v8 = (id)qword_1001E4A90;
      v9 = sub_10012B324(v7);
      LogString = (void *)_NRKeyCreateLogString(v9);
      _NRLogWithArgs(v8, 0, "%s%.30s:%-4d Loaded encrypted identity key: %@", "", "+[NRDLocalDevice initializeLocalDeviceIdentityKeyCreateIfNecessary:]", 1095, LogString);

    }
    return 1;
  }
  if ((a2 & 1) != 0)
  {
    error = 0;
    v11 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
    if (v11)
    {
      v12 = v11;
      if (error)
      {
        CFRelease(error);
        error = 0;
      }
      v38[0] = kSecAttrKeyType;
      v38[1] = kSecPrivateKeyAttrs;
      v39[0] = kSecAttrKeyTypeX25519;
      v36[0] = kSecAttrIsPermanent;
      v36[1] = kSecAttrAccessControl;
      v37[0] = &__kCFBooleanFalse;
      v37[1] = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 2));
      v39[1] = v13;
      v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v39, v38, 2));

      CFRelease(v12);
      v15 = SecKeyCreateRandomKey(v14, &error);
      if (v15)
      {
        v16 = v15;
        if (error)
        {
          CFRelease(error);
          error = 0;
        }
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          v17 = (id)qword_1001E4A90;
          v35 = 0;
          SecKeyCopyPublicBytes(v16, &v35);
          v18 = v35;
          v35 = 0;
          v19 = (void *)_NRKeyCreateLogString(v18);

          _NRLogWithArgs(v17, 0, "%s%.30s:%-4d Generated new encrypted identity key: %@", "", "+[NRDLocalDevice initializeLocalDeviceIdentityKeyCreateIfNecessary:]", 1140, v19);
        }
        v20 = sub_10012BD60([NRDLDKeychainItemSecKey alloc], v16);
        v21 = (void *)qword_1001E4A48;
        qword_1001E4A48 = (uint64_t)v20;

        CFRelease(v16);
        if ((sub_10012C6EC(qword_1001E4A48, CFSTR("IdentityKey"), 0, 4) & 1) != 0)
        {
          v3 = 1;
LABEL_39:

          return v3;
        }
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
        {
          v25 = sub_100128400();
          _NRLogWithArgs(v25, 16, "%s%.30s:%-4d Failed to save encrypted identity key to keychain, discarding", "", "+[NRDLocalDevice initializeLocalDeviceIdentityKeyCreateIfNecessary:]", 1146);

        }
        v26 = (void *)qword_1001E4A48;
        qword_1001E4A48 = 0;

      }
      else
      {
        v30 = sub_100128400();
        IsLevelEnabled = _NRLogIsLevelEnabled(v30, 17);

        if (IsLevelEnabled)
        {
          v32 = sub_100128400();
          _NRLogWithArgs(v32, 17, "Failed to generate private key: %@", error);

        }
        if (error)
        {
          CFRelease(error);
          v3 = 0;
          error = 0;
          goto LABEL_39;
        }
      }
      v3 = 0;
      goto LABEL_39;
    }
    v27 = sub_100128400();
    v28 = _NRLogIsLevelEnabled(v27, 17);

    if (v28)
    {
      v29 = sub_100128400();
      _NRLogWithArgs(v29, 17, "Failed to generate key access control: %@", error);

    }
    if (error)
      CFRelease(error);
    return 0;
  }
  else
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      _NRLogWithArgs(qword_1001E4A90, 16, "%s%.30s:%-4d Failed to load identity key, not creating new one", "", "+[NRDLocalDevice initializeLocalDeviceIdentityKeyCreateIfNecessary:]", 1100);
    }
    sub_100109270(CFSTR("NRDLocalDevice"), CFSTR("EncryptedIdentifier"), CFSTR("KeyLoadFailure"), 0, 0, v22, v23, v24, v33);
    return 0;
  }
}

NRDDecryptedIdentifier *sub_100130BF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unsigned __int8 *v17;
  NRDDecryptedIdentifier *v18;
  NRDDecryptedIdentifier *v19;
  NSUUID *v20;
  NSUUID *identity;
  NSUUID *v22;
  void *v23;
  NSUUID *v24;
  NSUUID *v25;
  NSUUID *nrUUID;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  int IsLevelEnabled;
  __CFString *v33;
  id v34;
  int v35;
  id v36;
  int v37;
  const char *v38;
  id v39;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_opt_self(a1);
  if (!sub_100130668((uint64_t)NRDLocalDevice, 0))
  {
    v19 = 0;
    goto LABEL_15;
  }
  v10 = objc_alloc((Class)NEIKEv2EncryptedKeyIDIdentifier);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifierData"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifierData"));
  if (qword_1001E4A48)
    v13 = *(_QWORD *)(qword_1001E4A48 + 16);
  else
    v13 = 0;
  v14 = objc_msgSend(v10, "initWithKeyID:aad:keyRef:", v11, v12, v13);

  v39 = 0;
  v15 = objc_msgSend(v14, "decryptWithSession:returnError:", v9, &v39);
  v16 = v39;
  if (!v15)
  {
    v31 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v31, 16);

    if (!IsLevelEnabled)
    {
      v19 = 0;
      v33 = CFSTR("DecryptionFailure");
      goto LABEL_27;
    }
    v24 = (NSUUID *)sub_100128400();
    v38 = "";
    _NRLogWithArgs(v24, 16, "%s%.30s:%-4d Identifier decryption failed: %@");
    v33 = CFSTR("DecryptionFailure");
    goto LABEL_22;
  }
  if (objc_msgSend(v15, "length") != (id)96)
  {
    v34 = sub_100128400();
    v35 = _NRLogIsLevelEnabled(v34, 16);

    if (!v35)
    {
      v19 = 0;
      v33 = CFSTR("IncorrectLength");
      goto LABEL_27;
    }
    v24 = (NSUUID *)sub_100128400();
    _NRLogWithArgs(v24, 16, "%s%.30s:%-4d Decrypted identifier length %zu != %zu", "", "+[NRDLocalDevice decryptDeviceIdentifier:serviceIdentifier:ikeSession:]", 1204, (size_t)objc_msgSend(v15, "length"), 0x60uLL);
    v33 = CFSTR("IncorrectLength");
    goto LABEL_22;
  }
  v17 = (unsigned __int8 *)objc_msgSend(v15, "bytes");
  if (*v17 != 1)
  {
    v36 = sub_100128400();
    v37 = _NRLogIsLevelEnabled(v36, 16);

    if (!v37)
    {
      v19 = 0;
      v33 = CFSTR("IncorrectVersion");
      goto LABEL_27;
    }
    v24 = (NSUUID *)sub_100128400();
    _NRLogWithArgs(v24, 16, "%s%.30s:%-4d Unknown encrypted identifier version %u", "", "+[NRDLocalDevice decryptDeviceIdentifier:serviceIdentifier:ikeSession:]", 1211, *v17);
    v33 = CFSTR("IncorrectVersion");
    goto LABEL_22;
  }
  v18 = objc_alloc_init(NRDDecryptedIdentifier);
  v19 = v18;
  if (v18)
    v18->_version = *v17;
  v20 = (NSUUID *)objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v17 + 1);
  if (v19)
  {
    identity = v19->_identity;
    v19->_identity = v20;

    v22 = v19->_identity;
  }
  else
  {

    v22 = 0;
  }
  v23 = (void *)qword_1001E4A40;
  v24 = v22;
  v25 = (NSUUID *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v24));
  if (!v19)
  {

    v33 = CFSTR("NoDeviceFound");
LABEL_22:

    v19 = 0;
LABEL_27:
    sub_100109270(CFSTR("NRDLocalDevice"), CFSTR("EncryptedIdentifier"), v33, 0, 0, v27, v28, v29, (uint64_t)v38);
    goto LABEL_13;
  }
  nrUUID = v19->_nrUUID;
  v19->_nrUUID = v25;

  if (!v19->_nrUUID)
  {
    v33 = CFSTR("NoDeviceFound");
    goto LABEL_27;
  }
LABEL_13:

LABEL_15:
  return v19;
}

char *sub_100130F84(char *a1)
{
  char *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  char v10;
  char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  id v17;
  int IsLevelEnabled;
  id v19;
  int *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];
  _BYTE v28[128];

  v1 = a1;
  if (a1)
  {
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    v23 = 0u;
    v2 = (id)qword_1001E4A38;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v24;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v24 != v5)
            objc_enumerationMutation(v2);
          v7 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v6), (_QWORD)v23));
          if (v7)
          {
            v8 = v7[7];

            if (v8)
            {
              v10 = 0;
              goto LABEL_15;
            }
          }
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v9 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        v4 = v9;
      }
      while (v9);
    }
    v10 = 1;
LABEL_15:

    if (!sub_100130668((uint64_t)NRDLocalDevice, v10))
      return 0;
    if (*((_QWORD *)v1 + 7))
      goto LABEL_20;
    v11 = (char *)objc_alloc_init((Class)NSUUID);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v1, "setLocalIdentity:", v11);
      v13 = (const char *)&OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
      objc_msgSend((id)qword_1001E4A40, "setObject:forKeyedSubscript:", *((_QWORD *)v1 + 4), v12);
      v14 = objc_opt_self(NRDLocalDevice);
      if ((sub_10012EDB0(v14, 0) & 1) != 0)
      {

LABEL_20:
        v12 = (char *)objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", 48);
        v27[0] = 0;
        v27[1] = 0;
        objc_msgSend(*((id *)v1 + 7), "getUUIDBytes:", v27);
        objc_msgSend(v12, "appendBytes:length:", v27, 16);
        v15 = sub_10012B324((_QWORD *)qword_1001E4A48);
        if (v15)
        {
          objc_msgSend(v12, "appendData:", v15);
          v1 = v12;
        }
        else
        {
          v1 = 0;
        }

        goto LABEL_23;
      }
    }
    else
    {
      v17 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v17, 16);

      v13 = "-[NRDLocalDevice copyDeviceIdentityPayload]";
      if (IsLevelEnabled)
      {
        v19 = sub_100128400();
        _NRLogWithArgs(v19, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (randomUUID) != ((void *)0)", "", "-[NRDLocalDevice copyDeviceIdentityPayload]", 1367);

      }
      v1 = (char *)_os_log_pack_size(12);
      v12 = (char *)&v23 - ((unint64_t)(v1 + 15) & 0xFFFFFFFFFFFFFFF0);
      v20 = __error();
      v21 = _os_log_pack_fill(v12, v1, *v20, &_mh_execute_header, "%{public}s Assertion Failed: (randomUUID) != ((void *)0)");
      *(_DWORD *)v21 = 136446210;
      *(_QWORD *)(v21 + 4) = "-[NRDLocalDevice copyDeviceIdentityPayload]";
      v22 = sub_100128400();
      _NRLogAbortWithPack(v22, v12);
    }
    objc_msgSend(*((id *)v13 + 328), "setObject:forKeyedSubscript:", 0, v12, (_QWORD)v23);
    objc_msgSend(v1, "setLocalIdentity:", 0);
    v1 = 0;
LABEL_23:

  }
  return v1;
}

id sub_100131288(_QWORD *a1, uint64_t a2)
{
  void *v3;
  id v5;
  void *String;

  if (a1)
  {
    switch((_DWORD)a2)
    {
      case 1:
        v3 = (void *)a1[11];
        return v3;
      case 3:
        v3 = (void *)a1[10];
        return v3;
      case 4:
        v3 = (void *)a1[9];
        return v3;
    }
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 17))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v5 = (id)qword_1001E4A90;
      String = (void *)NRDataProtectionClassCreateString(a2);
      _NRLogWithArgs(v5, 17, "Cannot get keychain items for %@", String);

    }
  }
  return 0;
}

void sub_100131394(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;

  if (a1 && !*(_BYTE *)(a1 + 24))
  {
    v2 = *(void **)(a1 + 32);
    v3 = *(id *)(a1 + 72);
    sub_10012DAD4(v3, v2, 4);

    v4 = *(id *)(a1 + 32);
    v5 = *(id *)(a1 + 80);
    v6 = *(id *)(a1 + 152);
    objc_opt_self(NRDKeyManager);
    if (qword_1001E4AD8 != -1)
      dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
    v7 = (id)qword_1001E4AD0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001314D4;
    v11[3] = &unk_1001B87A0;
    v12 = v5;
    v13 = v4;
    v14 = v6;
    v8 = v6;
    v9 = v4;
    v10 = v5;
    sub_10014ACE0((uint64_t)v7, v11);

  }
}

void sub_1001314D4(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;

  sub_10012DAD4(*(_QWORD **)(a1 + 32), *(void **)(a1 + 40), 3);
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = *(id *)(a1 + 40);
    objc_opt_self(NRDKeyManager);
    if (qword_1001E4AD8 != -1)
      dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
    v3 = (id)qword_1001E4AD0;
    sub_10014C7B4((uint64_t)v3, CFSTR("OOBK"), v4, 3, 0);

    *(_BYTE *)(v2 + 8) = 1;
  }
}

_QWORD *sub_10013159C(_QWORD *a1)
{
  _QWORD *v1;

  if (a1)
  {
    v1 = (_QWORD *)a1[19];
    if (v1)
      v1 = (_QWORD *)v1[2];
    a1 = v1;
  }
  return a1;
}

uint64_t sub_1001315C8(uint64_t a1)
{
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 2))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 2, "%s%.30s:%-4d Checking for compatibility. flags:%llu local:%llu remote:%llu", "", "-[NRDLocalDevice compatible:]", 1474, 1, *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
  }
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    return *(_BYTE *)(a1 + 144) & 1;
  else
    return 0;
}

BOOL sub_1001316A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;
  void *v6;
  id v8;
  int IsLevelEnabled;
  id v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
  {
    v3 = sub_10012D4AC([NRDLDDataClassKeychainItems alloc], 4);
    v4 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v3;

    if (!*(_QWORD *)(a1 + 72))
    {
      v8 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

      if (IsLevelEnabled)
      {
        v10 = sub_100128400();
        _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (self.classDKeychainItems) != ((void *)0)", "", "-[NRDLocalDevice fillInClassDKeys]", 1485);

      }
      v11 = _os_log_pack_size(12);
      v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "%{public}s Assertion Failed: (self.classDKeychainItems) != ((void *)0)");
      *(_DWORD *)v14 = 136446210;
      *(_QWORD *)(v14 + 4) = "-[NRDLocalDevice fillInClassDKeys]";
      v15 = sub_100128400();
      _NRLogAbortWithPack(v15, v12);
    }
    v5 = *(id *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "description"));
    sub_100121E18(v5, 5005, v6, CFSTR("ClassD"));

  }
  return v1 == 0;
}

void sub_100131830(id *a1, int a2, void *a3)
{
  id v6;
  id v7;
  id v8;

  if (a1)
  {
    v6 = a1[4];
    v7 = a3;
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description"));
    sub_100121E18(v6, a2, v8, v7);

  }
}

void sub_1001318B0(uint64_t a1)
{
  NSObject *v2;
  _BOOL4 v3;
  _BYTE *v4;
  _BYTE *v5;
  id v6;
  int v7;
  _QWORD *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  int IsLevelEnabled;
  id v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Filling in currently unlocked keys for %@", "", "-[NRDLocalDevice fillInKeysForCurrentlyUnlocked]", 1495, a1);
  }
  v3 = sub_1001316A8(a1);
  v4 = *(id *)(a1 + 80);
  if (v4)
  {
    v5 = v4;
LABEL_21:

    goto LABEL_22;
  }
  if ((objc_msgSend((id)a1, "hasSavedClassCKeysInKeychain") & 1) != 0)
  {
    v5 = 0;
    goto LABEL_21;
  }
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v6 = (id)qword_1001E4AD0;
  v5 = v6;
  if (!v6)
    goto LABEL_21;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 2));
  if (!v5[10])
  {
    v5[10] = 1;
    if (v5[8] == 4)
    {
      sub_10014A63C((uint64_t)v5);
      if (v5[9])
      {
        v5[8] = 3;
        sub_10014A8AC((uint64_t)v5);
      }
    }
  }
  v7 = v5[8] & 0xFD;

  if (v7 == 1)
  {
    v8 = sub_10012D4AC([NRDLDDataClassKeychainItems alloc], 3);
    v9 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v8;

    if (!*(_QWORD *)(a1 + 80))
    {
      v23 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v23, 16);

      if (IsLevelEnabled)
      {
        v25 = sub_100128400();
        _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (self.classCKeychainItems) != ((void *)0)", "", "-[NRDLocalDevice fillInKeysForCurrentlyUnlocked]", 1502);

      }
      v26 = _os_log_pack_size(12);
      v27 = (char *)&v31 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v28 = __error();
      v29 = _os_log_pack_fill(v27, v26, *v28, &_mh_execute_header, "%{public}s Assertion Failed: (self.classCKeychainItems) != ((void *)0)");
      *(_DWORD *)v29 = 136446210;
      *(_QWORD *)(v29 + 4) = "-[NRDLocalDevice fillInKeysForCurrentlyUnlocked]";
      v30 = sub_100128400();
      _NRLogAbortWithPack(v30, v27);
    }
    v10 = *(id *)(a1 + 32);
    v5 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "description"));
    sub_100121E18(v10, 5005, v5, CFSTR("ClassC"));

    v3 = 1;
    goto LABEL_21;
  }
LABEL_22:
  v11 = *(id *)(a1 + 80);
  if (v11 && (v12 = *(_QWORD *)(a1 + 88), v11, !v12))
  {
    v14 = *(id *)(a1 + 80);
    v15 = objc_msgSend(v14, "copy");
    v16 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v15;

    v17 = *(_QWORD *)(a1 + 88);
    if (v17)
    {
      v18 = *(void **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;

      v19 = *(_QWORD *)(a1 + 88);
      if (v19)
      {
        v20 = *(void **)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;

      }
    }
    v21 = *(id *)(a1 + 32);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "description"));
    sub_100121E18(v21, 5005, v22, CFSTR("ClassA"));

    if (v3)
      goto LABEL_25;
  }
  else if (v3)
  {
LABEL_25:
    v13 = objc_opt_self(NRDLocalDevice);
    sub_10012EDB0(v13, 0);
  }
}

void sub_100131C98(char *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  int IsLevelEnabled;
  id v8;
  int *v9;
  uint64_t v10;
  id v11;
  _QWORD v13[5];
  id v14;

  v3 = a2;
  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (!v3)
  {
    v6 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v6, 16);

    if (IsLevelEnabled)
    {
      v8 = sub_100128400();
      _NRLogWithArgs(v8, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (completionBlock) != ((void *)0)", "", "-[NRDLocalDevice fillInClassCKeysWithCompletion:]", 1525);

    }
    v3 = (id)_os_log_pack_size(12);
    a1 = (char *)&v13[-1] - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(a1, v3, *v9, &_mh_execute_header, "%{public}s Assertion Failed: (completionBlock) != ((void *)0)");
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v10 + 4) = "-[NRDLocalDevice fillInClassCKeysWithCompletion:]";
    v11 = sub_100128400();
    _NRLogAbortWithPack(v11, a1);
    goto LABEL_10;
  }
  if (!*((_QWORD *)a1 + 10))
  {
    objc_opt_self(NRDKeyManager);
    if (qword_1001E4AD8 == -1)
    {
LABEL_5:
      v5 = (id)qword_1001E4AD0;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100131E8C;
      v13[3] = &unk_1001B85F8;
      v13[4] = a1;
      v14 = v3;
      sub_10014ACE0((uint64_t)v5, v13);

      goto LABEL_6;
    }
LABEL_10:
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
LABEL_6:

}

uint64_t sub_100131E8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v8;
  int IsLevelEnabled;
  id v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || !*(_QWORD *)(v2 + 80))
  {
    v3 = sub_10012D4AC([NRDLDDataClassKeychainItems alloc], 3);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      objc_storeStrong((id *)(v4 + 80), v3);

    v5 = *(_QWORD *)(a1 + 32);
    if (!v5 || !*(_QWORD *)(v5 + 80))
    {
      v8 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

      if (IsLevelEnabled)
      {
        v10 = sub_100128400();
        _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (self.classCKeychainItems) != ((void *)0)", "", "-[NRDLocalDevice fillInClassCKeysWithCompletion:]_block_invoke", 1534);

      }
      v11 = _os_log_pack_size(12);
      v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      v13 = __error();
      v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "%{public}s Assertion Failed: (self.classCKeychainItems) != ((void *)0)");
      *(_DWORD *)v14 = 136446210;
      *(_QWORD *)(v14 + 4) = "-[NRDLocalDevice fillInClassCKeysWithCompletion:]_block_invoke";
      v15 = sub_100128400();
      _NRLogAbortWithPack(v15, v12);
    }
    sub_100131830((id *)v5, 5005, CFSTR("ClassC"));
    v6 = objc_opt_self(NRDLocalDevice);
    sub_10012EDB0(v6, 0);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 1);
}

void sub_100132020(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t);
  NSObject *v4;
  id v5;
  int IsLevelEnabled;
  id v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  id v12;
  _QWORD v14[5];
  void (**v15)(id, uint64_t);

  v3 = a2;
  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (!v3)
  {
    v5 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v5, 16);

    if (IsLevelEnabled)
    {
      v7 = sub_100128400();
      _NRLogWithArgs(v7, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (completionBlock) != ((void *)0)", "", "-[NRDLocalDevice fillInClassAKeysWithCompletion:]", 1546);

    }
    v8 = _os_log_pack_size(12);
    v9 = (char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "%{public}s Assertion Failed: (completionBlock) != ((void *)0)");
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)(v11 + 4) = "-[NRDLocalDevice fillInClassAKeysWithCompletion:]";
    v12 = sub_100128400();
    _NRLogAbortWithPack(v12, v9);
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v3[2](v3, 1);
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1001321B8;
    v14[3] = &unk_1001B8620;
    v14[4] = a1;
    v15 = v3;
    sub_100131C98((char *)a1, v14);

  }
}

uint64_t sub_1001321B8(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void);
  id v17;
  int v18;
  id v19;
  id v20;
  int IsLevelEnabled;
  id v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
    {
      if (v3[11])
      {
LABEL_13:
        v15 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16);
        return v15();
      }
      v3 = (_QWORD *)v3[10];
    }
    v4 = v3;
    v5 = objc_msgSend(v4, "copy");
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      objc_storeStrong((id *)(v6 + 88), v5);

    v7 = *(_QWORD *)(a1 + 32);
    if (!v7 || (v8 = *(void **)(v7 + 88)) == 0)
    {
      v20 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v20, 16);

      if (IsLevelEnabled)
      {
        v22 = sub_100128400();
        _NRLogWithArgs(v22, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (self.classAKeychainItemsLegacyOnly) != ((void *)0)", "", "-[NRDLocalDevice fillInClassAKeysWithCompletion:]_block_invoke", 1562);

      }
      v23 = _os_log_pack_size(12);
      v24 = (char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      v25 = __error();
      v26 = _os_log_pack_fill(v24, v23, *v25, &_mh_execute_header, "%{public}s Assertion Failed: (self.classAKeychainItemsLegacyOnly) != ((void *)0)");
      *(_DWORD *)v26 = 136446210;
      *(_QWORD *)(v26 + 4) = "-[NRDLocalDevice fillInClassAKeysWithCompletion:]_block_invoke";
      v27 = sub_100128400();
      _NRLogAbortWithPack(v27, v24);
    }
    v9 = v8;
    v10 = (void *)v9[1];
    v9[1] = 0;

    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v12 = *(id *)(v11 + 88);
      if (v12)
      {
        v13 = v12;
        v14 = (void *)*((_QWORD *)v12 + 3);
        *((_QWORD *)v12 + 3) = 0;

      }
    }
    sub_100131830(*(id **)(a1 + 32), 5005, CFSTR("ClassA"));
    goto LABEL_13;
  }
  v17 = sub_100128400();
  v18 = _NRLogIsLevelEnabled(v17, 17);

  if (v18)
  {
    v19 = sub_100128400();
    _NRLogWithArgs(v19, 17, "Cannot fill in ClassA keys due to ClassC failure");

  }
  v15 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  return v15();
}

char *sub_1001323E0(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  id v5;
  char *v6;
  void *v7;

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_autoreleasePoolPush();
  if (!v3)
    goto LABEL_10;
  v5 = v3[5];
  if (!v5 && !*((_BYTE *)v3 + 24))
  {
    if (*((_BYTE *)v3 + 20))
      goto LABEL_5;
LABEL_10:
    v6 = 0;
    goto LABEL_8;
  }

LABEL_5:
  v6 = sub_10012A18C((char *)[NRDLocalDevice alloc], v3[4]);
  objc_msgSend(v6, "setBluetoothUUID:", v3[5]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dateCreated"));
  objc_msgSend(v6, "setDateCreated:", v7);

  objc_msgSend(v6, "setIsEmptyPairing:", 1);
  if (v6)
  {
    v6[21] = 1;
    v6[24] = *((_BYTE *)v3 + 24);
  }
  objc_msgSend(v6, "setHasCompletedBluetoothPairing:", *((unsigned __int8 *)v3 + 10));
  objc_msgSend(v6, "setSelfManagedBluetoothPairing:", *((unsigned __int8 *)v3 + 20));
LABEL_8:
  objc_autoreleasePoolPop(v4);

  return v6;
}

uint64_t sub_1001324D0(id *a1)
{
  id *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  int v7;
  _BOOL4 v8;
  id v9;
  const char *v10;
  const char *v11;
  id v12;
  id v13;
  const char *v14;
  id v15;
  void *StringFromNRDeviceEndpointType;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  const char *v22;
  const char *v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *LogString;
  const __CFString *v33;
  const __CFString *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  const __CFString *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  id *v77;
  id *v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  id v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  void *v99;
  void *v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  id v107;
  id *v108;
  id *v109;
  id v110;
  void *v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  void *v116;
  void *v117;
  id v118;
  id v119;
  void *v120;
  void *v121;
  _QWORD *v122;
  _QWORD *v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  id v135;
  void *v136;
  void *v137;
  id v138;
  id *v139;
  id *v140;
  id v141;
  void *v142;
  void *v143;
  id v144;
  void *v145;
  NSObject *v146;
  _QWORD *v147;
  NSObject *v148;
  _QWORD *v149;
  NSObject *v150;
  _QWORD *v151;
  NSObject *v152;
  _QWORD *v153;
  NSObject *v154;
  void *v155;
  NSObject *v156;
  void *v157;
  NSObject *v158;
  _QWORD *v159;
  NSObject *v160;
  _QWORD *v161;
  const char *v162;
  const char *v163;
  const char *v164;
  const char *v165;
  id v166;
  id v167;
  void *v168;

  v1 = a1;
  if (!a1)
    return (uint64_t)v1;
  if (objc_msgSend(a1, "isEmptyPairing"))
    return objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "description"));
  v2 = objc_alloc((Class)NSMutableString);
  v3 = v1[4];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
  v5 = objc_msgSend(v2, "initWithFormat:", CFSTR("NRDLD[%@]"), v4);

  if (*((_WORD *)v1 + 14))
    goto LABEL_8;
  v6 = v1[14];
  if (v6 || (v6 = v1[15]) != 0)
  {

LABEL_8:
    objc_msgSend(v5, "appendString:", CFSTR("\n\t\t"));
    v7 = *((unsigned __int16 *)v1 + 14);
    v8 = *((_WORD *)v1 + 14) == 0;
    if (*((_WORD *)v1 + 14))
      objc_msgSend(v5, "appendFormat:", CFSTR("inner link version %u"), *((unsigned __int16 *)v1 + 14));
    v9 = v1[14];

    v10 = ", ";
    if (v9)
    {
      if (v7)
        v11 = ", ";
      else
        v11 = "";
      v12 = v1[14];
      objc_msgSend(v5, "appendFormat:", CFSTR("%sname \"%@\""), v11, v12);

      v8 = 0;
    }
    v13 = v1[15];

    if (v13)
    {
      if (v8)
        v14 = "";
      else
        v14 = ", ";
      v15 = v1[15];
      objc_msgSend(v5, "appendFormat:", CFSTR("%sbuild \"%@\""), v14, v15);

      v8 = 0;
    }
    if (*((_BYTE *)v1 + 18))
    {
      if (v8)
        v10 = "";
      StringFromNRDeviceEndpointType = (void *)createStringFromNRDeviceEndpointType();
      objc_msgSend(v5, "appendFormat:", CFSTR("%stype \"%@\""), v10, StringFromNRDeviceEndpointType);

    }
    goto LABEL_24;
  }
  if (*((_BYTE *)v1 + 18))
    goto LABEL_8;
LABEL_24:
  v17 = v1[5];

  if (v17)
  {
    v18 = v1[5];
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "UUIDString"));
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tBluetoothUUID: %@"), v19);

  }
  v20 = v1[6];

  if (v20)
  {
    v21 = v1[6];
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tIDSDeviceID: %@"), v21);

  }
  if (*((_BYTE *)v1 + 8))
    v22 = "";
  else
    v22 = "un";
  if (*((_BYTE *)v1 + 9))
    v23 = "en";
  else
    v23 = "dis";
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\t%sregistered, %sabled"), v22, v23);
  if (*((_BYTE *)v1 + 24))
    objc_msgSend(v5, "appendFormat:", CFSTR(", ephemeral"));
  if (*((_BYTE *)v1 + 15))
    v24 = "IDS";
  else
    v24 = "OOBK";
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tinitially paired using %s"), v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dateCreated"));
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tcreated: %@"), v25);

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dateRegistered"));
  if (v26)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dateRegistered"));
    objc_msgSend(v5, "appendFormat:", CFSTR(", registered: %@"), v27);

  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dateEnabled"));

  if (v28)
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dateEnabled"));
    objc_msgSend(v5, "appendFormat:", CFSTR(", enabled: %@"), v29);

  }
  v30 = v1[19];
  if (v30)
    v30 = (_QWORD *)v30[2];
  v31 = v30;
  LogString = (void *)_NRKeyCreateLogString(v31);
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tOut of Band Key: %@"), LogString);

  if (*((_BYTE *)v1 + 16))
    v33 = CFSTR("YES");
  else
    v33 = CFSTR("NO");
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tIsAltAccount: %@"), v33);
  if (*((_BYTE *)v1 + 17))
    v34 = CFSTR("YES");
  else
    v34 = CFSTR("NO");
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tAlways On Wi-Fi: %@"), v34);
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tDevice Flags: l %#llx r %#llx"), v1[17], v1[18]);
  v35 = v1[13];

  if (v35)
  {
    v36 = v1[13];
    v37 = (void *)_NRCreateMACAddressString();
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tBluetooth MAC Address: %@"), v37);

  }
  v38 = v1[16];

  if (v38)
  {
    v39 = v1[16];
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tLocal Operational properties: %@"), v39);

  }
  v40 = v1[8];

  if (v40)
  {
    v41 = v1[8];
    v42 = v41;
    if (v41)
      v43 = (void *)*((_QWORD *)v41 + 2);
    else
      v43 = 0;
    v44 = v43;
    v45 = (void *)_NRKeyCreateLogString(v44);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tRemote Identity Public Key: %@"), v45);

    v46 = v1[8];
    v47 = v46;
    if (v46)
      v48 = (void *)*((_QWORD *)v46 + 1);
    else
      v48 = 0;
    v49 = v48;
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tRemote Device Identity: %@"), v49);

  }
  v50 = v1[7];

  if (v50)
  {
    v51 = v1[7];
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tLocal Device Identity: %@"), v51);

    if (*((_BYTE *)v1 + 11))
      v52 = CFSTR("YES");
    else
      v52 = CFSTR("NO");
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tHas Authenticated Using Identity: %@"), v52);
  }
  v53 = v1[9];
  v54 = v53;
  if (v53)
    v55 = (void *)*((_QWORD *)v53 + 1);
  else
    v55 = 0;
  v56 = v55;

  if (v56)
  {
    v57 = v1[9];
    v58 = v57;
    if (v57)
      v59 = (void *)*((_QWORD *)v57 + 1);
    else
      v59 = 0;
    v60 = v59;
    v61 = sub_10012B324(v60);
    v62 = (void *)_NRKeyCreateLogString(v61);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass D Remote Public Key: %@"), v62);

  }
  v63 = v1[9];
  v64 = v63;
  if (v63)
    v65 = (void *)*((_QWORD *)v63 + 2);
  else
    v65 = 0;
  v66 = v65;

  if (v66)
  {
    v67 = v1[9];
    v68 = v67;
    if (v67)
      v69 = (void *)*((_QWORD *)v67 + 2);
    else
      v69 = 0;
    v70 = v69;
    v71 = sub_10012B324(v70);
    v72 = (void *)_NRKeyCreateLogString(v71);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass D Local Public Key: %@"), v72);

  }
  v73 = v1[9];
  v74 = v73;
  if (v73)
    v75 = (void *)*((_QWORD *)v73 + 3);
  else
    v75 = 0;
  v76 = v75;

  if (v76)
  {
    v77 = (id *)v1[9];
    v78 = v77;
    if (v77)
    {
      v79 = v77[3];
      v80 = v79;
      if (v79)
        v81 = (void *)*((_QWORD *)v79 + 2);
      else
        v81 = 0;
    }
    else
    {
      v80 = 0;
      v81 = 0;
    }
    v82 = v81;
    v83 = (void *)_NRKeyCreateLogString(v82);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass D Shared Secret: %@"), v83);

  }
  v84 = v1[10];
  v85 = v84;
  if (v84)
    v86 = (void *)*((_QWORD *)v84 + 1);
  else
    v86 = 0;
  v87 = v86;

  if (v87)
  {
    v88 = v1[10];
    v89 = v88;
    if (v88)
      v90 = (void *)*((_QWORD *)v88 + 1);
    else
      v90 = 0;
    v91 = v90;
    v92 = sub_10012B324(v91);
    v93 = (void *)_NRKeyCreateLogString(v92);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass C Remote Public Key: %@"), v93);

  }
  v94 = v1[10];
  v95 = v94;
  if (v94)
    v96 = (void *)*((_QWORD *)v94 + 2);
  else
    v96 = 0;
  v97 = v96;

  if (v97)
  {
    v98 = v1[10];
    v99 = v98;
    if (v98)
      v100 = (void *)*((_QWORD *)v98 + 2);
    else
      v100 = 0;
    v101 = v100;
    v102 = sub_10012B324(v101);
    v103 = (void *)_NRKeyCreateLogString(v102);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass C Local Public Key: %@"), v103);

  }
  v104 = v1[10];
  v105 = v104;
  if (v104)
    v106 = (void *)*((_QWORD *)v104 + 3);
  else
    v106 = 0;
  v107 = v106;

  if (v107)
  {
    v108 = (id *)v1[10];
    v109 = v108;
    if (v108)
    {
      v110 = v108[3];
      v111 = v110;
      if (v110)
        v112 = (void *)*((_QWORD *)v110 + 2);
      else
        v112 = 0;
    }
    else
    {
      v111 = 0;
      v112 = 0;
    }
    v113 = v112;
    v114 = (void *)_NRKeyCreateLogString(v113);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass C Shared Secret: %@"), v114);

  }
  v115 = v1[11];
  v116 = v115;
  if (v115)
    v117 = (void *)*((_QWORD *)v115 + 1);
  else
    v117 = 0;
  v118 = v117;

  if (v118)
  {
    v119 = v1[11];
    v120 = v119;
    if (v119)
      v121 = (void *)*((_QWORD *)v119 + 1);
    else
      v121 = 0;
    v122 = v121;
    v123 = sub_10012B324(v122);
    v124 = (void *)_NRKeyCreateLogString(v123);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass A Remote Public Key: %@"), v124);

  }
  v125 = v1[11];
  v126 = v125;
  if (v125)
    v127 = (void *)*((_QWORD *)v125 + 2);
  else
    v127 = 0;
  v128 = v127;

  if (v128)
  {
    v129 = v1[11];
    v130 = v129;
    if (v129)
      v131 = (void *)*((_QWORD *)v129 + 2);
    else
      v131 = 0;
    v132 = v131;
    v133 = sub_10012B324(v132);
    v134 = (void *)_NRKeyCreateLogString(v133);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass A Local Public Key: %@"), v134);

  }
  v135 = v1[11];
  v136 = v135;
  if (v135)
    v137 = (void *)*((_QWORD *)v135 + 3);
  else
    v137 = 0;
  v138 = v137;

  if (v138)
  {
    v139 = (id *)v1[11];
    v140 = v139;
    if (v139)
    {
      v141 = v139[3];
      v142 = v141;
      if (v141)
        v143 = (void *)*((_QWORD *)v141 + 2);
      else
        v143 = 0;
    }
    else
    {
      v142 = 0;
      v143 = 0;
    }
    v144 = v143;
    v145 = (void *)_NRKeyCreateLogString(v144);
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass A Shared Secret: %@"), v145);

  }
  v146 = sub_10014CFBC();
  dispatch_assert_queue_V2(v146);

  v147 = sub_1001331E8(v1, CFSTR("0"));
  if (v147)
  {
    v148 = sub_10014CFBC();
    dispatch_assert_queue_V2(v148);

    v149 = sub_1001331E8(v1, CFSTR("0"));
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass D Local Inner Endpoint: %@"), v149);

  }
  v150 = sub_10014CFBC();
  dispatch_assert_queue_V2(v150);

  v151 = sub_100133714(v1, CFSTR("0"));
  if (v151)
  {
    v152 = sub_10014CFBC();
    dispatch_assert_queue_V2(v152);

    v153 = sub_100133714(v1, CFSTR("0"));
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass D Remote Inner Endpoint: %@"), v153);

  }
  v154 = sub_10014CFBC();
  dispatch_assert_queue_V2(v154);

  v155 = (void *)sub_100133920(v1, CFSTR("0"));
  if (v155)
  {
    v156 = sub_10014CFBC();
    dispatch_assert_queue_V2(v156);

    v157 = (void *)sub_100133920(v1, CFSTR("0"));
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass C Local Inner Endpoint: %@"), v157);

  }
  v158 = sub_10014CFBC();
  dispatch_assert_queue_V2(v158);

  v159 = sub_100133AD8(v1, CFSTR("0"));
  if (v159)
  {
    v160 = sub_10014CFBC();
    dispatch_assert_queue_V2(v160);

    v161 = sub_100133AD8(v1, CFSTR("0"));
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tClass C Remote Inner Endpoint: %@"), v161);

  }
  if (*((_BYTE *)v1 + 12))
    v162 = "D";
  else
    v162 = "";
  if (*((_BYTE *)v1 + 13))
    v163 = "C";
  else
    v163 = "";
  if (*((_BYTE *)v1 + 14))
    v164 = "A";
  else
    v164 = "";
  if (objc_msgSend(v1, "hasSavedClassCKeysInKeychain"))
    v165 = "C";
  else
    v165 = "";
  objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tKeys confirmed: %s%s%s, keys saved in keychain: %s"), v162, v163, v164, v165);
  v166 = v1[12];

  if (v166)
  {
    v167 = v1[12];
    v168 = (void *)_NRCreateDataStringTruncated();
    objc_msgSend(v5, "appendFormat:", CFSTR("\n\t\tReceived Proxy Notify Payload: %@"), v168);

  }
  v1 = (id *)v5;

  return (uint64_t)v1;
}

_QWORD *sub_1001331E8(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  id v3;
  NSObject *v4;
  void *v5;
  _BOOL4 v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *IPv6AddrStringFromData;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    v4 = sub_10014CFBC();
    dispatch_assert_queue_V2(v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localInnerIPv6AddressBytesClassD"));
    if (!v5)
    {
      if (v2[16])
        v6 = sub_10010DF88(v2) == 1;
      else
        v6 = 1;
      v7 = objc_opt_self(NRDLocalDevice);
      v8 = sub_10014CFBC();
      dispatch_assert_queue_V2(v8);

      v40 = xmmword_10015D090;
      BYTE9(v40) = 13;
      if (v6)
      {
        v33 = v3;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v9 = (id)qword_1001E4A38;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v37;
          while (2)
          {
            for (i = 0; i != v11; i = (char *)i + 1)
            {
              if (*(_QWORD *)v37 != v12)
                objc_enumerationMutation(v9);
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i)));
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localInnerIPv6AddressBytesClassD"));

              if (v18)
              {
                v34 = 0;
                v35 = 0;
                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localInnerIPv6AddressBytesClassD"));
                v20 = objc_msgSend(v19, "length");

                if (v20 != (id)16)
                  goto LABEL_33;
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localInnerIPv6AddressBytesClassD"));
                objc_msgSend(v21, "getBytes:length:", &v34, 16);

                objc_opt_self(NRDLocalDevice);
                if (WORD1(v35) && WORD2(v35))
                {
                  if (qword_1001E4A98 != -1)
                    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
                  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
                  {
                    if (qword_1001E4A98 != -1)
                      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
                    v23 = (id)qword_1001E4A90;
                    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localInnerIPv6AddressBytesClassD"));
                    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
                    _NRLogWithArgs(v23, 0, "%s%.30s:%-4d reusing valid address from %@ : %@", "", "+[NRDLocalDevice createNewLocalClassDAddrData:]", 3718, v17, IPv6AddrStringFromData);

                  }
LABEL_33:
                  v22 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localInnerIPv6AddressBytesClassD"));

                  v3 = v33;
                  goto LABEL_34;
                }
                if (qword_1001E4A98 != -1)
                  dispatch_once(&qword_1001E4A98, &stru_1001B8730);
                if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
                {
                  if (qword_1001E4A98 != -1)
                    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
                  v14 = (id)qword_1001E4A90;
                  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localInnerIPv6AddressBytesClassD"));
                  v16 = (void *)createIPv6AddrStringFromData();
                  _NRLogWithArgs(v14, 0, "%s%.30s:%-4d ignoring invalid address from %@ : %@", "", "+[NRDLocalDevice createNewLocalClassDAddrData:]", 3715, v17, v16);

                }
              }

            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
            if (v11)
              continue;
            break;
          }
        }

        sub_1001346CC(v7, &v40);
        v3 = v33;
      }
      else
      {
        HIBYTE(v40) = 1;
      }
      v22 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v40, 16);
LABEL_34:
      objc_msgSend(v2, "setLocalInnerIPv6AddressBytesClassD:", v22);

      v26 = objc_opt_self(NRDLocalDevice);
      sub_10012EDB0(v26, 0);
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        v27 = (id)qword_1001E4A90;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localInnerIPv6AddressBytesClassD"));
        v29 = (void *)createIPv6AddrStringFromData();
        _NRLogWithArgs(v27, 0, "%s%.30s:%-4d Generated new local classD inner address %@ for %@", "", "-[NRDLocalDevice copyLocalClassDInnerEndpointWithPort:]", 3854, v29, v2);

      }
    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localInnerIPv6AddressBytesClassD"));
    v31 = sub_100133E24((uint64_t)NRDLocalDevice, v30, v3);
    v2 = (_QWORD *)objc_claimAutoreleasedReturnValue(v31);

  }
  return v2;
}

_QWORD *sub_100133714(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  id v3;
  NSObject *v4;
  void *v5;
  _BOOL4 v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *IPv6AddrStringFromData;
  void *v14;
  id v15;
  __int128 v17;

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    v4 = sub_10014CFBC();
    dispatch_assert_queue_V2(v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteInnerIPv6AddressBytesClassD"));
    if (!v5)
    {
      if (v2[16])
        v6 = sub_10010DF88(v2) == 1;
      else
        v6 = 1;
      v7 = objc_opt_self(NRDLocalDevice);
      v8 = sub_10014CFBC();
      dispatch_assert_queue_V2(v8);

      v17 = xmmword_10015D140;
      if (v6)
        sub_1001346CC(v7, &v17);
      else
        HIBYTE(v17) = 2;
      v9 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v17, 16);
      objc_msgSend(v2, "setRemoteInnerIPv6AddressBytesClassD:", v9);

      v10 = objc_opt_self(NRDLocalDevice);
      sub_10012EDB0(v10, 0);
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        v11 = (id)qword_1001E4A90;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteInnerIPv6AddressBytesClassD"));
        IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
        _NRLogWithArgs(v11, 0, "%s%.30s:%-4d Generated new remote classD inner address %@ for %@", "", "-[NRDLocalDevice copyRemoteClassDInnerEndpointWithPort:]", 3881, IPv6AddrStringFromData, v2);

      }
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteInnerIPv6AddressBytesClassD"));
    v15 = sub_100133E24((uint64_t)NRDLocalDevice, v14, v3);
    v2 = (_QWORD *)objc_claimAutoreleasedReturnValue(v15);

  }
  return v2;
}

uint64_t sub_100133920(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *IPv6AddrStringFromData;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v15;

  v3 = a2;
  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localInnerIPv6AddressBytesClassC"));
  if (!v5)
  {
    v15 = 0uLL;
    sub_10013453C(a1, &v15);
    BYTE9(v15) = 12;
    v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v15, 16);
    objc_msgSend(a1, "setLocalInnerIPv6AddressBytesClassC:", v6);

    v7 = objc_opt_self(NRDLocalDevice);
    sub_10012EDB0(v7, 0);
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v8 = (id)qword_1001E4A90;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localInnerIPv6AddressBytesClassC"));
      IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
      _NRLogWithArgs(v8, 0, "%s%.30s:%-4d Generated new local classC inner address %@ for %@", "", "-[NRDLocalDevice copyLocalClassCInnerEndpointWithPort:]", 3869, IPv6AddrStringFromData, a1);

    }
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localInnerIPv6AddressBytesClassC"));
  v12 = sub_100133E24((uint64_t)NRDLocalDevice, v11, v3);
  v13 = objc_claimAutoreleasedReturnValue(v12);

  return v13;
}

_QWORD *sub_100133AD8(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *IPv6AddrStringFromData;
  void *v11;
  id v12;
  __int128 v14;

  v2 = a1;
  if (a1)
  {
    v3 = a2;
    v4 = sub_10014CFBC();
    dispatch_assert_queue_V2(v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteInnerIPv6AddressBytesClassC"));
    if (!v5)
    {
      v14 = 0uLL;
      sub_100133C94(v2, &v14);
      BYTE9(v14) = 12;
      v6 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v14, 16);
      objc_msgSend(v2, "setRemoteInnerIPv6AddressBytesClassC:", v6);

      v7 = objc_opt_self(NRDLocalDevice);
      sub_10012EDB0(v7, 0);
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        v8 = (id)qword_1001E4A90;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteInnerIPv6AddressBytesClassC"));
        IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
        _NRLogWithArgs(v8, 0, "%s%.30s:%-4d Generated new remote classC inner address %@ for %@", "", "-[NRDLocalDevice copyRemoteClassCInnerEndpointWithPort:]", 3896, IPv6AddrStringFromData, v2);

      }
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "remoteInnerIPv6AddressBytesClassC"));
    v12 = sub_100133E24((uint64_t)NRDLocalDevice, v11, v3);
    v2 = (_QWORD *)objc_claimAutoreleasedReturnValue(v12);

  }
  return v2;
}

double sub_100133C94(_QWORD *a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  double result;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    v9 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

    if (IsLevelEnabled)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (outBytes) != ((void *)0)", "", "-[NRDLocalDevice writeRemoteClassDInnerAddressBytes:]", 4038);

    }
    v12 = _os_log_pack_size(12);
    v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (outBytes) != ((void *)0)");
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v15 + 4) = "-[NRDLocalDevice writeRemoteClassDInnerAddressBytes:]";
    v16 = sub_100128400();
    _NRLogAbortWithPack(v16, v13);
  }
  v18 = 0;
  v19 = 0uLL;
  v20 = 0;
  v5 = sub_10014CFBC();
  dispatch_assert_queue_V2(v5);

  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  v7 = sub_100133714(a1, CFSTR("0"));
  sub_1001340AC((uint64_t)NRDLocalDevice, &v18, v7);

  result = *(double *)&v19;
  *a2 = v19;
  return result;
}

id sub_100133E24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned int v7;
  void *v8;
  id v10;
  int IsLevelEnabled;
  id v12;
  uint64_t v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  id v17;
  int v18;
  id v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  id v23;
  _BYTE v24[12];
  _WORD v25[14];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  if (!v5)
  {
    v10 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v10, 16);

    if (IsLevelEnabled)
    {
      v12 = sub_100128400();
      _NRLogWithArgs(v12, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (addrData) != ((void *)0)", "", "+[NRDLocalDevice createEndpointFromAddrData:portString:]", 3558);

    }
    v13 = _os_log_pack_size(12);
    v14 = &v24[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0)];
    v15 = __error();
    v16 = _os_log_pack_fill(v14, v13, *v15, &_mh_execute_header, "%{public}s Assertion Failed: (addrData) != ((void *)0)");
    *(_DWORD *)v16 = 136446210;
    *(_QWORD *)(v16 + 4) = "+[NRDLocalDevice createEndpointFromAddrData:portString:]";
LABEL_13:
    v23 = sub_100128400();
    _NRLogAbortWithPack(v23, v14);
  }
  if (objc_msgSend(v5, "length") != (id)16)
  {
    v17 = sub_100128400();
    v18 = _NRLogIsLevelEnabled(v17, 16);

    if (v18)
    {
      v19 = sub_100128400();
      _NRLogWithArgs(v19, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: addrData.length == sizeof(struct in6_addr)", "", "+[NRDLocalDevice createEndpointFromAddrData:portString:]", 3559);

    }
    v20 = _os_log_pack_size(12);
    v14 = &v24[-((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0)];
    v21 = __error();
    v22 = _os_log_pack_fill(v14, v20, *v21, &_mh_execute_header, "%{public}s Assertion Failed: addrData.length == sizeof(struct in6_addr)");
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "+[NRDLocalDevice createEndpointFromAddrData:portString:]";
    goto LABEL_13;
  }
  if (v6)
    v7 = bswap32(objc_msgSend(v6, "intValue")) >> 16;
  else
    LOWORD(v7) = 0;
  memset(&v25[2], 0, 24);
  v25[0] = 7708;
  v25[1] = v7;
  objc_msgSend(v5, "getBytes:length:", &v25[4], 16);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithAddress:](NWAddressEndpoint, "endpointWithAddress:", v25));

  return v8;
}

void sub_1001340AC(uint64_t a1, _OWORD *a2, void *a3)
{
  id v5;
  NSObject *v6;
  char *v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  int v19;
  id v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int v26;
  id v27;
  uint64_t v28;
  int *v29;
  id v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _OWORD v37[2];

  v5 = a3;
  objc_opt_self(a1);
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  if (!a2)
  {
    v8 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_100128400();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (outSockAddrBytes) != ((void *)0)", "", "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]", 3958);

    }
    v5 = (id)_os_log_pack_size(12);
    v7 = (char *)&v36 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = *__error();
    v12 = _os_log_pack_fill(v7, v5, v11, &_mh_execute_header, "%{public}s Assertion Failed: (outSockAddrBytes) != ((void *)0)");
    goto LABEL_15;
  }
  if (!v5)
  {
    v13 = sub_100128400();
    v14 = _NRLogIsLevelEnabled(v13, 16);

    if (v14)
    {
      v15 = sub_100128400();
      _NRLogWithArgs(v15, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (endpoint) != ((void *)0)", "", "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]", 3959);

    }
    v5 = (id)_os_log_pack_size(12);
    v7 = (char *)&v36 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = *__error();
    v12 = _os_log_pack_fill(v7, v5, v16, &_mh_execute_header, "%{public}s Assertion Failed: (endpoint) != ((void *)0)");
LABEL_15:
    *(_DWORD *)v12 = 136446210;
    *(_QWORD *)(v12 + 4) = "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]";
    v17 = sub_100128400();
    _NRLogAbortWithPack(v17, v7);
    goto LABEL_16;
  }
  memset(v37, 0, 28);
  v7 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "addressData"));
  if ((unint64_t)objc_msgSend(v7, "length") <= 0x1B)
  {
LABEL_16:
    v18 = sub_100128400();
    v19 = _NRLogIsLevelEnabled(v18, 16);

    if (v19)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: addressData.length >= sizeof(sin6); Bad addressData %@ %@",
        "",
        "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]",
        3962,
        v7,
        v5);

    }
    v21 = _os_log_pack_size(32);
    v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = *__error();
    v24 = _os_log_pack_fill(v22, v21, v23, &_mh_execute_header, "%{public}s Assertion Failed: addressData.length >= sizeof(sin6); Bad addressData %@ %@");
    goto LABEL_25;
  }
  objc_msgSend(v7, "getBytes:length:", v37, 28);
  if (BYTE1(v37[0]) != 30)
  {
    v25 = sub_100128400();
    v26 = _NRLogIsLevelEnabled(v25, 16);

    if (v26)
    {
      v27 = sub_100128400();
      _NRLogWithArgs(v27, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: sin6.sin6_family == 30; Bad address family localInnerAddressData %@ %@",
        "",
        "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]",
        3965,
        v7,
        v5);

    }
    v28 = _os_log_pack_size(32);
    v22 = (char *)&v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v29 = __error();
    v24 = _os_log_pack_fill(v22, v28, *v29, &_mh_execute_header, "%{public}s Assertion Failed: sin6.sin6_family == 30; Bad address family localInnerAddressData %@ %@");
    *(_DWORD *)v24 = 136446722;
    *(_QWORD *)(v24 + 4) = "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]";
LABEL_26:
    *(_WORD *)(v24 + 12) = 2112;
    *(_QWORD *)(v24 + 14) = v7;
    *(_WORD *)(v24 + 22) = 2112;
    *(_QWORD *)(v24 + 24) = v5;
    v35 = sub_100128400();
    _NRLogAbortWithPack(v35, v22);
  }
  if (LOBYTE(v37[0]) <= 0x1Bu)
  {
    v30 = sub_100128400();
    v31 = _NRLogIsLevelEnabled(v30, 16);

    if (v31)
    {
      v32 = sub_100128400();
      _NRLogWithArgs(v32, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: sin6.sin6_len >= sizeof(sin6); Bad sa_len localInnerAddressData %@ %@",
        "",
        "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]",
        3966,
        v7,
        v5);

    }
    v33 = _os_log_pack_size(32);
    v22 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    v34 = *__error();
    v24 = _os_log_pack_fill(v22, v33, v34, &_mh_execute_header, "%{public}s Assertion Failed: sin6.sin6_len >= sizeof(sin6); Bad sa_len localInnerAddressData %@ %@");
LABEL_25:
    *(_DWORD *)v24 = 136446722;
    *(_QWORD *)(v24 + 4) = "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]";
    goto LABEL_26;
  }
  if (LOBYTE(v37[0]) != 28)
    LOBYTE(v37[0]) = 28;
  *a2 = v37[0];
  *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)((char *)v37 + 12);

}

double sub_10013453C(_QWORD *a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  double result;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    v9 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

    if (IsLevelEnabled)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (outBytes) != ((void *)0)", "", "-[NRDLocalDevice writeLocalClassDInnerAddressBytes:]", 4006);

    }
    v12 = _os_log_pack_size(12);
    v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (outBytes) != ((void *)0)");
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v15 + 4) = "-[NRDLocalDevice writeLocalClassDInnerAddressBytes:]";
    v16 = sub_100128400();
    _NRLogAbortWithPack(v16, v13);
  }
  v18 = 0;
  v19 = 0uLL;
  v20 = 0;
  v5 = sub_10014CFBC();
  dispatch_assert_queue_V2(v5);

  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  v7 = sub_1001331E8(a1, CFSTR("0"));
  sub_1001340AC((uint64_t)NRDLocalDevice, &v18, v7);

  result = *(double *)&v19;
  *a2 = v19;
  return result;
}

void sub_1001346CC(uint64_t a1, _WORD *a2)
{
  NSObject *v3;
  _WORD *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  _WORD *v16;
  _WORD *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  objc_opt_self(a1);
  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = a2 + 5;
  v16 = a2 + 5;
  v17 = a2;
  do
  {
    do
LABEL_6:
      arc4random_buf(v4, 6uLL);
    while (!*v4);
  }
  while (!a2[6] || !a2[7]);
  v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2, 16);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = (id)qword_1001E4A38;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(obj);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v9)));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localInnerIPv6AddressBytesClassD"));
        if ((objc_msgSend(v11, "isEqual:", v5) & 1) != 0)
          goto LABEL_4;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "remoteInnerIPv6AddressBytesClassD"));
        if ((objc_msgSend(v12, "isEqual:", v5) & 1) != 0)
          goto LABEL_3;
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localInnerIPv6AddressBytesClassC"));
        if (objc_msgSend(v13, "isEqual:", v5))
        {

LABEL_3:
LABEL_4:

LABEL_5:
          v4 = v16;
          a2 = v17;
          goto LABEL_6;
        }
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "remoteInnerIPv6AddressBytesClassC"));
        v15 = objc_msgSend(v14, "isEqual:", v5);

        if ((v15 & 1) != 0)
          goto LABEL_5;

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v7);
  }

}

_QWORD *sub_1001348E8(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;

  if (result)
  {
    v1 = result;
    v2 = sub_10014CFBC();
    dispatch_assert_queue_V2(v2);

    return sub_100133714(v1, CFSTR("0"));
  }
  return result;
}

_QWORD *sub_100134928(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;

  if (result)
  {
    v1 = result;
    v2 = sub_10014CFBC();
    dispatch_assert_queue_V2(v2);

    return sub_100133AD8(v1, CFSTR("0"));
  }
  return result;
}

char *sub_100134968(uint64_t a1)
{
  NSObject *v1;
  id v2;
  void *v3;
  NRDLocalDevice *v4;
  char *v5;
  id v6;
  void *v7;
  id v9;
  int IsLevelEnabled;
  id v11;
  char *v12;
  int *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  objc_opt_self(a1);
  v1 = sub_10014CFBC();
  dispatch_assert_queue_V2(v1);

  v2 = objc_alloc_init((Class)NSUUID);
  if (!v2)
  {
    v9 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

    if (IsLevelEnabled)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (randomUUID) != ((void *)0)", "", "+[NRDLocalDevice newLocalDeviceWithRandomNRUUID]", 2099);

    }
    v3 = (void *)_os_log_pack_size(12);
    v12 = (char *)&v16 - (((unint64_t)v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    v13 = __error();
    v14 = _os_log_pack_fill(v12, v3, *v13, &_mh_execute_header, "%{public}s Assertion Failed: (randomUUID) != ((void *)0)");
    *(_DWORD *)v14 = 136446210;
    *(_QWORD *)(v14 + 4) = "+[NRDLocalDevice newLocalDeviceWithRandomNRUUID]";
    v15 = sub_100128400();
    _NRLogAbortWithPack(v15, v12);
    goto LABEL_9;
  }
  v3 = v2;
  v4 = [NRDLocalDevice alloc];
  if (!v4)
  {
LABEL_9:
    v5 = 0;
    goto LABEL_5;
  }
  v5 = sub_10012A18C((char *)v4, v3);
  sub_10012A944(v5);
  if (v5)
  {
    v5[21] = 1;
    v6 = *((id *)v5 + 4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
    sub_100121E18(v6, 5000, v7, 0);

  }
LABEL_5:

  return v5;
}

char *sub_100134B14(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  BOOL v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v29;
  int IsLevelEnabled;
  id v31;
  id v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];

  v5 = a2;
  v6 = objc_opt_self(a1);
  if (!v5)
  {
    v29 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v29, 17);

    if (IsLevelEnabled)
    {
      v31 = sub_100128400();
      _NRLogWithArgs(v31, 17, "%s called with null bluetoothUUID");
LABEL_42:

      v27 = 0;
      goto LABEL_37;
    }
LABEL_43:
    v27 = 0;
    goto LABEL_37;
  }
  v7 = v6;
  if ((_NRIsUUIDNonZero(v5) & 1) == 0)
  {
    v32 = sub_100128400();
    v33 = _NRLogIsLevelEnabled(v32, 17);

    if (v33)
    {
      v31 = sub_100128400();
      _NRLogWithArgs(v31, 17, "called with all-zero bluetoothUUID");
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  v8 = sub_10014CFBC();
  dispatch_assert_queue_V2(v8);

  sub_10012DFA0(v7);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v9 = (id)qword_1001E4A38;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v35;
LABEL_5:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v35 != v12)
        objc_enumerationMutation(v9);
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v13)));
      v15 = (char *)v14;
      v16 = v14 ? *(_QWORD *)(v14 + 40) : 0;
      if ((objc_msgSend(v5, "isEqual:", v16) & 1) != 0)
        break;

      if (v11 == (id)++v13)
      {
        v17 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        v11 = v17;
        if (v17)
          goto LABEL_5;
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    v15 = 0;
  }

  if (v15)
    v18 = 1;
  else
    v18 = a3 == 0;
  if (v18)
    goto LABEL_30;
  v15 = sub_100134968(v7);
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (qword_1001E4A98 == -1)
    {
      v19 = (void *)qword_1001E4A90;
      if (v15)
      {
LABEL_25:
        v20 = (void *)*((_QWORD *)v15 + 4);
LABEL_26:
        v21 = v20;
        v22 = v19;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "UUIDString"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
        _NRLogWithArgs(v22, 0, "%s%.30s:%-4d Creating new local device with random %@ for Bluetooth query %@", "", "+[NRDLocalDevice copyLocalDeviceForBluetoothUUID:shouldCreate:]", 2173, v23, v24);

        goto LABEL_27;
      }
    }
    else
    {
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v19 = (void *)qword_1001E4A90;
      if (v15)
        goto LABEL_25;
    }
    v20 = 0;
    goto LABEL_26;
  }
LABEL_27:
  objc_msgSend(v15, "setBluetoothUUID:", v5);
  if (v15)
    v25 = *((_QWORD *)v15 + 4);
  else
    v25 = 0;
  objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", v15, v25);
  v26 = objc_opt_self(v7);
  sub_10012EDB0(v26, 0);
LABEL_30:
  v27 = v15;
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Returning %@ for Bluetooth query %@", "", "+[NRDLocalDevice copyLocalDeviceForBluetoothUUID:shouldCreate:]", 2180, v27, v5);
  }

LABEL_37:
  return v27;
}

char *sub_100134EE8(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v27;
  int IsLevelEnabled;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  v5 = a2;
  v6 = objc_opt_self(a1);
  if (v5)
  {
    v7 = v6;
    v8 = sub_10014CFBC();
    dispatch_assert_queue_V2(v8);

    sub_10012DFA0(v7);
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v9 = (id)qword_1001E4A38;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v31;
LABEL_4:
      v13 = 0;
      while (1)
      {
        if (*(_QWORD *)v31 != v12)
          objc_enumerationMutation(v9);
        v14 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v13)));
        v15 = (char *)v14;
        v16 = v14 ? *(_QWORD *)(v14 + 48) : 0;
        if ((objc_msgSend(v5, "isEqual:", v16) & 1) != 0)
          break;

        if (v11 == (id)++v13)
        {
          v17 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
          v11 = v17;
          if (v17)
            goto LABEL_4;
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      v15 = 0;
    }

    if (v15 || !a3)
      goto LABEL_27;
    v15 = sub_100134968(v7);
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    if (!_NRLogIsLevelEnabled(qword_1001E4A90, 0))
    {
LABEL_24:
      objc_msgSend(v15, "setIdsDeviceID:", v5);
      if (v15)
        v23 = *((_QWORD *)v15 + 4);
      else
        v23 = 0;
      objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", v15, v23);
      v24 = objc_opt_self(v7);
      sub_10012EDB0(v24, 0);
LABEL_27:
      v25 = v15;
      if (qword_1001E4A98 != -1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Returning %@ for IDSDeviceID query %@", "", "+[NRDLocalDevice copyLocalDeviceForIDSDeviceID:shouldCreate:]", 2211, v25, v5);
      }

      goto LABEL_34;
    }
    if (qword_1001E4A98 == -1)
    {
      v18 = (void *)qword_1001E4A90;
      if (v15)
      {
LABEL_22:
        v19 = (void *)*((_QWORD *)v15 + 4);
LABEL_23:
        v20 = v19;
        v21 = v18;
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "UUIDString"));
        _NRLogWithArgs(v21, 0, "%s%.30s:%-4d Creating new local device with random %@ for IDSDeviceID query %@", "", "+[NRDLocalDevice copyLocalDeviceForIDSDeviceID:shouldCreate:]", 2205, v22, v5);

        goto LABEL_24;
      }
    }
    else
    {
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v18 = (void *)qword_1001E4A90;
      if (v15)
        goto LABEL_22;
    }
    v19 = 0;
    goto LABEL_23;
  }
  v27 = sub_100128400();
  IsLevelEnabled = _NRLogIsLevelEnabled(v27, 17);

  if (IsLevelEnabled)
  {
    v29 = sub_100128400();
    _NRLogWithArgs(v29, 17, "%s called with null idsDeviceID", "+[NRDLocalDevice copyLocalDeviceForIDSDeviceID:shouldCreate:]");

  }
  v25 = 0;
LABEL_34:

  return v25;
}

void sub_100135268(_QWORD *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;

  v11 = a3;
  v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v11, &a9);

  v13 = (void *)a1[4];
  v14 = v12;
  v15 = v13;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description"));
  sub_100121E18(v15, a2, v16, v14);

}

void sub_100135314(uint64_t a1, void *a2, uint64_t a3, int a4, unsigned int a5, void *a6, void *a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  NRAnalyticsLocalDevice *v16;
  id v17;
  id v18;
  void (**v19)(id, uint64_t, const __CFString *);
  uint64_t v20;
  NSObject *v21;
  void *v22;
  __objc2_prot *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  char *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *i;
  void *v38;
  void *v39;
  _UNKNOWN **v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  void *j;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NRAnalyticsLocalDevice *v58;
  NRAnalyticsLocalDevice *v59;
  uint64_t v60;
  id v61;
  NRAnalyticsLocalDevice *v62;
  NRAnalyticsLocalDevice *v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  NRAnalyticsLocalDevice *v71;
  void (**v72)(id, uint64_t, const __CFString *);
  char v73;
  id v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  NSObject *v78;
  id v79;
  id v80;
  void *v81;
  NRAnalyticsLocalDevice *v82;
  NRAnalyticsLocalDevice *v83;
  void *v84;
  id v85;
  int IsLevelEnabled;
  id v87;
  id v88;
  int v89;
  id v90;
  id v91;
  int v92;
  id v93;
  int v94;
  id v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  id v99;
  void *LogString;
  uint64_t v101;
  NRAnalyticsLocalDevice *v102;
  id v103;
  uint64_t v104;
  id *v105;
  uint64_t v106;
  int v107;
  id v108;
  unsigned int v109;
  id v110;
  id v111;
  id v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[128];
  _BYTE v122[128];

  v107 = a4;
  LODWORD(v108) = a8;
  v109 = a5;
  v106 = a3;
  v16 = a2;
  v111 = a6;
  v110 = a9;
  v112 = a10;
  v17 = a11;
  v18 = a12;
  v19 = a13;
  v20 = objc_opt_self(a1);
  v21 = sub_10014CFBC();
  dispatch_assert_queue_V2(v21);

  if (!v16)
  {
    v85 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v85, 17);

    a7 = v110;
    v22 = v111;
    if (!IsLevelEnabled)
      goto LABEL_118;
    v87 = sub_100128400();
    _NRLogWithArgs(v87, 17, "%s called with null nrUUID");
    goto LABEL_140;
  }
  if ((_NRIsUUIDNonZero(v16) & 1) != 0)
  {
    v22 = v111;
    if (v19)
    {
      if (!v111 && (v109 & 1) == 0)
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        a7 = v110;
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 17))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          _NRLogWithArgs(qword_1001E4A90, 17, "outOfBandKey was nil and !wasInitiallySetupUsingIDSPairing for NRUUID %@", v16);
        }
        v19[2](v19, 22, CFSTR("outOfBandKey was nil and !wasInitiallySetupUsingIDSPairing"));
        goto LABEL_118;
      }
      if ((_DWORD)a7)
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        a7 = v110;
        v23 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
        if (!_NRLogIsLevelEnabled(qword_1001E4A90, 17))
          goto LABEL_19;
        if (qword_1001E4A98 == -1)
        {
LABEL_18:
          _NRLogWithArgs(v23[37].opt_inst_meths, 17, "pairWithSPPLink is not supported");
LABEL_19:
          v19[2](v19, 22, CFSTR("pairWithSPPLink is not supported"));
          goto LABEL_118;
        }
LABEL_144:
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        goto LABEL_18;
      }
      v104 = v20;
      v24 = sub_10012FFF4(v20, v16);
      if (!v24)
      {
        v93 = sub_100128400();
        v94 = _NRLogIsLevelEnabled(v93, 16);

        if (v94)
        {
          v95 = sub_100128400();
          _NRLogWithArgs(v95, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2354);

        }
        v96 = _os_log_pack_size(12);
        v23 = (__objc2_prot *)((char *)&v101 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
        v97 = __error();
        v98 = _os_log_pack_fill(v23, v96, *v97, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
        *(_DWORD *)v98 = 136446210;
        *(_QWORD *)(v98 + 4) = "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:"
                               "wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoo"
                               "thMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]";
        v99 = sub_100128400();
        _NRLogAbortWithPack(v99, v23);
        goto LABEL_144;
      }
      v25 = v24;
      objc_msgSend(v24, "setIsEmptyPairing:", 0);
      objc_msgSend(v25, "setOperationalProp:", v112);
      if (v25[8])
      {
        a7 = v110;
        if (v25[9])
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
          {
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Skipping registration of already registered enabled device %@", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2359, v25);
          }
          v19[2](v19, 0, 0);
        }
        else
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
          {
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Enabling device due to registration of already registered disabled device %@", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2362, v25);
          }
          sub_1001361B0(v104, v16, v19);
        }
LABEL_117:

        goto LABEL_118;
      }
      a7 = v110;
      if (v111)
      {
        v26 = *((_QWORD *)v25 + 19);
        if (v26)
        {
          v27 = v111;
          v28 = *(void **)(v26 + 16);
          *(_QWORD *)(v26 + 16) = v27;
        }
        else
        {
          v29 = sub_10012A76C((char *)[NRDLDKeychainItemData alloc], v111);
          v28 = (void *)*((_QWORD *)v25 + 19);
          *((_QWORD *)v25 + 19) = v29;
        }

      }
      objc_msgSend(v25, "setIsAltAccountDevice:", v108);
      if (a7)
        objc_msgSend(v25, "setBluetoothMACAddress:", a7);
      v103 = v17;
      v108 = v18;
      v105 = (id *)v25;
      if (v17)
      {
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        v102 = v16;
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d peer ip addr: %@", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2382, v17);
        }
        v30 = objc_alloc_init((Class)NSMutableDictionary);
        v31 = v17;
        v32 = v30;
        v117 = 0u;
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v33 = v31;
        v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v117, v122, 16);
        if (v34)
        {
          v35 = v34;
          v36 = *(_QWORD *)v118;
          do
          {
            for (i = 0; i != v35; i = (char *)i + 1)
            {
              if (*(_QWORD *)v118 != v36)
                objc_enumerationMutation(v33);
              v38 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)i);
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", v38));
              v40 = v38;
              if (objc_msgSend(v40, "unsignedShortValue") == 2)
              {

                v40 = &off_1001C4960;
              }
              objc_msgSend(v32, "setObject:forKeyedSubscript:", v39, v40);

            }
            v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v117, v122, 16);
          }
          while (v35);
        }

        v41 = (void *)qword_1001E4A58;
        if (!qword_1001E4A58)
        {
          v42 = objc_alloc_init((Class)NSMutableDictionary);
          v43 = (void *)qword_1001E4A58;
          qword_1001E4A58 = (uint64_t)v42;

          v41 = (void *)qword_1001E4A58;
        }
        v16 = v102;
        objc_msgSend(v41, "setObject:forKeyedSubscript:", v32, v102);

        a7 = v110;
        v22 = v111;
        v18 = v108;
        v25 = (char *)v105;
      }
      if (v18)
      {
        v44 = (void *)qword_1001E4A60;
        if (!qword_1001E4A60)
        {
          v45 = objc_alloc_init((Class)NSMutableDictionary);
          v46 = (void *)qword_1001E4A60;
          qword_1001E4A60 = (uint64_t)v45;

          v44 = (void *)qword_1001E4A60;
        }
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "allValues"));
        v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v113, v121, 16);
        if (v48)
        {
          v49 = v48;
          v50 = *(_QWORD *)v114;
          while (2)
          {
            for (j = 0; j != v49; j = (char *)j + 1)
            {
              if (*(_QWORD *)v114 != v50)
                objc_enumerationMutation(v47);
              if (objc_msgSend(*(id *)(*((_QWORD *)&v113 + 1) + 8 * (_QWORD)j), "isEqualToString:", v108))
              {
                if (qword_1001E4A98 != -1)
                  dispatch_once(&qword_1001E4A98, &stru_1001B8730);
                v18 = v108;
                v25 = (char *)v105;
                if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
                {
                  v61 = sub_100128400();
                  _NRLogWithArgs(v61, 16, "%s%.30s:%-4d service %@ already exists", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2404, v108);

                }
                v19[2](v19, 22, CFSTR("service already exists"));

                v17 = v103;
                goto LABEL_117;
              }
            }
            v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v113, v121, 16);
            if (v49)
              continue;
            break;
          }
        }

        objc_msgSend((id)qword_1001E4A60, "setObject:forKeyedSubscript:", v108, v16);
        v25 = (char *)v105;
      }
      LogString = (void *)_NRKeyCreateLogString(v22);
      v52 = v106;
      sub_100135268(v25, 5001, CFSTR("ppv=%lld, %sOOBK %@"), v53, v54, v55, v56, v57, v106);

      v58 = v16;
      objc_opt_self(NRDLocalDevice);
      if (qword_1001E4A50)
      {
        v59 = (NRAnalyticsLocalDevice *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A50, "objectForKeyedSubscript:", v58));

        if (v59)
        {
          v60 = mach_absolute_time();
LABEL_85:
          v59->_deviceRegistrationStart = v60;
          v59->_devicePairedWithOOBKey = v105[19] != 0;
LABEL_86:
          v62 = v59;
          v63 = v58;
          objc_opt_self(NRDLocalDevice);
          if (v62)
          {
            v64 = (void *)qword_1001E4A50;
            if (!qword_1001E4A50)
            {
              v65 = objc_alloc_init((Class)NSMutableDictionary);
              v66 = (void *)qword_1001E4A50;
              qword_1001E4A50 = (uint64_t)v65;

              v64 = (void *)qword_1001E4A50;
            }
            objc_msgSend(v64, "setObject:forKeyedSubscript:", v62, v63);
          }

          sub_1001318B0((uint64_t)v105);
          objc_msgSend(v105, "setWasInitiallySetupUsingIDSPairing:", v109);
          if (v52)
            objc_msgSend(v105, "setPairingProtocolVersion:", v52);
          if (v107)
            objc_msgSend(v105, "setLastSeenInnerLinkVersionHBO:");
          objc_msgSend(v105, "setIsEnabled:", 1);
          sub_10012ED2C((uint64_t)NRDLocalDevice, v105);
          v67 = v105[19];
          v102 = v62;
          if (v67 || v105[6])
          {
            v68 = (void *)qword_1001E4A80;
            if (!qword_1001E4A80)
            {
              v69 = objc_alloc_init((Class)NSMutableDictionary);
              v70 = (void *)qword_1001E4A80;
              qword_1001E4A80 = (uint64_t)v69;

              v68 = (void *)qword_1001E4A80;
            }
            v71 = (NRAnalyticsLocalDevice *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectForKeyedSubscript:", v63));
            a7 = v110;
            v22 = v111;
            if (!v71)
              v71 = (NRAnalyticsLocalDevice *)objc_alloc_init((Class)NSMutableArray);
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
            {
              if (qword_1001E4A98 != -1)
                dispatch_once(&qword_1001E4A98, &stru_1001B8730);
              _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Started registration for %@", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2447, v105);
            }
            v72 = objc_retainBlock(v19);
            -[NRAnalyticsLocalDevice addObject:](v71, "addObject:", v72);

            objc_msgSend((id)qword_1001E4A80, "setObject:forKeyedSubscript:", v71, v63);
            v73 = 1;
          }
          else
          {
            objc_msgSend(v105, "setIsRegistered:", 1);
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
            {
              if (qword_1001E4A98 != -1)
                dispatch_once(&qword_1001E4A98, &stru_1001B8730);
              _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Registered %@", "", "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wasInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMACAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]", 2452, v105);
            }
            v80 = v105[4];
            v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "description"));
            sub_100121E18(v80, 5007, v81, 0);

            v82 = v63;
            objc_opt_self(NRDLocalDevice);
            if (qword_1001E4A50)
            {
              v71 = (NRAnalyticsLocalDevice *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A50, "objectForKeyedSubscript:", v82));

              if (!v71)
              {
                v73 = 0;
                a7 = v110;
                v22 = v111;
                v17 = v103;
                goto LABEL_108;
              }
              v71->_deviceRegistrationEnd = mach_absolute_time();
              v71->_deviceRegistrationSuccess = 1;
              -[NRAnalyticsLocalDevice submit](v71, "submit");
              v83 = v82;
              objc_opt_self(NRDLocalDevice);
              if (qword_1001E4A50)
              {
                objc_msgSend((id)qword_1001E4A50, "setObject:forKeyedSubscript:", 0, v83);
                if (!objc_msgSend((id)qword_1001E4A50, "count"))
                {
                  v84 = (void *)qword_1001E4A50;
                  qword_1001E4A50 = 0;

                }
              }

              v73 = 0;
            }
            else
            {
              v73 = 0;
              v71 = v82;
            }
            a7 = v110;
            v22 = v111;
          }
          v17 = v103;

LABEL_108:
          v74 = v105[5];
          if (v74)
          {

          }
          else
          {
            v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105[16], "allowedLinkTypes"));
            v76 = objc_msgSend(v75, "containsObject:", &off_1001C4978);

            if (v76)
              objc_msgSend(v105, "setSelfManagedBluetoothPairing:", 1);
          }
          v77 = objc_opt_self(v104);
          sub_10012EDB0(v77, 0);
          if ((v73 & 1) == 0)
            v19[2](v19, 0, 0);
          v78 = sub_10014CFBC();
          dispatch_async(v78, &stru_1001B69F0);

          objc_opt_self(NRLinkDirector);
          v25 = (char *)v105;
          if (qword_1001E4710 != -1)
            dispatch_once(&qword_1001E4710, &stru_1001B6E60);
          v18 = v108;
          v79 = (id)qword_1001E4708;
          sub_1000A5428((uint64_t)v79);

          goto LABEL_117;
        }
      }
      else
      {

      }
      v59 = objc_alloc_init(NRAnalyticsLocalDevice);
      v60 = mach_absolute_time();
      if (!v59)
        goto LABEL_86;
      goto LABEL_85;
    }
    v91 = sub_100128400();
    v92 = _NRLogIsLevelEnabled(v91, 17);

    a7 = v110;
    if (!v92)
      goto LABEL_118;
    v87 = sub_100128400();
    _NRLogWithArgs(v87, 17, "%s called with null completionBlock");
LABEL_140:

    goto LABEL_118;
  }
  v88 = sub_100128400();
  v89 = _NRLogIsLevelEnabled(v88, 17);

  a7 = v110;
  v22 = v111;
  if (v89)
  {
    v90 = sub_100128400();
    _NRLogWithArgs(v90, 17, "called with all-zero nrUUID");

  }
LABEL_118:

}

void sub_1001361B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  id v9;
  int v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  int v19;
  id v20;
  int IsLevelEnabled;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if ((_NRIsUUIDNonZero(v22) & 1) != 0)
  {
    if (!v5)
    {
      v20 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v20, 17);

      if (!IsLevelEnabled)
        goto LABEL_19;
      v9 = sub_100128400();
      _NRLogWithArgs(v9, 17, "%s called with null completionBlock");
      goto LABEL_18;
    }
    v8 = sub_1001300EC(v6, v22, 0);
    v9 = v8;
    if (v8)
    {
      v10 = v8[8];
      v11 = *((id *)v8 + 4);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
      if (v10)
      {
        sub_100121E18(v11, 5003, v12, 0);

        objc_msgSend(v9, "setIsEnabled:", 1);
        v13 = objc_opt_self(v6);
        sub_10012EDB0(v13, 0);
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Enabled device %@", "", "+[NRDLocalDevice enableDeviceWithNRUUID:completionBlock:]", 2693, v9);
        }
        (*((void (**)(id, _QWORD, _QWORD))v5 + 2))(v5, 0, 0);
        goto LABEL_15;
      }
      sub_100121E18(v11, 5010, v12, CFSTR("enable"));

      v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ is not registered"), v9);
      (*((void (**)(id, uint64_t, id))v5 + 2))(v5, -2014, v15);
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "UUIDString"));
      sub_100121E18(v22, 5009, v14, CFSTR("enable"));

      v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown NRUUID %@"), v22);
      (*((void (**)(id, uint64_t, id))v5 + 2))(v5, -2008, v15);
    }

LABEL_15:
    v16 = sub_10014CFBC();
    dispatch_async(v16, &stru_1001B69F0);

    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v17 = (id)qword_1001E4708;
    sub_1000A5428((uint64_t)v17);

    goto LABEL_18;
  }
  v18 = sub_100128400();
  v19 = _NRLogIsLevelEnabled(v18, 17);

  if (!v19)
    goto LABEL_19;
  v9 = sub_100128400();
  _NRLogWithArgs(v9, 17, "called with all-zero nrUUID");
LABEL_18:

LABEL_19:
}

void sub_1001364DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  __objc2_prot *v6;
  NSObject *v7;
  char *v8;
  id *v9;
  char v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  id v16;
  const char *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *String;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  void *v33;
  id v34;
  id v35;
  int IsLevelEnabled;
  id v37;
  int v38;
  id v39;
  int *v40;
  uint64_t v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];

  v5 = a3;
  v6 = (__objc2_prot *)objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (!v5)
  {
    v35 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v35, 17);

    if (!IsLevelEnabled)
      goto LABEL_72;
    v9 = (id *)sub_100128400();
    _NRLogWithArgs(v9, 17, "%s called with null nrUUID", "+[NRDLocalDevice confirmKeysForClass:nrUUID:]");
    goto LABEL_71;
  }
  v8 = sub_1001300EC((uint64_t)v6, v5, 0);
  if (!v8)
  {
    v37 = sub_100128400();
    v38 = _NRLogIsLevelEnabled(v37, 16);

    if (v38)
    {
      v39 = sub_100128400();
      _NRLogWithArgs(v39, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice confirmKeysForClass:nrUUID:]", 2489);

    }
    v5 = (id)_os_log_pack_size(12);
    v9 = (id *)((char *)&v43 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    v40 = __error();
    v41 = _os_log_pack_fill(v9, v5, *v40, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v41 = 136446210;
    *(_QWORD *)(v41 + 4) = "+[NRDLocalDevice confirmKeysForClass:nrUUID:]";
    v42 = sub_100128400();
    _NRLogAbortWithPack(v42, v9);
    goto LABEL_78;
  }
  v9 = (id *)v8;
  if ((_DWORD)a2 == 1)
  {
    if (!v8[14])
    {
      objc_msgSend(v8, "setHasConfirmedClassAKeys:", 1);
      if (!*((_BYTE *)v9 + 15))
        goto LABEL_15;
      goto LABEL_11;
    }
    goto LABEL_71;
  }
  if ((_DWORD)a2 != 3)
  {
    if ((_DWORD)a2 == 4)
    {
      if (!v8[12])
      {
        objc_msgSend(v8, "setHasConfirmedClassDKeys:", 1);
        if (!*((_BYTE *)v9 + 15))
        {
LABEL_15:
          if (*((_BYTE *)v9 + 14))
            v11 = 1;
          else
            v11 = *((unsigned __int16 *)v9 + 14) > 0x12u;
          v10 = v11;
          if (*((_BYTE *)v9 + 12))
          {
LABEL_22:
            if (!*((_BYTE *)v9 + 13))
              v10 = 0;
            if ((v10 & 1) != 0)
            {
              v12 = *((unsigned __int8 *)v9 + 8);
              objc_msgSend(v9, "setIsRegistered:", 1);
              v13 = objc_opt_self(v6);
              sub_10012EDB0(v13, 0);
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A80, "objectForKeyedSubscript:", v5));
              if (qword_1001E4A98 != -1)
                dispatch_once(&qword_1001E4A98, &stru_1001B8730);
              if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
              {
                if (qword_1001E4A98 != -1)
                  dispatch_once(&qword_1001E4A98, &stru_1001B8730);
                if (v12)
                  v15 = " (already registered)";
                else
                  v15 = "";
                v16 = (id)qword_1001E4A90;
                if (objc_msgSend(v14, "count"))
                  v17 = " (with clients)";
                else
                  v17 = "";
                v18 = (void *)sub_1001324D0(v9);
                _NRLogWithArgs(v16, 0, "%s%.30s:%-4d Finished%s registration%s for %@", "", "+[NRDLocalDevice confirmKeysForClass:nrUUID:]", 2523, v15, v17, v18);

              }
              if (v12)
                goto LABEL_52;
              v19 = v9[4];
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
              sub_100121E18(v19, 5007, v20, 0);

              v21 = v5;
              objc_opt_self(NRDLocalDevice);
              if (qword_1001E4A50)
              {
                v22 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A50, "objectForKeyedSubscript:", v21));

                if (!v22)
                {
LABEL_52:
                  if (v14)
                  {
                    v45 = 0u;
                    v46 = 0u;
                    v44 = 0u;
                    v43 = 0u;
                    v28 = v14;
                    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
                    if (v29)
                    {
                      v30 = v29;
                      v31 = *(_QWORD *)v44;
                      do
                      {
                        for (i = 0; i != v30; i = (char *)i + 1)
                        {
                          if (*(_QWORD *)v44 != v31)
                            objc_enumerationMutation(v28);
                          (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i) + 16))(*(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i));
                        }
                        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
                      }
                      while (v30);
                    }

                    objc_msgSend(v28, "removeAllObjects", (_QWORD)v43);
                    objc_msgSend((id)qword_1001E4A80, "setObject:forKeyedSubscript:", 0, v5);
                    if (!objc_msgSend((id)qword_1001E4A80, "count"))
                    {
                      v33 = (void *)qword_1001E4A80;
                      qword_1001E4A80 = 0;

                    }
                  }
                  if (qword_1001E4A58)
                    objc_msgSend((id)qword_1001E4A58, "setObject:forKeyedSubscript:", 0, v5);
                  if (qword_1001E4A60)
                    objc_msgSend((id)qword_1001E4A60, "setObject:forKeyedSubscript:", 0, v5);
                  if (qword_1001E4A68)
                    objc_msgSend((id)qword_1001E4A68, "setObject:forKeyedSubscript:", 0, v5);
                  objc_opt_self(NRLinkDirector);
                  if (qword_1001E4710 != -1)
                    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                  v34 = (id)qword_1001E4708;
                  sub_1000A5428((uint64_t)v34);

                  goto LABEL_71;
                }
                *(_QWORD *)(v22 + 32) = mach_absolute_time();
                *(_BYTE *)(v22 + 16) = 1;
                objc_msgSend((id)v22, "submit");
                v23 = v21;
                objc_opt_self(NRDLocalDevice);
                if (qword_1001E4A50)
                {
                  objc_msgSend((id)qword_1001E4A50, "setObject:forKeyedSubscript:", 0, v23);
                  if (!objc_msgSend((id)qword_1001E4A50, "count"))
                  {
                    v24 = (void *)qword_1001E4A50;
                    qword_1001E4A50 = 0;

                  }
                }

              }
              else
              {
                v22 = (uint64_t)v21;
              }

              goto LABEL_52;
            }
          }
LABEL_49:
          v27 = objc_opt_self(v6);
          sub_10012EDB0(v27, 0);
          goto LABEL_71;
        }
LABEL_11:
        v10 = 1;
        if (*((_BYTE *)v9 + 12))
          goto LABEL_22;
        goto LABEL_49;
      }
      goto LABEL_71;
    }
    v6 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
    if (qword_1001E4A98 == -1)
    {
LABEL_45:
      if (_NRLogIsLevelEnabled(qword_1001E4A90, 17))
      {
        if (v6[37].opt_class_meths != (__objc2_meth_list *)-1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        v25 = (id)qword_1001E4A90;
        String = (void *)NRDataProtectionClassCreateString(a2);
        _NRLogWithArgs(v25, 17, "Cannot confirm keys for %@", String);

      }
      goto LABEL_71;
    }
LABEL_78:
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    goto LABEL_45;
  }
  if (!v8[13])
  {
    objc_msgSend(v8, "setHasConfirmedClassCKeys:", 1);
    if (!*((_BYTE *)v9 + 15))
      goto LABEL_15;
    goto LABEL_11;
  }
LABEL_71:

LABEL_72:
}

void sub_100136BA4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  __objc2_prot *v4;
  id v8;
  char *v9;
  void *v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  id v31;
  id v32;
  int v33;
  id v34;
  int IsLevelEnabled;
  id v36;
  int *v37;
  uint64_t v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];

  v8 = a3;
  v9 = a4;
  v10 = (void *)objc_opt_self(a1);
  v11 = sub_10014CFBC();
  dispatch_assert_queue_V2(v11);

  if (v9)
  {
    v12 = sub_1001300EC((uint64_t)v10, v9, 0);
    if (v12)
    {
      v11 = v12;
      objc_msgSend(v12, "setIsRegistered:", 0);
      -[NSObject setIsEnabled:](v11, "setIsEnabled:", 0);
      v13 = objc_opt_self(v10);
      sub_10012EDB0(v13, 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A80, "objectForKeyedSubscript:", v9));
      v4 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
      if (qword_1001E4A98 == -1)
        goto LABEL_4;
    }
    else
    {
      v34 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v34, 16);

      if (IsLevelEnabled)
      {
        v36 = sub_100128400();
        _NRLogWithArgs(v36, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice reportRegistrationFailureCode:errorDescription:forNRUUID:]", 2564);

      }
      v8 = (id)_os_log_pack_size(12);
      v9 = (char *)&v40 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v37 = __error();
      v38 = _os_log_pack_fill(v9, v8, *v37, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v38 = 136446210;
      *(_QWORD *)(v38 + 4) = "+[NRDLocalDevice reportRegistrationFailureCode:errorDescription:forNRUUID:]";
      v39 = sub_100128400();
      _NRLogAbortWithPack(v39, v9);
    }
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
LABEL_4:
    if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
    {
      if (v4[37].opt_class_meths != (__objc2_meth_list *)-1)
        dispatch_once(&qword_1001E4A98, &stru_1001B8730);
      v19 = (id)qword_1001E4A90;
      v20 = (void *)sub_1001324D0((id *)&v11->isa);
      _NRLogWithArgs(v19, 16, "%s%.30s:%-4d Registration failure [%lld] %@ for %@", "", "+[NRDLocalDevice reportRegistrationFailureCode:errorDescription:forNRUUID:]", 2571, a2, v8, v20);

    }
    sub_100135268(v11, 5008, CFSTR("[%lld] %@"), v14, v15, v16, v17, v18, a2);
    v21 = v9;
    objc_opt_self(NRDLocalDevice);
    v22 = (uint64_t)v21;
    if (qword_1001E4A50)
    {
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A50, "objectForKeyedSubscript:", v21));

      if (!v22)
      {
LABEL_15:
        if (v10)
        {
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          v40 = 0u;
          v25 = v10;
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v41;
            do
            {
              for (i = 0; i != v27; i = (char *)i + 1)
              {
                if (*(_QWORD *)v41 != v28)
                  objc_enumerationMutation(v25);
                (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i) + 16))();
              }
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
            }
            while (v27);
          }

          objc_msgSend(v25, "removeAllObjects");
          objc_msgSend((id)qword_1001E4A80, "setObject:forKeyedSubscript:", 0, v21);
          if (!objc_msgSend((id)qword_1001E4A80, "count"))
          {
            v30 = (void *)qword_1001E4A80;
            qword_1001E4A80 = 0;

          }
        }
        if (qword_1001E4A58)
          objc_msgSend((id)qword_1001E4A58, "setObject:forKeyedSubscript:", 0, v21);
        if (qword_1001E4A60)
          objc_msgSend((id)qword_1001E4A60, "setObject:forKeyedSubscript:", 0, v21);
        if (qword_1001E4A68)
          objc_msgSend((id)qword_1001E4A68, "setObject:forKeyedSubscript:", 0, v21);
        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v31 = (id)qword_1001E4708;
        sub_1000A5428((uint64_t)v31);

        goto LABEL_34;
      }
      *(_QWORD *)(v22 + 32) = mach_absolute_time();
      *(_BYTE *)(v22 + 16) = 0;
      objc_msgSend((id)v22, "submit");
      v23 = v21;
      objc_opt_self(NRDLocalDevice);
      if (qword_1001E4A50)
      {
        objc_msgSend((id)qword_1001E4A50, "setObject:forKeyedSubscript:", 0, v23);
        if (!objc_msgSend((id)qword_1001E4A50, "count"))
        {
          v24 = (void *)qword_1001E4A50;
          qword_1001E4A50 = 0;

        }
      }

    }
    goto LABEL_15;
  }
  v32 = sub_100128400();
  v33 = _NRLogIsLevelEnabled(v32, 17);

  if (!v33)
    goto LABEL_35;
  v11 = sub_100128400();
  _NRLogWithArgs(v11, 17, "%s called with null nrUUID", "+[NRDLocalDevice reportRegistrationFailureCode:errorDescription:forNRUUID:]");
LABEL_34:

LABEL_35:
}

void sub_1001370D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  char *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  int v18;
  id v19;
  int v20;
  id v21;
  int IsLevelEnabled;
  char *v23;
  id v24;

  v24 = a2;
  v5 = a3;
  v6 = objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (v24)
  {
    if ((_NRIsUUIDNonZero(v24) & 1) != 0)
    {
      if (v5)
      {
        v8 = sub_1001300EC((uint64_t)NRDLocalDevice, v24, 0);
        v9 = v8;
        if (v8)
        {
          v10 = *((id *)v8 + 4);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
          sub_100121E18(v10, 5002, v11, 0);

          v12 = sub_1001323E0((uint64_t)NRDLocalDevice, v9);
          objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", v12, v24);

          if (v9[7])
            objc_msgSend((id)qword_1001E4A40, "setObject:forKeyedSubscript:", 0);
        }
        else
        {
          v23 = sub_1001323E0((uint64_t)NRDLocalDevice, 0);
          objc_msgSend((id)qword_1001E4A38, "setObject:forKeyedSubscript:", v23, v24);

        }
        sub_1000A04A0(v24, 0);
        sub_100131394((uint64_t)v9);
        v13 = objc_opt_self(v6);
        sub_10012EDB0(v13, 0);
        if (v9)
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
          {
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Unregistered device %@", "", "+[NRDLocalDevice unregisterDeviceWithNRUUID:completionBlock:]", 2631, v9);
          }
          (*((void (**)(id, _QWORD, _QWORD))v5 + 2))(v5, 0, 0);
        }
        else
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          if (_NRLogIsLevelEnabled(qword_1001E4A90, 16))
          {
            if (qword_1001E4A98 != -1)
              dispatch_once(&qword_1001E4A98, &stru_1001B8730);
            _NRLogWithArgs(qword_1001E4A90, 16, "%s%.30s:%-4d Did not unregister unknown NRUUID %@", "", "+[NRDLocalDevice unregisterDeviceWithNRUUID:completionBlock:]", 2634, v24);
          }
          v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown NRUUID %@"), v24);
          (*((void (**)(id, uint64_t, id))v5 + 2))(v5, -2008, v14);

        }
        if (qword_1001E4A58)
          objc_msgSend((id)qword_1001E4A58, "setObject:forKeyedSubscript:", 0, v24);
        if (qword_1001E4A60)
          objc_msgSend((id)qword_1001E4A60, "setObject:forKeyedSubscript:", 0, v24);
        if (qword_1001E4A68)
          objc_msgSend((id)qword_1001E4A68, "setObject:forKeyedSubscript:", 0, v24);
        if (qword_1001E4A88)
          objc_msgSend((id)qword_1001E4A88, "setObject:forKeyedSubscript:", 0, v24);
        v15 = sub_10014CFBC();
        dispatch_async(v15, &stru_1001B69F0);

        objc_opt_self(NRLinkDirector);
        if (qword_1001E4710 != -1)
          dispatch_once(&qword_1001E4710, &stru_1001B6E60);
        v16 = (id)qword_1001E4708;
        sub_1000A5428();

      }
      else
      {
        v21 = sub_100128400();
        IsLevelEnabled = _NRLogIsLevelEnabled(v21, 17);

        if (!IsLevelEnabled)
          goto LABEL_34;
        v9 = sub_100128400();
        _NRLogWithArgs(v9, 17, "%s called with null completionBlock");
      }
    }
    else
    {
      v19 = sub_100128400();
      v20 = _NRLogIsLevelEnabled(v19, 17);

      if (!v20)
        goto LABEL_34;
      v9 = sub_100128400();
      _NRLogWithArgs(v9, 17, "called with all-zero nrUUID");
    }
  }
  else
  {
    v17 = sub_100128400();
    v18 = _NRLogIsLevelEnabled(v17, 17);

    if (!v18)
      goto LABEL_34;
    v9 = sub_100128400();
    _NRLogWithArgs(v9, 17, "%s called with null nrUUID");
  }

LABEL_34:
}

void sub_100137528(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  id v9;
  int v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  int v19;
  id v20;
  int IsLevelEnabled;
  id v22;
  int v23;
  id v24;

  v24 = a2;
  v5 = a3;
  v6 = objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (v24)
  {
    if ((_NRIsUUIDNonZero(v24) & 1) == 0)
    {
      v20 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v20, 17);

      if (!IsLevelEnabled)
        goto LABEL_20;
      v9 = sub_100128400();
      _NRLogWithArgs(v9, 17, "called with all-zero nrUUID");
      goto LABEL_19;
    }
    if (!v5)
    {
      v22 = sub_100128400();
      v23 = _NRLogIsLevelEnabled(v22, 17);

      if (!v23)
        goto LABEL_20;
      v9 = sub_100128400();
      _NRLogWithArgs(v9, 17, "%s called with null completionBlock");
      goto LABEL_19;
    }
    v8 = sub_1001300EC(v6, v24, 0);
    v9 = v8;
    if (v8)
    {
      v10 = v8[8];
      v11 = *((id *)v8 + 4);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
      if (v10)
      {
        sub_100121E18(v11, 5004, v12, 0);

        objc_msgSend(v9, "setIsEnabled:", 0);
        v13 = objc_opt_self(v6);
        sub_10012EDB0(v13, 0);
        if (qword_1001E4A98 != -1)
          dispatch_once(&qword_1001E4A98, &stru_1001B8730);
        if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
        {
          if (qword_1001E4A98 != -1)
            dispatch_once(&qword_1001E4A98, &stru_1001B8730);
          _NRLogWithArgs(qword_1001E4A90, 0, "%s%.30s:%-4d Disabled device %@", "", "+[NRDLocalDevice disableDeviceWithNRUUID:completionBlock:]", 2721, v9);
        }
        (*((void (**)(id, _QWORD, _QWORD))v5 + 2))(v5, 0, 0);
        goto LABEL_16;
      }
      sub_100121E18(v11, 5010, v12, CFSTR("disable"));

      v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@ is not registered"), v9);
      (*((void (**)(id, uint64_t, id))v5 + 2))(v5, -2014, v15);
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "UUIDString"));
      sub_100121E18(v24, 5009, v14, CFSTR("disable"));

      v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown NRUUID %@"), v24);
      (*((void (**)(id, uint64_t, id))v5 + 2))(v5, -2008, v15);
    }

LABEL_16:
    v16 = sub_10014CFBC();
    dispatch_async(v16, &stru_1001B69F0);

    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v17 = (id)qword_1001E4708;
    sub_1000A5428();

    goto LABEL_19;
  }
  v18 = sub_100128400();
  v19 = _NRLogIsLevelEnabled(v18, 17);

  if (!v19)
    goto LABEL_20;
  v9 = sub_100128400();
  _NRLogWithArgs(v9, 17, "%s called with null nrUUID");
LABEL_19:

LABEL_20:
}

uint64_t sub_100137894(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned __int8 *v7;
  int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = (id)qword_1001E4A38;
  v4 = (uint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i), (_QWORD)v10));
        if (v7)
        {
          v8 = v7[9];

          if (v8)
          {
            v4 = 1;
            goto LABEL_12;
          }
        }
      }
      v4 = (uint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  return v4;
}

id sub_1001379CC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = (id)qword_1001E4A38;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v9, (_QWORD)v13));
        v11 = (void *)v10;
        if (v10 && *(_BYTE *)(v10 + 9))
          objc_msgSend(v3, "addObject:", v9);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  return v3;
}

id sub_100137B34(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = (id)qword_1001E4A38;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v9, (_QWORD)v13));
        v11 = (void *)v10;
        if (v10 && *(_BYTE *)(v10 + 9) && *(_QWORD *)(v10 + 40))
          objc_msgSend(v3, "addObject:", v9);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  return v3;
}

id sub_100137CA4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = (id)qword_1001E4A38;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v9, (_QWORD)v15));
        v11 = (void *)v10;
        if (!v10 || !*(_BYTE *)(v10 + 9))
          goto LABEL_6;
        if (*(_BYTE *)(v10 + 15))
        {
          v12 = 1;
          if (*(_BYTE *)(v10 + 12))
            goto LABEL_21;
        }
        else
        {
          if (*(_BYTE *)(v10 + 14))
            v13 = 1;
          else
            v13 = *(unsigned __int16 *)(v10 + 28) > 0x12u;
          v12 = v13;
          if (*(_BYTE *)(v10 + 12))
          {
LABEL_21:
            if (!*(_BYTE *)(v10 + 13))
              v12 = 0;
            if ((v12 & 1) != 0)
              goto LABEL_6;
          }
        }
        if (!sub_100137E98(v10))
          goto LABEL_5;
        if (qword_1001E4870 == -1)
        {
          if (byte_1001E4868)
            goto LABEL_5;
        }
        else
        {
          dispatch_once(&qword_1001E4870, &stru_1001B7BB0);
          if (byte_1001E4868)
LABEL_5:
            objc_msgSend(v3, "addObject:", v9);
        }
LABEL_6:

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  return v3;
}

BOOL sub_100137E98(_BOOL8 result)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  unsigned int v5;

  if (result)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 23))
    {
      *(_BYTE *)(result + 23) = 1;
      if (*(_QWORD *)(result + 128))
      {
        v2 = +[NRDeviceOperationalProperties copyPropertiesForDefaultPairedPhone](NRDeviceOperationalProperties, "copyPropertiesForDefaultPairedPhone");
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allowedLinkTypes"));
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 128), "allowedLinkTypes"));
        v5 = objc_msgSend(v3, "isEqualToArray:", v4);

        if (v5)
          *(_BYTE *)(v1 + 19) = 1;

      }
      else
      {
        *(_BYTE *)(result + 19) = 1;
      }
    }
    return *(_BYTE *)(v1 + 19) != 0;
  }
  return result;
}

id sub_100137F48(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = (id)qword_1001E4A38;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v9, (_QWORD)v15));
        v11 = (void *)v10;
        if (v10 && *(_BYTE *)(v10 + 9))
        {
          if (*(_BYTE *)(v10 + 15))
          {
            v12 = 1;
            if (!*(_BYTE *)(v10 + 12))
              goto LABEL_5;
          }
          else
          {
            if (*(_BYTE *)(v10 + 14))
              v13 = 1;
            else
              v13 = *(unsigned __int16 *)(v10 + 28) > 0x12u;
            v12 = v13;
            if (!*(_BYTE *)(v10 + 12))
              goto LABEL_5;
          }
          if (!*(_BYTE *)(v10 + 13))
            v12 = 0;
          if (v12 == 1)
            objc_msgSend(v3, "addObject:", v9);
        }
LABEL_5:

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  return v3;
}

id sub_1001380F8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = (id)qword_1001E4A38;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i), (_QWORD)v12));
        v10 = (void *)v9;
        if (v9 && *(_BYTE *)(v9 + 9) && *(_QWORD *)(v9 + 40))
          objc_msgSend(v3, "addObject:");

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  return v3;
}

uint64_t sub_100138258(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = (id)qword_1001E4A38;
  v4 = (uint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
LABEL_4:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(v3);
      v7 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6), (_QWORD)v10));
      if (v7 && *(_BYTE *)(v7 + 9))
      {
        v8 = *(_QWORD *)(v7 + 40);

        if (v8)
        {
          v4 = 1;
          break;
        }
      }
      else
      {

      }
      if (v4 == ++v6)
      {
        v4 = (uint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (!v4)
          break;
        goto LABEL_4;
      }
    }
  }

  return v4;
}

id sub_1001383A0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v1 = objc_opt_self(a1);
  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  sub_10012DFA0(v1);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = (id)qword_1001E4A38;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_15;
  }
  v5 = v4;
  v6 = 0;
  v7 = *(_QWORD *)v15;
LABEL_4:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v15 != v7)
      objc_enumerationMutation(v3);
    v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v8);
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A38, "objectForKeyedSubscript:", v9, (_QWORD)v14));
    v11 = (void *)v10;
    if (!v10 || !*(_BYTE *)(v10 + 9))
      goto LABEL_5;
    if (!*(_BYTE *)(v10 + 24))
      break;
    if (!v6)
      v6 = v9;
LABEL_5:

    if (v5 == (id)++v8)
    {
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (!v5)
        goto LABEL_15;
      goto LABEL_4;
    }
  }
  v12 = v9;

  v6 = v12;
LABEL_15:

  return v6;
}

char *sub_100138520(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  char *v5;
  char *v6;
  id v8;
  int IsLevelEnabled;

  v3 = a2;
  v4 = objc_opt_self(a1);
  if (v3)
  {
    v5 = sub_1001300EC(v4, v3, 0);
    v6 = sub_100130F84(v5);
  }
  else
  {
    v8 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 17);

    if (!IsLevelEnabled)
    {
      v6 = 0;
      goto LABEL_4;
    }
    v5 = (char *)sub_100128400();
    _NRLogWithArgs(v5, 17, "%s called with null nrUUID", "+[NRDLocalDevice copyDeviceIdentityPayloadForNRUUID:]");
    v6 = 0;
  }

LABEL_4:
  return v6;
}

void sub_1001385D4(uint64_t a1, void *a2, int a3, void *a4)
{
  id *v4;
  id *v5;
  id v9;
  char *v10;
  id *v11;
  NSObject *v12;
  char *v13;
  id *v14;
  id v15;
  Class isa;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;
  id *v33;
  id v34;
  Class v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v51;
  id *v52;
  id v53;
  Class v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  int v69;
  id v70;
  int v71;
  id v72;
  int IsLevelEnabled;
  id v74;
  int *v75;
  uint64_t v76;
  id v77;
  void *v78;
  int v79;
  uint64_t v80;
  void *v81;
  NSObject *v82;
  uint64_t v83;
  id *v84;
  _QWORD v85[4];
  NSObject *v86;
  id v87;
  id *v88;
  id v89;
  id *v90;
  char *v91;
  id *v92;
  char v93;
  _QWORD v94[4];
  NSObject *v95;
  id v96;
  id *v97;
  id *v98;
  id *v99;
  char *v100;
  id *v101;
  char v102;

  v9 = a2;
  v10 = a4;
  v11 = (id *)objc_opt_self(a1);
  v12 = sub_10014CFBC();
  dispatch_assert_queue_V2(v12);

  if (v9)
  {
    if (v10)
    {
      v13 = sub_1001300EC((uint64_t)v11, v9, 0);
      if (!v13)
      {
        v72 = sub_100128400();
        IsLevelEnabled = _NRLogIsLevelEnabled(v72, 16);

        if (IsLevelEnabled)
        {
          v74 = sub_100128400();
          _NRLogWithArgs(v74, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice queryPairingKeysForNRUUID:minDataProtectionClass:completionBlock:]", 3036);

        }
        v9 = (id)_os_log_pack_size(12);
        v10 = (char *)&v83 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0);
        v75 = __error();
        v76 = _os_log_pack_fill(v10, v9, *v75, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
        *(_DWORD *)v76 = 136446210;
        *(_QWORD *)(v76 + 4) = "+[NRDLocalDevice queryPairingKeysForNRUUID:minDataProtectionClass:completionBlock:]";
        v77 = sub_100128400();
        _NRLogAbortWithPack(v77, v10);
        goto LABEL_53;
      }
      v12 = v13;
      v84 = v11;
      sub_1001318B0((uint64_t)v13);
      v14 = v12[9].isa;
      v11 = v14;
      if (v14)
      {
        v15 = v14[2];
        if (v15)
        {
          isa = v12[9].isa;
          if (isa)
            v17 = *((_QWORD *)isa + 4);
          else
            v17 = 0;

          if (!v17)
            goto LABEL_17;
          v11 = (id *)objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", 64);
          v18 = v12[9].isa;
          if (v18)
            v19 = (void *)v18[2];
          else
            v19 = 0;
          v20 = v19;
          v21 = v18;
          v22 = sub_10012B324(v20);
          objc_msgSend(v11, "appendData:", v22);

          v23 = v12[9].isa;
          if (v23)
            v24 = (void *)v23[4];
          else
            v24 = 0;
          v25 = v24;
          v26 = v23;
          v27 = sub_10012B324(v25);
          objc_msgSend(v11, "appendData:", v27);

          if (objc_msgSend(v11, "length") == (id)64)
          {
LABEL_18:
            v33 = v12[10].isa;
            v4 = v33;
            if (v33)
            {
              v34 = v33[2];
              if (v34)
              {
                v35 = v12[10].isa;
                if (v35)
                  v36 = *((_QWORD *)v35 + 4);
                else
                  v36 = 0;

                if (!v36)
                  goto LABEL_31;
                v4 = (id *)objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", 64);
                v37 = v12[10].isa;
                if (v37)
                  v38 = (void *)v37[2];
                else
                  v38 = 0;
                v39 = v38;
                v40 = v37;
                v41 = sub_10012B324(v39);
                objc_msgSend(v4, "appendData:", v41);

                v42 = v12[10].isa;
                if (v42)
                  v43 = (void *)v42[4];
                else
                  v43 = 0;
                v44 = v43;
                v45 = v42;
                v46 = sub_10012B324(v44);
                objc_msgSend(v4, "appendData:", v46);

                if (objc_msgSend(v4, "length") == (id)64)
                  goto LABEL_32;
                v48 = (void *)_NRCopyLogObjectForNRUUID(v9, v47);
                v49 = _NRLogIsLevelEnabled(v48, 16);

                if (v49)
                {
                  v51 = (void *)_NRCopyLogObjectForNRUUID(v9, v50);
                  _NRLogWithArgs(v51, 16, "%s%.30s:%-4d Bad localPublicClassCKeys.length %llu", "", "+[NRDLocalDevice queryPairingKeysForNRUUID:minDataProtectionClass:completionBlock:]", 3058, objc_msgSend(v4, "length"));

                }
              }
            }

LABEL_31:
            v4 = 0;
LABEL_32:
            v52 = v12[11].isa;
            v5 = v52;
            if (!v52 || (v53 = v52[2]) == 0)
            {
LABEL_55:

              goto LABEL_56;
            }
            v54 = v12[11].isa;
            if (v54)
              v55 = *((_QWORD *)v54 + 4);
            else
              v55 = 0;

            if (!v55)
            {
LABEL_56:
              v5 = 0;
              if (a3 == 1)
                goto LABEL_43;
              goto LABEL_57;
            }
            v5 = (id *)objc_msgSend(objc_alloc((Class)NSMutableData), "initWithCapacity:", 64);
            v56 = v12[11].isa;
            if (v56)
              v57 = (void *)v56[2];
            else
              v57 = 0;
            v58 = v57;
            v59 = v56;
            v60 = sub_10012B324(v58);
            objc_msgSend(v5, "appendData:", v60);

            v61 = v12[11].isa;
            if (v61)
              v62 = (void *)v61[4];
            else
              v62 = 0;
            v63 = v62;
            v64 = v61;
            v65 = sub_10012B324(v63);
            objc_msgSend(v5, "appendData:", v65);

            if (objc_msgSend(v5, "length") == (id)64)
            {
              if (a3 == 1)
              {
LABEL_43:
                if (!v4 || !v5)
                {
                  v94[0] = _NSConcreteStackBlock;
                  v94[1] = 3221225472;
                  v94[2] = sub_100138DF8;
                  v94[3] = &unk_1001B8648;
                  v67 = v12;
                  v95 = v67;
                  v101 = v84;
                  v96 = v9;
                  v102 = 1;
                  v100 = v10;
                  v97 = v11;
                  v98 = v4;
                  v99 = v5;
                  sub_100132020((uint64_t)v67, v94);

LABEL_61:
                  goto LABEL_62;
                }
                goto LABEL_60;
              }
LABEL_57:
              if (a3 == 3 && !v4)
              {
                v85[0] = _NSConcreteStackBlock;
                v85[1] = 3221225472;
                v85[2] = sub_100138F58;
                v85[3] = &unk_1001B8648;
                v82 = v12;
                v86 = v82;
                v92 = v84;
                v87 = v9;
                v93 = 3;
                v91 = v10;
                v88 = v11;
                v89 = 0;
                v90 = v5;
                sub_100131C98((char *)v82, v85);

                goto LABEL_61;
              }
LABEL_60:
              (*((void (**)(char *, id *, id *, id *))v10 + 2))(v10, v11, v4, v5);
              goto LABEL_61;
            }
LABEL_53:
            v78 = (void *)_NRCopyLogObjectForNRUUID(v9, v66);
            v79 = _NRLogIsLevelEnabled(v78, 16);

            if (v79)
            {
              v81 = (void *)_NRCopyLogObjectForNRUUID(v9, v80);
              _NRLogWithArgs(v81, 16, "%s%.30s:%-4d Bad localPublicClassAKeys.length %llu", "", "+[NRDLocalDevice queryPairingKeysForNRUUID:minDataProtectionClass:completionBlock:]", 3070, objc_msgSend(v5, "length"));

            }
            goto LABEL_55;
          }
          v29 = (void *)_NRCopyLogObjectForNRUUID(v9, v28);
          v30 = _NRLogIsLevelEnabled(v29, 16);

          if (v30)
          {
            v32 = (void *)_NRCopyLogObjectForNRUUID(v9, v31);
            _NRLogWithArgs(v32, 16, "%s%.30s:%-4d Bad localPublicClassDKeys.length %llu", "", "+[NRDLocalDevice queryPairingKeysForNRUUID:minDataProtectionClass:completionBlock:]", 3046, objc_msgSend(v11, "length"));

          }
        }
      }

LABEL_17:
      v11 = 0;
      goto LABEL_18;
    }
    v70 = sub_100128400();
    v71 = _NRLogIsLevelEnabled(v70, 17);

    if (v71)
    {
      v12 = sub_100128400();
      _NRLogWithArgs(v12, 17, "%s called with null completionBlock");
      goto LABEL_62;
    }
  }
  else
  {
    v68 = sub_100128400();
    v69 = _NRLogIsLevelEnabled(v68, 17);

    if (v69)
    {
      v12 = sub_100128400();
      _NRLogWithArgs(v12, 17, "%s called with null nrUUID");
LABEL_62:

    }
  }

}

uint64_t sub_100138DF8(uint64_t a1, int a2)
{
  uint64_t v3;
  id *v4;
  id *v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
    goto LABEL_12;
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
  {
    v5 = 0;
LABEL_11:

    goto LABEL_12;
  }
  v4 = (id *)*(id *)(v3 + 88);
  v5 = v4;
  if (!v4)
    goto LABEL_11;
  v6 = v4[2];
  if (!v6)
    goto LABEL_11;
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(id *)(v8 + 88);
    if (v9)
    {
      v10 = v9[4];
      goto LABEL_8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_8:

  if (v10)
    return sub_1001385D4(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72));
LABEL_12:
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 17))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 17, "Cannot query pairing keys due to ClassA failure %@", *(_QWORD *)(a1 + 40));
  }
  sub_100109270(CFSTR("NRDLocalDevice"), CFSTR("PairingKeys"), CFSTR("InvalidClassAKeys"), 0, 0, v12, v13, v14, v15);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

uint64_t sub_100138F58(uint64_t a1, int a2)
{
  uint64_t v3;
  id *v4;
  id *v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
    goto LABEL_12;
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
  {
    v5 = 0;
LABEL_11:

    goto LABEL_12;
  }
  v4 = (id *)*(id *)(v3 + 80);
  v5 = v4;
  if (!v4)
    goto LABEL_11;
  v6 = v4[2];
  if (!v6)
    goto LABEL_11;
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v9 = *(id *)(v8 + 80);
    if (v9)
    {
      v10 = v9[4];
      goto LABEL_8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_8:

  if (v10)
    return sub_1001385D4(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72));
LABEL_12:
  if (qword_1001E4A98 != -1)
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 17))
  {
    if (qword_1001E4A98 != -1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    _NRLogWithArgs(qword_1001E4A90, 17, "Cannot query pairing keys due to ClassC failure %@", *(_QWORD *)(a1 + 40));
  }
  sub_100109270(CFSTR("NRDLocalDevice"), CFSTR("PairingKeys"), CFSTR("InvalidClassCKeys"), 0, 0, v12, v13, v14, v15);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

void sub_1001390B8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  id v14;
  int v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  char v20;

  v7 = a2;
  v8 = a4;
  v9 = objc_opt_self(a1);
  v10 = sub_10014CFBC();
  dispatch_assert_queue_V2(v10);

  if (!v7)
  {
    v11 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 17);

    if (!IsLevelEnabled)
      goto LABEL_4;
    v13 = sub_100128400();
    _NRLogWithArgs(v13, 17, "%s called with null nrUUID");
LABEL_9:

    goto LABEL_4;
  }
  if (!v8)
  {
    v14 = sub_100128400();
    v15 = _NRLogIsLevelEnabled(v14, 17);

    if (!v15)
      goto LABEL_4;
    v13 = sub_100128400();
    _NRLogWithArgs(v13, 17, "%s called with null completionBlock");
    goto LABEL_9;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100139220;
  v16[3] = &unk_1001B8698;
  v19 = v9;
  v17 = v7;
  v20 = a3;
  v18 = v8;
  sub_1001385D4(v9, v17, a3, v16);

LABEL_4:
}

void sub_100139220(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  char *v8;
  id v9;
  id v10;
  char *v11;
  char *v12;
  id v13;
  dispatch_queue_t *v14;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  id v22;
  int v23;
  id v24;
  char *v25;
  int *v26;
  uint64_t v27;
  id v28;
  int IsLevelEnabled;
  id v30;
  int *v31;
  uint64_t v32;
  id v33;
  _QWORD v34[2];
  void (*v35)(uint64_t, uint64_t, uint64_t, void *, void *, void *);
  void *v36;
  id v37;
  char v38;
  _QWORD v39[5];
  char *v40;
  id v41;
  id v42;
  id v43;
  _QWORD *v44;
  char v45;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = sub_1001300EC(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), 0);
  if (v11)
  {
    v12 = v11;
    v13 = *((id *)v11 + 5);
    if (v13)
    {
      v4 = v13;
      objc_opt_self(NRDIDSKeyManager);
      if (qword_1001E47A8 == -1)
        goto LABEL_4;
      goto LABEL_15;
    }
    v28 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v28, 16);

    v8 = "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke";
    if (IsLevelEnabled)
    {
      v30 = sub_100128400();
      _NRLogWithArgs(v30, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (bluetoothUUID) != ((void *)0)", "", "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke", 3124);

    }
    v12 = (char *)_os_log_pack_size(12);
    v25 = (char *)v34 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = __error();
    v32 = _os_log_pack_fill(v25, v12, *v31, &_mh_execute_header, "%{public}s Assertion Failed: (bluetoothUUID) != ((void *)0)");
    *(_DWORD *)v32 = 136446210;
    *(_QWORD *)(v32 + 4) = "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke";
  }
  else
  {
    v22 = sub_100128400();
    v23 = _NRLogIsLevelEnabled(v22, 16);

    if (v23)
    {
      v24 = sub_100128400();
      _NRLogWithArgs(v24, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke", 3122);

    }
    v12 = (char *)_os_log_pack_size(12);
    v25 = (char *)v34 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = __error();
    v27 = _os_log_pack_fill(v25, v12, *v26, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v27 + 4) = "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke";
  }
  v33 = sub_100128400();
  _NRLogAbortWithPack(v33, v25);
LABEL_15:
  dispatch_once(&qword_1001E47A8, &stru_1001B7648);
LABEL_4:
  v14 = (dispatch_queue_t *)(id)qword_1001E47A0;
  v15 = *(unsigned __int8 *)(a1 + 56);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v35 = sub_10013961C;
  v36 = &unk_1001B8670;
  v38 = v15;
  v37 = *(id *)(a1 + 40);
  v16 = v4;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v20 = v34;
  if (v14)
  {
    dispatch_assert_queue_V2(v14[2]);
    if (v17)
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1000F27C4;
      v39[3] = &unk_1001B76E8;
      v39[4] = v14;
      v45 = v15;
      v40 = v17;
      v21 = v16;
      v41 = v21;
      v42 = v18;
      v43 = v19;
      v44 = v20;
      sub_1000F234C((uint64_t)v14, v21, v15, v39);

    }
    else
    {
      v35((uint64_t)v20, 0, 0, 0, 0, 0);
    }
  }

}

void sub_10013961C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  NSObject *v13;
  int v14;
  id v15;
  int IsLevelEnabled;
  id v17;
  id v18;
  int v19;
  id v20;
  int v21;
  id v22;
  int v23;
  id v24;
  int v25;
  id v26;

  v26 = a4;
  v11 = a5;
  v12 = a6;
  v13 = sub_10014CFBC();
  dispatch_assert_queue_V2(v13);

  if (!a2)
  {
    v15 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

    if (!IsLevelEnabled)
      goto LABEL_9;
    v17 = sub_100128400();
    _NRLogWithArgs(v17, 17, "%s called with null remotePublicIDSClassDSigningKey");
    goto LABEL_20;
  }
  if (!a3)
  {
    v18 = sub_100128400();
    v19 = _NRLogIsLevelEnabled(v18, 17);

    if (!v19)
      goto LABEL_9;
    v17 = sub_100128400();
    _NRLogWithArgs(v17, 17, "%s called with null localPrivateIDSClassDSigningKey");
    goto LABEL_20;
  }
  if (!v26)
  {
    v20 = sub_100128400();
    v21 = _NRLogIsLevelEnabled(v20, 17);

    if (!v21)
      goto LABEL_9;
    v17 = sub_100128400();
    _NRLogWithArgs(v17, 17, "%s called with null localPublicClassDKeysEncryptedWithIDS");
    goto LABEL_20;
  }
  v14 = *(unsigned __int8 *)(a1 + 40);
  if ((v14 | 2) == 3)
  {
    if (v11)
    {
      if (v12 || v14 != 1)
        goto LABEL_8;
      v24 = sub_100128400();
      v25 = _NRLogIsLevelEnabled(v24, 17);

      if (!v25)
        goto LABEL_9;
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 17, "%s called with null localPublicClassAKeysEncryptedWithIDS");
    }
    else
    {
      v22 = sub_100128400();
      v23 = _NRLogIsLevelEnabled(v22, 17);

      if (!v23)
        goto LABEL_9;
      v17 = sub_100128400();
      _NRLogWithArgs(v17, 17, "%s called with null localPublicClassCKeysEncryptedWithIDS");
    }
LABEL_20:

    goto LABEL_9;
  }
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_9:

}

void sub_100139818(uint64_t a1, void *a2, void *a3, void *a4)
{
  _QWORD *v4;
  id v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  Class isa;
  uint64_t v14;
  objc_class *v15;
  void *v16;
  id v17;
  int v18;
  id v19;
  int IsLevelEnabled;
  id v21;
  int v22;
  id v23;
  int v24;
  id v25;
  int *v26;
  uint64_t v27;
  id v28;
  id v29;
  int v30;
  id v31;
  id v32;

  v32 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = sub_10014CFBC();
  dispatch_assert_queue_V2(v11);

  if (objc_msgSend(v32, "length") == (id)48)
  {
    if (!v8)
    {
      v19 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v19, 17);

      if (!IsLevelEnabled)
        goto LABEL_10;
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 17, "%s called with null nrUUID");
      goto LABEL_9;
    }
    if (!v9)
    {
      v21 = sub_100128400();
      v22 = _NRLogIsLevelEnabled(v21, 17);

      if (!v22)
        goto LABEL_10;
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 17, "%s called with null deviceCompletionBlock");
      goto LABEL_9;
    }
    v12 = sub_1001300EC(v10, v8, 0);
    if (v12)
    {
      v11 = v12;
      v4 = sub_10012DD74([NRDDeviceIdentity alloc], v32);
      isa = v11[8].isa;
      if (!isa)
      {
        -[NSObject setRemoteIdentity:](v11, "setRemoteIdentity:", v4);
        v14 = objc_opt_self(v10);
        if ((sub_10012EDB0(v14, 0) & 1) != 0)
        {
          v15 = v11[4].isa;
          v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject description](v11, "description"));
          sub_100121E18(v15, 5006, v16, CFSTR("Identity"));

        }
        else
        {
          -[NSObject setRemoteIdentity:](v11, "setRemoteIdentity:", 0);
        }
LABEL_8:
        (*((void (**)(char *, NSObject *))v9 + 2))(v9, v11);

        goto LABEL_9;
      }
    }
    else
    {
      v23 = sub_100128400();
      v24 = _NRLogIsLevelEnabled(v23, 16);

      if (v24)
      {
        v25 = sub_100128400();
        _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteDeviceIdentity:nrUUID:deviceCompletionBlock:]", 3167);

      }
      v8 = (id)_os_log_pack_size(12);
      v9 = (char *)&v32 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      v26 = __error();
      v27 = _os_log_pack_fill(v9, v8, *v26, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v27 = 136446210;
      *(_QWORD *)(v27 + 4) = "+[NRDLocalDevice ingestRemoteDeviceIdentity:nrUUID:deviceCompletionBlock:]";
      v28 = sub_100128400();
      isa = (Class)_NRLogAbortWithPack(v28, v9);
    }
    if ((-[objc_class isEqual:](isa, "isEqual:", v4, v32) & 1) == 0)
    {
      v29 = sub_100128400();
      v30 = _NRLogIsLevelEnabled(v29, 17);

      if (v30)
      {
        v31 = sub_100128400();
        _NRLogWithArgs(v31, 17, "Ingested remote device identity doesn't match existing one!");

      }
    }
    goto LABEL_8;
  }
  v17 = sub_100128400();
  v18 = _NRLogIsLevelEnabled(v17, 17);

  if (!v18)
    goto LABEL_10;
  v11 = sub_100128400();
  _NRLogWithArgs(v11, 17, "%s called with null remoteDeviceIdentityData.length == sizeof(uuid_t) + sizeof(ccec25519pubkey)");
LABEL_9:

LABEL_10:
}

void sub_100139B60(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  void *v5;
  objc_class *v6;
  id v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  char *v15;
  Class isa;
  objc_class *v17;
  void *v18;
  id v19;
  char *v20;
  Class v21;
  objc_class *v22;
  void *v23;
  uint64_t v24;
  id v25;
  int v26;
  id v27;
  int IsLevelEnabled;
  id v29;
  int v30;
  id v31;
  int v32;
  id v33;
  int *v34;
  uint64_t v35;
  id v36;
  id v37;

  v37 = a2;
  v10 = a3;
  v11 = a4;
  v12 = objc_opt_self(a1);
  v13 = sub_10014CFBC();
  dispatch_assert_queue_V2(v13);

  if (objc_msgSend(v37, "length") == (id)64)
  {
    if (!v10)
    {
      v27 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v27, 17);

      if (!IsLevelEnabled)
        goto LABEL_13;
      v13 = sub_100128400();
      _NRLogWithArgs(v13, 17, "%s called with null nrUUID");
      goto LABEL_12;
    }
    if (!v11)
    {
      v29 = sub_100128400();
      v30 = _NRLogIsLevelEnabled(v29, 17);

      if (!v30)
        goto LABEL_13;
      v13 = sub_100128400();
      _NRLogWithArgs(v13, 17, "%s called with null deviceCompletionBlock");
      goto LABEL_12;
    }
    v14 = sub_1001300EC(v12, v10, 0);
    if (v14)
    {
      v13 = v14;
      sub_1001316A8((uint64_t)v14);
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "subdataWithRange:", 0, 32));
      v15 = sub_10012ADA4((char *)[NRDLDKeychainItemSecKey alloc], v4);
      isa = v13[9].isa;
      if (isa)
        objc_storeStrong((id *)isa + 1, v15);

      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "subdataWithRange:", 32, 32));
      v17 = v13[9].isa;
      v6 = v17;
      if (v17)
      {
        v18 = (void *)*((_QWORD *)v17 + 4);
LABEL_9:
        v19 = v18;
        v20 = sub_10012CF48((uint64_t)v19, v5);
        v21 = v13[9].isa;
        if (v21)
          objc_storeStrong((id *)v21 + 3, v20);

        v22 = v13[4].isa;
        v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject description](v13, "description"));
        sub_100121E18(v22, 5006, v23, CFSTR("ClassD"));

        v24 = objc_opt_self(v12);
        sub_10012EDB0(v24, 0);
        (*((void (**)(char *, NSObject *))v11 + 2))(v11, v13);

        goto LABEL_12;
      }
    }
    else
    {
      v31 = sub_100128400();
      v32 = _NRLogIsLevelEnabled(v31, 16);

      if (v32)
      {
        v33 = sub_100128400();
        _NRLogWithArgs(v33, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassDKeys:nrUUID:deviceCompletionBlock:]", 3198);

      }
      v10 = (id)_os_log_pack_size(12);
      v11 = (char *)&v37 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      v34 = __error();
      v35 = _os_log_pack_fill(v11, v10, *v34, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)(v35 + 4) = "+[NRDLocalDevice ingestRemoteClassDKeys:nrUUID:deviceCompletionBlock:]";
      v36 = sub_100128400();
      _NRLogAbortWithPack(v36, v11);
    }
    v18 = 0;
    goto LABEL_9;
  }
  v25 = sub_100128400();
  v26 = _NRLogIsLevelEnabled(v25, 17);

  if (!v26)
    goto LABEL_13;
  v13 = sub_100128400();
  _NRLogWithArgs(v13, 17, "%s called with null remoteClassDKeys.length == sizeof(ccec25519pubkey) + sizeof(ccec25519pubkey)");
LABEL_12:

LABEL_13:
}

void sub_100139EF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  int v16;
  id v17;
  int v18;
  id v19;
  int v20;
  id v21;
  int IsLevelEnabled;
  id v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  id v28;
  _QWORD v30[4];
  char *v31;
  id v32;
  id v33;
  uint64_t v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = sub_10014CFBC();
  dispatch_assert_queue_V2(v11);

  if (objc_msgSend(v7, "length") == (id)64)
  {
    if (v8)
    {
      if (v9)
      {
        v12 = sub_1001300EC(v10, v8, 0);
        if (!v12)
        {
          v21 = sub_100128400();
          IsLevelEnabled = _NRLogIsLevelEnabled(v21, 16);

          if (IsLevelEnabled)
          {
            v23 = sub_100128400();
            _NRLogWithArgs(v23, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassCKeys:nrUUID:deviceCompletionBlock:]", 3229);

          }
          v24 = _os_log_pack_size(12);
          v25 = (char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
          v26 = __error();
          v27 = _os_log_pack_fill(v25, v24, *v26, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
          *(_DWORD *)v27 = 136446210;
          *(_QWORD *)(v27 + 4) = "+[NRDLocalDevice ingestRemoteClassCKeys:nrUUID:deviceCompletionBlock:]";
          v28 = sub_100128400();
          _NRLogAbortWithPack(v28, v25);
        }
        v13 = v12;
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_10013A1C4;
        v30[3] = &unk_1001B86C0;
        v33 = v9;
        v31 = v13;
        v32 = v7;
        v34 = v10;
        v14 = v13;
        sub_100131C98(v14, v30);

      }
      else
      {
        v19 = sub_100128400();
        v20 = _NRLogIsLevelEnabled(v19, 17);

        if (!v20)
          goto LABEL_7;
        v14 = (char *)sub_100128400();
        _NRLogWithArgs(v14, 17, "%s called with null deviceCompletionBlock");
      }
    }
    else
    {
      v17 = sub_100128400();
      v18 = _NRLogIsLevelEnabled(v17, 17);

      if (!v18)
        goto LABEL_7;
      v14 = (char *)sub_100128400();
      _NRLogWithArgs(v14, 17, "%s called with null nrUUID");
    }
  }
  else
  {
    v15 = sub_100128400();
    v16 = _NRLogIsLevelEnabled(v15, 17);

    if (!v16)
      goto LABEL_7;
    v14 = (char *)sub_100128400();
    _NRLogWithArgs(v14, 17, "%s called with null remoteClassCKeys.length == sizeof(ccec25519pubkey) + sizeof(ccec25519pubkey)");
  }

LABEL_7:
}

void sub_10013A1C4(uint64_t a1, char a2)
{
  char *v3;
  uint64_t v4;
  id *v5;
  id *v6;
  void *v7;
  id *v8;
  id **v9;
  id **v10;
  id *v11;
  char *v12;
  uint64_t v13;
  id *v14;
  id *v15;
  uint64_t v16;
  id v17;
  int IsLevelEnabled;
  id v19;
  id v20;

  if ((a2 & 1) != 0)
  {
    v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subdataWithRange:", 0, 32));
    v3 = sub_10012ADA4((char *)[NRDLDKeychainItemSecKey alloc], v20);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      v5 = (id *)*(id *)(v4 + 80);
      if (v5)
      {
        v6 = v5;
        objc_storeStrong(v5 + 1, v3);

      }
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subdataWithRange:", 32, 32));
    v8 = *(id **)(a1 + 32);
    if (v8)
    {
      v9 = (id **)v8[10];
      v10 = v9;
      if (v9)
        v8 = v9[4];
      else
        v8 = 0;
    }
    else
    {
      v10 = 0;
    }
    v11 = v8;
    v12 = sub_10012CF48((uint64_t)v11, v7);
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = (id *)*(id *)(v13 + 80);
      if (v14)
      {
        v15 = v14;
        objc_storeStrong(v14 + 3, v12);

      }
    }

    sub_100131830(*(id **)(a1 + 32), 5006, CFSTR("ClassC"));
    v16 = objc_opt_self(*(_QWORD *)(a1 + 56));
    sub_10012EDB0(v16, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
  else
  {
    v17 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v17, 17);

    if (IsLevelEnabled)
    {
      v19 = sub_100128400();
      _NRLogWithArgs(v19, 17, "Failed to ingest remote ClassC keys due to ClassC fill in failure");

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_10013A37C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  int v16;
  id v17;
  int v18;
  id v19;
  int v20;
  id v21;
  int IsLevelEnabled;
  id v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  id v28;
  _QWORD v30[4];
  char *v31;
  id v32;
  id v33;
  uint64_t v34;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = sub_10014CFBC();
  dispatch_assert_queue_V2(v11);

  if (objc_msgSend(v7, "length") == (id)64)
  {
    if (v8)
    {
      if (v9)
      {
        v12 = sub_1001300EC(v10, v8, 0);
        if (!v12)
        {
          v21 = sub_100128400();
          IsLevelEnabled = _NRLogIsLevelEnabled(v21, 16);

          if (IsLevelEnabled)
          {
            v23 = sub_100128400();
            _NRLogWithArgs(v23, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassAKeys:nrUUID:deviceCompletionBlock:]", 3265);

          }
          v24 = _os_log_pack_size(12);
          v25 = (char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
          v26 = __error();
          v27 = _os_log_pack_fill(v25, v24, *v26, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
          *(_DWORD *)v27 = 136446210;
          *(_QWORD *)(v27 + 4) = "+[NRDLocalDevice ingestRemoteClassAKeys:nrUUID:deviceCompletionBlock:]";
          v28 = sub_100128400();
          _NRLogAbortWithPack(v28, v25);
        }
        v13 = v12;
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_10013A648;
        v30[3] = &unk_1001B86C0;
        v33 = v9;
        v31 = v13;
        v32 = v7;
        v34 = v10;
        v14 = v13;
        sub_100132020((uint64_t)v14, v30);

      }
      else
      {
        v19 = sub_100128400();
        v20 = _NRLogIsLevelEnabled(v19, 17);

        if (!v20)
          goto LABEL_7;
        v14 = (char *)sub_100128400();
        _NRLogWithArgs(v14, 17, "%s called with null deviceCompletionBlock");
      }
    }
    else
    {
      v17 = sub_100128400();
      v18 = _NRLogIsLevelEnabled(v17, 17);

      if (!v18)
        goto LABEL_7;
      v14 = (char *)sub_100128400();
      _NRLogWithArgs(v14, 17, "%s called with null nrUUID");
    }
  }
  else
  {
    v15 = sub_100128400();
    v16 = _NRLogIsLevelEnabled(v15, 17);

    if (!v16)
      goto LABEL_7;
    v14 = (char *)sub_100128400();
    _NRLogWithArgs(v14, 17, "%s called with null remoteClassAKeys.length == sizeof(ccec25519pubkey) + sizeof(ccec25519pubkey)");
  }

LABEL_7:
}

void sub_10013A648(uint64_t a1, char a2)
{
  char *v3;
  uint64_t v4;
  id *v5;
  id *v6;
  void *v7;
  id *v8;
  id **v9;
  id **v10;
  id *v11;
  char *v12;
  uint64_t v13;
  id *v14;
  id *v15;
  uint64_t v16;
  id v17;
  int IsLevelEnabled;
  id v19;
  id v20;

  if ((a2 & 1) != 0)
  {
    v20 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subdataWithRange:", 0, 32));
    v3 = sub_10012ADA4((char *)[NRDLDKeychainItemSecKey alloc], v20);
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      v5 = (id *)*(id *)(v4 + 88);
      if (v5)
      {
        v6 = v5;
        objc_storeStrong(v5 + 1, v3);

      }
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subdataWithRange:", 32, 32));
    v8 = *(id **)(a1 + 32);
    if (v8)
    {
      v9 = (id **)v8[11];
      v10 = v9;
      if (v9)
        v8 = v9[4];
      else
        v8 = 0;
    }
    else
    {
      v10 = 0;
    }
    v11 = v8;
    v12 = sub_10012CF48((uint64_t)v11, v7);
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = (id *)*(id *)(v13 + 88);
      if (v14)
      {
        v15 = v14;
        objc_storeStrong(v14 + 3, v12);

      }
    }

    sub_100131830(*(id **)(a1 + 32), 5006, CFSTR("ClassA"));
    v16 = objc_opt_self(*(_QWORD *)(a1 + 56));
    sub_10012EDB0(v16, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
  else
  {
    v17 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v17, 17);

    if (IsLevelEnabled)
    {
      v19 = sub_100128400();
      _NRLogWithArgs(v19, 17, "Failed to ingest remote ClassA keys due to ClassA fill in failure");

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_10013A800(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  id v8;
  char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  char *v14;
  id v15;
  dispatch_queue_t *v16;
  id v17;
  id v18;
  _QWORD *v19;
  id v20;
  id v21;
  int IsLevelEnabled;
  id v23;
  id v24;
  int v25;
  id v26;
  int v27;
  id v28;
  int v29;
  id v30;
  int *v31;
  uint64_t v32;
  id v33;
  int v34;
  id v35;
  int *v36;
  uint64_t v37;
  id v38;
  _QWORD v39[4];
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[5];
  id v44;
  id v45;
  _QWORD *v46;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = objc_opt_self(a1);
  v12 = sub_10014CFBC();
  dispatch_assert_queue_V2(v12);

  if (!v8)
  {
    v21 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v21, 17);

    if (!IsLevelEnabled)
      goto LABEL_10;
    v23 = sub_100128400();
    _NRLogWithArgs(v23, 17, "%s called with null remoteClassDKeysEncryptedWithIDS");
LABEL_17:

    goto LABEL_10;
  }
  if (!v9)
  {
    v24 = sub_100128400();
    v25 = _NRLogIsLevelEnabled(v24, 17);

    if (!v25)
      goto LABEL_10;
    v23 = sub_100128400();
    _NRLogWithArgs(v23, 17, "%s called with null nrUUID");
    goto LABEL_17;
  }
  if (!v10)
  {
    v26 = sub_100128400();
    v27 = _NRLogIsLevelEnabled(v26, 17);

    if (!v27)
      goto LABEL_10;
    v23 = sub_100128400();
    _NRLogWithArgs(v23, 17, "%s called with null deviceCompletionBlock");
    goto LABEL_17;
  }
  v13 = sub_1001300EC(v11, v9, 0);
  if (!v13)
  {
    v28 = sub_100128400();
    v29 = _NRLogIsLevelEnabled(v28, 16);

    if (v29)
    {
      v30 = sub_100128400();
      _NRLogWithArgs(v30, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]", 3301);

    }
    v8 = (id)_os_log_pack_size(12);
    v9 = (char *)v39 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = __error();
    v32 = _os_log_pack_fill(v9, v8, *v31, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v32 = 136446210;
    *(_QWORD *)(v32 + 4) = "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    goto LABEL_24;
  }
  v14 = v13;
  v15 = *((id *)v13 + 5);
  if (!v15)
  {
    v33 = sub_100128400();
    v34 = _NRLogIsLevelEnabled(v33, 16);

    v10 = "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    if (v34)
    {
      v35 = sub_100128400();
      _NRLogWithArgs(v35, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (bluetoothUUID) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]", 3303);

    }
    v8 = (id)_os_log_pack_size(12);
    v9 = (char *)v39 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = __error();
    v37 = _os_log_pack_fill(v9, v8, *v36, &_mh_execute_header, "%{public}s Assertion Failed: (bluetoothUUID) != ((void *)0)");
    *(_DWORD *)v37 = 136446210;
    *(_QWORD *)(v37 + 4) = "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
LABEL_24:
    v38 = sub_100128400();
    _NRLogAbortWithPack(v38, v9);
    goto LABEL_25;
  }
  v4 = v15;
  sub_1001316A8((uint64_t)v14);

  objc_opt_self(NRDIDSKeyManager);
  if (qword_1001E47A8 != -1)
LABEL_25:
    dispatch_once(&qword_1001E47A8, &stru_1001B7648);
  v16 = (dispatch_queue_t *)(id)qword_1001E47A0;
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10013AC8C;
  v39[3] = &unk_1001B86E8;
  v42 = v11;
  v40 = v9;
  v41 = v10;
  v17 = v8;
  v18 = v4;
  v19 = v39;
  if (v16)
  {
    dispatch_assert_queue_V2(v16[2]);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_1000F2E1C;
    v43[3] = &unk_1001B7710;
    v43[4] = v16;
    v44 = v17;
    v20 = v18;
    v45 = v20;
    v46 = v19;
    sub_1000F234C((uint64_t)v16, v20, 4, v43);

  }
LABEL_10:

}

void sub_10013AC8C(uint64_t a1, void *a2)
{
  sub_100139B60(*(_QWORD *)(a1 + 48), a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_10013AC9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  char *v17;
  id v18;
  int IsLevelEnabled;
  id v20;
  id v21;
  int v22;
  id v23;
  int v24;
  id v25;
  int v26;
  id v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  id v32;
  int v33;
  id v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  id v38;
  _QWORD v40[4];
  char *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = sub_10014CFBC();
  dispatch_assert_queue_V2(v11);

  if (!v7)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 17);

    if (!IsLevelEnabled)
      goto LABEL_7;
    v20 = sub_100128400();
    _NRLogWithArgs(v20, 17, "%s called with null remoteClassCKeysEncryptedWithIDS");
LABEL_14:

    goto LABEL_7;
  }
  if (!v8)
  {
    v21 = sub_100128400();
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (!v22)
      goto LABEL_7;
    v20 = sub_100128400();
    _NRLogWithArgs(v20, 17, "%s called with null nrUUID");
    goto LABEL_14;
  }
  if (!v9)
  {
    v23 = sub_100128400();
    v24 = _NRLogIsLevelEnabled(v23, 17);

    if (!v24)
      goto LABEL_7;
    v20 = sub_100128400();
    _NRLogWithArgs(v20, 17, "%s called with null deviceCompletionBlock");
    goto LABEL_14;
  }
  v12 = sub_1001300EC(v10, v8, 0);
  if (!v12)
  {
    v25 = sub_100128400();
    v26 = _NRLogIsLevelEnabled(v25, 16);

    if (v26)
    {
      v27 = sub_100128400();
      _NRLogWithArgs(v27, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassCKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]", 3328);

    }
    v28 = _os_log_pack_size(12);
    v29 = (char *)&v40[-1] - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = __error();
    v31 = _os_log_pack_fill(v29, v28, *v30, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v31 = 136446210;
    *(_QWORD *)(v31 + 4) = "+[NRDLocalDevice ingestRemoteClassCKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
LABEL_21:
    v38 = sub_100128400();
    _NRLogAbortWithPack(v38, v29);
  }
  v13 = v12;
  v14 = *((id *)v12 + 5);
  if (!v14)
  {
    v32 = sub_100128400();
    v33 = _NRLogIsLevelEnabled(v32, 16);

    if (v33)
    {
      v34 = sub_100128400();
      _NRLogWithArgs(v34, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (bluetoothUUID) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassCKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]", 3330);

    }
    v35 = _os_log_pack_size(12);
    v29 = (char *)&v40[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = __error();
    v37 = _os_log_pack_fill(v29, v35, *v36, &_mh_execute_header, "%{public}s Assertion Failed: (bluetoothUUID) != ((void *)0)");
    *(_DWORD *)v37 = 136446210;
    *(_QWORD *)(v37 + 4) = "+[NRDLocalDevice ingestRemoteClassCKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    goto LABEL_21;
  }
  v15 = v14;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10013B048;
  v40[3] = &unk_1001B8710;
  v45 = v9;
  v41 = v13;
  v42 = v7;
  v43 = v15;
  v46 = v10;
  v44 = v8;
  v16 = v15;
  v17 = v13;
  sub_100131C98(v17, v40);

LABEL_7:
}

void sub_10013B048(uint64_t a1, char a2)
{
  dispatch_queue_t *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD *v8;
  id v9;
  id v10;
  int v11;
  id v12;
  id v13;
  int v14;
  id v15;
  id v16;
  int IsLevelEnabled;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;
  id v24;
  _QWORD *v25;

  if ((a2 & 1) != 0)
  {
    objc_opt_self(NRDIDSKeyManager);
    if (qword_1001E47A8 != -1)
      dispatch_once(&qword_1001E47A8, &stru_1001B7648);
    v3 = (dispatch_queue_t *)(id)qword_1001E47A0;
    v4 = *(void **)(a1 + 40);
    v5 = *(void **)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10013B2D4;
    v18[3] = &unk_1001B86E8;
    v21 = *(_QWORD *)(a1 + 72);
    v19 = *(id *)(a1 + 56);
    v20 = *(id *)(a1 + 64);
    v6 = v4;
    v7 = v5;
    v8 = v18;
    if (!v3)
      goto LABEL_8;
    dispatch_assert_queue_V2(v3[2]);
    if (v6)
    {
      if (v7)
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_1000F301C;
        v22[3] = &unk_1001B7710;
        v22[4] = v3;
        v23 = v6;
        v9 = v7;
        v24 = v9;
        v25 = v8;
        sub_1000F234C((uint64_t)v3, v9, 3, v22);

LABEL_8:
        return;
      }
      v16 = sub_1000F0418();
      IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

      if (!IsLevelEnabled)
        goto LABEL_8;
      v15 = sub_1000F0418();
      _NRLogWithArgs(v15, 17, "%s called with null bluetoothUUID");
    }
    else
    {
      v13 = sub_1000F0418();
      v14 = _NRLogIsLevelEnabled(v13, 17);

      if (!v14)
        goto LABEL_8;
      v15 = sub_1000F0418();
      _NRLogWithArgs(v15, 17, "%s called with null remoteClassCKeysEncryptedWithIDS");
    }

    goto LABEL_8;
  }
  v10 = sub_100128400();
  v11 = _NRLogIsLevelEnabled(v10, 16);

  if (v11)
  {
    v12 = sub_100128400();
    _NRLogWithArgs(v12, 16, "%s%.30s:%-4d Failed to ingest remote ClassC keys encrypted with IDS due to ClassC fill in failure", "", "+[NRDLocalDevice ingestRemoteClassCKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]_block_invoke", 3334);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_10013B2D4(uint64_t a1, void *a2)
{
  sub_100139EF8(*(_QWORD *)(a1 + 48), a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_10013B2E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  char *v17;
  id v18;
  int IsLevelEnabled;
  id v20;
  id v21;
  int v22;
  id v23;
  int v24;
  id v25;
  int v26;
  id v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  id v32;
  int v33;
  id v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  id v38;
  _QWORD v40[4];
  char *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = sub_10014CFBC();
  dispatch_assert_queue_V2(v11);

  if (!v7)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 17);

    if (!IsLevelEnabled)
      goto LABEL_7;
    v20 = sub_100128400();
    _NRLogWithArgs(v20, 17, "%s called with null remoteClassAKeysEncryptedWithIDS");
LABEL_14:

    goto LABEL_7;
  }
  if (!v8)
  {
    v21 = sub_100128400();
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (!v22)
      goto LABEL_7;
    v20 = sub_100128400();
    _NRLogWithArgs(v20, 17, "%s called with null nrUUID");
    goto LABEL_14;
  }
  if (!v9)
  {
    v23 = sub_100128400();
    v24 = _NRLogIsLevelEnabled(v23, 17);

    if (!v24)
      goto LABEL_7;
    v20 = sub_100128400();
    _NRLogWithArgs(v20, 17, "%s called with null deviceCompletionBlock");
    goto LABEL_14;
  }
  v12 = sub_1001300EC(v10, v8, 0);
  if (!v12)
  {
    v25 = sub_100128400();
    v26 = _NRLogIsLevelEnabled(v25, 16);

    if (v26)
    {
      v27 = sub_100128400();
      _NRLogWithArgs(v27, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassAKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]", 3360);

    }
    v28 = _os_log_pack_size(12);
    v29 = (char *)&v40[-1] - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = __error();
    v31 = _os_log_pack_fill(v29, v28, *v30, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v31 = 136446210;
    *(_QWORD *)(v31 + 4) = "+[NRDLocalDevice ingestRemoteClassAKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
LABEL_21:
    v38 = sub_100128400();
    _NRLogAbortWithPack(v38, v29);
  }
  v13 = v12;
  v14 = *((id *)v12 + 5);
  if (!v14)
  {
    v32 = sub_100128400();
    v33 = _NRLogIsLevelEnabled(v32, 16);

    if (v33)
    {
      v34 = sub_100128400();
      _NRLogWithArgs(v34, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (bluetoothUUID) != ((void *)0)", "", "+[NRDLocalDevice ingestRemoteClassAKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]", 3362);

    }
    v35 = _os_log_pack_size(12);
    v29 = (char *)&v40[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = __error();
    v37 = _os_log_pack_fill(v29, v35, *v36, &_mh_execute_header, "%{public}s Assertion Failed: (bluetoothUUID) != ((void *)0)");
    *(_DWORD *)v37 = 136446210;
    *(_QWORD *)(v37 + 4) = "+[NRDLocalDevice ingestRemoteClassAKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    goto LABEL_21;
  }
  v15 = v14;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10013B690;
  v40[3] = &unk_1001B8710;
  v45 = v9;
  v41 = v13;
  v42 = v7;
  v43 = v15;
  v46 = v10;
  v44 = v8;
  v16 = v15;
  v17 = v13;
  sub_100132020((uint64_t)v17, v40);

LABEL_7:
}

void sub_10013B690(uint64_t a1, char a2)
{
  dispatch_queue_t *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD *v8;
  id v9;
  id v10;
  int v11;
  id v12;
  id v13;
  int v14;
  id v15;
  id v16;
  int IsLevelEnabled;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;
  id v24;
  _QWORD *v25;

  if ((a2 & 1) != 0)
  {
    objc_opt_self(NRDIDSKeyManager);
    if (qword_1001E47A8 != -1)
      dispatch_once(&qword_1001E47A8, &stru_1001B7648);
    v3 = (dispatch_queue_t *)(id)qword_1001E47A0;
    v4 = *(void **)(a1 + 40);
    v5 = *(void **)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10013B91C;
    v18[3] = &unk_1001B86E8;
    v21 = *(_QWORD *)(a1 + 72);
    v19 = *(id *)(a1 + 56);
    v20 = *(id *)(a1 + 64);
    v6 = v4;
    v7 = v5;
    v8 = v18;
    if (!v3)
      goto LABEL_8;
    dispatch_assert_queue_V2(v3[2]);
    if (v6)
    {
      if (v7)
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_1000F321C;
        v22[3] = &unk_1001B7710;
        v22[4] = v3;
        v23 = v6;
        v9 = v7;
        v24 = v9;
        v25 = v8;
        sub_1000F234C((uint64_t)v3, v9, 1, v22);

LABEL_8:
        return;
      }
      v16 = sub_1000F0418();
      IsLevelEnabled = _NRLogIsLevelEnabled(v16, 17);

      if (!IsLevelEnabled)
        goto LABEL_8;
      v15 = sub_1000F0418();
      _NRLogWithArgs(v15, 17, "%s called with null bluetoothUUID");
    }
    else
    {
      v13 = sub_1000F0418();
      v14 = _NRLogIsLevelEnabled(v13, 17);

      if (!v14)
        goto LABEL_8;
      v15 = sub_1000F0418();
      _NRLogWithArgs(v15, 17, "%s called with null remoteClassAKeysEncryptedWithIDS");
    }

    goto LABEL_8;
  }
  v10 = sub_100128400();
  v11 = _NRLogIsLevelEnabled(v10, 16);

  if (v11)
  {
    v12 = sub_100128400();
    _NRLogWithArgs(v12, 16, "%s%.30s:%-4d Failed to ingest remote ClassA keys encrypted with IDS due to ClassA fill in failure", "", "+[NRDLocalDevice ingestRemoteClassAKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]_block_invoke", 3366);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_10013B91C(uint64_t a1, void *a2)
{
  sub_10013A37C(*(_QWORD *)(a1 + 48), a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_10013B92C(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(id, char *);
  uint64_t v6;
  NSObject *v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void (**v14)(id, char *);
  id v15;
  int v16;
  id v17;
  int v18;
  id v19;
  int IsLevelEnabled;
  id v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  id v26;
  id v27;

  v27 = a2;
  v5 = a3;
  v6 = objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (v27)
  {
    if (v5)
    {
      v8 = sub_1001300EC(v6, v27, 0);
      if (!v8)
      {
        v19 = sub_100128400();
        IsLevelEnabled = _NRLogIsLevelEnabled(v19, 16);

        if (IsLevelEnabled)
        {
          v21 = sub_100128400();
          _NRLogWithArgs(v21, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice queryIDSDeviceIDForNRUUID:completionBlock:]", 3390);

        }
        v22 = _os_log_pack_size(12);
        v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        v24 = __error();
        v25 = _os_log_pack_fill(v23, v22, *v24, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
        *(_DWORD *)v25 = 136446210;
        *(_QWORD *)(v25 + 4) = "+[NRDLocalDevice queryIDSDeviceIDForNRUUID:completionBlock:]";
        v26 = sub_100128400();
        _NRLogAbortWithPack(v26, v23);
      }
      v9 = v8;
      if (*((_QWORD *)v8 + 6))
      {
        v5[2](v5, v8);
      }
      else
      {
        v10 = (void *)qword_1001E4A88;
        if (!qword_1001E4A88)
        {
          v11 = objc_alloc_init((Class)NSMutableDictionary);
          v12 = (void *)qword_1001E4A88;
          qword_1001E4A88 = (uint64_t)v11;

          v10 = (void *)qword_1001E4A88;
        }
        v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v27, v27));
        if (!v13)
          v13 = objc_alloc_init((Class)NSMutableArray);
        v14 = objc_retainBlock(v5);
        objc_msgSend(v13, "addObject:", v14);

        objc_msgSend((id)qword_1001E4A88, "setObject:forKeyedSubscript:", v13, v27);
      }
    }
    else
    {
      v17 = sub_100128400();
      v18 = _NRLogIsLevelEnabled(v17, 17);

      if (!v18)
        goto LABEL_12;
      v9 = sub_100128400();
      _NRLogWithArgs(v9, 17, "%s called with null block");
    }
  }
  else
  {
    v15 = sub_100128400();
    v16 = _NRLogIsLevelEnabled(v15, 17);

    if (!v16)
      goto LABEL_12;
    v9 = sub_100128400();
    _NRLogWithArgs(v9, 17, "%s called with null nrUUID");
  }

LABEL_12:
}

void sub_10013BBC0(uint64_t a1, char *a2, void *a3)
{
  const char *v5;
  NSObject *v6;
  char *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;

  v18 = a3;
  v5 = (const char *)objc_opt_self(a1);
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  if (v18)
  {
    v7 = sub_10012FFF4((uint64_t)v5, v18);
    if (v7)
    {
      v8 = v7;
      if (*((unsigned __int16 *)v7 + 14) == (_DWORD)a2)
        goto LABEL_4;
    }
    else
    {
      v11 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

      v5 = "+[NRDLocalDevice updateLastSeenInnerLinkVersionHBO:nrUUID:]";
      if (IsLevelEnabled)
      {
        v13 = sub_100128400();
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLastSeenInnerLinkVersionHBO:nrUUID:]", 3412);

      }
      v8 = (id)_os_log_pack_size(12);
      a2 = (char *)&v18 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(a2, v8, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "+[NRDLocalDevice updateLastSeenInnerLinkVersionHBO:nrUUID:]";
      v16 = sub_100128400();
      _NRLogAbortWithPack(v16, a2);
    }
    objc_msgSend(v8, "setLastSeenInnerLinkVersionHBO:", a2, v18);
    v17 = objc_opt_self(v5);
    sub_10012EDB0(v17, 0);
    goto LABEL_4;
  }
  v9 = sub_100128400();
  v10 = _NRLogIsLevelEnabled(v9, 17);

  if (!v10)
    goto LABEL_5;
  v8 = sub_100128400();
  _NRLogWithArgs(v8, 17, "%s called with null nrUUID", "+[NRDLocalDevice updateLastSeenInnerLinkVersionHBO:nrUUID:]");
LABEL_4:

LABEL_5:
}

void sub_10013BD90(uint64_t a1, char *a2, void *a3)
{
  const char *v5;
  NSObject *v6;
  char *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;

  v18 = a3;
  v5 = (const char *)objc_opt_self(a1);
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  if (v18)
  {
    v7 = sub_10012FFF4((uint64_t)v5, v18);
    if (v7)
    {
      v8 = v7;
      if (v7[18] == (_DWORD)a2)
        goto LABEL_4;
    }
    else
    {
      v11 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

      v5 = "+[NRDLocalDevice updateDeviceEndpointType:nrUUID:]";
      if (IsLevelEnabled)
      {
        v13 = sub_100128400();
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateDeviceEndpointType:nrUUID:]", 3425);

      }
      v8 = (id)_os_log_pack_size(12);
      a2 = (char *)&v18 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(a2, v8, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "+[NRDLocalDevice updateDeviceEndpointType:nrUUID:]";
      v16 = sub_100128400();
      _NRLogAbortWithPack(v16, a2);
    }
    objc_msgSend(v8, "setDeviceType:", a2, v18);
    v17 = objc_opt_self(v5);
    sub_10012EDB0(v17, 0);
    goto LABEL_4;
  }
  v9 = sub_100128400();
  v10 = _NRLogIsLevelEnabled(v9, 17);

  if (!v10)
    goto LABEL_5;
  v8 = sub_100128400();
  _NRLogWithArgs(v8, 17, "%s called with null nrUUID", "+[NRDLocalDevice updateDeviceEndpointType:nrUUID:]");
LABEL_4:

LABEL_5:
}

void sub_10013BF60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  NSObject *v7;
  char *v8;
  char *v9;
  id v10;
  int v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  int v15;
  id v16;
  int *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = (const char *)objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (v22)
  {
    if (!v5)
    {
      v12 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

      if (!IsLevelEnabled)
        goto LABEL_6;
      v9 = (char *)sub_100128400();
      _NRLogWithArgs(v9, 17, "%s called with null nrUUID");
      goto LABEL_5;
    }
    v8 = sub_10012FFF4((uint64_t)v6, v5);
    if (v8)
    {
      v9 = v8;
      if ((objc_msgSend(v22, "isEqual:", *((_QWORD *)v8 + 14)) & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      v14 = sub_100128400();
      v15 = _NRLogIsLevelEnabled(v14, 16);

      v6 = "+[NRDLocalDevice updateLastSeenName:nrUUID:]";
      if (v15)
      {
        v16 = sub_100128400();
        _NRLogWithArgs(v16, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLastSeenName:nrUUID:]", 3439);

      }
      v5 = (id)_os_log_pack_size(12);
      v9 = (char *)&v22 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      v17 = __error();
      v18 = _os_log_pack_fill(v9, v5, *v17, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v18 + 4) = "+[NRDLocalDevice updateLastSeenName:nrUUID:]";
      v19 = sub_100128400();
      _NRLogAbortWithPack(v19, v9);
    }
    v20 = objc_msgSend(v22, "copy", v22);
    objc_msgSend(v9, "setLastSeenName:", v20);

    v21 = objc_opt_self(v6);
    sub_10012EDB0(v21, 0);
    goto LABEL_5;
  }
  v10 = sub_100128400();
  v11 = _NRLogIsLevelEnabled(v10, 17);

  if (!v11)
    goto LABEL_6;
  v9 = (char *)sub_100128400();
  _NRLogWithArgs(v9, 17, "%s called with null name");
LABEL_5:

LABEL_6:
}

void sub_10013C194(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  NSObject *v7;
  char *v8;
  char *v9;
  id v10;
  int v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  int v15;
  id v16;
  int *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;

  v22 = a2;
  v5 = a3;
  v6 = (const char *)objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (v22)
  {
    if (!v5)
    {
      v12 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

      if (!IsLevelEnabled)
        goto LABEL_6;
      v9 = (char *)sub_100128400();
      _NRLogWithArgs(v9, 17, "%s called with null nrUUID");
      goto LABEL_5;
    }
    v8 = sub_10012FFF4((uint64_t)v6, v5);
    if (v8)
    {
      v9 = v8;
      if ((objc_msgSend(v22, "isEqual:", *((_QWORD *)v8 + 15)) & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      v14 = sub_100128400();
      v15 = _NRLogIsLevelEnabled(v14, 16);

      v6 = "+[NRDLocalDevice updateLastSeenBuildVersion:nrUUID:]";
      if (v15)
      {
        v16 = sub_100128400();
        _NRLogWithArgs(v16, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLastSeenBuildVersion:nrUUID:]", 3453);

      }
      v5 = (id)_os_log_pack_size(12);
      v9 = (char *)&v22 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      v17 = __error();
      v18 = _os_log_pack_fill(v9, v5, *v17, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v18 + 4) = "+[NRDLocalDevice updateLastSeenBuildVersion:nrUUID:]";
      v19 = sub_100128400();
      _NRLogAbortWithPack(v19, v9);
    }
    v20 = objc_msgSend(v22, "copy", v22);
    objc_msgSend(v9, "setLastSeenBuildVersion:", v20);

    v21 = objc_opt_self(v6);
    sub_10012EDB0(v21, 0);
    goto LABEL_5;
  }
  v10 = sub_100128400();
  v11 = _NRLogIsLevelEnabled(v10, 17);

  if (!v11)
    goto LABEL_6;
  v9 = (char *)sub_100128400();
  _NRLogWithArgs(v9, 17, "%s called with null buildVersion");
LABEL_5:

LABEL_6:
}

void sub_10013C3C8(uint64_t a1, char *a2, void *a3)
{
  const char *v5;
  NSObject *v6;
  char *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;

  v18 = a3;
  v5 = (const char *)objc_opt_self(a1);
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  if (v18)
  {
    v7 = sub_10012FFF4((uint64_t)v5, v18);
    if (v7)
    {
      v8 = v7;
      if ((v7[17] != 0) == (_DWORD)a2)
        goto LABEL_4;
    }
    else
    {
      v11 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

      v5 = "+[NRDLocalDevice updateLastSeenAlwaysOnWiFiSupported:nrUUID:]";
      if (IsLevelEnabled)
      {
        v13 = sub_100128400();
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLastSeenAlwaysOnWiFiSupported:nrUUID:]", 3466);

      }
      v8 = (id)_os_log_pack_size(12);
      a2 = (char *)&v18 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(a2, v8, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "+[NRDLocalDevice updateLastSeenAlwaysOnWiFiSupported:nrUUID:]";
      v16 = sub_100128400();
      _NRLogAbortWithPack(v16, a2);
    }
    objc_msgSend(v8, "setLastSeenAlwaysOnWiFiSupported:", a2, v18);
    v17 = objc_opt_self(v5);
    sub_10012EDB0(v17, 0);
    goto LABEL_4;
  }
  v9 = sub_100128400();
  v10 = _NRLogIsLevelEnabled(v9, 17);

  if (!v10)
    goto LABEL_5;
  v8 = sub_100128400();
  _NRLogWithArgs(v8, 17, "%s called with null nrUUID", "+[NRDLocalDevice updateLastSeenAlwaysOnWiFiSupported:nrUUID:]");
LABEL_4:

LABEL_5:
}

void sub_10013C5A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  id *v9;
  id v10;
  int v11;
  id v12;
  int IsLevelEnabled;
  id v14;
  int v15;
  id v16;
  int *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  int v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;

  v27 = a2;
  v5 = a3;
  v6 = objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (v27)
  {
    if (!v5)
    {
      v12 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v12, 17);

      if (!IsLevelEnabled)
        goto LABEL_6;
      v9 = (id *)sub_100128400();
      _NRLogWithArgs(v9, 17, "%s called with null nrUUID");
      goto LABEL_5;
    }
    v8 = sub_10012FFF4(v6, v5);
    if (v8)
    {
      v9 = (id *)v8;
      if ((objc_msgSend(v27, "isEqual:", *((_QWORD *)v8 + 12)) & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      v14 = sub_100128400();
      v15 = _NRLogIsLevelEnabled(v14, 16);

      if (v15)
      {
        v16 = sub_100128400();
        _NRLogWithArgs(v16, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateReceivedProxyNotifyPayload:nrUUID:]", 3480);

      }
      v5 = (id)_os_log_pack_size(12);
      v9 = (id *)((char *)&v27 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      v17 = __error();
      v18 = _os_log_pack_fill(v9, v5, *v17, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v18 + 4) = "+[NRDLocalDevice updateReceivedProxyNotifyPayload:nrUUID:]";
      v19 = sub_100128400();
      _NRLogAbortWithPack(v19, v9);
    }
    v20 = objc_msgSend(v27, "copy", v27);
    objc_msgSend(v9, "setReceivedProxyNotifyPayload:", v20);

    if (objc_msgSend(v9[16], "proxyCapability") == (id)2)
    {
      v21 = sub_100111C60(v27);
      objc_msgSend(v9[16], "setProxyProviderCriteria:", v21);

      if (objc_msgSend(v9[16], "hasPoliciesForProxyCriteria"))
      {
        v22 = sub_100128400();
        v23 = _NRLogIsLevelEnabled(v22, 0);

        if (v23)
        {
          v24 = sub_100128400();
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[16], "proxyProviderCriteria"));
          _NRLogWithArgs(v24, 0, "%s%.30s:%-4d received proxy criteria %@", "", "+[NRDLocalDevice updateReceivedProxyNotifyPayload:nrUUID:]", 3488, v25);

        }
      }
    }
    v26 = objc_opt_self(v6);
    sub_10012EDB0(v26, 0);
    goto LABEL_5;
  }
  v10 = sub_100128400();
  v11 = _NRLogIsLevelEnabled(v10, 17);

  if (!v11)
    goto LABEL_6;
  v9 = (id *)sub_100128400();
  _NRLogWithArgs(v9, 17, "%s called with null receivedProxyNotifyPayload");
LABEL_5:

LABEL_6:
}

void sub_10013C890(uint64_t a1, void *a2)
{
  char *v3;
  NSObject *v4;
  char *v5;
  id v6;
  id v7;
  int v8;
  id v9;
  int IsLevelEnabled;
  id v11;
  int *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;

  v16 = a2;
  v3 = (char *)objc_opt_self(a1);
  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (v16)
  {
    v5 = sub_10012FFF4((uint64_t)v3, v16);
    if (v5)
    {
      v6 = v5;
      if (v5[11])
        goto LABEL_4;
    }
    else
    {
      v9 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

      if (IsLevelEnabled)
      {
        v11 = sub_100128400();
        _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateHasAuthenticatedWithIdentityForNRUUID:]", 3512);

      }
      v6 = (id)_os_log_pack_size(12);
      v3 = (char *)&v16 - (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0);
      v12 = __error();
      v13 = _os_log_pack_fill(v3, v6, *v12, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v13 = 136446210;
      *(_QWORD *)(v13 + 4) = "+[NRDLocalDevice updateHasAuthenticatedWithIdentityForNRUUID:]";
      v14 = sub_100128400();
      _NRLogAbortWithPack(v14, v3);
    }
    objc_msgSend(v6, "setHasAuthenticatedWithIdentity:", 1, v16);
    v15 = objc_opt_self(v3);
    sub_10012EDB0(v15, 0);
    goto LABEL_4;
  }
  v7 = sub_100128400();
  v8 = _NRLogIsLevelEnabled(v7, 17);

  if (!v8)
    goto LABEL_5;
  v6 = sub_100128400();
  _NRLogWithArgs(v6, 17, "%s called with null nrUUID", "+[NRDLocalDevice updateHasAuthenticatedWithIdentityForNRUUID:]");
LABEL_4:

LABEL_5:
}

void sub_10013CA58(uint64_t a1, char *a2, void *a3)
{
  const char *v5;
  NSObject *v6;
  char *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;

  v18 = a3;
  v5 = (const char *)objc_opt_self(a1);
  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  if (v18)
  {
    v7 = sub_10012FFF4((uint64_t)v5, v18);
    if (v7)
    {
      v8 = v7;
      if (*((char **)v7 + 18) == a2)
        goto LABEL_4;
    }
    else
    {
      v11 = sub_100128400();
      IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

      v5 = "+[NRDLocalDevice updateRemoteDeviceFlags:nrUUID:]";
      if (IsLevelEnabled)
      {
        v13 = sub_100128400();
        _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteDeviceFlags:nrUUID:]", 3525);

      }
      v8 = (id)_os_log_pack_size(12);
      a2 = (char *)&v18 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      v14 = __error();
      v15 = _os_log_pack_fill(a2, v8, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
      *(_DWORD *)v15 = 136446210;
      *(_QWORD *)(v15 + 4) = "+[NRDLocalDevice updateRemoteDeviceFlags:nrUUID:]";
      v16 = sub_100128400();
      _NRLogAbortWithPack(v16, a2);
    }
    objc_msgSend(v8, "setRemoteFlags:", a2, v18);
    v17 = objc_opt_self(v5);
    sub_10012EDB0(v17, 0);
    goto LABEL_4;
  }
  v9 = sub_100128400();
  v10 = _NRLogIsLevelEnabled(v9, 17);

  if (!v10)
    goto LABEL_5;
  v8 = sub_100128400();
  _NRLogWithArgs(v8, 17, "%s called with null nrUUID", "+[NRDLocalDevice updateRemoteDeviceFlags:nrUUID:]");
LABEL_4:

LABEL_5:
}

double sub_10013CC28(_QWORD *a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  double result;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    v9 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

    if (IsLevelEnabled)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (outBytes) != ((void *)0)", "", "-[NRDLocalDevice writeLocalClassCInnerAddressBytes:]", 4015);

    }
    v12 = _os_log_pack_size(12);
    v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (outBytes) != ((void *)0)");
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v15 + 4) = "-[NRDLocalDevice writeLocalClassCInnerAddressBytes:]";
    v16 = sub_100128400();
    _NRLogAbortWithPack(v16, v13);
  }
  v18 = 0;
  v19 = 0uLL;
  v20 = 0;
  v5 = sub_10014CFBC();
  dispatch_assert_queue_V2(v5);

  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  v7 = (void *)sub_100133920(a1, CFSTR("0"));
  sub_1001340AC((uint64_t)NRDLocalDevice, &v18, v7);

  result = *(double *)&v19;
  *a2 = v19;
  return result;
}

double sub_10013CDB8(_QWORD *a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  double result;
  id v9;
  int IsLevelEnabled;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    v9 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v9, 16);

    if (IsLevelEnabled)
    {
      v11 = sub_100128400();
      _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (outBytes) != ((void *)0)", "", "-[NRDLocalDevice writeRemoteClassCInnerAddressBytes:]", 4047);

    }
    v12 = _os_log_pack_size(12);
    v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = __error();
    v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s Assertion Failed: (outBytes) != ((void *)0)");
    *(_DWORD *)v15 = 136446210;
    *(_QWORD *)(v15 + 4) = "-[NRDLocalDevice writeRemoteClassCInnerAddressBytes:]";
    v16 = sub_100128400();
    _NRLogAbortWithPack(v16, v13);
  }
  v18 = 0;
  v19 = 0uLL;
  v20 = 0;
  v5 = sub_10014CFBC();
  dispatch_assert_queue_V2(v5);

  v6 = sub_10014CFBC();
  dispatch_assert_queue_V2(v6);

  v7 = sub_100133AD8(a1, CFSTR("0"));
  sub_1001340AC((uint64_t)NRDLocalDevice, &v18, v7);

  result = *(double *)&v19;
  *a2 = v19;
  return result;
}

void sub_10013CF48(uint64_t a1, void *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  id v6;
  int IsLevelEnabled;
  id v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  id v13;
  id v14;

  v14 = a2;
  v3 = objc_opt_self(a1);
  v4 = sub_1001300EC(v3, v14, 0);
  if (!v4)
  {
    v6 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v6, 16);

    if (IsLevelEnabled)
    {
      v8 = sub_100128400();
      _NRLogWithArgs(v8, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateSelfManagedBluetoothPairing:nrUUID:]", 3683);

    }
    v9 = _os_log_pack_size(12);
    v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = __error();
    v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v12 = 136446210;
    *(_QWORD *)(v12 + 4) = "+[NRDLocalDevice updateSelfManagedBluetoothPairing:nrUUID:]";
    v13 = sub_100128400();
    _NRLogAbortWithPack(v13, v10);
  }
  v5 = v4;
  objc_msgSend(v4, "setSelfManagedBluetoothPairing:", 1);

}

void sub_10013D090(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  objc_opt_self(a1);
  v6 = (void *)qword_1001E4A68;
  if (!qword_1001E4A68)
  {
    v7 = objc_alloc_init((Class)NSMutableDictionary);
    v8 = (void *)qword_1001E4A68;
    qword_1001E4A68 = (uint64_t)v7;

    v6 = (void *)qword_1001E4A68;
  }
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, v5);

}

void *sub_10013D10C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (qword_1001E4A58)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A58, "objectForKeyedSubscript:", v5));

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A58, "objectForKeyedSubscript:", v5));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v6));

    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_10013D1BC(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = sub_1001331E8(a1, CFSTR("0"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostname"));

  return v5;
}

uint64_t sub_10013D220(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = (void *)sub_100133920(a1, CFSTR("0"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostname"));

  return v5;
}

uint64_t sub_10013D284(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = sub_100133714(a1, CFSTR("0"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostname"));

  return v5;
}

uint64_t sub_10013D2E8(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = sub_100133AD8(a1, CFSTR("0"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hostname"));

  return v5;
}

_QWORD *sub_10013D34C(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  void *v10;
  _QWORD v12[2];

  v1 = a1;
  if (a1)
  {
    v2 = sub_10014CFBC();
    dispatch_assert_queue_V2(v2);

    v3 = sub_10014CFBC();
    dispatch_assert_queue_V2(v3);

    v4 = sub_10014CFBC();
    dispatch_assert_queue_V2(v4);

    v5 = sub_100133714(v1, CFSTR("0"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "hostname"));

    v12[0] = v6;
    v7 = sub_10014CFBC();
    dispatch_assert_queue_V2(v7);

    v8 = sub_10014CFBC();
    dispatch_assert_queue_V2(v8);

    v9 = sub_100133AD8(v1, CFSTR("0"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hostname"));

    v12[1] = v10;
    v1 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 2));

  }
  return v1;
}

uint64_t sub_10013D470(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD *v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v7 = 0uLL;
  v9 = 0;
  v8 = 0;
  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = sub_10014CFBC();
  dispatch_assert_queue_V2(v4);

  v5 = sub_1001331E8(a1, CFSTR("0"));
  sub_1001340AC((uint64_t)NRDLocalDevice, &v7, v5);

  WORD4(v7) = -32514;
  *(_DWORD *)((char *)&v7 + 10) = 0;
  HIWORD(v7) = 0;
  return objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithAddress:](NWAddressEndpoint, "endpointWithAddress:", &v7));
}

uint64_t sub_10013D52C(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v3 = (void *)sub_10013D470(a1);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "hostname"));

  return v4;
}

uint64_t sub_10013D578(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[4];

  v2 = sub_10014CFBC();
  dispatch_assert_queue_V2(v2);

  v3 = sub_10014CFBC();
  dispatch_assert_queue_V2(v3);

  v4 = sub_1001331E8(a1, CFSTR("0"));
  v11[0] = v4;
  v5 = sub_10014CFBC();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)sub_100133920(a1, CFSTR("0"));
  v11[1] = v6;
  v7 = (void *)sub_10013D470(a1);
  v11[2] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("192.0.0.6"), CFSTR("0")));
  v11[3] = v8;
  v9 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 4));

  return v9;
}

uint64_t sub_10013D69C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  __objc2_prot *v4;
  id v7;
  char *v8;
  NSObject *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *IPv6AddrStringFromData;
  uint64_t v16;
  id v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  uint64_t v26;
  id v27;
  int v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v7 = a3;
  v8 = (char *)objc_opt_self(a1);
  v9 = sub_10014CFBC();
  dispatch_assert_queue_V2(v9);

  if (!a2)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

    if (IsLevelEnabled)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (addrBytes) != ((void *)0)", "", "+[NRDLocalDevice updateLocalClassDInnerAddressBytes:nrUUID:]", 4072);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v21, &_mh_execute_header, "%{public}s Assertion Failed: (addrBytes) != ((void *)0)");
    goto LABEL_21;
  }
  if (!v7)
  {
    v23 = sub_100128400();
    v24 = _NRLogIsLevelEnabled(v23, 16);

    if (v24)
    {
      v25 = sub_100128400();
      _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "+[NRDLocalDevice updateLocalClassDInnerAddressBytes:nrUUID:]", 4073);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v26, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    goto LABEL_21;
  }
  v10 = sub_1001300EC((uint64_t)v8, v7, 0);
  if (!v10)
  {
    v27 = sub_100128400();
    v28 = _NRLogIsLevelEnabled(v27, 16);

    if (v28)
    {
      v29 = sub_100128400();
      _NRLogWithArgs(v29, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLocalClassDInnerAddressBytes:nrUUID:]", 4075);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v30, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
LABEL_21:
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "+[NRDLocalDevice updateLocalClassDInnerAddressBytes:nrUUID:]";
    v31 = sub_100128400();
    _NRLogAbortWithPack(v31, v8);
LABEL_22:
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    goto LABEL_6;
  }
  v9 = v10;
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2, 16);
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject localInnerIPv6AddressBytesClassD](v9, "localInnerIPv6AddressBytesClassD"));
  LODWORD(a2) = objc_msgSend(v3, "isEqual:", v11);

  if ((a2 & 1) != 0)
    goto LABEL_11;
  v4 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4A98 != -1)
    goto LABEL_22;
LABEL_6:
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (v4[37].opt_class_meths != (__objc2_meth_list *)-1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    v12 = (id)qword_1001E4A90;
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject localInnerIPv6AddressBytesClassD](v9, "localInnerIPv6AddressBytesClassD"));
    v14 = (void *)((uint64_t (*)(void))createIPv6AddrStringFromData)();
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData(v3);
    _NRLogWithArgs(v12, 0, "%s%.30s:%-4d Updating local classD inner address from %@ to %@ for %@", "", "+[NRDLocalDevice updateLocalClassDInnerAddressBytes:nrUUID:]", 4083, v14, IPv6AddrStringFromData, v9);

  }
  -[NSObject setLocalInnerIPv6AddressBytesClassD:](v9, "setLocalInnerIPv6AddressBytesClassD:", v3);
  v16 = objc_opt_self(v8);
  sub_10012EDB0(v16, 0);
LABEL_11:

  return a2 ^ 1;
}

uint64_t sub_10013DAC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  __objc2_prot *v4;
  id v7;
  char *v8;
  NSObject *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  void *IPv6AddrStringFromData;
  void *v15;
  uint64_t v16;
  id v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  uint64_t v26;
  id v27;
  int v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v7 = a3;
  v8 = (char *)objc_opt_self(a1);
  v9 = sub_10014CFBC();
  dispatch_assert_queue_V2(v9);

  if (!a2)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

    if (IsLevelEnabled)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (addrBytes) != ((void *)0)", "", "+[NRDLocalDevice updateLocalClassCInnerAddressBytes:nrUUID:]", 4092);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v21, &_mh_execute_header, "%{public}s Assertion Failed: (addrBytes) != ((void *)0)");
    goto LABEL_21;
  }
  if (!v7)
  {
    v23 = sub_100128400();
    v24 = _NRLogIsLevelEnabled(v23, 16);

    if (v24)
    {
      v25 = sub_100128400();
      _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "+[NRDLocalDevice updateLocalClassCInnerAddressBytes:nrUUID:]", 4093);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v26, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    goto LABEL_21;
  }
  v10 = sub_1001300EC((uint64_t)v8, v7, 0);
  if (!v10)
  {
    v27 = sub_100128400();
    v28 = _NRLogIsLevelEnabled(v27, 16);

    if (v28)
    {
      v29 = sub_100128400();
      _NRLogWithArgs(v29, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateLocalClassCInnerAddressBytes:nrUUID:]", 4095);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v30, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
LABEL_21:
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "+[NRDLocalDevice updateLocalClassCInnerAddressBytes:nrUUID:]";
    v31 = sub_100128400();
    _NRLogAbortWithPack(v31, v8);
LABEL_22:
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    goto LABEL_6;
  }
  v9 = v10;
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2, 16);
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject localInnerIPv6AddressBytesClassC](v9, "localInnerIPv6AddressBytesClassC"));
  LODWORD(a2) = objc_msgSend(v3, "isEqual:", v11);

  if ((a2 & 1) != 0)
    goto LABEL_11;
  v4 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4A98 != -1)
    goto LABEL_22;
LABEL_6:
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (v4[37].opt_class_meths != (__objc2_meth_list *)-1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    v12 = (id)qword_1001E4A90;
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject localInnerIPv6AddressBytesClassC](v9, "localInnerIPv6AddressBytesClassC"));
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData(v13);
    v15 = (void *)createIPv6AddrStringFromData(v3);
    _NRLogWithArgs(v12, 0, "%s%.30s:%-4d Updating local classC inner address from %@ to %@ for %@", "", "+[NRDLocalDevice updateLocalClassCInnerAddressBytes:nrUUID:]", 4103, IPv6AddrStringFromData, v15, v9);

  }
  -[NSObject setLocalInnerIPv6AddressBytesClassC:](v9, "setLocalInnerIPv6AddressBytesClassC:", v3);
  v16 = objc_opt_self(v8);
  sub_10012EDB0(v16, 0);
LABEL_11:

  return a2 ^ 1;
}

uint64_t sub_10013DEEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  __objc2_prot *v4;
  id v7;
  char *v8;
  NSObject *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  void *IPv6AddrStringFromData;
  void *v15;
  uint64_t v16;
  id v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  uint64_t v26;
  id v27;
  int v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v7 = a3;
  v8 = (char *)objc_opt_self(a1);
  v9 = sub_10014CFBC();
  dispatch_assert_queue_V2(v9);

  if (!a2)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

    if (IsLevelEnabled)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (addrBytes) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteClassDInnerAddressBytes:nrUUID:]", 4112);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v21, &_mh_execute_header, "%{public}s Assertion Failed: (addrBytes) != ((void *)0)");
    goto LABEL_21;
  }
  if (!v7)
  {
    v23 = sub_100128400();
    v24 = _NRLogIsLevelEnabled(v23, 16);

    if (v24)
    {
      v25 = sub_100128400();
      _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteClassDInnerAddressBytes:nrUUID:]", 4113);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v26, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    goto LABEL_21;
  }
  v10 = sub_1001300EC((uint64_t)v8, v7, 0);
  if (!v10)
  {
    v27 = sub_100128400();
    v28 = _NRLogIsLevelEnabled(v27, 16);

    if (v28)
    {
      v29 = sub_100128400();
      _NRLogWithArgs(v29, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteClassDInnerAddressBytes:nrUUID:]", 4115);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v30, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
LABEL_21:
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "+[NRDLocalDevice updateRemoteClassDInnerAddressBytes:nrUUID:]";
    v31 = sub_100128400();
    _NRLogAbortWithPack(v31, v8);
LABEL_22:
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    goto LABEL_6;
  }
  v9 = v10;
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2, 16);
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject remoteInnerIPv6AddressBytesClassD](v9, "remoteInnerIPv6AddressBytesClassD"));
  LODWORD(a2) = objc_msgSend(v3, "isEqual:", v11);

  if ((a2 & 1) != 0)
    goto LABEL_11;
  v4 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4A98 != -1)
    goto LABEL_22;
LABEL_6:
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (v4[37].opt_class_meths != (__objc2_meth_list *)-1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    v12 = (id)qword_1001E4A90;
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject remoteInnerIPv6AddressBytesClassD](v9, "remoteInnerIPv6AddressBytesClassD"));
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData(v13);
    v15 = (void *)createIPv6AddrStringFromData(v3);
    _NRLogWithArgs(v12, 0, "%s%.30s:%-4d Updating remote classD inner address from %@ to %@ for %@", "", "+[NRDLocalDevice updateRemoteClassDInnerAddressBytes:nrUUID:]", 4123, IPv6AddrStringFromData, v15, v9);

  }
  -[NSObject setRemoteInnerIPv6AddressBytesClassD:](v9, "setRemoteInnerIPv6AddressBytesClassD:", v3);
  v16 = objc_opt_self(v8);
  sub_10012EDB0(v16, 0);
LABEL_11:

  return a2 ^ 1;
}

uint64_t sub_10013E314(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  __objc2_prot *v4;
  id v7;
  char *v8;
  NSObject *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  void *IPv6AddrStringFromData;
  void *v15;
  uint64_t v16;
  id v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  uint64_t v26;
  id v27;
  int v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v7 = a3;
  v8 = (char *)objc_opt_self(a1);
  v9 = sub_10014CFBC();
  dispatch_assert_queue_V2(v9);

  if (!a2)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

    if (IsLevelEnabled)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (addrBytes) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteClassCInnerAddressBytes:nrUUID:]", 4132);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v21 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v21, &_mh_execute_header, "%{public}s Assertion Failed: (addrBytes) != ((void *)0)");
    goto LABEL_21;
  }
  if (!v7)
  {
    v23 = sub_100128400();
    v24 = _NRLogIsLevelEnabled(v23, 16);

    if (v24)
    {
      v25 = sub_100128400();
      _NRLogWithArgs(v25, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteClassCInnerAddressBytes:nrUUID:]", 4133);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v26 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v26, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    goto LABEL_21;
  }
  v10 = sub_1001300EC((uint64_t)v8, v7, 0);
  if (!v10)
  {
    v27 = sub_100128400();
    v28 = _NRLogIsLevelEnabled(v27, 16);

    if (v28)
    {
      v29 = sub_100128400();
      _NRLogWithArgs(v29, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateRemoteClassCInnerAddressBytes:nrUUID:]", 4135);

    }
    v7 = (id)_os_log_pack_size(12);
    v8 = (char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = *__error();
    v22 = _os_log_pack_fill(v8, v7, v30, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
LABEL_21:
    *(_DWORD *)v22 = 136446210;
    *(_QWORD *)(v22 + 4) = "+[NRDLocalDevice updateRemoteClassCInnerAddressBytes:nrUUID:]";
    v31 = sub_100128400();
    _NRLogAbortWithPack(v31, v8);
LABEL_22:
    dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    goto LABEL_6;
  }
  v9 = v10;
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2, 16);
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject remoteInnerIPv6AddressBytesClassC](v9, "remoteInnerIPv6AddressBytesClassC"));
  LODWORD(a2) = objc_msgSend(v3, "isEqual:", v11);

  if ((a2 & 1) != 0)
    goto LABEL_11;
  v4 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (qword_1001E4A98 != -1)
    goto LABEL_22;
LABEL_6:
  if (_NRLogIsLevelEnabled(qword_1001E4A90, 0))
  {
    if (v4[37].opt_class_meths != (__objc2_meth_list *)-1)
      dispatch_once(&qword_1001E4A98, &stru_1001B8730);
    v12 = (id)qword_1001E4A90;
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject remoteInnerIPv6AddressBytesClassC](v9, "remoteInnerIPv6AddressBytesClassC"));
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData(v13);
    v15 = (void *)createIPv6AddrStringFromData(v3);
    _NRLogWithArgs(v12, 0, "%s%.30s:%-4d Updating remote classC inner address from %@ to %@ for %@", "", "+[NRDLocalDevice updateRemoteClassCInnerAddressBytes:nrUUID:]", 4143, IPv6AddrStringFromData, v15, v9);

  }
  -[NSObject setRemoteInnerIPv6AddressBytesClassC:](v9, "setRemoteInnerIPv6AddressBytesClassC:", v3);
  v16 = objc_opt_self(v8);
  sub_10012EDB0(v16, 0);
LABEL_11:

  return a2 ^ 1;
}

void sub_10013E73C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  id v18;
  int v19;
  id v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  id v24;
  id v25;

  v25 = a2;
  v5 = a3;
  v6 = objc_opt_self(a1);
  v7 = sub_10014CFBC();
  dispatch_assert_queue_V2(v7);

  if (!v5)
  {
    v11 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

    if (IsLevelEnabled)
    {
      v13 = sub_100128400();
      _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "+[NRDLocalDevice updateBluetoothUUID:nrUUID:]", 4152);

    }
    v14 = _os_log_pack_size(12);
    v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = __error();
    v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    *(_DWORD *)v17 = 136446210;
    *(_QWORD *)(v17 + 4) = "+[NRDLocalDevice updateBluetoothUUID:nrUUID:]";
LABEL_13:
    v24 = sub_100128400();
    _NRLogAbortWithPack(v24, v15);
  }
  v8 = sub_1001300EC(v6, v5, 0);
  if (!v8)
  {
    v18 = sub_100128400();
    v19 = _NRLogIsLevelEnabled(v18, 16);

    if (v19)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateBluetoothUUID:nrUUID:]", 4154);

    }
    v21 = _os_log_pack_size(12);
    v15 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22 = __error();
    v23 = _os_log_pack_fill(v15, v21, *v22, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v23 = 136446210;
    *(_QWORD *)(v23 + 4) = "+[NRDLocalDevice updateBluetoothUUID:nrUUID:]";
    goto LABEL_13;
  }
  v9 = v8;
  if (!objc_msgSend(*((id *)v8 + 5), "isEqual:", v25) || (v25 != 0) != (v9[10] != 0))
  {
    objc_msgSend(v9, "setBluetoothUUID:");
    objc_msgSend(v9, "setHasCompletedBluetoothPairing:", v25 != 0);
    v10 = objc_opt_self(v6);
    sub_10012EDB0(v10, 0);
  }

}

void sub_10013E9C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  id v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  id v25;
  int v26;
  id v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  v8 = sub_10014CFBC();
  dispatch_assert_queue_V2(v8);

  if (!v6)
  {
    v18 = sub_100128400();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

    if (IsLevelEnabled)
    {
      v20 = sub_100128400();
      _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (nrUUID) != ((void *)0)", "", "+[NRDLocalDevice updateIDSDeviceID:nrUUID:]", 4174);

    }
    v21 = _os_log_pack_size(12);
    v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = __error();
    v24 = _os_log_pack_fill(v22, v21, *v23, &_mh_execute_header, "%{public}s Assertion Failed: (nrUUID) != ((void *)0)");
    *(_DWORD *)v24 = 136446210;
    *(_QWORD *)(v24 + 4) = "+[NRDLocalDevice updateIDSDeviceID:nrUUID:]";
LABEL_21:
    v31 = sub_100128400();
    _NRLogAbortWithPack(v31, v22);
  }
  v9 = sub_1001300EC(v7, v6, 0);
  if (!v9)
  {
    v25 = sub_100128400();
    v26 = _NRLogIsLevelEnabled(v25, 16);

    if (v26)
    {
      v27 = sub_100128400();
      _NRLogWithArgs(v27, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (localDevice) != ((void *)0)", "", "+[NRDLocalDevice updateIDSDeviceID:nrUUID:]", 4176);

    }
    v28 = _os_log_pack_size(12);
    v22 = (char *)&v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    v29 = __error();
    v30 = _os_log_pack_fill(v22, v28, *v29, &_mh_execute_header, "%{public}s Assertion Failed: (localDevice) != ((void *)0)");
    *(_DWORD *)v30 = 136446210;
    *(_QWORD *)(v30 + 4) = "+[NRDLocalDevice updateIDSDeviceID:nrUUID:]";
    goto LABEL_21;
  }
  v10 = v9;
  if ((objc_msgSend(*((id *)v9 + 6), "isEqualToString:", v5) & 1) == 0)
  {
    objc_msgSend(v10, "setIdsDeviceID:", v5);
    v11 = objc_opt_self(v7);
    sub_10012EDB0(v11, 0);
    if (qword_1001E4A88)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A88, "objectForKeyedSubscript:", v6));

      if (v12)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001E4A88, "objectForKeyedSubscript:", v6));
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v33;
          do
          {
            for (i = 0; i != v15; i = (char *)i + 1)
            {
              if (*(_QWORD *)v33 != v16)
                objc_enumerationMutation(v13);
              (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i) + 16))();
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
          }
          while (v15);
        }
        objc_msgSend((id)qword_1001E4A88, "setObject:forKeyedSubscript:", 0, v6);

      }
    }
  }

}

void sub_100140334(uint64_t a1)
{
  _DWORD *v2;
  unsigned int v3;
  id v4;
  id v5;
  id v6;

  if (a1 && sub_10001EF68(*(_QWORD *)(a1 + 112)) && *(_QWORD *)(a1 + 64))
  {
    objc_opt_self(NRLinkDirector);
    if (qword_1001E4710 != -1)
      dispatch_once(&qword_1001E4710, &stru_1001B6E60);
    v2 = (id)qword_1001E4708;
    if (v2 && (v3 = v2[5], v2, v3 >= 0x1E))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating awdl link due to critical thermal conditions", "", "-[NRLinkManagerWiFi createAWDLLinkIfApplicable]", 1444);
      }
    }
    else
    {
      v6 = sub_100137F48((uint64_t)NRDLocalDevice);
      sub_1001404F0((id *)a1, v6);
      if (*(_BYTE *)(a1 + 39))
      {
        v4 = sub_1001379CC((uint64_t)NRDLocalDevice);
        sub_1001404F0((id *)a1, v4);

      }
      v5 = sub_100137CA4((uint64_t)NRDLocalDevice);
      if (objc_msgSend(v5, "count"))
        sub_1001404F0((id *)a1, v5);

    }
  }
}

void sub_1001404F0(id *a1, void *a2)
{
  id v3;
  void *i;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  char *v20;
  id *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  unsigned __int8 v26;
  id WeakRetained;
  unsigned int v28;
  id v29;
  id v30;
  NRLinkAWDL *v31;
  id v32;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id obj;
  uint64_t v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  _BYTE v51[128];

  v3 = a2;
  if (sub_10001EF68((uint64_t)a1[14]) && a1[8])
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v38 = v3;
    obj = v3;
    v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
    if (v41)
    {
      v40 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v41; i = (char *)i + 1)
        {
          if (*(_QWORD *)v47 != v40)
            objc_enumerationMutation(obj);
          v5 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
          v42 = 0u;
          v43 = 0u;
          v44 = 0u;
          v45 = 0u;
          v6 = a1[19];
          v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
          if (v7)
          {
            v8 = v7;
            v9 = *(_QWORD *)v43;
LABEL_15:
            v10 = 0;
            while (1)
            {
              if (*(_QWORD *)v43 != v9)
                objc_enumerationMutation(v6);
              v11 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v10);
              if (objc_msgSend(v11, "subtype") == 102)
              {
                v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "nrUUID"));
                v13 = objc_msgSend(v12, "isEqual:", v5);

                if ((v13 & 1) != 0)
                  break;
              }
              if (v8 == (id)++v10)
              {
                v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
                if (!v8)
                  goto LABEL_22;
                goto LABEL_15;
              }
            }
          }
          else
          {
LABEL_22:

            v14 = a1[14];
            v15 = v14;
            if (v14)
              v16 = (void *)*((_QWORD *)v14 + 9);
            else
              v16 = 0;
            v17 = v16;
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", v5));

            v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
            if (v6)
            {
              v19 = objc_msgSend(v6, "addressFamily");
              if (v19 == objc_msgSend(a1[8], "addressFamily"))
              {
                v20 = sub_10012FFF4((uint64_t)NRDLocalDevice, v5);
                v21 = (id *)v20;
                if (v20)
                {
                  v22 = *((id *)v20 + 16);
                  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "allowedLinkTypes"));
                  if ((objc_msgSend(v23, "containsObject:", &off_1001C49C0) & 1) != 0)
                  {
                    v24 = v21[16];
                    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "allowedLinkSubtypes"));
                    v26 = objc_msgSend(v25, "containsObject:", &off_1001C4A08);

                    if ((v26 & 1) != 0)
                    {
                      WeakRetained = objc_loadWeakRetained(a1 + 2);
                      v28 = objc_msgSend(WeakRetained, "perpetualStandaloneMeadowEnabledForNRUUID:", v5);

                      if (v28)
                      {
                        if (qword_1001E4AB8 != -1)
                          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                        if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
                        {
                          if (qword_1001E4AB8 != -1)
                            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                          _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link for %@ as device is in perpetual standalone Meadow mode", "", "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]", 1417, v21);
                        }
                      }
                      else
                      {
                        v31 = [NRLinkAWDL alloc];
                        v32 = a1[3];
                        v33 = a1[14];
                        if (v33)
                          v33 = (_QWORD *)v33[3];
                        v34 = v33;
                        v35 = a1[8];
                        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "port"));
                        v37 = -[NRLinkAWDL initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:](v31, "initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:", v32, a1, v5, v34, v35, v6, v36);

                        if (!v37)
                          objc_msgSend(a1, "reportEvent:", 3201);

                      }
LABEL_8:

                      goto LABEL_9;
                    }
                  }
                  else
                  {

                  }
                }
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
                {
                  if (qword_1001E4AB8 != -1)
                    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                  _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link for %@ as AWDL is unsupported", "", "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]", 1411, v21);
                }
                goto LABEL_8;
              }
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                v29 = a1[8];
                v30 = (id)qword_1001E4AB0;
                _NRLogWithArgs(v30, 0, "%s%.30s:%-4d Deferring creating link as the address families do not match: %@/%@", "", "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]", 1399, v29, v6);

              }
            }
            else
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link as the peer AWDL endpoint is unavailable", "", "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]", 1403);
                v6 = 0;
              }
              else
              {
                v6 = 0;
              }
            }
          }
LABEL_9:

        }
        v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
      }
      while (v41);
    }

    v3 = v38;
  }

}

void sub_100140B80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4AB0;
  qword_1001E4AB0 = (uint64_t)v1;

}

void sub_100140BB0(_QWORD *a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  v2 = a1[4];
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  v4 = WeakRetained;
  objc_msgSend(WeakRetained, "linkDidReceiveData:data:", a1[5], a1[6]);

}

id sub_100140BFC()
{
  if (qword_1001E4AB8 != -1)
    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
  return (id)qword_1001E4AB0;
}

void sub_100140C3C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "linkIsUnavailable:", *(_QWORD *)(a1 + 40));

  if (objc_msgSend(*(id *)(a1 + 40), "subtype") == 101
    && (v4 = *(_QWORD *)(a1 + 32)) != 0
    && sub_10001EF68(*(_QWORD *)(v4 + 104)))
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Forcing interface availability event, as the underlying transport is still available", "", "-[NRLinkManagerWiFi linkIsUnavailable:]_block_invoke", 502);
    }
    sub_100140F10(*(_QWORD *)(a1 + 32));
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "subtype") == 102
         && (v5 = *(_QWORD *)(a1 + 32)) != 0
         && sub_10001EF68(*(_QWORD *)(v5 + 112)))
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Forcing interface availability event, as the underlying transport is still available", "", "-[NRLinkManagerWiFi linkIsUnavailable:]_block_invoke", 505);
    }
    sub_100140334(*(_QWORD *)(a1 + 32));
  }
  else if (objc_msgSend(*(id *)(a1 + 40), "subtype") == 104)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      if (sub_10001EF68(*(_QWORD *)(v6 + 128)))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
        {
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Forcing interface availability event, as the underlying transport is still available", "", "-[NRLinkManagerWiFi linkIsUnavailable:]_block_invoke", 508);
        }
        sub_100141694(*(_QWORD *)(a1 + 32));
      }
    }
  }
}

void sub_100140F10(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  NRDirectToCloudAgent *v17;
  id v18;
  id *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id *v25;
  id *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint32_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];

  if (a1 && sub_10001EF68(*(_QWORD *)(a1 + 104)) && *(_QWORD *)(a1 + 56))
  {
    v39 = sub_100137F48((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v39, "count"))
    {
      v2 = v39;
      v3 = *(id *)(a1 + 24);
      dispatch_assert_queue_V2(v3);

      if (!*(_QWORD *)(a1 + 216))
      {
        objc_opt_self(NRLinkManagerWiFi);
        if (sub_10001EF68(*(_QWORD *)(a1 + 104)))
        {
          if (*(_QWORD *)(a1 + 56))
          {
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v38 = v2;
            v4 = v2;
            v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
            if (v5)
            {
              v6 = v5;
              v7 = *(_QWORD *)v41;
LABEL_13:
              v8 = 0;
              while (1)
              {
                if (*(_QWORD *)v41 != v7)
                  objc_enumerationMutation(v4);
                v9 = sub_10012FFF4((uint64_t)NRDLocalDevice, *(void **)(*((_QWORD *)&v40 + 1) + 8 * v8));
                v10 = v9;
                v11 = v9 ? (void *)*((_QWORD *)v9 + 16) : 0;
                v12 = v11;

                if (v12)
                {
                  v13 = v10 ? (void *)*((_QWORD *)v10 + 16) : 0;
                  v14 = v13;
                  v15 = objc_msgSend(v14, "allowsDirectToCloud");

                  if (v15)
                    break;
                }

                if (v6 == (id)++v8)
                {
                  v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
                  if (!v6)
                    goto LABEL_46;
                  goto LABEL_13;
                }
              }

              v16 = *(_QWORD *)(a1 + 216);
              v2 = v38;
              if (!v16)
              {
                v17 = [NRDirectToCloudAgent alloc];
                v18 = *(id *)(a1 + 24);
                v19 = sub_100069680((id *)&v17->super.isa, v18);
                v20 = *(void **)(a1 + 216);
                *(_QWORD *)(a1 + 216) = v19;

                objc_msgSend((id)a1, "reportEvent:", 14001);
                v16 = *(_QWORD *)(a1 + 216);
                if (!v16)
                  goto LABEL_81;
              }
              dispatch_assert_queue_V2(*(dispatch_queue_t *)(v16 + 32));
              if (*(_BYTE *)(v16 + 14))
                goto LABEL_67;
              if (qword_1001E46B0 != -1)
                dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
              if (_NRLogIsLevelEnabled(qword_1001E46A8, 0))
              {
                if (qword_1001E46B0 != -1)
                  dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                v21 = (id)qword_1001E46A8;
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v16, "agentDescription"));
                _NRLogWithArgs(v21, 0, "%s%.30s:%-4d registerAgent: %@", "", "-[NRDirectToCloudAgent registerAgent]", 102, v22);

              }
              v23 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(v16));
              v24 = *(void **)(v16 + 40);
              *(_QWORD *)(v16 + 40) = v23;

              if (*(_QWORD *)(v16 + 40))
              {
                objc_opt_self(NRLinkDirector);
                if (qword_1001E4710 != -1)
                  dispatch_once(&qword_1001E4710, &stru_1001B6E60);
                v25 = (id *)(id)qword_1001E4708;
                v26 = v25;
                if (v25)
                {
                  v27 = v25[6];
                  v28 = v27;
                  if (v27)
                  {
                    v29 = (_QWORD *)v27[13];
                    if (v29)
                      v29 = (_QWORD *)v29[3];
                    v27 = v29;
                  }
                }
                else
                {
                  v28 = 0;
                  v27 = 0;
                }
                v30 = *(void **)(v16 + 48);
                *(_QWORD *)(v16 + 48) = v27;

                if (*(_QWORD *)(v16 + 48))
                {
                  if ((objc_msgSend(*(id *)(v16 + 40), "registerNetworkAgent:", v16) & 1) != 0)
                  {
                    *(_BYTE *)(v16 + 14) = 1;
                    objc_msgSend((id)v16, "setActive:", 1);
                    v31 = *(_QWORD *)(v16 + 48);
                    v32 = *(id *)(v16 + 40);
                    objc_msgSend(v32, "addNetworkAgentToInterfaceNamed:", v31);

                    objc_msgSend(*(id *)(v16 + 40), "updateNetworkAgent:", v16);
                    sub_100121E18(0, 14002, 0, 0);
                  }
                  else
                  {
                    if (qword_1001E46B0 != -1)
                      dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                    if (_NRLogIsLevelEnabled(qword_1001E46A8, 17))
                    {
                      if (qword_1001E46B0 != -1)
                        dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                      _NRLogWithArgs(qword_1001E46A8, 17, "unable register network agent");
                    }
                  }
                }
                else
                {
                  if (qword_1001E46B0 != -1)
                    dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                  if (_NRLogIsLevelEnabled(qword_1001E46A8, 17))
                  {
                    if (qword_1001E46B0 != -1)
                      dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                    _NRLogWithArgs(qword_1001E46A8, 17, "unable to find the WiFi interface");
                  }
                }
              }
              else
              {
                if (qword_1001E46B0 != -1)
                  dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                if (_NRLogIsLevelEnabled(qword_1001E46A8, 17))
                {
                  if (qword_1001E46B0 != -1)
                    dispatch_once(&qword_1001E46B0, &stru_1001B6AD8);
                  _NRLogWithArgs(qword_1001E46A8, 17, "unable to allocate registration object");
                }
              }
              if (*(_BYTE *)(v16 + 14)
                || (v35 = *(void **)(v16 + 40)) != 0
                && (objc_msgSend(v35, "unregisterNetworkAgent"),
                    v36 = *(void **)(v16 + 40),
                    *(_QWORD *)(v16 + 40) = 0,
                    v36,
                    *(_BYTE *)(v16 + 14)))
              {
LABEL_67:
                if (*(_QWORD *)(a1 + 216) && *(_DWORD *)(a1 + 44) == -1)
                {
                  v34 = notify_register_check((const char *)objc_msgSend(CFSTR("AvoidCompanionSupported"), "UTF8String"), (int *)(a1 + 44));
                  if (v34 || *(_DWORD *)(a1 + 44) == -1)
                  {
                    if (qword_1001E4AB8 != -1)
                      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
                    {
                      if (qword_1001E4AB8 != -1)
                        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                      _NRLogWithArgs(qword_1001E4AB0, 17, "notify_register_check(%u) failed", v34);
                    }
                  }
                  else
                  {
                    sub_100142FD0(a1, 1);
                  }
                }
              }
              else
              {
LABEL_81:
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
                {
                  v37 = sub_100140BFC();
                  _NRLogWithArgs(v37, 17, "Failed to register direct-to-cloud agent");

                }
                sub_100142200(a1);
              }
            }
            else
            {
LABEL_46:

              sub_100142200(a1);
              v2 = v38;
            }
          }
        }
      }

    }
    else
    {
      sub_100142200(a1);
    }
    sub_1001422A4((id *)a1, v39);
    v33 = sub_100137CA4((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v33, "count"))
      sub_1001422A4((id *)a1, v33);

  }
}

void sub_100141694(uint64_t a1)
{
  id v2;
  id v3;

  if (a1 && sub_10001EF68(*(_QWORD *)(a1 + 128)))
  {
    v3 = sub_100137F48((uint64_t)NRDLocalDevice);
    sub_100141724(a1, v3);
    v2 = sub_100137CA4((uint64_t)NRDLocalDevice);
    if (objc_msgSend(v2, "count"))
      sub_100141724(a1, v2);

  }
}

void sub_100141724(uint64_t a1, void *a2)
{
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  __objc2_class *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  BOOL v21;
  char v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  char v28;
  char v29;
  _QWORD *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *i;
  void *v36;
  void *v37;
  unsigned int v38;
  _UNKNOWN **v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  __CFString *v51;
  __CFString *v52;
  void *v53;
  uint64_t v54;
  id v55;
  NRLinkInfraRelay *v56;
  void *v57;
  id v58;
  _QWORD *v59;
  _QWORD *v60;
  id v61;
  __CFString *v62;
  __CFString *v63;
  id v64;
  id v65;
  id obj;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  id v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _BYTE v98[128];
  _BYTE v99[128];
  _BYTE v100[128];
  _BYTE v101[128];

  v64 = a2;
  v3 = &OBJC_IVAR___NRDLocalDevice__wasInitiallySetupUsingIDSPairing;
  if (sub_10001EF68(*(_QWORD *)(a1 + 128)))
  {
    v65 = objc_alloc_init((Class)NSMutableArray);
    v4 = *(_QWORD **)(a1 + 128);
    v76 = a1;
    if (v4)
      v4 = (_QWORD *)v4[7];
    v5 = v4;
    v6 = objc_msgSend(v5, "count");

    if (v6)
    {
      v7 = *(_QWORD **)(v76 + 128);
      if (v7)
        v7 = (_QWORD *)v7[7];
      v8 = v7;
      objc_msgSend(v65, "addObjectsFromArray:", v8);

    }
    v9 = *(_QWORD **)(v76 + 128);
    if (v9)
      v9 = (_QWORD *)v9[8];
    v10 = v9;
    v11 = objc_msgSend(v10, "count");

    if (v11)
    {
      v12 = *(_QWORD **)(v76 + 128);
      if (v12)
        v12 = (_QWORD *)v12[8];
      v13 = v12;
      objc_msgSend(v65, "addObjectsFromArray:", v13);

    }
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    obj = v64;
    v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v101, 16);
    if (v68)
    {
      v14 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
      v67 = *(_QWORD *)v95;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v95 != v67)
            objc_enumerationMutation(obj);
          v81 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * v15);
          v16 = sub_10012FFF4((uint64_t)&v14[55], v81);
          v69 = v15;
          v70 = v16;
          if (v16)
            v17 = (void *)*((_QWORD *)v16 + 16);
          else
            v17 = 0;
          v18 = v17;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "allowedLinkSubtypes"));
          v20 = objc_msgSend(v19, "containsObject:", &off_1001C49F0);

          if (v20)
          {
            v21 = sub_10010DF88(v70) == 1;
            v22 = sub_100137E98((_BOOL8)v70);
            v23 = *(id *)(v76 + v3[48]);
            v24 = v23;
            if (v23)
              v25 = (void *)*((_QWORD *)v23 + 9);
            else
              v25 = 0;
            v26 = v25;
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", v81));

            v74 = v27;
            if (objc_msgSend(v27, "count"))
            {
              v28 = v21 & ~v22;
              if ((v28 & 1) != 0)
              {
                v29 = 0;
                v30 = (_QWORD *)v76;
              }
              else
              {
                v92 = 0u;
                v93 = 0u;
                v90 = 0u;
                v91 = 0u;
                v30 = (_QWORD *)v76;
                v31 = *(id *)(v76 + 152);
                v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v90, v100, 16);
                if (v32)
                {
                  v33 = v32;
                  v34 = *(_QWORD *)v91;
                  while (2)
                  {
                    for (i = 0; i != v33; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v91 != v34)
                        objc_enumerationMutation(v31);
                      v36 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * (_QWORD)i);
                      if (objc_msgSend(v36, "subtype") == 104)
                      {
                        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "nrUUID"));
                        v38 = objc_msgSend(v37, "isEqual:", v81);

                        if (v38)
                        {
                          if (objc_msgSend(v36, "state") != 255)
                          {
                            v29 = 1;
                            goto LABEL_42;
                          }
                        }
                      }
                    }
                    v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v90, v100, 16);
                    if (v33)
                      continue;
                    break;
                  }
                  v29 = 0;
LABEL_42:
                  v30 = (_QWORD *)v76;
                  v3 = &OBJC_IVAR___NRDLocalDevice__wasInitiallySetupUsingIDSPairing;
                }
                else
                {
                  v29 = 0;
                }

              }
              v39 = &APSConnectionOverrideNamedDelegatePort_ptr;
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v71 = v65;
              v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v86, v99, 16);
              if (v73)
              {
                v72 = *(_QWORD *)v87;
                v77 = v28;
LABEL_47:
                v40 = 0;
                while (1)
                {
                  if (*(_QWORD *)v87 != v72)
                    objc_enumerationMutation(v71);
                  if (!(v28 & 1 | ((v29 & 1) == 0)))
                    break;
                  v75 = v40;
                  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39[162], "endpointWithHostname:port:", *(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * v40), CFSTR("0")));
                  v82 = 0u;
                  v83 = 0u;
                  v84 = 0u;
                  v85 = 0u;
                  v80 = v74;
                  v42 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v82, v98, 16);
                  if (v42)
                  {
                    v43 = v42;
                    v44 = *(_QWORD *)v83;
                    v78 = *(_QWORD *)v83;
LABEL_54:
                    v45 = 0;
                    v79 = v43;
                    while (1)
                    {
                      if (*(_QWORD *)v83 != v44)
                        objc_enumerationMutation(v80);
                      if (!(v28 & 1 | ((v29 & 1) == 0)))
                        break;
                      v47 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * v45);
                      if (objc_msgSend(v30, "endpointsAreCompatible:remoteEndpoint:", v41, v47))
                      {
                        v48 = v39[162];
                        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "hostname"));
                        objc_opt_self(NRIKEv2Listener);
                        if (qword_1001E44D8 != -1)
                          dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
                        v50 = (id)qword_1001E44D0;
                        v51 = CFSTR("62743");
                        if (!v50)
                          v51 = 0;
                        v52 = v51;
                        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "endpointWithHostname:port:", v49, v52));

                        v54 = objc_opt_class(NRLinkInfraRelay);
                        v55 = sub_100141E64((uint64_t)v30, v81, v41, v53, v54);
                        if (v55)
                        {
                          v46 = v55;
                        }
                        else
                        {
                          v56 = [NRLinkInfraRelay alloc];
                          if (v30)
                            v57 = (void *)v30[3];
                          else
                            v57 = 0;
                          v58 = v57;
                          v59 = *(_QWORD **)((char *)v30 + v3[48]);
                          if (v59)
                            v59 = (_QWORD *)v59[3];
                          v60 = v59;
                          objc_opt_self(NRIKEv2Listener);
                          if (qword_1001E44D8 != -1)
                            dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
                          v61 = (id)qword_1001E44D0;
                          v62 = CFSTR("62743");
                          if (!v61)
                            v62 = 0;
                          v63 = v62;
                          v46 = -[NRLinkInfraRelay initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:](v56, "initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:", v58, v76, v81, v60, v41, v53, v63);

                          if (v46)
                            v29 = 1;
                          else
                            objc_msgSend((id)v76, "reportEvent:", 3200);
                          v30 = (_QWORD *)v76;
                          v3 = &OBJC_IVAR___NRDLocalDevice__wasInitiallySetupUsingIDSPairing;
                          v39 = &APSConnectionOverrideNamedDelegatePort_ptr;
                        }
                        v28 = v77;

                        v44 = v78;
                        v43 = v79;
                      }
                      if (v43 == (id)++v45)
                      {
                        v43 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v82, v98, 16);
                        if (v43)
                          goto LABEL_54;
                        break;
                      }
                    }
                  }

                  v40 = v75 + 1;
                  if ((id)(v75 + 1) == v73)
                  {
                    v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v86, v99, 16);
                    if (v73)
                      goto LABEL_47;
                    break;
                  }
                }
              }

            }
            v14 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
          }

          v15 = v69 + 1;
        }
        while ((id)(v69 + 1) != v68);
        v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v101, 16);
      }
      while (v68);
    }

  }
}

id sub_100141E64(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  id v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t v35;
  void *v36;
  unsigned __int8 v37;
  void *v39;
  void *v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];

  v41 = a2;
  v9 = a3;
  v10 = a4;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v11 = *(id *)(a1 + 152);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  v39 = v10;
  v40 = v9;
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v43;
    if (v9)
    {
LABEL_6:
      v15 = 0;
      while (1)
      {
        if (*(_QWORD *)v43 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v15);
        if ((objc_opt_isKindOfClass(v16, a5) & 1) != 0)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "nrUUID"));
          v18 = objc_msgSend(v17, "isEqual:", v41);

          if (v18)
          {
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localOuterEndpoint"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "hostname"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "hostname"));
            v22 = objc_msgSend(v20, "isEqualToString:", v21);

            if (v22)
            {
              if (!v39)
                break;
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "remoteOuterEndpoint"));
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "hostname"));
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "hostname"));
              v26 = objc_msgSend(v24, "isEqualToString:", v25);

              if (v26)
                break;
            }
          }
        }
        if (v13 == (id)++v15)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
          if (!v13)
            goto LABEL_25;
          goto LABEL_6;
        }
      }
    }
    else if (v10)
    {
LABEL_17:
      v28 = 0;
      while (1)
      {
        if (*(_QWORD *)v43 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v28);
        if ((objc_opt_isKindOfClass(v16, a5) & 1) != 0)
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "nrUUID"));
          v30 = objc_msgSend(v29, "isEqual:", v41);

          if (v30)
          {
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "remoteOuterEndpoint"));
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "hostname"));
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "hostname"));
            v34 = objc_msgSend(v32, "isEqualToString:", v33);

            if ((v34 & 1) != 0)
              break;
          }
        }
        if (v13 == (id)++v28)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
          v27 = 0;
          if (!v13)
            goto LABEL_34;
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_27:
      v35 = 0;
      while (1)
      {
        if (*(_QWORD *)v43 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v35);
        if ((objc_opt_isKindOfClass(v16, a5) & 1) != 0)
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "nrUUID"));
          v37 = objc_msgSend(v36, "isEqual:", v41);

          if ((v37 & 1) != 0)
            break;
        }
        if (v13 == (id)++v35)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
          v27 = 0;
          if (!v13)
            goto LABEL_34;
          goto LABEL_27;
        }
      }
    }
    v27 = v16;
  }
  else
  {
LABEL_25:
    v27 = 0;
  }
LABEL_34:

  return v27;
}

void sub_100142200(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    v3 = *(_QWORD *)(a1 + 216);
    if (v3)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 32));
      sub_100069348(v3);
      v4 = *(void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = 0;

      if (*(_DWORD *)(a1 + 44) != -1)
      {
        sub_100142FD0(a1, 0);
        notify_cancel(*(_DWORD *)(a1 + 44));
        *(_DWORD *)(a1 + 44) = -1;
      }
    }
  }
}

void sub_1001422A4(id *a1, void *a2)
{
  int *v3;
  id v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id *v9;
  id WeakRetained;
  unsigned int v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id *v18;
  void *v19;
  id *v20;
  int *v21;
  id v22;
  void *v23;
  int v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  id v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  id v42;
  id v43;
  id v44;
  id *v45;
  uint64_t v46;
  void *i;
  void *v48;
  void *v49;
  unsigned int v50;
  void *v51;
  id v52;
  char *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  __CFString *v64;
  __CFString *v65;
  void *v66;
  uint64_t v67;
  id v68;
  _BOOL4 v69;
  id v70;
  void *v71;
  id v72;
  id *v73;
  id v74;
  uint64_t v75;
  id v76;
  id obj;
  uint64_t v78;
  _BOOL8 v79;
  int v80;
  uint64_t v81;
  id v82;
  void *v83;
  char *v84;
  id *v85;
  void *v86;
  unsigned __int8 v87;
  unsigned int v88;
  id v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[128];
  _BYTE v107[128];
  _BYTE v108[128];
  _BYTE v109[128];

  v72 = a2;
  v3 = &OBJC_IVAR___NRDLocalDevice__wasInitiallySetupUsingIDSPairing;
  if (sub_10001EF68((uint64_t)a1[13]) && a1[7])
  {
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v4 = v72;
    v76 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v102, v109, 16);
    if (v76)
    {
      v5 = a1 + 2;
      v74 = v4;
      v75 = *(_QWORD *)v103;
      v85 = a1;
      v73 = a1 + 2;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v103 != v75)
          {
            v7 = v6;
            objc_enumerationMutation(v4);
            v6 = v7;
          }
          v78 = v6;
          v86 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * v6);
          v8 = sub_10012FFF4((uint64_t)NRDLocalDevice, v86);
          v9 = (id *)v8;
          if (v8)
          {
            if (v8[9])
            {
              if (a1)
                WeakRetained = objc_loadWeakRetained(v5);
              else
                WeakRetained = 0;
              v11 = objc_msgSend(WeakRetained, "perpetualStandaloneMeadowEnabledForNRUUID:", v86);

              if (v11)
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
                {
                  if (qword_1001E4AB8 != -1)
                    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                  _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link for %@ as device is in perpetual standalone Meadow mode", "", "-[NRLinkManagerWiFi createLinkForNRUUIDs:]", 821, v9);
                }
                goto LABEL_8;
              }
              v12 = v9[16];
              if (v12)
              {
                v13 = v12;
                v14 = v9[16];
                v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "allowedLinkSubtypes"));
                if (v15)
                {
                  v16 = (void *)v15;
                  v17 = v9[16];
                  v18 = v9;
                  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "allowedLinkTypes"));
                  if (!objc_msgSend(v19, "containsObject:", &off_1001C49C0))
                  {

                    a1 = v85;
                    v9 = v18;
LABEL_69:
                    if (qword_1001E4AB8 != -1)
                      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
                    {
                      if (qword_1001E4AB8 != -1)
                        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                      _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link for %@ as Infra is unsupported", "", "-[NRLinkManagerWiFi createLinkForNRUUIDs:]", 830, v9);
                    }
                    goto LABEL_8;
                  }
                  v20 = v5;
                  v21 = v3;
                  v22 = v18[16];
                  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "allowedLinkSubtypes"));
                  v87 = objc_msgSend(v23, "containsObject:", &off_1001C49D8);

                  v3 = v21;
                  v5 = v20;
                  v4 = v74;

                  a1 = v85;
                  v9 = v18;
                  if ((v87 & 1) == 0)
                    goto LABEL_69;
                }
                else
                {

                }
              }
              v80 = sub_10010DF88(v9);
              v24 = sub_100137E98((_BOOL8)v9);
              v25 = *(id *)((char *)a1 + v3[45]);
              v26 = v25;
              if (v25)
                v27 = (void *)*((_QWORD *)v25 + 9);
              else
                v27 = 0;
              v28 = v27;
              v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v86));

              v29 = objc_alloc_init((Class)NSMutableArray);
              v30 = *(id *)((char *)a1 + v3[45]);
              if (v30)
                v30 = (_QWORD *)v30[7];
              v31 = v30;
              v32 = objc_msgSend(v31, "count");

              if (v32)
              {
                v33 = *(id *)((char *)v85 + v3[45]);
                if (v33)
                  v33 = (_QWORD *)v33[7];
                v34 = v33;
                objc_msgSend(v29, "addObjectsFromArray:", v34);

              }
              v35 = *(id *)((char *)v85 + v3[45]);
              if (v35)
                v35 = (_QWORD *)v35[8];
              v36 = v35;
              v37 = objc_msgSend(v36, "count");

              if (v37)
              {
                v38 = *(id *)((char *)v85 + v3[45]);
                if (v38)
                  v38 = (_QWORD *)v38[8];
                v39 = v38;
                objc_msgSend(v29, "addObjectsFromArray:", v39);

              }
              v40 = (v80 == 1) & ~v24;
              if (((v80 == 1) & ~v24) != 0)
              {
                v41 = 0;
                a1 = v85;
              }
              else
              {
                v100 = 0u;
                v101 = 0u;
                v98 = 0u;
                v99 = 0u;
                a1 = v85;
                v42 = v85[19];
                v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v98, v108, 16);
                if (v43)
                {
                  v44 = v43;
                  v88 = (v80 == 1) & ~v24;
                  v45 = v9;
                  v46 = *(_QWORD *)v99;
                  while (2)
                  {
                    for (i = 0; i != v44; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v99 != v46)
                        objc_enumerationMutation(v42);
                      v48 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)i);
                      if (objc_msgSend(v48, "subtype") == 101)
                      {
                        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "nrUUID"));
                        v50 = objc_msgSend(v49, "isEqual:", v86);

                        if (v50)
                        {
                          if (objc_msgSend(v48, "state") != 255)
                          {
                            v41 = 1;
                            goto LABEL_67;
                          }
                        }
                      }
                    }
                    v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v98, v108, 16);
                    if (v44)
                      continue;
                    break;
                  }
                  v41 = 0;
LABEL_67:
                  a1 = v85;
                  v9 = v45;
                  v40 = v88;
                }
                else
                {
                  v41 = 0;
                }

              }
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              obj = v29;
              v51 = v86;
              v82 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v107, 16);
              if (v82)
              {
                v81 = *(_QWORD *)v95;
                v79 = (_BOOL8)v9;
LABEL_79:
                v52 = 0;
                while (1)
                {
                  if (*(_QWORD *)v95 != v81)
                    objc_enumerationMutation(obj);
                  if (!(v40 & 1 | ((v41 & 1) == 0)))
                    break;
                  v84 = (char *)v52;
                  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)v52), CFSTR("0")));
                  v90 = 0u;
                  v91 = 0u;
                  v92 = 0u;
                  v93 = 0u;
                  v89 = v83;
                  v55 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", &v90, v106, 16);
                  if (v55)
                  {
                    v56 = v55;
                    v57 = *(_QWORD *)v91;
LABEL_87:
                    v58 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v91 != v57)
                        objc_enumerationMutation(v89);
                      if (!(v40 & 1 | ((v41 & 1) == 0)))
                        break;
                      v60 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * v58);
                      if (objc_msgSend(a1, "endpointsAreCompatible:remoteEndpoint:", v54, v60))
                      {
                        v61 = v40;
                        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "hostname"));
                        objc_opt_self(NRIKEv2Listener);
                        if (qword_1001E44D8 != -1)
                          dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
                        v63 = (id)qword_1001E44D0;
                        v64 = CFSTR("62743");
                        if (!v63)
                          v64 = 0;
                        v65 = v64;
                        v66 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v62, v65));

                        v67 = objc_opt_class(NRLinkWiFi);
                        a1 = v85;
                        v51 = v86;
                        v59 = sub_100141E64((uint64_t)v85, v86, v54, v66, v67);
                        if (!v59)
                        {
                          v68 = sub_100142CF0((uint64_t)v85, v86, v54, v66);
                          v59 = (id)objc_claimAutoreleasedReturnValue(v68);
                          if (v59)
                          {
                            v41 = 1;
                          }
                          else
                          {
                            objc_msgSend(v85, "reportEvent:", 3200);
                            v59 = 0;
                          }
                        }

                        v40 = v61;
                      }
                      if (v56 == (id)++v58)
                      {
                        v56 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", &v90, v106, 16);
                        if (v56)
                          goto LABEL_87;
                        break;
                      }
                    }
                  }

                  v9 = (id *)v79;
                  v69 = sub_100137E98(v79);
                  if (v80 == 1)
                  {
                    v53 = v84;
                    if (v69 && !objc_msgSend(v89, "count"))
                    {
                      v70 = sub_100142CF0((uint64_t)a1, v51, v54, 0);
                      v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
                      if (v71)
                        v41 = 1;
                      else
                        objc_msgSend(a1, "reportEvent:", 3200);

                    }
                  }
                  else
                  {
                    v53 = v84;
                  }

                  v52 = v53 + 1;
                  if (v52 == v82)
                  {
                    v82 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v107, 16);
                    if (v82)
                      goto LABEL_79;
                    break;
                  }
                }
              }

              v3 = &OBJC_IVAR___NRDLocalDevice__wasInitiallySetupUsingIDSPairing;
              v5 = v73;
              v4 = v74;
            }
            else
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link for disabled local device for %@", "", "-[NRLinkManagerWiFi createLinkForNRUUIDs:]", 815, v86);
              }
            }
          }
          else
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Deferring creating link for invalid local device for %@", "", "-[NRLinkManagerWiFi createLinkForNRUUIDs:]", 810, v86);
            }
          }
LABEL_8:

          v6 = v78 + 1;
        }
        while ((id)(v78 + 1) != v76);
        v76 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v102, v109, 16);
      }
      while (v76);
    }

  }
}

id sub_100142CF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  __CFString *v14;
  __CFString *v15;
  uint64_t v16;
  NRLinkWiFi *v17;
  void *v18;
  id StringFromNRLinkType;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  __CFString *v23;
  __CFString *v24;
  id v25;
  uint64_t v26;
  id v28;
  int IsLevelEnabled;
  id v30;
  int v31;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
    v10 = *(void **)(a1 + 24);
  else
    v10 = 0;
  v11 = v10;
  dispatch_assert_queue_V2(v11);

  if (!v7)
  {
    v28 = sub_100140BFC();
    IsLevelEnabled = _NRLogIsLevelEnabled(v28, 17);

    if (IsLevelEnabled)
    {
      StringFromNRLinkType = sub_100140BFC();
      _NRLogWithArgs(StringFromNRLinkType, 17, "%s called with null nrUUID");
      goto LABEL_25;
    }
LABEL_32:
    v25 = 0;
    goto LABEL_27;
  }
  if (!v8)
  {
    v30 = sub_100140BFC();
    v31 = _NRLogIsLevelEnabled(v30, 17);

    if (v31)
    {
      StringFromNRLinkType = sub_100140BFC();
      _NRLogWithArgs(StringFromNRLinkType, 17, "%s called with null localEndpoint");
      goto LABEL_25;
    }
    goto LABEL_32;
  }
  if ((objc_msgSend((id)a1, "shouldCreateLinkForNRUUID:", v7) & 1) != 0)
  {
    if (v9)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hostname"));
      objc_opt_self(NRIKEv2Listener);
      if (qword_1001E44D8 != -1)
        dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
      v13 = (id)qword_1001E44D0;
      if (v13)
        v14 = CFSTR("62743");
      else
        v14 = 0;
      v15 = v14;
      v16 = objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v12, v15));

      v9 = (id)v16;
    }
    v17 = [NRLinkWiFi alloc];
    if (a1)
      v18 = *(void **)(a1 + 24);
    else
      v18 = 0;
    StringFromNRLinkType = v18;
    v20 = *(_QWORD **)(a1 + 104);
    if (v20)
      v20 = (_QWORD *)v20[3];
    v21 = v20;
    objc_opt_self(NRIKEv2Listener);
    if (qword_1001E44D8 != -1)
      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
    v22 = (id)qword_1001E44D0;
    v23 = CFSTR("62743");
    if (!v22)
      v23 = 0;
    v24 = v23;
    v25 = -[NRLinkWiFi initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:](v17, "initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:", StringFromNRLinkType, a1, v7, v21, v8, v9, v24);

    goto LABEL_26;
  }
  if (a1)
    v26 = *(unsigned __int8 *)(a1 + 8);
  else
    v26 = 0;
  StringFromNRLinkType = (id)createStringFromNRLinkType(v26);
  objc_msgSend((id)a1, "reportEvent:detailsFormat:", 3200, CFSTR("unsupported link type: %@"), StringFromNRLinkType);
LABEL_25:
  v25 = 0;
LABEL_26:

LABEL_27:
  return v25;
}

id sub_100142FD0(uint64_t a1, char a2)
{
  id result;

  result = (id)objc_opt_self(NRLinkManagerWiFi);
  if ((a2 & 1) != 0 || !*(_BYTE *)(a1 + 35))
  {
    notify_set_state(*(_DWORD *)(a1 + 44), 1uLL);
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d Setting notify token (%d) state AvoidCompanionSupported: %d", "", "-[NRLinkManagerWiFi updateAvoidCompanionStateWithForce:]", 704, *(_DWORD *)(a1 + 44), 1);
    }
    result = objc_msgSend((id)a1, "reportEvent:detailsFormat:", 1031, CFSTR("token: %d, supported: %d"), *(unsigned int *)(a1 + 44), 1);
    *(_BYTE *)(a1 + 35) = 1;
  }
  return result;
}

void sub_100143108(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 9)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsSuspended:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 16))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 16, "%s%.30s:%-4d %@: link %@ is not in suspended state anymore", "", "-[NRLinkManagerWiFi linkIsSuspended:]_block_invoke", 478, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_100143218(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 8)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsReady:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 16))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 16, "%s%.30s:%-4d %@: link %@ is not in ready state anymore", "", "-[NRLinkManagerWiFi linkIsReady:]_block_invoke", 456, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

void sub_100143328(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "state") == 1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    else
      WeakRetained = 0;
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "linkIsAvailable:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 16))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 16, "%s%.30s:%-4d %@: link %@ is not in initial state anymore", "", "-[NRLinkManagerWiFi linkIsAvailable:]_block_invoke", 427, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    }
  }
}

id sub_100143438(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

uint64_t sub_100143440(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;

  if (result)
  {
    v3 = result;
    v4 = *(id *)(result + 24);
    dispatch_assert_queue_V2(v4);

    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    result = _NRLogIsLevelEnabled(qword_1001E4AB0, 1);
    if ((_DWORD)result)
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      result = _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Setting prefer Wi-Fi asserts: %d -> %d", "", "-[NRLinkManagerWiFi setPreferWiFiAsserts:]", 1884, *(_DWORD *)(v3 + 40), a2);
    }
    *(_DWORD *)(v3 + 40) = a2;
  }
  return result;
}

void sub_100143538(id a1)
{
  NSObject *v1;
  dispatch_queue_attr_t v2;
  NSObject *v3;
  const char *v4;
  dispatch_queue_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  int IsLevelEnabled;
  id v10;
  char *v11;
  int *v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  id v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v1 = _NRCopySerialQueueAttr(a1);
  v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue(v2);

  if (!v3)
  {
    v8 = sub_100140BFC();
    IsLevelEnabled = _NRLogIsLevelEnabled(v8, 16);

    if (IsLevelEnabled)
    {
      v10 = sub_100140BFC();
      _NRLogWithArgs(v10, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_attr_make_with_qos_class(%u) failed", "", "nr_dispatch_queue_create_with_qos", 130, 25);

    }
    v4 = (const char *)_os_log_pack_size(18);
    v11 = (char *)&v23 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v4, *v12, &_mh_execute_header, "%{public}s dispatch_queue_attr_make_with_qos_class(%u) failed");
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v13 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = 25;
    v14 = sub_100140BFC();
    _NRLogAbortWithPack(v14, v11);
LABEL_7:
    v15 = sub_100140BFC();
    v16 = _NRLogIsLevelEnabled(v15, 16);

    if (v16)
    {
      v17 = sub_100140BFC();
      _NRLogWithArgs(v17, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create(%s) failed", "", "nr_dispatch_queue_create_with_qos", 134, v4);

    }
    v18 = _os_log_pack_size(22);
    v19 = (char *)&v23 - ((__chkstk_darwin(v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = __error();
    v21 = _os_log_pack_fill(v19, v18, *v20, &_mh_execute_header, "%{public}s dispatch_queue_create(%s) failed");
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v21 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v21 + 14) = v4;
    v22 = sub_100140BFC();
    _NRLogAbortWithPack(v22, v19);
  }
  v4 = "terminusd.CoreWiFi";
  v5 = dispatch_queue_create("terminusd.CoreWiFi", v3);
  if (!v5)
    goto LABEL_7;
  v6 = (uint64_t)v5;

  v7 = (void *)qword_1001E4AC8;
  qword_1001E4AC8 = v6;

}

id sub_1001437A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "activate");
}

BOOL sub_1001437AC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  dispatch_time_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  intptr_t v9;
  uint64_t v11;

  v3 = a2;
  objc_opt_self(a1);
  v4 = dispatch_group_create();
  if (qword_1001E4AC0 != -1)
    dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
  dispatch_group_async(v4, (dispatch_queue_t)qword_1001E4AC8, v3);

  v5 = dispatch_time(0x8000000000000000, 3000000000);
  v9 = dispatch_group_wait(v4, v5);
  if (v9)
    sub_100109270(CFSTR("NRLinkManagerWiFi"), CFSTR("SemaphoreTimeout"), CFSTR("PerformBlockSync"), 0, 0, v6, v7, v8, v11);

  return v9 != 0;
}

uint64_t sub_10014387C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10014388C(uint64_t a1)
{

}

void sub_100143894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceName"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1001438CC(uint64_t a1, void *a2, void *a3)
{
  _DWORD *v4;
  _DWORD *v5;

  if (a3)
  {
    v4 = a3;
    if (v4[3] != 1004)
    {
      v5 = v4;
      sub_100143D94((uint64_t)v4, a2);
      v4 = v5;
    }

  }
}

void sub_100143918(uint64_t a1, uint64_t a2)
{
  if (a2 && *(_DWORD *)(a2 + 12) != 1004)
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 16))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 16, "%s%.30s:%-4d SCD server restarted", "", "scdDisconnectCallback", 2532);
    }
  }
}

void sub_1001439D8(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  BOOL v4;

  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (v2)
      v4 = v2[8] != 0;
    else
      v4 = 0;
    *(_BYTE *)(v3 + 39) = v4;
  }

  sub_100143A68(*(_QWORD *)(a1 + 32));
}

void sub_100143A68(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  _QWORD *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  int IsLevelEnabled;
  CFErrorRef Error;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  if (a1)
  {
    v2 = sub_100143D04((_QWORD *)a1);
    v3 = objc_alloc_init((Class)NSMutableArray);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v7)
            objc_enumerationMutation(v4);
          v11 = *(_QWORD **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          if (v11)
            v12 = (void *)v11[6];
          else
            v12 = 0;
          v13 = v12;

          if (v13)
          {
            if (v11)
              v14 = (void *)v11[6];
            else
              v14 = 0;
            v15 = v14;
            objc_msgSend(v3, "addObject:", v15);

          }
          if (v11)
            v16 = (void *)v11[4];
          else
            v16 = 0;
          v17 = v16;

          if (v17)
          {
            if (v11)
              v18 = (void *)v11[4];
            else
              v18 = 0;
            v19 = v18;
            objc_msgSend(v3, "addObject:", v19);

          }
          if (v11)
            v20 = (void *)v11[5];
          else
            v20 = 0;
          v21 = v20;

          if (v21)
          {
            if (v11)
              v9 = (void *)v11[5];
            else
              v9 = 0;
            v10 = v9;
            objc_msgSend(v3, "addObject:", v10);

          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      }
      while (v6);
    }

    if (*(_QWORD *)(a1 + 136))
      objc_msgSend(v3, "addObject:");
    if (SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 96), (CFArrayRef)v3, 0))
    {
      v22 = (id)a1;
      v23 = v22;
      if (*((_DWORD *)v22 + 3) != 1004)
        sub_100143D94((uint64_t)v22, v3);
    }
    else
    {
      v24 = sub_100140BFC();
      IsLevelEnabled = _NRLogIsLevelEnabled(v24, 17);

      if (!IsLevelEnabled)
        goto LABEL_39;
      v23 = sub_100140BFC();
      Error = SCCopyLastError();
      _NRLogWithArgs(v23, 17, "SCDynamicStoreSetNotificationKeys failed: %@", Error);

    }
LABEL_39:

  }
}

void *sub_100143D04(_QWORD *a1)
{
  id v2;
  void *v3;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = v2;
  if (a1[13])
    objc_msgSend(v2, "addObject:");
  if (a1[14])
    objc_msgSend(v3, "addObject:");
  if (a1[15])
    objc_msgSend(v3, "addObject:");
  if (a1[16])
    objc_msgSend(v3, "addObject:");
  return v3;
}

void sub_100143D94(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  CFDictionaryRef v5;
  id v6;
  int IsLevelEnabled;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  _QWORD *v12;
  void *v13;
  id v14;
  unsigned int v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  unsigned int v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  id *v26;
  id *v27;
  unsigned int v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t k;
  void *v38;
  unsigned int v39;
  id v44;
  int v45;
  id v46;
  id v47;
  int v48;
  id v49;
  id *v50;
  id *v51;
  unsigned int v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  int v64;
  id v65;
  int v66;
  id v67;
  int v68;
  id *v69;
  BOOL v70;
  id v71;
  unsigned __int8 v72;
  id v73;
  id v74;
  id v75;
  id *v76;
  id v77;
  int v78;
  id v79;
  int v80;
  id v81;
  id *v82;
  id *v83;
  unsigned int v84;
  id *v85;
  id *v86;
  void *v87;
  void *v88;
  unsigned int v89;
  unsigned int v90;
  id *v91;
  BOOL v92;
  id *v93;
  BOOL v94;
  id v95;
  unsigned int v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  id v102;
  int v103;
  id v104;
  id v105;
  uint64_t v106;
  void *m;
  _QWORD *v108;
  id v109;
  int v110;
  id v111;
  void *v112;
  id v113;
  BOOL v114;
  _QWORD *v115;
  _BOOL4 v116;
  _QWORD *v117;
  _BOOL4 v118;
  _QWORD *v119;
  _BOOL4 v120;
  _QWORD *v121;
  _BOOL4 v122;
  _QWORD *v123;
  _BOOL4 v124;
  _QWORD *v125;
  _BOOL4 v126;
  NSObject *v127;
  NSObject *v128;
  void *v129;
  void *v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  void *n;
  void *v136;
  void *v137;
  dispatch_time_t v138;
  void *v139;
  NSObject *v140;
  NSObject *v141;
  NSObject *v142;
  void *v143;
  id WeakRetained;
  id v145;
  id v146;
  uint64_t v147;
  void *ii;
  void *v149;
  id v150;
  id v151;
  int v152;
  id v153;
  _BOOL4 v154;
  id v155;
  int v156;
  id v157;
  int v158;
  id v159;
  id v160;
  id v161;
  uint64_t v162;
  void *jj;
  uint64_t v164;
  NSObject *v165;
  id v166;
  uint64_t v167;
  id v168;
  char v169;
  CFDictionaryRef v170;
  uint64_t v171;
  id v172;
  void *v173;
  id *to;
  id *toa;
  _BOOL4 tob;
  id *v177;
  id v178;
  id obj;
  const __CFArray *keys;
  _QWORD v181[5];
  BOOL v182;
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _QWORD block[6];
  id v189[2];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _BYTE v210[128];
  _BYTE v211[128];
  _BYTE v212[128];
  _BYTE v213[128];
  _BYTE v214[128];
  id location;
  uint64_t v216;
  void (*v217)(uint64_t);
  void *v218;
  id v219;
  __int128 *v220;

  keys = a2;
  if (a1)
    v3 = *(void **)(a1 + 24);
  else
    v3 = 0;
  v4 = v3;
  dispatch_assert_queue_V2(v4);

  v5 = SCDynamicStoreCopyMultiple(*(SCDynamicStoreRef *)(a1 + 96), keys, 0);
  if (qword_1001E4AB8 != -1)
    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
  v6 = (id)qword_1001E4AB0;
  IsLevelEnabled = _NRLogIsLevelEnabled(v6, 1);

  if (IsLevelEnabled)
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    v8 = (id)qword_1001E4AB0;
    _NRLogWithArgs(v8, 1, "%s%.30s:%-4d SCD update: %@", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2285, v5);

  }
  v170 = v5;
  v202 = 0u;
  v203 = 0u;
  v204 = 0u;
  v205 = 0u;
  obj = sub_100143D04((_QWORD *)a1);
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v202, v214, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v203;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v203 != v10)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD **)(*((_QWORD *)&v202 + 1) + 8 * (_QWORD)i);
        if (v12)
          v13 = (void *)v12[4];
        else
          v13 = 0;
        v14 = v13;
        v15 = -[__CFArray containsObject:](keys, "containsObject:", v14);

        if (v15)
        {
          if (v12)
            v16 = (void *)v12[7];
          else
            v16 = 0;
          v17 = v16;
          objc_msgSend(v17, "removeAllObjects");

        }
        if (v12)
          v18 = (void *)v12[5];
        else
          v18 = 0;
        v19 = v18;
        v20 = -[__CFArray containsObject:](keys, "containsObject:", v19);

        if (v20)
        {
          if (v12)
            v21 = (void *)v12[8];
          else
            v21 = 0;
          v22 = v21;
          objc_msgSend(v22, "removeAllObjects");

        }
      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v202, v214, 16);
    }
    while (v9);
  }

  v166 = objc_alloc_init((Class)NSMutableArray);
  if (v5 && -[__CFDictionary count](v5, "count"))
  {
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v168 = obj;
    v172 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v198, v213, 16);
    if (v172)
    {
      v169 = 0;
      v23 = 0;
      v167 = *(_QWORD *)v199;
      for (j = *(_QWORD *)v199; ; j = *(_QWORD *)v199)
      {
        if (j != v167)
        {
          v25 = v23;
          objc_enumerationMutation(v168);
          v23 = v25;
        }
        v26 = *(id **)(*((_QWORD *)&v198 + 1) + 8 * v23);
        v177 = v26;
        v171 = v23;
        if (v26)
          v26 = (id *)v26[4];
        v27 = v26;
        v28 = -[__CFArray containsObject:](keys, "containsObject:", v27);

        if (v28)
        {
          if (v177)
          {
            v29 = v177[7];
            objc_msgSend(v29, "removeAllObjects");

            v30 = v177[4];
          }
          else
          {
            objc_msgSend(0, "removeAllObjects");
            v30 = 0;
          }
          v31 = v30;
          to = (id *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v170, "objectForKeyedSubscript:", v31));

          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(to, "objectForKeyedSubscript:", kSCPropNetIPv4Addresses));
          v196 = 0u;
          v197 = 0u;
          v194 = 0u;
          v195 = 0u;
          v33 = v32;
          v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v194, v212, 16);
          if (v34)
          {
            v35 = 0;
            v36 = *(_QWORD *)v195;
            for (k = *(_QWORD *)v195; ; k = *(_QWORD *)v195)
            {
              if (k != v36)
                objc_enumerationMutation(v33);
              v38 = *(void **)(*((_QWORD *)&v194 + 1) + 8 * v35);
              location = 0;
              v216 = 0;
              if (inet_pton(2, (const char *)objc_msgSend(v38, "UTF8String"), (char *)&location + 4) == 1)
              {
                v39 = bswap32(HIDWORD(location));
                if ((v39 & 0xFF000000) == 0
                  || (v39 & 0xFF000000) == 2130706432
                  || v39 >> 28 == 14
                  || HIDWORD(location) == -1
                  || (v39 & 0xFFFFFFF8) == -1073741824)
                {
                  if (qword_1001E4AB8 != -1)
                    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                  v44 = (id)qword_1001E4AB0;
                  v45 = _NRLogIsLevelEnabled(v44, 1);

                  if (v45)
                  {
                    if (qword_1001E4AB8 != -1)
                      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                    v46 = (id)qword_1001E4AB0;
                    _NRLogWithArgs(v46, 1, "%s%.30s:%-4d Ignoring ipv4 address: %@", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2323, v38);
                    goto LABEL_71;
                  }
                }
                else
                {
                  if (HIWORD(v39) != 43518)
                  {
                    if (v177)
LABEL_85:
                      v49 = v177[7];
                    else
                      v49 = 0;
                    v46 = v49;
                    objc_msgSend(v46, "addObject:", v38);
LABEL_71:

                    goto LABEL_72;
                  }
                  if (v177 && *((_BYTE *)v177 + 8))
                    goto LABEL_85;
                  if (qword_1001E4AB8 != -1)
                    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                  v47 = (id)qword_1001E4AB0;
                  v48 = _NRLogIsLevelEnabled(v47, 1);

                  if (v48)
                  {
                    if (qword_1001E4AB8 != -1)
                      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                    v46 = (id)qword_1001E4AB0;
                    _NRLogWithArgs(v46, 1, "%s%.30s:%-4d Ignoring ipv4 address: %@", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2329, v38);
                    goto LABEL_71;
                  }
                }
              }
LABEL_72:
              if (++v35 >= (unint64_t)v34)
              {
                v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v194, v212, 16);
                if (!v34)
                  break;
                v35 = 0;
              }
            }
          }

        }
        v50 = v177;
        if (v177)
          v50 = (id *)v177[5];
        v51 = v50;
        v52 = -[__CFArray containsObject:](keys, "containsObject:", v51);

        if (v52)
        {
          if (v177)
          {
            v53 = v177[8];
            objc_msgSend(v53, "removeAllObjects");

            v54 = v177[5];
          }
          else
          {
            objc_msgSend(0, "removeAllObjects");
            v54 = 0;
          }
          v55 = v54;
          v56 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v170, "objectForKeyedSubscript:", v55));

          toa = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKeyedSubscript:", kSCPropNetIPv6Addresses));
          v173 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKeyedSubscript:", kSCPropNetIPv6Flags));
          v57 = objc_msgSend(toa, "count");
          if (v57 != objc_msgSend(v173, "count"))
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            v79 = (id)qword_1001E4AB0;
            v80 = _NRLogIsLevelEnabled(v79, 17);

            if (v80)
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              v81 = (id)qword_1001E4AB0;
              _NRLogWithArgs(v81, 17, "Mismatch between ipv6 address and flags array: %@ %@", toa, v173);

            }
            goto LABEL_161;
          }
          v58 = objc_msgSend(toa, "count");
          if (v58)
          {
            v59 = 0;
            while (1)
            {
              v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "objectAtIndexedSubscript:", v59));
              v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(toa, "objectAtIndexedSubscript:", v59));
              v62 = objc_msgSend(v60, "unsignedIntValue");
              if (((unsigned __int16)v62 & 0x101F) != 0)
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                v63 = (id)qword_1001E4AB0;
                v64 = _NRLogIsLevelEnabled(v63, 1);

                if (v64)
                {
                  if (qword_1001E4AB8 != -1)
                    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                  v65 = (id)qword_1001E4AB0;
                  _NRLogWithArgs(v65, 1, "%s%.30s:%-4d Ignoring ipv6 address: %@ (%#x)", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2357, v61, v62);

                }
                goto LABEL_127;
              }
              location = 0;
              v216 = 0;
              LODWORD(v218) = 0;
              v217 = 0;
              if (inet_pton(30, (const char *)objc_msgSend(v61, "UTF8String"), &v216) == 1)
                break;
LABEL_127:

              if (v58 == (id)++v59)
                goto LABEL_142;
            }
            v66 = v216 | HIDWORD(v216) | v217;
            if (!v66 && !HIDWORD(v217)
              || (HIDWORD(v217) == 0x1000000 ? (v70 = v66 == 0) : (v70 = 0), v70 || v216 == 255))
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              v67 = (id)qword_1001E4AB0;
              v68 = _NRLogIsLevelEnabled(v67, 1);

              if (!v68)
                goto LABEL_127;
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              v69 = (id *)(id)qword_1001E4AB0;
              _NRLogWithArgs(v69, 1, "%s%.30s:%-4d Ignoring ipv6 address: %@", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2368, v61);
            }
            else
            {
              if ((v216 & 0xC0FF) != 0x80FE)
              {
                v76 = v177;
                if (v177)
                  goto LABEL_124;
                goto LABEL_125;
              }
              if (v177 && *((_BYTE *)v177 + 8))
              {
                v71 = v177[3];
                v72 = objc_msgSend(v61, "containsString:", v71);

                if ((v72 & 1) == 0)
                {
                  v73 = objc_alloc((Class)NSString);
                  v74 = v177[3];
                  v75 = objc_msgSend(v73, "initWithFormat:", CFSTR("%@%%%@"), v61, v74);

                  v61 = v75;
                }
LABEL_124:
                v76 = (id *)v177[8];
LABEL_125:
                v69 = v76;
                objc_msgSend(v69, "addObject:", v61);
              }
              else
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                v77 = (id)qword_1001E4AB0;
                v78 = _NRLogIsLevelEnabled(v77, 1);

                if (!v78)
                  goto LABEL_127;
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                v69 = (id *)(id)qword_1001E4AB0;
                _NRLogWithArgs(v69, 1, "%s%.30s:%-4d Ignoring ipv6 address: %@", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2374, v61);
              }
            }

            goto LABEL_127;
          }
LABEL_142:

          v28 = 1;
        }
        v82 = v177;
        if (v177)
          v82 = (id *)v177[6];
        v83 = v82;
        v84 = -[__CFArray containsObject:](keys, "containsObject:", v83);

        if (v84)
        {
          v85 = v177;
          if (v177)
            v85 = (id *)v177[6];
          v86 = v85;
          v87 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v170, "objectForKeyedSubscript:", v86));

          if (v87)
          {
            v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "objectForKeyedSubscript:", kSCPropNetLinkActive));
            v89 = objc_msgSend(v88, "BOOLValue");
            if (v177)
            {
              *((_BYTE *)v177 + 9) = v89;
              if (v89)
                sub_10001EE58((uint64_t)v177);
            }

          }
          else if (v177)
          {
            *((_BYTE *)v177 + 9) = 0;
          }

          v91 = v177;
        }
        else
        {
          v90 = v28;
          v91 = v177;
          if (!v90)
            goto LABEL_161;
        }
        v92 = v91 == 0;
        v93 = (id *)*(id *)(a1 + 128);
        v94 = v91 == v93;

        if (!v92)
          ++*((_DWORD *)v177 + 4);
        objc_msgSend(v166, "addObject:", v177);
        v169 |= v94;
LABEL_161:
        v23 = v171 + 1;
        if (v171 + 1 >= (unint64_t)v172)
        {
          v172 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v198, v213, 16);
          if (!v172)
            goto LABEL_168;
          v23 = 0;
        }
      }
    }
    v169 = 0;
LABEL_168:

    v95 = *(id *)(a1 + 136);
    v96 = -[__CFArray containsObject:](keys, "containsObject:", v95);

    if (v96)
    {
      *(_BYTE *)(a1 + 32) = 0;
      v97 = *(id *)(a1 + 136);
      v98 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v170, "objectForKeyedSubscript:", v97));

      if (v98)
      {
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "objectForKeyedSubscript:", CFSTR("InternalInterfaces")));
        if (objc_msgSend(v99, "count"))
        {
          v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "objectForKeyedSubscript:", CFSTR("Hosts")));
          v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "objectForKeyedSubscript:", CFSTR("Current")));
          if (objc_msgSend(v101, "unsignedIntValue"))
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            v102 = (id)qword_1001E4AB0;
            v103 = _NRLogIsLevelEnabled(v102, 1);

            if (v103)
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              v104 = (id)qword_1001E4AB0;
              _NRLogWithArgs(v104, 1, "%s%.30s:%-4d Bridge active", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2417);

            }
            *(_BYTE *)(a1 + 32) = 1;
          }

        }
      }

    }
  }
  else
  {
    v169 = 0;
  }
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  v178 = v166;
  v105 = objc_msgSend(v178, "countByEnumeratingWithState:objects:count:", &v190, v211, 16);
  if (!v105)
    goto LABEL_251;
  v106 = *(_QWORD *)v191;
  do
  {
    for (m = 0; m != v105; m = (char *)m + 1)
    {
      if (*(_QWORD *)v191 != v106)
        objc_enumerationMutation(v178);
      v108 = *(_QWORD **)(*((_QWORD *)&v190 + 1) + 8 * (_QWORD)m);
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v109 = (id)qword_1001E4AB0;
      v110 = _NRLogIsLevelEnabled(v109, 1);

      if (v110)
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        v111 = (id)qword_1001E4AB0;
        _NRLogWithArgs(v111, 1, "%s%.30s:%-4d SCD changed config: %@", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2436, v108);

      }
      if (sub_10001EF68((uint64_t)v108))
      {
        if (v108)
          v112 = (void *)v108[7];
        else
          v112 = 0;
        v113 = v112;
        v114 = objc_msgSend(v113, "count") == 0;

        if (v114)
        {
          if (v108)
            v137 = (void *)*((unsigned int *)v108 + 4);
          else
            v137 = 0;
          objc_initWeak(&location, (id)a1);
          v138 = dispatch_time(0x8000000000000000, 3000000000);
          if (a1)
            v139 = *(void **)(a1 + 24);
          else
            v139 = 0;
          v140 = v139;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1001464BC;
          block[3] = &unk_1001B88E0;
          objc_copyWeak(v189, &location);
          v189[1] = v137;
          block[4] = v108;
          block[5] = a1;
          dispatch_after(v138, v140, block);

          objc_destroyWeak(v189);
          objc_destroyWeak(&location);
        }
        else
        {
          v115 = *(id *)(a1 + 104);
          v116 = v108 == v115;

          if (v116)
          {
            sub_100145724(a1);
          }
          else
          {
            v117 = *(id *)(a1 + 112);
            v118 = v108 == v117;

            if (v118)
            {
              sub_100145BB0((id *)a1);
            }
            else
            {
              v119 = *(id *)(a1 + 128);
              v120 = v108 == v119;

              if (v120)
                sub_1001460B4(a1);
            }
          }
        }
      }
      else
      {
        v121 = *(id *)(a1 + 104);
        v122 = v108 == v121;

        if (v122)
        {
          v127 = *(id *)(a1 + 24);
          dispatch_assert_queue_V2(v127);

          if (!*(_QWORD *)(a1 + 56))
            continue;
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Interface is NOT available", "", "-[NRLinkManagerWiFi interfaceUnavailable]", 975);
          }
          v128 = *(id *)(a1 + 24);
          dispatch_assert_queue_V2(v128);

          v129 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = 0;

          v130 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = 0;

          objc_msgSend((id)a1, "reportEvent:details:", 11003, CFSTR("<nil>"));
          sub_100142200(a1);
          v131 = objc_msgSend(*(id *)(a1 + 152), "copy");
          v208 = 0u;
          v209 = 0u;
          v206 = 0u;
          v207 = 0u;
          v132 = v131;
          v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v206, &location, 16);
          if (v133)
          {
            v134 = *(_QWORD *)v207;
            do
            {
              for (n = 0; n != v133; n = (char *)n + 1)
              {
                if (*(_QWORD *)v207 != v134)
                  objc_enumerationMutation(v132);
                v136 = *(void **)(*((_QWORD *)&v206 + 1) + 8 * (_QWORD)n);
                if (objc_msgSend(v136, "subtype") == 101)
                {
                  objc_msgSend(v136, "setNoTransport:", 1);
                  objc_msgSend(v136, "cancelWithReason:", CFSTR("Interface went away"));
                }
              }
              v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v206, &location, 16);
            }
            while (v133);
          }
          goto LABEL_223;
        }
        v123 = *(id *)(a1 + 112);
        v124 = v108 == v123;

        if (v124)
        {
          v141 = *(id *)(a1 + 24);
          dispatch_assert_queue_V2(v141);

          if (*(_QWORD *)(a1 + 64))
          {
            if (qword_1001E4AB8 != -1)
              dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
            if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
            {
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d AWDL interface is NOT available", "", "-[NRLinkManagerWiFi awdlUnavailable]", 1363);
            }
            v142 = *(id *)(a1 + 24);
            dispatch_assert_queue_V2(v142);

            v143 = *(void **)(a1 + 64);
            *(_QWORD *)(a1 + 64) = 0;

            objc_msgSend((id)a1, "reportEvent:details:", 11005, CFSTR("<nil>"));
            WeakRetained = objc_loadWeakRetained((id *)(a1 + 160));
            objc_msgSend(WeakRetained, "localAWDLEndpointChanged:", 0);

            v145 = objc_msgSend(*(id *)(a1 + 152), "copy");
            v208 = 0u;
            v209 = 0u;
            v206 = 0u;
            v207 = 0u;
            v132 = v145;
            v146 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v206, &location, 16);
            if (v146)
            {
              v147 = *(_QWORD *)v207;
              do
              {
                for (ii = 0; ii != v146; ii = (char *)ii + 1)
                {
                  if (*(_QWORD *)v207 != v147)
                    objc_enumerationMutation(v132);
                  v149 = *(void **)(*((_QWORD *)&v206 + 1) + 8 * (_QWORD)ii);
                  if (objc_msgSend(v149, "subtype") == 102)
                  {
                    objc_msgSend(v149, "setNoTransport:", 1);
                    objc_msgSend(v149, "cancelWithReason:", CFSTR("Interface went away"));
                  }
                }
                v146 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v206, &location, 16);
              }
              while (v146);
            }
LABEL_223:

            continue;
          }
        }
        else
        {
          v125 = *(id *)(a1 + 128);
          v126 = v108 == v125;

          if (v126)
            sub_1001466B8(a1);
        }
      }
    }
    v105 = objc_msgSend(v178, "countByEnumeratingWithState:objects:count:", &v190, v211, 16);
  }
  while (v105);
LABEL_251:

  ++*(_QWORD *)(a1 + 144);
  *(_QWORD *)&v206 = 0;
  *((_QWORD *)&v206 + 1) = &v206;
  *(_QWORD *)&v207 = 0x2020000000;
  BYTE8(v207) = 0;
  v150 = *(id *)(a1 + 176);
  location = _NSConcreteStackBlock;
  v216 = 3221225472;
  v217 = sub_100146AA4;
  v218 = &unk_1001B8840;
  v151 = v150;
  v219 = v151;
  v220 = &v206;
  sub_1001437AC((uint64_t)NRLinkManagerWiFi, &location);
  v152 = *(unsigned __int8 *)(*((_QWORD *)&v206 + 1) + 24);

  _Block_object_dispose(&v206, 8);
  if (v152)
  {
    v153 = *(id *)(a1 + 104);
    if ((sub_10001EF68((uint64_t)v153) & 1) != 0)
    {
      v154 = 1;
      goto LABEL_258;
    }
    if (sub_100146970(a1))
    {
      v154 = *(_BYTE *)(a1 + 32) != 0;
LABEL_258:
      tob = v154;
    }
    else
    {
      tob = 0;
    }

  }
  else
  {
    tob = sub_100146970(a1) && *(_BYTE *)(a1 + 32) != 0;
  }
  v155 = *(id *)(a1 + 128);
  v156 = sub_10001EF68((uint64_t)v155);

  if (qword_1001E4AB8 != -1)
    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
  v157 = (id)qword_1001E4AB0;
  v158 = _NRLogIsLevelEnabled(v157, 1);

  if (v158)
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    v159 = (id)qword_1001E4AB0;
    _NRLogWithArgs(v159, 1, "%s%.30s:%-4d phs %d llphs %d", "", "-[NRLinkManagerWiFi processSCDUpdate:]", 2492, tob, v156);

  }
  if (((tob ^ (*(_BYTE *)(a1 + 37) != 0)) & 1) != 0 || (v169 & 1) != 0 && v156 != (*(_BYTE *)(a1 + 38) != 0))
  {
    *(_BYTE *)(a1 + 37) = tob;
    *(_BYTE *)(a1 + 38) = v156;
    v184 = 0u;
    v185 = 0u;
    v186 = 0u;
    v187 = 0u;
    v160 = *(id *)(a1 + 264);
    v161 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v184, v210, 16);
    if (v161)
    {
      v162 = *(_QWORD *)v185;
      do
      {
        for (jj = 0; jj != v161; jj = (char *)jj + 1)
        {
          if (*(_QWORD *)v185 != v162)
            objc_enumerationMutation(v160);
          v164 = *(_QWORD *)(*((_QWORD *)&v184 + 1) + 8 * (_QWORD)jj);
          if ((objc_opt_respondsToSelector(v164, "didUpdatePHSState:llphsActive:") & 1) != 0)
          {
            v165 = sub_10014CFBC();
            v181[0] = _NSConcreteStackBlock;
            v181[1] = 3221225472;
            v181[2] = sub_100146A5C;
            v181[3] = &unk_1001B8908;
            v181[4] = v164;
            v182 = tob;
            v183 = v156;
            dispatch_async(v165, v181);

          }
        }
        v161 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v184, v210, 16);
      }
      while (v161);
    }

  }
}

void sub_100145708(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

void sub_100145724(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t first_ifstate;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  if (a1)
  {
    v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    v3 = *(_QWORD **)(a1 + 104);
    if (v3)
      v3 = (_QWORD *)v3[7];
    v4 = v3;
    v5 = objc_msgSend(v4, "count");

    if (v5)
    {
      v6 = *(_QWORD **)(a1 + 104);
      if (v6)
        v6 = (_QWORD *)v6[7];
    }
    else
    {
      v7 = *(_QWORD **)(a1 + 104);
      if (v7)
        v7 = (_QWORD *)v7[8];
      v8 = v7;
      v9 = objc_msgSend(v8, "count");

      if (!v9)
        goto LABEL_15;
      v6 = *(_QWORD **)(a1 + 104);
      if (v6)
        v6 = (_QWORD *)v6[8];
    }
    v10 = v6;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v11, CFSTR("0")));

    if (v12)
    {
      if ((objc_msgSend(*(id *)(a1 + 56), "isEqual:", v12) & 1) != 0)
      {
        v13 = v12;
      }
      else
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
        {
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Interface is available", "", "-[NRLinkManagerWiFi interfaceAvailable]", 947);
        }
        v17 = objc_msgSend(*(id *)(a1 + 152), "copy");
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v18 = v17;
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
        if (v19)
        {
          v20 = v19;
          v21 = *(_QWORD *)v32;
          do
          {
            for (i = 0; i != v20; i = (char *)i + 1)
            {
              if (*(_QWORD *)v32 != v21)
                objc_enumerationMutation(v18);
              v23 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
              if (objc_msgSend(v23, "subtype") == 101)
              {
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localOuterEndpoint"));
                v25 = objc_msgSend(v24, "isEqual:", v12);

                if ((v25 & 1) == 0)
                {
                  objc_msgSend(v23, "setNoTransport:", 1);
                  objc_msgSend(v23, "cancelWithReason:", CFSTR("Local endpoint changed"));
                }
              }
            }
            v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
          }
          while (v20);
        }

        v13 = v12;
        v26 = *(id *)(a1 + 24);
        dispatch_assert_queue_V2(v26);

        objc_storeStrong((id *)(a1 + 56), v12);
        v27 = nwi_state_copy(objc_msgSend((id)a1, "reportEvent:detailsFormat:", 11003, CFSTR("%@"), *(_QWORD *)(a1 + 56)));
        if (v27)
        {
          v28 = v27;
          v29 = objc_msgSend(v13, "addressFamily");
          first_ifstate = nwi_state_get_first_ifstate(v28, v29);
          if ((sub_100146AEC((_QWORD *)a1, first_ifstate, (uint64_t)v29) & 1) == 0)
          {
            do
            {
              if (!first_ifstate)
                break;
              first_ifstate = nwi_ifstate_get_next(first_ifstate, v29);
            }
            while (!sub_100146AEC((_QWORD *)a1, first_ifstate, (uint64_t)v29));
          }
          nwi_state_release(v28);
        }

        sub_100140F10(a1);
      }
LABEL_44:

      return;
    }
LABEL_15:
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 17, "Could not get Wi-Fi endpoint");
    }
    v14 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v14);

    v15 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

    v16 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

    objc_msgSend((id)a1, "reportEvent:details:", 11003, CFSTR("<nil>"));
    v13 = 0;
    goto LABEL_44;
  }
}

void sub_100145BB0(id *a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  __CFString *v12;
  __CFString *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  unsigned __int8 v25;
  NSObject *v26;
  id v27;
  id v28;
  NSObject *v29;
  void *v30;
  id WeakRetained;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  if (a1)
  {
    v2 = a1[3];
    dispatch_assert_queue_V2(v2);

    v3 = a1[14];
    if (v3)
      v3 = (_QWORD *)v3[8];
    v4 = v3;
    v5 = objc_msgSend(v4, "count");

    if (!v5)
      goto LABEL_37;
    v6 = a1[14];
    v7 = v6;
    if (v6)
      v8 = (void *)*((_QWORD *)v6 + 8);
    else
      v8 = 0;
    v9 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    objc_opt_self(NRIKEv2Listener);
    if (qword_1001E44D8 != -1)
      dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
    v11 = (id)qword_1001E44D0;
    v12 = CFSTR("62743");
    if (!v11)
      v12 = 0;
    v13 = v12;
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v10, v13));

    if (v14)
    {
      if ((objc_msgSend(a1[8], "isEqual:", v14) & 1) == 0)
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
        {
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d AWDL interface is available", "", "-[NRLinkManagerWiFi awdlAvailable]", 1328);
        }
        v32 = (uint64_t)a1;
        v15 = objc_msgSend(a1[19], "copy");
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v16 = v15;
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v34;
          do
          {
            for (i = 0; i != v18; i = (char *)i + 1)
            {
              if (*(_QWORD *)v34 != v19)
                objc_enumerationMutation(v16);
              v21 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
              if (objc_msgSend(v21, "subtype") == 102)
              {
                v22 = objc_opt_class(NRLinkAWDL);
                if ((objc_opt_isKindOfClass(v21, v22) & 1) != 0)
                {
                  v23 = v21;
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localOuterEndpoint"));
                  v25 = objc_msgSend(v24, "isEqual:", v14);

                  if ((v25 & 1) == 0)
                  {
                    objc_msgSend(v23, "setNoTransport:", 1);
                    objc_msgSend(v23, "cancelWithReason:", CFSTR("Local endpoint changed"));
                  }

                }
                else
                {
                  if (qword_1001E4AB8 != -1)
                    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                  if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
                  {
                    if (qword_1001E4AB8 != -1)
                      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                    _NRLogWithArgs(qword_1001E4AB0, 17, "Invalid link %@", v21);
                  }
                }
              }
            }
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
          }
          while (v18);
        }

        v28 = v14;
        v29 = *(id *)(v32 + 24);
        dispatch_assert_queue_V2(v29);

        v30 = *(void **)(v32 + 64);
        *(_QWORD *)(v32 + 64) = v28;
        v14 = v28;

        objc_msgSend((id)v32, "reportEvent:detailsFormat:", 11005, CFSTR("%@"), *(_QWORD *)(v32 + 64));
        WeakRetained = objc_loadWeakRetained((id *)(v32 + 160));
        objc_msgSend(WeakRetained, "localAWDLEndpointChanged:", v14);

        sub_100140334(v32);
      }
    }
    else
    {
LABEL_37:
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 17, "Could not get Wi-Fi endpoint");
      }
      v26 = a1[3];
      dispatch_assert_queue_V2(v26);

      v27 = a1[8];
      a1[8] = 0;

      objc_msgSend(a1, "reportEvent:details:", 11005, CFSTR("<nil>"));
      v14 = 0;
    }

  }
}

void sub_1001460B4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  __objc2_class *v7;
  uint64_t v8;
  void *i;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  if (a1)
  {
    v1 = a1;
    v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    if (sub_10001EF68(*(_QWORD *)(v1 + 128)))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d IR interface is available", "", "-[NRLinkManagerWiFi irAvailable]", 1134);
      }
      v3 = objc_msgSend(*(id *)(v1 + 152), "copy");
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v4 = v3;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      if (v5)
      {
        v6 = v5;
        v7 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
        v8 = *(_QWORD *)v31;
        v29 = v1;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(_QWORD *)v31 != v8)
              objc_enumerationMutation(v4);
            v10 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v10, "subtype") == 104 && objc_msgSend(v10, "state") != 255)
            {
              v11 = objc_opt_class(&v7[43]);
              if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
              {
                v12 = v10;
                v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localOuterEndpoint"));
                if (objc_msgSend(v13, "addressFamily") != (id)2)
                {

                  goto LABEL_33;
                }
                v14 = *(id *)(v1 + 128);
                v15 = v14;
                if (v14)
                  v16 = (void *)*((_QWORD *)v14 + 7);
                else
                  v16 = 0;
                v17 = v16;
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localOuterEndpoint"));

                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "hostname"));
                v20 = objc_msgSend(v17, "containsObject:", v19);

                v1 = v29;
                v7 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
                if ((v20 & 1) == 0)
                  goto LABEL_13;
LABEL_33:
                v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localOuterEndpoint"));
                if (objc_msgSend(v21, "addressFamily") == (id)30)
                {
                  v22 = *(id *)(v1 + 128);
                  v23 = v22;
                  if (v22)
                    v24 = (void *)*((_QWORD *)v22 + 8);
                  else
                    v24 = 0;
                  v25 = v24;
                  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localOuterEndpoint"));

                  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "hostname"));
                  v28 = objc_msgSend(v25, "containsObject:", v27);

                  v1 = v29;
                  v7 = &OBJC_METACLASS___NRAnalyticsLocalDevice;
                  if ((v28 & 1) != 0)
                    goto LABEL_14;
LABEL_13:
                  objc_msgSend(v12, "setNoTransport:", 1);
                  objc_msgSend(v12, "cancelWithReason:", CFSTR("Local endpoint changed"));
                }
                else
                {

                }
LABEL_14:

                continue;
              }
              if (qword_1001E4AB8 != -1)
                dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
              if (_NRLogIsLevelEnabled(qword_1001E4AB0, 17))
              {
                if (qword_1001E4AB8 != -1)
                  dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
                _NRLogWithArgs(qword_1001E4AB0, 17, "Invalid link %@", v10);
              }
            }
          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        }
        while (v6);
      }

      sub_100141694(v1);
    }
  }
}

void sub_1001464BC(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int IsLevelEnabled;
  _QWORD *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 3) != 1004)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      v5 = *(unsigned int *)(v4 + 16);
    else
      v5 = 0;
    v9 = v3;
    if (*(_QWORD *)(a1 + 56) == v5)
    {
      if (sub_10001EF68(v4))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v3 = v9;
        if (v6 == v9[13])
        {
          sub_100145724(*(_QWORD *)(a1 + 40));
          goto LABEL_23;
        }
        if (v6 == v9[14])
        {
          sub_100145BB0(*(id **)(a1 + 40));
          goto LABEL_23;
        }
        if (v6 == v9[16])
        {
          sub_1001460B4(*(_QWORD *)(a1 + 40));
LABEL_23:
          v3 = v9;
        }
      }
      else
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        IsLevelEnabled = _NRLogIsLevelEnabled(qword_1001E4AB0, 1);
        v3 = v9;
        if (IsLevelEnabled)
        {
          if (qword_1001E4AB8 != -1)
            dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
          _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d WiFi went away while quiescing");
          goto LABEL_23;
        }
      }
    }
    else
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v7 = _NRLogIsLevelEnabled(qword_1001E4AB0, 1);
      v3 = v9;
      if (v7)
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Not processing stale availability update");
        goto LABEL_23;
      }
    }
  }

}

void sub_1001466B8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (a1)
    v2 = *(void **)(a1 + 24);
  else
    v2 = 0;
  v3 = v2;
  dispatch_assert_queue_V2(v3);

  if ((sub_10001EF68(*(_QWORD *)(a1 + 128)) & 1) == 0)
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d IR interface is NOT available", "", "-[NRLinkManagerWiFi irUnavailable]", 1285);
    }
  }
  v4 = objc_msgSend(*(id *)(a1 + 152), "copy");
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v10, "subtype") == 104 && objc_msgSend(v10, "state") != 255)
        {
          if ((sub_10001EF68(*(_QWORD *)(a1 + 128)) & 1) == 0)
          {
            objc_msgSend(v10, "setNoTransport:", 1);
            objc_msgSend(v10, "cancelWithReason:", CFSTR("Interface went away"));
          }
          v11 = *(id *)(a1 + 128);
          v12 = v11;
          if (v11)
            v13 = (void *)*((_QWORD *)v11 + 9);
          else
            v13 = 0;
          v14 = v13;
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "nrUUID"));

          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "remoteOuterEndpoint"));
          LOBYTE(v15) = objc_msgSend(v16, "containsObject:", v17);

          if ((v15 & 1) == 0)
            objc_msgSend(v10, "cancelWithReason:", CFSTR("peer went away"));

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

}

BOOL sub_100146970(uint64_t a1)
{
  id v1;
  id v2;
  _BOOL8 v3;
  _QWORD v5[4];
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if (!a1)
    return 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v1 = *(id *)(a1 + 176);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100146A70;
  v5[3] = &unk_1001B8840;
  v2 = v1;
  v6 = v2;
  v7 = &v8;
  sub_1001437AC((uint64_t)NRLinkManagerWiFi, v5);
  v3 = *((_BYTE *)v9 + 24) != 0;

  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_100146A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100146A5C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didUpdatePHSState:llphsActive:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

id sub_100146A70(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "opMode");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (result & 8) != 0;
  return result;
}

void sub_100146AA4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentKnownNetworkProfile"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "isPersonalHotspot");

}

uint64_t sub_100146AEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  uint64_t ifname;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  unsigned int v12;
  uint64_t signature;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  int v19;

  if (a1)
    v6 = (void *)a1[3];
  else
    v6 = 0;
  v7 = v6;
  dispatch_assert_queue_V2(v7);

  if (!a2)
    return 0;
  ifname = nwi_ifstate_get_ifname(a2);
  v9 = (_QWORD *)a1[13];
  if (v9)
    v9 = (_QWORD *)v9[3];
  v10 = v9;
  v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", ifname);
  v12 = objc_msgSend(v10, "isEqualToString:", v11);

  if (!v12)
    return 0;
  v19 = 0;
  signature = nwi_ifstate_get_signature(a2, a3, &v19);
  if (signature)
  {
    v14 = signature;
    v15 = objc_alloc((Class)NSData);
    v16 = objc_msgSend(v15, "initWithBytes:length:", v14, v19);
    v17 = (void *)a1[10];
    a1[10] = v16;
  }
  else
  {
    v17 = (void *)a1[10];
    a1[10] = 0;
  }

  return 1;
}

void sub_100146C10(id a1)
{
  if (MGGetBoolAnswer(CFSTR("wi-fi")))
  {
    if (objc_opt_class(CWFInterface))
      byte_1001E4AA0 = 1;
  }
}

uint64_t sub_100146C4C(uint64_t result)
{
  if (result)
    return sub_10001EF68(*(_QWORD *)(result + 128));
  return result;
}

void sub_100146C64(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;

  v5 = a2;
  if (a1)
  {
    v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    if ((objc_msgSend(*(id *)(a1 + 88), "isEqual:", v5) & 1) == 0)
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Setting the peer Wi-Fi signature as %@ ----> %@", "", "-[NRLinkManagerWiFi setPeerWiFiSignature:]", 561, *(_QWORD *)(a1 + 88), v5);
      }
      objc_storeStrong((id *)(a1 + 88), a2);
    }
  }

}

uint64_t sub_100146D88(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  __CFString *v4;
  __CFString *v5;

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "hostname"));
  objc_opt_self(NRIKEv2Listener);
  if (qword_1001E44D8 != -1)
    dispatch_once(&qword_1001E44D8, &stru_1001B5E70);
  v3 = (id)qword_1001E44D0;
  v4 = CFSTR("62743");
  if (!v3)
    v4 = 0;
  v5 = v4;
  v1 = objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", v2, v5));

  return v1;
}

void sub_100146E4C(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  unsigned __int8 v20;
  char *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *j;
  void *v32;
  void *v33;
  unsigned __int8 v34;
  void *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  id v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  _BYTE v50[128];

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = a1[3];
    dispatch_assert_queue_V2(v7);

    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v8 = v5;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
      v12 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v46 != v12)
            objc_enumerationMutation(v8);
          v14 = (void *)sub_100146D88(*(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i));
          if (v14)
          {
            if (!v11)
              v11 = objc_alloc_init((Class)NSMutableArray);
            objc_msgSend(v11, "addObject:", v14);
          }

        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }

    v15 = a1[13];
    if (v15)
      v15 = (_QWORD *)v15[9];
    v16 = v15;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v6));

    if (!v17
      || (v18 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", v11),
          v19 = objc_msgSend(objc_alloc((Class)NSSet), "initWithArray:", v17),
          v20 = objc_msgSend(v18, "isEqualToSet:", v19),
          v19,
          v18,
          (v20 & 1) == 0))
    {
      v21 = sub_10012FFF4((uint64_t)NRDLocalDevice, v6);
      v40 = v17;
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Setting the peer Wi-Fi endpoints as %@ ----> %@ for %@", "", "-[NRLinkManagerWiFi setPeerWiFiEndpoints:forNRUUID:]", 600, v17, v11, v21);
      }
      v22 = a1[13];
      v23 = v22;
      v39 = v5;
      v37 = v21;
      if (v22)
        v24 = (void *)*((_QWORD *)v22 + 9);
      else
        v24 = 0;
      v25 = v24;
      objc_msgSend(v25, "setObject:forKeyedSubscript:", v11, v6);

      v38 = (uint64_t)a1;
      v26 = objc_msgSend(a1[19], "copy");
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v27 = v26;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v42;
        do
        {
          for (j = 0; j != v29; j = (char *)j + 1)
          {
            if (*(_QWORD *)v42 != v30)
              objc_enumerationMutation(v27);
            v32 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v32, "subtype") == 101)
            {
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "remoteOuterEndpoint"));
              v34 = objc_msgSend(v11, "containsObject:", v33);

              if ((v34 & 1) == 0)
              {
                v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "nrUUID"));
                v36 = objc_msgSend(v35, "isEqual:", v6);

                if (v36)
                  objc_msgSend(v32, "cancelWithReason:", CFSTR("Peer Wi-Fi endpoint changed"));
              }
            }
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
        }
        while (v29);
      }

      sub_100140F10(v38);
      v5 = v39;
      v17 = v40;
    }

  }
}

id sub_10014725C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v3 = a2;
    v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    v5 = *(_QWORD **)(a1 + 104);
    if (v5)
      v5 = (_QWORD *)v5[9];
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v3));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstObject"));
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

void sub_1001472F4(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  unsigned int v32;
  char *v33;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  void *v41;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = a1[3];
    dispatch_assert_queue_V2(v7);

    v8 = (void *)sub_100146D88(v5);
    v9 = a1[14];
    if (v9)
      v9 = (_QWORD *)v9[9];
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v6));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

    if (!v12 || (objc_msgSend(v12, "isEqual:", v8) & 1) == 0)
    {
      v34 = v12;
      v13 = sub_10012FFF4((uint64_t)NRDLocalDevice, v6);
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
      {
        if (qword_1001E4AB8 != -1)
          dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
        v14 = (void *)qword_1001E4AB0;
        v15 = a1[14];
        v16 = v14;
        v17 = v8;
        if (v15)
          v18 = (void *)v15[9];
        else
          v18 = 0;
        v19 = v18;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v6));
        _NRLogWithArgs(v16, 1, "%s%.30s:%-4d Setting the peer AWDL endpoint as %@ ----> %@ for %@", "", "-[NRLinkManagerWiFi setPeerAWDLEndpoint:nrUUID:]", 1054, v20, v17, v13);

        v8 = v17;
      }
      if (v8)
      {
        v41 = v8;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
      }
      else
      {
        v21 = 0;
      }
      v22 = a1[14];
      if (v22)
        v22 = (_QWORD *)v22[9];
      v33 = v13;
      v23 = v22;
      objc_msgSend(v23, "setObject:forKeyedSubscript:", v21, v6);

      v35 = v8;
      if (v8)

      v24 = objc_msgSend(a1[19], "copy");
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v25 = v24;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v37;
        do
        {
          for (i = 0; i != v27; i = (char *)i + 1)
          {
            if (*(_QWORD *)v37 != v28)
              objc_enumerationMutation(v25);
            v30 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v30, "subtype") == 102)
            {
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "nrUUID"));
              v32 = objc_msgSend(v31, "isEqual:", v6);

              if (v32)
                objc_msgSend(v30, "cancelWithReason:", CFSTR("Peer AWDL endpoint changed"));
            }
          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
        }
        while (v27);
      }

      sub_100140334((uint64_t)a1);
      v12 = v34;
      v8 = v35;
    }

  }
  else
  {
    v8 = v5;
  }

}

void sub_100147674(uint64_t a1, int a2, void *a3)
{
  NSObject *v5;
  unsigned int v6;
  id v7;

  v7 = a3;
  if (a1)
  {
    v5 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v5);

    if (*(_DWORD *)(a1 + 12) == 1003)
    {
      v6 = objc_msgSend(*(id *)(a1 + 208), "containsObject:", v7);
      if (a2)
      {
        if ((v6 & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 208), "addObject:", v7);
LABEL_8:
          sub_100147730(a1);
        }
      }
      else if (v6)
      {
        objc_msgSend(*(id *)(a1 + 208), "removeObject:", v7);
        if (!objc_msgSend(*(id *)(a1 + 208), "count"))
          goto LABEL_8;
      }
    }
  }

}

void sub_100147730(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  id v27;
  void *v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  NSObject *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  NSObject *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  id v52;
  _QWORD v53[4];
  id v54;
  id v55;
  _QWORD v56[4];
  id v57;
  id v58;
  _QWORD v59[4];
  id v60;
  id v61;
  id v62;
  id v63;
  _QWORD v64[4];
  id v65;
  id v66;
  _QWORD block[4];
  id v68;
  id v69;
  id v70;
  id v71;
  id location;

  if (a1)
    v2 = *(void **)(a1 + 24);
  else
    v2 = 0;
  v3 = v2;
  dispatch_assert_queue_V2(v3);

  if (qword_1001E4AB8 != -1)
    dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
  if (_NRLogIsLevelEnabled(qword_1001E4AB0, 0))
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d request to update WiFi state", "", "-[NRLinkManagerWiFi updateWiFiState]", 1766);
  }
  v4 = objc_msgSend(*(id *)(a1 + 208), "count");
  v5 = *(void **)(a1 + 192);
  if (v4)
  {
    if (v5)
      goto LABEL_19;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CWFActivity activityWithType:reason:](CWFActivity, "activityWithType:reason:", 1, CFSTR("Terminus Background")));
    objc_storeStrong((id *)(a1 + 192), v6);
    v7 = *(id *)(a1 + 176);
    v8 = *(id *)(a1 + 24);
    objc_initWeak(&location, (id)a1);
    if (qword_1001E4AC0 != -1)
      dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
    v9 = (void *)qword_1001E4AC8;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100147F94;
    block[3] = &unk_1001B8818;
    v10 = v7;
    v68 = v10;
    v11 = v6;
    v69 = v11;
    v12 = v8;
    v70 = v12;
    v13 = v9;
    objc_copyWeak(&v71, &location);
    dispatch_async(v13, block);

    objc_msgSend((id)a1, "reportEvent:details:", 11001, CFSTR("Background"));
    objc_destroyWeak(&v71);

    objc_destroyWeak(&location);
  }
  else
  {
    if (!v5)
      goto LABEL_19;
    v14 = v5;
    v15 = *(void **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;

    v16 = *(id *)(a1 + 176);
    if (qword_1001E4AC0 != -1)
      dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
    v17 = qword_1001E4AC8;
    v64[0] = _NSConcreteStackBlock;
    v64[1] = 3221225472;
    v64[2] = sub_1001480AC;
    v64[3] = &unk_1001B8778;
    v65 = v16;
    v66 = v14;
    v11 = v14;
    v10 = v16;
    dispatch_async(v17, v64);
    objc_msgSend((id)a1, "reportEvent:details:", 11002, CFSTR("Background"));

    v12 = v65;
  }

LABEL_19:
  v18 = *(void **)(a1 + 200);
  if (*(_BYTE *)(a1 + 34))
  {
    if (v18)
      goto LABEL_29;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[CWFActivity activityWithType:reason:](CWFActivity, "activityWithType:reason:", 3, CFSTR("Terminus Direct-to-Cloud")));
    objc_storeStrong((id *)(a1 + 200), v19);
    v20 = *(id *)(a1 + 176);
    v21 = *(id *)(a1 + 24);
    objc_initWeak(&location, (id)a1);
    if (qword_1001E4AC0 != -1)
      dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
    v22 = (void *)qword_1001E4AC8;
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472;
    v59[2] = sub_1001480B8;
    v59[3] = &unk_1001B8818;
    v23 = v20;
    v60 = v23;
    v24 = v19;
    v61 = v24;
    v25 = v21;
    v62 = v25;
    v26 = v22;
    objc_copyWeak(&v63, &location);
    dispatch_async(v26, v59);

    objc_msgSend((id)a1, "reportEvent:details:", 11001, CFSTR("Direct-to-Cloud"));
    objc_destroyWeak(&v63);

    objc_destroyWeak(&location);
  }
  else
  {
    if (!v18)
      goto LABEL_29;
    v27 = v18;
    v28 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;

    v29 = *(id *)(a1 + 176);
    if (qword_1001E4AC0 != -1)
      dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
    v30 = qword_1001E4AC8;
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472;
    v56[2] = sub_1001481D0;
    v56[3] = &unk_1001B8778;
    v57 = v29;
    v58 = v27;
    v24 = v27;
    v23 = v29;
    dispatch_async(v30, v56);
    objc_msgSend((id)a1, "reportEvent:details:", 11002, CFSTR("Direct-to-Cloud"));

    v25 = v57;
  }

LABEL_29:
  v31 = *(id *)(a1 + 24);
  dispatch_assert_queue_V2(v31);

  if (*(_QWORD *)(a1 + 192))
  {
    if (*(_QWORD *)(a1 + 248) != 1)
    {
      v32 = 1;
      goto LABEL_38;
    }
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 200);
    if (v33)
      v34 = 3;
    else
      v34 = 0;
    if (v34 != *(_QWORD *)(a1 + 248))
    {
      if (!v33)
      {
        v43 = *(void **)(a1 + 184);
        if (!v43)
        {
          v32 = 0;
          goto LABEL_47;
        }
        v44 = v43;
        v45 = *(void **)(a1 + 184);
        *(_QWORD *)(a1 + 184) = 0;

        v46 = *(id *)(a1 + 176);
        if (qword_1001E4AC0 != -1)
          dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
        v47 = qword_1001E4AC8;
        v53[0] = _NSConcreteStackBlock;
        v53[1] = 3221225472;
        v53[2] = sub_1001481DC;
        v53[3] = &unk_1001B8778;
        v54 = v46;
        v55 = v44;
        v40 = v44;
        v39 = v46;
        dispatch_async(v47, v53);
        objc_msgSend((id)a1, "reportEvent:details:", 11002, CFSTR("WoW"));

        v32 = 0;
        v41 = v54;
        goto LABEL_46;
      }
      v32 = 3;
LABEL_38:
      if (*(_QWORD *)(a1 + 184))
      {
LABEL_47:
        *(_QWORD *)(a1 + 248) = v32;
        goto LABEL_48;
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[CWFActivity activityWithType:reason:](CWFActivity, "activityWithType:reason:", 4, CFSTR("Terminus WoW")));
      objc_storeStrong((id *)(a1 + 184), v35);
      v36 = *(id *)(a1 + 176);
      v37 = *(id *)(a1 + 24);
      objc_initWeak(&location, (id)a1);
      if (qword_1001E4AC0 != -1)
        dispatch_once(&qword_1001E4AC0, &stru_1001B8948);
      v38 = (void *)qword_1001E4AC8;
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_1001481E8;
      v48[3] = &unk_1001B8818;
      v39 = v36;
      v49 = v39;
      v40 = v35;
      v50 = v40;
      v41 = v37;
      v51 = v41;
      v42 = v38;
      objc_copyWeak(&v52, &location);
      dispatch_async(v42, v48);

      objc_msgSend((id)a1, "reportEvent:details:", 11001, CFSTR("WoW"));
      objc_destroyWeak(&v52);

      objc_destroyWeak(&location);
LABEL_46:

      goto LABEL_47;
    }
  }
LABEL_48:
  sub_100148300((id)a1);
}

void sub_100147F70(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100147F94(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  void **block;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id v14;
  id v15;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v15 = 0;
  v4 = objc_msgSend(v2, "beginActivity:error:", v3, &v15);
  v5 = v15;
  if ((v4 & 1) == 0)
  {
    v6 = *(NSObject **)(a1 + 48);
    block = _NSConcreteStackBlock;
    v10 = 3221225472;
    v11 = sub_100148AD8;
    v12 = &unk_1001B87F0;
    objc_copyWeak(&v14, (id *)(a1 + 56));
    v13 = *(id *)(a1 + 40);
    dispatch_async(v6, &block);
    v7 = sub_100140BFC();
    LOBYTE(v6) = _NRLogIsLevelEnabled(v7, 17);

    if ((v6 & 1) != 0)
    {
      v8 = sub_100140BFC();
      _NRLogWithArgs(v8, 17, "[CWFInterface beginActivity:CWFActivityTypeBackgroundApp] failed: %@", v5, block, v10, v11, v12);

    }
    objc_destroyWeak(&v14);
  }

}

void sub_100148098(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1001480AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endActivity:", *(_QWORD *)(a1 + 40));
}

void sub_1001480B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  void **block;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id v14;
  id v15;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v15 = 0;
  v4 = objc_msgSend(v2, "beginActivity:error:", v3, &v15);
  v5 = v15;
  if ((v4 & 1) == 0)
  {
    v6 = *(NSObject **)(a1 + 48);
    block = _NSConcreteStackBlock;
    v10 = 3221225472;
    v11 = sub_100148A80;
    v12 = &unk_1001B87F0;
    objc_copyWeak(&v14, (id *)(a1 + 56));
    v13 = *(id *)(a1 + 40);
    dispatch_async(v6, &block);
    v7 = sub_100140BFC();
    LOBYTE(v6) = _NRLogIsLevelEnabled(v7, 17);

    if ((v6 & 1) != 0)
    {
      v8 = sub_100140BFC();
      _NRLogWithArgs(v8, 17, "[CWFInterface beginActivity:CWFActivityTypeWiFiBound] failed: %@", v5, block, v10, v11, v12);

    }
    objc_destroyWeak(&v14);
  }

}

void sub_1001481BC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1001481D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endActivity:", *(_QWORD *)(a1 + 40));
}

id sub_1001481DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endActivity:", *(_QWORD *)(a1 + 40));
}

void sub_1001481E8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  void **block;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id v14;
  id v15;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v15 = 0;
  v4 = objc_msgSend(v2, "beginActivity:error:", v3, &v15);
  v5 = v15;
  if ((v4 & 1) == 0)
  {
    v6 = *(NSObject **)(a1 + 48);
    block = _NSConcreteStackBlock;
    v10 = 3221225472;
    v11 = sub_100148A28;
    v12 = &unk_1001B87F0;
    objc_copyWeak(&v14, (id *)(a1 + 56));
    v13 = *(id *)(a1 + 40);
    dispatch_async(v6, &block);
    v7 = sub_100140BFC();
    LOBYTE(v6) = _NRLogIsLevelEnabled(v7, 17);

    if ((v6 & 1) != 0)
    {
      v8 = sub_100140BFC();
      _NRLogWithArgs(v8, 17, "[CWFInterface beginActivity:CWFActivityTypeEnableWakeOnWireless] failed: %@", v5, block, v10, v11, v12);

    }
    objc_destroyWeak(&v14);
  }

}

void sub_1001482EC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100148300(id val)
{
  void *v2;
  dispatch_time_t v3;
  NSObject *v4;
  _QWORD block[4];
  id v6[2];
  id location;

  v2 = (void *)(*((_QWORD *)val + 32) + 1);
  *((_QWORD *)val + 32) = v2;
  objc_initWeak(&location, val);
  v3 = dispatch_time(0, 500000000);
  v4 = *((id *)val + 3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001483D4;
  block[3] = &unk_1001B87C8;
  objc_copyWeak(v6, &location);
  v6[1] = v2;
  dispatch_after(v3, v4, block);

  objc_destroyWeak(v6);
  objc_destroyWeak(&location);
}

void sub_1001483D4(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *i;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 3) == 1003 && WeakRetained[32] == *(id *)(a1 + 40))
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[28], "allValues"));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v8)
            objc_enumerationMutation(v4);
          v7 |= (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i), "unsignedLongLongValue");
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }

    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (!_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
    {
LABEL_47:
      v19 = objc_alloc_init((Class)NSMutableSet);
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[29], "allValues"));
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v37;
        do
        {
          for (j = 0; j != v22; j = (char *)j + 1)
          {
            if (*(_QWORD *)v37 != v23)
              objc_enumerationMutation(v20);
            objc_msgSend(v19, "addObjectsFromArray:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j));
          }
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
        }
        while (v22);
      }

      v25 = v3[31];
      if (v7)
      {
        if (!v25)
        {
LABEL_62:

          goto LABEL_63;
        }
      }
      else if (v25)
      {
        v26 = objc_alloc((Class)NSString);
        v35 = (uint64_t)v3[31];
        v27 = objc_msgSend(v26, "initWithFormat:", CFSTR("Reporting WiFi client type %zd with no reason"));
        sub_100109270(CFSTR("NRLinkManagerWiFi"), CFSTR("PowerLog"), v27, 0, 0, v28, v29, v30, v35);

      }
      v31 = objc_alloc_init((Class)NSMutableDictionary);
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v3[31]));
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, CFSTR("WiFiClientType"));

      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3[23] != 0));
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v33, CFSTR("WiFiWoWState"));

      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v7));
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v34, CFSTR("WiFiAssertionReason"));

      objc_msgSend(v31, "setObject:forKeyedSubscript:", v19, CFSTR("WiFiAssertionClients"));
      if ((objc_msgSend(v3[30], "isEqualToDictionary:", v31) & 1) == 0)
      {
        sub_100107BA4(CFSTR("NetworkRelay Wi-Fi Assertion"), v31);
        objc_storeStrong(v3 + 30, v31);
      }

      goto LABEL_62;
    }
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    v10 = (id)qword_1001E4AB0;
    v11 = objc_alloc_init((Class)NSMutableString);
    if ((v7 & 2) != 0)
    {
      v12 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "RangeExtension");
      if (objc_msgSend(v11, "length"))
        objc_msgSend(v11, "appendString:", CFSTR(", "));
      objc_msgSend(v11, "appendString:", v12);

      if ((v7 & 4) == 0)
      {
LABEL_19:
        if ((v7 & 8) == 0)
          goto LABEL_20;
        goto LABEL_31;
      }
    }
    else if ((v7 & 4) == 0)
    {
      goto LABEL_19;
    }
    v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "PreferWiFi");
    if (objc_msgSend(v11, "length"))
      objc_msgSend(v11, "appendString:", CFSTR(", "));
    objc_msgSend(v11, "appendString:", v13);

    if ((v7 & 8) == 0)
    {
LABEL_20:
      if ((v7 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_34;
    }
LABEL_31:
    v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "LinkRecommendation");
    if (objc_msgSend(v11, "length"))
      objc_msgSend(v11, "appendString:", CFSTR(", "));
    objc_msgSend(v11, "appendString:", v14);

    if ((v7 & 0x10) == 0)
    {
LABEL_21:
      if ((v7 & 0x20) == 0)
        goto LABEL_22;
      goto LABEL_37;
    }
LABEL_34:
    v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "ForcedWoW");
    if (objc_msgSend(v11, "length"))
      objc_msgSend(v11, "appendString:", CFSTR(", "));
    objc_msgSend(v11, "appendString:", v15);

    if ((v7 & 0x20) == 0)
    {
LABEL_22:
      if ((v7 & 0x40) == 0)
        goto LABEL_23;
      goto LABEL_40;
    }
LABEL_37:
    v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "PrimaryLink");
    if (objc_msgSend(v11, "length"))
      objc_msgSend(v11, "appendString:", CFSTR(", "));
    objc_msgSend(v11, "appendString:", v16);

    if ((v7 & 0x40) == 0)
    {
LABEL_23:
      if ((v7 & 0x80) == 0)
      {
LABEL_46:
        _NRLogWithArgs(v10, 1, "%s%.30s:%-4d Reporting Wi-Fi assertion reason mask: %@", "", "-[NRLinkManagerWiFi reportToPowerlog]_block_invoke", 1505, v11);

        goto LABEL_47;
      }
LABEL_43:
      v18 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "AutoLinkUpgrade");
      if (objc_msgSend(v11, "length"))
        objc_msgSend(v11, "appendString:", CFSTR(", "));
      objc_msgSend(v11, "appendString:", v18);

      goto LABEL_46;
    }
LABEL_40:
    v17 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", "DirectToCloud");
    if (objc_msgSend(v11, "length"))
      objc_msgSend(v11, "appendString:", CFSTR(", "));
    objc_msgSend(v11, "appendString:", v17);

    if ((v7 & 0x80) == 0)
      goto LABEL_46;
    goto LABEL_43;
  }
LABEL_63:

}

void sub_100148A28(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)WeakRetained[23];
    if (v3 == *(void **)(a1 + 32))
    {
      WeakRetained[23] = 0;
      v4 = WeakRetained;

      WeakRetained = v4;
    }
  }

}

void sub_100148A80(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)WeakRetained[25];
    if (v3 == *(void **)(a1 + 32))
    {
      WeakRetained[25] = 0;
      v4 = WeakRetained;

      WeakRetained = v4;
    }
  }

}

void sub_100148AD8(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  _QWORD *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)WeakRetained[24];
    if (v3 == *(void **)(a1 + 32))
    {
      WeakRetained[24] = 0;
      v4 = WeakRetained;

      WeakRetained = v4;
    }
  }

}

void sub_100148B30(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  int IsLevelEnabled;
  id v8;
  id v9;

  v3 = a2;
  if (a1)
  {
    v9 = v3;
    if (v3)
    {
      v4 = (void *)a1[28];
      if (v4)
        objc_msgSend(v4, "setObject:forKeyedSubscript:", 0, v9);
      v5 = (void *)a1[29];
      if (v5)
        objc_msgSend(v5, "setObject:forKeyedSubscript:", 0, v9);
      sub_100148300(a1);
    }
    else
    {
      v6 = sub_100140BFC();
      IsLevelEnabled = _NRLogIsLevelEnabled(v6, 17);

      v3 = 0;
      if (!IsLevelEnabled)
        goto LABEL_9;
      v8 = sub_100140BFC();
      _NRLogWithArgs(v8, 17, "%s called with null identifier", "-[NRLinkManagerWiFi removeAssertionReasonForIdentifier:]");

    }
    v3 = v9;
  }
LABEL_9:

}

void sub_100148BF4(id *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  int IsLevelEnabled;
  id v17;
  id v18;

  v18 = a3;
  v7 = a4;
  if (a1)
  {
    v8 = v18;
    if (v18)
    {
      if (!a1[28])
      {
        v9 = objc_alloc_init((Class)NSMutableDictionary);
        v10 = a1[28];
        a1[28] = v9;

        v8 = v18;
      }
      if (a1[29])
      {
        if (a2)
        {
LABEL_7:
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a2));
          objc_msgSend(a1[28], "setObject:forKeyedSubscript:", v11, v18);

          v12 = v7;
LABEL_10:
          objc_msgSend(a1[29], "setObject:forKeyedSubscript:", v12, v18);
          sub_100148300(a1);
          goto LABEL_11;
        }
      }
      else
      {
        v13 = objc_alloc_init((Class)NSMutableDictionary);
        v14 = a1[29];
        a1[29] = v13;

        v8 = v18;
        if (a2)
          goto LABEL_7;
      }
      objc_msgSend(a1[28], "setObject:forKeyedSubscript:", 0, v8);
      v12 = 0;
      goto LABEL_10;
    }
    v15 = sub_100140BFC();
    IsLevelEnabled = _NRLogIsLevelEnabled(v15, 17);

    if (IsLevelEnabled)
    {
      v17 = sub_100140BFC();
      _NRLogWithArgs(v17, 17, "%s called with null identifier", "-[NRLinkManagerWiFi addAssertionReasonWithMask:identifier:clients:]");

    }
  }
LABEL_11:

}

void sub_100148D6C(uint64_t a1, char a2)
{
  NSObject *v4;

  if (a1)
  {
    v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    if (*(_QWORD *)(a1 + 216))
    {
      *(_BYTE *)(a1 + 34) = a2;
      sub_100147730(a1);
    }
  }
}

BOOL sub_100148DDC(_BOOL8 result)
{
  uint64_t v1;
  NSObject *v2;

  if (result)
  {
    v1 = result;
    v2 = *(id *)(result + 24);
    dispatch_assert_queue_V2(v2);

    return *(_DWORD *)(v1 + 40) > 0;
  }
  return result;
}

uint64_t sub_100148E24(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;

  if (result)
  {
    v1 = result;
    v2 = *(id *)(result + 24);
    dispatch_assert_queue_V2(v2);

    *(_DWORD *)(v1 + 48) += *(_DWORD *)(v1 + 40);
    sub_100143440(v1, 0);
    *(_BYTE *)(v1 + 33) = 0;
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    result = _NRLogIsLevelEnabled(qword_1001E4AB0, 0);
    if ((_DWORD)result)
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      return _NRLogWithArgs(qword_1001E4AB0, 0, "%s%.30s:%-4d cleared prefer Wi-Fi asserts (active=%d, cleared=%d)", "", "-[NRLinkManagerWiFi clearPreferWiFiAsserts]", 1878, *(_DWORD *)(v1 + 40), *(_DWORD *)(v1 + 48));
    }
  }
  return result;
}

BOOL sub_100148F4C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  char v6;
  id v7;
  void *v8;
  const char *v9;
  _BOOL8 v10;
  id v12;
  int IsLevelEnabled;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  if (!a1)
    return 0;
  v2 = *(id *)(a1 + 24);
  dispatch_assert_queue_V2(v2);

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v3 = *(id *)(a1 + 176);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100149188;
  v15[3] = &unk_1001B8840;
  v17 = &v18;
  v4 = v3;
  v16 = v4;
  if (sub_1001437AC((uint64_t)NRLinkManagerWiFi, v15))
  {
    v12 = sub_100140BFC();
    IsLevelEnabled = _NRLogIsLevelEnabled(v12, 16);

    if (IsLevelEnabled)
    {
      v14 = sub_100140BFC();
      _NRLogWithArgs(v14, 16, "%s%.30s:%-4d Timed out getting WiFi power state, assuming OFF", "", "-[NRLinkManagerWiFi isWiFiPoweredOn]", 1902);

    }
    v10 = 0;
  }
  else
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    v5 = (id)qword_1001E4AB0;
    v6 = _NRLogIsLevelEnabled(v5, 1);

    if ((v6 & 1) != 0)
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v7 = (id)qword_1001E4AB0;
      v8 = v7;
      if (*((_BYTE *)v19 + 24))
        v9 = "ON";
      else
        v9 = "OFF";
      _NRLogWithArgs(v7, 1, "%s%.30s:%-4d WiFi power state = %s", "", "-[NRLinkManagerWiFi isWiFiPoweredOn]", 1899, v9);

    }
    v10 = *((_BYTE *)v19 + 24) != 0;
  }

  _Block_object_dispose(&v18, 8);
  return v10;
}

void sub_100149170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100149188(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "powerOn");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1001491B8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceNames", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6), "isEqualToString:", *(_QWORD *)(a1 + 40)))
        {
          v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "SSID"));
          v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          v9 = *(void **)(v8 + 40);
          *(_QWORD *)(v8 + 40) = v7;

        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void sub_1001492DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "countryCode"));
  v3 = v2;
  if (v2 && objc_msgSend(v2, "compare:options:", CFSTR("XZ"), 1))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    v4 = *(void **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    obj = *(id *)(v6 + 40);
    v7 = objc_msgSend(v4, "setCompanionCountryCode:error:", v5, &obj);
    objc_storeStrong((id *)(v6 + 40), obj);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7;
  }

}

void sub_100149384(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "countryCode"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1001493BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _BOOL8 v4;
  _BOOL8 v5;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 37) != 0;
    v5 = *(unsigned __int8 *)(v3 + 38) != 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return objc_msgSend(v2, "didUpdatePHSState:llphsActive:", v4, v5);
}

void sub_100149404(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "NANData"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interfaceName"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100149458(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  int v6;
  id WeakRetained;
  unsigned int v8;

  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v2 = (id)qword_1001E4708;
  v3 = v2;
  if (v2)
    v4 = (void *)*((_QWORD *)v2 + 12);
  else
    v4 = 0;
  v5 = v4;
  v6 = sub_100061594((uint64_t)v5, 0);

  if (v6 != (*(_BYTE *)(a1 + 33) != 0))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 160));
    v8 = objc_msgSend(WeakRetained, "preferWiFiP2PRequestUpdated");

    if (v8)
      *(_BYTE *)(a1 + 33) = v6;
  }
}

void sub_10014953C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  int IsLevelEnabled;
  id v9;
  id v10;
  NRSCDInterfaceConfig *v11;
  id *v12;
  void *v13;
  _DWORD *v14;
  int v15;
  id v16;
  int v17;
  id v18;
  char v19;
  id v20;
  id v21;
  int v22;
  uint64_t v23;
  dispatch_time_t v24;
  void *v25;
  NSObject *v26;
  _QWORD block[4];
  id v28;
  int v29;
  _QWORD v30[4];
  id v31;
  id *v32;
  id location;
  id *p_location;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;

  objc_msgSend((id)a1, "reportEvent:", 2014);
  location = 0;
  p_location = &location;
  v35 = 0x3032000000;
  v36 = sub_10014387C;
  v37 = sub_10014388C;
  v38 = 0;
  v4 = nw_interface_create_with_name(objc_msgSend(CFSTR("awdl0"), "UTF8String"));
  v5 = (void *)v4;
  if (v4 && nw_interface_get_subtype(v4) == 1002)
  {
    v6 = p_location[5];
    p_location[5] = CFSTR("awdl0");
  }
  else
  {
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    v7 = (id)qword_1001E4AB0;
    IsLevelEnabled = _NRLogIsLevelEnabled(v7, 1);

    if (IsLevelEnabled)
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v9 = (id)qword_1001E4AB0;
      _NRLogWithArgs(v9, 1, "%s%.30s:%-4d Falling back to retrieving AWDL interface from wifid", "", "-[NRLinkManagerWiFi setupWiFiManagerForAWDL]", 2229);

    }
    v10 = *(id *)(a1 + 176);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100149A5C;
    v30[3] = &unk_1001B8840;
    v32 = &location;
    v6 = v10;
    v31 = v6;
    if (sub_1001437AC((uint64_t)NRLinkManagerWiFi, v30))
    {
      v18 = sub_100140BFC();
      v19 = _NRLogIsLevelEnabled(v18, 16);

      if ((v19 & 1) != 0)
      {
        v20 = sub_100140BFC();
        _NRLogWithArgs(v20, 16, "%s%.30s:%-4d Timed out getting AWDL interface name", "", "-[NRLinkManagerWiFi setupWiFiManagerForAWDL]", 2236);

      }
      goto LABEL_27;
    }

  }
  if (p_location[5])
  {
    v11 = [NRSCDInterfaceConfig alloc];
    v12 = sub_10001E9E8((id *)&v11->super.isa, p_location[5], 1);
    v13 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v12;

    v14 = *(id *)(a1 + 112);
    if (v14)
    {
      v15 = v14[3];

      if (v15)
      {
        sub_100143A68(a1);

        _Block_object_dispose(&location, 8);
        objc_msgSend((id)a1, "reportEvent:", 2016);
        return;
      }
    }
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    v21 = (id)qword_1001E4AB0;
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (v22)
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      v6 = (id)qword_1001E4AB0;
      _NRLogWithArgs(v6, 17, "failed to find interface index for %@", p_location[5]);
      goto LABEL_27;
    }
  }
  else
  {
    v16 = sub_100140BFC();
    v17 = _NRLogIsLevelEnabled(v16, 16);

    if (v17)
    {
      v6 = sub_100140BFC();
      _NRLogWithArgs(v6, 16, "%s%.30s:%-4d Failed to determine AWDL interface", "", "-[NRLinkManagerWiFi setupWiFiManagerForAWDL]", 2242);
LABEL_27:

    }
  }

  _Block_object_dispose(&location, 8);
  sub_1001499F8(a1);
  if ((2 * a2) >= 0x12C)
    v23 = 300;
  else
    v23 = (2 * a2);
  objc_msgSend((id)a1, "reportEvent:detailsFormat:", 2015, CFSTR("Retry in %us (attempt: %u)"), v23, a2);
  objc_initWeak(&location, (id)a1);
  v24 = dispatch_time(0, 1000000000 * v23);
  if (a1)
    v25 = *(void **)(a1 + 24);
  else
    v25 = 0;
  v26 = v25;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100149A0C;
  block[3] = &unk_1001B88B8;
  objc_copyWeak(&v28, &location);
  v29 = a2;
  dispatch_after(v24, v26, block);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);
}

void sub_1001499DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001499F8(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 112), 0);
}

void sub_100149A0C(uint64_t a1)
{
  _DWORD *WeakRetained;
  _DWORD *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[3] != 1004)
  {
    v2 = WeakRetained;
    sub_10014953C();
    WeakRetained = v2;
  }

}

void sub_100149A5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "AWDL"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interfaceName"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100149AB0(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  void *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[9];
    if (v3)
    {
      v4 = v3;
      v5 = v2[9];
      v6 = objc_msgSend(v5, "count");

      if (v6)
      {
        v7 = v2[9];
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allKeys"));
        v9 = objc_msgSend(v8, "copy");

        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v10 = v9;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v20;
          do
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(_QWORD *)v20 != v13)
                objc_enumerationMutation(v10);
              v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
              v17 = sub_1001300EC((uint64_t)NRDLocalDevice, v16, 0);
              v18 = v17;
              if (!v17 || !v17[9])
              {
                v15 = v2[9];
                objc_msgSend(v15, "setObject:forKeyedSubscript:", 0, v16, (_QWORD)v19);

              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          }
          while (v12);
        }

      }
    }
  }

}

void sub_100149C5C(id *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  const __CFString *v8;
  void *v9;
  void *v10;
  char *v11;
  id WeakRetained;
  void *v13;
  unsigned int v14;
  id *v15;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  if (a1)
  {
    v2 = a1[3];
    dispatch_assert_queue_V2(v2);

    v15 = a1;
    v3 = objc_msgSend(a1[19], "copy");
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = v3;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v6)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "nrUUID"));
          v11 = sub_10012FFF4((uint64_t)NRDLocalDevice, v10);

          if (!v11 || !v11[9])
          {
            v8 = CFSTR("Device has been disabled %@");
LABEL_7:
            objc_msgSend(v9, "cancelWithReason:", v8, v11);
            goto LABEL_8;
          }
          WeakRetained = objc_loadWeakRetained(v15 + 2);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "nrUUID"));
          v14 = objc_msgSend(WeakRetained, "perpetualStandaloneMeadowEnabledForNRUUID:", v13);

          v8 = CFSTR("Perpetual standalone Meadow mode enabled for %@");
          if (v14)
            goto LABEL_7;
LABEL_8:

        }
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v5);
    }

    if ((sub_100137894((uint64_t)NRDLocalDevice) & 1) == 0)
      sub_100148E24((uint64_t)v15);
    sub_100149AB0(v15[13]);
    sub_100149AB0(v15[14]);
    sub_100149AB0(v15[15]);
    sub_100149AB0(v15[16]);
    if (qword_1001E4AB8 != -1)
      dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
    if (_NRLogIsLevelEnabled(qword_1001E4AB0, 1))
    {
      if (qword_1001E4AB8 != -1)
        dispatch_once(&qword_1001E4AB8, &stru_1001B8928);
      _NRLogWithArgs(qword_1001E4AB0, 1, "%s%.30s:%-4d Forcing interface availability event to check for new enabled devices", "", "-[NRLinkManagerWiFi checkEnabledDevices]", 2658);
    }
    sub_100140F10((uint64_t)v15);
    sub_100140334((uint64_t)v15);
    sub_100141694((uint64_t)v15);

  }
}

_QWORD *sub_100149F80(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  void *v4;
  id v6;
  int IsLevelEnabled;
  id v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  objc_super v15;

  if (!a1)
    return 0;
  v15.receiver = a1;
  v15.super_class = (Class)NRDKeyManager;
  v1 = objc_msgSendSuper2(&v15, "init");
  if (!v1)
  {
    v6 = sub_10014A0E4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v6, 16);

    if (IsLevelEnabled)
    {
      v8 = sub_10014A0E4();
      _NRLogWithArgs(v8, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRDKeyManager initInternal]", 78);

    }
    v9 = _os_log_pack_size(12);
    v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = __error();
    v12 = _os_log_pack_fill(v10, v9, *v11, &_mh_execute_header, "%{public}s [super init] failed");
    *(_DWORD *)v12 = 136446210;
    *(_QWORD *)(v12 + 4) = "-[NRDKeyManager initInternal]";
    v13 = sub_10014A0E4();
    _NRLogAbortWithPack(v13, v10);
    return 0;
  }
  v2 = v1;
  v3 = sub_10014CFBC();
  v4 = (void *)v2[2];
  v2[2] = v3;

  *((_DWORD *)v2 + 3) = -1;
  *((_BYTE *)v2 + 8) = 4;
  return v2;
}

id sub_10014A0E4()
{
  if (qword_1001E4AE8 != -1)
    dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
  return (id)qword_1001E4AE0;
}

void sub_10014A124(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4AE0;
  qword_1001E4AE0 = (uint64_t)v1;

}

id sub_10014A154(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  return (id)qword_1001E4AD0;
}

void sub_10014A198(id a1)
{
  _QWORD *v1;
  void *v2;

  v1 = sub_100149F80([NRDKeyManager alloc]);
  v2 = (void *)qword_1001E4AD0;
  qword_1001E4AD0 = (uint64_t)v1;

}

void sub_10014A1C4(uint64_t a1)
{
  NSObject *v2;
  uint32_t v3;
  id v4;
  char IsLevelEnabled;
  id v6;
  id v7;
  int v8;
  _QWORD handler[4];
  id v10;
  id location;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    objc_initWeak(&location, (id)a1);
    v2 = *(NSObject **)(a1 + 16);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10014A3F4;
    handler[3] = &unk_1001B8990;
    objc_copyWeak(&v10, &location);
    v3 = notify_register_dispatch("com.apple.mobile.keybagd.lock_status", (int *)(a1 + 12), v2, handler);
    if (v3)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v4 = (id)qword_1001E4AE0;
      IsLevelEnabled = _NRLogIsLevelEnabled(v4, 17);

      if ((IsLevelEnabled & 1) == 0)
        goto LABEL_16;
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v6 = (id)qword_1001E4AE0;
      _NRLogWithArgs(v6, 17, "Failed to register for lock state notifications %u", v3);
    }
    else
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v7 = (id)qword_1001E4AE0;
      v8 = _NRLogIsLevelEnabled(v7, 0);

      if (!v8)
        goto LABEL_16;
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v6 = (id)qword_1001E4AE0;
      _NRLogWithArgs(v6, 0, "%s%.30s:%-4d Registered for lock state notifications", "", "-[NRDKeyManager startWatchingLockState]", 315);
    }

LABEL_16:
    sub_10014A420(a1);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&location);
  }
}

void sub_10014A3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014A3F4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_10014A420((uint64_t)WeakRetained);

}

void sub_10014A420(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  void *String;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    v2 = 1;
    *(_BYTE *)(a1 + 10) = 1;
    v3 = MKBGetDeviceLockState(0);
    if ((_DWORD)v3)
    {
      sub_10014A63C(a1);
      if (*(_BYTE *)(a1 + 9))
        v2 = 3;
      else
        v2 = 4;
    }
    else
    {
      *(_BYTE *)(a1 + 9) = 1;
    }
    v4 = *(unsigned __int8 *)(a1 + 8);
    if ((_DWORD)v4 == v2)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v16 = (id)qword_1001E4AE0;
        String = (void *)NRDataProtectionClassCreateString(*(unsigned __int8 *)(a1 + 8));
        if (v3 >= 8)
          v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown[%d]"), v3);
        else
          v6 = *(&off_1001B89F8 + v3);
        _NRLogWithArgs(v16, 0, "%s%.30s:%-4d Keeping lock state %@ in response to %@", "", "-[NRDKeyManager handleLockStateChange]", 297, String, v6);

      }
    }
    else
    {
      v7 = (void *)NRDataProtectionClassCreateString(v4);
      v8 = (id)NRDataProtectionClassCreateString(v2);
      v14 = v8;
      if (v3 >= 8)
      {
        v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown[%d]"), v3);
        v15 = v8;
      }
      else
      {
        v15 = *(&off_1001B89F8 + v3);
      }
      sub_10014A830((uint64_t)v8, 5400, CFSTR("%@ -> %@ (%@)"), v9, v10, v11, v12, v13, (uint64_t)v7);

      *(_BYTE *)(a1 + 8) = v2;
      sub_10014A8AC(a1);
    }
  }
}

void sub_10014A63C(uint64_t a1)
{
  int v2;
  int v3;
  int *v4;
  int v5;
  id v6;
  char __strerrbuf[128];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 9))
  {
    v2 = MKBDeviceUnlockedSinceBoot();
    if (v2)
    {
      v3 = v2;
      if (v2 == 1)
      {
        *(_BYTE *)(a1 + 9) = 1;
      }
      else
      {
        v4 = __error();
        v5 = *v4;
        if (*v4 == 3)
        {
          if (strerror_r(3, __strerrbuf, 0x80uLL))
            __strerrbuf[0] = 0;
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            v6 = (id)qword_1001E4AE0;
            _NRLogWithArgs(v6, 16, "%s%.30s:%-4d MKBDeviceUnlockedSinceBoot() returned %d: [%d] %s", "", "-[NRDKeyManager checkIfDeviceHasBeenUnlockedOnceSinceBoot]", 263, v3, 3, __strerrbuf);

          }
        }
        else
        {
          if (strerror_r(*v4, __strerrbuf, 0x80uLL))
            __strerrbuf[0] = 0;
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 17, "MKBDeviceUnlockedSinceBoot() returned %d: [%d] %s", v3, v5, __strerrbuf);
          }
        }
      }
    }
  }
}

void sub_10014A830(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;

  v10 = a3;
  v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v10, &a9);

  sub_100121E18(0, a2, &stru_1001B95A0, v11);
}

void sub_10014A8AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  unint64_t v21;
  void (**v22)(void);
  id v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  v2 = *(unsigned __int8 *)(a1 + 8);
  if ((v2 | 2) != 3 || (v3 = *(_QWORD *)(a1 + 32)) == 0)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 24);
    if (!v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  (*(void (**)(void))(v3 + 16))();
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v5 = 1;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v2);
    LODWORD(v2) = *(unsigned __int8 *)(a1 + 8);
  }
LABEL_7:
  if ((v2 | 2) == 3)
  {
    v7 = *(void **)(a1 + 40);
    if (v7)
    {
      v8 = objc_msgSend(v7, "count");
      sub_10014A830((uint64_t)v8, 5401, CFSTR("(%llu clients)"), v9, v10, v11, v12, v13, (uint64_t)v8);
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v14 = *(id *)(a1 + 40);
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v27;
        do
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            if (*(_QWORD *)v27 != v17)
              objc_enumerationMutation(v14);
            (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i) + 16))();
          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        }
        while (v16);
      }

      objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
      v19 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      LODWORD(v2) = *(unsigned __int8 *)(a1 + 8);
      v5 = 1;
    }
    if ((_DWORD)v2 == 1 && (v20 = *(void **)(a1 + 48)) != 0)
    {
      v21 = 0;
      if (objc_msgSend(v20, "count"))
      {
        do
        {
          if (MKBGetDeviceLockState(0))
            break;
          v22 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", v21));
          v22[2]();

          ++v21;
        }
        while (v21 < (unint64_t)objc_msgSend(*(id *)(a1 + 48), "count"));
      }
      v23 = objc_msgSend(*(id *)(a1 + 48), "count");
      v24 = *(void **)(a1 + 48);
      if ((id)v21 == v23)
      {
        objc_msgSend(v24, "removeAllObjects");
        v25 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;

      }
      else
      {
        objc_msgSend(v24, "removeObjectsInRange:", 0, v21);
        if ((v5 & 1) == 0)
          return;
      }
    }
    else if (!v5)
    {
      return;
    }
  }
  else if ((v5 & 1) == 0)
  {
    return;
  }
  if (!*(_QWORD *)(a1 + 24) && !*(_QWORD *)(a1 + 40) && !*(_QWORD *)(a1 + 48))
    sub_10014AB18(a1);
}

uint64_t sub_10014AB18(uint64_t a1)
{
  uint64_t result;
  uint32_t v3;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  result = *(unsigned int *)(a1 + 12);
  if ((_DWORD)result != -1)
  {
    v3 = notify_cancel(result);
    *(_DWORD *)(a1 + 12) = -1;
    if (v3)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      result = _NRLogIsLevelEnabled(qword_1001E4AE0, 17);
      if ((_DWORD)result)
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        return _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to unregister for lock state notifications %u");
      }
    }
    else
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      result = _NRLogIsLevelEnabled(qword_1001E4AE0, 0);
      if ((_DWORD)result)
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        return _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Unregistered for lock state notifications");
      }
    }
  }
  return result;
}

BOOL sub_10014AC6C(_BOOL8 result)
{
  _BYTE *v1;

  if (result)
  {
    v1 = (_BYTE *)result;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(result + 16));
    if (!v1[10])
    {
      v1[10] = 1;
      if (v1[8] == 4)
      {
        sub_10014A63C((uint64_t)v1);
        if (v1[9])
        {
          v1[8] = 3;
          sub_10014A8AC((uint64_t)v1);
        }
      }
    }
    return (v1[8] & 0xFD) == 1;
  }
  return result;
}

void sub_10014ACE0(uint64_t a1, void *a2)
{
  void (**v3)(void);
  void *v4;
  id v5;
  void *v6;
  void (**v7)(void);
  id v8;
  int v9;
  id v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  id v18;
  void (**v19)(void);

  v19 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (v19)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 10))
      {
        *(_BYTE *)(a1 + 10) = 1;
        if (*(_BYTE *)(a1 + 8) == 4)
        {
          sub_10014A63C(a1);
          if (*(_BYTE *)(a1 + 9))
          {
            *(_BYTE *)(a1 + 8) = 3;
            sub_10014A8AC(a1);
          }
        }
      }
      v3 = v19;
      if ((*(_BYTE *)(a1 + 8) & 0xFD) == 1)
      {
        v19[2]();
      }
      else
      {
        v4 = *(void **)(a1 + 40);
        if (!v4)
        {
          v5 = objc_alloc_init((Class)NSMutableArray);
          v6 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v5;

          v3 = v19;
          v4 = *(void **)(a1 + 40);
          if (!v4)
          {
            v11 = sub_10014A0E4();
            IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

            if (IsLevelEnabled)
            {
              v13 = sub_10014A0E4();
              _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (_classCUnlockedBlocks) != ((void *)0)", "", "-[NRDKeyManager runAfterClassCUnlock:]", 150);

            }
            v14 = _os_log_pack_size(12);
            v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
            v16 = __error();
            v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%{public}s Assertion Failed: (_classCUnlockedBlocks) != ((void *)0)");
            *(_DWORD *)v17 = 136446210;
            *(_QWORD *)(v17 + 4) = "-[NRDKeyManager runAfterClassCUnlock:]";
            v18 = sub_10014A0E4();
            _NRLogAbortWithPack(v18, v15);
          }
        }
        v7 = objc_retainBlock(v3);
        objc_msgSend(v4, "addObject:", v7);

        sub_10014A1C4(a1);
      }
    }
    else
    {
      v8 = sub_10014A0E4();
      v9 = _NRLogIsLevelEnabled(v8, 17);

      if (v9)
      {
        v10 = sub_10014A0E4();
        _NRLogWithArgs(v10, 17, "%s called with null classCUnlockedBlock", "-[NRDKeyManager runAfterClassCUnlock:]");

      }
    }
  }

}

void sub_10014AF10(uint64_t a1, void *a2)
{
  void (**v3)(void);
  void (**v4)(void);
  void *v5;
  id v6;
  int IsLevelEnabled;
  id v8;
  id v9;
  int v10;
  id v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  void (**v19)(void);

  v3 = a2;
  if (!a1)
    goto LABEL_12;
  v19 = v3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v19)
  {
    v6 = sub_10014A0E4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v6, 17);

    v3 = 0;
    if (!IsLevelEnabled)
      goto LABEL_12;
    v8 = sub_10014A0E4();
    _NRLogWithArgs(v8, 17, "%s called with null localDeviceClassCUnlockedBlock", "-[NRDKeyManager runForLocalDeviceAfterClassCUnlock:]");

LABEL_11:
    v3 = v19;
LABEL_12:

    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 10))
  {
    *(_BYTE *)(a1 + 10) = 1;
    if (*(_BYTE *)(a1 + 8) == 4)
    {
      sub_10014A63C(a1);
      if (*(_BYTE *)(a1 + 9))
      {
        *(_BYTE *)(a1 + 8) = 3;
        sub_10014A8AC(a1);
      }
    }
  }
  if ((*(_BYTE *)(a1 + 8) & 0xFD) == 1)
  {
    v19[2]();
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    v4 = objc_retainBlock(v19);
    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;

    goto LABEL_11;
  }
  v9 = sub_10014A0E4();
  v10 = _NRLogIsLevelEnabled(v9, 16);

  if (v10)
  {
    v11 = sub_10014A0E4();
    _NRLogWithArgs(v11, 16, "%s%.30s:%-4d ABORTING: Tried to register a second local device class C unlocked block", "", "-[NRDKeyManager runForLocalDeviceAfterClassCUnlock:]", 166);

  }
  v12 = _os_log_pack_size(12);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __error();
  v15 = _os_log_pack_fill(v13, v12, *v14, &_mh_execute_header, "%{public}s Tried to register a second local device class C unlocked block");
  *(_DWORD *)v15 = 136446210;
  *(_QWORD *)(v15 + 4) = "-[NRDKeyManager runForLocalDeviceAfterClassCUnlock:]";
  v16 = sub_10014A0E4();
  v17 = _NRLogAbortWithPack(v16, v13);
  sub_10014B110(v17, v18);
}

void sub_10014B110(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  int v9;
  id v10;
  id v11;
  int IsLevelEnabled;
  id v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  id v18;
  id v19;

  v19 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    v3 = v19;
    if (v19)
    {
      v4 = *(void **)(a1 + 48);
      if (!v4)
      {
        v5 = objc_alloc_init((Class)NSMutableArray);
        v6 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v5;

        v3 = v19;
        v4 = *(void **)(a1 + 48);
        if (!v4)
        {
          v11 = sub_10014A0E4();
          IsLevelEnabled = _NRLogIsLevelEnabled(v11, 16);

          if (IsLevelEnabled)
          {
            v13 = sub_10014A0E4();
            _NRLogWithArgs(v13, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (_classAUnlockedBlocks) != ((void *)0)", "", "-[NRDKeyManager runAfterNextClassAUnlock:]", 191);

          }
          v14 = _os_log_pack_size(12);
          v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
          v16 = __error();
          v17 = _os_log_pack_fill(v15, v14, *v16, &_mh_execute_header, "%{public}s Assertion Failed: (_classAUnlockedBlocks) != ((void *)0)");
          *(_DWORD *)v17 = 136446210;
          *(_QWORD *)(v17 + 4) = "-[NRDKeyManager runAfterNextClassAUnlock:]";
          v18 = sub_10014A0E4();
          _NRLogAbortWithPack(v18, v15);
        }
      }
      v7 = objc_retainBlock(v3);
      objc_msgSend(v4, "addObject:", v7);

      sub_10014A1C4(a1);
    }
    else
    {
      v8 = sub_10014A0E4();
      v9 = _NRLogIsLevelEnabled(v8, 17);

      if (v9)
      {
        v10 = sub_10014A0E4();
        _NRLogWithArgs(v10, 17, "%s called with null classAUnlockedBlock", "-[NRDKeyManager runAfterNextClassAUnlock:]");

      }
    }
  }

}

uint64_t sub_10014B2DC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  const CFStringRef *v9;
  CFStringRef v10;
  void *String;
  id v12;
  id v13;
  id v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  const __CFDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  int IsLevelEnabled;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD v32[3];
  _QWORD v33[3];

  v7 = a2;
  v8 = a3;
  if (!a1)
    goto LABEL_59;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v7)
  {
    v24 = sub_10014A0E4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v24, 17);

    if (IsLevelEnabled)
    {
      v26 = sub_10014A0E4();
      _NRLogWithArgs(v26, 17, "%s called with null itemName", "-[NRDKeyManager deleteKeyfromKeychainWithName:nrUUID:dataProtectionClass:]");

      v22 = 0;
      goto LABEL_56;
    }
LABEL_59:
    v22 = 0;
    goto LABEL_56;
  }
  if ((_DWORD)a4 == 3)
  {
    v9 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  }
  else
  {
    if ((_DWORD)a4 != 4)
    {
      String = (void *)NRDataProtectionClassCreateString(a4);
      goto LABEL_11;
    }
    v9 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  }
  v10 = *v9;
  String = (void *)NRDataProtectionClassCreateString(a4);
  if (!v10)
  {
LABEL_11:
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v14 = (id)qword_1001E4AE0;
    v15 = _NRLogIsLevelEnabled(v14, 17);

    if (v15)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v16 = (id)qword_1001E4AE0;
      _NRLogWithArgs(v16, 17, "Cannot delete key %@ from keychain for %@", v7, String);

    }
    v31 = 0;
    goto LABEL_55;
  }
  v12 = objc_alloc((Class)NSString);
  if (v8)
    v13 = objc_msgSend(v12, "initWithFormat:", CFSTR("%@/%@/%@/%@"), CFSTR("com.apple.terminusd"), v8, String, v7);
  else
    v13 = objc_msgSend(v12, "initWithFormat:", CFSTR("%@/%@"), CFSTR("com.apple.terminusd"), v7, v27, v28);
  v17 = v13;
  if (qword_1001E4AE8 != -1)
    dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
  if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Deleting %@ keychain key %@", "", "-[NRDKeyManager deleteKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 510, String, v17);
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dataUsingEncoding:", 4));
  v32[0] = kSecClass;
  v32[1] = kSecAttrApplicationTag;
  v33[0] = kSecClassKey;
  v33[1] = v18;
  v32[2] = kSecAttrAccessGroup;
  v33[2] = CFSTR("com.apple.terminusd");
  v19 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 3));
  v20 = SecItemDelete(v19);
  if ((_DWORD)v20 == -25308)
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to delete %@ keychain key %@: keychain locked", "", "-[NRDKeyManager deleteKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 530, String, v17);
    }
    goto LABEL_53;
  }
  v21 = v20;
  if ((_DWORD)v20 == -25300)
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Failed to delete %@ keychain key %@: item not found (not an error)", "", "-[NRDKeyManager deleteKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 527, String, v17);
    }
    goto LABEL_46;
  }
  if ((_DWORD)v20)
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to delete %@ keychain key %@: %d", String, v17, v21, v29, v30);
    }
LABEL_53:
    v31 = 0;
    goto LABEL_54;
  }
  if (qword_1001E4AE8 != -1)
    dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
  if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Successfully deleted %@ keychain key %@", "", "-[NRDKeyManager deleteKeyfromKeychainWithName:nrUUID:dataProtectionClass:]", 523, String, v17);
  }
LABEL_46:
  v31 = 1;
LABEL_54:

LABEL_55:
  v22 = v31;
LABEL_56:

  return v22;
}

BOOL sub_10014B850(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, _BYTE *a6)
{
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  const CFStringRef *v15;
  CFStringRef v16;
  void *String;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  int v29;
  id v30;
  void *v31;
  id v32;
  const __CFDictionary *v33;
  uint64_t v34;
  uint64_t v35;
  const __CFDictionary *v36;
  id v37;
  _BOOL8 v38;
  id v40;
  int IsLevelEnabled;
  id v42;
  id v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void *v48;
  CFStringRef v49;
  void *v50;
  BOOL v51;
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[4];
  _QWORD v57[4];

  v11 = a2;
  v12 = a3;
  v13 = a4;
  if (!a1)
    goto LABEL_90;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v11)
  {
    v40 = sub_10014A0E4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v40, 17);

    if (IsLevelEnabled)
    {
      v42 = sub_10014A0E4();
      _NRLogWithArgs(v42, 17, "%s called with null itemData");
LABEL_89:

      v38 = 0;
      goto LABEL_84;
    }
LABEL_90:
    v38 = 0;
    goto LABEL_84;
  }
  v14 = objc_opt_class(NSData);
  if ((objc_opt_isKindOfClass(v11, v14) & 1) == 0)
  {
    v43 = sub_10014A0E4();
    v44 = _NRLogIsLevelEnabled(v43, 17);

    if (v44)
    {
      v42 = sub_10014A0E4();
      _NRLogWithArgs(v42, 17, "%s called with null [itemData isKindOfClass:[NSData class]]");
      goto LABEL_89;
    }
    goto LABEL_90;
  }
  if (a6)
    *a6 = 0;
  if ((_DWORD)a5 == 3)
  {
    v15 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  }
  else
  {
    if ((_DWORD)a5 != 4)
    {
      String = (void *)NRDataProtectionClassCreateString(a5);
      goto LABEL_30;
    }
    v15 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  }
  v16 = *v15;
  String = (void *)NRDataProtectionClassCreateString(a5);
  v49 = v16;
  if (!v16)
  {
LABEL_30:
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v28 = (id)qword_1001E4AE0;
    v29 = _NRLogIsLevelEnabled(v28, 17);

    if (v29)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v30 = (id)qword_1001E4AE0;
      _NRLogWithArgs(v30, 17, "Cannot save item %@ to keychain for %@", v12, String);

    }
    v51 = 0;
    goto LABEL_83;
  }
  v47 = a6;
  v18 = v12;
  if (v13)
  {
    v19 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@/%@/%@"), v13, String, v18);

    v18 = v19;
  }
  if (qword_1001E4AE8 != -1)
    dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
  if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v20 = (id)qword_1001E4AE0;
    _NRLogWithArgs(v20, 0, "%s%.30s:%-4d Updating %@ keychain item %@ length %llu", "", "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 564, String, v18, objc_msgSend(v11, "length"));

  }
  v56[0] = kSecClass;
  v56[1] = kSecAttrService;
  v57[0] = kSecClassGenericPassword;
  v57[1] = CFSTR("com.apple.terminusd");
  v56[2] = kSecAttrAccount;
  v56[3] = kSecAttrAccessGroup;
  v57[2] = v18;
  v57[3] = CFSTR("com.apple.terminusd");
  v21 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v57, v56, 4));
  v54[0] = kSecAttrAccessible;
  v54[1] = kSecValueData;
  v55[0] = v16;
  v55[1] = v11;
  v50 = v11;
  v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v55, v54, 2));
  v48 = (void *)v21;
  v23 = (const __CFDictionary *)v21;
  v24 = v22;
  v25 = SecItemUpdate(v23, v22);
  if ((_DWORD)v25 == -25308)
  {
    if (v47)
      *v47 = 1;
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v27 = v48;
    if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to update %@ keychain item %@: keychain locked", "", "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 590, String, v18);
    }
  }
  else
  {
    v26 = v25;
    if ((_DWORD)v25 == -25300)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v31 = v50;
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v32 = (id)qword_1001E4AE0;
        v31 = v50;
        _NRLogWithArgs(v32, 0, "%s%.30s:%-4d Adding %@ keychain item %@ length %llu", "", "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 601, String, v18, objc_msgSend(v50, "length"));

      }
      v52[0] = kSecClass;
      v52[1] = kSecAttrService;
      v53[0] = kSecClassGenericPassword;
      v53[1] = CFSTR("com.apple.terminusd");
      v52[2] = kSecAttrAccount;
      v52[3] = kSecAttrAccessGroup;
      v53[2] = v18;
      v53[3] = CFSTR("com.apple.terminusd");
      v52[4] = kSecAttrAccessible;
      v52[5] = kSecValueData;
      v53[4] = v49;
      v53[5] = v31;
      v33 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 6));
      v34 = SecItemAdd(v33, 0);
      v35 = v34;
      if ((_DWORD)v34)
      {
        v27 = v48;
        if ((_DWORD)v34 == -25308)
        {
          if (v47)
            *v47 = 1;
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to add %@ keychain item %@: keychain locked", "", "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 624, String, v18);
          }
        }
        else
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to add %@ keychain item %@: %d", String, v18, v35, v45, v46);
          }
        }
      }
      else
      {
        v27 = v48;
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
        {
          v36 = v24;
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          v37 = (id)qword_1001E4AE0;
          _NRLogWithArgs(v37, 0, "%s%.30s:%-4d Successfully added %@ keychain item %@ length %llu", "", "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 617, String, v18, objc_msgSend(v50, "length"));

          v24 = v36;
        }
      }
      v51 = (_DWORD)v35 == 0;

      goto LABEL_81;
    }
    if (!(_DWORD)v25)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v11 = v50;
      v27 = v48;
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Successfully updated %@ keychain item %@", "", "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 582, String, v18);
      }
      v51 = 1;
      goto LABEL_82;
    }
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v27 = v48;
    if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to update %@ keychain item %@: %d", String, v18, v26, v45, v46);
    }
  }
  v51 = 0;
LABEL_81:
  v11 = v50;
LABEL_82:

LABEL_83:
  v38 = v51;
LABEL_84:

  return v38;
}

id sub_10014C1B4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  const CFStringRef *v9;
  CFStringRef v10;
  char *String;
  id v12;
  id v13;
  const __CFDictionary *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  const char *v21;
  id v22;
  int IsLevelEnabled;
  id v24;
  uint64_t v25;
  id v27;
  int v28;
  id v29;
  objc_class *v30;
  NSString *v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  id v37;
  CFTypeRef result;
  _QWORD v39[5];
  _QWORD v40[5];

  v7 = a2;
  v8 = a3;
  if (!a1)
  {
    v19 = 0;
    goto LABEL_61;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if ((_DWORD)a4 == 3)
  {
    v9 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  }
  else
  {
    if ((_DWORD)a4 != 4)
    {
      String = (char *)NRDataProtectionClassCreateString(a4);
      goto LABEL_37;
    }
    v9 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  }
  v10 = *v9;
  String = (char *)NRDataProtectionClassCreateString(a4);
  if (!v10)
  {
LABEL_37:
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v22 = (id)qword_1001E4AE0;
    IsLevelEnabled = _NRLogIsLevelEnabled(v22, 17);

    if (IsLevelEnabled)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v24 = (id)qword_1001E4AE0;
      _NRLogWithArgs(v24, 17, "Cannot save item %@ to keychain for %@", v7, String);

    }
    v19 = 0;
    goto LABEL_60;
  }
  v12 = v7;
  if (v8)
  {
    v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@/%@/%@"), v8, String, v12);

    v12 = v13;
  }
  if (qword_1001E4AE8 != -1)
    dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
  if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Reading %@ keychain item %@", "", "-[NRDKeyManager readDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 652, String, v12);
  }
  v39[0] = kSecClass;
  v39[1] = kSecAttrService;
  v40[0] = kSecClassGenericPassword;
  v40[1] = CFSTR("com.apple.terminusd");
  v39[2] = kSecAttrAccount;
  v39[3] = kSecAttrAccessGroup;
  v40[2] = v12;
  v40[3] = CFSTR("com.apple.terminusd");
  v39[4] = kSecReturnData;
  v40[4] = &__kCFBooleanTrue;
  v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v40, v39, 5));
  result = 0;
  v15 = SecItemCopyMatching(v14, &result);
  v16 = (void *)result;
  if (!(_DWORD)v15 && result)
  {
    result = 0;
    v17 = objc_opt_class(NSData);
    if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v18 = (id)qword_1001E4AE0;
        _NRLogWithArgs(v18, 0, "%s%.30s:%-4d Successfully read %@ keychain item %@ length %llu", "", "-[NRDKeyManager readDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 690, String, v12, objc_msgSend(v16, "length"));

      }
      v19 = v16;
    }
    else
    {
      v27 = sub_10014A0E4();
      v28 = _NRLogIsLevelEnabled(v27, 17);

      if (v28)
      {
        v29 = sub_10014A0E4();
        v30 = (objc_class *)objc_opt_class(v16);
        v31 = NSStringFromClass(v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        _NRLogWithArgs(v29, 17, "Read %@ keychain item %@ with bad class %@", String, v12, v32);

      }
      v19 = 0;
    }

    goto LABEL_59;
  }
  if (result)
  {
    CFRelease(result);
    result = 0;
  }
  if ((_DWORD)v15 == -25308)
  {
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    if (!_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
      goto LABEL_58;
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v20 = qword_1001E4AE0;
    v36 = String;
    v37 = v12;
    v35 = 673;
    v33 = "";
    v34 = "-[NRDKeyManager readDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]";
    v21 = "%s%.30s:%-4d Failed to read %@ keychain item %@: keychain locked";
  }
  else
  {
    if ((_DWORD)v15 != -25300)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      if (!_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
        goto LABEL_58;
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v20 = qword_1001E4AE0;
      v34 = (const char *)v12;
      v35 = v15;
      v33 = String;
      v21 = "Failed to read %@ keychain item %@: %d";
      v25 = 17;
      goto LABEL_57;
    }
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    if (!_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
      goto LABEL_58;
    if (qword_1001E4AE8 != -1)
      dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
    v20 = qword_1001E4AE0;
    v36 = String;
    v37 = v12;
    v35 = 668;
    v33 = "";
    v34 = "-[NRDKeyManager readDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]";
    v21 = "%s%.30s:%-4d Failed to read %@ keychain item %@: not found";
  }
  v25 = 16;
LABEL_57:
  _NRLogWithArgs(v20, v25, v21, v33, v34, v35, v36, v37);
LABEL_58:
  v19 = 0;
LABEL_59:

LABEL_60:
LABEL_61:

  return v19;
}

uint64_t sub_10014C7B4(uint64_t a1, void *a2, void *a3, uint64_t a4, _BYTE *a5)
{
  id v9;
  id v10;
  const CFStringRef *v11;
  CFStringRef v12;
  void *String;
  id v14;
  id v15;
  id v16;
  void *v17;
  const __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int IsLevelEnabled;
  id v23;
  id v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  _QWORD v31[4];
  _QWORD v32[4];

  v9 = a2;
  v10 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (v9)
    {
      if (a5)
        *a5 = 0;
      switch((_DWORD)a4)
      {
        case 1:
          v11 = &kSecAttrAccessibleWhenUnlockedThisDeviceOnly;
          break;
        case 3:
          v11 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
          break;
        case 4:
          v11 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
          break;
        default:
          String = (void *)NRDataProtectionClassCreateString(a4);
          goto LABEL_30;
      }
      v12 = *v11;
      String = (void *)NRDataProtectionClassCreateString(a4);
      if (v12)
      {
        v14 = v9;
        if (v10)
        {
          v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@/%@/%@"), v10, String, v14);

          v14 = v15;
        }
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
        {
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          v16 = (id)qword_1001E4AE0;
          v17 = (void *)NRDataProtectionClassCreateString(a4);
          _NRLogWithArgs(v16, 0, "%s%.30s:%-4d Deleting %@ keychain item %@", "", "-[NRDKeyManager deleteDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 716, v17, v14);

        }
        v31[0] = kSecClass;
        v31[1] = kSecAttrService;
        v32[0] = kSecClassGenericPassword;
        v32[1] = CFSTR("com.apple.terminusd");
        v31[2] = kSecAttrAccount;
        v31[3] = kSecAttrAccessGroup;
        v32[2] = v14;
        v32[3] = CFSTR("com.apple.terminusd");
        v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 4));
        v19 = SecItemDelete(v18);
        if ((_DWORD)v19 == -25308)
        {
          if (a5)
            *a5 = 1;
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 16, "%s%.30s:%-4d Failed to delete %@ keychain item %@: keychain locked", "", "-[NRDKeyManager deleteDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 739, String, v14);
          }
        }
        else
        {
          v20 = v19;
          if ((_DWORD)v19 == -25300)
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
            {
              if (qword_1001E4AE8 != -1)
                dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
              _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Failed to delete %@ keychain item %@: item not found (not an error)", "", "-[NRDKeyManager deleteDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 733, String, v14);
            }
            goto LABEL_51;
          }
          if (!(_DWORD)v19)
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            if (_NRLogIsLevelEnabled(qword_1001E4AE0, 0))
            {
              if (qword_1001E4AE8 != -1)
                dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
              _NRLogWithArgs(qword_1001E4AE0, 0, "%s%.30s:%-4d Successfully deleted %@ keychain item %@", "", "-[NRDKeyManager deleteDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]", 729, String, v14);
            }
LABEL_51:
            v30 = 1;
LABEL_59:

LABEL_60:
            a1 = v30;
            goto LABEL_61;
          }
          if (qword_1001E4AE8 != -1)
            dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
          if (_NRLogIsLevelEnabled(qword_1001E4AE0, 17))
          {
            if (qword_1001E4AE8 != -1)
              dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
            _NRLogWithArgs(qword_1001E4AE0, 17, "Failed to delete %@ keychain item %@: %d", String, v14, v20, v28, v29);
          }
        }
        v30 = 0;
        goto LABEL_59;
      }
LABEL_30:
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      v21 = (id)qword_1001E4AE0;
      IsLevelEnabled = _NRLogIsLevelEnabled(v21, 17);

      if (IsLevelEnabled)
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v23 = (id)qword_1001E4AE0;
        _NRLogWithArgs(v23, 17, "Cannot delete item %@ from keychain for %@", v9, String);

      }
      v30 = 0;
      goto LABEL_60;
    }
    v25 = sub_10014A0E4();
    v26 = _NRLogIsLevelEnabled(v25, 17);

    if (v26)
    {
      v27 = sub_10014A0E4();
      _NRLogWithArgs(v27, 17, "%s called with null itemName", "-[NRDKeyManager deleteDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]");

    }
    a1 = 0;
  }
LABEL_61:

  return a1;
}

id sub_10014CD70(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  NSDictionary *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *String;
  id v18;
  int IsLevelEnabled;
  id v20;
  id v21;
  int v22;
  id v23;

  v7 = a3;
  if (!a1)
    goto LABEL_24;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!a2)
  {
    v18 = sub_10014A0E4();
    IsLevelEnabled = _NRLogIsLevelEnabled(v18, 17);

    if (IsLevelEnabled)
    {
      v20 = sub_10014A0E4();
      _NRLogWithArgs(v20, 17, "%s called with null classInDict");
LABEL_23:

      v14 = 0;
      goto LABEL_18;
    }
LABEL_24:
    v14 = 0;
    goto LABEL_18;
  }
  if (!v7)
  {
    v21 = sub_10014A0E4();
    v22 = _NRLogIsLevelEnabled(v21, 17);

    if (v22)
    {
      v20 = sub_10014A0E4();
      _NRLogWithArgs(v20, 17, "%s called with null itemName");
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  v8 = sub_10014C1B4(a1, v7, 0, a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v9)
  {
    v23 = 0;
    v10 = +[NSKeyedUnarchiver unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:", objc_opt_class(NSUUID), a2, v9, &v23);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = v23;
    v13 = v12;
    if (!v11 || v12)
    {
      if (qword_1001E4AE8 != -1)
        dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
      if (_NRLogIsLevelEnabled(qword_1001E4AE0, 16))
      {
        if (qword_1001E4AE8 != -1)
          dispatch_once(&qword_1001E4AE8, &stru_1001B89D8);
        v15 = (id)qword_1001E4AE0;
        String = (void *)NRDataProtectionClassCreateString(a4);
        _NRLogWithArgs(v15, 16, "%s%.30s:%-4d Failed to unarchive %@ keychain data %@: %@", "", "-[NRDKeyManager readNRUUIDDictionaryOfClass:fromKeychainWithName:dataProtectionClass:]", 850, String, v7, v13);

      }
      v14 = 0;
    }
    else
    {
      v14 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithDictionary:", v11);
    }

  }
  else
  {
    v14 = 0;
  }

LABEL_18:
  return v14;
}

id sub_10014CFBC()
{
  __objc2_prot *v0;
  void *isa;
  uint64_t v2;
  void *v3;
  id v5;
  int IsLevelEnabled;
  id v7;
  char *v8;
  int *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  sched_param v13;
  pthread_attr_t v14;

  v0 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  isa = (void *)qword_1001E4AF8;
  if (!qword_1001E4AF8)
  {
    isa = (void *)qword_1001E4B00;
    if (!qword_1001E4B00)
    {
      memset(&v14, 0, sizeof(v14));
      pthread_attr_init(&v14);
      v13 = 0;
      pthread_attr_getschedparam(&v14, &v13);
      v13.sched_priority = 37;
      pthread_attr_setschedparam(&v14, &v13);
      pthread_attr_setschedpolicy(&v14, 4);
      v2 = dispatch_pthread_root_queue_create(0, 0, &v14, &stru_1001B8A38);
      v3 = (void *)qword_1001E4B00;
      qword_1001E4B00 = v2;

      if (qword_1001E4B00)
      {
        if (qword_1001E4AF0 == -1)
        {
LABEL_5:
          isa = v0[39].isa;
          return isa;
        }
      }
      else
      {
        v5 = sub_10014D190();
        IsLevelEnabled = _NRLogIsLevelEnabled(v5, 16);

        if (IsLevelEnabled)
        {
          v7 = sub_10014D190();
          _NRLogWithArgs(v7, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (terminusRootQueue) != ((void *)0)", "", "NRCopyTerminusdQueue", 92);

        }
        v0 = (__objc2_prot *)_os_log_pack_size(12);
        v8 = (char *)&v12 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        v9 = __error();
        v10 = _os_log_pack_fill(v8, v0, *v9, &_mh_execute_header, "%{public}s Assertion Failed: (terminusRootQueue) != ((void *)0)");
        *(_DWORD *)v10 = 136446210;
        *(_QWORD *)(v10 + 4) = "NRCopyTerminusdQueue";
        v11 = sub_10014D190();
        _NRLogAbortWithPack(v11, v8);
      }
      dispatch_once(&qword_1001E4AF0, &stru_1001B8A58);
      goto LABEL_5;
    }
  }
  return isa;
}

id sub_10014D190()
{
  if (qword_1001E4B10 != -1)
    dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
  return (id)qword_1001E4B08;
}

void sub_10014D1D0(id a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  dispatch_queue_t v5;
  void *v6;
  id v7;
  int IsLevelEnabled;
  id v9;
  char *v10;
  int *v11;
  uint64_t v12;
  id v13;
  id v14;
  int v15;
  id v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  v1 = (id)qword_1001E4B00;
  if (!v1)
  {
    v7 = sub_10014D190();
    IsLevelEnabled = _NRLogIsLevelEnabled(v7, 16);

    if (IsLevelEnabled)
    {
      v9 = sub_10014D190();
      _NRLogWithArgs(v9, 16, "%s%.30s:%-4d ABORTING: nr_dispatch_queue_create_with_target called with NULL target", "", "nr_dispatch_queue_create_with_target", 164);

    }
    v4 = (const char *)_os_log_pack_size(12);
    v10 = (char *)&v22 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = __error();
    v12 = _os_log_pack_fill(v10, v4, *v11, &_mh_execute_header, "%{public}s nr_dispatch_queue_create_with_target called with NULL target");
    *(_DWORD *)v12 = 136446210;
    *(_QWORD *)(v12 + 4) = "nr_dispatch_queue_create_with_target";
    v13 = sub_10014D190();
    _NRLogAbortWithPack(v13, v10);
LABEL_7:
    v14 = sub_10014D190();
    v15 = _NRLogIsLevelEnabled(v14, 16);

    if (v15)
    {
      v16 = sub_10014D190();
      _NRLogWithArgs(v16, 16, "%s%.30s:%-4d ABORTING: dispatch_queue_create_with_target(%s) failed", "", "nr_dispatch_queue_create_with_target", 168, v4);

    }
    v17 = _os_log_pack_size(22);
    v18 = (char *)&v22 - ((__chkstk_darwin(v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = __error();
    v20 = _os_log_pack_fill(v18, v17, *v19, &_mh_execute_header, "%{public}s dispatch_queue_create_with_target(%s) failed");
    *(_DWORD *)v20 = 136446466;
    *(_QWORD *)(v20 + 4) = "nr_dispatch_queue_create_with_target";
    *(_WORD *)(v20 + 12) = 2080;
    *(_QWORD *)(v20 + 14) = v4;
    v21 = sub_10014D190();
    _NRLogAbortWithPack(v21, v18);
  }
  v2 = v1;
  v3 = _NRCopySerialQueueAttr(v1);
  v4 = "terminusd.main.root";
  v5 = dispatch_queue_create_with_target_V2("terminusd.main.root", v3, v2);

  if (!v5)
    goto LABEL_7;

  v6 = (void *)qword_1001E4AF8;
  qword_1001E4AF8 = (uint64_t)v5;

}

void sub_10014D430(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4B08;
  qword_1001E4B08 = (uint64_t)v1;

}

void sub_10014D460(id a1)
{
  thread_act_t v1;
  integer_t policy_info;

  v1 = mach_thread_self();
  policy_info = 0;
  thread_policy_set(v1, 1u, &policy_info, 1u);
  if (proc_setthread_cpupercent(90, 50))
  {
    policy_info = 1;
    thread_policy_set(v1, 1u, &policy_info, 1u);
  }
  mach_port_deallocate(mach_task_self_, v1);
}

void start()
{
  __objc2_prot *v0;
  __objc2_prot_list *v1;
  id v2;
  NSObject *v3;
  id v4;
  int IsLevelEnabled;
  id v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  if (qword_1001E4B10 != -1)
    dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
  v0 = &OBJC_PROTOCOL___CBScalablePipeManagerDelegate;
  if (!_NRLogIsLevelEnabled(qword_1001E4B08, 0))
    goto LABEL_8;
  if (qword_1001E4B10 != -1)
    goto LABEL_13;
  while (1)
  {
    v1 = v0[39].prots;
    if (qword_1001E46F0 != -1)
      dispatch_once(&qword_1001E46F0, &stru_1001B6E08);
    v2 = (id)qword_1001E46E8;
    _NRLogWithArgs(v1, 0, "%s%.30s:%-4d Starting %@", "", "main", 117, v2);

LABEL_8:
    v3 = sub_10014CFBC();
    if (v3)
    {
      dispatch_async(v3, &stru_1001B8A78);
      dispatch_main();
    }
    v4 = sub_10014D190();
    IsLevelEnabled = _NRLogIsLevelEnabled(v4, 16);

    if (IsLevelEnabled)
    {
      v6 = sub_10014D190();
      _NRLogWithArgs(v6, 16, "%s%.30s:%-4d ABORTING: Assertion Failed: (queue) != ((void *)0)", "", "main", 121);

    }
    v7 = _os_log_pack_size(12);
    v0 = (__objc2_prot *)((char *)&v11 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0));
    v8 = __error();
    v9 = _os_log_pack_fill(v0, v7, *v8, &_mh_execute_header, "%{public}s Assertion Failed: (queue) != ((void *)0)");
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)(v9 + 4) = "main";
    v10 = sub_10014D190();
    _NRLogAbortWithPack(v10, v0);
LABEL_13:
    dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
  }
}

void sub_10014D6C8(id a1)
{
  int v1;
  void *v2;
  unsigned int v3;
  BOOL v4;
  __CFString *v5;
  int *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  id v24;
  id v25;
  const char *v26;
  id v27;
  NSObject *v28;
  id *v29;
  NSObject *v30;
  uint64_t v31;
  id v32;
  id v33;
  int IsLevelEnabled;
  id v35;
  uint64_t v36;
  uint64_t v37;
  rlimit v38;
  char __strerrbuf[128];

  v38 = (rlimit)xmmword_10015D160;
  if (setrlimit(8, &v38))
  {
    v1 = *__error();
    if (strerror_r(v1, __strerrbuf, 0x80uLL))
      __strerrbuf[0] = 0;
    if (qword_1001E4B10 != -1)
      dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
    if (_NRLogIsLevelEnabled(qword_1001E4B08, 17))
    {
      if (qword_1001E4B10 != -1)
        dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
      _NRLogWithArgs(qword_1001E4B08, 17, "setrlimit(RLIMIT_NOFILE, %llu) failed: [%d] %s", 1024, v1, __strerrbuf);
    }
  }
  LOBYTE(v38.rlim_cur) = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = objc_msgSend(v2, "fileExistsAtPath:isDirectory:", CFSTR("/var/mobile/Library/terminus"), &v38);

  if (v3)
    v4 = LOBYTE(v38.rlim_cur) == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = CFSTR("/var/mobile/Library/terminus");
    if (objc_msgSend(CFSTR("/var/mobile/Library/terminus"), "length"))
    {
      if ((objc_msgSend(CFSTR("/var/mobile/Library/terminus"), "containsString:", CFSTR("..")) & 1) != 0
        || (objc_msgSend(CFSTR("/var/mobile/Library/terminus"), "hasPrefix:", CFSTR("/")) & 1) == 0)
      {
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
        {
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          _NRLogWithArgs(qword_1001E4908, 17, "Refusing to write to \"%@\"", CFSTR("/var/mobile/Library/terminus"), v36, v37);
        }
      }
      else if (mkdir((const char *)objc_msgSend(CFSTR("/var/mobile/Library/terminus"), "UTF8String"), 0x1EDu) < 0
             && *__error() != 17)
      {
        v6 = __error();
        v7 = *v6;
        if (strerror_r(*v6, __strerrbuf, 0x80uLL))
          __strerrbuf[0] = 0;
        if (qword_1001E4910 != -1)
          dispatch_once(&qword_1001E4910, &stru_1001B7D40);
        if (_NRLogIsLevelEnabled(qword_1001E4908, 17))
        {
          if (qword_1001E4910 != -1)
            dispatch_once(&qword_1001E4910, &stru_1001B7D40);
          _NRLogWithArgs(qword_1001E4908, 17, "Failed to create \"%@\": [%d] %s", CFSTR("/var/mobile/Library/terminus"), v7, __strerrbuf);
        }
      }
    }
    else
    {
      v33 = sub_100106E24();
      IsLevelEnabled = _NRLogIsLevelEnabled(v33, 17);

      if (IsLevelEnabled)
      {
        v35 = sub_100106E24();
        _NRLogWithArgs(v35, 17, "%s called with null dirPath.length", "NRDCreateDirectoryPath");

      }
    }

  }
  else
  {
    if (qword_1001E4B10 != -1)
      dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
    if (_NRLogIsLevelEnabled(qword_1001E4B08, 0))
    {
      if (qword_1001E4B10 != -1)
        dispatch_once(&qword_1001E4B10, &stru_1001B8AB8);
      _NRLogWithArgs(qword_1001E4B08, 0, "%s%.30s:%-4d terminusd settings directory present", "", "main_block_invoke", 130);
    }
  }
  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v8 = (id)qword_1001E4AD0;
  sub_10014ACE0((uint64_t)v8, &stru_1001B8A98);

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001E46E0);
  v9 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithContentsOfFile:", CFSTR("/var/mobile/Library/terminus/com.apple.terminus.plist"));
  if (!v9)
  {
    v32 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithContentsOfFile:", CFSTR("/Library/Preferences/com.apple.terminus.plist"));
    if (v32)
    {
      v9 = v32;
      if (sub_10010754C(CFSTR("/var/mobile/Library/terminus/com.apple.terminus.plist"), v32, 0))
      {
        if (qword_1001E4700 != -1)
          dispatch_once(&qword_1001E4700, &stru_1001B6E28);
        if (_NRLogIsLevelEnabled(qword_1001E46F8, 0))
        {
          if (qword_1001E4700 != -1)
            dispatch_once(&qword_1001E4700, &stru_1001B6E28);
          _NRLogWithArgs(qword_1001E46F8, 0, "%s%.30s:%-4d successfully migrated settings file");
        }
      }
      else
      {
        if (qword_1001E4700 != -1)
          dispatch_once(&qword_1001E4700, &stru_1001B6E28);
        if (_NRLogIsLevelEnabled(qword_1001E46F8, 16))
        {
          if (qword_1001E4700 != -1)
            dispatch_once(&qword_1001E4700, &stru_1001B6E28);
          _NRLogWithArgs(qword_1001E46F8, 16, "%s%.30s:%-4d failed to migrate settings file");
        }
      }
    }
    else
    {
      v9 = objc_alloc_init((Class)NSMutableDictionary);
    }
  }
  if (qword_1001E4700 != -1)
    dispatch_once(&qword_1001E4700, &stru_1001B6E28);
  if (_NRLogIsLevelEnabled(qword_1001E46F8, 0))
  {
    if (qword_1001E4700 != -1)
      dispatch_once(&qword_1001E4700, &stru_1001B6E28);
    _NRLogWithArgs(qword_1001E46F8, 0, "%s%.30s:%-4d settingsDict %@", "", "terminusdSettingsInit", 79, v9);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("PacketLogging")));
  v11 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
    v12 = objc_msgSend(v10, "BOOLValue");
  else
    v12 = 0;
  gNRPacketLoggingEnabled = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("MPKLLogging")));
  v14 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
    v15 = objc_msgSend(v13, "BOOLValue");
  else
    v15 = 0;
  gNRMPKLLoggingEnabled = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("IPsecIfRingSize")));
  v17 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0 && objc_msgSend(v16, "unsignedIntValue"))
  {
    dword_1001E40C8 = objc_msgSend(v16, "unsignedIntValue");
    if (qword_1001E4700 != -1)
      dispatch_once(&qword_1001E4700, &stru_1001B6E28);
    if (_NRLogIsLevelEnabled(qword_1001E46F8, 0))
    {
      if (qword_1001E4700 != -1)
        dispatch_once(&qword_1001E4700, &stru_1001B6E28);
      _NRLogWithArgs(qword_1001E46F8, 0, "%s%.30s:%-4d gNRIPsecIfRingSize %u", "", "terminusdSettingsInit", 97, dword_1001E40C8);
    }
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("IPsecKPipeTxRingSize")));
  v19 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0 && objc_msgSend(v18, "unsignedIntValue"))
  {
    dword_1001E40CC = objc_msgSend(v18, "unsignedIntValue");
    if (qword_1001E4700 != -1)
      dispatch_once(&qword_1001E4700, &stru_1001B6E28);
    if (_NRLogIsLevelEnabled(qword_1001E46F8, 0))
    {
      if (qword_1001E4700 != -1)
        dispatch_once(&qword_1001E4700, &stru_1001B6E28);
      _NRLogWithArgs(qword_1001E46F8, 0, "%s%.30s:%-4d gNRIPsecKPipeTxRingSize %u", "", "terminusdSettingsInit", 102, dword_1001E40CC);
    }
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("IPsecKPipeRxRingSize")));
  v21 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0 && objc_msgSend(v20, "unsignedIntValue"))
  {
    dword_1001E40D0 = objc_msgSend(v20, "unsignedIntValue");
    if (qword_1001E4700 != -1)
      dispatch_once(&qword_1001E4700, &stru_1001B6E28);
    if (_NRLogIsLevelEnabled(qword_1001E46F8, 0))
    {
      if (qword_1001E4700 != -1)
        dispatch_once(&qword_1001E4700, &stru_1001B6E28);
      _NRLogWithArgs(qword_1001E46F8, 0, "%s%.30s:%-4d ipsecKPipeRxRingSize %u", "", "terminusdSettingsInit", 107, dword_1001E40D0);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001E46E0);
  if (qword_1001E4700 != -1)
    dispatch_once(&qword_1001E4700, &stru_1001B6E28);
  if (_NRLogIsLevelEnabled(qword_1001E46F8, 1))
  {
    if (qword_1001E4700 != -1)
      dispatch_once(&qword_1001E4700, &stru_1001B6E28);
    if (gNRPacketLoggingEnabled)
      v22 = "en";
    else
      v22 = "dis";
    _NRLogWithArgs(qword_1001E46F8, 1, "%s%.30s:%-4d Initialized packet logging as %sabled", "", "terminusdSettingsInit", 111, v22);
  }
  v23 = sub_10014CFBC();
  dispatch_async(v23, &stru_1001B69F0);

  objc_opt_self(NRDKeyManager);
  if (qword_1001E4AD8 != -1)
    dispatch_once(&qword_1001E4AD8, &stru_1001B8968);
  v24 = (id)qword_1001E4AD0;
  sub_10014ACE0((uint64_t)v24, &stru_1001B6DE8);

  v25 = objc_alloc((Class)NSString);
  if (sub_10009FF34((uint64_t)v25))
    v26 = "en";
  else
    v26 = "dis";
  v27 = objc_msgSend(v25, "initWithFormat:", CFSTR("(when the daemon started, the companion link was %sabled on this device)"), v26);
  sub_100121E18(0, 9000, &stru_1001B95A0, v27);
  v28 = sub_10014CFBC();
  dispatch_assert_queue_V2(v28);

  objc_opt_self(NRLinkDirector);
  if (qword_1001E4710 != -1)
    dispatch_once(&qword_1001E4710, &stru_1001B6E60);
  v29 = (id *)(id)qword_1001E4708;
  if (v29)
  {
    v30 = sub_10014CFBC();
    dispatch_assert_queue_V2(v30);

    if (sub_10009FF34(v31))
      sub_1000A35A0(v29);
    else
      sub_1000A4A20((uint64_t)v29);
  }

  objc_opt_self(TerminusdXPCServer);
  if (qword_1001E4600 != -1)
    dispatch_once(&qword_1001E4600, &stru_1001B6718);

}

void sub_10014E240(id a1)
{
  sub_100107D4C(CFSTR("/var/mobile/Library/terminus"));
}

id sub_10014E448(uint64_t a1)
{
  uint64_t v1;
  int v2;
  id result;
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 && (v2 = *(_DWORD *)(v1 + 16)) != 0)
  {
    *(_DWORD *)(v1 + 16) = v2 - 1;
    if (qword_1001E4B20 != -1)
      dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
    result = (id)_NRLogIsLevelEnabled(qword_1001E4B18, 0);
    if ((_DWORD)result)
    {
      if (qword_1001E4B20 != -1)
        dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
        LODWORD(v5) = *(_DWORD *)(v5 + 16);
      result = (id)_NRLogWithArgs(qword_1001E4B18, 0, "%s%.30s:%-4d Phone call relay agent un-asserted (Total remaining assertions: %u)", "", "-[NRPhoneCallRelayAgent unassertAgentWithOptions:]_block_invoke", 181, v5);
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      if (*(_DWORD *)(v6 + 16))
        return result;
      WeakRetained = objc_loadWeakRetained((id *)(v6 + 56));
    }
    else
    {
      WeakRetained = 0;
    }
    objc_msgSend(WeakRetained, "deviceHasPhoneCallRelayRequest:", 0);

    result = objc_msgSend(*(id *)(a1 + 32), "isActive");
    if ((_DWORD)result)
    {
      objc_msgSend(*(id *)(a1 + 32), "setActive:", 0);
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
        v9 = *(void **)(v8 + 48);
      else
        v9 = 0;
      return objc_msgSend(v9, "updateNetworkAgent:");
    }
  }
  else
  {
    if (qword_1001E4B20 != -1)
      dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
    result = (id)_NRLogIsLevelEnabled(qword_1001E4B18, 17);
    if ((_DWORD)result)
    {
      if (qword_1001E4B20 != -1)
        dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
      return (id)_NRLogWithArgs(qword_1001E4B18, 17, "Received an unexpected unassertAgent call");
    }
  }
  return result;
}

void sub_10014E620(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.networkrelay", "");
  v2 = (void *)qword_1001E4B18;
  qword_1001E4B18 = (uint64_t)v1;

}

id sub_10014E650(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  id result;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    v4 = v3 == 0;
    *(_DWORD *)(v2 + 16) = v3 + 1;
  }
  else
  {
    v4 = 1;
  }
  if (qword_1001E4B20 != -1)
    dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
  if (_NRLogIsLevelEnabled(qword_1001E4B18, 0))
  {
    if (qword_1001E4B20 != -1)
      dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 16);
    _NRLogWithArgs(qword_1001E4B18, 0, "%s%.30s:%-4d Phone call relay agent asserted (Total active assertions: %u)", "", "-[NRPhoneCallRelayAgent assertAgentWithOptions:]_block_invoke", 157, v5);
  }
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      WeakRetained = objc_loadWeakRetained((id *)(v6 + 56));
    else
      WeakRetained = 0;
    objc_msgSend(WeakRetained, "deviceHasPhoneCallRelayRequest:", 1);

  }
  result = objc_msgSend(*(id *)(a1 + 32), "isActive");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setActive:", 1);
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      v10 = *(void **)(v9 + 48);
    else
      v10 = 0;
    return objc_msgSend(v10, "updateNetworkAgent:");
  }
  return result;
}

void sub_10014E7AC(uint64_t a1)
{
  id v2;
  id v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  if (a1 && *(_BYTE *)(a1 + 14))
  {
    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v2 = (id)qword_1001E4A18;
    sub_100127618((uint64_t)v2, *(void **)(a1 + 64));

    objc_opt_self(NRDPolicySessionManager);
    if (qword_1001E4A20 != -1)
      dispatch_once(&qword_1001E4A20, &stru_1001B8590);
    v3 = (id)qword_1001E4A18;
    v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if ((objc_msgSend(v4[2], "apply") & 1) == 0)
        sub_100109270(CFSTR("NRPolicySessionManager"), CFSTR("ApplyPolicy Failed"), 0, 1, CFSTR("Failed to apply policies"), v5, v6, v7, v10);
    }

    if ((objc_msgSend(*(id *)(a1 + 48), "unregisterNetworkAgent") & 1) == 0)
    {
      if (qword_1001E4B20 != -1)
        dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
      if (_NRLogIsLevelEnabled(qword_1001E4B18, 17))
      {
        if (qword_1001E4B20 != -1)
          dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
        _NRLogWithArgs(qword_1001E4B18, 17, "Failed to unregister PhoneCallRelay agent");
      }
    }
    v8 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;

    *(_BYTE *)(a1 + 14) = 0;
    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "agentUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
    sub_100121E18(0, 16003, 0, v9);

  }
}

id *sub_10014EA14(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v18;
  int IsLevelEnabled;
  id v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  objc_super v27;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v27.receiver = a1;
    v27.super_class = (Class)NRPhoneCallRelayAgent;
    v8 = (id *)objc_msgSendSuper2(&v27, "init");
    if (!v8)
    {
      v18 = sub_10014EC64();
      IsLevelEnabled = _NRLogIsLevelEnabled(v18, 16);

      if (IsLevelEnabled)
      {
        v20 = sub_10014EC64();
        _NRLogWithArgs(v20, 16, "%s%.30s:%-4d ABORTING: [super init] failed", "", "-[NRPhoneCallRelayAgent initWithQueue:delegate:]", 36);

      }
      v21 = _os_log_pack_size(12);
      v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = __error();
      v24 = _os_log_pack_fill(v22, v21, *v23, &_mh_execute_header, "%{public}s [super init] failed");
      *(_DWORD *)v24 = 136446210;
      *(_QWORD *)(v24 + 4) = "-[NRPhoneCallRelayAgent initWithQueue:delegate:]";
      v25 = sub_10014EC64();
      _NRLogAbortWithPack(v25, v22);
    }
    a1 = v8;
    objc_storeStrong(v8 + 5, a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    objc_msgSend(a1, "setAgentUUID:", v9);

    objc_msgSend(a1, "setUserActivated:", 1);
    objc_msgSend(a1, "setAgentDescription:", CFSTR("Phone call relay netagent"));
    objc_storeWeak(a1 + 7, v7);
    v10 = objc_alloc((Class)NSString);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "agentUUID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
    v13 = objc_msgSend(v10, "initWithFormat:", CFSTR("NRPhoneCallRelayAgent-%@"), v12);
    v14 = a1[8];
    a1[8] = v13;

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "agentUUID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
    sub_100121E18(0, 16001, 0, v16);

  }
  return a1;
}

id sub_10014EC64()
{
  if (qword_1001E4B20 != -1)
    dispatch_once(&qword_1001E4B20, &stru_1001B8B20);
  return (id)qword_1001E4B18;
}

id objc_msgSend_AWDL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "AWDL");
}

id objc_msgSend_NANData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NANData");
}

id objc_msgSend_SSID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "SSID");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_UUIDWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDWithString:");
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createDispatchData");
}

id objc_msgSend__newZeroingDataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_newZeroingDataWithBytes:length:");
}

id objc_msgSend_acceptInvitation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acceptInvitation");
}

id objc_msgSend_accountIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIdentifier:");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accounts");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activeDevices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeDevices");
}

id objc_msgSend_activeOperationalScope(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeOperationalScope");
}

id objc_msgSend_activePairer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activePairer");
}

id objc_msgSend_activityWithType_reason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activityWithType:reason:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDiscoveryType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDiscoveryType:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addMatchToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addMatchToken:");
}

id objc_msgSend_addNetworkAgentToInterfaceNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNetworkAgentToInterfaceNamed:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_addRouterID_toTLVs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addRouterID:toTLVs:");
}

id objc_msgSend_addToProhibited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addToProhibited:");
}

id objc_msgSend_addUpdateForRoute_interval_toTLVs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUpdateForRoute:interval:toTLVs:");
}

id objc_msgSend_addrStr(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addrStr");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "address");
}

id objc_msgSend_addressData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addressData");
}

id objc_msgSend_addressFamily(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addressFamily");
}

id objc_msgSend_agentDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentDescription");
}

id objc_msgSend_agentDomain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentDomain");
}

id objc_msgSend_agentType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentType");
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentUUID");
}

id objc_msgSend_aggregateStatsTimerSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aggregateStatsTimerSource");
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInterfaces");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowedLinkSubtypes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedLinkSubtypes");
}

id objc_msgSend_allowedLinkTypes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedLinkTypes");
}

id objc_msgSend_allowedPeerDeviceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedPeerDeviceType");
}

id objc_msgSend_allowsDeadPeerDetection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsDeadPeerDetection");
}

id objc_msgSend_allowsDemuxForwarding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsDemuxForwarding");
}

id objc_msgSend_allowsDeviceDiscovery(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsDeviceDiscovery");
}

id objc_msgSend_allowsDirectToCloud(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsDirectToCloud");
}

id objc_msgSend_allowsListenerClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsListenerClients");
}

id objc_msgSend_allowsUnsafeSocketAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsUnsafeSocketAccess");
}

id objc_msgSend_appSvcPolicyIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appSvcPolicyIDs");
}

id objc_msgSend_appVPN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appVPN");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apply");
}

id objc_msgSend_applyUsingSystem(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applyUsingSystem");
}

id objc_msgSend_apsIsConnected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apsIsConnected:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assertAgentWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertAgentWithOptions:");
}

id objc_msgSend_authData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authData");
}

id objc_msgSend_authMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authMethod");
}

id objc_msgSend_authTagForData_type_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authTagForData:type:error:");
}

id objc_msgSend_availability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availability");
}

id objc_msgSend_bPrefix(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bPrefix");
}

id objc_msgSend_babelInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "babelInterface");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_beginActivity_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginActivity:error:");
}

id objc_msgSend_blob(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blob");
}

id objc_msgSend_bluetoothEndpointType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bluetoothEndpointType");
}

id objc_msgSend_bluetoothRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bluetoothRole");
}

id objc_msgSend_bluetoothUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bluetoothUUID");
}

id objc_msgSend_BOOLForKey_keyExistsAndHasValidFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLForKey:keyExistsAndHasValidFormat:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_busy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "busy");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelIfMatchesPrefix_routerID_seqno_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelIfMatchesPrefix:routerID:seqno:");
}

id objc_msgSend_cancelIfRouteUnselected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelIfRouteUnselected");
}

id objc_msgSend_cancelInvitation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelInvitation");
}

id objc_msgSend_cancelPeripheralConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelPeripheralConnection:");
}

id objc_msgSend_cancelTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelTimer");
}

id objc_msgSend_cancelWithDelay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelWithDelay:");
}

id objc_msgSend_cancelWithReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelWithReason:");
}

id objc_msgSend_cancelled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelled");
}

id objc_msgSend_candidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "candidate");
}

id objc_msgSend_cbUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cbUUID");
}

id objc_msgSend_centralManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "centralManager");
}

id objc_msgSend_changeStateTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeStateTo:");
}

id objc_msgSend_changeStateTo_details_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeStateTo:details:");
}

id objc_msgSend_changeStateTo_detailsFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changeStateTo:detailsFormat:");
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "channel");
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "charValue");
}

id objc_msgSend_checkPeerAvailabilityWithForceAggressive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkPeerAvailabilityWithForceAggressive:");
}

id objc_msgSend_checkProxyAgentWithForceUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkProxyAgentWithForceUpdate:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_combinePreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "combinePreferences:");
}

id objc_msgSend_companionProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "companionProxyAgent");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completionBlock");
}

id objc_msgSend_completionQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completionQueue");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connect");
}

id objc_msgSend_connectPeripheral_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectPeripheral:options:");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_connection_didChangeConnectedStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection:didChangeConnectedStatus:");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connectionState");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyAllIPv4(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAllIPv4");
}

id objc_msgSend_copyAllIPv6(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAllIPv6");
}

id objc_msgSend_copyAppRuleIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAppRuleIDs");
}

id objc_msgSend_copyCEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCEndpoint");
}

id objc_msgSend_copyCParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCParameters");
}

id objc_msgSend_copyCriteriaForCellularSlicing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCriteriaForCellularSlicing");
}

id objc_msgSend_copyDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDescription");
}

id objc_msgSend_copyDescriptionInner(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDescriptionInner");
}

id objc_msgSend_copyExcludedBundleIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyExcludedBundleIdentifiers");
}

id objc_msgSend_copyKeyList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyKeyList");
}

id objc_msgSend_copyMatchTokens(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyMatchTokens");
}

id objc_msgSend_copyName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyName");
}

id objc_msgSend_copyNeighborWithAddr_babelInterface_isNewNeighbor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyNeighborWithAddr:babelInterface:isNewNeighbor:");
}

id objc_msgSend_copyNotifyPayloadsToSendWithProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyNotifyPayloadsToSendWithProxy:");
}

id objc_msgSend_copyPendingOutgoingSeqnoReqWithPrefix_routerID_isNewPOSR_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPendingOutgoingSeqnoReqWithPrefix:routerID:isNewPOSR:");
}

id objc_msgSend_copyPropertiesForDefaultPairedPhone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyPropertiesForDefaultPairedPhone");
}

id objc_msgSend_copyRouteWithPrefix_neighbor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyRouteWithPrefix:neighbor:");
}

id objc_msgSend_copySendData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySendData");
}

id objc_msgSend_copySharedManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySharedManager");
}

id objc_msgSend_copyShortDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyShortDescription");
}

id objc_msgSend_copyShortDescriptionInner(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyShortDescriptionInner");
}

id objc_msgSend_copySourceWithPrefix_routerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copySourceWithPrefix:routerID:");
}

id objc_msgSend_copyStatusString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyStatusString");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countryCode");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFromEncodedXPCDict_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFromEncodedXPCDict:");
}

id objc_msgSend_createIHUTLV(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createIHUTLV");
}

id objc_msgSend_createPersonalHelloTLV(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createPersonalHelloTLV");
}

id objc_msgSend_createSelectedRoutesArrayForPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createSelectedRoutesArrayForPrefix:");
}

id objc_msgSend_createTLV(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createTLV");
}

id objc_msgSend_createUpdateTLVs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createUpdateTLVs");
}

id objc_msgSend_createUpdateTLVsForPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createUpdateTLVsForPrefix:");
}

id objc_msgSend_createUpdateTLVsForRoutes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createUpdateTLVsForRoutes:");
}

id objc_msgSend_createUpdateTLVsForRoutes_interval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createUpdateTLVsForRoutes:interval:");
}

id objc_msgSend_createUpdateTLVsWithInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createUpdateTLVsWithInterval:");
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKnownNetworkProfile");
}

id objc_msgSend_customEntitlement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customEntitlement:");
}

id objc_msgSend_customIKEAuthPrivateNotifies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customIKEAuthPrivateNotifies");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_datagramConnectionForSessionDestination_uid_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datagramConnectionForSessionDestination:uid:error:");
}

id objc_msgSend_datapathID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "datapathID");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateCreated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateCreated");
}

id objc_msgSend_dateEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateEnabled");
}

id objc_msgSend_dateRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateRegistered");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_declineInvitation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "declineInvitation");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decryptWithSession_returnError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decryptWithSession:returnError:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegate");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionWithNextHop_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithNextHop:");
}

id objc_msgSend_descriptionWithoutPlen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithoutPlen");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destination");
}

id objc_msgSend_destroy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "destroy");
}

id objc_msgSend_deviceForBluetoothID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceForBluetoothID:");
}

id objc_msgSend_deviceForFromID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceForFromID:");
}

id objc_msgSend_deviceHasBTLinkUpgradeRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceHasBTLinkUpgradeRequest:");
}

id objc_msgSend_deviceHasPhoneCallRelayRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceHasPhoneCallRelayRequest:");
}

id objc_msgSend_deviceHasQuickRelayRequest_hasQuickRelayRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceHasQuickRelayRequest:hasQuickRelayRequest:");
}

id objc_msgSend_deviceIRKData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIRKData");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceType");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "devices");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didCompleteIncomingResolveRequestForASName_asClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didCompleteIncomingResolveRequestForASName:asClient:");
}

id objc_msgSend_didStartBrowseRequestForASName_asClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStartBrowseRequestForASName:asClient:");
}

id objc_msgSend_didStartResolveRequestForASName_asClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStartResolveRequestForASName:asClient:");
}

id objc_msgSend_didStopBrowseRequestForASName_asClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStopBrowseRequestForASName:asClient:");
}

id objc_msgSend_didStopResolveRequestForASName_asClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didStopResolveRequestForASName:asClient:");
}

id objc_msgSend_didUpdateDNSProxyState_state_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUpdateDNSProxyState:state:");
}

id objc_msgSend_didUpdatePHSState_llphsActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUpdatePHSState:llphsActive:");
}

id objc_msgSend_directToCloudRequestAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directToCloudRequestAvailable");
}

id objc_msgSend_directToCloudRequestUnavailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directToCloudRequestUnavailable");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnect");
}

id objc_msgSend_disconnectFromPeripherals(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectFromPeripherals");
}

id objc_msgSend_disconnectPeripheral_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disconnectPeripheral:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain:");
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drop");
}

id objc_msgSend_dtlsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dtlsEnabled");
}

id objc_msgSend_dtlsReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dtlsReady");
}

id objc_msgSend_dtlsStack(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dtlsStack");
}

id objc_msgSend_effectiveApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveApplication:");
}

id objc_msgSend_effectivePID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectivePID:");
}

id objc_msgSend_effectiveRemoteEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveRemoteEndpoint");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endSession");
}

id objc_msgSend_endpointWithAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithAddress:");
}

id objc_msgSend_endpointWithCEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithCEndpoint:");
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithHostname:port:");
}

id objc_msgSend_endpointsAreCompatible_remoteEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointsAreCompatible:remoteEndpoint:");
}

id objc_msgSend_enqueueNextIHU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enqueueNextIHU");
}

id objc_msgSend_enqueueNextUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enqueueNextUpdate");
}

id objc_msgSend_enqueuePairer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enqueuePairer:");
}

id objc_msgSend_enqueuedPairers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enqueuedPairers");
}

id objc_msgSend_entitlements(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "entitlements");
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_excludeClientApplication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeClientApplication");
}

id objc_msgSend_excludeLegacyClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeLegacyClients");
}

id objc_msgSend_excludeNonMatchingLegacyClients(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "excludeNonMatchingLegacyClients");
}

id objc_msgSend_fakeInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fakeInterfaces");
}

id objc_msgSend_fakeLinkIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fakeLinkIndex");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_flowIPProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowIPProtocol:");
}

id objc_msgSend_flowLocalAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowLocalAddress:prefix:");
}

id objc_msgSend_flowRemoteAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowRemoteAddress:prefix:");
}

id objc_msgSend_forwardNonMatchingTraffic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forwardNonMatchingTraffic");
}

id objc_msgSend_fullDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullDescription");
}

id objc_msgSend_fullIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullIdentity");
}

id objc_msgSend_fullIdentityClassA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullIdentityClassA:");
}

id objc_msgSend_fullIdentityClassC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullIdentityClassC:");
}

id objc_msgSend_fullIdentityClassD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fullIdentityClassD:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getIdentitiesWithFlags_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getIdentitiesWithFlags:completion:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_handleAckReqFromAddr_babelInterface_nonce_interval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAckReqFromAddr:babelInterface:nonce:interval:");
}

id objc_msgSend_handleDTLSStack_inboundDecryptedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDTLSStack:inboundDecryptedData:");
}

id objc_msgSend_handleDTLSStack_outboundEncryptedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDTLSStack:outboundEncryptedData:");
}

id objc_msgSend_handleHelloFromAddr_babelInterface_seqno_interval_personal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHelloFromAddr:babelInterface:seqno:interval:personal:");
}

id objc_msgSend_handleHelloWithSeqno_interval_personal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleHelloWithSeqno:interval:personal:");
}

id objc_msgSend_handleIHUFromAddr_babelInterface_rxcost_interval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleIHUFromAddr:babelInterface:rxcost:interval:");
}

id objc_msgSend_handleIfBringupPathUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleIfBringupPathUpdate:");
}

id objc_msgSend_handleIsReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleIsReady:");
}

id objc_msgSend_handleNotifyCode_payload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNotifyCode:payload:");
}

id objc_msgSend_handlePacket_length_remoteAddr_localAddr_babelInterface_dtls_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePacket:length:remoteAddr:localAddr:babelInterface:dtls:");
}

id objc_msgSend_handlePairingCompletionWithSuccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePairingCompletionWithSuccess:");
}

id objc_msgSend_handlePathUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePathUpdate:");
}

id objc_msgSend_handleReplyFullName_hostTarget_port_txtRecord_ifIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleReplyFullName:hostTarget:port:txtRecord:ifIndex:");
}

id objc_msgSend_handleReplyName_type_domain_ifIndex_add_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleReplyName:type:domain:ifIndex:add:");
}

id objc_msgSend_handleRouteReqFromAddr_babelInterface_ForPrefix_plen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleRouteReqFromAddr:babelInterface:ForPrefix:plen:");
}

id objc_msgSend_handleSeqnoReqFromAddr_babelInterface_ForPrefix_plen_routerID_seqno_hopCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleSeqnoReqFromAddr:babelInterface:ForPrefix:plen:routerID:seqno:hopCount:");
}

id objc_msgSend_handleThermalStateUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleThermalStateUpdate");
}

id objc_msgSend_handleUpdateFromAddr_ForPrefix_plen_nextHop_babelInterface_routerID_seqno_interval_metric_ae_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUpdateFromAddr:ForPrefix:plen:nextHop:babelInterface:routerID:seqno:interval:metric:ae:");
}

id objc_msgSend_handlesLinkRecommendations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlesLinkRecommendations");
}

id objc_msgSend_hasActiveDataSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasActiveDataSession");
}

id objc_msgSend_hasClassCPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasClassCPolicies");
}

id objc_msgSend_hasClassDPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasClassDPolicies");
}

id objc_msgSend_hasCompanionDatapath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasCompanionDatapath");
}

id objc_msgSend_hasPairerForNRUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPairerForNRUUID:");
}

id objc_msgSend_hasPoliciesForProxyCriteria(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPoliciesForProxyCriteria");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProxyCriteriaAssigningTokens(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasProxyCriteriaAssigningTokens");
}

id objc_msgSend_hasReportedUpgradeStatusToSymptoms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasReportedUpgradeStatusToSymptoms");
}

id objc_msgSend_hasRouteRulePolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRouteRulePolicy");
}

id objc_msgSend_hasSavedClassCKeysInKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSavedClassCKeysInKeychain");
}

id objc_msgSend_hasScheduledSendingLocalClassCUnlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasScheduledSendingLocalClassCUnlock");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_hostState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostState");
}

id objc_msgSend_hostname(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostname");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierData");
}

id objc_msgSend_identifierType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierType");
}

id objc_msgSend_identities(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identities");
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsDeviceID");
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "idsDeviceIdentifier");
}

id objc_msgSend_ifIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifIndex");
}

id objc_msgSend_ifName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ifName");
}

id objc_msgSend_ikeClassCEstablished(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeClassCEstablished");
}

id objc_msgSend_ikeClassDEstablished(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeClassDEstablished");
}

id objc_msgSend_ikeInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeInterfaceName");
}

id objc_msgSend_ikeListener(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeListener");
}

id objc_msgSend_ikeSessionClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeSessionClassC");
}

id objc_msgSend_ikeSessionClassD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeSessionClassD");
}

id objc_msgSend_ikeSessionPointerForDataProtectionClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikeSessionPointerForDataProtectionClass:");
}

id objc_msgSend_ikev2Role(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ikev2Role");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_initForHighThroughputWithServiceClass_includeP2P_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForHighThroughputWithServiceClass:includeP2P:");
}

id objc_msgSend_initInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initInternal");
}

id objc_msgSend_initInternalWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initInternalWithUUID:");
}

id objc_msgSend_initLinkWithQueue_linkDelegate_nrUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initLinkWithQueue:linkDelegate:nrUUID:");
}

id objc_msgSend_initLinkWithQueue_linkDelegate_nrUUID_wifiInterfaceName_localOuterEndpoint_remoteOuterEndpoint_listenerPortString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:");
}

id objc_msgSend_initManagerWithQueue_managerDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initManagerWithQueue:managerDelegate:");
}

id objc_msgSend_initWithAccount_destinations_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAccount:destinations:options:");
}

id objc_msgSend_initWithAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAddress:");
}

id objc_msgSend_initWithAddress_babelInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAddress:babelInterface:");
}

id objc_msgSend_initWithAdvisoryInterface_advisoryMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAdvisoryInterface:advisoryMode:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:queue:");
}

id objc_msgSend_initWithDelegate_queue_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:queue:options:");
}

id objc_msgSend_initWithDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDeviceIdentifier:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDigitalSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDigitalSignature:");
}

id objc_msgSend_initWithDiscoveryResult_serviceType_serviceSpecificInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDiscoveryResult:serviceType:serviceSpecificInfo:");
}

id objc_msgSend_initWithDomain_pairedDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:pairedDevice:");
}

id objc_msgSend_initWithEncryptionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEncryptionType:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithHashType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHashType:");
}

id objc_msgSend_initWithIKEConfig_firstChildConfig_sessionConfig_queue_ipsecInterface_ikeSocketHandler_kernelSASessionName_packetDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIKEConfig:firstChildConfig:sessionConfig:queue:ipsecInterface:ikeSocketHandler:kernelSASessionName:packetDelegate:");
}

id objc_msgSend_initWithInstance_interface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInstance:interface:");
}

id objc_msgSend_initWithInstance_link_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInstance:link:");
}

id objc_msgSend_initWithInstance_prefix_routerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInstance:prefix:routerID:");
}

id objc_msgSend_initWithInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInterfaceName:");
}

id objc_msgSend_initWithInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInterval:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithKeyID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeyID:");
}

id objc_msgSend_initWithKeyID_aad_key_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeyID:aad:key:");
}

id objc_msgSend_initWithKeyID_aad_keyRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeyID:aad:keyRef:");
}

id objc_msgSend_initWithKeyIDString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKeyIDString:");
}

id objc_msgSend_initWithListenerIKEConfig_kernelSASessionName_listenerUDPPort_listenerQueue_delegate_delegateQueue_includeP2P_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithListenerIKEConfig:kernelSASessionName:listenerUDPPort:listenerQueue:delegate:delegateQueue:includeP2P:");
}

id objc_msgSend_initWithListenerIKEConfig_kernelSASessionName_packetDelegate_listenerQueue_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithListenerIKEConfig:kernelSASessionName:packetDelegate:listenerQueue:delegate:delegateQueue:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithMethod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMethod:");
}

id objc_msgSend_initWithNRUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNRUUID:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_delegate_enableWithChannelCount_netifRingSize_kernelPipeTxRingSize_kernelPipeRxRingSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:");
}

id objc_msgSend_initWithName_delegate_enableWithChannelCount_netifRingSize_kernelPipeTxRingSize_kernelPipeRxRingSize_execUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:execUUID:");
}

id objc_msgSend_initWithNetworkAgentClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentClass:");
}

id objc_msgSend_initWithNonStandardDigitalSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNonStandardDigitalSignature:");
}

id objc_msgSend_initWithNotifyStatus_notifyData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNotifyStatus:notifyData:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOrder:result:conditions:");
}

id objc_msgSend_initWithPrefix_instance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPrefix:instance:");
}

id objc_msgSend_initWithPrefix_neighbor_routerID_seqno_interval_receivedMetric_nextHop_instance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPrefix:neighbor:routerID:seqno:interval:receivedMetric:nextHop:instance:");
}

id objc_msgSend_initWithPrefix_plen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPrefix:plen:");
}

id objc_msgSend_initWithPrefix_routerID_seqno_metric_instance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPrefix:routerID:seqno:metric:instance:");
}

id objc_msgSend_initWithProxyConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProxyConfiguration:");
}

id objc_msgSend_initWithReceivedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithReceivedData:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceType_securityConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceType:securityConfiguration:");
}

id objc_msgSend_initWithSrcIfIndex_dstIfIndex_name_type_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSrcIfIndex:dstIfIndex:name:type:domain:");
}

id objc_msgSend_initWithSrcIfIndex_dstIfIndex_name_type_domain_hostTarget_port_txtRecord_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSrcIfIndex:dstIfIndex:name:type:domain:hostTarget:port:txtRecord:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUnsignedInt:");
}

id objc_msgSend_initWithWithAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWithAttributes:");
}

id objc_msgSend_initiateConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiateConnection");
}

id objc_msgSend_initiatePairing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiatePairing");
}

id objc_msgSend_initiatorDataAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiatorDataAddress");
}

id objc_msgSend_initiatorDataSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiatorDataSession");
}

id objc_msgSend_initiatorDiscoveryResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initiatorDiscoveryResult");
}

id objc_msgSend_inputBytesPerSecond(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputBytesPerSecond");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_instance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instance");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceNames");
}

id objc_msgSend_interfaceToPeerAddressDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceToPeerAddressDictionary");
}

id objc_msgSend_interfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaces");
}

id objc_msgSend_intersectsSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectsSet:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAggregateStatsTimerSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateAggregateStatsTimerSource");
}

id objc_msgSend_invalidateIKESession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateIKESession:");
}

id objc_msgSend_invalidateIKESessionClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateIKESessionClassC");
}

id objc_msgSend_invalidateIKESessionClassD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateIKESessionClassD");
}

id objc_msgSend_invalidateIKESessionForClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateIKESessionForClass:");
}

id objc_msgSend_invalidateLink(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateLink");
}

id objc_msgSend_invalidateManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateManager");
}

id objc_msgSend_invalidateVirtualInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateVirtualInterface");
}

id objc_msgSend_ipProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ipProtocol:");
}

id objc_msgSend_ipv6LinkLocalAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ipv6LinkLocalAddress");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isCompanionLink(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCompanionLink");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isContainedInPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isContainedInPrefix:");
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDefaultPairedDevice");
}

id objc_msgSend_isEmptyPairing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEmptyPairing");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isIKEResponder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIKEResponder");
}

id objc_msgSend_isInitiator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInitiator");
}

id objc_msgSend_isLocalAddressEqualTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isLocalAddressEqualTo:");
}

id objc_msgSend_isNewDistanceUnfeasibleForPrefix_routerID_seqno_metric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNewDistanceUnfeasibleForPrefix:routerID:seqno:metric:");
}

id objc_msgSend_isNewDistanceUnfeasibleWithSeqno_metric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNewDistanceUnfeasibleWithSeqno:metric:");
}

id objc_msgSend_isNextHopEqualTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNextHopEqualTo:");
}

id objc_msgSend_isNotEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNotEmpty");
}

id objc_msgSend_isPairing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPairing");
}

id objc_msgSend_isPeerPaired_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPeerPaired:");
}

id objc_msgSend_isPeripheralRole(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPeripheralRole");
}

id objc_msgSend_isPersonalHotspot(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPersonalHotspot");
}

id objc_msgSend_isPrimary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrimary");
}

id objc_msgSend_isReachableOverWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isReachableOverWiFi");
}

id objc_msgSend_isUnpairRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUnpairRequest");
}

id objc_msgSend_isUnpairing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUnpairing");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastReceivedAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastReceivedAdvice");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_linkDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkDelegate");
}

id objc_msgSend_linkDidReceiveData_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkDidReceiveData:data:");
}

id objc_msgSend_linkIsAvailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkIsAvailable:");
}

id objc_msgSend_linkIsReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkIsReady:");
}

id objc_msgSend_linkIsSuspended_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkIsSuspended:");
}

id objc_msgSend_linkIsUnavailable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkIsUnavailable:");
}

id objc_msgSend_linkPeerIsAsleep_isAsleep_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkPeerIsAsleep:isAsleep:");
}

id objc_msgSend_linkTotalReadyTimeInSec(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkTotalReadyTimeInSec");
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkType");
}

id objc_msgSend_loadConfigurationsWithCompletionQueue_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadConfigurationsWithCompletionQueue:handler:");
}

id objc_msgSend_localAWDLEndpointChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localAWDLEndpointChanged:");
}

id objc_msgSend_localAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localAddress");
}

id objc_msgSend_localAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localAddress:prefix:");
}

id objc_msgSend_localEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localEndpoint");
}

id objc_msgSend_localIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localIdentifier");
}

id objc_msgSend_localInnerIPv6AddressBytesClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localInnerIPv6AddressBytesClassC");
}

id objc_msgSend_localInnerIPv6AddressBytesClassD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localInnerIPv6AddressBytesClassD");
}

id objc_msgSend_localInterfaceIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localInterfaceIndex");
}

id objc_msgSend_localInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localInterfaceName");
}

id objc_msgSend_localOuterEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localOuterEndpoint");
}

id objc_msgSend_localToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localToken");
}

id objc_msgSend_localizedCaseInsensitiveContainsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedCaseInsensitiveContainsString:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_lockSessionToCurrentProcess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lockSessionToCurrentProcess");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_machOUUIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machOUUIDs");
}

id objc_msgSend_matchResultAccountID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchResultAccountID");
}

id objc_msgSend_matchResultBundleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchResultBundleID");
}

id objc_msgSend_matchesAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesAddress:");
}

id objc_msgSend_matchesAddress_babelInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesAddress:babelInterface:");
}

id objc_msgSend_matchesPrefix_neighbor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesPrefix:neighbor:");
}

id objc_msgSend_matchesPrefix_plen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesPrefix:plen:");
}

id objc_msgSend_matchesPrefix_routerID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesPrefix:routerID:");
}

id objc_msgSend_maxTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxTime");
}

id objc_msgSend_mergeProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeProperties:");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadata");
}

id objc_msgSend_metric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metric");
}

id objc_msgSend_minTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minTime");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_mtu(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mtu");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_neighbor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "neighbor");
}

id objc_msgSend_neighbors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "neighbors");
}

id objc_msgSend_netAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netAgentUUID:");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nexusInstances(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nexusInstances");
}

id objc_msgSend_nodeSeqno(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nodeSeqno");
}

id objc_msgSend_notifyData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyData");
}

id objc_msgSend_notifyStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyStatus");
}

id objc_msgSend_nrUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nrUUID");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_numExpiryTimerFires(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numExpiryTimerFires");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_ofClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:ofClass:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_onlyAllowClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "onlyAllowClassC");
}

id objc_msgSend_opMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "opMode");
}

id objc_msgSend_operationalProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationalProperties");
}

id objc_msgSend_operationalScope(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operationalScope");
}

id objc_msgSend_outgoingInterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outgoingInterfaceName");
}

id objc_msgSend_outputBytesPerSecond(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputBytesPerSecond");
}

id objc_msgSend_packetsPerSecond(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "packetsPerSecond");
}

id objc_msgSend_pair(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pair");
}

id objc_msgSend_pairPeer_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairPeer:options:");
}

id objc_msgSend_pairWithParameters_completionQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairWithParameters:completionQueue:completionBlock:");
}

id objc_msgSend_pairedPeerBluetoothUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairedPeerBluetoothUUID");
}

id objc_msgSend_pairingClient(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingClient");
}

id objc_msgSend_pairingCriteria(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingCriteria");
}

id objc_msgSend_pairingProtocolVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingProtocolVersion");
}

id objc_msgSend_pairingTransport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingTransport");
}

id objc_msgSend_pairingType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pairingType");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parameters");
}

id objc_msgSend_pathEvaluator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathEvaluator");
}

id objc_msgSend_pathForClientID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForClientID:");
}

id objc_msgSend_peer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peer");
}

id objc_msgSend_peerAvailabilityCheckInProgress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerAvailabilityCheckInProgress");
}

id objc_msgSend_peerDidUnpairBluetooth_nrUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerDidUnpairBluetooth:nrUUID:");
}

id objc_msgSend_peerEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerEndpoint");
}

id objc_msgSend_peerInstanceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerInstanceID");
}

id objc_msgSend_peerToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peerToken");
}

id objc_msgSend_peripheralManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peripheralManager");
}

id objc_msgSend_peripheralReconnectCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peripheralReconnectCounter");
}

id objc_msgSend_peripherals(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "peripherals");
}

id objc_msgSend_perpetualStandaloneMeadowEnabledForNRUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perpetualStandaloneMeadowEnabledForNRUUID:");
}

id objc_msgSend_pipeDidConnectForNRUUID_nrUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipeDidConnectForNRUUID:nrUUID:");
}

id objc_msgSend_platformBinary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platformBinary");
}

id objc_msgSend_plen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plen");
}

id objc_msgSend_policyIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyIDs");
}

id objc_msgSend_policyIdentifierString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyIdentifierString");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "port");
}

id objc_msgSend_posrs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "posrs");
}

id objc_msgSend_powerOn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerOn");
}

id objc_msgSend_preferWiFiP2PRequestUpdated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferWiFiP2PRequestUpdated");
}

id objc_msgSend_preferWiFiRequestAvailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferWiFiRequestAvailable");
}

id objc_msgSend_preferWiFiRequestUnavailable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferWiFiRequestUnavailable");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priority");
}

id objc_msgSend_processIKEDisconnection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processIKEDisconnection:error:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processName");
}

id objc_msgSend_processPendingOutgoingPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processPendingOutgoingPackets");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_proposals(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proposals");
}

id objc_msgSend_providesPhoneCallRelaySupport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "providesPhoneCallRelaySupport");
}

id objc_msgSend_proxyAgentRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAgentRegistration");
}

id objc_msgSend_proxyAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAgentUUID");
}

id objc_msgSend_proxyCapability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyCapability");
}

id objc_msgSend_proxyProviderCriteria(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProviderCriteria");
}

id objc_msgSend_proxyProviderRequiresWiFi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProviderRequiresWiFi");
}

id objc_msgSend_proxyUsageRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyUsageRules");
}

id objc_msgSend_publicIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicIdentity");
}

id objc_msgSend_publicIdentityClassA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicIdentityClassA:");
}

id objc_msgSend_publicIdentityClassC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicIdentityClassC:");
}

id objc_msgSend_publicIdentityClassD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publicIdentityClassD:");
}

id objc_msgSend_publishDNSConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishDNSConfig:");
}

id objc_msgSend_publishID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishID");
}

id objc_msgSend_publishedMasqueProxyConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishedMasqueProxyConfig");
}

id objc_msgSend_publisherAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publisherAddress");
}

id objc_msgSend_purgeAllRoutesFromNeighbor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeAllRoutesFromNeighbor:");
}

id objc_msgSend_purgeInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeInterface:");
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushToken");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_readDatagramsWithMinimumCount_maximumCount_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readDatagramsWithMinimumCount:maximumCount:completionHandler:");
}

id objc_msgSend_readPackets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readPackets");
}

id objc_msgSend_receivePacketData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivePacketData:");
}

id objc_msgSend_receiveWindowPacketCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receiveWindowPacketCount");
}

id objc_msgSend_receivedMetric(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receivedMetric");
}

id objc_msgSend_refreshCompanionProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshCompanionProxyAgent");
}

id objc_msgSend_registerEndpoint_type_priority_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerEndpoint:type:priority:options:");
}

id objc_msgSend_registerNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerNetworkAgent:");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_remoteAddress_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteAddress:prefix:");
}

id objc_msgSend_remoteClassCUnlocked(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteClassCUnlocked");
}

id objc_msgSend_remoteIDSDeviceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteIDSDeviceID");
}

id objc_msgSend_remoteIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteIdentifier");
}

id objc_msgSend_remoteInnerIPv6AddressBytesClassC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteInnerIPv6AddressBytesClassC");
}

id objc_msgSend_remoteInnerIPv6AddressBytesClassD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteInnerIPv6AddressBytesClassD");
}

id objc_msgSend_remoteOuterEndpoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteOuterEndpoint");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeFirstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFirstObject");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeNetworkAgentFromInterfaceNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentFromInterfaceNamed:");
}

id objc_msgSend_removeNetworkAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentUUID:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removePairerForNRUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePairerForNRUUID:");
}

id objc_msgSend_removePolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePolicies");
}

id objc_msgSend_removePolicyWithID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePolicyWithID:");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_reportBTLinkUpgradeClientAdded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBTLinkUpgradeClientAdded:");
}

id objc_msgSend_reportBTLinkUpgradeClientRemoved_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBTLinkUpgradeClientRemoved:");
}

id objc_msgSend_reportEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportEvent:");
}

id objc_msgSend_reportEvent_details_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportEvent:details:");
}

id objc_msgSend_reportEvent_detailsFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportEvent:detailsFormat:");
}

id objc_msgSend_reportedToABC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportedToABC");
}

id objc_msgSend_representsIHU(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "representsIHU");
}

id objc_msgSend_representsUpdate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "representsUpdate");
}

id objc_msgSend_requestConfigurationForListener_session_sessionConfig_childConfig_validateAuthBlock_responseBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestConfigurationForListener:session:sessionConfig:childConfig:validateAuthBlock:responseBlock:");
}

id objc_msgSend_requiredAgentDomain_agentType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiredAgentDomain:agentType:");
}

id objc_msgSend_requiresReachability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiresReachability");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset");
}

id objc_msgSend_resetExpiryTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetExpiryTimer");
}

id objc_msgSend_resetGCTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetGCTimer");
}

id objc_msgSend_resetIncomingIHUTimerInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetIncomingIHUTimerInterval:");
}

id objc_msgSend_respondToIKESession_dataProtectionClass_validateAuthBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "respondToIKESession:dataProtectionClass:validateAuthBlock:");
}

id objc_msgSend_respondToPairingRequest_type_accept_data_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "respondToPairingRequest:type:accept:data:");
}

id objc_msgSend_responderDataSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "responderDataSession");
}

id objc_msgSend_restartIKESessionForDataProtectionClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restartIKESessionForDataProtectionClass:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeUnpairing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumeUnpairing");
}

id objc_msgSend_retrievePairedPeers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrievePairedPeers");
}

id objc_msgSend_retrievePeripheralsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrievePeripheralsWithIdentifiers:");
}

id objc_msgSend_retrySetupIPsec_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retrySetupIPsec:");
}

id objc_msgSend_route(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "route");
}

id objc_msgSend_routeRuleWithAction_forInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forInterfaceName:");
}

id objc_msgSend_routeRuleWithAction_forNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forNetworkAgent:");
}

id objc_msgSend_routeRuleWithAction_forType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forType:");
}

id objc_msgSend_routeRules_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRules:");
}

id objc_msgSend_routerID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routerID");
}

id objc_msgSend_routes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routes");
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rssi");
}

id objc_msgSend_scanForPeripheralsWithServices_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scanForPeripheralsWithServices:options:");
}

id objc_msgSend_scheduleTLV_interval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheduleTLV:interval:");
}

id objc_msgSend_scopeSocketToInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopeSocketToInterfaceName:");
}

id objc_msgSend_scopedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scopedInterface:");
}

id objc_msgSend_selected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selected");
}

id objc_msgSend_sendClassCUnlockedNotify(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendClassCUnlockedNotify");
}

id objc_msgSend_sendControlData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendControlData:");
}

id objc_msgSend_sendFullPacket_iovLen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendFullPacket:iovLen:");
}

id objc_msgSend_sendImmediateRouteUpdateToAllNeighbors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendImmediateRouteUpdateToAllNeighbors");
}

id objc_msgSend_sendImmediateRouteUpdateToNeighbor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendImmediateRouteUpdateToNeighbor:");
}

id objc_msgSend_sendInvitation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendInvitation");
}

id objc_msgSend_sendKeepaliveWithRetries_retryIntervalInMilliseconds_callbackQueue_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendKeepaliveWithRetries:retryIntervalInMilliseconds:callbackQueue:callback:");
}

id objc_msgSend_sendMessage_toPeerAddress_withInstanceID_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendMessage:toPeerAddress:withInstanceID:completionHandler:");
}

id objc_msgSend_sendPacket_iovLen_toAddr_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendPacket:iovLen:toAddr:");
}

id objc_msgSend_sendPrivateNotifies_maxRetries_retryIntervalInMilliseconds_callbackQueue_callback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendPrivateNotifies:maxRetries:retryIntervalInMilliseconds:callbackQueue:callback:");
}

id objc_msgSend_sendRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRequestID:request:options:responseHandler:");
}

id objc_msgSend_sendSeqnoReq(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSeqnoReq");
}

id objc_msgSend_sendSeqnoReqIfNecessaryTo_forPrefix_routerID_seqno_hopCount_originator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendSeqnoReqIfNecessaryTo:forPrefix:routerID:seqno:hopCount:originator:");
}

id objc_msgSend_sendTLVs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendTLVs:");
}

id objc_msgSend_sentLocalClassCUnlockNotify(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sentLocalClassCUnlockNotify");
}

id objc_msgSend_seqno(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seqno");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "service");
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceName");
}

id objc_msgSend_serviceSpecificInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceSpecificInfo");
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionID");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActiveOperationalScope_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveOperationalScope:");
}

id objc_msgSend_setActivePairer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivePairer:");
}

id objc_msgSend_setAdditionalAddressesUpdateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAdditionalAddressesUpdateBlock:");
}

id objc_msgSend_setAgentDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentDescription:");
}

id objc_msgSend_setAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentUUID:");
}

id objc_msgSend_setAllowRedirect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowRedirect:");
}

id objc_msgSend_setAllowedLinkSubtypes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowedLinkSubtypes:");
}

id objc_msgSend_setAllowedLinkTypes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowedLinkTypes:");
}

id objc_msgSend_setAllowedPeerDeviceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowedPeerDeviceType:");
}

id objc_msgSend_setAllowsDeadPeerDetection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowsDeadPeerDetection:");
}

id objc_msgSend_setAllowsDeviceDiscovery_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowsDeviceDiscovery:");
}

id objc_msgSend_setAllowsDirectToCloud_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowsDirectToCloud:");
}

id objc_msgSend_setAllowsPermittedClientsOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowsPermittedClientsOnly:");
}

id objc_msgSend_setAppSvcPolicyIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppSvcPolicyIDs:");
}

id objc_msgSend_setAuthenticationProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationProtocol:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setAvailability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAvailability:");
}

id objc_msgSend_setBleRSSIThresholdHint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBleRSSIThresholdHint:");
}

id objc_msgSend_setBlob_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlob:");
}

id objc_msgSend_setBluetoothMACAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBluetoothMACAddress:");
}

id objc_msgSend_setBluetoothUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBluetoothUUID:");
}

id objc_msgSend_setBusy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBusy:");
}

id objc_msgSend_setCancelled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCancelled:");
}

id objc_msgSend_setCbUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCbUUID:");
}

id objc_msgSend_setCentralManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCentralManager:");
}

id objc_msgSend_setChildStateUpdateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setChildStateUpdateBlock:");
}

id objc_msgSend_setClientQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClientQueue:");
}

id objc_msgSend_setCompanionCountryCode_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionCountryCode:error:");
}

id objc_msgSend_setCompanionLinkPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompanionLinkPreferences:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompletionQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionQueue:");
}

id objc_msgSend_setConfigurationReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationReply:");
}

id objc_msgSend_setConfigurationRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationRequest:");
}

id objc_msgSend_setConfigurationUpdateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationUpdateBlock:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setControlUnit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlUnit:");
}

id objc_msgSend_setCustomIKEAuthPrivateNotifies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCustomIKEAuthPrivateNotifies:");
}

id objc_msgSend_setDatapathConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDatapathConfiguration:");
}

id objc_msgSend_setDateCreated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateCreated:");
}

id objc_msgSend_setDateEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateEnabled:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateRegistered:");
}

id objc_msgSend_setDeadPeerDetectionEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeadPeerDetectionEnabled:");
}

id objc_msgSend_setDeadPeerDetectionInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeadPeerDetectionInterval:");
}

id objc_msgSend_setDeadPeerDetectionMaxRetryCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeadPeerDetectionMaxRetryCount:");
}

id objc_msgSend_setDeadPeerDetectionRetryIntervalMilliseconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeadPeerDetectionRetryIntervalMilliseconds:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceType:");
}

id objc_msgSend_setDisableSwitchToNATTPorts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableSwitchToNATTPorts:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDtlsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDtlsEnabled:");
}

id objc_msgSend_setDtlsReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDtlsReady:");
}

id objc_msgSend_setDtlsStack_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDtlsStack:");
}

id objc_msgSend_setEncryptionProtocols_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncryptionProtocols:");
}

id objc_msgSend_setExtraSupportedSignatureHashes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExtraSupportedSignatureHashes:");
}

id objc_msgSend_setFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFilter:");
}

id objc_msgSend_setForceUDPEncapsulation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceUDPEncapsulation:");
}

id objc_msgSend_setHasAuthenticatedWithIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasAuthenticatedWithIdentity:");
}

id objc_msgSend_setHasClassCPolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasClassCPolicies:");
}

id objc_msgSend_setHasClassDPolicies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasClassDPolicies:");
}

id objc_msgSend_setHasCompletedBluetoothPairing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasCompletedBluetoothPairing:");
}

id objc_msgSend_setHasConfirmedClassAKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasConfirmedClassAKeys:");
}

id objc_msgSend_setHasConfirmedClassCKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasConfirmedClassCKeys:");
}

id objc_msgSend_setHasConfirmedClassDKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasConfirmedClassDKeys:");
}

id objc_msgSend_setHasReportedUpgradeStatusToSymptoms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasReportedUpgradeStatusToSymptoms:");
}

id objc_msgSend_setHasRouteRulePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasRouteRulePolicy:");
}

id objc_msgSend_setHasSavedClassCKeysInKeychain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasSavedClassCKeysInKeychain:");
}

id objc_msgSend_setHasScheduledSendingLocalClassCUnlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHasScheduledSendingLocalClassCUnlock:");
}

id objc_msgSend_setHopCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHopCount:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdleTimeoutEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdleTimeoutEnabled:");
}

id objc_msgSend_setIdsDeviceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIdsDeviceID:");
}

id objc_msgSend_setIkeClassCEstablished_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIkeClassCEstablished:");
}

id objc_msgSend_setIkeClassDEstablished_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIkeClassDEstablished:");
}

id objc_msgSend_setIkeListener_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIkeListener:");
}

id objc_msgSend_setIkev2Role_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIkev2Role:");
}

id objc_msgSend_setInitiatorDataSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInitiatorDataSession:");
}

id objc_msgSend_setInitiatorDiscoveryResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInitiatorDiscoveryResult:");
}

id objc_msgSend_setInstance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstance:");
}

id objc_msgSend_setInstanceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceName:");
}

id objc_msgSend_setInterfaceAvailability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceAvailability");
}

id objc_msgSend_setInterfacePeerEgressFunctionalType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfacePeerEgressFunctionalType:");
}

id objc_msgSend_setInterfaceRank(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceRank");
}

id objc_msgSend_setInterfaceSubfamily(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceSubfamily");
}

id objc_msgSend_setInterfaceToPeerAddressDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceToPeerAddressDictionary:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterval:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsAltAccountDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsAltAccountDevice:");
}

id objc_msgSend_setIsCompanionLink_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsCompanionLink:");
}

id objc_msgSend_setIsEmptyPairing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsEmptyPairing:");
}

id objc_msgSend_setIsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsEnabled:");
}

id objc_msgSend_setIsInitiator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsInitiator:");
}

id objc_msgSend_setIsNRDTestServer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsNRDTestServer:");
}

id objc_msgSend_setIsPairing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPairing:");
}

id objc_msgSend_setIsPeripheralRole_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPeripheralRole:");
}

id objc_msgSend_setIsPrimary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsPrimary:");
}

id objc_msgSend_setIsReachableOverWiFi_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsReachableOverWiFi:");
}

id objc_msgSend_setIsRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsRegistered:");
}

id objc_msgSend_setIsUnpairRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsUnpairRequest:");
}

id objc_msgSend_setIsUnpairing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsUnpairing:");
}

id objc_msgSend_setKemProtocols_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKemProtocols:");
}

id objc_msgSend_setKernelActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKernelActivated:");
}

id objc_msgSend_setLastSeenAlwaysOnWiFiSupported_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSeenAlwaysOnWiFiSupported:");
}

id objc_msgSend_setLastSeenBuildVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSeenBuildVersion:");
}

id objc_msgSend_setLastSeenInnerLinkVersionHBO_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSeenInnerLinkVersionHBO:");
}

id objc_msgSend_setLastSeenName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastSeenName:");
}

id objc_msgSend_setLifetimeSeconds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLifetimeSeconds:");
}

id objc_msgSend_setLinkMTU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkMTU:");
}

id objc_msgSend_setLinkRequirementsForPeer_withClientName_packetsPerSecond_inputBytesPerSecond_outputBytesPerSecond_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkRequirementsForPeer:withClientName:packetsPerSecond:inputBytesPerSecond:outputBytesPerSecond:");
}

id objc_msgSend_setListenerPortString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setListenerPortString:");
}

id objc_msgSend_setLocalAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalAddress:");
}

id objc_msgSend_setLocalAddresses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalAddresses:");
}

id objc_msgSend_setLocalEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalEndpoint:");
}

id objc_msgSend_setLocalFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalFlags:");
}

id objc_msgSend_setLocalIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalIdentifier:");
}

id objc_msgSend_setLocalIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalIdentity:");
}

id objc_msgSend_setLocalInnerIPv6AddressBytesClassC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalInnerIPv6AddressBytesClassC:");
}

id objc_msgSend_setLocalInnerIPv6AddressBytesClassD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalInnerIPv6AddressBytesClassD:");
}

id objc_msgSend_setLocalInterfaceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalInterfaceIndex:");
}

id objc_msgSend_setLocalInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalInterfaceName:");
}

id objc_msgSend_setLocalOuterEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalOuterEndpoint:");
}

id objc_msgSend_setLocalPrivateKeyRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalPrivateKeyRef:");
}

id objc_msgSend_setLocalToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalToken:");
}

id objc_msgSend_setLocalTrafficSelectors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocalTrafficSelectors:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setMtu_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMtu:");
}

id objc_msgSend_setNatTraversalKeepaliveDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNatTraversalKeepaliveDisabled:");
}

id objc_msgSend_setNearbyActionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNearbyActionType:");
}

id objc_msgSend_setNegative_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNegative:");
}

id objc_msgSend_setNegotiateMOBIKE_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNegotiateMOBIKE:");
}

id objc_msgSend_setNetworkAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkAgentUUID:");
}

id objc_msgSend_setNetworkProvider_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkProvider:");
}

id objc_msgSend_setNextHop_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNextHop:");
}

id objc_msgSend_setNoACKPrioritization(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNoACKPrioritization");
}

id objc_msgSend_setNoTransport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNoTransport:");
}

id objc_msgSend_setNodeSeqno_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNodeSeqno:");
}

id objc_msgSend_setNonceSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonceSize:");
}

id objc_msgSend_setNrUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNrUUID:");
}

id objc_msgSend_setNumExpiryTimerFires_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumExpiryTimerFires:");
}

id objc_msgSend_setOOBPairingEnabled_forPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOOBPairingEnabled:forPeer:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOnlyAllowClassC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOnlyAllowClassC:");
}

id objc_msgSend_setOperationalProp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOperationalProp:");
}

id objc_msgSend_setOperationalScope_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOperationalScope:");
}

id objc_msgSend_setOriginator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOriginator:");
}

id objc_msgSend_setOutgoingInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutgoingInterfaceName:");
}

id objc_msgSend_setPacketsPerSecond_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPacketsPerSecond:");
}

id objc_msgSend_setPairedPeerBluetoothUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairedPeerBluetoothUUID:");
}

id objc_msgSend_setPairingClient_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingClient:");
}

id objc_msgSend_setPairingProtocolVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingProtocolVersion:");
}

id objc_msgSend_setPairingType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPairingType:");
}

id objc_msgSend_setParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParameters:");
}

id objc_msgSend_setPathEvaluator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPathEvaluator:");
}

id objc_msgSend_setPeerEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeerEndpoint:");
}

id objc_msgSend_setPeerInstanceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeerInstanceID:");
}

id objc_msgSend_setPeerToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeerToken:");
}

id objc_msgSend_setPeripheralManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeripheralManager:");
}

id objc_msgSend_setPeripheralReconnectCounter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeripheralReconnectCounter:");
}

id objc_msgSend_setPeripherals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPeripherals:");
}

id objc_msgSend_setPolicyIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicyIDs:");
}

id objc_msgSend_setPolicyIdentifierString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPolicyIdentifierString:");
}

id objc_msgSend_setPowerAssertionState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPowerAssertionState:");
}

id objc_msgSend_setPreferInitiatorProposalOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferInitiatorProposalOrder:");
}

id objc_msgSend_setPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferences:");
}

id objc_msgSend_setPrfProtocols_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrfProtocols:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivateNotifyStatusEvent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateNotifyStatusEvent:");
}

id objc_msgSend_setProposals_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProposals:");
}

id objc_msgSend_setProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProtocol:");
}

id objc_msgSend_setProxyAgentRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAgentRegistration:");
}

id objc_msgSend_setProxyCapability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyCapability:");
}

id objc_msgSend_setProxyProviderCriteria_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyProviderCriteria:");
}

id objc_msgSend_setPublishedMasqueProxyConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPublishedMasqueProxyConfig:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setRandomizeLocalPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRandomizeLocalPort:");
}

id objc_msgSend_setReceiveWindowPacketCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReceiveWindowPacketCount:");
}

id objc_msgSend_setReceivedMetric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReceivedMetric:");
}

id objc_msgSend_setReceivedProxyNotifyPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReceivedProxyNotifyPayload:");
}

id objc_msgSend_setRedirectEventBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRedirectEventBlock:");
}

id objc_msgSend_setRemoteAuthentication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteAuthentication:");
}

id objc_msgSend_setRemoteClassCUnlocked_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteClassCUnlocked:");
}

id objc_msgSend_setRemoteEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteEndpoint:");
}

id objc_msgSend_setRemoteFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteFlags:");
}

id objc_msgSend_setRemoteIDSDeviceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteIDSDeviceID:");
}

id objc_msgSend_setRemoteIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteIdentifier:");
}

id objc_msgSend_setRemoteIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteIdentity:");
}

id objc_msgSend_setRemoteInnerIPv6AddressBytesClassC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteInnerIPv6AddressBytesClassC:");
}

id objc_msgSend_setRemoteInnerIPv6AddressBytesClassD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteInnerIPv6AddressBytesClassD:");
}

id objc_msgSend_setRemoteOuterEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteOuterEndpoint:");
}

id objc_msgSend_setRemotePublicKeyRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemotePublicKeyRef:");
}

id objc_msgSend_setRemoteTrafficSelectors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteTrafficSelectors:");
}

id objc_msgSend_setReplayWindowSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReplayWindowSize:");
}

id objc_msgSend_setReportedToABC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReportedToABC:");
}

id objc_msgSend_setRepresentsIHU_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRepresentsIHU:");
}

id objc_msgSend_setRepresentsUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRepresentsUpdate:");
}

id objc_msgSend_setRequestChildlessSA_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestChildlessSA:");
}

id objc_msgSend_setResponderDataSession_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponderDataSession:");
}

id objc_msgSend_setRoute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRoute:");
}

id objc_msgSend_setRouterID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRouterID:");
}

id objc_msgSend_setSelected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSelected:");
}

id objc_msgSend_setSelfManagedBluetoothPairing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSelfManagedBluetoothPairing:");
}

id objc_msgSend_setSentLocalClassCUnlockNotify_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSentLocalClassCUnlockNotify:");
}

id objc_msgSend_setSeqno_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSeqno:");
}

id objc_msgSend_setSequencePerTrafficClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSequencePerTrafficClass:");
}

id objc_msgSend_setServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceName:");
}

id objc_msgSend_setServiceSpecificInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceSpecificInfo:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setSetupIPsecRetryCounter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSetupIPsecRetryCounter:");
}

id objc_msgSend_setSharedSecret_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSharedSecret:");
}

id objc_msgSend_setShortDPDEventBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShortDPDEventBlock:");
}

id objc_msgSend_setSpecificUseOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSpecificUseOnly:");
}

id objc_msgSend_setStartRequested_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartRequested:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateUpdateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStateUpdateBlock:");
}

id objc_msgSend_setStrictNonceSizeChecks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStrictNonceSizeChecks:");
}

id objc_msgSend_setSubtype_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubtype:");
}

id objc_msgSend_setSuspendWhenReady_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuspendWhenReady:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTimeOfConnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeOfConnect:");
}

id objc_msgSend_setTimeOfDisconnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeOfDisconnect:");
}

id objc_msgSend_setTotalCountForBTClassicAdvice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalCountForBTClassicAdvice:");
}

id objc_msgSend_setTotalCountForNonDefaultAdvice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalCountForNonDefaultAdvice:");
}

id objc_msgSend_setTotalCountForWiFiAdvice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalCountForWiFiAdvice:");
}

id objc_msgSend_setTotalDurationForBTClassicAdvice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalDurationForBTClassicAdvice:");
}

id objc_msgSend_setTotalDurationForWiFiAdvice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalDurationForWiFiAdvice:");
}

id objc_msgSend_setTotalIntervalForNonDefaultAdvice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalIntervalForNonDefaultAdvice:");
}

id objc_msgSend_setTotalReceivedUpdates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalReceivedUpdates:");
}

id objc_msgSend_setTrafficSelectorUpdateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrafficSelectorUpdateBlock:");
}

id objc_msgSend_setTxcost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTxcost:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUpdateBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUpdateBlock:");
}

id objc_msgSend_setUserActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserActivated:");
}

id objc_msgSend_setUsesTLS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsesTLS:");
}

id objc_msgSend_setViable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setViable:");
}

id objc_msgSend_setVirtualInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVirtualInterface:");
}

id objc_msgSend_setVoluntary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoluntary:");
}

id objc_msgSend_setWasInitiallySetupUsingIDSPairing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWasInitiallySetupUsingIDSPairing:");
}

id objc_msgSend_setWatchSetupData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWatchSetupData:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setupAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupAddress:");
}

id objc_msgSend_setupGCTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupGCTimer");
}

id objc_msgSend_setupIKECallbacks_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupIKECallbacks:");
}

id objc_msgSend_setupIPsecIfNecessary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupIPsecIfNecessary:");
}

id objc_msgSend_setupIPsecRetryCounter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupIPsecRetryCounter");
}

id objc_msgSend_setupInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupInterfaces");
}

id objc_msgSend_setupLocalAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupLocalAddress");
}

id objc_msgSend_setupLocalAddressCheckAgainst_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupLocalAddressCheckAgainst:");
}

id objc_msgSend_setupVirtualInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupVirtualInterface");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManagerForAllUsers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManagerForAllUsers");
}

id objc_msgSend_sharedPairingAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedPairingAgent");
}

id objc_msgSend_sharedSecret(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedSecret");
}

id objc_msgSend_shouldCreateCompanionProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldCreateCompanionProxyAgent");
}

id objc_msgSend_shouldCreateLinkForNRUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldCreateLinkForNRUUID:");
}

id objc_msgSend_signAndProtectData_withSigner_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signAndProtectData:withSigner:error:");
}

id objc_msgSend_signData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signData:error:");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_skipWithOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipWithOrder:");
}

id objc_msgSend_snapshotWithSignature_duration_event_payload_reply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "snapshotWithSignature:duration:event:payload:reply:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sources");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_startAdvertising_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startAdvertising:");
}

id objc_msgSend_startNextPairer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startNextPairer");
}

id objc_msgSend_startRequested(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startRequested");
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startTime");
}

id objc_msgSend_started(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "started");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "state");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stop");
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopAdvertising");
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopScan");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submit");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subtype");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspend");
}

id objc_msgSend_suspendWhenReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendWhenReady");
}

id objc_msgSend_terminateDataSession_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateDataSession:completionHandler:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeOfConnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeOfConnect");
}

id objc_msgSend_timeOfDisconnect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeOfDisconnect");
}

id objc_msgSend_tlvs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tlvs");
}

id objc_msgSend_totalCountForBTClassicAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalCountForBTClassicAdvice");
}

id objc_msgSend_totalCountForNonDefaultAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalCountForNonDefaultAdvice");
}

id objc_msgSend_totalCountForWiFiAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalCountForWiFiAdvice");
}

id objc_msgSend_totalDurationForBTClassicAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalDurationForBTClassicAdvice");
}

id objc_msgSend_totalDurationForWiFiAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalDurationForWiFiAdvice");
}

id objc_msgSend_totalIntervalForNonDefaultAdvice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalIntervalForNonDefaultAdvice");
}

id objc_msgSend_totalReceivedUpdates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalReceivedUpdates");
}

id objc_msgSend_trafficClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trafficClass");
}

id objc_msgSend_trafficClassStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trafficClassStart:end:");
}

id objc_msgSend_transportProtocol(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transportProtocol");
}

id objc_msgSend_tunnelIPToInterfaceName_secondaryResultType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tunnelIPToInterfaceName:secondaryResultType:");
}

id objc_msgSend_txcost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "txcost");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_unarchivedDictionaryWithKeysOfClass_objectsOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unassertAgentWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unassertAgentWithOptions:");
}

id objc_msgSend_unpair(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unpair");
}

id objc_msgSend_unpairPeer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unpairPeer:");
}

id objc_msgSend_unpairWithCompletionQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unpairWithCompletionQueue:completionBlock:");
}

id objc_msgSend_unregisterEndpoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterEndpoint:");
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterNetworkAgent");
}

id objc_msgSend_unregisterProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterProxyAgent");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_updateFeasabilityDistanceWithSeqno_metric_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFeasabilityDistanceWithSeqno:metric:");
}

id objc_msgSend_updateIKEv2Role_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIKEv2Role:");
}

id objc_msgSend_updateNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworkAgent:");
}

id objc_msgSend_updateRXCostCheckTime_personal_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRXCostCheckTime:personal:");
}

id objc_msgSend_updateRoutes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateRoutes");
}

id objc_msgSend_upgradeSessionsIfNeeded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "upgradeSessionsIfNeeded");
}

id objc_msgSend_usesModernNetworkAPI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usesModernNetworkAPI");
}

id objc_msgSend_usesTLS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usesTLS");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuid");
}

id objc_msgSend_verifyAndExposeData_withSigner_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyAndExposeData:withSigner:error:");
}

id objc_msgSend_verifySignature_data_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifySignature:data:error:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "version");
}

id objc_msgSend_viable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "viable");
}

id objc_msgSend_virtualInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "virtualInterface");
}

id objc_msgSend_watchSetupData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "watchSetupData");
}

id objc_msgSend_wifiAdviceMonitorTimerSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiAdviceMonitorTimerSource");
}

id objc_msgSend_writeDatagrams_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeDatagrams:completionHandler:");
}

id objc_msgSend_writePrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writePrefix:");
}

id objc_msgSend_writeToAE_plen_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToAE:plen:prefix:");
}
